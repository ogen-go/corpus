{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse-ditto/ditto"
		},
		"file": {
			"name": "ditto-api-2.yml",
			"size": 0,
			"path": "documentation/src/main/resources/openapi/ditto-api-2.yml",
			"byteSize": 407708,
			"content": "openapi: 3.0.0\ninfo:\n  title: Eclipse Dittoâ„¢ HTTP API\n  version: '2'\n  description: |-\n    JSON-based, REST-like API for Eclipse Ditto\n\n    The Eclipse Ditto HTTP API uses response status codes (see [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6))\n    to indicate whether a specific request has been successfully completed, or not.\n\n    The information Ditto provides additionally to the status code (e.g. in API docs, or error codes like. \"things:thing.tooLarge\") might change without advance notice.\n    These are not be considered as official API, and must therefore not be applied in your applications or tests.\nservers:\n  - url: 'https://ditto.eclipseprojects.io/api/2'\n    description: online Ditto Sandbox\n  - url: /api/2\n    description: local Ditto\ntags:\n  - name: Things\n    description: Manage every thing\n  - name: Features\n    description: Structure the features of your things\n  - name: Policies\n    description: Control access to your things\n  - name: Things-Search\n    description: Find every thing\n  - name: Messages\n    description: Talk with your things\n  - name: CloudEvents\n    description: Process CloudEvents in Ditto\n  - name: Connections\n    description: Manage Connections\nsecurity:\n  - Google:\n      - openid\n  - NginxBasic: []\n  - Bearer: []\npaths:\n  /things:\n    get:\n      summary: Retrieve visible things or things with specified IDs\n      description: |-\n        Returns all visible things or things passed in by the required parameter `ids`, which you (the authorized subject) are allowed to read.\n\n        Optionally, if you want to retrieve only some of the thing's fields, you can use the specific field selectors (see parameter `fields`) .\n\n        Tip: In order to formulate a `filter` which things to search for, take a look at the `/search` resource.\n      tags:\n        - Things\n      parameters:\n        - name: ids\n          in: query\n          description: Contains a comma-separated list of `thingId`s to retrieve in one single request.\n          required: false\n          schema:\n            type: string\n        - $ref: '#/components/parameters/ThingFieldsQueryParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The successfully completed request contains a list of the for the user available Things, or the Things asked for via the `ids` paramter.\n            The Things are sorted either by their ID, or in the same order as the Thing IDs were provided in the `ids` parameter.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Thing'\n            application/td+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WotThingDescription'\n        '400':\n          description: The request could not be completed. At least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '414':\n          description: The request could not be completed due to an URI length exceeding 8k characters.\n    post:\n      summary: Create a new thing\n      description: |-\n        Creates a thing with a default `thingId` and a default `policyId`.\n\n        The thing will be empty, i.e. no features, definition, attributes etc. by default.\n\n        The default `thingId` consists of your default namespace and a UUID.\n\n        The default `policyId` is identical with the default `thingId`, and allows the currently authorized subject all permissions.\n\n        In case you need to create a thing with a specific ID, use a *PUT* request instead, as any `thingId` specified in the request body will be ignored.\n\n        The field `_created` is filled automatically with the timestamp of the creation. The field is read-only and can\n        be retrieved later by explicitly selecting it or used in search filters.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/AllowPolicyLockoutParam'\n        - $ref: '#/components/parameters/Namespace'\n      responses:\n        '201':\n          description: The thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` must not be set in the request body\n              * the JSON body of the thing to be created is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed.\n            Possible reasons:\n              * the caller would not have access to the thing after creating it with the given policy.\n              * the caller has insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller had insufficient permissions to read the referenced thing.\n              * the policy that should be copied does not exist.\n              * the caller had insufficient permissions to read the policy that should be copied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example:\n              definition: 'com.acme:coffeebrewer:0.1.0'\n              attributes:\n                manufacturer: ACME demo corp.\n                location: 'Berlin, main floor'\n                serialno: '42'\n                model: Speaking coffee machine\n              features:\n                coffee-brewer:\n                  definition:\n                    - 'com.acme:coffeebrewer:0.1.0'\n                  properties:\n                    brewed-coffees: 0\n                water-tank:\n                  properties:\n                    configuration:\n                      smartMode: true\n                      brewingTemp: 87\n                      tempToHold: 44\n                      timeoutSeconds: 6000\n                    status:\n                      waterAmount: 731\n                      temperature: 44\n        description: 'JSON representation of the thing to be created. Use ''{}'' to create an empty thing with a default policy.'\n  '/things/{thingId}':\n    get:\n      summary: Retrieve a specific thing\n      description: |-\n        Returns the thing identified by the `thingId` path parameter. The response includes details about the thing,\n        including the `policyId`, attributes, definition and features.\n\n        Optionally, you can use the field selectors (see parameter `fields`) to only get specific fields,\n        which you are interested in.\n\n        ### Example:\n        Use the field selector `_policy` to retrieve the content of the policy.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/ThingFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParamPutDescription'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The request successfully returned the specific thing.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n            application/td+json:\n              schema:\n                $ref: '#/components/schemas/WotThingDescription'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * at least one of the defined query parameters is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update a thing with a specified ID\n      description: |-\n        Create or update the thing specified by the `thingId` path parameter and the optional JSON body.\n\n        * If you set a new `thingId` in the path, a thing will be created.\n        * If you set an existing `thingId` in the path, the thing will be updated.\n\n\n        ### Create a new thing\n        At the initial creation of a thing, only a valid `thingId` is required.\n        However, you can create a full-fledged thing all at once.\n\n        ### Example:\n        To create a coffee maker thing, set the `thingId` in the path, e.g. to \"com.acme.coffeemaker:BE-42\"\n        and the body part, like in the following snippet.\n\n        ```\n         {\n           \"definition\": \"com.acme:coffeebrewer:0.1.0\",\n           \"attributes\": {\n             \"manufacturer\": \"ACME demo corp.\",\n             \"location\": \"Berlin, main floor\",\n             \"serialno\": \"42\",\n             \"model\": \"Speaking coffee machine\"\n           },\n           \"features\": {\n             \"coffee-brewer\": {\n               \"definition\": [ \"com.acme:coffeebrewer:0.1.0\" ],\n               \"properties\": {\n                 \"brewed-coffees\": 0\n               }\n             },\n             \"water-tank\": {\n               \"properties\": {\n                 \"configuration\": {\n                   \"smartMode\": true,\n                   \"brewingTemp\": 87,\n                   \"tempToHold\": 44,\n                   \"timeoutSeconds\": 6000\n                 },\n                 \"status\": {\n                   \"waterAmount\": 731,\n                   \"temperature\": 44\n                 }\n               }\n             }\n           }\n          }\n         ```\n        As the example does not set a policy in the request body, but the thing concept requires one,\n        the service will create a default policy. The default policy, has the exactly same id\n        as the thing, and grants ALL permissions to the authorized subject.\n\n        In case you need to associate the new thing to an already existing policy you can additionally\n        set a policy e.g. \"policyId\": \"com.acme.coffeemaker:policy-1\" as the first element in the body part.\n        Keep in mind, that you can also change the assignment to another policy anytime,\n        with a request on the sub-resource \"PUT /things/{thingId}/policyId\"\n\n        The field `_created` is filled automatically with the timestamp of the creation. The field is read-only and can\n        be retrieved later by explicitly selecting it or used in search filters.\n\n        ### Update an existing thing\n\n        For updating an existing thing, the authorized subject needs **WRITE** permission on the thing's root resource.\n\n        The ID of a thing cannot be changed after creation. Any `thingId`\n        specified in the request body is therefore ignored.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '204':\n          description: The thing was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON body of the thing to be created/modified is invalid\n              * the JSON body of the thing to be created/modified contains a `thingId`\n              which does not match the ID in the path\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller would not have access to the thing after creating it with the given policy\n              * the caller has insufficient permissions.\n                For modifying an existing thing, an unrestricted `WRITE` permission on the thing's root resource is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to read the referenced thing.\n              * the policy that should be copied does not exist.\n              * the caller has insufficient permissions to read the policy that should be copied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example:\n              definition: 'com.acme:coffeebrewer:0.1.0'\n              attributes:\n                manufacturer: ACME demo corp.\n                location: 'Berlin, main floor'\n                serialno: '42'\n                model: Speaking coffee machine\n              features:\n                coffee-brewer:\n                  definition:\n                    - 'com.acme:coffeebrewer:0.1.0'\n                  properties:\n                    brewed-coffees: 0\n                water-tank:\n                  properties:\n                    configuration:\n                      smartMode: true\n                      brewingTemp: 87\n                      tempToHold: 44\n                      timeoutSeconds: 6000\n                    status:\n                      waterAmount: 731\n                      temperature: 44\n        description: JSON representation of the thing to be modified.\n    patch:\n      summary: Patch a thing with a specified ID\n      description: |-\n        Patch an existing thing specified by the `thingId` path parameter.\n\n        Patching a thing will merge the provided request body with the exisiting thing.\n        This makes it possible to change only some parts of a thing in single request without providing the full thing\n        structure in the request body.\n\n\n        ### Patch a thing\n\n        With this resource it is possible to add, update or delete parts of an existing thing.\n        The request body provided in *JSON merge patch* (RFC-7396) format will be merged with the existing thing.\n        Notice that the `null` value in the JSON body will delete the specified JSON key from the thing.\n        For further documentation of JSON merge patch see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n\n        ### Example\n        A Thing already exists with the following content:\n\n        ```\n        {\n          \"definition\": \"com.acme:coffeebrewer:0.1.0\",\n          \"attributes\": {\n            \"manufacturer\": \"ACME demo corp.\",\n            \"location\": \"Berlin, main floor\",\n            \"serialno\": \"42\",\n            \"model\": \"Speaking coffee machine\"\n          },\n          \"features\": {\n            \"coffee-brewer\": {\n              \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n              \"properties\": {\n                \"brewed-coffees\": 0\n              }\n            },\n            \"water-tank\": {\n              \"properties\": {\n                \"configuration\": {\n                  \"smartMode\": true,\n                  \"brewingTemp\": 87,\n                  \"tempToHold\": 44,\n                  \"timeoutSeconds\": 6000\n                },\n                \"status\": {\n                  \"waterAmount\": 731,\n                  \"temperature\": 44\n                }\n              }\n            }\n          }\n        }\n        ```\n\n        To make changes that only affect parts of the existing thing, e.g. add some attribute and delete a\n        specific feature property, the content of the request body could look like this:\n\n        ```\n        {\n          \"attributes\": {\n            \"manufacturingYear\": \"2020\"\n          },\n          \"features\": {\n            \"water-tank\": {\n              \"properties\": {\n                \"configuration\": {\n                  \"smartMode\": null,\n                  \"tempToHold\": 50,\n                }\n              }\n            }\n          }\n        }\n        ```\n\n        The request body will be merged with the existing thing and the result will be the following thing:\n\n        ```\n        {\n          \"definition\": \"com.acme:coffeebrewer:0.1.0\",\n          \"attributes\": {\n            \"manufacturer\": \"ACME demo corp.\",\n            \"manufacturingYear\": \"2020\",\n            \"location\": \"Berlin, main floor\",\n            \"serialno\": \"42\",\n            \"model\": \"Speaking coffee machine\"\n          },\n          \"features\": {\n            \"coffee-brewer\": {\n              \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n              \"properties\": {\n                \"brewed-coffees\": 0\n              }\n            },\n            \"water-tank\": {\n              \"properties\": {\n                \"configuration\": {\n                  \"brewingTemp\": 87,\n                  \"tempToHold\": 50,\n                  \"timeoutSeconds\": 6000\n                },\n                \"status\": {\n                  \"waterAmount\": 731,\n                  \"temperature\": 44\n                }\n              }\n            }\n          }\n        }\n        ```\n\n        ### Permissions for patching an existing Thing\n\n        For updating an existing thing, the authorized subject needs **WRITE** permission on those parts of the thing\n        that are affected by the merge update.\n\n        For example, to successfully execute the above example the authorized subject needs to have unrestricted\n        *WRITE* permissions on all affected paths of the JSON merge patch: `attributes/manufacturingYear`,\n        `features/water-tank/properties/configuration/smartMode`,\n        `features/water-tank/properties/configuration/tempToHold`. The *WRITE* permission must not be revoked on any\n        level further down the hierarchy. Consequently it is also sufficient for the authorized subject to have\n        unrestricted *WRITE* permission at root level or unrestricted *WRITE* permission at `/attributes` and\n        `/features` etc.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The thing was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the JSON body of the thing to be patched is invalid\n              * the JSON body of the thing to be patched contains a `thingId` which does not match the ID in the path\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller would not have access to the thing after creating it with the given policy\n              * the caller has insufficient permissions.\n                For modifying an existing thing, an unrestricted `WRITE` permission on the thing's root resource is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to read the referenced thing.\n              * the policy that should be copied does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/PatchThing'\n            example:\n              attributes:\n                manufacturingYear: '2020'\n              features:\n                water-tank:\n                  properties:\n                    configuration:\n                      smartMode: null\n                      tempToHold: 50\n        description: JSON representation of the thing to be patched.\n    delete:\n      summary: Delete a specific thing\n      description: |-\n        Deletes the thing identified by the `thingId` path parameter.\n\n        This will not delete the policy, which is used for controlling access to this thing.\n\n        You can delete the policy afterwards via DELETE `/policies/{policyId}` if you don't need it for other things.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The thing was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller had insufficient permissions.\n                For deleting an existing thing, an unrestricted `WRITE` permission on the thing's root resource is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/definition':\n    get:\n      summary: Retrieve the definition of a specific thing\n      description: Returns the definition of the thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The request successfully returned the definition of the specific thing.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Definition'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n            * the `thingId` does not conform to the namespaced entity ID notation\n            (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the definition of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update the definition of a specific thing\n      description: |-\n        * If the thing does not have a definition yet, this request will create it.\n        * If the thing already has a definition you can assign it to a new one by setting the new definition in the request body.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The definition was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created definition resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Definition'\n        '204':\n          description: The definition was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation\n                (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON was invalid\n              * the request body was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying a definition of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Definition'\n    patch:\n      summary: Patch the definition of a specific thing\n      description: |-\n        * If the thing does not have a definition yet, this request will create it.\n        * If the thing already has a definition you can replace it by providing the new definition in the request body.\n        * If the request body is set to `null` then the defintion will be deleted.\n\n        Notice that the `null` value in the JSON body has a special meaning and will delete the definition from the thing.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The definition was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation\n                (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON was invalid\n              * the request body was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying a definition of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/Definition'\n            example: '\"example:test:definition\"'\n        description: |-\n          JSON string representation of the definition to be patched.\n\n          Consider that the value has to be a JSON string.\n\n          Examples:\n\n            * a string: `\"value\"` - Currently the definition should follow the pattern: [_a-zA-Z0-9\\-]:[_a-zA-Z0-9\\-]:[_a-zA-Z0-9\\-]\n            * an empty string: `\"\"`\n            * `null`: the definition will be deleted\n    delete:\n      summary: Delete the definition of a specific thing\n      description: Deletes the definition of the thing identified by the `thingId`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The definition was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` does not conform to the namespaced entity ID notation\n            (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying a definition of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID or its definition was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/policyId':\n    get:\n      summary: Retrieve the policy ID of a thing\n      description: Returns the policy ID of the thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The request successfully returned the policy ID.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Update the policy ID of a thing\n      description: |-\n        Update the policy ID of the thing identified by the `thingId` path parameter.\n\n        ### Update\n        If the thing already has a `policyId` you can assign it to an existing policy by setting the new `policyId`\n        in the request body.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The policy ID was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The thing with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '\"your.namespace:your-policy-name\"'\n        description: |-\n          The policy is used for controlling access to this thing. It is managed by\n          resource `/policies/{policyId}`.\n\n          The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n        required: true\n    patch:\n      summary: Patch the policy ID of a thing\n      description: |-\n        Patch the policy ID of the thing identified by the `thingId` path parameter.\n\n        The `policyId` of the thing will be updated.\n        Notice that for this resource it is not possible to remove the `policyId` from the thing by setting the\n        payload to `null`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: 'The policy ID was successfully patched. Note: You will need to create the policy content separately.'\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the `policyId` can not be removed from a thing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: string\n              example: '\"your.namespace:your-policy-name\"'\n        description: |-\n          The policy is used for controlling access to this thing. It is managed by resource `/policies/{policyId}`.\n\n          The ID of a policy needs to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n        required: true\n  '/things/{thingId}/attributes':\n    get:\n      summary: List all attributes of a specific thing\n      description: Returns all attributes of the thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/AttributesFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The attributes of the specific thing were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n            * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update all attributes of a specific thing at once\n      description: |-\n        Create or update the attributes of a thing identified by the `thingId`\n        path parameter. The attributes will be overwritten - all at once - with the\n        content (JSON) set in the request body.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The attributes were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created attribute resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '204':\n          description: The attributes were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the attributes to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the attributes of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Attributes'\n    patch:\n      summary: Patch all attributes of a specific thing\n      description: |-\n        Patch the attributes of a thing identified by the `thingId` path parameter.\n        The existing attributes will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value has a special meaning and can be used to delete all or specific attributes from a thing.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        **Note**: In contrast to the \"PUT things/{thingId}/attributes\" request,\n        a partial update is supported here and request body is merged with the existing attributes.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The attributes were successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the attributes to be patched is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the attributes of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/Attributes'\n            example:\n              manufacturer:\n                name: ACME demo corp.\n                location: 'Berlin, main floor'\n              coffeemaker:\n                serialno: '42'\n                model: Speaking coffee machine\n        description: |-\n          JSON object of all attributes to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).\n\n          Examples:\n            * a simple object: `{ \"key\": \"value\"}` - We strongly recommend to use a restricted set of characters for the key (identifier), as the key might be needed for the (URL) path later.\u003cbr\u003e Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n            * a nested object as shown in the example value\n            * `null`: deletes all attributes\n        required: true\n    delete:\n      summary: Delete all attributes of a specific thing at once\n      description: Deletes all attributes of the thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The attributes were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting all attributes of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID or its attributes were not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/attributes/{attributePath}':\n    get:\n      summary: Retrieve a specific attribute of a specific thing\n      description: |-\n        Returns a specific attribute of the thing identified by the `thingId` path parameter.\n\n        The attribute (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example:\n\n        In order to retrieve the `name` field of an `manufacturer` attribute, the full path would be\n        `/things/{thingId}/attributes/manufacturer/name`\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/AttributesPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The attribute was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The thing with the given ID or\n            the attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update a specific attribute of a specific thing\n      description: |-\n        Create or update a specific attribute of the thing identified by the `thingId` path parameter.\n\n        * If you specify a new attribute path, this will be created\n        * If you specify an existing attribute path, this will be updated\n\n        The attribute (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example:\n\n        In order to put the `name` field of an `manufacturer` attribute, the full path would be\n        `/things/{thingId}/attributes/manufacturer/name`\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/AttributesPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The attribute was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created attribute resource\n              schema:\n                type: string\n        '204':\n          description: The attribute was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying an attribute of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    patch:\n      summary: Patch a specific attribute of a specific thing\n      description: |-\n        Patch a specific attribute of a thing identified by the `thingId` path parameter.\n\n        * If you specify a new attribute path, this will be created\n        * If you specify an existing attribute path, this will be merged\n        * If you set the request body to `null` for an existing attribute path then the attribute will be deleted.\n          For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        The attribute (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example:\n\n        In order to patch the `name` field of an `manufacturer` attribute, the full path would be\n        `/things/{thingId}/attributes/manufacturer/name`\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/AttributesPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The attribute was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying an attribute of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchValue'\n    delete:\n      summary: Delete a specific attribute of a specific thing\n      description: |-\n        Deletes a specific attribute of the thing identified by the `thingId` path parameter.\n\n        The attribute (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example:\n        In order to delete the `name` field of an `manufacturer` attribute, the full path would be\n        `/things/{thingId}/attributes/manufacturer/name`\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/AttributesPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The attribute was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting a single attribute of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID or the attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features':\n    get:\n      summary: List all features of a specific thing\n      description: Returns all features of the thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeaturesFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: |-\n            The list of features of the specific thing were successfully\n            retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example:\n                featureId1:\n                  definition:\n                    - 'namespace:definition1:v1.0'\n                  properties:\n                    property1: value1\n                featureId2:\n                  definition:\n                    - 'namespace:definition2:v1.0'\n                  properties:\n                    property2: value2\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined query parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The thing with the given ID was\n            not found or the features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify all features of a specific thing at once\n      description: |-\n        Create or modify all features of a thing identified by the `thingId` path parameter.\n\n        ### Create all features at once\n        In case at the initial creation of your thing you have not specified any features, these can be created here.\n\n        ### Update all features at once\n        To update all features at once prepare the JSON body accordingly.\n\n        Note: In contrast to the \"PUT thing\" request, a partial update is not supported here,\n        but the content will be **overwritten**.\n        If you need to update single features or their paths, please use the sub-resources instead.\n\n        ### Example:\n\n        ```\n        {\n             \"coffee-brewer\": {\n               \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n               \"properties\": {\n                 \"brewed-coffees\": 0\n               }\n             },\n             \"water-tank\": {\n               \"properties\": {\n                 \"configuration\": {\n                   \"smartMode\": true,\n                   \"brewingTemp\": 87,\n                   \"tempToHold\": 44,\n                   \"timeoutSeconds\": 6000\n                 },\n                 \"status\": {\n                   \"waterAmount\": 731,\n                   \"temperature\": 44\n                 }\n               }\n             }\n        }\n        ```\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The features were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created features resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example: {}\n        '204':\n          description: The features were successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying all features of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Features'\n            example:\n              coffee-brewer:\n                properties:\n                  definition:\n                    - 'com.acme:coffeebrewer:0.1.0'\n                  brewed-coffees: 0\n              water-tank:\n                properties:\n                  configuration:\n                    smartMode: true\n                    brewingTemp: 87\n                    tempToHold: 44\n                    timeoutSeconds: 6000\n                  status:\n                    waterAmount: 731\n                    temperature: 44\n        description: |-\n          JSON object of all features to be modified at once. Consider that the value has to be a JSON object or null.\n\n          Examples:\n          * an empty object: {} - would just delete all old features\n          * an empty feature: { \"featureId\": {} } - We strongly recommend to use a restricted set of characters\n            for the `featureId`, as it might be needed for the (URL) path later.\n\n            Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9-]*\n\n          * a nested object with multiple features as shown in the example value field\n        required: true\n    patch:\n      summary: Patch all features of a specific thing\n      description: |-\n        Patch all features of a thing identified by the `thingId` path parameter.\n\n        The existing features will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value has a special meaning and can be used to delete specific features from the thing.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        **Note**: In contrast to the \"PUT thing/{thingId}/features\" request, a partial update is supported here\n        and request body is merged with the existing features.\n\n        ### Example\n\n        The following example will add/update the properties `brewed-coffees`, `tempToHold` and `failState`.\n        The configuration property `smartMode` will be deleted from the thing.\n\n\n        ```\n        {\n          \"coffee-brewer\": {\n            \"properties\": {\n              \"brewed-coffees\": 10\n            }\n          },\n          \"water-tank\": {\n            \"properties\": {\n              \"configuration\": {\n                \"smartMode\": null,\n                \"tempToHold\": 50,\n              },\n              \"status\": {\n                \"failState\": true\n              }\n            }\n          }\n        }\n        ```\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The features were successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying all features of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/Features'\n            example:\n              coffee-brewer:\n                properties:\n                  brewed-coffees: 10\n              water-tank:\n                properties:\n                  configuration:\n                    smartMode: null\n                    tempToHold: 50\n                  status:\n                    failState: true\n        description: |-\n          JSON object of all features to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).\n\n          Examples:\n          * a nested object with multiple features as shown in the example value field\n\n          * **Note**: To delete certain entries of a feature the `null` value can be used.\n            For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n        required: true\n    delete:\n      summary: Delete all features of a specific thing\n      description: Deletes all features of the thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The features were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting all features of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The thing with the given ID was\n            not found or the features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}':\n    get:\n      summary: Retrieve a specific feature of a specific thing\n      description: |-\n        Returns a specific feature identified by the `featureId` path parameter of the thing\n        identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/FeatureFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The feature was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n            application/td+json:\n              schema:\n                $ref: '#/components/schemas/WotThingDescription'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined query parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The thing with the given ID or\n            the feature with the specified `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify a specific feature of a specific thing\n      description: |-\n        Create or modify a specific feature identified by the `featureId` path\n        parameter of the thing identified by the `thingId` path parameter.\n\n        ### Create feature\n        If the feature ID is new, the feature and all content from the JSON body will be created\n\n        ### Update feature\n        If the feature ID is used already in this thing, the feature will be overwrittern\n        with the content from the JSON body.\n\n        ### Example:\n        Set the `featureId` to **coffee-brewer** and all properties in the body part.\n\n        ```\n        {\n          \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n          \"properties\": {\n            \"brewed-coffees\": 42\n          }\n        }\n        ```\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The feature was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created feature resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        '204':\n          description: The feature was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying a single feature of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Feature'\n            example:\n              definition:\n                - 'com.acme:coffeemaker:0.1.0'\n                - 'com.acme:coffeemaker:1.1.0'\n              properties:\n                connected: true\n                brewed-coffees: 0\n        description: |-\n          JSON representation of the feature to be created/modified.\n          Consider that the value has to be a JSON object or null.\n\n          Examples:\n          * an empty object: {} - would just create the featureID but would delete all content of the feature\n          * a nested object with multiple model definitions and multiple properties as shown in the example value field\n        required: true\n    patch:\n      summary: Patch a specific feature of a specific thing\n      description: |-\n        Patch a specific feature identified by the `featureId` path parameter of a thing identified by the `thingId` path parameter.\n\n        The existing feature will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value can be used to delete the whole feature or specific parts of it.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        **Note**: In contrast to the \"PUT things/{thingId}/features/{featureId}\" request,\n        a partial update is supported here and request body is merged with the existing feature.\n\n        ### Example\n\n        Set the `featureId` to **coffee-brewer** and all properties in the body part\n        to update the `brewed-coffees` property and delete the definition.\n\n        ```\n        {\n          \"definition\": null,\n          \"properties\": {\n            \"brewed-coffees\": 42\n          }\n        }\n        ```\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The feature was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying a single feature of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/Feature'\n            example:\n              definition: null\n              properties:\n                connected: true\n                brewed-coffees: 0\n        description: |-\n          JSON representation of the feature to be patched. Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).\n\n          Examples:\n          * a nested object with multiple model definitions and multiple properties as shown in the example value field\n          * **Note**: To delete certain properties of a feature the `null` value can be used.\n            For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n        required: true\n    delete:\n      summary: Delete a specific feature of a specific thing\n      description: |-\n        Deletes a specific feature identified by the `featureId` path parameter\n        of the thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The feature was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting a single feature of an existing thing, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing with the given ID or the feature at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}/definition':\n    get:\n      summary: List the definition of a feature\n      description: Returns the complete definition field of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The definition was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined query parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no\n            definition or the thing with the specified `thingId` or the feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update the definition of a feature\n      description: |-\n        Create or update the complete definition of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The definition field will be overwritten with the JSON array set in the request body\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The definition was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created definition resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '204':\n          description: The definition was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the definition of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureDefinition'\n            example:\n              - 'com.acme:coffeebrewer:0.1.0'\n              - 'com.acme:coffeebrewer:1.0.0'\n        description: |-\n          JSON array of the complete definition to be updated.\n\n          Consider that the value has to be a JSON array or `null`.\n\n          The content of the JSON array are strings in the format `\"\u003cnamespace\u003e:\u003cname\u003e:\u003cversion\u003e\"` or a valid HTTP(s) URL, which is enforced.\n        required: true\n    patch:\n      summary: Patch the definition of a feature\n      description: |-\n        Patch the definition of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The existing definition field will be overwritten with the JSON array set in the request body.\n\n        Notice that the `null` value can be used to delete the definition of a feature.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The definition was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the definition of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/FeatureDefinition'\n            example:\n              - 'com.acme:coffeebrewer:0.1.0'\n              - 'com.acme:coffeebrewer:1.1.0'\n        description: |-\n          JSON array of the complete definition to be patched. Consider that the value has to be a JSON array.\n\n          The content of the JSON array are strings in the format `\"\u003cnamespace\u003e:\u003cname\u003e:\u003cversion\u003e\"` or a valid HTTP(s) URL, which is enforced.\n          To delete the definition use `null` as content in the request body.\n        required: true\n    delete:\n      summary: Delete the definition of a feature\n      description: Deletes the complete definition of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The definition was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting the definition of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no definition or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}/properties':\n    get:\n      summary: List all properties of a feature\n      description: Returns all properties of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertiesFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The properties were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined query parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no properties or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update all properties of a feature at once\n      description: |-\n        Create or update the properties of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The properties will be overwritten with the JSON content from the request body.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The properties were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '204':\n          description: The properties were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature properties to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example:\n              configuration:\n                smartMode: true\n                brewingTemp: 87\n                tempToHold: 44\n                timeoutSeconds: 6000\n              status:\n                waterAmount: 731\n                temperature: 44\n        description: |-\n          JSON object of all properties to be updated at once.\n\n          Consider that the value has to be a JSON object or `null`. We strongly recommend to use\n          a restricted set of characters for the key (identifier).\n\n          Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    patch:\n      summary: Patch all properties of a feature\n      description: |-\n        Patch the properties of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The existing properties will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value can be used to delete specific feature properties.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        **Note**: In contrast to the \"PUT things/{thingId}/features/{featureId}/properties\" request,\n        a partial update is supported here and request body is merged with the existing properties.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The properties were successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the feature properties to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example:\n              configuration:\n                smartMode: null\n                brewingTemp: 87\n                tempToHold: 44\n                timeoutSeconds: 6000\n              status:\n                waterAmount: 731\n                temperature: 44\n        description: |-\n          JSON object of all properties to be patched.\n\n          Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396).\n          We strongly recommend to use a restricted set of characters for the key (identifier).\n\n          Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    delete:\n      summary: Delete all properties of a feature\n      description: Deletes all properties of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The properties were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting the properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no properties or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}/properties/{propertyPath}':\n    get:\n      summary: Retrieve a specific property of a feature\n      description: |-\n        Returns the a specific property path of the feature identified by the `thingId` and `featureId` path parameter.\n\n        The property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901)\n\n        ### Example\n        To retrieve the value of the `brewingTemp` in the `water-tank` of our coffeemaker example the full path is:\n        `/things/{thingId}/features/water-tank/properties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The property was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified property or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update a specific property of a feature\n      description: |-\n        Create or update a specific property of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The property will be created if it doesn't exist or else updated.\n\n        The property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901),\n\n        ### Example\n        To set the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n        `/things/{thingId}/features/water-tank/properties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The property was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '204':\n          description: The property was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For creating/updating a property of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    patch:\n      summary: Patch a specific property of a feature\n      description: |-\n        Patch a specific property of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The existing property will be merged with the existing one of the thing.\n\n        Notice that the `null` value can be used to delete the specified propertyPath.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        The property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example\n        To set the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n\n        `/things/{thingId}/features/water-tank/properties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The property was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For creating/updating a property of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchValue'\n    delete:\n      summary: Delete a specific property of a feature\n      description: |-\n        Deletes a specific property of the feature identified by the `thingId` and `featureId` path parameter.\n\n        The property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901)\n\n        ### Example\n        To delete the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n        `/things/{thingId}/features/water-tank/properties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The property was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting the properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified property or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}/desiredProperties':\n    get:\n      summary: List all desired properties of a feature\n      description: Returns all desired properties of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/DesiredPropertiesFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The desired properties were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined query parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no desired properties or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update all desired properties of a feature at once\n      description: |-\n        Create or update the desired properties of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The desired properties will be overwritten with the JSON content from the request body.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The desired properties were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '204':\n          description: The desired properties were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the desired feature roperties to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the desired properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example:\n              configuration:\n                smartMode: true\n                brewingTemp: 87\n                tempToHold: 44\n                timeoutSeconds: 6000\n              status:\n                waterAmount: 731\n                temperature: 44\n        description: |-\n          JSON object of all desried properties to be updated at once.\n\n          Consider that the value has to be a JSON object or `null`. We strongly recommend to use\n          a restricted set of characters for the key (identifier).\n\n          Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    patch:\n      summary: Patch all desired properties of a feature\n      description: |-\n        Patch the desired properties of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The existing desired properties will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value can be used to delete the whole feature or specific parts of it.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        **Note**: In contrast to the \"PUT things/{thingId}/features/{featureId}/desiredProperties\" request,\n        a partial update is supported here and request body is merged with the existing desired properties.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The desired properties were successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body of the desired feature roperties to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For modifying the desired properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example:\n              configuration:\n                smartMode: null\n                brewingTemp: 87\n                tempToHold: 44\n                timeoutSeconds: 6000\n              status:\n                waterAmount: 731\n                temperature: 44\n        description: |-\n          JSON object of all desried properties to be patched.\n\n          Consider that the value has to be a [JSON merge patch](https://tools.ietf.org/html/rfc7396). We strongly recommend to use\n          a restricted set of characters for the key (identifier).\n\n          Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    delete:\n      summary: Delete all desired properties of a feature\n      description: Deletes all desired properties of the feature identified by the `thingId` and `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The desired properties were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting the desired properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified feature has no desired properties or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/features/{featureId}/desiredProperties/{propertyPath}':\n    get:\n      summary: Retrieve a specific desired property of a feature\n      description: |-\n        Returns the a specific desired property path of the feature identified by the `thingId` and `featureId` path parameter.\n\n        The desired property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901)\n\n        ### Example\n        To retrieve the value of the `brewingTemp` in the `water-tank` of our coffeemaker example the full path is:\n\n        `/things/{thingId}/features/water-tank/desiredProperties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/GetMetadataParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n        - $ref: '#/components/parameters/LiveChannelConditionParam'\n        - $ref: '#/components/parameters/LiveChannelTimeoutStrategyParam'\n      responses:\n        '200':\n          description: The desired property was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            live-channel-condition-matched:\n              description: Whether or not the live-channel-condition did match and the thing was retrieved from the device.\n              schema:\n                type: boolean\n            channel:\n              description: The cannel which was used to retrieve the thing.\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified desired property or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update a specific desired property of a feature\n      description: |-\n        Create or update a specific desired property of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The desired property will be created if it doesn't exist or else updated.\n\n        The desired property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901),\n\n        ### Example\n        To set the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n\n        `/things/{thingId}/features/water-tank/desiredProperties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '201':\n          description: The desired property was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '204':\n          description: The desired property was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For creating/updating a desired property of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    patch:\n      summary: Patch a specific desired property of a feature\n      description: |-\n        Patch a specific desired property of a feature identified by the `thingId` and `featureId` path parameter.\n\n        The exisiting desired property of a feature will be merged with the JSON content set in the request body.\n\n        Notice that the `null` value can be used to delete the specified propertyPath.\n        For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n\n        The desired property (JSON) can be referenced hierarchically, by applying JSON Pointer notation (RFC-6901).\n\n        ### Example\n        To set the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n        `/things/{thingId}/features/water-tank/desiredProperties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/PutMetadataParam'\n        - $ref: '#/components/parameters/DeleteMetadataParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The desired property was successfully patched.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * the JSON body is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For creating/updating a desired property of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The thing or the feature with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchValue'\n    delete:\n      summary: Delete a specific desired property of a feature\n      description: |-\n        Deletes a specific desired property of the feature identified by the `thingId`\n        and `featureId` path parameter.\n\n        The desired property (JSON) can be referenced\n        hierarchically, by applying JSON Pointer notation (RFC-6901)\n\n        ### Example\n        To delete the value of the brewingTemp in the water-tank of our coffeemaker example the full path is:\n\n        `/things/{thingId}/features/water-tank/desiredProperties/configuration/brewingTemp`\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/PropertyPathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/RequestedAcksParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/ConditionParam'\n        - $ref: '#/components/parameters/ChannelParam'\n      responses:\n        '204':\n          description: The desired property was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                For deleting the properties of an existing feature, `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified desired property or\n            the thing with the specified `thingId` or the feature with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n  '/things/{thingId}/inbox/claim':\n    post:\n      summary: Initiates claiming a specific thing in order to gain access\n      description: |-\n        ### Why\n        A claiming process may enable an end-user to claim things and proof ownership thereof.\n        Such a process is initially triggered via a claim message.\n        This message can be sent to the things service with the HTTP API or the things-client.\n\n        ### How\n        At this resource you can send a \"claim\" message to the thing identified\n        by the `thingId` path parameter in order to gain access to it. The \"claim\" message is forwarded\n        together with the request body and `Content-Type` header to client(s)\n        which registered for Claim messages of the specific thing.\n\n        The decision whether to grant access (by setting permissions) is\n        completely up to the client(s) which handle the \"claim\" message.\n\n        The HTTP request blocks until all acknowledgement requests are fulfilled.\n        By default, it blocks until a response to the issued \"claim\" message is\n        available or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        Note that the client chooses which HTTP status code it wants to return. Ditto\n        will forward the status code to you. (Also note that '204 - No Content' status code\n        will never return a body, even if the client responded with a body).\n\n        ### Who\n        No special permission is required to issue a claim message.\n\n        ### Example\n        See [Claiming](https://www.eclipse.org/ditto/protocol-specification-things-messages.html#sending-and-handling-claim-messages) concept in detail and example in GitHub.\n        However, in that scenario, the policy should grant you READ and WRITE permission on\n        the \"message:/\" resource in order to be able to send the message and read the response.\n        Further, the things-client which handles the \"claim\" message, needs permission to change the policy itself\n        (i.e. READ and WRITE permission on the \"policy:/\" resource).\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/MessageClaimTimeoutParam'\n        - $ref: '#/components/parameters/LiveMessageRequestedAcksParam'\n      responses:\n        '200':\n          description: |-\n            The Claim message was processed successfully and the response body\n            contains the custom response. The response body may contain\n            arbitrary data chosen by the recipient. The response code defaults\n            to `200` but may be chosen by the recipient too.\n        '204':\n          description: |-\n            The Claim message was processed successfully and no custom response\n            body was set. The response code defaults to `204` but may be chosen\n            by the recipient.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined path parameters is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/MessageTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n        '429':\n          description: |-\n            The user has sent too many requests in a given amount of time (\"rate\n            limiting\").\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/inbox/messages/{messageSubject}':\n    post:\n      summary: Send a message TO a specific thing\n      description: |-\n        ### Why\n        A message can be sent to a thing or one of its features in order to invoke an operation on the device.\n\n        ### How\n        Send a message with a `messageSubject` **to** the thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type.\n\n        The HTTP request blocks until all acknowledgement requests are fulfilled.\n        By default, it blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n\n        Note that the client chooses which HTTP status code it wants to return. Ditto\n        will forward the status code to you. (Also note that '204 - No Content' status code\n        will never return a body, even if the client responded with a body).\n\n        ### Who\n        You will need `WRITE` permission on the root \"message:/\" resource, or at least\n        the resource `message:/inbox/messages/messageSubject`. The receiving device needs `READ` permission on the resource.\n        Such permission is managed within the policy which controls the access on the thing.\n\n        ### Example\n        Given you have a \"coffemaker\" thing as shown in the examples for the `things` resources.\n        The `messageSubject` understood by such a device would be \"makeCoffee\".\n\n        Further, as in our example the \"brewed-coffees\" counter would increase as a response, you would need `WRITE`\n        permission for the things resource, at least at the respective path\n\n        `/things/{thingId}/features/coffee-brewer/properties/brewed-coffees`\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/MessageSubjectPathParam'\n        - $ref: '#/components/parameters/MessageTimeoutParam'\n        - $ref: '#/components/parameters/LiveMessageRequestedAcksParam'\n        - $ref: '#/components/parameters/ConditionParam'\n      responses:\n        '202':\n          description: The message was sent but not necessarily received by the thing (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined path parameters is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the resource `message:/inbox/messages/{messageSubject}`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to interact with the messages of referenced thing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/MessageTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/outbox/messages/{messageSubject}':\n    post:\n      summary: Send a message FROM a specific thing\n      description: |-\n        Send a message with the subject `messageSubject` **from** the thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type.\n\n        The HTTP request blocks until all acknowledgement requests are fulfilled.\n        By default, it blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n\n        Note that the client chooses which HTTP status code it wants to return. Ditto\n        will forward the status code to you. (Also note that '204 - No Content' status code\n        will never return a body, even if the client responded with a body).\n\n        ### Who\n        You will need `WRITE` permission on the root \"message:/\" resource, or at least\n        the resource `message:/outbox/messages/messageSubject`.\n        Such permission is managed  within the policy which controls the access on the thing.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/MessageSubjectPathParam'\n        - $ref: '#/components/parameters/MessageTimeoutParam'\n        - $ref: '#/components/parameters/LiveMessageRequestedAcksParam'\n        - $ref: '#/components/parameters/ConditionParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined path parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the resource `message:/outbox/messages/{messageSubject}`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to interact with the messages of referenced thing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/MessageTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/features/{featureId}/inbox/messages/{messageSubject}':\n    post:\n      summary: Send a message TO a specific feature of a specific thing\n      description: |-\n        Send a message with the subject `messageSubject` **to** the feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type.\n\n        The HTTP request blocks until all acknowledgement requests are fulfilled.\n        By default, it blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n\n        Note that the client chooses which HTTP status code it wants to return. Ditto\n        will forward the status code to you. (Also note that '204 - No Content' status code\n        will never return a body, even if the client responded with a body).\n\n        ### Who\n        You will need `WRITE` permission on the root \"message:/\" resource, or at least\n        the resource `message:/features/featureId/inbox/messages/messageSubject`. The receiving device needs `READ` permission on the resource.\n        Such permission is managed  within the policy which controls the access on the thing.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/MessageSubjectPathParam'\n        - $ref: '#/components/parameters/MessageTimeoutParam'\n        - $ref: '#/components/parameters/LiveMessageRequestedAcksParam'\n        - $ref: '#/components/parameters/ConditionParam'\n      responses:\n        '202':\n          description: |-\n            The message was sent but not necessarily received by the feature\n            (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined path parameters is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n             * the caller has insufficient permissions.\n               You need `WRITE` permission on the resource `message:/features/{featureId}/inbox/messages/{messageSubject}`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to interact with the messages of referenced thing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/MessageTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/features/{featureId}/outbox/messages/{messageSubject}':\n    post:\n      summary: Send a message FROM a specific feature of a specific thing\n      description: |-\n        Send a message with the subject `messageSubject` **from** the feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type.\n\n        The HTTP request blocks until all acknowledgement requests are fulfilled.\n        By default, it blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n\n        Note that the client chooses which HTTP status code it wants to return. Ditto\n        will forward the status code to you. (Also note that '204 - No Content' status code\n        will never return a body, even if the client responded with a body).\n\n        ### Who\n        You will need `WRITE` permission on the root \"message:/\" resource, or at least\n        the resource `message:/features/featureId/outbox/messages/messageSubject`.\n        Such permission is managed  within the policy which controls the access on the thing.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/ThingIdPathParam'\n        - $ref: '#/components/parameters/FeatureIdPathPathParam'\n        - $ref: '#/components/parameters/MessageSubjectPathParam'\n        - $ref: '#/components/parameters/MessageTimeoutParam'\n        - $ref: '#/components/parameters/LiveMessageRequestedAcksParam'\n        - $ref: '#/components/parameters/ConditionParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `thingId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n              * at least one of the defined path parameters is valid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the resource `message:/features/{featureId}/outbox/messages/{messageSubject}`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to interact with the messages of referenced thing.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/MessageTooLarge'\n        '424':\n          $ref: '#/components/responses/DependencyFailed'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/policies/{policyId}':\n    get:\n      summary: Retrieve a specific policy\n      description: |-\n        Returns the complete policy identified by the `policyId` path parameter. The\n        response contains the policy as JSON object.\n\n        Tip: If you don't know the policy ID of a thing, request it via GET `/things/{thingId}`.\n\n        Optionally, you can use the field selectors (see parameter `fields`) to only get specific fields,\n        which you are interested in.\n\n        ### Example:\n        Use the field selector `_revision` to retrieve the revision of the policy.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/PolicyFieldsQueryParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            policy.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or update a policy with a specified ID\n      description: |-\n        Create or update the policy specified by the policyId path parameter.\n        * If you set a new policyId in the path, a new policy will be created.\n        * If you set an existing policyId in the path, the policy will be updated.\n\n        ### Create a new policy\n        At the initial creation of a policy, at least one valid entry is required. However, you can create a full-fledged policy all at once.\n\n        By default the authorized subject needs WRITE permission on the root resource of the created policy. You can\n        however omit this check by setting the parameter `allow-policy-lockout` to `true`.\n\n        Example: To create a policy for multiple coffee maker things,\n        which gives **yourself** all permissions on all resources, set the policyId in the path,\n        e.g. to \"com.acme.coffeemaker:policy-01\" and the body part, like in the following snippet.\n\n        ```\n        {\n          \"entries\": {\n            \"DEFAULT\": {\n              \"subjects\": {\n                \"{{ request:subjectId }}\": {\n                  \"type\": \"the creator\"\n                }\n              },\n              \"resources\": {\n                \"policy:/\": {\n                  \"grant\": [\n                    \"READ\",\n                    \"WRITE\"\n                  ],\n                  \"revoke\": []\n                },\n                \"thing:/\": {\n                  \"grant\": [\n                    \"READ\",\n                    \"WRITE\"\n                  ],\n                  \"revoke\": []\n                },\n                \"message:/\": {\n                  \"grant\": [\n                    \"READ\",\n                    \"WRITE\"\n                  ],\n                  \"revoke\": []\n                }\n              }\n            }\n          },\n          \"imports\": {\n            \"com.acme:importedPolicy\" : {\n              \"entries\": [ \"IMPORTED\" ]\n            }\n          }\n        }\n        ```\n\n        ### Update an existing policy\n        For updating an existing policy, the authorized subject needs WRITE permission on the policy's root resource.\n\n        The ID of a policy cannot be changed after creation. Any `policyId` specified in the request body is therefore ignored.\n\n        ### Partially update an existing policy\n        Partial updates are not supported.\n\n        If you need to create or update a specific label, resource, or subject, please use the respective sub-resources.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n        - $ref: '#/components/parameters/AllowPolicyLockoutParam'\n      responses:\n        '201':\n          description: The policy was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created policy resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewPolicy'\n        '204':\n          description: The policy was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON body of the policy to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the root `policy:/` resource,\n                without any revoke in a deeper path of the policy resource.\n                (You can omit this check by setting the `allow-policy-lockout` parameter.)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or policy referenced in a policy import was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewPolicy'\n            example:\n              entries:\n                DEFAULT:\n                  subjects:\n                    '{{ request:subjectId }}':\n                      type: the creator\n                  resources:\n                    'policy:/':\n                      grant:\n                        - READ\n                        - WRITE\n                      revoke: []\n                    'thing:/':\n                      grant:\n                        - READ\n                        - WRITE\n                      revoke: []\n                    'message:/':\n                      grant:\n                        - READ\n                        - WRITE\n                      revoke: []\n        description: |-\n          JSON representation of the policy.\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n    delete:\n      summary: Delete a specific policy\n      description: |-\n        Deletes the policy identified by the `policyId` path parameter. Deleting\n        a policy does not implicitly delete other entities (e.g. things) which\n        use this policy.\n\n        Note: Delete the respective things **before** deleting the\n        policy, otherwise nobody has permission to read, update, or delete the things.\n        If you accidentally run into such a scenario, re-create the policy via\n        PUT `/policies/{policyId}`.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParam'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The policy was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the root `policy:/` resource,\n                without any revoke in a deeper path of the policy resource.having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or policy referenced in a policy import was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n  '/policies/{policyId}/actions/activateTokenIntegration':\n    post:\n      summary: Activate subjects for this policy derived from the token\n      description: |-\n        **This action only works when authenticated with a Json Web Token (JWT).**\n\n        Based on the authenticated token (JWT), **for each policy entry** matching those conditions:\n        * the authenticated token is granted the `EXECUTE` permission to perform the `activateTokenIntegration` action\n        * one of the subject IDs is contained in the authenticated token\n        * at least one `READ` permission to a `thing:/` resource path is granted\n\n        a new subject is **injected into the matched policy entry** calculated with information extracted from the\n        authenticated JWT.\n\n        The injected subjects expire when the JWT expires. The `expiry` timestamp (a string in ISO-8601 format)\n        specifies how long the specific subject will have access to the resource secured by the policy.\n        The subject will be automatically deleted from the policy once this timestamp is reached.\n        To give the subject a chance to prolong the access he can configure a connection to get announcements.\n        Policy announcements are published to websockets and connections that have the relevant subject ID.\n\n        The settings under `announcement` control when a policy announcement is published (before expiry or when deleted).\n        If the field `requestedAcks` is set, then the announcements are published with at-least-once delivery until\n        the acknowledgement requests under labels are fulfilled.\n        If a \"beforeExpiry\" announcement was sent without acknowledgement requests, or the a \"beforeExpiry\"\n        announcement was acknowledged, the \"whenDeleted\" announcement will not be triggered.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n      responses:\n        '204':\n          description: The request was successful. Subjects were injected into authorized policy entries.\n        '400':\n          description: The request could not be completed because the authentication was not performed with a JWT.\n        '403':\n          description: |-\n            The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on any\n            entries of the policy.\n        '404':\n          description: |-\n            The request could not be completed because no policy entry matched the following conditions:\n            * containing a a subject ID matching the JWT's authenticated subject\n            * containing a `READ` permission granted to a `thing:/` resource path\n      requestBody:\n        $ref: '#/components/requestBodies/ActivateTokenIntegration'\n  '/policies/{policyId}/actions/deactivateTokenIntegration':\n    post:\n      summary: Deactivate subjects for this policy derived from the token\n      description: |-\n        **This action only works when authenticated with a Json Web Token (JWT).**\n\n        Based on the authenticated token (JWT), **for each policy entry** matching those conditions:\n        * the authenticated token is granted the `EXECUTE` permission to perform the `deactivateTokenIntegration` action\n        * one of the subject IDs is contained in the authenticated token\n\n        the calculated subject with information extracted from the authenticated JWT is **removed\n        from the matched policy entry**.\n\n        The injected subjects expire when the JWT expires. The `expiry` timestamp (a string in ISO-8601 format)\n        specifies how long the specific subject will have access to the resource secured by the policy.\n        The subject will be automatically deleted from the policy once this timestamp is reached.\n        To give the subject a chance to prolong the access he can configure a connection to get announcements.\n        Policy announcements are published to websockets and connections that have the relevant subject ID.\n\n        The settings under `announcement` control when a policy announcement is published (before expiry or when deleted).\n        If the field `requestedAcks` is set, then the announcements are published with at-least-once delivery until\n        the acknowledgement requests under labels are fulfilled.\n        If a \"beforeExpiry\" announcement was sent without acknowledgement requests, or the a \"beforeExpiry\"\n        announcement was acknowledged, the \"whenDeleted\" announcement will not be triggered.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n      responses:\n        '204':\n          description: The request was successful. Subjects were removed from authorized policy entries.\n        '400':\n          description: The request could not be completed because the authentication was not performed with a JWT.\n        '403':\n          description: |-\n            The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on any\n            entries of the policy.\n        '404':\n          description: |-\n            The request could not be completed because no policy entry matched the following conditions:\n            * containing a a subject ID matching the JWT's authenticated subject\n  '/policies/{policyId}/entries':\n    get:\n      summary: Retrieve the entries of a specific policy\n      description: |-\n        Returns all policy entries of the policy identified by the `policyId`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned are the\n            policy entries.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntries'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Modify the entries of a specific policy\n      description: |-\n        Modify the policy entries of the policy identified by the `policyId`\n        path parameter.\n\n        Note: Take care to not lock yourself out. Use the placeholder {{ request:subjectId }}\n        in order to let the backend insert the authenticated subjectId of the HTTP request.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The policy entries were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON body of the policy to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the `policy:/entries` resource,\n              without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyEntries'\n            example:\n              DEFAULT:\n                subjects:\n                  '{{ request:subjectId }}':\n                    type: the creator\n                resources:\n                  'policy:/':\n                    grant:\n                      - READ\n                      - WRITE\n                    revoke: []\n                  'thing:/':\n                    grant:\n                      - READ\n                      - WRITE\n                    revoke: []\n                  'message:/':\n                    grant:\n                      - READ\n                      - WRITE\n                    revoke: []\n        description: |-\n          JSON representation of the policy entries.\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n  '/policies/{policyId}/entries/{label}':\n    get:\n      summary: Retrieve the entries of a specific Label of a specific policy\n      description: |-\n        Returns all entries (subjects, resources, etc.) of the policy identified by the `policyId` path\n        parameter, and by the `label` path parameter.\n        Example label: DEFAULT.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            policy entry.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntry'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify the entries of a specific Label of a specific policy\n      description: |-\n        Create or modify the policy entry identified by the\n        `policyId` path parameter and with the label identified by the `label`\n        path parameter.\n        * If you specify a new label, the respective policy entry will be created\n        * If you specify an existing label, the respective policy entry will be updated\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '201':\n          description: The policy entry was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created policy entry\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntry'\n        '204':\n          description: The policy entry was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n            * the JSON body of the policy entry to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the `policy:/entries/{label}` resource,\n                without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyEntry'\n            example:\n              subjects:\n                '{{ request:subjectId }}':\n                  type: the creator\n              resources:\n                'policy:/':\n                  grant:\n                    - READ\n                    - WRITE\n                  revoke: []\n                'thing:/':\n                  grant:\n                    - READ\n                    - WRITE\n                  revoke: []\n                'message:/':\n                  grant:\n                    - READ\n                    - WRITE\n                  revoke: []\n        description: |-\n          JSON representation of the policy entry.\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n          ### Example\n          Given your policy \"com.acme.coffeemaker:policy-01\" only has the\n          DEFAULT entry, and you want to add a \"Consumer\" section which additionally allows USER-01\n          (managed within a Nginx reverse proxy) to\n          *read* the thing and to trigger a \"makeCoffee\" operation (i.e. POST such a message - see\n          POST /things/{thingId}/inbox/messages/{messageSubject}).\n          Set the label value to **Consumer** and the following request body:\n          ```\n          {\n            \"subjects\": {\n              \"nginx:USER-01\": {\n                \"type\": \"pre authenticated user from nginx\"\n              }\n            },\n            \"resources\": {\n              \"thing:/\": {\n                \"grant\": [\n                  \"READ\"\n                ],\n                \"revoke\": []\n              },\n              \"message:/\": {\n                \"grant\": [\n                  \"WRITE\"\n                ],\n                \"revoke\": []\n              }\n            }\n          }\n          ```\n        required: true\n    delete:\n      summary: Delete the entries of a specific Label of a specific policy\n      description: |-\n        Deletes the entry of the policy identified by the `policyId` path\n        parameter and with the label identified by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The policy entry was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n             * the caller has insufficient permissions.\n               You need `WRITE` permission on the `policy:/entries/{label}` resource,\n               without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n  '/policies/{policyId}/entries/{label}/actions/activateTokenIntegration':\n    post:\n      summary: Activate a subject for this policy entry derived from the token\n      description: |-\n        **This action only works when authenticated with a Json Web Token (JWT).**\n\n        Based on the authenticated token (JWT), **this policy entry** is checked to match those conditions:\n        * the authenticated token is granted the `EXECUTE` permission to perform the `activateTokenIntegration` action\n        * one of the subject IDs is contained in the authenticated token\n        * at least one `READ` permission to a `thing:/` resource path is granted\n\n        When all conditions match, a new subject is **injected into this policy entry** calculated with information\n        extracted from the authenticated JWT.\n\n        The injected subjects expire when the JWT expires. The `expiry` timestamp (a string in ISO-8601 format)\n        specifies how long the specific subject will have access to the resource secured by the policy.\n        The subject will be automatically deleted from the policy once this timestamp is reached.\n        To give the subject a chance to prolong the access he can configure a connection to get announcements.\n        Policy announcements are published to websockets and connections that have the relevant subject ID.\n\n        The settings under `announcement` control when a policy announcement is published (before expiry or when deleted).\n        If the field `requestedAcks` is set, then the announcements are published with at-least-once delivery until\n        the acknowledgement requests under labels are fulfilled.\n        If a \"beforeExpiry\" announcement was sent without acknowledgement requests, or the a \"beforeExpiry\"\n        announcement was acknowledged, the \"whenDeleted\" announcement will not be triggered.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n      responses:\n        '204':\n          description: The request was successful. The subject was injected.\n        '400':\n          description: The request could not be completed because the authentication was not performed with a JWT.\n        '403':\n          description: |-\n            The request could not be completed because the authenticated JWT did not have the `EXECUTE` permission on this\n            policy entry.\n        '404':\n          description: |-\n            The request could not be completed because this policy entry did not match the following conditions:\n            * containing a a subject ID matching the JWT's authenticated subject\n            * containing a `READ` permission granted to a `thing:/` resource path\n      requestBody:\n        $ref: '#/components/requestBodies/ActivateTokenIntegration'\n  '/policies/{policyId}/entries/{label}/actions/deactivateTokenIntegration':\n    post:\n      summary: Deactivate a subject for this policy entry derived from the token\n      description: |-\n        **This action only works when authenticated with a Json Web Token (JWT).**\n\n        Based on the authenticated token (JWT), **this policy entry** is checked to match those conditions:\n        * the authenticated token is granted the `EXECUTE` permission to perform the `deactivateTokenIntegration` action\n        * one of the subject IDs is contained in the authenticated token\n\n        When all conditions match, the calculated subject with information extracted from the authenticated JWT is **removed\n        from this policy entry**.\n\n        The injected subjects expire when the JWT expires. The `expiry` timestamp (a string in ISO-8601 format)\n        specifies how long the specific subject will have access to the resource secured by the policy.\n        The subject will be automatically deleted from the policy once this timestamp is reached.\n        To give the subject a chance to prolong the access he can configure a connection to get announcements.\n        Policy announcements are published to websockets and connections that have the relevant subject ID.\n\n        The settings under `announcement` control when a policy announcement is published (before expiry or when deleted).\n        If the field `requestedAcks` is set, then the announcements are published with at-least-once delivery until\n        the acknowledgement requests under labels are fulfilled.\n        If a \"beforeExpiry\" announcement was sent without acknowledgement requests, or the a \"beforeExpiry\"\n        announcement was acknowledged, the \"whenDeleted\" announcement will not be triggered.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n      responses:\n        '204':\n          description: The request was successful. The subject was removed.\n        '400':\n          description: The request could not be completed because the authentication was not performed with a JWT.\n        '403':\n          description: The request could not be completed because the user did not have the `EXECUTE` permission on this policy entry.\n        '404':\n          description: |-\n            The request could not be completed because this policy entry did not match the following conditions:\n            * containing a a subject ID matching the JWT's authenticated subject\n  '/policies/{policyId}/entries/{label}/subjects':\n    get:\n      summary: Retrieve all Subjects for a specific Label of a specific policy\n      description: |-\n        Returns all subject entries of the policy identified by the\n        `policyId` path parameter, and by the `label`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: The request successfully returned. The subjects are returned.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subjects'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n               * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify all Subjects for a specific Label of a specific policy\n      description: |-\n        Create or modify at once ALL subjects of the policy entry identified\n        by the `policyId` path parameter, and by the `label` path parameter.\n\n        ### Example - delete all subjects\n        To delete all subjects set an empty body { }\n\n        ### Example - entities authenticated by nginx\n        To add a user authenticated via pre-authentication at nginx:\n\n        ```\n        {\n          \"nginx:ID-user\": {\n            \"type\": \"pre authenticated user from nginx\"\n          }\n        }\n        ```\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The Subjects were successfully created or updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n               * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n             * the JSON body of the policy subjects to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the `policy:/entries/{label}/subjects` resource,\n              without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n        description: |-\n          JSON representation of the Subjects.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n  '/policies/{policyId}/entries/{label}/subjects/{subjectId}':\n    get:\n      summary: Retrieve one specific Subject for a specific Label of a specific policy\n      description: |-\n        Returns the subject with ID `subjectId` of the policy entry identified\n        by the `policyId` path parameter, and by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/SubjectIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Subject.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubjectEntry'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID,\n            the policy entry or the Subject was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify one specific Subject for a specific Label of a specific policy\n      description: |-\n        Create or modify the subject with ID `subjectId` of the policy identified\n        by the `policyId` path parameter, and by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/SubjectIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '201':\n          description: The Subject was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Subject\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubjectEntry'\n        '204':\n          description: The Subject was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)))\n            * the JSON body of the policy subject to be created/modified is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the root `policy:/entries/{label}/subjects/{subjectId}` resource,\n              without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubjectEntry'\n        description: JSON representation of the Subject\n        required: true\n    delete:\n      summary: Delete one specific Subject for a specific Label of a specific policy\n      description: |-\n        Deletes the subject with ID `subjectId` from the policy identified\n        by the `policyId` path parameter and\n        by the `label` path parameter.\n\n        Note: If the subject is used in other labels, it will not be deleted there,\n        i.e. it will not lose those permissions, but only the permissions defined in the\n        label specified at this path.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/SubjectIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The Subject was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the root `policy:/entries/{label}/subjects/{subjectId}` resource,\n              without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID,\n            the policy entry or the Subject was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n  '/policies/{policyId}/entries/{label}/resources':\n    get:\n      summary: Retrieve all Resources for a specific Label of a specific policy\n      description: |-\n        Returns all resource entries of the policy identified by\n        the `policyId` path parameter,\n        and by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: The request successfully returned. The resources are returned.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resources'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify all Resources for a specific Label of a specific policy\n      description: |-\n        Create or modify all resources of the policy\n        identified by the `policyId` path parameter,\n        and by the `label` path parameter.\n\n        ### Delete all resource entries\n\n        Set the empty body part, if you need to delete all resource entries: { }\n\n        ### Set max permissions on all ressources\n        ```\n        {\n          \"policy:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          },\n          \"thing:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          },\n          \"message:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n        ```\n        ### Allow to read all parts of a thing except the \"confidential\" feature\n        ```\n        {\n          \"thing:/\": {\n            \"grant\": [\n              \"READ\"\n            ],\n            \"revoke\": []\n          },\n          \"things:/features/confidential\": {\n            \"grant\": [],\n            \"revoke\": [\n              \"READ\"\n            ]\n          }\n        }\n        ```\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The Resources were successfully created or updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON is invalid, or no valid Resources JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the root `policy:/entries/{label}/resources` resource,\n              without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Resources'\n        description: JSON representation of the Resources\n        required: true\n  '/policies/{policyId}/entries/{label}/resources/{resourcePath}':\n    get:\n      summary: Retrieve one specific Resource for a specific Label of a specific policy\n      description: |-\n        Returns the resource with path `resourcePath` of the policy identified\n        by the `policyId` path parameter, and\n        by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/ResourcePathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Resource.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceEntry'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID,\n            the policy entry or the Resource was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify one specific Resource for a specific Label of a specific policy\n      description: |-\n        Create or modify the Resource with path `resourcePath` of the policy\n        entry identified by the `label` path parameter belonging to the policy\n        identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/ResourcePathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '201':\n          description: The Resource was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceEntry'\n        '204':\n          description: The Resource was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n             * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON is invalid, or no valid Resource JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the `policy:/entries/{label}/resources/{resourcePath}` resource,\n                without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourceEntry'\n        description: JSON representation of the Resource\n        required: true\n    delete:\n      summary: Delete one specific Resource for a specific Label of a specific policy\n      description: |-\n        Deletes the resource with path `resourcePath` from the policy\n        identified by the the `policyId` path parameter, and by the\n        `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/LabelPathParam'\n        - $ref: '#/components/parameters/ResourcePathPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The Resource was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the `policy:/entries/{label}/resources/{resourcePath}` resource,\n                without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID,\n            the policy entry or the Resource was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n  '/policies/{policyId}/imports':\n    get:\n      summary: Retrieve the imports of a specific policy\n      description: |-\n        Returns all policy imports of the policy identified by the `policyId`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: The request successfully returned completed and returned are the policy imports.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyImports'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '402':\n          description: The request could not be completed due to exceeded data volume or exceeded transaction count.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to a missing or invalid API Token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Modify the imports of a specific policy\n      description: Modify the policy imports of the policy identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The policy imports were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON body of the policy imports to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '402':\n          description: The request could not be completed due to exceeded data volume or exceeded transaction count.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * the caller has insufficient permissions.\n              You need `WRITE` permission on the `policy:/imports` resource,\n              without any revoke in a deeper path of the policy resource.\n            * the caller has insufficient permissions.\n              You need `READ` permission on the policy entries of the imported policies.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy (or an imported policy) with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyImports'\n            example:\n              'com.acme:imported1':\n                entries:\n                  - IMPORTED_ENTRY\n              'com.acme:imported2': {}\n        description: JSON representation of the policy imports.\n        required: true\n  '/policies/{policyId}/imports/{importedPolicyId}':\n    get:\n      summary: Retrieve a specific policy import.\n      description: |-\n        Returns the policy import of the policy identified by the `policyId` path\n        parameter and imported policy identified by the `importedPolicyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/ImportedPolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n      responses:\n        '200':\n          description: The request successfully returned completed and returned is the policy import.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyImport'\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` or the `importedPolicyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '402':\n          description: The request could not be completed due to exceeded data volume or exceeded transaction count.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to a missing or invalid API Token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID or\n            the policy import was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n    put:\n      summary: Create or modify a specific policy import of a policy.\n      description: |-\n        Create or modify the policy import of a specific policy identified by the `policyId` path parameter \n        and the imported policy identified by the `importedPolicyId` path parameter.\n\n        * If you specify a new policy import, the respective policy import will be created\n        * If you specify an existing policy import, the respective policy import will be updated\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/ImportedPolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '201':\n          description: The policy import was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created policy import\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyImport'\n        '204':\n          description: The policy import was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` or the `importedPolicyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n              * the JSON body of the policy import to be created/modified is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '402':\n          description: The request could not be completed due to exceeded data volume or exceeded transaction count.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n                You need `WRITE` permission on the `policy:/imports/{importedPolicyId}` resource,\n                without any revoke in a deeper path of the policy resource.\n              * the caller has insufficient permissions.\n                You need `READ` permission on the `policy:/entries/{label}` resource of the *imported* policy,\n                without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n        '413':\n          $ref: '#/components/responses/EntityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyImport'\n            example:\n              entries:\n                - IMPORTED\n        description: JSON representation of the policy import.\n        required: true\n    delete:\n      summary: Delete a specific policy import.\n      description: |-\n        Deletes a specific policy import identified by the `policyId` path parameter \n        and the `importedPolicyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/PolicyIdPathParam'\n        - $ref: '#/components/parameters/ImportedPolicyIdPathParam'\n        - $ref: '#/components/parameters/IfMatchHeaderParamHash'\n        - $ref: '#/components/parameters/IfNoneMatchHeaderParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - $ref: '#/components/parameters/ResponseRequiredParam'\n      responses:\n        '204':\n          description: The policy import was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `policyId` or the `importedPolicyId` does not conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id))\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '402':\n          description: The request could not be completed due to exceeded data volume or exceeded transaction count.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n             * the caller has insufficient permissions.\n               You need `WRITE` permission on the `policy:/imported/{importedPolicyId}` resource,\n               without any revoke in a deeper path of the policy resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/PreconditionFailed'\n  /whoami:\n    get:\n      summary: Retrieve information about the current caller\n      description: 'Get information about the current caller, e.g. the auth subjects that are generated for the caller.'\n      tags:\n        - Policies\n      responses:\n        '200':\n          description: The request successfully returned information about the caller.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WhoAmI'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  /search/things:\n    get:\n      summary: Search for things\n      description: |-\n        This resource can be used to search for things.\n\n        * The query parameter `filter` is not mandatory. If it is not set, the\n          result contains all things which the logged in user is allowed to read.\n\n        * The search is case sensitive. In case you don't know how exactly the\n          spelling of value of the namespace, name, attribute, feature etc. is, use the *like*\n          notation instead of *eq* for filtering.\n\n        * The resource supports sorting and paging. If paging is not explicitly\n          specified by means of the `size` option, a default count of `25`\n          documents is returned.\n\n        * The internal search index is \"eventually consistent\".  Consistency with the latest\n          thing updates should recover within milliseconds.\n      parameters:\n        - $ref: '#/components/parameters/SearchFilter'\n        - $ref: '#/components/parameters/NamespacesFilter'\n        - $ref: '#/components/parameters/ThingFieldsQueryParam'\n        - $ref: '#/components/parameters/TimeoutParam'\n        - name: option\n          in: query\n          description: |-\n            Possible values for the parameter:\n\n            #### Sort operations\n\n            * ```sort([+|-]{property})```\n            * ```sort([+|-]{property},[+|-]{property},...)```\n\n            #### Paging operations\n\n            * ```size({page-size})```  Maximum allowed page size is `200`. Default page size is `25`.\n            * ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without\n            quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of\n            the previous search. The meaning of cursor IDs is unspecified and may change without notice.\n\n            The paging option `limit({offset},{count})` is deprecated.\n            It may result in slow queries or timeouts and will be removed eventually.\n\n            #### Examples:\n\n            * ```sort(+thingId)```\n            * ```sort(-attributes/manufacturer)```\n            * ```sort(+thingId,-attributes/manufacturer)```\n            * ```size(10)``` return 10 results\n            * ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.\n\n            #### Combine:\n\n            If you need to specify multiple options, when using the swagger UI just write each option in a new line.\n            When using the plain REST API programmatically,\n            you will need to separate the options using a comma (,) character.\n\n            ```size(200),cursor(LOREMIPSUM)```\n\n            The deprecated paging option `limit` may not be combined with the other paging options `size` and `cursor`.\n          required: false\n          schema:\n            type: string\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: An array of the matching things.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultThings'\n        '400':\n          description: |-\n            The request could not be completed. A provided parameter is in a\n            wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  /search/things/count:\n    get:\n      summary: Count things\n      description: |-\n        This resource can be used to count things.\n\n        The query parameter `filter` is not mandatory. If it is not set there is\n        returned the total amount of things which the logged in user is allowed\n        to read.\n\n        To search for nested properties, we use JSON Pointer notation\n        (RFC-6901). See the following example how to search for the sub property\n        `location` of the parent property `attributes` with a forward slash as\n        separator:\n\n        ```eq(attributes/location,\"kitchen\")```\n      parameters:\n        - $ref: '#/components/parameters/SearchFilter'\n        - $ref: '#/components/parameters/NamespacesFilter'\n        - $ref: '#/components/parameters/TimeoutParam'\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: A number indicating the amount of matched things\n          content:\n            application/json:\n              schema:\n                type: integer\n        '400':\n          description: |-\n            The request could not be completed. A provided parameter is in a\n            wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  /cloudevents:\n    post:\n      summary: Processes a CloudEvent sent in Ditto Protocol\n      description: |-\n        Provides an endpoint accepting [CloudEvents via its HTTP protocol binding](https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md)\n        in [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html).\n\n        The endpoint can also directly be configured as a [Knative eventing](https://knative.dev/docs/eventing/) destination.\n\n        Find more documentation on that [here](https://www.eclipse.org/ditto/httpapi-protocol-bindings-cloudevents.html).\n      tags:\n        - CloudEvents\n      parameters:\n        - in: header\n          name: ce-specversion\n          description: The CloudEvents \"specversion\".\n          schema:\n            type: string\n            example: '1.0'\n          required: true\n        - in: header\n          name: ce-type\n          description: The CloudEvents event \"type\".\n          schema:\n            type: string\n            example: com.example.someevent\n          required: true\n        - in: header\n          name: ce-source\n          description: The CloudEvents event \"source\".\n          schema:\n            type: string\n            example: /mycontext\n          required: true\n        - in: header\n          name: ce-id\n          description: The CloudEvents event \"id\".\n          schema:\n            type: string\n            example: 1234-1234-1234\n          required: true\n        - in: header\n          name: ce-time\n          description: The CloudEvents event \"time\".\n          schema:\n            type: string\n            format: date-time\n            example: '2020-12-31T23:59:59Z'\n          required: true\n        - in: header\n          name: ce-dataschema\n          description: 'The CloudEvents event \"dataschema\". If provided, this must start with `ditto:`.'\n          schema:\n            type: string\n          required: false\n      responses:\n        '202':\n          description: 'The Ditto Protocol CloudEvent was successfully parsed, the authentication was valid and also reached the persistence.'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the CloudEvent could not be parsed as some mandatory CloudEvent headers were missing from the request\n              * the payload was missing from the CloudEvent\n              * the [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html) message could not be parsed or was missing a required field\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the caller has insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the referenced thing does not exist.\n              * the caller has insufficient permissions to perform the contained Ditto Protocol command.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '408':\n          description: The request could not be completed due to timeout.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '415':\n          description: The `Content-Type` of the request was not supported.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        content:\n          application/vnd.eclipse.ditto+json:\n            schema:\n              type: object\n              properties:\n                topic:\n                  type: string\n                  description: |-\n                    Contains information about the contents of the payload:\n                    * the affected Thing (namespace and Thing ID)\n                    * the type of operation (command/event, create/retrieve/modify/delete)\n                  example: org.eclipse.ditto/thing-1/things/twin/commands/modify\n                headers:\n                  type: object\n                  description: Additional headers.\n                  properties:\n                    correlation-id:\n                      type: string\n                      description: |-\n                        The correlation-id header is used for linking one message with another.\n                        It typically links a reply message with its requesting message.\n                  example:\n                    correlation-id: 1234-4321-1234\n                path:\n                  type: string\n                  description: References the part of a Thing which is affected by this message.\n                  example: /features/location/properties/longitude\n                value:\n                  oneOf:\n                    - type: object\n                    - type: string\n                    - type: number\n                    - type: array\n                    - type: boolean\n                  description: The `value` field contains the actual payload e.g. a sensor value.\n              required:\n                - topic\n                - path\n            example:\n              topic: org.eclipse.ditto/thing-1/things/twin/commands/modify\n              path: /\n              value:\n                attributes:\n                  foo: 42\n        description: |-\n          The [Ditto Protocol JSON](https://www.eclipse.org/ditto/protocol-specification.html) payload defining which\n          command to process.\n  /connections:\n    get:\n      summary: Retrieve all Connections\n      description: Returns all connections.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - name: ids-only\n          in: query\n          description: 'When set to true, the request will return the registered ids only and not the whole connections objects.'\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: The request successfully returned the connections.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Connection'\n        '400':\n          description: The request could not be completed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. Connections not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n    post:\n      summary: Create a new Connection\n      description: |-\n        Creates the connection defined in the JSON body.\n        The ID of the connection will be **generated** by the backend. Any `ID` specified in the request body is therefore\n        prohibited.\n        Supported connection types are `amqp-091`, `amqp-10`, `mqtt`, `mqtt-5`, `kafka`, `hono` and `http-push`.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - name: dry-run\n          in: query\n          description: |-\n            When set to true, the request will not try to create the connection, but only try to connect it.\n            You can use this parameter to verify that the given connection is able to communicate with your external\n            system.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: |-\n            Will be returned when a dry-run succeeded (see description of the dry-run query parameter for further\n            information).\n        '201':\n          description: The connection was successfully created.\n          headers:\n            Location:\n              description: The location of the created connection resource.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connection'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n            * an `ID` was set in the request body, but the ID will be generated by Ditto\n            * the JSON of the connection to be created is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. Connections not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewConnection'\n            example:\n              name: hono-example-connection-123\n              connectionType: hono\n              connectionStatus: open\n              sources:\n                - addresses:\n                    - telemetry\n                    - event\n                    - ...\n                  authorizationContext:\n                    - 'ditto:inbound-auth-subject'\n                    - ...\n                  consumerCount: 1\n                  enforcement:\n                    input: '{{ header:device_id }}'\n                    filters:\n                      - '{{ thing:id }}'\n                  payloadMapping:\n                    - Ditto\n                    - status\n              targets:\n                - address: command\n                  topics:\n                    - _/_/things/twin/events\n                  authorizationContext:\n                    - 'ditto:outbound-auth-subject'\n                    - ...\n                  headerMapping: {}\n        description: The example below shows a connection to Eclipse Hono.\n        required: true\n  '/connections/{connectionId}':\n    get:\n      summary: Retrieve a specific Connection\n      description: Returns the connection identified by the `connectionId` path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '200':\n          description: The request successfully returned the connection.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connection'\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n    put:\n      summary: Update a specific Connection registered\n      description: Update the connection identified by the `connectionId` path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '204':\n          description: The connection was successfully updated.\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n              * the `connectionId` must be an URI,\n              * the `ID` was wrongly set in the request body,\n              * the JSON of the connection to be created is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewConnection'\n            example:\n              name: hono-example-connection-123\n              connectionType: hono\n              connectionStatus: open\n              sources:\n                - addresses:\n                    - telemetry\n                    - event\n                    - ...\n                  authorizationContext:\n                    - 'ditto:inbound-auth-subject'\n                    - ...\n                  consumerCount: 1\n                  enforcement:\n                    input: '{{ header:device_id }}'\n                    filters:\n                      - '{{ thing:id }}'\n                  payloadMapping:\n                    - Ditto\n                    - status\n              targets:\n                - address: command\n                  topics:\n                    - _/_/things/twin/events\n                  authorizationContext:\n                    - 'ditto:outbound-auth-subject'\n                    - ...\n                  headerMapping: {}\n        required: true\n    delete:\n      summary: Delete a specific Connection\n      description: Delete the connection identified by the `connectionId` path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '204':\n          description: The connection was successfully deleted.\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  '/connections/{connectionId}/command':\n    post:\n      summary: Send a command to a specific Connection.\n      description: |-\n        Sends the command specified in the body to the connection identified by the `connectionId`\n        path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '200':\n          description: The command was sent to the connection successfully.\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: \u003ccommmand\u003e\n        description: |-\n          The command to send. Supported commands are\n            * `connectivity.commands:openConnection`\n            * `connectivity.commands:closeConnection`\n            * `connectivity.commands:resetConnectionMetrics`\n            * `connectivity.commands:enableConnectionLogs`\n            * `connectivity.commands:resetConnectionLogs`\n        required: true\n  '/connections/{connectionId}/status':\n    get:\n      summary: Retrieve status of a specific Connection\n      description: Returns the status of the connection identified by the `connectionId` path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '200':\n          description: The request successfully returned the connection status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionStatus'\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  '/connections/{connectionId}/metrics':\n    get:\n      summary: Retrieve metrics of a specific Connection\n      description: Returns the metrics of the connection identified by the `connectionId` path parameter.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '200':\n          description: The request successfully returned the connection metrics.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionMetrics'\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  '/connections/{connectionId}/logs':\n    get:\n      summary: Retrieve logs of a specific Connection\n      description: |-\n        Returns the logs of the connection identified by the `connectionId` path parameter.\n        **Before** log entries are generated and returned, logging needs be enabled with the `command`\n        `connectivity.commands:enableConnectionLogs`. When creating or opening an connection the logging is enabled per\n        default. This allows to log possible errors on connection establishing.\n      security:\n        - DevOpsBasic: []\n      tags:\n        - Connections\n      parameters:\n        - $ref: '#/components/parameters/connectionIdPathParam'\n      responses:\n        '200':\n          description: The request successfully returned the connection logs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionLogs'\n        '400':\n          description: The request could not be completed. The `connectionId` must be an URI.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The connection with ID `connectionId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\ncomponents:\n  requestBodies:\n    Attributes:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Attributes'\n          example:\n            manufacturer:\n              name: ACME demo corp.\n              location: 'Berlin, main floor'\n            coffeemaker:\n              serialno: '42'\n              model: Speaking coffee machine\n      description: |-\n        JSON object of all attributes to be modified at once. Consider that the\n        value has to be a JSON object or `null`.\n\n        Examples:\n         * an empty object: `{}` - would just delete all old attributes\n         * a simple object: `{ \"key\": \"value\"}` - We strongly recommend to use a restricted set of characters for the key (identifier), as the key might be needed for the (URL) path later.\u003cbr\u003e Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n         * a nested object as shown in the example value\n      required: true\n    Definition:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Definition'\n          example: '\"example:test:definition\"'\n      description: |-\n        JSON string of the definition to be modified. Consider that the\n        value has to be a JSON string or `null`, examples:\n\n          * a string: `\"value\"` - Currently the definition should follow the pattern: [_a-zA-Z0-9\\-]:[_a-zA-Z0-9\\-]:[_a-zA-Z0-9\\-]\n          * an empty string: `\"\"`\n    Payload:\n      content:\n        application/json:\n          schema:\n            type: string\n            example: ''\n        application/octet-stream:\n          schema:\n            type: string\n            example: ''\n        text/plain:\n          schema:\n            type: string\n            example: ''\n      description: |-\n        Payload of the message with max size of 250 kB. It can be any HTTP\n        supported content, including binary content.\n    Value:\n      content:\n        application/json:\n          schema:\n            type: object\n            example: {}\n      description: |-\n        JSON representation of the value to be created/updated. This may be as\n        well `null` or an empty object.\n\n        Consider that the value has to be a JSON value, examples:\n\n          * for a number, the JSON value is the number: `42`\n\n          * for a string, the JSON value must be quoted: `\"aString\"`\n\n          * for a boolean, the JSON value is the boolean: `true`\n\n          * for an object, the JSON value is the object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n\n          * for an list, the JSON value is the list: `[ 1,2,3 ]`\n      required: true\n    PatchValue:\n      content:\n        application/merge-patch+json:\n          schema:\n            type: object\n            example: {}\n      description: |-\n        JSON representation of the value to be patched. This may be as well an empty object.\n\n        Consider that the value has to be a JSON value.\n\n        Examples:\n          * for a number, the JSON value is the number: `42`\n          * for a string, the JSON value must be quoted: `\"aString\"`\n          * for a boolean, the JSON value is the boolean: `true`\n          * for an object, the JSON value is the object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n          * for an list, the JSON value is the list: `[ 1,2,3 ]`\n          * special value `null` will delete the referenced key. For further documentation see [RFC 7396](https://tools.ietf.org/html/rfc7396).\n      required: true\n    ActivateTokenIntegration:\n      content:\n        application/json:\n          schema:\n            properties:\n              announcement:\n                $ref: '#/components/schemas/SubjectAnnouncement'\n          example:\n            announcement:\n              beforeExpiry: 5m\n              whenDeleted: true\n              requestedAcks:\n                labels:\n                  - 'my-connection-id:my-issued-acknowledgement'\n                timeout: 30s\n              randomizationInterval: 5m\n      description: Optional request payload for `activateTokenIntegration` policy action.\n      required: false\n  responses:\n    EntityTooLarge:\n      description: The created or modified entity is larger than the accepted limit of 100 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    MessageTooLarge:\n      description: The size of the sent message is larger than the accepted limit of 250 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    NotModified:\n      description: |-\n        The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n         matches the current ETag of the (sub-)resource.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n          schema:\n            type: string\n    PreconditionFailed:\n      description: |-\n        A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, if you\n        specified an If-Match or If-None-Match header, which fails the precondition check against the current ETag of\n        the (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\n        failing If-None-Match header for a read request, status 304 will be returned instead.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    DependencyFailed:\n      description: |-\n        One or more acknowledgement requests in the parameter `requested-acks`\n        were not fulfilled.\n      content:\n        application/json:\n          schema:\n            properties:\n              acknowledgementLabel1:\n                properties:\n                  status:\n                    type: integer\n                    description: The HTTP status of the acknowledgement\n                  payload:\n                    oneOf:\n                      - type: object\n                      - type: string\n                      - type: number\n                      - type: array\n                      - type: boolean\n                    description: The payload of the acknowledgement\n                required:\n                  - status\n                example:\n                  status: 200\n                  payload: OK\n            example:\n              acknowledgementLabel1:\n                status: 200\n                payload: OK\n              acknnowledgementLabelN:\n                status: 403\n                payload: Forbidden\n  parameters:\n    AllowPolicyLockoutParam:\n      name: allow-policy-lockout\n      in: query\n      description: |-\n        Defines whether a subject is allowed to create a policy without having WRITE permission on the policy\n        resource of the created policy.\n\n        The default (if ommited) is `false`.\n      required: false\n      schema:\n        type: boolean\n    AttributesPathPathParam:\n      name: attributePath\n      in: path\n      description: 'The path to the attribute, e.g. **manufacturer/name**'\n      required: true\n      schema:\n        type: string\n    AttributesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields from the attributes to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the attributes by\n        using a comma-separated list:\n          * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=model` would select only `model` attribute value (if present)\n              * `?fields=model,make` would select `model` and `make` attribute values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields\n        inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute\n\n        #### Examples\n\n        * `?fields=model,make,location(longitude,latitude)`\n\n        * `?fields=listOfAddresses/postal(city,street))`\n      required: false\n      schema:\n        type: string\n    ChannelParam:\n      name: channel\n      in: query\n      description: |-\n        Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).\n        * If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.\n        * When using the `live` channel, the command/message is sent towards the device.\n      required: false\n      schema:\n        type: string\n        enum:\n          - twin\n          - live\n    ChannelParamPutDescription:\n      name: channel\n      in: query\n      description: |-\n        Defines to which channel to route the command: `twin` (digital twin) or `live` (the device).\n        * If setting the channel parameter is omitted, the `twin` channel is set by default and the command is routed to the persisted representation of a thing in Eclipse Ditto.\n        * When using the `live` channel, the command/message is sent towards the device.\n\n        The option `live` is not available when a new thing should be created, only for updating an\n        existing thing.\n      required: false\n      schema:\n        type: string\n        enum:\n          - twin\n          - live\n    ConditionParam:\n      name: condition\n      in: query\n      description: |-\n        Defines that the request should only be processed if the given condition is met. The condition can be specified using RQL syntax. \n        #### Examples\n        E.g. if the temperature is not 23.9 update it to 23.9:\n        * ```PUT /api/2/things/{thingId}/features/temperature/properties/value?condition=ne(features/temperature/properties/value,23.9)```\n\n           `body: 23.9`\n\n        Further example conditions:\n        * ```?condition=eq(features/temperature/properties/unit,\"Celsius\")```\n        * ```?condition=ge(features/temperature/properties/lastModified,\"2021-08-22T19:45:00Z\")```\n        * ```?condition=gt(_modified,\"2021-08-05T12:17:00Z\")```\n        * ```?condition=exists(features/temperature/properties/value)```\n        * ```?condition=and(gt(features/temperature/properties/value,18.5),lt(features/temperature/properties/value,25.2))```\n        * ```?condition=or(gt(features/temperature/properties/value,18.5),not(exists(features/temperature/properties/value))```\n      required: false\n      schema:\n        type: string\n    LiveChannelConditionParam:\n      name: live-channel-condition\n      in: query\n      description: |-\n        Defines that the request should fetch thing data via `live` channel if the given condition is met. The condition can be specified using RQL syntax.\n        #### Examples\n\n          * ```?live-channel-condition=lt(_modified,\"2021-12-24T12:23:42Z\")```\n\n          * ```?live-channel-condition=ge(features/ConnectionStatus/properties/status/readyUntil,time:now)```\n      required: false\n      schema:\n        type: string\n    LiveChannelTimeoutStrategyParam:\n      name: live-channel-timeout-strategy\n      in: query\n      description: Defines a strategy how to handle timeouts of a live response to a request sent via `channel=live` or with a matching  live-channel-condition.\n      required: false\n      schema:\n        enum:\n          - fail\n          - use-twin\n    DesiredPropertiesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields from the desiredProperties to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the desiredProperties by\n        using a comma-separated list:\n          * several desiredProperties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=temperature` would select only `temperature` property value of desiredProperties (if present)\n              * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values of desiredProperties (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields\n        inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property of desiredProperties\n\n        #### Examples\n\n        * `?fields=temperature,humidity,location(longitude,latitude)`\n\n        * `?fields=configuration,status(powerConsumption/watts)`\n      required: false\n      schema:\n        type: string\n    FeatureFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields from the selected feature to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        * `properties`\n\n          Supports selecting arbitrary sub-fields by using a comma-separated list:\n            * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=properties/color` would select only `color` property value (if present)\n                * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)\n               * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object\n\n        #### Examples\n\n        * `?fields=properties(color,brightness)`\n      required: false\n      schema:\n        type: string\n    FeatureIdPathPathParam:\n      name: featureId\n      in: path\n      description: The ID of the feature - has to conform to RFC-3986 (URI)\n      required: true\n      schema:\n        type: string\n    FeaturesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields from one or more features to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        * `{featureId}` The ID of the feature to select properties in\n          * `properties`\n            Supports selecting arbitrary sub-fields by using a comma-separated list:\n              * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n                For example:\n                  * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the feature identified with `{featureId}`\n                  * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`\n            Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n              * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n              * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n                For example:\n                 * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the feature identified with `{featureId}`\n                 * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the feature identified with `{featureId}`\n\n\n        #### Examples\n        * `?fields=EnvironmentScanner/properties(temperature,humidity)`\n        * `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`\n      required: false\n      schema:\n        type: string\n    IfMatchHeaderParam:\n      name: If-Match\n      in: header\n      description: |-\n        The `If-Match` header, which has to conform to RFC-7232 (Conditional Requests). Common usages are:\n          * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: \"rev:4711\"`\n          * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`\n      required: false\n      schema:\n        type: string\n    IfMatchHeaderParamHash:\n      name: If-Match\n      in: header\n      description: |-\n        The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:\n          * optimistic locking by specifying the `ETag` from a previous HTTP response, e.g. `If-Match: \"hash:a75ece4e\"`\n          * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`\n      required: false\n      schema:\n        type: string\n    IfNoneMatchHeaderParam:\n      name: If-None-Match\n      in: header\n      description: 'The `If-None-Match` header, which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.'\n      required: false\n      schema:\n        type: string\n    ImportedPolicyIdPathParam:\n      name: importedPolicyId\n      in: path\n      description: |-\n        The ID of the imported policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n\n        The namespace needs to:\n        * conform to the reverse domain name notation\n      required: true\n      schema:\n        type: string\n    LabelPathParam:\n      name: label\n      in: path\n      description: The label of a policy entry\n      required: true\n      schema:\n        type: string\n    LiveMessageRequestedAcksParam:\n      name: requested-acks\n      in: query\n      description: |-\n        Contains the \"requested acknowledgements\" for this request as comma separated list. The HTTP call will\n        block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`\n        parameter.\n\n        The default (if omitted) requested acks is `requested-acks=live-response` which will block the\n        HTTP call until a subscriber of the live message sends a response.\n      required: false\n      schema:\n        type: string\n    MessageClaimTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the\n        HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n    MessageSubjectPathParam:\n      name: messageSubject\n      in: path\n      description: The subject of the Message - has to conform to RFC-3986 (URI)\n      required: true\n      schema:\n        type: string\n    MessageTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the\n        HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n    Namespace:\n      name: namespace\n      in: query\n      description: Defines a custom namespace for the thing while generating a new thing ID.\n      required: false\n      schema:\n        type: string\n        example: com.example.namespace\n    NamespacesFilter:\n      name: namespaces\n      in: query\n      description: |-\n        A comma-separated list of namespaces. This list is used to limit the query to things in the given namespaces\n        only.\n\n\n        #### Examples:\n\n        * `?namespaces=com.example.namespace`\n\n        * `?namespaces=com.example.namespace1,com.example.namespace2`\n      required: false\n      schema:\n        type: string\n    PolicyFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields to be included in the returned\n        JSON.\n\n        #### Selectable fields\n\n        * `policyId`\n        * `entries`\n\n           Supports selecting arbitrary sub-fields by using a comma-separated list:\n            * several entry paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=entries/ditto` would select only the `ditto` entry value(if present)\n                * `?fields=entries/ditto,entries/user` would select only `ditto` and\n                   `user` entry values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)\n              separated with `/`) to select\n\n            * sub-selectors can be used to request only specific sub-fields by placing expressions\n              in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=entries(ditto,user)` would select only `ditto`\n                  and `user` entry values (if present)\n               * `?fields=entries(ditto/subjects)` would select the `subjects` value\n                  inside the `ditto` entry\n               * `?fields=entries/ditto/subjects(issuer:google,issuer:azure)` would select the `issuer:google` and\n                  `issuer:azure` values inside the `subjects` object inside the `entries` object\n\n        * `_namespace`\n\n          Specifically selects the namespace also contained in the `policyId`\n\n        * `_revision`\n\n          Specifically selects the revision of the policy. The revision is a counter, which is incremented on each modification of a policy.\n\n        * `_created`\n\n          Specifically selects the created timestamp of the policy in ISO-8601 UTC format. The timestamp is set on creation of a policy.\n\n        * `_modified`\n\n          Specifically selects the modified timestamp of the policy in ISO-8601 UTC format. The timestamp is set on each modification of a policy.\n\n        * `_metadata`\n\n          Specifically selects the Metadata of the policy. The content is a JSON object having the policy's JSON structure with the difference that the JSON leaves of the policy are JSON objects containing the metadata.\n\n        #### Examples\n\n        * `?fields=policyId,entries,_revision`\n        * `?fields=entries(ditto,user),_namespace`\n      required: false\n      schema:\n        type: string\n    PolicyIdPathParam:\n      name: policyId\n      in: path\n      description: |-\n        The ID of the policy needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).\n\n        The namespace needs to:\n        * conform to the reverse domain name notation\n      required: true\n      schema:\n        type: string\n    PropertiesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields from the properties to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the properties by\n        using a comma-separated list:\n          * several properties paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=temperature` would select only `temperature` property value (if present)\n              * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields\n        inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property\n\n        #### Examples\n\n        * `?fields=temperature,humidity,location(longitude,latitude)`\n\n        * `?fields=configuration,status(powerConsumption/watts)`\n      required: false\n      schema:\n        type: string\n    PropertyPathPathParam:\n      name: propertyPath\n      in: path\n      description: The path to the property\n      required: true\n      schema:\n        type: string\n    PutMetadataParam:\n      name: put-metadata\n      in: header\n      description: 'The `put-metadata` header, which sets Metadata information in the Thing.'\n      required: false\n      schema:\n        type: array\n        description: An array of objects containing metadata to apply.\n        items:\n          type: object\n          description: Object containing a `key` where to apply the metadata and a `value` with the metadata value to apply.\n          additionalProperties:\n            properties:\n              key:\n                type: string\n                description: The JsonPointer to set the metadata `value` to. May start with `*/\u003ckey\u003e` in order to apply the metadata to all affected JSON leaves.\n              value:\n                description: The arbitrary JSON value to set as metadata.\n    GetMetadataParam:\n      name: get-metadata\n      in: header\n      description: 'The `get-metadata` header, which retrieves Metadata of the Thing.'\n      required: false\n      schema:\n        type: string\n        description: A string of comma separated JsonPointers to retrieve from the Metadata of the Thing.\n    DeleteMetadataParam:\n      name: delete-metadata\n      in: header\n      description: 'The `delete-metadata` header, which deletes Metadata of the Thing.'\n      required: false\n      schema:\n        type: string\n        description: A string of comma separated JsonPointers to delete from the Metadata of the Thing.\n    RequestedAcksParam:\n      name: requested-acks\n      in: query\n      description: |-\n        Contains the \"requested acknowledgements\" for this modifying request as comma separated list. The HTTP call will\n        block until all requested acknowledgements were aggregated or will time out based on the specified `timeout`\n        parameter.\n\n        The default (if omitted) requested acks is `requested-acks=twin-persisted` which will block the\n        HTTP call until the change was persited to the twin.\n      required: false\n      schema:\n        type: string\n    ResourcePathPathParam:\n      name: resourcePath\n      in: path\n      description: The path of an (Authorization) Resource\n      required: true\n      schema:\n        type: string\n    ResponseRequiredParam:\n      name: response-required\n      in: query\n      description: |-\n        Defines whether a response is required to the API call or not - if set to `false` the response will directly\n        sent back with a status code of `202` (Accepted).\n\n        The default (if ommited) response is `true`.\n      required: false\n      schema:\n        type: boolean\n    SearchFilter:\n      name: filter\n      in: query\n      description: |-\n\n        #### Filter predicates:\n\n        * ```eq({property},{value})```  (i.e. equal to the given value)\n\n        * ```ne({property},{value})```  (i.e. not equal to the given value)\n\n        * ```gt({property},{value})```  (i.e. greater than the given value)\n\n        * ```ge({property},{value})```  (i.e. equal to the given value or greater than it)\n\n        * ```lt({property},{value})```  (i.e. lower than the given value or equal to it)\n\n        * ```le({property},{value})```  (i.e. lower than the given value)\n\n        * ```in({property},{value},{value},...)```  (i.e. contains at least one of the values listed)\n\n        * ```like({property},{value})```  (i.e. contains values similar to the expressions listed)\n\n        * ```exists({property})```  (i.e. all things in which the given path exists)\n\n\n        Note: When using filter operations, only things with the specified properties are returned.\n        For example, the filter `ne(attributes/owner, \"SID123\")` will only return things that do have\n        the `owner` attribute.\n\n\n        #### Logical operations:\n\n\n        * ```and({query},{query},...)```\n\n        * ```or({query},{query},...)```\n\n        * ```not({query})```\n\n\n        #### Examples:\n\n        * ```eq(attributes/location,\"kitchen\")```\n\n        * ```ge(thingId,\"myThing1\")```\n\n        * ```gt(_created,\"2020-08-05T12:17\")```\n\n        * ```exists(features/featureId)```\n\n        * ```and(eq(attributes/location,\"kitchen\"),eq(attributes/color,\"red\"))```\n\n        * ```or(eq(attributes/location,\"kitchen\"),eq(attributes/location,\"living-room\"))```\n\n        * ```like(attributes/key1,\"known-chars-at-start*\")```\n\n        * ```like(attributes/key1,\"*known-chars-at-end\")```\n\n        * ```like(attributes/key1,\"*known-chars-in-between*\")```\n\n        * ```like(attributes/key1,\"just-som?-char?-unkn?wn\")```\n\n        The `like` filters with the wildcard `*` at the beginning can slow down your search request.\n      required: false\n      schema:\n        type: string\n    SubjectIdPathParam:\n      name: subjectId\n      in: path\n      description: The ID of an (Authorization) Subject\n      required: true\n      schema:\n        type: string\n    ThingFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma-separated list of fields to be included in the returned\n        JSON. attributes can be selected in the same manner.\n\n        #### Selectable fields\n\n        * `thingId`\n        * `policyId`\n        * `definition`\n        * `attributes`\n\n           Supports selecting arbitrary sub-fields by using a comma-separated list:\n            * several attribute paths can be passed as a comma-separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=attributes/model` would select only `model` attribute value (if present)\n                * `?fields=attributes/model,attributes/location` would select only `model` and\n                   `location` attribute values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)\n              separated with `/`) to select\n\n            * sub-selectors can be used to request only specific sub-fields by placing expressions\n              in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=attributes(model,location)` would select only `model`\n                  and `location` attribute values (if present)\n               * `?fields=attributes(coffeemaker/serialno)` would select the `serialno` value\n                  inside the `coffeemaker` object\n               * `?fields=attributes/address/postal(city,street)` would select the `city` and\n                  `street` values inside the `postal` object inside the `address` object\n\n        * `features`\n\n          Supports selecting arbitrary fields in features similar to `attributes` (see also features documentation for more details)\n\n        * `_namespace`\n\n          Specifically selects the namespace also contained in the `thingId`\n\n        * `_revision`\n\n          Specifically selects the revision of the thing. The revision is a counter, which is incremented on each modification of a thing.\n\n        * `_created`\n\n          Specifically selects the created timestamp of the thing in ISO-8601 UTC format. The timestamp is set on creation of a thing.\n\n        * `_modified`\n\n          Specifically selects the modified timestamp of the thing in ISO-8601 UTC format. The timestamp is set on each modification of a thing.\n\n        * `_metadata`\n\n          Specifically selects the Metadata of the thing. The content is a JSON object having the Thing's JSON structure with the difference that the JSON leaves of the Thing are JSON objects containing the metadata.\n\n        * `_policy`\n\n          Specifically selects the content of the policy associated to the thing. (By default, only the policyId is returned.)\n\n        #### Examples\n\n        * `?fields=thingId,attributes,features`\n        * `?fields=attributes(model,manufacturer),features`\n      required: false\n      schema:\n        type: string\n    ThingIdPathParam:\n      name: thingId\n      in: path\n      description: 'The ID of a thing needs to follow the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.org/ditto/basic-namespaces-and-names.html#namespaced-id)).'\n      required: true\n      schema:\n        type: string\n    TimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Defines how long the backend should wait for completion of the request, e.g. applied when waiting for requested\n        acknowledgements via the `requested-acks` param. Can be specified without unit (then seconds are assumed) or\n        together with `s`, `ms` or `m` unit. Example: `42s`, `1m`.\n\n        The default (if omitted) and maximum timeout is `60s`. A value of `0` applies fire and forget semantics for\n        the command resulting in setting `response-required=false`.\n      required: false\n      schema:\n        type: string\n    connectionIdPathParam:\n      name: connectionId\n      in: path\n      description: The ID of the connection\n      required: true\n      schema:\n        type: string\n  schemas:\n    Error:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - message\n    AdvancedError:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        error:\n          type: string\n          description: The error code of the occurred exception\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - error\n        - message\n    Attributes:\n      type: object\n      description: An arbitrary JSON object describing the attributes of a thing.\n    Definition:\n      type: string\n      description: 'A single fully qualified identifier of a definition in the form ''\u003cnamespace\u003e:\u003cname\u003e:\u003cversion\u003e'' or a valid HTTP(s) URL'\n      pattern: '([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+)'\n    FeatureDefinition:\n      type: array\n      description: The definitions of a feature.\n      items:\n        type: string\n        description: 'A single fully qualified identifier of a feature definition in the form ''\u003cnamespace\u003e:\u003cname\u003e:\u003cversion\u003e'' or a valid HTTP(s) URL'\n        pattern: '([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+)'\n    FeatureProperties:\n      type: object\n      description: An arbitrary JSON object describing the properties of a feature.\n    FeatureDesiredProperties:\n      type: object\n      description: An arbitrary JSON object describing the desired properties of a feature.\n    Feature:\n      type: object\n      properties:\n        definition:\n          $ref: '#/components/schemas/FeatureDefinition'\n        properties:\n          $ref: '#/components/schemas/FeatureProperties'\n        desiredProperties:\n          $ref: '#/components/schemas/FeatureDesiredProperties'\n    SearchResultThings:\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thing'\n        cursor:\n          type: string\n    SearchResultThingsCount:\n      type: integer\n    NewThing:\n      type: object\n      properties:\n        _policy:\n          allOf:\n            - $ref: '#/components/schemas/Policy'\n          description: |-\n            The initial policy to create for this thing. This will create a separate policy entity managed by resource `/policies/{thingId}`.\n\n\n            Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n        _copyPolicyFrom:\n          type: string\n          description: |-\n            This field may contain\n            * the policy ID of an existing policy.\n\n              The policy is copied and used for this newly created thing. The\n              caller needs to have READ and WRITE\u003csup\u003e*\u003c/sup\u003e access to the policy.\n            * a placeholder reference to a thing in the format {{ ref:things/[thingId]/policyId }} where you need to\n              replace [thingId] with a valid thing ID.\n\n              The newly created thing will then obtain a copy of the policy of\n              the referenced thing. The caller needs to have READ access to the thing and READ and WRITE\u003csup\u003e*\u003c/sup\u003e\n              access to the policy of the thing.\n\n\n            \u003csup\u003e*\u003c/sup\u003e The check for WRITE permission avoids locking yourself out of the newly created policy. You can\n            bypass this check by setting the header `allowPolicyLockout` to `true`. Be aware that the authorized\n            subject cannot modify the policy if you do not assign WRITE permission on the policy resource!\n\n            If you want to specify a policy ID for the copied policy, use the policyId field.\n\n            This field must not be used together with the field _policy. If you specify both _policy and _copyPolicyFrom\n            this will lead to an error response.\n        policyId:\n          type: string\n          description: |-\n            The policy ID used for controlling access to this thing. Managed by\n            resource `/policies/{policyId}`.\n        definition:\n          $ref: '#/components/schemas/Definition'\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n        features:\n          $ref: '#/components/schemas/Features'\n      required:\n        - policyId\n    PatchThing:\n      type: object\n      properties:\n        thingId:\n          type: string\n          description: Unique identifier representing the thing\n        policyId:\n          type: string\n          description: 'The ID of the policy which controls the access to this thing. policies are managed by resource `/policies/{policyId}`'\n        definition:\n          $ref: '#/components/schemas/Definition'\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n        features:\n          $ref: '#/components/schemas/Features'\n      required:\n        - thingId\n        - policyId\n    Thing:\n      type: object\n      properties:\n        thingId:\n          type: string\n          description: Unique identifier representing the thing\n        policyId:\n          type: string\n          description: 'The ID of the policy which controls the access to this thing. policies are managed by resource `/policies/{policyId}`'\n        definition:\n          $ref: '#/components/schemas/Definition'\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n        features:\n          $ref: '#/components/schemas/Features'\n        _revision:\n          type: string\n          description: |-\n            _(read-only)_ The revision is a counter which is incremented on each modification of a Thing. This field\n            is not returned by default but must be selected explicitly.\n        _created:\n          type: string\n          description: |-\n            _(read-only)_ The created timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on creation\n            of a Thing. This field is not returned by default but must be selected explicitly.\n        _modified:\n          type: string\n          description: |-\n            _(read-only)_ The modified timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on each\n            modification of a Thing. This field is not returned by default but must be selected explicitly.\n        _metadata:\n          type: object\n          description: _(read-only)_ The Metadata of the Thing. This field is not returned by default but must be selected explicitly.\n      required:\n        - thingId\n        - policyId\n    NewPolicy:\n      type: object\n      description: Policy consisting of policy entries\n      properties:\n        entries:\n          $ref: '#/components/schemas/PolicyEntries'\n      required:\n        - entries\n    Policy:\n      type: object\n      description: Policy consisting of policy entries\n      properties:\n        policyId:\n          type: string\n          description: Unique identifier representing the policy\n        entries:\n          $ref: '#/components/schemas/PolicyEntries'\n        imports:\n          $ref: '#/components/schemas/PolicyImports'\n      required:\n        - policyId\n        - entries\n    PolicyImports:\n      type: object\n      description: Policy imports containing one policy import for each key. The key is the policy ID of the referenced policy.\n      properties:\n        policyImport1:\n          $ref: '#/components/schemas/PolicyImport'\n        policyImportN:\n          $ref: '#/components/schemas/PolicyImport'\n      example:\n        'com.acme:policyId1':\n          entries:\n            - label1\n            - label2\n        'com.acme:policyId2':\n          entries:\n            - import\n        'com.acme:policyId3': {}\n    PolicyImport:\n      type: object\n      description: Single policy import defining which policy entries of the referenced policy are imported.\n      properties:\n        entries:\n          type: array\n          default: []\n          description: |-\n            The policy entries to import from the referenced policy identified by their labels. \n            In case the field is omitted or an empty array is provided, \n            all policy entries defined as implicit (\"importable\": \"implicit\") are imported.\n          items:\n            type: string\n            description: Label of a policy entry to import from the referenced policy.\n      example:\n        entries:\n          - default\n          - import\n    Importable:\n      type: string\n      description: |-\n        Controls the import behavior of this policy entry i.e. whether this policy entry is implicitly, \n        explicitly or never imported when referenced from another policy.\n        * `implicit` (default): the policy entry is imported without being listed in the importing policy individually\n        * `explicit`: the policy entry is only imported if it is listed in the importing policy\n        * `never`: the policy entry is not imported, regardless of being listed in the importing policy\n        If the field is not specified, default value is `implicit`.\n      enum:\n        - implicit\n        - explicit\n        - never\n      default: implicit\n      example: explicit\n    PolicyEntries:\n      type: object\n      description: Policy entries containing one policy entry for each arbitrary `label` key\n      properties:\n        label1:\n          $ref: '#/components/schemas/PolicyEntry'\n        labelN:\n          $ref: '#/components/schemas/PolicyEntry'\n    PolicyEntry:\n      type: object\n      description: Single policy entry containing Subjects and Resources.\n      properties:\n        subjects:\n          $ref: '#/components/schemas/Subjects'\n        resources:\n          $ref: '#/components/schemas/Resources'\n        importable:\n          $ref: '#/components/schemas/Importable'\n      required:\n        - subjects\n        - resources\n    Subjects:\n      type: object\n      description: A SubjectEntry defines who is addressed.\n      properties:\n        'nginx:subjectId1':\n          $ref: '#/components/schemas/SubjectEntry'\n        'nginx:subjectIdN':\n          $ref: '#/components/schemas/SubjectEntry'\n    SubjectEntry:\n      type: object\n      description: Single (Authorization) Subject entry holding its type.\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: 'The type is offered only for documentation purposes. You are not restricted to any specific types, but we recommend to use it to specify the kind of the subject as shown in our examples.'\n        expiry:\n          type: string\n          description: The optional expiry timestamp (formatted in ISO-8601) indicates how long this subject should be considered active before it is automatically deleted from the Policy.\n          format: date-time\n        announcement:\n          $ref: '#/components/schemas/SubjectAnnouncement'\n      example:\n        type: 'This is some description for this subject, adjust as needed.'\n        expiry: '2020-12-07T11:36:40Z'\n        announcement:\n          beforeExpiry: 5m\n          whenDeleted: true\n    Resources:\n      type: object\n      description: |-\n        (Authorization) Resources containing one ResourceEntry for each\n        `type:path` key, `type` being one of the following `thing`, `policy`, `message`.\n      additionalProperties:\n        $ref: '#/components/schemas/ResourceEntry'\n      example:\n        'thing:/':\n          grant:\n            - READ\n            - WRITE\n          revoke: null\n        'thing:/attributes/some/path':\n          grant: null\n          revoke:\n            - READ\n        'policy:/':\n          grant:\n            - READ\n            - WRITE\n          revoke: null\n        'message:/':\n          grant:\n            - READ\n            - WRITE\n          revoke: null\n    ResourceEntry:\n      type: object\n      description: |-\n        Single (Authorization) Resource entry defining permissions per effect.\n        Allowed effects are `grant` and `revoke`.\n      properties:\n        grant:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n        revoke:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    Permission:\n      type: string\n      description: A Permission allows a certain action on an entity\n      enum:\n        - READ\n        - WRITE\n    SubjectAnnouncement:\n      type: object\n      description: Settings for announcements to be made about the subject.\n      properties:\n        beforeExpiry:\n          type: string\n          description: |-\n            The duration before expiry when an announcement should be made.\n            Must be a positive integer followed by one of `h` (hour), `m` (minute) or `s` (second).\n        whenDeleted:\n          type: boolean\n          description: Whether an announcement should be made when this subject is deleted.\n        requestedAcks:\n          type: object\n          description: Settings to enable at-least-once delivery for policy announcements.\n          properties:\n            labels:\n              type: array\n              description: Acknowledgement labels to request when an announcement is published.\n              items:\n                type: string\n            timeout:\n              type: string\n              description: How long to wait for requested announcements before retrying publication of an announcement.\n          example:\n            labels:\n              - 'my-connection-id:my-issued-acknowledgement'\n            timeout: 5s\n        randomizationInterval:\n          type: string\n          default: 5m\n          description: 'Interval in which the announcement can be sent earlier than the configured `beforeExpiry`. The actual point in time when the announcement will be sent is `beforeExpire` plus a randomly chosen time within the `randomizationInterval`. E.g assuming `beforeExpiry` is set to 5m and `randomizationInterval` is set to 1m, the announcements will be sent between 5 and 6 minutes before the subject expires. If omitted, the default value will be applied. If set to minimum, no randomization will be applied.'\n      example:\n        beforeExpiry: 5m\n        whenDeleted: true\n        randomizationInterval: 5m\n    Features:\n      type: object\n      description: |-\n        List of features where the key represents the `featureId` of each feature.\n        The `featureId` key must be unique in the list.\n      additionalProperties:\n        $ref: '#/components/schemas/Feature'\n    Connection:\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              description: The generated unique identifier of the connection\n        - $ref: '#/components/schemas/NewConnection'\n    NewConnection:\n      type: object\n      required:\n        - connectionType\n        - connectionStatus\n        - uri\n        - sources\n        - targets\n      properties:\n        name:\n          type: string\n          description: The name of the connection\n        connectionType:\n          $ref: '#/components/schemas/ConnectionType'\n        connectionStatus:\n          $ref: '#/components/schemas/ConnectivityStatus'\n        uri:\n          type: string\n          description: The URI of the connection\n        sources:\n          $ref: '#/components/schemas/Sources'\n        targets:\n          $ref: '#/components/schemas/Targets'\n        specificConfig:\n          type: object\n          description: Configuration which is only applicable for a specific connection type\n        clientCount:\n          type: number\n          description: How many clients on different cluster nodes should establish the connection\n        failoverEnabled:\n          type: boolean\n          description: Whether or not failover is enabled for this connection\n        validateCertificates:\n          type: boolean\n          description: Whether or not to validate server certificates on connection establishment\n        mappingDefinitions:\n          $ref: '#/components/schemas/PayloadMappingDefinitions'\n        mappingContext:\n          $ref: '#/components/schemas/MappingContext'\n        sshTunnel:\n          type: object\n          description: The configuration of a local SSH port forwarding used to tunnel the connection to the actual endpoint.\n          required:\n            - enabled\n            - uri\n            - credentials\n          properties:\n            enabled:\n              type: boolean\n              description: Whether the tunnel is enabled\n              example: true\n            uri:\n              type: string\n              description: 'The URI of the SSH host in the format `ssh://[host]:[port]`.'\n              example: 'ssh://some.host:2222'\n            credentials:\n              type: object\n              description: The credentials used to authenticate at the SSH host. Password and public key authentication are supported.\n              required:\n                - type\n                - username\n              properties:\n                type:\n                  type: string\n                  description: The type of credentials used to authenticate. Either `password` or `public-key`.\n                  enum:\n                    - password\n                    - public-key\n                  example: password\n                username:\n                  type: string\n                  description: The username used for the authentication.\n                  example: user42\n                password:\n                  type: string\n                  description: The password used for authentication when credentials type `password` is used.\n                  example: secret!\n                publicKey:\n                  type: string\n                  description: |-\n                    Public key in PEM base64-encoded format using X.509 syntax. This field is required for credentials type\n                    `public-key`.\n                  example: |\n                    -----BEGIN PUBLIC KEY-----\n                    ...\n                    -----END PUBLIC KEY-----\n                privateKey:\n                  type: string\n                  description: |-\n                    Private key in PEM base64-encoded format using PKCS #8 syntax. This field is required for credentials type\n                    `public-key`.\n                  example: |\n                    -----BEGIN PRIVATE KEY-----\n                    ...\n                    -----END PRIVATE KEY-----\n            validateHost:\n              type: boolean\n              description: Whether the SSH host is validated using the provided fingerprints.\n              example: true\n            knownHosts:\n              type: array\n              description: |-\n                A list of accepted public key fingerprints. One of these fingerprints must match the fingerprint \n                of the public key the SSH host provides.\n              example:\n                - 'MD5:e0:3a:34:1c:68:ed:c6:bc:7c:ca:a8:67:c7:45:2b:19'\n              items:\n                type: string\n                description: |-\n                  The fingerprint is in the format which the command line tool `ssh-keygen` produces,\n                  e.g. `MD5:e0:3a:34:1c:68:ed:c6:bc:7c:ca:a8:67:c7:45:2b:19`. The fingerprint is prefixed with the hash algorithm\n                  used to calculate the fingerprint. Supported algorithms are `MD5`, `SHA1`, `SHA224`, `SHA256`, `SHA384` and `SHA512`.\n        tags:\n          type: array\n          items:\n            type: string\n          description: The tags of the connection\n    Sources:\n      type: array\n      title: The subscription sources of this connection\n      description: The subscription sources of this connection\n      uniqueItems: true\n      items:\n        $ref: '#/components/schemas/Source'\n    Source:\n      type: object\n      title: Source\n      description: A subscription source subscribed by this connection\n      properties:\n        addresses:\n          type: array\n          uniqueItems: true\n          title: Array of source addresses\n          description: |\n            The source addresses this connection consumes messages from. The \"telemetry\", \"events\",\n            \"command_response\" aliases should be used for connections of type \"hono\".\n          items:\n            type: string\n            title: Source address\n            description: A source address to consume messages from\n        consumerCount:\n          type: integer\n          title: Consumer count\n          description: The number of consumers that should be attached to each source address\n          default: 1\n        qos:\n          type: integer\n          title: Quality of service level\n          description: Maximum Quality-of-Service level to request when subscribing for messages\n        authorizationContext:\n          type: array\n          title: The authorization context\n          description: The authorization context defines all authorization subjects associated for this source\n          uniqueItems: true\n          items:\n            type: string\n            title: Authorization Subject\n            description: |-\n              An authorization subject associated with this source.\n              You can either use a fixed subject or use a placeholder that resolves header values from incoming messages.\n              For example to use the `device_id` header in the subject, you can specify the placeholder\n              `{{ header:device_id }}` which is then replaced by Ditto when a message from this source is processed.\n              By using a placeholder you can access any header value: `{{ header:\u003cany-header-name\u003e }}`\n            example:\n              - 'ditto:myAuthorizationSubject'\n              - 'device:{{ header:device_id }}'\n        enforcement:\n          type: object\n          title: Enforcement configuration\n          description: Defines an enforcement for this source to make sure that a device can only access its associated Thing.\n          required:\n            - input\n            - filters\n          properties:\n            input:\n              type: string\n              title: Input value of enforcement\n              description: |-\n                The input value of the enforcement that should identify the origin of the message (e.g. a\n                device id). You can use placeholders within this field depending on the connection type. E.g. for AMQP\n                1.0 connections you can use `{{ header:[any-header-name] }}` to resolve the value from a message header.\n              example: '{{ header:device_id }}'\n            filters:\n              type: array\n              title: The enforcement filters\n              description: An array of filters. One of the defined filters must match the input value from the message otherwise the message is rejected.\n              uniqueItems: true\n              items:\n                type: string\n                title: Enforcement filter\n                description: |-\n                  A filter that must match the input value for a message to be accepted. You can use the placeholders\n                   `{{ thing:id }}`, `{{ thing:name }}` or `{{ thing:namespace }}` in a filter.\n                example:\n                  - '{{ thing:id }}'\n                  - '{{ thing:namespace }}/{{ thing:name }}'\n        acknowledgementRequests:\n          type: object\n          title: Acknowledgement requests configuration\n          description: Contains requests to acknowledgements which must be fulfilled before a message consumed from this source is technically settled/ACKed at the e.g. message broker.\n          additionalProperties: false\n          properties:\n            includes:\n              type: array\n              title: Included acknowledgement requests\n              description: Acknowledgement requests to be included for each message consumed by this source.\n              items:\n                title: String representation of a single acknowledgement request\n                type: string\n            filter:\n              type: string\n              title: Filter expression whether to include acknowledgements at all\n              description: 'Optional filter to be applied to the requested acknowledgements - takes an `fn:filter()` function expression'\n              example:\n                - 'fn:filter(header:qos,''ne'',0)'\n          required:\n            - includes\n        payloadMapping:\n          type: array\n          title: The payload mappings\n          description: A list of payload mappings that are applied to messages received via this source. If no payload mapping is specified the standard Ditto mapping is used as default.\n          items:\n            type: string\n            title: Payload Mapping\n            description: References a payload mapping definition by its ID (the key of the PayloadMappingDefinition)\n            example:\n              - Ditto\n              - status\n        headerMapping:\n          type: object\n          title: Header mapping configuration\n          description: Ditto protocol headers computed from external headers and certain properties of the Ditto protocol messages created by payload mapping.\n        replyTarget:\n          type: object\n          title: Reply target configuration\n          description: Configuration for sending responses of incoming commands.\n          additionalProperties: false\n          properties:\n            enabled:\n              type: boolean\n              title: Whether reply target is enabled\n              description: Whether reply target is enabled.\n            address:\n              type: string\n              title: Reply target address\n              description: |-\n                The target address where responses of incoming commands from the parent source are published to.\n                The following placeholders are allowed within the target address:\n\n                * Thing ID: `{{ thing:id }}`\n\n                * Thing Namespace: `{{ thing:namespace }}`\n\n                * Thing Name: `{{ thing:name }}` (the part of the ID without the namespace)\n\n                * Ditto protocol topic attribute: `{{ topic:[topic-placeholder-attr] }}`\n\n                * Ditto protocol header value: `{{ header:[any-header-name] }}`\n\n                If placeholder resolution fails for a response, then the response is dropped.\n                NOTE Use \"command\" alias for connections of type \"hono\".\n              example:\n                - '{{ header:device_id }}'\n                - '{{ source:address }}'\n            headerMapping:\n              type: object\n              title: Header mapping configuration\n              description: External headers computed from headers and other properties of Ditto protocol messages.\n            expectedResponseTypes:\n              type: array\n              title: Expected response types\n              description: Contains a list of response types that should be published to the reply target.\n              uniqueItems: true\n              items:\n                type: string\n                title: Response types\n                enum:\n                  - response\n                  - error\n                  - nack\n          required:\n            - address\n    Targets:\n      type: array\n      title: The publish targets of this connection\n      description: The publish targets of this connection\n      uniqueItems: true\n      items:\n        $ref: '#/components/schemas/Target'\n    Target:\n      type: object\n      title: Target\n      description: A publish target served by this connection\n      properties:\n        address:\n          type: string\n          title: Target address\n          description: |-\n            The target address where events, commands and messages are published to.\n            The following placeholders are allowed within the target address:\n\n            * Thing ID: `{{ thing:id }}`\n\n            * Thing Namespace: `{{ thing:namespace }}`\n\n            * Thing Name: `{{ thing:name }}` (the part of the ID without the namespace)\n            NOTE Use \"command\" alias for connections of type \"hono\".\n        topics:\n          type: array\n          title: Topics\n          description: The topics to which this target is registered for\n          uniqueItems: true\n          items:\n            type: string\n            enum:\n              - _/_/things/twin/events\n              - _/_/things/live/commands\n              - _/_/things/live/events\n              - _/_/things/live/messages\n              - _/_/policies/announcements\n              - _/_/connections/announcements\n            title: Subscribed topics\n            description: |-\n              Contains the type of messages that are delivered to this target. You can receive\n\n              * Thing events: `_/_/things/twin/events` (notification about twin change)\n\n              * Live events: `_/_/things/live/events`\n\n              * Live commands: `_/_/things/live/commands`\n\n              * Live messages: `_/_/things/live/messages`\n\n              * Policy announcements: `_/_/policies/announcements`\n\n              * Connection announcements: `_/_/connections/announcements`\n        qos:\n          type: integer\n          title: Quality of service level\n          description: Maximum Quality-of-Service level to request when subscribing for messages\n        authorizationContext:\n          type: array\n          title: The authorisation context\n          description: The authorization context defines all authorization subjects associated for this target\n          uniqueItems: true\n          items:\n            type: string\n            title: Authorization Subject\n            description: An authorization subject associated with this target\n            example:\n              - 'ditto:myAuthorizationSubject'\n        issuedAcknowledgementLabel:\n          type: string\n          title: Issued acknowledgement label for this target\n          description: The optional label of an acknowledgement which should automatically be issued by this target based on the technical settlement/ACK the connection channel provides.\n        payloadMapping:\n          type: array\n          title: The payload mappings\n          description: A list of payload mappings that are applied to messages sent via this target. If no payload mapping is specified the standard Ditto mapping is used as default.\n          items:\n            type: string\n            title: Payload Mapping\n            description: References a payload mapping definition by its ID (the key of the PayloadMappingDefinition)\n            example:\n              - javascript\n        headerMapping:\n          type: object\n          title: Header mapping configuration\n          description: External headers computed from headers and other properties of Ditto protocol messages.\n    ConnectionType:\n      type: string\n      description: The type of a connection\n      enum:\n        - amqp-091\n        - amqp-10\n        - http-push\n        - mqtt\n        - mqtt-5\n        - 'kafka,'\n        - hono\n    ConnectivityStatus:\n      type: string\n      description: The status of a connection or resource\n      enum:\n        - open\n        - closed\n        - failed\n        - misconfigured\n        - unknown\n    PayloadMappingDefinitions:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/PayloadMappingDefinition'\n      description: |-\n        List of mapping definitions where the key represents the ID of each mapping that can be used in sources and\n        targets to reference a mapping.\n    PayloadMappingDefinition:\n      type: object\n      description: A mapping definition consisting of the used mappingEngine and the options required by this engine.\n      required:\n        - mappingEngine\n        - options\n      properties:\n        mappingEngine:\n          type: string\n          description: |-\n            The mapping engine used to process incoming and outgoing messages. Available mapping engines are\n            `JavaScript`, `Normalized`, `ConnectionStatus`, `RawMessage`, `Ditto`, `ImplicitThingCreation`, and `UpdateTwinWithLiveResponse`.\n        options:\n          type: object\n          description: |-\n            Configuration options specific to the used mapping engine:\n\n            #### JavaScript\n              * `incomingScript` (`string`, required): The mapping script for incoming messages\n              * `outgoingScript` (`string`, required): The mapping script for outgoing messages\n              * `loadBytebufferJS` (`boolean`, optional): Whether or not ByteBufferJS library should be included\n                (default: `false`)\n              * `loadLongJS` (`boolean`, optional): Whether or not LongJS library should be included (default: `false`)\n\n            #### Normalized\n              * `fields` (`string`, optional): Comma separated list of fields included in the normalized message\n                (default: all fields included)\n\n            #### ConnectionStatus\n              * `thingId` (`string`, required): The ID of the thing\n              * `featureId` (`string`, optional): The ID of the modified feature (default: `ConnectionStatus`)\n\n            #### RawMessage\n              * `outgoingContentType` (`string`, optional): The fallback content type for outgoing messages.\n              * `incomingMessageHeaders` (`object`, optional): The fallback headers for incoming messages\n                containing the necessary information to map them to message commands and responses.\n                The relevant header keys are: `content-type`, `ditto-message-subject`, `ditto-message-direction`,\n                `ditto-message-thing-id`, `ditto-message-feature-id` and `status`. The header values may contain\n                placeholder expressions.\n\n            #### Ditto\n              * no options required\n\n            #### ImplicitThingCreation\n              * `thing` (`object`, required): The template of the thing to be implicitly created\n\n            #### UpdateTwinWithLiveResponse\n              * `dittoHeadersForMerge` (`object`, optional): The Ditto headers to use for constructing the \"merge thing\"\n                 command for updating the twin, may for example add a condition to apply in order to update the twin\n                 (default ditto headers: `response-required: false`, `if-match: \"*\"`).\n        incomingConditions:\n          type: object\n          description: |-\n            Optional conditions to be checked before applying the mapping engine to inbound messages.\n            Can use placeholders and functional expressions.\n        outgoingConditions:\n          type: object\n          description: |-\n            Optional conditions to be checked before applying the mapping engine to outbound messages.\n            Can use placeholders and functional expressions.\n    MappingContext:\n      type: object\n      deprecated: true\n      description: |-\n        MappingContext to apply in this connection containing JavaScript scripts mapping from external messages to\n        internal Ditto Protocol messages. Usage of MappingContext is deprecated, use PayloadMappingDefinitions instead.\n      required:\n        - incomingScript\n        - outgoingScript\n        - loadBytebufferJS\n        - loadLongJS\n      properties:\n        incomingScript:\n          type: string\n          description: The mapping script for incoming messages\n        outgoingScript:\n          type: string\n          description: The mapping script for outgoing messages\n        loadBytebufferJS:\n          type: boolean\n          description: Whether or not ByteBufferJS library should be included\n        loadLongJS:\n          type: boolean\n          description: Whether or not LongJS library should be included\n    ConnectionStatus:\n      type: object\n      description: Status of a connection and its resources\n      required:\n        - connectionId\n        - connectionStatus\n        - liveStatus\n        - connectedSince\n      properties:\n        connectionId:\n          type: string\n          description: The connection ID\n        connectionStatus:\n          allOf:\n            - $ref: '#/components/schemas/ConnectivityStatus'\n          description: The desired/target status of the connection\n        liveStatus:\n          allOf:\n            - $ref: '#/components/schemas/ConnectivityStatus'\n          description: The current/actual status of the connection\n        connectedSince:\n          type: string\n          description: The timestamp since when the connection is connected\n          example: '2019-01-21T08:57:24.710Z'\n        clientStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceStatus'\n          description: The client states of the of the connection\n        sourceStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceStatus'\n          description: The states of the sources the of the connection\n        targetStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceStatus'\n          description: The states of the targets the of the connection\n        sshTunnelStatus:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceStatus'\n          description: The states of the ssh tunnel the of the connection\n    ResourceStatus:\n      type: object\n      description: The status of a single resource (e.g. a client or a source/target resource)\n      required:\n        - type\n        - client\n        - status\n      properties:\n        type:\n          type: string\n          description: The type of the resource\n          enum:\n            - client\n            - source\n            - target\n        client:\n          type: string\n          description: A client identifier where the resource is held (e.g. a cluster instance ID)\n        address:\n          type: string\n          description: The address information of the resource (optional)\n        status:\n          $ref: '#/components/schemas/ConnectivityStatus'\n        statusDetails:\n          type: string\n          description: Details to the status of the resource\n        inStateSince:\n          type: string\n          description: Date since when the resource is in the present state\n    ConnectionMetrics:\n      type: object\n      description: Metrics of a connection\n      required:\n        - connectionId\n        - containsFailures\n        - connectionMetrics\n        - sourceMetrics\n        - targetMetrics\n      properties:\n        connectionId:\n          type: string\n          description: The connection ID\n        containsFailures:\n          type: boolean\n          description: Whether the connection metrics contains any failures\n          example: false\n        connectionMetrics:\n          $ref: '#/components/schemas/OverallConnectionMetrics'\n        sourceMetrics:\n          $ref: '#/components/schemas/SourceMetrics'\n        targetMetrics:\n          $ref: '#/components/schemas/TargetMetrics'\n    OverallConnectionMetrics:\n      type: object\n      description: Overall metrics of the connection\n      required:\n        - inbound\n        - outbound\n      properties:\n        inbound:\n          $ref: '#/components/schemas/InboundMetrics'\n        outbound:\n          $ref: '#/components/schemas/OutboundMetrics'\n    SourceMetrics:\n      type: object\n      description: Source metrics of the connection\n      required:\n        - addressMetrics\n      properties:\n        addressMetrics:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/InboundMetrics'\n          description: Contains \"inbound\" from external sources consumed metric counts\n    TargetMetrics:\n      type: object\n      description: Target metrics of the connection\n      required:\n        - addressMetrics\n      properties:\n        addressMetrics:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/OutboundMetrics'\n          description: Contains \"outbound\" towards external targets messages metric counts\n    InboundMetrics:\n      type: object\n      description: Metrics of an inbound (e.g. a Source) resource\n      required:\n        - consumed\n        - mapped\n        - dropped\n        - enforced\n      properties:\n        consumed:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains from external sources consumed metric counts\n        mapped:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains mapped (payload mapping) messages metric counts\n        dropped:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains dropped (in the payload mapping) messages metric counts\n        enforced:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains enforced (e.g. source address enforcement) messages metric counts\n    OutboundMetrics:\n      type: object\n      description: Metrics of an outbound (e.g. a Target) resource\n      required:\n        - dispatched\n        - filtered\n        - mapped\n        - dropped\n        - published\n      properties:\n        dispatched:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains internally dispatched (e.g. a Ditto event) metric counts\n        filtered:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains the metric counts for messages which passed the filter (e.g. namespace or RQL filter for events)\n        mapped:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains mapped (payload mapping) messages metric counts\n        dropped:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains dropped (in the payload mapping) messages metric counts\n        published:\n          allOf:\n            - $ref: '#/components/schemas/TypedMetric'\n          description: Contains published messages metric counts meaning those messages were published to the external source\n    TypedMetric:\n      type: object\n      description: Metrics of a single metric `type` containing \"success\" and \"failure\" metrics\n      required:\n        - success\n        - failure\n      properties:\n        success:\n          allOf:\n            - $ref: '#/components/schemas/SingleMetric'\n          description: Contains the successfully processed message counts\n        failure:\n          allOf:\n            - $ref: '#/components/schemas/SingleMetric'\n          description: Contains the failed processed message counts\n    SingleMetric:\n      type: object\n      description: Contains a single metric consisting of several time intervals and counter values for those intervals including the last message date.\n      required:\n        - PT1M\n        - PT1H\n        - PT24H\n        - lastMessageAt\n      properties:\n        PT1M:\n          type: integer\n          description: The counter containing how many messages were processed in the last minute\n          example: 0\n        PT1H:\n          type: integer\n          description: The counter containing how many messages were processed in the last hour\n          example: 42\n        PT24H:\n          type: integer\n          description: The counter containing how many messages were processed in the last 24 hours / last day\n          example: 46346\n        lastMessageAt:\n          type: string\n          description: The timestamp when the last message was processed\n          example: '2019-01-21T08:57:24.710Z'\n    ConnectionLogs:\n      type: object\n      description: Log entries of a connection.\n      required:\n        - connectionId\n        - connectionLogs\n      properties:\n        connectionId:\n          type: string\n          description: ID of the connection for which the log entries were logged.\n          example: 759304b8-8056-11e9-bc42-526af7764f64\n        connectionLogs:\n          type: array\n          description: Log entries for the connection.\n          items:\n            $ref: '#/components/schemas/LogEntry'\n        enabledSince:\n          type: string\n          description: Since when logging is enabled. Might be missing / null if logging is not enabled.\n          example: '2019-01-21T08:57:24.710Z'\n        enabledUntil:\n          type: string\n          description: Until when logging is enabled. Might be missing / null if logging is not enabled.\n          example: '2019-01-22T08:57:24.710Z'\n    LogEntry:\n      type: object\n      description: Represents a log entry for a connection.\n      required:\n        - timestamp\n        - correlationId\n        - message\n        - category\n        - type\n        - level\n      properties:\n        timestamp:\n          type: string\n          description: Timestamp of the log entry.\n          example: '2019-01-21T08:57:24.710Z'\n        correlationId:\n          type: string\n          description: Correlation ID that is associated with the log entry.\n          example: 759304b8-8056-11e9-bc42-526af7764f64\n        message:\n          type: string\n          description: The log message.\n          example: Successfully connected to ... at ...\n        category:\n          $ref: '#/components/schemas/LogCategory'\n        type:\n          $ref: '#/components/schemas/LogType'\n        level:\n          $ref: '#/components/schemas/LogLevel'\n        address:\n          type: string\n          description: Connection address on which the log occurred.\n          example: telemetry/address\n        thingId:\n          type: string\n          description: The thing for which the log entry was created.\n          example: 'org.ditto:theThing'\n    LogCategory:\n      type: string\n      description: A category to which the log entry can be referred to.\n      enum:\n        - source\n        - target\n        - response\n        - connection\n    LogType:\n      type: string\n      description: The type of a log entry describing during what kind of activity the entry was created.\n      enum:\n        - consumed\n        - dispatched\n        - filtered\n        - mapped\n        - dropped\n        - enforced\n        - published\n        - other\n    LogLevel:\n      type: string\n      description: Escalation level of a log entry.\n      enum:\n        - success\n        - failure\n    WhoAmI:\n      type: object\n      description: Contains information about the current user and the auth subjects available for the used authentication.\n      properties:\n        defaultSubject:\n          $ref: '#/components/schemas/WhoAmISubject'\n        subjects:\n          type: array\n          items:\n            $ref: '#/components/schemas/WhoAmISubject'\n    WhoAmISubject:\n      type: string\n      description: An auth subject that can be used to provide access for a caller (e.g. in subject entries of policies).\n    WotThingDescription:\n      type: object\n      description: A WoT Thing Description version 1.1\n      properties:\n        '@context':\n          oneOf:\n            - type: array\n              items:\n                type: string\n                enum:\n                  - 'https://www.w3.org/2019/wot/td/v1'\n                  - 'http://www.w3.org/ns/td'\n                  - 'https://www.w3.org/2022/wot/td/v1.1'\n            - type: string\n              enum:\n                - 'https://www.w3.org/2019/wot/td/v1'\n                - 'http://www.w3.org/ns/td'\n                - 'https://www.w3.org/2022/wot/td/v1.1'\n          example:\n            - 'https://www.w3.org/2022/wot/td/v1.1'\n        title:\n          type: string\n          example: My fancy Thing\n        titles:\n          type: object\n          additionalProperties:\n            type: string\n        description:\n          type: string\n          example: Does fancy stuff with IoT\n        descriptions:\n          type: object\n          additionalProperties:\n            type: string\n        '@type':\n          oneOf:\n            - type: string\n            - type: array\n              items:\n                type: string\n          example: Thing\n        id:\n          type: string\n          example: 'urn:org.eclipse.ditto:my-fancy-thing'\n        base:\n          type: string\n          format: iri-reference\n          example: 'https://ditto.eclipseprojects.io/api/2/org.eclipse.ditto:my-fancy-thing'\n        version:\n          type: object\n          properties:\n            model:\n              type: string\n            instance:\n              type: string\n          required:\n            - instance\n          example:\n            model: 1.0.0\n            instance: 1.0.0\n        links:\n          type: array\n          items:\n            type: object\n            properties:\n              href:\n                type: string\n                format: iri-reference\n              rel:\n                type: string\n              type:\n                type: string\n              anchor:\n                type: string\n            required:\n              - href\n            additionalProperties: true\n        security:\n          oneOf:\n            - type: string\n            - type: array\n              items:\n                type: string\n          example: basic_sc\n        securityDefinitions:\n          type: object\n          additionalProperties:\n            type: object\n          example:\n            basic_sc:\n              in: header\n              scheme: basic\n        support:\n          type: string\n          format: iri-reference\n          example: 'https://www.eclipse.org/ditto/'\n        created:\n          type: string\n          format: date-time\n        modified:\n          type: string\n          format: date-time\n        forms:\n          type: array\n          items:\n            type: object\n            properties:\n              op:\n                type: string\n              href:\n                type: string\n              'htv:methodName':\n                type: string\n              contentType:\n                type: string\n              additionalResponses:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    success:\n                      type: boolean\n                    schema:\n                      type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: object\n        actions:\n          type: object\n          additionalProperties:\n            type: object\n        events:\n          type: object\n          additionalProperties:\n            type: object\n        uriVariables:\n          type: object\n          additionalProperties:\n            type: object\n        schemaDefinitions:\n          type: object\n          additionalProperties:\n            type: object\n        profile:\n          oneOf:\n            - type: array\n              items:\n                type: string\n                format: iri-reference\n            - type: string\n              format: iri-reference\n      required:\n        - '@context'\n        - title\n        - security\n        - securityDefinitions\n      additionalProperties: true\n  securitySchemes:\n    NginxBasic:\n      type: http\n      description: Eclipse Ditto sandbox demo user (demo1 ... demo9) + password (demo)\n      scheme: basic\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: A JSON Web Token issued by a supported OAuth 2.0 Identity Provider.\n    Google:\n      type: oauth2\n      description: Allow Eclipse Ditto to perform OAuth2.0 based authentication accessing your Google-ID.\n      x-tokenName: id_token\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'\n          tokenUrl: /oauth2/google/token\n          scopes:\n            openid: Access your Google-ID\n    DevOpsBasic:\n      type: http\n      description: Eclipse Ditto devops user (devops) + password (foobar)\n      scheme: basic\n",
			"canonicalURL": "/github.com/eclipse-ditto/ditto@696bf8b8bb97411b4773c3cbce68b57692eb2315/-/blob/documentation/src/main/resources/openapi/ditto-api-2.yml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse-ditto/ditto/blob/696bf8b8bb97411b4773c3cbce68b57692eb2315/documentation/src/main/resources/openapi/ditto-api-2.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: anonymous type name conflict: \"DefinitionHeaders\"",
	"NotImplemented": [
		"array defaults",
		"oauth2 security",
		"object with additionalProperties",
		"unsupported content types"
	]
}