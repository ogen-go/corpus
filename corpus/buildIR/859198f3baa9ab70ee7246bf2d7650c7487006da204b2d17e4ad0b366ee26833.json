{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ctosin/realmeet"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "service/src/main/resources/api.yml",
			"byteSize": 9470,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  version: 1.0.0\r\n  title: realmeet\r\nservers:\r\n  - url: 'http://localhost:3000'\r\n\r\npaths:\r\n  /rooms/{id}:\r\n    get:\r\n      summary: 'Return a room by ID'\r\n      operationId: getRoom\r\n      tags:\r\n        - room\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: ID of the room\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        200:\r\n          description: 'OK'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/RoomDTO'\r\n        404:\r\n          description: Not Found\r\n\r\n    delete:\r\n      summary: 'Deletes a room by ID'\r\n      operationId: deleteRoom\r\n      tags:\r\n        - room\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: ID of the room\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        204:\r\n          description: 'Deleted Successfully'\r\n        404:\r\n          description: Not Found\r\n\r\n    put:\r\n      summary: 'Updates a room by ID'\r\n      operationId: updateRoom\r\n      tags:\r\n        - room\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: ID of the room\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/UpdateRoomDTO'\r\n        required: true\r\n      responses:\r\n        204:\r\n          description: 'Updated Successfully'\r\n        404:\r\n          description: Not Found\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n\r\n  /rooms:\r\n    post:\r\n      summary: 'Creates a room'\r\n      operationId: createRoom\r\n      tags:\r\n        - room\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/CreateRoomDTO'\r\n        required: true\r\n      responses:\r\n        201:\r\n          description: Created\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/RoomDTO'\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n\r\n  /allocations:\r\n    get:\r\n      summary: 'Lists allocations'\r\n      operationId: listAllocations\r\n      tags:\r\n        - allocation\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: employeeEmail\r\n          in: query\r\n          description: Email of the employee\r\n          schema:\r\n            type: string\r\n        - name: roomId\r\n          in: query\r\n          description: Room ID\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n        - name: startAt\r\n          in: query\r\n          description: Allocation start time\r\n          schema:\r\n            type: string\r\n            format: date\r\n        - name: endAt\r\n          in: query\r\n          description: Allocation end time\r\n          schema:\r\n            type: string\r\n            format: date\r\n        - $ref: '#/components/parameters/orderBy'\r\n        - $ref: '#/components/parameters/limit'\r\n        - $ref: '#/components/parameters/page'\r\n\r\n      responses:\r\n        200:\r\n          description: OK\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/AllocationDTO'\r\n\r\n    post:\r\n      summary: 'Creates an allocation'\r\n      operationId: createAllocation\r\n      tags:\r\n        - allocation\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/CreateAllocationDTO'\r\n        required: true\r\n      responses:\r\n        201:\r\n          description: Created\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AllocationDTO'\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n        404:\r\n          description: Not Found\r\n\r\n  /allocations/{id}:\r\n    delete:\r\n      summary: 'Deletes an allocation by ID'\r\n      operationId: deleteAllocation\r\n      tags:\r\n        - allocation\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: ID of the allocation\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        204:\r\n          description: 'Deleted Successfully'\r\n        404:\r\n          description: Not Found\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n\r\n    put:\r\n      summary: 'Updates an allocation by ID'\r\n      operationId: updateAllocation\r\n      tags:\r\n        - allocation\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: ID of the allocation\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/UpdateAllocationDTO'\r\n        required: true\r\n      responses:\r\n        204:\r\n          description: 'Updated Successfully'\r\n        404:\r\n          description: Not Found\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n\r\n  /reports/allocation:\r\n    post:\r\n      tags:\r\n        - report\r\n      summary: Generates the allocation report\r\n      operationId: createAllocationReport\r\n      parameters:\r\n        - $ref: '#/components/parameters/apiKey'\r\n        - name: email\r\n          in: query\r\n          description: The e-mail to send the report\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: dateFrom\r\n          in: query\r\n          description: Start date to filter\r\n          required: true\r\n          schema:\r\n            type: string\r\n            format: date\r\n        - name: dateTo\r\n          in: query\r\n          description: End date to filter\r\n          required: true\r\n          schema:\r\n            type: string\r\n            format: date\r\n        - name: reportFormat\r\n          in: query\r\n          description: Report format. Can be 'PDF' or 'XML'. Defaults to 'PDF'\r\n          required: false\r\n          schema:\r\n            type: string\r\n      responses:\r\n        201:\r\n          description: Created\r\n        422:\r\n          $ref: '#/components/responses/UnprocessableEntity'\r\n\r\ncomponents:\r\n  schemas:\r\n    UpdateRoomDTO:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n        seats:\r\n          type: integer\r\n\r\n    CreateRoomDTO:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/UpdateRoomDTO'\r\n\r\n    RoomDTO:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/CreateRoomDTO'\r\n        - type: object\r\n          properties:\r\n            id:\r\n              type: integer\r\n              format: int64\r\n\r\n    UpdateAllocationDTO:\r\n      type: object\r\n      properties:\r\n        subject:\r\n          type: string\r\n        startAt:\r\n          type: string\r\n          format: date-time\r\n        endAt:\r\n          type: string\r\n          format: date-time\r\n\r\n    CreateAllocationDTO:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/UpdateAllocationDTO'\r\n        - type: object\r\n          properties:\r\n            roomId:\r\n              type: integer\r\n              format: int64\r\n            employeeName:\r\n              type: string\r\n            employeeEmail:\r\n              type: string\r\n\r\n    AllocationDTO:\r\n      type: object\r\n      allOf:\r\n        - $ref: '#/components/schemas/CreateAllocationDTO'\r\n        - type: object\r\n          properties:\r\n            id:\r\n              type: integer\r\n              format: int64\r\n\r\n    ResponseError:\r\n      type: object\r\n      required:\r\n        - field\r\n        - errorCode\r\n      properties:\r\n        field:\r\n          type: string\r\n        errorCode:\r\n          type: string\r\n\r\n  responses:\r\n    UnprocessableEntity:\r\n      description: The server understands the content type of the request entity but was unable to process\r\n        the contained instructions.\r\n      content:\r\n        application/json:\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/components/schemas/ResponseError'\r\n\r\n  parameters:\r\n    orderBy:\r\n      name: orderBy\r\n      in: query\r\n      description: Field to order by\r\n      schema:\r\n        type: string\r\n\r\n    limit:\r\n      name: limit\r\n      in: query\r\n      description: Maximum number of returned records\r\n      schema:\r\n        type: integer\r\n\r\n    page:\r\n      name: page\r\n      in: query\r\n      description: The page of records to fetch (0 index based)\r\n      schema:\r\n        type: integer\r\n\r\n    apiKey:\r\n      name: api-key\r\n      in: header\r\n      description: The API key to authenticate the request\r\n      required: true\r\n      schema:\r\n        type: string\r\n"
		}
	},
	"Error": "buildIR: make ir: path \"/allocations\": get: responses: 200: contents: application/json: generate schema: item: allOf: schema type mismatch:  and object"
}