{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "docs/_static/vdr/v1.yaml",
			"byteSize": 13111,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts Verifiable Data Registry API spec\n  description: API specification for the Verifiable Data Registry\n  version: 1.0.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/vdr/v1/did:\n    post:\n      summary: Creates a new Nuts DID\n      description: |\n        The DID Document will be created according to the given request. If a combination of options is not allowed, a 400 is returned.\n        The default values for selfControl, assertionMethod, keyAgreement, and capabilityInvocation are true. The default for controllers is an empty list. All other options default to false.\n        Only a single keypair will be generated. All enabled methods will reuse the same key pair. A seperate keypair will be generated to generate the DID if SelfControl is false.\n\n        error returns:\n        * 400 - Invalid (combination of) options\n        * 500 - An error occurred while processing the request\n      operationId: \"createDID\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DIDCreateRequest'\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: \"New DID has been created successfully. Returns the DID document.\"\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/DIDDocument'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: did:nuts:EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic\n        schema:\n          type: string\n    get:\n      parameters:\n        - name: versionId\n          in: query\n          description: |\n            If a versionId parameter is provided, the DID resolution algorithm returns a specific version of the DID document.\n            The version is the Sha256 hash of the document.\n            The DID parameters versionId and versionTime are mutually exclusive.\n\n            See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)\n          required: false\n          example: \"4960afbdf21280ef248081e6e52317735bbb929a204351291b773c252afeebf4\"\n          schema:\n            type: string\n        - name: versionTime\n          in: query\n          description: |\n            If a versionTime parameter is provided, the DID resolution algorithm returns a specific version of the DID document.\n            The DID parameters versionId and versionTime are mutually exclusive.\n\n            See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)\n          required: false\n          example: \"2021-11-03T08:25:13Z\"\n          schema:\n            type: string\n      summary: \"Resolves a Nuts DID document\"\n      description: |\n        Resolves a Nuts DID document. It also resolves deactivated documents.\n\n        error returns:\n          * 400 - Returned in case of malformed DID\n          * 404 - Corresponding DID document could not be found\n          * 500 - An error occurred while processing the request\n      operationId: \"getDID\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: DID has been found and returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DIDResolutionResult'\n        default:\n          $ref: '../common/error_response.yaml'\n    put:\n      summary: Updates a Nuts DID document.\n      description: |\n        Updates a Nuts DID document.\n\n        error returns:\n          * 400 - DID document could not be updated because the DID param was malformed or the DID document is invalid\n          * 403 - DID document could not be updated because the DID is not managed by this node\n          * 404 - Corresponding DID document could not be found\n          * 409 - DID document could not be updated because the document is deactivated or its controllers are deactivated\n          * 500 - An error occurred while processing the request\n      operationId: \"updateDID\"\n      tags:\n        - DID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DIDUpdateRequest'\n      responses:\n        \"200\":\n          description: DID document has been updated.\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/DIDDocument'\n        default:\n          $ref: '../common/error_response.yaml'\n    delete:\n      summary: Deactivates a Nuts DID document according to the specification.\n      description: |\n        Updates a Nuts DID document.\n\n        error returns:\n          * 400 - DID document could not be deleted because the DID param was malformed\n          * 403 - DID document could not be deleted because the DID is not managed by this node\n          * 404 - Corresponding DID document could not be found\n          * 409 - DID document could not be deactivated because the the document was already deactivated\n          * 500 - An error occurred while processing the request\n      operationId: \"deactivateDID\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: DID document has been deactivated.\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/conflicted:\n    get:\n      summary: \"Retrieve the list of conflicted DID documents\"\n      description: |\n        Resolves DID documents with a conflict. It returns both the DID Document and metadata of the DID Document.\n\n        error returns:\n          * 500 - An error occurred while processing the request\n      operationId: \"conflictedDIDs\"\n      tags:\n        - DID\n      responses:\n        \"200\":\n          description: List of conflicting DID Documents. Empty list if there are none.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DIDResolutionResult'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}/verificationmethod:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: did:nuts:EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic\n        schema:\n          type: string\n    post:\n      summary: Creates and adds a new verificationMethod to the DID document.\n      description: |\n        It creates a new private public keypair. The public key is wrapped in verificationMethod. This method is added to the DID Document.\n        \n        By default, the key usage (verificationMethod relationships) is the same as when creating a new DID document.\n        To alter this, provide a body specifying the key usage.\n\n        error returns:\n        * 403 - Verification method could not be added because the DID is not managed by this node\n        * 404 - Corresponding DID document could not be found\n        * 500 - An error occurred while processing the request\n      operationId: addNewVerificationMethod\n      tags:\n        - DID\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerificationMethodRelationship'\n      responses:\n        \"200\":\n          description: \"New verification method has been created and added successfully. Returns the DID document.\"\n          content:\n            application/json+did-document:\n              schema:\n                $ref: '#/components/schemas/VerificationMethod'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vdr/v1/did/{did}/verificationmethod/{kid}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: did:nuts:EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic\n        schema:\n          type: string\n      - name: kid\n        in: path\n        description: URL encoded DID identifying the verification method.\n        required: true\n        example: \"did:nuts:EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic#zx1alkbvj2mqxi55WSVYWv_rek0uNO2iTZaqTTULpCE\"\n        schema:\n          type: string\n    delete:\n      summary: Delete a specific verification method\n      description: |\n        Removes the verification method from the DID Document.\n        Revokes the public key with the corresponding key-id.\n        Note: Other verification methods with different key-ids with the same private key will still be valid.\n\n        error returns:\n        * 403 - Verification method could not be deleted because the DID is not managed by this node\n        * 404 - Corresponding DID document or verification method could not be found\n        * 500 - An error occurred while processing the request\n      tags:\n        - DID\n      operationId: deleteVerificationMethod\n      responses:\n        \"204\":\n          description: Verification Method was successfully deleted\n        default:\n          $ref: '../common/error_response.yaml'\n\ncomponents:\n  schemas:\n    DIDDocument:\n      $ref: '../common/ssi_types.yaml#/components/schemas/DIDDocument'\n    DIDDocumentMetadata:\n      $ref: '../common/ssi_types.yaml#/components/schemas/DIDDocumentMetadata'\n    VerificationMethod:\n      $ref: '../common/ssi_types.yaml#/components/schemas/VerificationMethod'\n\n    DIDResolutionResult:\n      required:\n        - document\n        - documentMetadata\n      properties:\n        document:\n          $ref: '#/components/schemas/DIDDocument'\n        documentMetadata:\n          $ref: '#/components/schemas/DIDDocumentMetadata'\n    DIDUpdateRequest:\n      required:\n        - document\n        - currentHash\n      properties:\n        document:\n          $ref: '#/components/schemas/DIDDocument'\n        currentHash:\n          type: string\n          description: The hash of the document in hex format.\n    DIDCreateRequest:\n      properties:\n        controllers:\n          description: |\n            List of DIDs that can control the new DID Document. If selfControl = true and controllers is not empty,\n            the newly generated DID will be added to the list of controllers.\n          type: array\n          items:\n            type: string\n            description: DID according to Nuts specification\n            example: did:nuts:EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic\n        assertionMethod:\n          type: boolean\n          description: indicates if the generated key pair can be used for assertions.\n          default: true\n        authentication:\n          type: boolean\n          description: indicates if the generated key pair can be used for authentication.\n          default: false\n        capabilityInvocation:\n          type: boolean\n          description: |\n            indicates if the generated key pair can be used for altering DID Documents.\n            In combination with selfControl = true, the key can be used to alter the new DID Document.\n            Defaults to true when not given.\n            default: true\n        capabilityDelegation:\n          type: boolean\n          description: indicates if the generated key pair can be used for capability delegations.\n          default: true\n        keyAgreement:\n          type: boolean\n          description: indicates if the generated key pair can be used for Key agreements.\n          default: true\n        selfControl:\n          type: boolean\n          description: whether the generated DID Document can be altered with its own capabilityInvocation key.\n          default: true\n    VerificationMethodRelationship:\n      properties:\n        assertionMethod:\n          type: boolean\n          description: indicates if the generated key pair can be used for assertions.\n          default: true\n        authentication:\n          type: boolean\n          description: indicates if the generated key pair can be used for authentication.\n          default: false\n        capabilityInvocation:\n          type: boolean\n          description: |\n            indicates if the generated key pair can be used for altering DID Documents.\n            In combination with selfControl = true, the key can be used to alter the new DID Document.\n            Defaults to true when not given.\n            default: true\n        capabilityDelegation:\n          type: boolean\n          description: indicates if the generated key pair can be used for capability delegations.\n          default: true\n        keyAgreement:\n          type: boolean\n          description: indicates if the generated key pair can be used for Key agreements.\n          default: true\n        selfControl:\n          type: boolean\n          description: whether the generated DID Document can be altered with its own capabilityInvocation key.\n          default: true\n  securitySchemes:\n    jwtBearerAuth:\n      type: http\n      scheme: bearer\n\nsecurity:\n  - {}\n  - jwtBearerAuth: []\n",
			"canonicalURL": "/github.com/nuts-foundation/nuts-node@747564021c1590b192eda2cdbd373503ecb0ecc9/-/blob/docs/_static/vdr/v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nuts-foundation/nuts-node/blob/747564021c1590b192eda2cdbd373503ecb0ecc9/docs/_static/vdr/v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: reduce default: default: contents: unsupported content types: [application/problem+json]"
}