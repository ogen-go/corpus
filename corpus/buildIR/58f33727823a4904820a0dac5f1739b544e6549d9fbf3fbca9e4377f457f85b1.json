{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/frain-dev/convoy"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "docs/v3/openapi3.yaml",
			"byteSize": 133451,
			"content": "components:\n  schemas:\n    auth.Role:\n      properties:\n        endpoint:\n          type: string\n        project:\n          type: string\n        type:\n          type: string\n      type: object\n    config.SignatureHeaderProvider:\n      enum:\n      - X-Convoy-Signature\n      type: string\n      x-enum-varnames:\n      - DefaultSignatureHeader\n    datastore.AlertConfiguration:\n      properties:\n        count:\n          type: integer\n        threshold:\n          type: string\n      type: object\n    datastore.ApiKey:\n      properties:\n        header_name:\n          type: string\n        header_value:\n          type: string\n      type: object\n    datastore.BasicAuth:\n      properties:\n        password:\n          type: string\n        username:\n          type: string\n      type: object\n    datastore.CLIMetadata:\n      properties:\n        event_type:\n          type: string\n        host_name:\n          type: string\n      type: object\n    datastore.DeliveryAttempt:\n      properties:\n        api_version:\n          type: string\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        endpoint_id:\n          type: string\n        error:\n          type: string\n        http_status:\n          type: string\n        ip_address:\n          type: string\n        method:\n          type: string\n        msg_id:\n          type: string\n        request_http_header:\n          $ref: '#/components/schemas/datastore.HttpHeader'\n        response_data:\n          type: string\n        response_http_header:\n          $ref: '#/components/schemas/datastore.HttpHeader'\n        status:\n          type: boolean\n        uid:\n          type: string\n        updated_at:\n          type: string\n        url:\n          type: string\n      type: object\n    datastore.Device:\n      properties:\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        endpoint_id:\n          type: string\n        host_name:\n          type: string\n        last_seen_at:\n          type: string\n        project_id:\n          type: string\n        status:\n          $ref: '#/components/schemas/datastore.DeviceStatus'\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.DeviceStatus:\n      enum:\n      - offline\n      - online\n      - disabled\n      type: string\n      x-enum-varnames:\n      - DeviceStatusOffline\n      - DeviceStatusOnline\n      - DeviceStatusDisabled\n    datastore.EncodingType:\n      enum:\n      - base64\n      - hex\n      type: string\n      x-enum-varnames:\n      - Base64Encoding\n      - HexEncoding\n    datastore.Endpoint:\n      properties:\n        advanced_signatures:\n          type: boolean\n        authentication:\n          $ref: '#/components/schemas/datastore.EndpointAuthentication'\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        description:\n          type: string\n        events:\n          type: integer\n        http_timeout:\n          type: string\n        owner_id:\n          type: string\n        project_id:\n          type: string\n        rate_limit:\n          type: integer\n        rate_limit_duration:\n          type: string\n        secrets:\n          items:\n            $ref: '#/components/schemas/datastore.Secret'\n          type: array\n        slack_webhook_url:\n          type: string\n        status:\n          $ref: '#/components/schemas/datastore.EndpointStatus'\n        support_email:\n          type: string\n        target_url:\n          type: string\n        title:\n          type: string\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.EndpointAuthentication:\n      properties:\n        api_key:\n          $ref: '#/components/schemas/datastore.ApiKey'\n        type:\n          $ref: '#/components/schemas/datastore.EndpointAuthenticationType'\n      type: object\n    datastore.EndpointAuthenticationType:\n      enum:\n      - api_key\n      type: string\n      x-enum-varnames:\n      - APIKeyAuthentication\n    datastore.EndpointStatus:\n      enum:\n      - active\n      - inactive\n      - pending\n      type: string\n      x-enum-varnames:\n      - ActiveEndpointStatus\n      - InactiveEndpointStatus\n      - PendingEndpointStatus\n    datastore.Event:\n      properties:\n        app_id:\n          description: Deprecated\n          type: string\n        created_at:\n          type: string\n        data:\n          description: |-\n            Data is an arbitrary JSON value that gets sent as the body of the\n            webhook to the endpoints\n          items:\n            type: integer\n          type: array\n        deleted_at:\n          type: string\n        endpoint_metadata:\n          items:\n            $ref: '#/components/schemas/datastore.Endpoint'\n          type: array\n        endpoints:\n          items:\n            type: string\n          type: array\n        event_type:\n          type: string\n        headers:\n          $ref: '#/components/schemas/httpheader.HTTPHeader'\n        matched_endpoints:\n          description: TODO(all) remove this field\n          type: integer\n        project_id:\n          type: string\n        raw:\n          type: string\n        source_id:\n          type: string\n        source_metadata:\n          $ref: '#/components/schemas/datastore.Source'\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.EventDelivery:\n      properties:\n        cli_metadata:\n          $ref: '#/components/schemas/datastore.CLIMetadata'\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        description:\n          type: string\n        device_id:\n          type: string\n        endpoint_id:\n          type: string\n        endpoint_metadata:\n          $ref: '#/components/schemas/datastore.Endpoint'\n        event_id:\n          type: string\n        event_metadata:\n          $ref: '#/components/schemas/datastore.Event'\n        headers:\n          $ref: '#/components/schemas/httpheader.HTTPHeader'\n        metadata:\n          $ref: '#/components/schemas/datastore.Metadata'\n        project_id:\n          type: string\n        status:\n          $ref: '#/components/schemas/datastore.EventDeliveryStatus'\n        subscription_id:\n          type: string\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.EventDeliveryStatus:\n      enum:\n      - Scheduled\n      - Processing\n      - Discarded\n      - Failure\n      - Success\n      - Retry\n      type: string\n      x-enum-varnames:\n      - ScheduledEventStatus\n      - ProcessingEventStatus\n      - DiscardedEventStatus\n      - FailureEventStatus\n      - SuccessEventStatus\n      - RetryEventStatus\n    datastore.FilterConfiguration:\n      properties:\n        event_types:\n          items:\n            type: string\n          type: array\n        filter:\n          $ref: '#/components/schemas/datastore.FilterSchema'\n      type: object\n    datastore.FilterSchema:\n      properties:\n        body:\n          additionalProperties: true\n          type: object\n        headers:\n          additionalProperties: true\n          type: object\n      type: object\n    datastore.HMac:\n      properties:\n        encoding:\n          $ref: '#/components/schemas/datastore.EncodingType'\n        hash:\n          type: string\n        header:\n          type: string\n        secret:\n          type: string\n      type: object\n    datastore.HttpHeader:\n      additionalProperties:\n        type: string\n      type: object\n    datastore.Metadata:\n      properties:\n        data:\n          description: Data to be sent to endpoint.\n          items:\n            type: integer\n          type: array\n        interval_seconds:\n          type: integer\n        next_send_time:\n          type: integer\n        num_trials:\n          description: |-\n            NumTrials: number of times we have tried to deliver this Event to\n            an application\n          type: integer\n        raw:\n          type: string\n        retry_limit:\n          type: integer\n        strategy:\n          type: string\n      type: object\n    datastore.Organisation:\n      properties:\n        assigned_domain:\n          type: string\n        created_at:\n          type: string\n        custom_domain:\n          type: string\n        deleted_at:\n          type: string\n        name:\n          type: string\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.PaginationData:\n      properties:\n        next:\n          type: integer\n        page:\n          type: integer\n        perPage:\n          type: integer\n        prev:\n          type: integer\n        total:\n          type: integer\n        totalPage:\n          type: integer\n      type: object\n    datastore.Project:\n      properties:\n        config:\n          $ref: '#/components/schemas/datastore.ProjectConfig'\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        logo_url:\n          type: string\n        metadata:\n          $ref: '#/components/schemas/datastore.ProjectMetadata'\n        name:\n          type: string\n        organisation_id:\n          type: string\n        rate_limit:\n          description: 'TODO(subomi): refactor this into the Instance API.'\n          type: integer\n        rate_limit_duration:\n          type: string\n        statistics:\n          $ref: '#/components/schemas/datastore.ProjectStatistics'\n        type:\n          $ref: '#/components/schemas/datastore.ProjectType'\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.ProjectConfig:\n      properties:\n        disable_endpoint:\n          type: boolean\n        is_retention_policy_enabled:\n          type: boolean\n        max_payload_read_size:\n          type: integer\n        ratelimit:\n          $ref: '#/components/schemas/datastore.RateLimitConfiguration'\n        replay_attacks:\n          type: boolean\n        retention_policy:\n          $ref: '#/components/schemas/datastore.RetentionPolicyConfiguration'\n        signature:\n          $ref: '#/components/schemas/datastore.SignatureConfiguration'\n        strategy:\n          $ref: '#/components/schemas/datastore.StrategyConfiguration'\n      type: object\n    datastore.ProjectMetadata:\n      properties:\n        retained_events:\n          type: integer\n      type: object\n    datastore.ProjectStatistics:\n      properties:\n        messages_sent:\n          type: integer\n        total_endpoints:\n          type: integer\n      type: object\n    datastore.ProjectType:\n      enum:\n      - outgoing\n      - incoming\n      type: string\n      x-enum-varnames:\n      - OutgoingProject\n      - IncomingProject\n    datastore.ProviderConfig:\n      properties:\n        twitter:\n          $ref: '#/components/schemas/datastore.TwitterProviderConfig'\n      type: object\n    datastore.RateLimitConfiguration:\n      properties:\n        count:\n          type: integer\n        duration:\n          type: integer\n      type: object\n    datastore.RetentionPolicyConfiguration:\n      properties:\n        policy:\n          type: string\n      type: object\n    datastore.RetryConfiguration:\n      properties:\n        duration:\n          type: integer\n        retry_count:\n          type: integer\n        type:\n          type: string\n      type: object\n    datastore.Secret:\n      properties:\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        expires_at:\n          type: string\n        uid:\n          type: string\n        updated_at:\n          type: string\n        value:\n          type: string\n      type: object\n    datastore.SignatureConfiguration:\n      properties:\n        header:\n          $ref: '#/components/schemas/config.SignatureHeaderProvider'\n        versions:\n          items:\n            $ref: '#/components/schemas/datastore.SignatureVersion'\n          type: array\n      type: object\n    datastore.SignatureVersion:\n      properties:\n        created_at:\n          type: string\n        encoding:\n          $ref: '#/components/schemas/datastore.EncodingType'\n        hash:\n          type: string\n        uid:\n          type: string\n      type: object\n    datastore.Source:\n      properties:\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        forward_headers:\n          items:\n            type: string\n          type: array\n        is_disabled:\n          type: boolean\n        mask_id:\n          type: string\n        name:\n          type: string\n        project_id:\n          type: string\n        provider:\n          $ref: '#/components/schemas/datastore.SourceProvider'\n        provider_config:\n          $ref: '#/components/schemas/datastore.ProviderConfig'\n        type:\n          $ref: '#/components/schemas/datastore.SourceType'\n        uid:\n          type: string\n        updated_at:\n          type: string\n        verifier:\n          $ref: '#/components/schemas/datastore.VerifierConfig'\n      type: object\n    datastore.SourceProvider:\n      enum:\n      - github\n      - twitter\n      - shopify\n      type: string\n      x-enum-varnames:\n      - GithubSourceProvider\n      - TwitterSourceProvider\n      - ShopifySourceProvider\n    datastore.SourceType:\n      enum:\n      - http\n      - rest_api\n      - pub_sub\n      - db_change_stream\n      type: string\n      x-enum-varnames:\n      - HTTPSource\n      - RestApiSource\n      - PubSubSource\n      - DBChangeStream\n    datastore.StrategyConfiguration:\n      properties:\n        duration:\n          type: integer\n        retry_count:\n          type: integer\n        type:\n          type: string\n      type: object\n    datastore.Subscription:\n      properties:\n        alert_config:\n          allOf:\n          - $ref: '#/components/schemas/datastore.AlertConfiguration'\n          description: subscription config\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        device_id:\n          type: string\n        disable_endpoint:\n          type: boolean\n        endpoint_metadata:\n          $ref: '#/components/schemas/datastore.Endpoint'\n        filter_config:\n          $ref: '#/components/schemas/datastore.FilterConfiguration'\n        name:\n          type: string\n        rate_limit_config:\n          $ref: '#/components/schemas/datastore.RateLimitConfiguration'\n        retry_config:\n          $ref: '#/components/schemas/datastore.RetryConfiguration'\n        source_metadata:\n          $ref: '#/components/schemas/datastore.Source'\n        type:\n          $ref: '#/components/schemas/datastore.SubscriptionType'\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.SubscriptionType:\n      enum:\n      - cli\n      - api\n      type: string\n      x-enum-varnames:\n      - SubscriptionTypeCLI\n      - SubscriptionTypeAPI\n    datastore.TwitterProviderConfig:\n      properties:\n        crc_verified_at:\n          type: integer\n      type: object\n    datastore.User:\n      properties:\n        created_at:\n          type: string\n        deleted_at:\n          type: string\n        email:\n          type: string\n        email_verified:\n          type: boolean\n        first_name:\n          type: string\n        last_name:\n          type: string\n        reset_password_expires_at:\n          type: string\n        role:\n          $ref: '#/components/schemas/auth.Role'\n        uid:\n          type: string\n        updated_at:\n          type: string\n      type: object\n    datastore.VerifierConfig:\n      properties:\n        api_key:\n          $ref: '#/components/schemas/datastore.ApiKey'\n        basic_auth:\n          $ref: '#/components/schemas/datastore.BasicAuth'\n        hmac:\n          $ref: '#/components/schemas/datastore.HMac'\n        type:\n          $ref: '#/components/schemas/datastore.VerifierType'\n      type: object\n    datastore.VerifierType:\n      enum:\n      - noop\n      - hmac\n      - basic_auth\n      - api_key\n      type: string\n      x-enum-varnames:\n      - NoopVerifier\n      - HMacVerifier\n      - BasicAuthVerifier\n      - APIKeyVerifier\n    httpheader.HTTPHeader:\n      additionalProperties:\n        items:\n          type: string\n        type: array\n      type: object\n    models.Endpoint:\n      properties:\n        advanced_signatures:\n          type: boolean\n        appID:\n          description: Deprecated but necessary for backward compatibility\n          type: string\n        authentication:\n          $ref: '#/components/schemas/datastore.EndpointAuthentication'\n        description:\n          type: string\n        http_timeout:\n          type: string\n        is_disabled:\n          type: boolean\n        name:\n          type: string\n        owner_id:\n          type: string\n        rate_limit:\n          type: integer\n        rate_limit_duration:\n          type: string\n        secret:\n          type: string\n        slack_webhook_url:\n          type: string\n        support_email:\n          type: string\n        url:\n          type: string\n      type: object\n    models.Event:\n      properties:\n        app_id:\n          type: string\n        custom_headers:\n          additionalProperties:\n            type: string\n          type: object\n        data:\n          description: |-\n            Data is an arbitrary JSON value that gets sent as the body of the\n            webhook to the endpoints\n          items:\n            type: integer\n          type: array\n        endpoint_id:\n          type: string\n        event_type:\n          type: string\n      type: object\n    models.FanoutEvent:\n      properties:\n        custom_headers:\n          additionalProperties:\n            type: string\n          type: object\n        data:\n          description: |-\n            Data is an arbitrary JSON value that gets sent as the body of the\n            webhook to the endpoints\n          items:\n            type: integer\n          type: array\n        event_type:\n          type: string\n        owner_id:\n          type: string\n      type: object\n    models.FilterSchema:\n      properties:\n        body:\n          additionalProperties: true\n          type: object\n        header:\n          additionalProperties: true\n          type: object\n      type: object\n    models.PortalAPIKeyResponse:\n      properties:\n        endpoint_id:\n          type: string\n        key:\n          type: string\n        key_type:\n          type: string\n        project_id:\n          type: string\n        role:\n          $ref: '#/components/schemas/auth.Role'\n        url:\n          type: string\n      type: object\n    models.PortalLink:\n      properties:\n        endpoints:\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n      type: object\n    models.PortalLinkResponse:\n      properties:\n        created_at:\n          type: integer\n        deleted_at:\n          type: integer\n        endpoint_count:\n          type: integer\n        endpoints:\n          items:\n            type: string\n          type: array\n        endpoints_metadata:\n          items:\n            $ref: '#/components/schemas/datastore.Endpoint'\n          type: array\n        name:\n          type: string\n        project_id:\n          type: string\n        token:\n          type: string\n        uid:\n          type: string\n        updated_at:\n          type: integer\n        url:\n          type: string\n      type: object\n    models.Project:\n      properties:\n        config:\n          $ref: '#/components/schemas/datastore.ProjectConfig'\n        logo_url:\n          type: string\n        name:\n          type: string\n        rate_limit:\n          type: integer\n        rate_limit_duration:\n          type: string\n        type:\n          $ref: '#/components/schemas/datastore.ProjectType'\n      type: object\n    models.ResetPassword:\n      properties:\n        password:\n          type: string\n        password_confirmation:\n          type: string\n      type: object\n    models.RetryConfiguration:\n      properties:\n        duration:\n          type: string\n        interval_seconds:\n          type: integer\n        retry_count:\n          type: integer\n        type:\n          type: string\n      type: object\n    models.Source:\n      properties:\n        is_disabled:\n          type: boolean\n        name:\n          type: string\n        provider:\n          $ref: '#/components/schemas/datastore.SourceProvider'\n        type:\n          $ref: '#/components/schemas/datastore.SourceType'\n        verifier:\n          $ref: '#/components/schemas/datastore.VerifierConfig'\n      type: object\n    models.SourceResponse:\n      properties:\n        created_at:\n          type: integer\n        deleted_at:\n          type: integer\n        is_disabled:\n          type: boolean\n        mask_id:\n          type: string\n        name:\n          type: string\n        project_id:\n          type: string\n        provider:\n          $ref: '#/components/schemas/datastore.SourceProvider'\n        provider_config:\n          $ref: '#/components/schemas/datastore.ProviderConfig'\n        type:\n          $ref: '#/components/schemas/datastore.SourceType'\n        uid:\n          type: string\n        updated_at:\n          type: integer\n        url:\n          type: string\n        verifier:\n          $ref: '#/components/schemas/datastore.VerifierConfig'\n      type: object\n    models.Subscription:\n      properties:\n        alert_config:\n          $ref: '#/components/schemas/datastore.AlertConfiguration'\n        app_id:\n          description: Deprecated but necessary for backward compatibility\n          type: string\n        disable_endpoint:\n          type: boolean\n        endpoint_id:\n          type: string\n        filter_config:\n          $ref: '#/components/schemas/datastore.FilterConfiguration'\n        name:\n          type: string\n        rate_limit_config:\n          $ref: '#/components/schemas/datastore.RateLimitConfiguration'\n        retry_config:\n          $ref: '#/components/schemas/models.RetryConfiguration'\n        source_id:\n          type: string\n      type: object\n    models.TestFilter:\n      properties:\n        request:\n          $ref: '#/components/schemas/models.FilterSchema'\n        schema:\n          $ref: '#/components/schemas/models.FilterSchema'\n      type: object\n    server.Stub:\n      type: object\n    server.pagedResponse:\n      properties:\n        content: {}\n        pagination:\n          $ref: '#/components/schemas/datastore.PaginationData'\n      type: object\n    util.ServerResponse:\n      properties:\n        data:\n          items:\n            type: integer\n          type: array\n        message:\n          type: string\n        status:\n          type: boolean\n      type: object\n  securitySchemes:\n    ApiKeyAuth:\n      in: header\n      name: Authorization\n      type: apiKey\ninfo:\n  contact:\n    email: support@getconvoy.io\n    name: Convoy Support\n    url: https://getconvoy.io/docs\n  description: Convoy is a fast and secure webhooks proxy. This document contains\n    datastore.s API specification.\n  license:\n    name: Mozilla Public License 2.0\n    url: https://www.mozilla.org/en-US/MPL/2.0/\n  termsOfService: https://getconvoy.io/terms\n  title: Convoy API Reference\n  version: 0.8.0\nopenapi: 3.0.3\npaths:\n  /api/v1/organisations:\n    get:\n      description: This endpoint fetches the organisations a user is part of, this\n        route can only be accessed with a personal api key\n      parameters:\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              $ref: '#/components/schemas/datastore.Organisation'\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get organisations\n      tags:\n      - Organisations\n  /api/v1/projects:\n    get:\n      description: This endpoint fetches projects\n      parameters:\n      - description: Project name\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: organisation id\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      items:\n                        $ref: '#/components/schemas/datastore.Project'\n                      type: array\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get projects\n      tags:\n      - Projects\n    post:\n      description: This endpoint creates a project\n      parameters:\n      - description: Organisation id\n        in: query\n        name: orgID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Project'\n        description: Project Details\n        required: true\n        x-originalParamName: project\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Project'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Create a project\n      tags:\n      - Projects\n  /api/v1/projects/{projectID}:\n    delete:\n      description: This endpoint deletes a project using its id\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Delete a project\n      tags:\n      - Projects\n    get:\n      description: This endpoint fetches a project by its id\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Project'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get a project\n      tags:\n      - Projects\n    put:\n      description: This endpoint updates a project\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Project'\n        description: Project Details\n        required: true\n        x-originalParamName: project\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Project'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Update a project\n      tags:\n      - Projects\n  /api/v1/projects/{projectID}/endpoints:\n    get:\n      description: This endpoint fetches an endpoints\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      items:\n                        $ref: '#/components/schemas/datastore.Endpoint'\n                      type: array\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get endpoints\n      tags:\n      - Endpoints\n    post:\n      description: This endpoint creates an endpoint\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Endpoint'\n        description: Endpoint Details\n        required: true\n        x-originalParamName: endpoint\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Create an endpoint\n      tags:\n      - Endpoints\n  /api/v1/projects/{projectID}/endpoints/{endpointID}:\n    delete:\n      description: This endpoint deletes an endpoint\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: endpoint id\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Delete endpoint\n      tags:\n      - Endpoints\n    get:\n      description: This endpoint fetches an endpoint\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: endpoint id\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get endpoint\n      tags:\n      - Endpoints\n    put:\n      description: This endpoint updates an endpoint\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: endpoint id\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Endpoint'\n        description: Endpoint Details\n        required: true\n        x-originalParamName: endpoint\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Update an endpoint\n      tags:\n      - Endpoints\n  /api/v1/projects/{projectID}/endpoints/{endpointID}/expire_secret:\n    put:\n      description: This endpoint expires the current endpoint secret and generates\n        a new one.\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: endpoint id\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Expire and generate new application endpoint secret\n      tags:\n      - Endpoints\n  /api/v1/projects/{projectID}/endpoints/{endpointID}/toggle_status:\n    put:\n      description: This endpoint updates a subscription\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: endpoint id\n        in: path\n        name: endpointID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Toggles an endpoint's status from active \u003c-\u003e inactive\n      tags:\n      - Subscriptions\n  /api/v1/projects/{projectID}/eventdeliveries:\n    get:\n      description: This endpoint fetch event deliveries.\n      parameters:\n      - description: application id\n        in: query\n        name: appId\n        schema:\n          type: string\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event id\n        in: query\n        name: eventId\n        schema:\n          type: string\n      - description: start date\n        in: query\n        name: startDate\n        schema:\n          type: string\n      - description: end date\n        in: query\n        name: endDate\n        schema:\n          type: string\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      - description: status\n        in: query\n        name: status\n        schema:\n          items:\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              allOf:\n                              - $ref: '#/components/schemas/datastore.EventDelivery'\n                              - properties:\n                                  data:\n                                    $ref: '#/components/schemas/server.Stub'\n                                type: object\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get event deliveries\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/eventdeliveries/{eventDeliveryID}:\n    get:\n      description: This endpoint fetches an event delivery.\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event delivery id\n        in: path\n        name: eventDeliveryID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get event delivery\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/eventdeliveries/{eventDeliveryID}/deliveryattempts:\n    get:\n      description: This endpoint fetches an app message's delivery attempts\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event delivery id\n        in: path\n        name: eventDeliveryID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      items:\n                        $ref: '#/components/schemas/datastore.DeliveryAttempt'\n                      type: array\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get delivery attempts\n      tags:\n      - DeliveryAttempts\n  /api/v1/projects/{projectID}/eventdeliveries/{eventDeliveryID}/deliveryattempts/{deliveryAttemptID}:\n    get:\n      description: This endpoint fetches an app event delivery attempt\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event delivery id\n        in: path\n        name: eventDeliveryID\n        required: true\n        schema:\n          type: string\n      - description: delivery attempt id\n        in: path\n        name: deliveryAttemptID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.DeliveryAttempt'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get delivery attempt\n      tags:\n      - DeliveryAttempts\n  /api/v1/projects/{projectID}/eventdeliveries/{eventDeliveryID}/resend:\n    put:\n      description: This endpoint resends an app event\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event delivery id\n        in: path\n        name: eventDeliveryID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Resend an app event\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/eventdeliveries/batchretry:\n    post:\n      description: This endpoint resends multiple app events\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n              - $ref: '#/components/schemas/server.Stub'\n              - properties:\n                  ids:\n                    items:\n                      type: string\n                    type: array\n                type: object\n        description: event delivery ids\n        required: true\n        x-originalParamName: deliveryIds\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Batch Resend app events\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/eventdeliveries/countbatchretryevents:\n    get:\n      description: This endpoint counts app events that will be affected by a batch\n        retry operation\n      parameters:\n      - description: application id\n        in: query\n        name: appId\n        schema:\n          type: string\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: start date\n        in: query\n        name: startDate\n        schema:\n          type: string\n      - description: end date\n        in: query\n        name: endDate\n        schema:\n          type: string\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.Stub'\n                      - properties:\n                          num:\n                            type: integer\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Count affected eventDeliveries\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/eventdeliveries/forceresend:\n    post:\n      description: This endpoint force resends multiple app events\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n              - $ref: '#/components/schemas/server.Stub'\n              - properties:\n                  ids:\n                    items:\n                      type: string\n                    type: array\n                type: object\n        description: event delivery ids\n        required: true\n        x-originalParamName: deliveryIds\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Force Resend app events\n      tags:\n      - EventDeliveries\n  /api/v1/projects/{projectID}/events:\n    get:\n      description: This endpoint fetches app events with pagination\n      parameters:\n      - description: application id\n        in: query\n        name: appId\n        schema:\n          type: string\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: source id\n        in: query\n        name: sourceId\n        schema:\n          type: string\n      - description: start date\n        in: query\n        name: startDate\n        schema:\n          type: string\n      - description: end date\n        in: query\n        name: endDate\n        schema:\n          type: string\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              allOf:\n                              - $ref: '#/components/schemas/datastore.Event'\n                              - properties:\n                                  data:\n                                    $ref: '#/components/schemas/server.Stub'\n                                type: object\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get app events with pagination\n      tags:\n      - Events\n    post:\n      description: This endpoint creates an endpoint event\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Event'\n        description: Event Details\n        required: true\n        x-originalParamName: event\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Create endpoint event\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/events/{eventID}:\n    get:\n      description: This endpoint fetches an endpoint event\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event id\n        in: path\n        name: eventID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get endpoint event\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/events/{eventID}/replay:\n    put:\n      description: This endpoint replays an endpoint event\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: event id\n        in: path\n        name: eventID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Replay endpoint event\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/events/batchreplay:\n    post:\n      description: This endpoint replays multiple events\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: start date\n        in: query\n        name: startDate\n        schema:\n          type: string\n      - description: end date\n        in: query\n        name: endDate\n        schema:\n          type: string\n      - description: Source id\n        in: query\n        name: source\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Replays multiple endpoint events\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/events/countbatchreplayevents:\n    get:\n      description: This endpoint counts events that will be affected by a batch replay\n        operation\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: start date\n        in: query\n        name: startDate\n        schema:\n          type: string\n      - description: end date\n        in: query\n        name: endDate\n        schema:\n          type: string\n      - description: Source id\n        in: query\n        name: source\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.Stub'\n                      - properties:\n                          num:\n                            type: integer\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Counts affected events\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/events/fanout:\n    post:\n      description: This endpoint uses the owner_id to fan out an event to multiple\n        endpoints.\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.FanoutEvent'\n        description: Event Details\n        required: true\n        x-originalParamName: event\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/datastore.Event'\n                      - properties:\n                          data:\n                            $ref: '#/components/schemas/server.Stub'\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Fan out an event to multiple endpoints.\n      tags:\n      - Events\n  /api/v1/projects/{projectID}/portal-links:\n    get:\n      description: This endpoint fetches multiple portal links\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              $ref: '#/components/schemas/models.PortalLinkResponse'\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Fetch multiple portal links\n      tags:\n      - PortalLinks\n    post:\n      description: This endpoint creates a portal link\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.PortalLink'\n        description: Portal Link Details\n        required: true\n        x-originalParamName: portallink\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.PortalLinkResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Create a portal link\n      tags:\n      - PortalLinks\n  /api/v1/projects/{projectID}/portal-links/{portalLinkID}:\n    get:\n      description: This endpoint fetches a portal link by its id\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: portal link id\n        in: path\n        name: portalLinkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.PortalLinkResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get a portal link\n      tags:\n      - PortalLinks\n    put:\n      description: This endpoint updates a portal link\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: portal link id\n        in: path\n        name: portalLinkID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.PortalLink'\n        description: Portal Link Details\n        required: true\n        x-originalParamName: portallink\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.PortalLinkResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Update a portal link\n      tags:\n      - PortalLinks\n  /api/v1/projects/{projectID}/portal-links/{portalLinkID}/revoke:\n    put:\n      description: This endpoint revokes a portal link\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: portal link id\n        in: path\n        name: portalLinkID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Revoke Portal Link\n      tags:\n      - PortalLinks\n  /api/v1/projects/{projectID}/sources:\n    get:\n      description: This endpoint fetches multiple sources\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              $ref: '#/components/schemas/models.SourceResponse'\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Fetch multiple sources\n      tags:\n      - Sources\n    post:\n      description: This endpoint creates a source\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Source'\n        description: Source Details\n        required: true\n        x-originalParamName: source\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.SourceResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Create a source\n      tags:\n      - Sources\n  /api/v1/projects/{projectID}/sources/{sourceID}:\n    delete:\n      description: This endpoint deletes a source\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: source id\n        in: path\n        name: sourceID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Delete source\n      tags:\n      - Sources\n    get:\n      description: This endpoint fetches a source by its id\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: source id\n        in: path\n        name: sourceID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.SourceResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get a source\n      tags:\n      - Sources\n    put:\n      description: This endpoint updates a source\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: source id\n        in: path\n        name: sourceID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Source'\n        description: Source Details\n        required: true\n        x-originalParamName: source\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.SourceResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Update a source\n      tags:\n      - Sources\n  /api/v1/projects/{projectID}/subscriptions:\n    get:\n      description: This endpoint fetches all the subscriptions\n      parameters:\n      - description: results per page\n        in: query\n        name: perPage\n        schema:\n          type: string\n      - description: page number\n        in: query\n        name: page\n        schema:\n          type: string\n      - description: sort order\n        in: query\n        name: sort\n        schema:\n          type: string\n      - description: subscription title\n        in: query\n        name: q\n        schema:\n          type: string\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              $ref: '#/components/schemas/datastore.Subscription'\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Get all subscriptions\n      tags:\n      - Subscriptions\n    post:\n      description: This endpoint creates a subscriptions\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Subscription'\n        description: Subscription details\n        required: true\n        x-originalParamName: subscription\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      allOf:\n                      - $ref: '#/components/schemas/server.pagedResponse'\n                      - properties:\n                          content:\n                            items:\n                              $ref: '#/components/schemas/datastore.Subscription'\n                            type: array\n                        type: object\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Creates a subscription\n      tags:\n      - Subscriptions\n  /api/v1/projects/{projectID}/subscriptions/{subscriptionID}:\n    delete:\n      description: This endpoint deletes a subscription\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: subscription id\n        in: path\n        name: subscriptionID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Delete subscription\n      tags:\n      - Subscriptions\n    get:\n      description: This endpoint fetches an Subscription by it's id\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: subscription id\n        in: path\n        name: subscriptionID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Subscription'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Gets a subscription\n      tags:\n      - Subscriptions\n    put:\n      description: This endpoint updates a subscription\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: subscription id\n        in: path\n        name: subscriptionID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Subscription'\n        description: Subscription Details\n        required: true\n        x-originalParamName: subscription\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Subscription'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Update a subscription\n      tags:\n      - Subscriptions\n  /api/v1/projects/{projectID}/subscriptions/{subscriptionID}/toggle_status:\n    put:\n      description: This endpoint updates a subscription\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      - description: subscription id\n        in: path\n        name: subscriptionID\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Subscription'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Toggles a subscription's status from active \u003c-\u003e inactive\n      tags:\n      - Subscriptions\n  /api/v1/projects/{projectID}/subscriptions/test_filter:\n    post:\n      description: This endpoint tests a subscription's filter\n      parameters:\n      - description: Project id\n        in: path\n        name: projectID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.TestFilter'\n        description: Filter Details\n        required: true\n        x-originalParamName: filter\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      type: boolean\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      security:\n      - ApiKeyAuth: []\n      summary: Test subscription filter\n      tags:\n      - Subscriptions\n  /portal/devices:\n    get:\n      description: This endpoint fetches all portal link devices\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      items:\n                        $ref: '#/components/schemas/datastore.Device'\n                      type: array\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Get portal link devices\n      tags:\n      - PortalLinks\n  /portal/endpoints:\n    get:\n      description: This endpoint fetches all portal link endpoints\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      items:\n                        $ref: '#/components/schemas/datastore.Endpoint'\n                      type: array\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Get endpoints\n      tags:\n      - PortalLinks\n    post:\n      description: This endpoint creates an endpoint\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.Endpoint'\n        description: Endpoint Details\n        required: true\n        x-originalParamName: endpoint\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.Endpoint'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Create an endpoint\n      tags:\n      - PortalLinks\n  /portal/keys:\n    get:\n      description: This endpoint fetches all portal link endpoints keys\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/models.PortalAPIKeyResponse'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Get portal link keys\n      tags:\n      - PortalLinks\n  /ui/users/forgot-password:\n    post:\n      description: This endpoint verifies a user's email\n      parameters:\n      - description: Email verification token\n        in: query\n        name: token\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Verify Email\n      tags:\n      - User\n  /ui/users/reset-password:\n    post:\n      description: This endpoint resets a users password\n      parameters:\n      - description: reset token\n        in: query\n        name: token\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/models.ResetPassword'\n        description: Reset Password Details\n        required: true\n        x-originalParamName: password\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/datastore.User'\n                  type: object\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Bad Request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Unauthorized\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/util.ServerResponse'\n                - properties:\n                    data:\n                      $ref: '#/components/schemas/server.Stub'\n                  type: object\n          description: Internal Server Error\n      summary: Reset user password\n      tags:\n      - User\nservers:\n- url: https://dashboard.getconvoy.io/\ntags:\n- description: Organisation related APIs\n  name: Organisations\n- description: Subscription related APIs\n  name: Subscriptions\n- description: Endpoint related APIs\n  name: Endpoints\n- description: Event related APIs\n  name: Events\n- description: Source related APIs\n  name: Sources\n- description: EventDelivery related APIs\n  name: EventDeliveries\n- description: Delivery Attempt related APIs\n  name: DeliveryAttempts\n- description: Project related APIs\n  name: Projects\n- description: Portal Links related APIs\n  name: PortalLinks\n",
			"canonicalURL": "/github.com/frain-dev/convoy@88e792aba87cb7a48864793f835ec3743cf5b9be/-/blob/docs/v3/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/frain-dev/convoy/blob/88e792aba87cb7a48864793f835ec3743cf5b9be/docs/v3/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/api/v1/projects\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: merge item schema: schema type mismatch: object and integer",
	"NotImplemented": [
		"complex schema merging"
	]
}