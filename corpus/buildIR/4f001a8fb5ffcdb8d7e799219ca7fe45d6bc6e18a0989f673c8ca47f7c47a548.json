{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "internal/connector/internal/api/admin/private/api/openapi.yaml",
			"byteSize": 70680,
			"content": "openapi: 3.0.0\ninfo:\n  description: Connector Service Fleet Manager Admin is a Rest API to manage connector\n    clusters.\n  title: Connector Service Fleet Manager Admin APIs\n  version: 0.0.3\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- name: Connector Clusters Admin\n- name: Connector Namespaces Admin\npaths:\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters:\n    get:\n      operationId: listConnectorClusters\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorClusterList'\n          description: A list of connector clusters\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector clusters\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}:\n    get:\n      operationId: getConnectorCluster\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorCluster'\n          description: The connector cluster matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/namespaces:\n    get:\n      operationId: getClusterNamespaces\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespaceList'\n          description: Connector namespaces\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connector namespaces in cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/connectors:\n    get:\n      operationId: getClusterConnectors\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorAdminViewList'\n          description: Connectors in cluster\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connectors in a cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/deployments:\n    get:\n      operationId: getClusterDeployments\n      parameters:\n      - description: The id of the cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorDeploymentAdminViewList'\n          description: Connector deployments in cluster\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available deployments in a cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}:\n    get:\n      description: Get a connector deployment\n      operationId: getConnectorDeployment\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the connector deployment\n        explode: false\n        in: path\n        name: deployment_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorDeploymentAdminView'\n          description: The connector deployment matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector deployment exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector deployment\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_namespaces:\n    get:\n      operationId: getConnectorNamespaces\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespaceList'\n          description: Connector namespaces\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connector namespaces\n      tags:\n      - Connector Namespaces Admin\n    post:\n      operationId: createConnectorNamespace\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest'\n        description: Namespace to create\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespace'\n          description: Accepted\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Create a connector namespace\n      tags:\n      - Connector Namespaces Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}:\n    delete:\n      operationId: deleteConnectorNamespace\n      parameters:\n      - description: The id of the namespace to delete\n        explode: false\n        in: path\n        name: namespace_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Deleted\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a connector namespace\n      tags:\n      - Connector Clusters Admin\n    get:\n      description: Get a connector namespace\n      operationId: getConnectorNamespace\n      parameters:\n      - description: The id of the namespace to delete\n        explode: false\n        in: path\n        name: namespace_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespace'\n          description: The connector namespace matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector deployment exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector namespace\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}/connectors:\n    get:\n      operationId: getNamespaceConnectors\n      parameters:\n      - description: The id of the namespace\n        explode: false\n        in: path\n        name: namespace_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorAdminViewList'\n          description: Connectors in namespace\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connectors in a namespace\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}/deployments:\n    get:\n      operationId: getNamespaceDeployments\n      parameters:\n      - description: The id of the namespace\n        explode: false\n        in: path\n        name: namespace_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorDeploymentAdminViewList'\n          description: Connector deployments in namespace\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available deployments in a namespace\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connectors/{connector_id}:\n    delete:\n      operationId: deleteConnector\n      parameters:\n      - description: The id of the connector to delete\n        explode: false\n        in: path\n        name: connector_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Flag to force deletion of connector in Fleet manager if true\n        explode: true\n        in: query\n        name: force\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Deleted\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a connector\n      tags:\n      - Connector Clusters Admin\n    get:\n      description: Get a connector\n      operationId: getConnector\n      parameters:\n      - description: The id of the connector to delete\n        explode: false\n        in: path\n        name: connector_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorAdminView'\n          description: The connector matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/upgrades/type:\n    get:\n      operationId: getConnectorUpgradesByType\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorAvailableTypeUpgradeList'\n          description: The connectors that have available type upgrades\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster type exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connector type upgrades\n      tags:\n      - Connector Clusters Admin\n    put:\n      operationId: upgradeConnectorsByType\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade'\n              type: array\n        description: List of connectors to upgrade\n        required: true\n      responses:\n        \"204\":\n          description: Connectors are upgraded\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: upgrade a connector cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/upgrades/operator:\n    get:\n      operationId: getConnectorUpgradesByOperator\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList'\n          description: The connectors that have available operator upgrades\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster type exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a list of available connector operator upgrades\n      tags:\n      - Connector Clusters Admin\n    put:\n      operationId: upgradeConnectorsByOperator\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'\n              type: array\n        description: List of connectors to upgrade\n        required: true\n      responses:\n        \"204\":\n          description: Connectors are upgraded\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: upgrade a connector cluster\n      tags:\n      - Connector Clusters Admin\n  /api/connector_mgmt/v1/admin/kafka_connector_types:\n    get:\n      description: Returns a list of connector types\n      operationId: getConnectorTypes\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `\u003c\u003e`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorTypeAdminViewList'\n          description: A list of connector types\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector types\n      tags:\n      - Connector Types\n  /api/connector_mgmt/v1/admin/kafka_connector_types/{connector_type_id}:\n    get:\n      description: Get a connector type by id\n      operationId: getConnectorTypeByID\n      parameters:\n      - description: The id of the connector type\n        explode: false\n        in: path\n        name: connector_type_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorTypeAdminView'\n          description: A list of connector types\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector type by id\n      tags:\n      - Connector Types\ncomponents:\n  examples:\n    \"401Example\":\n      value:\n        id: \"11\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/11\n        code: CONNECTOR-MGMT-11\n        reason: 'Unable to verify JWT token: Required authorization token not found'\n        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD\n    \"500Example\":\n      value:\n        id: \"9\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/9\n        code: CONNECTOR-MGMT-9\n        reason: Unspecified error\n        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW\n    \"404Example\":\n      value:\n        id: \"404\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/7\n        code: CONNECTOR-MGMT-7\n        reason: The requested resource doesn't exist\n  schemas:\n    ConnectorAvailableTypeUpgradeList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorAvailableTypeUpgradeList_allOf'\n    ConnectorAvailableTypeUpgrade:\n      description: An available type upgrade for a connector\n      example:\n        namespace_id: namespace_id\n        shard_metadata:\n          available_id: 6\n          assigned_id: 0\n        connector_id: connector_id\n        channel: channel\n        connector_type_id: connector_type_id\n      properties:\n        connector_id:\n          type: string\n        namespace_id:\n          type: string\n        connector_type_id:\n          type: string\n        channel:\n          type: string\n        shard_metadata:\n          $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade_shard_metadata'\n      type: object\n    ConnectorAvailableOperatorUpgradeList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList_allOf'\n    ConnectorAvailableOperatorUpgrade:\n      description: An available operator upgrade for a connector\n      example:\n        namespace_id: namespace_id\n        connector_id: connector_id\n        channel: channel\n        operator:\n          available_id: available_id\n          assigned_id: assigned_id\n        connector_type_id: connector_type_id\n      properties:\n        connector_id:\n          type: string\n        namespace_id:\n          type: string\n        connector_type_id:\n          type: string\n        channel:\n          type: string\n        operator:\n          $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade_operator'\n      type: object\n    ConnectorNamespaceWithTenantRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorNamespaceEvalRequest'\n      - $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest_allOf'\n      required:\n      - cluster_id\n      - name\n      - tenant\n    ConnectorAdminView:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorMeta'\n      - $ref: '#/components/schemas/ConnectorStatus'\n    ConnectorAdminViewList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorAdminViewList_allOf'\n    ConnectorDeploymentAdminView:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorDeploymentAdminView_allOf'\n      description: Holds the deployment configuration of a connector\n    ConnectorDeploymentAdminSpec:\n      description: Holds the deployment specification of a connector\n      properties:\n        connector_id:\n          type: string\n        connector_resource_version:\n          format: int64\n          type: integer\n        connector_type_id:\n          type: string\n        cluster_id:\n          type: string\n        namespace_id:\n          type: string\n        allow_upgrade:\n          deprecated: true\n          description: allow the connector to upgrade to a new operator\n          type: boolean\n        operator_id:\n          description: an optional operator id that the connector should be run under.\n          type: string\n        desired_state:\n          $ref: '#/components/schemas/ConnectorDesiredState'\n        shard_metadata:\n          type: object\n      type: object\n    ConnectorDeploymentAdminViewList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorDeploymentAdminViewList_allOf'\n    ConnectorTypeAdminViewList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorTypeAdminViewList_allOf'\n    ConnectorTypeAdminView:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorType'\n      - $ref: '#/components/schemas/ConnectorTypeAdminView_allOf'\n      description: Holds the connector type\n    ConnectorTypeChannel:\n      description: Holds the connector type channel\n      properties:\n        shard_metadata:\n          type: object\n      type: object\n    ConnectorClusterList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorClusterList_allOf'\n    List:\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n      required:\n      - items\n      - kind\n      - page\n      - size\n      - total\n      type: object\n    ConnectorCluster:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorClusterMeta'\n      - $ref: '#/components/schemas/ConnectorClusterStatus'\n    ObjectReference:\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n      type: object\n    ConnectorClusterMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'\n    ObjectMeta:\n      properties:\n        owner:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        modified_at:\n          format: date-time\n          type: string\n      type: object\n    ConnectorClusterRequestMeta:\n      properties:\n        name:\n          type: string\n    ConnectorClusterStatus:\n      properties:\n        status:\n          $ref: '#/components/schemas/ConnectorClusterStatus_status'\n    ConnectorClusterState:\n      enum:\n      - disconnected\n      - ready\n      - deleting\n      type: string\n    Error:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/Error_allOf'\n    ConnectorNamespaceList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorNamespaceList_allOf'\n    ConnectorNamespace:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorNamespaceMeta'\n      - $ref: '#/components/schemas/ConnectorNamespace_allOf'\n      description: A connector namespace\n    ConnectorNamespaceMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      - $ref: '#/components/schemas/ConnectorNamespaceMeta_allOf'\n    ConnectorNamespaceRequestMeta:\n      properties:\n        name:\n          description: Namespace name must match pattern `^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$`,\n            or it may be empty to be auto-generated.\n          pattern: ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$\n          type: string\n        annotations:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    ConnectorNamespaceQuota:\n      properties:\n        connectors:\n          format: int32\n          type: integer\n        memory_requests:\n          description: Memory quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        memory_limits:\n          description: Memory quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        cpu_requests:\n          description: CPU quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        cpu_limits:\n          description: CPU quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n      type: object\n    MemoryQuota:\n      description: Memory quota for limits or requests\n      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n      type: string\n    CpuQuota:\n      description: CPU quota for limits or requests\n      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n      type: string\n    ConnectorNamespaceTenant:\n      properties:\n        kind:\n          $ref: '#/components/schemas/ConnectorNamespaceTenantKind'\n        id:\n          description: Either user or organisation id depending on the value of kind\n          type: string\n      required:\n      - id\n      - kind\n      type: object\n    ConnectorNamespaceTenantKind:\n      enum:\n      - user\n      - organisation\n      type: string\n    ConnectorNamespaceStatus:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorNamespaceState'\n        version:\n          type: string\n        connectors_deployed:\n          format: int32\n          type: integer\n        error:\n          type: string\n      required:\n      - connectors_deployed\n      - state\n      type: object\n    ConnectorNamespaceState:\n      enum:\n      - disconnected\n      - ready\n      - deleting\n      - deleted\n      type: string\n    ConnectorNamespaceEvalRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      description: An evaluation connector namespace create request\n    ConnectorMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorRequestMeta'\n      - $ref: '#/components/schemas/ConnectorMeta_allOf'\n    ConnectorRequestMeta:\n      properties:\n        name:\n          type: string\n        connector_type_id:\n          type: string\n        namespace_id:\n          type: string\n        channel:\n          $ref: '#/components/schemas/Channel'\n        desired_state:\n          $ref: '#/components/schemas/ConnectorDesiredState'\n      required:\n      - connector_type_id\n      - desired_state\n      - name\n      - namespace_id\n    Channel:\n      default: stable\n      enum:\n      - stable\n      type: string\n    ConnectorDesiredState:\n      enum:\n      - unassigned\n      - ready\n      - stopped\n      - deleted\n      type: string\n    ConnectorStatus:\n      properties:\n        status:\n          $ref: '#/components/schemas/ConnectorStatus_status'\n    ConnectorState:\n      enum:\n      - assigning\n      - assigned\n      - updating\n      - ready\n      - stopped\n      - failed\n      - deleting\n      - deleted\n      - provisioning\n      - deprovisioning\n      type: string\n    ConnectorDeploymentStatus:\n      description: The status of connector deployment\n      properties:\n        phase:\n          $ref: '#/components/schemas/ConnectorState'\n        resource_version:\n          format: int64\n          type: integer\n        operators:\n          $ref: '#/components/schemas/ConnectorDeploymentStatus_operators'\n        conditions:\n          items:\n            $ref: '#/components/schemas/MetaV1Condition'\n          type: array\n      type: object\n    ConnectorOperator:\n      description: identifies an operator that runs on the fleet shards used to manage\n        connectors.\n      properties:\n        id:\n          description: the id of the operator\n          type: string\n        type:\n          description: the type of the operator\n          type: string\n        version:\n          description: the version of the operator\n          type: string\n    MetaV1Condition:\n      properties:\n        type:\n          type: string\n        reason:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n        last_transition_time:\n          type: string\n      type: object\n    ConnectorType:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorType_allOf'\n      description: Represents a connector type supported by the API\n      oneOf:\n      - required:\n        - name\n        - schema\n        - version\n      - required:\n        - json_schema\n        - name\n        - version\n    ConnectorAvailableTypeUpgradeList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade'\n          type: array\n    ConnectorAvailableTypeUpgrade_shard_metadata:\n      example:\n        available_id: 6\n        assigned_id: 0\n      properties:\n        assigned_id:\n          format: int64\n          type: integer\n        available_id:\n          format: int64\n          type: integer\n    ConnectorAvailableOperatorUpgradeList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'\n          type: array\n    ConnectorAvailableOperatorUpgrade_operator:\n      example:\n        available_id: available_id\n        assigned_id: assigned_id\n      properties:\n        assigned_id:\n          type: string\n        available_id:\n          type: string\n    ConnectorNamespaceWithTenantRequest_allOf:\n      properties:\n        cluster_id:\n          type: string\n        tenant:\n          $ref: '#/components/schemas/ConnectorNamespaceTenant'\n        expiration:\n          description: Namespace expiration timestamp in RFC 3339 format\n          type: string\n    ConnectorAdminViewList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorAdminView'\n          type: array\n    ConnectorDeploymentAdminView_allOf_metadata:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        updated_at:\n          format: date-time\n          type: string\n        resource_version:\n          format: int64\n          type: integer\n        resolved_secrets:\n          type: boolean\n      required:\n      - created_at\n      - resolved_secrets\n      - resource_version\n      - updated_at\n    ConnectorDeploymentAdminView_allOf:\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ConnectorDeploymentAdminView_allOf_metadata'\n        spec:\n          $ref: '#/components/schemas/ConnectorDeploymentAdminSpec'\n        status:\n          $ref: '#/components/schemas/ConnectorDeploymentStatus'\n    ConnectorDeploymentAdminViewList_allOf:\n      properties:\n        items:\n          items:\n            allOf:\n            - $ref: '#/components/schemas/ConnectorDeploymentAdminView'\n          type: array\n    ConnectorTypeAdminViewList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorTypeAdminView'\n          type: array\n    ConnectorTypeAdminView_allOf:\n      properties:\n        channels:\n          additionalProperties:\n            $ref: '#/components/schemas/ConnectorTypeChannel'\n          type: object\n    ConnectorClusterList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorCluster'\n          type: array\n    ConnectorClusterStatus_status:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorClusterState'\n        error:\n          type: string\n    Error_allOf:\n      properties:\n        code:\n          type: string\n        reason:\n          type: string\n        operation_id:\n          type: string\n    ConnectorNamespaceList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorNamespace'\n          type: array\n    ConnectorNamespace_allOf:\n      properties:\n        name:\n          type: string\n        cluster_id:\n          type: string\n        expiration:\n          description: Namespace expiration timestamp in RFC 3339 format\n          type: string\n        tenant:\n          $ref: '#/components/schemas/ConnectorNamespaceTenant'\n        status:\n          $ref: '#/components/schemas/ConnectorNamespaceStatus'\n      required:\n      - cluster_id\n      - id\n      - name\n      - resource_version\n      - status\n      - tenant\n    ConnectorNamespaceMeta_allOf:\n      properties:\n        resource_version:\n          format: int64\n          type: integer\n        quota:\n          $ref: '#/components/schemas/ConnectorNamespaceQuota'\n    ConnectorMeta_allOf:\n      properties:\n        resource_version:\n          format: int64\n          type: integer\n    ConnectorStatus_status:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorState'\n        error:\n          type: string\n    ConnectorDeploymentStatus_operators:\n      properties:\n        assigned:\n          $ref: '#/components/schemas/ConnectorOperator'\n        available:\n          $ref: '#/components/schemas/ConnectorOperator'\n    ConnectorType_allOf:\n      properties:\n        name:\n          description: Name of the connector type.\n          type: string\n        version:\n          description: Version of the connector type.\n          type: string\n        channels:\n          description: Channels of the connector type.\n          items:\n            $ref: '#/components/schemas/Channel'\n          type: array\n        description:\n          description: A description of the connector.\n          type: string\n        icon_href:\n          description: URL to an icon of the connector.\n          type: string\n        labels:\n          description: Labels used to categorize the connector\n          items:\n            type: string\n          type: array\n        capabilities:\n          description: The capabilities supported by the conenctor\n          items:\n            type: string\n          type: array\n        schema:\n          description: A json schema that can be used to validate a ConnectorRequest\n            connector field.\n          type: object\n        json_schema:\n          description: A json schema that can be used to validate a ConnectorRequest\n            connector field.\n          type: object\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager@552271f1f81235aa585f111155c52cb2429fa941/-/blob/internal/connector/internal/api/admin/private/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/blob/552271f1f81235aa585f111155c52cb2429fa941/internal/connector/internal/api/admin/private/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch: object and "
}