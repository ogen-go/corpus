{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ml-for-good/automl"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 61695,
			"content": "openapi: 3.0.1\ninfo:\n  title: AutoML\n  description: 'We are designing the AutoML platform that would make it easy for non-technical people to build custom AI solutions and AI-powered process automation.'\n  termsOfService: http://example.com/terms/\n  contact:\n    name: API Support\n    url: http://www.example.com/support\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\nexternalDocs:\n  description: Please copy the entire content of this doc to the swagger editor to design the API\n  url: http://editor.swagger.io\nservers:\n- url: https://development.example.com/v1\n  description: Development server\n- url: https://staging.example.com/v1\n  description: Staging server\n- url: https://api.example.com/v1\n  description: Production server\nsecurity:\n  - oauth2:\n      - self\ntags:\n- name: Authorization\n  description: Authentication and Authorization\n  externalDocs:\n    url: https://stackoverflow.blog/2022/04/14/the-authorization-code-grant-in-excruciating-detail/\n- name: Namespaces\n  description: provides namespace level isolation\n- name: Role\n  description: Roles can be defined or modified in the configuration file as a list of dictionaries.\n  externalDocs:\n    url: https://jupyterhub.readthedocs.io/en/stable/rbac/roles.html#define-role-target\n- name: User\n  description: Operations about user\n  externalDocs:\n    url: https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml\n- name: Group\n  description: Operations about group\n- name: Dataset\n  description: Management of Dataset\n- name: Model\n  description: Operations about model\n- name: TrainingJob\n  description: Operations about TrainingJob\n- name: Evaluation\n  description: Operations about Evaluation\n- name: PredictionJob\n  description: Operations about Prediction\n- name: Endpoint\n  description: Operations about Endpoint\npaths:\n  /oauth2/authorize:\n    get:\n      tags:\n      - Authorization\n      summary: OAuth 2.0 authorize endpoint\n      description: |\n        Redirect users to this URL to begin the OAuth process.\n        It is not an API endpoint.\n      parameters:\n        - name: client_id\n          in: query\n          description: The client id\n          required: true\n          schema:\n            type: string\n        - name: response_type\n          in: query\n          description: The response type (always 'code')\n          required: true\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: A state string\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          description: The redirect url\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content: {}\n        400:\n          description: OAuth2Error\n          content: {}\n    post:\n      tags:\n      - Authorization\n      summary: The OAuth server authenticates the user\n      description: The OAuth server will render a login form to gather login information, such as a username and password, then the user can enter credentials and the OAuth server authenticates the user.\n      operationId: login\n      requestBody:\n        description: Login Credentials\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Credentials'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n        400:\n          description: Invalid username/password supplied\n          content: {}\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorModel'\n      x-codegen-request-body-name: body\n  /oauth2/token:\n    post:\n      tags:\n      - Authorization\n      summary: Request an OAuth2 token\n      description: |\n        Request an OAuth2 token from an authorization code.\n        This request completes the OAuth process.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - client_id\n                - client_secret\n                - code\n                - grant_type\n                - redirect_uri\n              properties:\n                client_id:\n                  type: string\n                  description: The client id\n                client_secret:\n                  type: string\n                  description: The client secret\n                grant_type:\n                  type: string\n                  description: The grant type (always 'authorization_code')\n                code:\n                  type: string\n                  description: The code provided by the authorization redirect\n                redirect_uri:\n                  type: string\n                  description: The redirect url\n        required: true\n      responses:\n        200:\n          description: JSON response including the token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                    description: The new API token for the user\n                  token_type:\n                    type: string\n                    description: Will always be 'Bearer'\n  /namespaces/{namespace}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    put:\n      operationId: putNamespace\n      summary: Create a namespace\n      description: Creates a new namespace object. A namespace enables the contextual grouping of related jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`), underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`). A namespace is case-insensitive with a maximum length of `1024` characters. Note jobs and datasets will be unique within a namespace, but not across namespaces.\n      tags:\n        - Namespaces\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Namespace'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n    get:\n      operationId: getNamespace\n      summary: Retrieve a namespace\n      description: Returns a namespace.\n      tags:\n        - Namespaces\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n  /namespaces:\n    get:\n      operationId: getNamespaces\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all namespaces\n      description: Returns a list of namespaces.\n      tags:\n        - Namespaces\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Namespace'\n  /roles:\n    get:\n      tags:\n      - Role\n      summary: List roles\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: The list of roles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Role\"\n      security: []\n  /user:\n    get:\n      tags:\n      - User\n      summary: Return authenticated user's model\n      responses:\n        200:\n          description: |\n            The authenticated user's model is returned\n            with additional information about the permissions associated with the request token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestIdentity\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n  /users:\n    get:\n      tags:\n      - User\n      summary: List users\n      responses:\n        200:\n          description: The Hub's user list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n    post:\n      tags:\n      - User\n      summary: Create multiple users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                usernames:\n                  type: array\n                  description: list of usernames to create on the Hub\n                  items:\n                    type: string\n                admin:\n                  type: boolean\n                  description: whether the created users should be admins\n        required: true\n      responses:\n        201:\n          description: The users have been created\n          content:\n            application/json:\n              schema:\n                type: array\n                description: The created users\n                items:\n                  $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /users/{name}:\n    get:\n      tags:\n      - User\n      summary: Get a user by name\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The User model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n    post:\n      tags:\n      - User\n      summary: Create a single user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: The user has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n    delete:\n      tags:\n      - User\n      summary: Delete a user\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The user has been deleted\n          content: {}\n      security:\n        - oauth2:\n            - admin:users\n    patch:\n      tags:\n      - User\n      summary: Modify a user\n      description: Change a user's name or admin status\n      parameters:\n        - name: name\n          in: path\n          description: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description:\n          Updated user info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description:\n                    the new name (optional, if another key is updated i.e.\n                    admin)\n                admin:\n                  type: boolean\n                  description:\n                    update admin (optional, if another key is updated i.e.\n                    name)\n        required: true\n      responses:\n        200:\n          description: The updated user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /groups:\n    get:\n      tags:\n      - Group\n      summary: List groups\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: The list of groups\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n  /groups/{name}:\n    get:\n      tags:\n      - Group\n      summary: Get a group by name\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The group model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n    post:\n      tags:\n      - Group\n      summary: Create a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: The group has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - admin:groups\n    delete:\n      tags:\n      - Group\n      summary: Delete a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The group has been deleted\n          content: {}\n      security:\n        - oauth2:\n            - admin:groups\n  /groups/{name}/users:\n    post:\n      tags:\n      - Group\n      summary: Add users to a group\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The users to add to the group\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                users:\n                  type: array\n                  description: List of usernames to add to the group\n                  items:\n                    type: string\n        required: true\n      responses:\n        200:\n          description: The users have been added to the group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n      - Group\n      summary: |\n        Remove users from a group\n      description: |\n        Body should be a JSON dictionary\n        where `users` is a list of usernames to remove from the groups.\n\n        ```json\n        {\n          \"users\": [\"name1\", \"name2\"]\n        }\n        ```\n\n      parameters:\n        - name: name\n          in: path\n          description: group name\n          required: true\n          schema:\n            type: string\n      # requestBody:\n      #   description: The users to remove from the group\n      #   content:\n      #     application/json:\n      #       schema:\n      #         type: object\n      #         properties:\n      #           users:\n      #             type: array\n      #             description: List of usernames to remove from the group\n      #             items:\n      #               type: string\n      #   required: true\n      responses:\n        200:\n          description: The users have been removed from the group\n          content: {}\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n  /namespaces/{namespace}/files/{filename}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Dataset\n      summary: upload files\n      operationId: automl.namespaces.files.create\n      parameters:\n      - name: filename\n        in: path\n        description: filename\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              description: the attachment content\n              format: binary\n          multipart/form-data:\n            schema:\n              required:\n              - file\n              properties:\n                file:\n                  type: string\n                  description: the attachment content\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: Upload was successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uri:\n                    $ref: \"#/components/schemas/URI\"\n        400:\n          description: Invalid input\n          content: {}\n  /namespaces/{namespace}/datasets:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Dataset\n      description: Creates a dataset.\n      operationId: automl.namespaces.datasets.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Dataset\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dataset\"\n          description: Successful response\n    get:\n      tags:\n      - Dataset\n      description: Lists datasets in the namespace.\n      operationId: automl.namespaces.datasets.list\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/Dataset\"\n                type: array\n          description: Successful response\n  /namespaces/{namespace}/datasets/{dataset}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      operationId: getDataset\n      summary: Retrieve a dataset\n      description: Returns a dataset.\n      tags:\n        - Dataset\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n    delete:\n      tags:\n      - Dataset\n      summary: Delete Dataset by Dataset Id\n      operationId: delete_dataset_by_id\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid dataset id value\n          content: {}\n    patch:\n      tags:\n      - Dataset\n      summary: Modify a dataset\n      operationId: patch_dataset_by_id\n      requestBody:\n        description:\n          Updated user info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Dataset\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dataset\"\n        400:\n          description: Invalid dataset id value\n          content: {}\n  /namespaces/{namespace}/datasets/{dataset}/tableSpecs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      tags:\n      - Dataset\n      description: Lists table specs in a dataset.\n      operationId: automl.namespaces.datasets.tableSpecs.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: The table specs read.\n                items:\n                  $ref: \"#/components/schemas/TableSpec\"\n                type: array\n          description: Successful response\n  /namespaces/{namespace}/datasets/{dataset}/tableSpecs/{tableSpec}/columnSpecs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/tableSpec'\n    get:\n      tags:\n      - Dataset\n      description: Lists column specs in a table spec.\n      operationId: automl.projects.locations.datasets.tableSpecs.columnSpecs.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: The column specs read.\n                items:\n                  $ref: \"#/components/schemas/ColumnSpec\"\n                type: array\n          description: Successful response\n  /namespaces/{namespace}/datasets/{dataset}/annotationSpecs/{annotationSpec}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/annotationSpec'\n    get:\n      operationId: automl.namespaces.datasets.annotationSpecs.get\n      description: Gets an AnnotationSpec.\n      tags:\n        - Dataset\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationSpec'\n  /namespaces/{namespace}/models:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    get:\n      tags:\n      - Model\n      description: Lists models in the namespace.\n      operationId: automl.namespaces.models.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/Model\"\n                type: array\n          description: Successful response\n    post:\n      tags:\n      - Model\n      description: Creates a model which will later contain one or more versions\n      operationId: automl.namespaces.models.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Model\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Model\"\n          description: Successful response\n  /namespaces/{namespace}/models/{model}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/model'\n    get:\n      operationId: automl.namespaces.models.get\n      summary: Retrieve a model\n      description: Returns a model.\n      tags:\n        - Model\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Model'\n    patch:\n      tags:\n      - Model\n      summary: Modify a model\n      operationId: patch_model_by_id\n      requestBody:\n        description:\n          Updated model info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Model\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Model\"\n        400:\n          description: Invalid dataset id value\n          content: {}\n  /namespaces/{namespace}/models/{model}/versions:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    get:\n      tags:\n      - Model\n      description: Lists versions\n      operationId: automl.namespaces.models.versions.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/Version\"\n                type: array\n          description: Successful response\n    post:\n      tags:\n      - Model\n      description: Creates a new version of a model\n      operationId: automl.namespaces.models.versions.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n          description: Successful response\n  /namespaces/{namespace}/models/{model}/versions/{version}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    get:\n      operationId: automl.namespaces.models.versions.get\n      summary: Retrieve a version\n      description: Returns a version.\n      tags:\n        - Model\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n    patch:\n      tags:\n      - Model\n      summary: Modify a version\n      operationId: automl.namespaces.models.versions.patch\n      requestBody:\n        description:\n          Updated version info. At least one key to be updated\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          description: Invalid version id value\n          content: {}\n    delete:\n      tags:\n      - Model\n      summary: Delete version\n      operationId: automl.namespaces.models.versions.delete\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid id\n          content: {}\n  /namespaces/{namespace}/trainingJob:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - TrainingJob\n      description: Creates a TrainingJob. When you train a model, several model evaluations are created for it, a summary evaluation, and one evaluation for each annotation.\n      operationId: automl.namespaces.trainingJob.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TrainingJob\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TrainingJob\"\n          description: Successful response\n  /namespaces/{namespace}/trainingJob/{job}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/job'\n    get:\n      tags:\n      - TrainingJob\n      description: Gets a TrainingJob\n      operationId: automl.namespaces.trainingJob.get\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrainingJob'\n  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    get:\n      tags:\n        - Evaluation\n      description: Lists model evaluations.\n      operationId: automl.projects.locations.models.version.evaluations.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/Evaluation\"\n                type: array\n          description: Successful response\n  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations/{evaluation}/slices:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    - $ref: '#/components/parameters/evaluation'\n    get:\n      tags:\n        - Evaluation\n      description: Lists ModelEvaluationSlices in a ModelEvaluation.\n      operationId: automl.projects.locations.models.version.evaluations.slices.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/EvaluationSlice\"\n                type: array\n          description: Successful response\n  /namespaces/{namespace}/predictionJob:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - PredictionJob\n      description: Creates a predictionJob.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PredictionJob\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PredictionJob\"\n          description: Successful response\n  /namespaces/{namespace}/predictionJob/{job}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/job'\n    get:\n      tags:\n      - PredictionJob\n      description: Gets a predictionJob\n      operationId: automl.namespaces.predictionJob.get\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictionJob'\n  /namespaces/{namespace}/endpoints:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Endpoint\n      description: Creates an Endpoint, If successful, the response body contains a newly created instance of Operation.\n      operationId: automl.namespaces.endpoints.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Endpoint\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n    get:\n      tags:\n      - Endpoint\n      description: Lists endpoints in the namespace.\n      operationId: automl.namespaces.endpoints.list\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items: \n                  $ref: \"#/components/schemas/Endpoint\"\n                type: array\n          description: Successful response\ncomponents:\n  schemas:\n    Namespace:\n      type: object\n      properties:\n        name:\n          description: The name of the namespace.\n          type: string\n        createdAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was created.\n          type: string\n          format: date-time\n        updatedAt:\n          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was updated.\n          type: string\n          format: date-time\n        ownerName:\n          description: The owner of the namespace.\n          type: string\n        description:\n          description: The description of the namespace.\n          type: string\n      example:\n        name: my-namespace\n        createdAt: '2019-05-09T19:49:24.201361Z'\n        updatedAt: '2019-05-09T19:49:24.201361Z'\n        ownerName: me\n        description: My first namespace!\n    GeneralError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    ErrorModel:\n      type: object\n      required:\n      - message\n      - code\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n    ExtendedErrorModel:\n      allOf:\n      - $ref: '#/components/schemas/ErrorModel'\n      - type: object\n        required:\n        - rootCause\n        properties:\n          rootCause:\n            type: string\n    JobState:\n      enum:\n        - UNSPECIFIED\n        - QUEUED\n        - PENDING\n        - RUNNING\n        - SUCCEEDED\n        - FAILED\n        - CANCELLING\n        - CANCELLED\n        - PAUSED\n      type: string\n      description: |\n         * `UNSPECIFIED` - The job state is unspecified.\n         * `QUEUED` - The job has been just created or resumed and processing has not yet begun.\n         * `PENDING` - The service is preparing to run the job.\n         * `RUNNING` -   The job is in progress.\n         * `SUCCEEDED` - The job completed successfully.\n         * `FAILED` - The job failed.\n         * `CANCELLING` - The job is being cancelled. From this state the job may only go to either SUCCEEDED, FAILED or CANCELLED.\n         * `CANCELLED` - The job has been cancelled.\n         * `PAUSED` - The job has been stopped, and can be resumed.\n    TrainingJob:\n      type: object\n      properties:\n        jobId:\n          type: string\n          description: The user-specified id of the job.\n        createTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job was created.\n        startTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.\n        endTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.\n        updateTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job was most recently updated.\n        state:\n          $ref: '#/components/schemas/JobState'\n        errorMessage:\n          description: Output only. The details of a failure or a cancellation.\n          type: string\n        jobPosition:\n          type: integer\n          format: int64\n          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.\n        trainingInput:\n          $ref: '#/components/schemas/ModelMetadata'\n        trainingOnput:\n          type: object\n    PredictionJob:\n      type: object\n      properties:\n        jobId:\n          type: string\n          description: The user-specified id of the job.\n        createTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job was created.\n        startTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.\n        endTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.\n        updateTime:\n          format: datetime\n          type: string\n          description: Output only. Time when the Job was most recently updated.\n        state:\n          $ref: '#/components/schemas/JobState'\n        errorMessage:\n          description: Output only. The details of a failure or a cancellation.\n          type: string\n        jobPosition:\n          type: integer\n          format: int64\n          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.\n        predictionInput:\n          $ref: '#/components/schemas/PredictionInput'\n        predictionOutput:\n          $ref: '#/components/schemas/PredictionOutput'\n    DataFormat:\n      type: string\n      description: |\n         The format used to separate data instances in the source and destination files. \n         * `UNSPECIFIED` - Unspecified format.\n         * `JSON` - Each line of the file is a JSON dictionary representing one record.\n         * `TF_RECORD` - The source file is a TFRecord file. Currently available only for input data.\n         * `TF_RECORD_GZIP` - The source file is a GZIP-compressed TFRecord file. Currently available only for input data.\n         * `CSV` - \tValues are comma-separated rows, with keys in a separate file. Currently available only for output data.\n      enum:\n        - UNSPECIFIED\n        - JSON\n        - TF_RECORD\n        - TF_RECORD_GZIP\n        - CSV\n    PredictionInput:\n      type: object\n      properties:\n        dataFormat:\n          # Required. The format of the input data files.\n          $ref: \"#/components/schemas/DataFormat\"\n        ouputDataFormat:\n          # Optional. Format of the output data files, defaults to JSON.\n          $ref: \"#/components/schemas/DataFormat\"\n        inputPaths:\n          $ref: \"#/components/schemas/URI\"\n        modelName:\n          type: string\n          description: The name of the Model resoure that produces the predictions via this job,\n        versionName:\n          type: string\n          description: specify a version of the model to use. \n    DoubleRange:\n      description: A range between two double numbers.\n      properties:\n        end:\n          description: End of the range, exclusive.\n          format: double\n          type: number\n        start:\n          description: Start of the range, inclusive.\n          format: double\n          type: number\n      type: object\n    PredictionOutput:\n      description: Contains prediction details specific to Tabular.\n      properties:\n        baselineScore:\n          description: Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.\n          format: float\n          type: number\n        predictionInterval:\n          $ref: \"#/components/schemas/DoubleRange\"\n          description: Output only. Only populated when target_column_spec has FLOAT64 data type. An interval in which the exactly correct target value has 95% chance to be in.\n        score:\n          description: Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.\n          format: float\n          type: number\n        value:\n          description: \"The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.\"\n      type: object\n    Credentials:\n      type: object\n      properties:\n        userId:\n          type: integer\n          format: int64\n        password:\n          type: string\n          format: encrypted string\n    User:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The user's name\n        admin:\n          type: boolean\n          description: Whether the user is an admin\n        roles:\n          type: array\n          description: The names of roles this user has\n          items:\n            type: string\n        groups:\n          type: array\n          description: The names of groups where this user is a member\n          items:\n            type: string\n        pending:\n          type: string\n          description: The currently pending action, if any\n          enum:\n            - spawn\n            - stop\n        auth_state:\n          type: object\n          properties: {}\n          description: |\n            Authentication state of the user. Only available with admin:users:auth_state\n            scope. None otherwise.\n    Group:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The group's name\n        users:\n          type: array\n          description: The names of users who are members of this group\n          items:\n            type: string\n        roles:\n          type: array\n          description: The names of roles this group has\n          items:\n            type: string\n    Role:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The role's name\n        description:\n          type: string\n          description: The role's description\n        scopes:\n          type: array\n          description: Roles are collections of scopes that specify the level of what a client is allowed to do\n          items:\n            type: string\n    RequestIdentity:\n      description: |\n        The model for the entity making the request.\n        Extends User model to add information about the specific credentials (e.g. session).\n      allOf:\n        - type: object\n          oneOf:\n            - $ref: \"#/components/schemas/User\"\n          discriminator:\n            propertyName: kind\n            mapping:\n              user: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            session_id:\n              type: string\n              nullable: true\n              description: |\n                The session id associated with the request's OAuth token, if any.\n                null, if the request token not associated with a session id.\n\n                Added in 2.0.\n            scopes:\n              type: array\n              description: |\n                The list of all expanded scopes the request credentials have access to.\n\n                Added in 2.0.\n              items:\n                type: string\n              example:\n                - \"read:users\"\n    URI:\n      oneOf:\n        - type: string\n          description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.\n          example: s3://datasets/train.csv\n        - type: array\n          description: multiple files\n          items:\n            type: string\n            description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.\n            example: s3://datasets/train.csv\n    Dataset:\n      description: A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.\n      properties:\n        createTime:\n          description: Output only. Timestamp when this dataset was created.\n          format: datetime\n          type: string\n        description:\n          description: User-provided description of the dataset. The description can be up to 25000 characters long.\n          type: string\n        namespace:\n          type: string\n          description: The namespace of the dataset.\n        name:\n          type: string\n          description: The name of the dataset.\n        dataset_id:\n          description: \"The resource id of the dataset\"\n          type: string\n        uri:\n          $ref: \"#/components/schemas/URI\"\n      type: object\n    TableSpec:\n      description: A specification of a relational table. The table's schema is represented via its child column specs. \n      properties:\n        columnCount:\n          description: Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.\n          format: int64\n          type: string\n        name:\n          description: Output only. The resource name of the table spec. \n          type: string\n        rowCount:\n          description: Output only. The number of rows (i.e. examples) in the table.\n          format: int64\n          type: string\n        validRowCount:\n          description: Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).\n          format: int64\n          type: string\n        uri:\n          $ref: \"#/components/schemas/URI\"\n      type: object\n    ColumnSpec:\n      type: object\n      description: A representation of a column in a relational table. \n      properties:\n        name:\n          type: string\n          description: Output only. The resource name of the column specs. \n        dataType:\n          enum:\n            - UNSPECIFIED\n            - FLOAT64\n            - TIMESTAMP\n            - STRING\n            - CATEGORY\n          type: string\n          description: The data type of elements stored in the column.\n    AnnotationSpec:\n      description: A definition of an annotation spec.\n      properties:\n        displayName:\n          description: Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.\n          type: string\n        name:\n          description: Output only. Resource name of the annotation spec. \n          type: string\n        createTime:\n          format: datetime\n          type: string\n          description: Output only. Timestamp when this AnnotationSpec was created.\n        updateTime:\n          format: datetime\n          type: string\n          description: Output only. Timestamp when AnnotationSpec was last updated.\n      type: object\n    ModelMetadata:\n      description: Union field model_metadata. The model metadata that is specific to the problem type. Must match the metadata type of the dataset used to train the model. model_metadata can be only one of the following\n      oneOf:\n        - $ref: '#/components/schemas/TabularModelMetadata'\n    TabularModelMetadata:\n      type: object\n      description: Metadata for Tabular models, metadata is used to train the model. When you train an AutoML model using a tabular dataset, the platform selects a default optimization objective based on your model type and the data type used for your target column.\n      properties:\n        name:\n          type: string\n          description: The resource name of the Model.\n        modelType:\n          description: The model type that is specific to the problem type. Must match the metadata type of the dataset used to train the model. \n          enum:\n            - Tabular\n          type: string\n        version:\n          type: string\n          description: The resource name of the Version.\n        datasetId:\n          description: Optional. The resource ID of the dataset used to create the model. The dataset must come from the same namespace.\n          type: string\n        disableEarlyStopping:\n          description: This disables the early stopping feature. By default, the early stopping feature is enabled, which means ends model training when detects that no more improvents can be made.\n          type: boolean\n        optimizationObjective:\n          description: 'Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: \"MAXIMIZE_AU_ROC\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"MINIMIZE_LOG_LOSS\" - Minimize log loss. \"MAXIMIZE_AU_PRC\" - Maximize the area under the precision-recall curve. \"MAXIMIZE_PRECISION_AT_RECALL\" - Maximize precision for a specified recall value. \"MAXIMIZE_RECALL_AT_PRECISION\" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : \"MINIMIZE_LOG_LOSS\" (default) - Minimize log loss. REGRESSION: \"MINIMIZE_RMSE\" (default) - Minimize root-mean-squared error (RMSE). \"MINIMIZE_MAE\" - Minimize mean-absolute error (MAE). \"MINIMIZE_RMSLE\" - Minimize root-mean-squared log error (RMSLE).'\n          type: string\n        optimizationObjectivePrecisionValue:\n          description: Required when optimization_objective is \"MAXIMIZE_RECALL_AT_PRECISION\". Must be between 0 and 1, inclusive.\n          format: float\n          type: number\n        optimizationObjectiveRecallValue:\n          description: Required when optimization_objective is \"MAXIMIZE_PRECISION_AT_RECALL\". Must be between 0 and 1, inclusive.\n          format: float\n          type: number\n        fractionSplit:\n          type: object\n          properties:\n            trainingFraction:\n              format: float\n              type: number\n              description: The fraction of the input data that is to be used to train the Model.\n            validationFraction:\n              format: float\n              type: number\n              description: The fraction of the input data that is to be used to validate the Model.\n            testFraction:\n              format: float\n              type: number\n              description: The fraction of the input data that is to be used to evaluate the Model.\n        targetColumnSpec:\n          $ref: '#/components/schemas/ColumnSpec'\n    Model:\n      type: object\n      description: Represents a machine learning solution.\n      properties:\n        name:\n          type: string\n          description: The resource name of the Model.\n        displayName:\n          type: string\n          description: The name specified for the model when it was created. The model name must be unique within the namespace it is created in.\n        description:\n          type: string\n          description: Optional. The description specified for the model when it was created.\n        defaultVersion:\n          type: string\n          description: Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version.\n        createTime:\n          description: Output only. Timestamp when this model was created.\n          type: string\n        updateTime:\n          description: Output only. Timestamp when this Model was most recently updated.\n          type: string\n        deploymentState:\n          description: Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.\n          enum:\n            - DEPLOYMENT_STATE_UNSPECIFIED\n            - DEPLOYED\n            - UNDEPLOYED\n          type: string\n        modelMetadata:\n          $ref: '#/components/schemas/ModelMetadata'\n    Version:\n      type: object\n      description: Represents a version of the model.\n      properties:\n        name:\n          type: string\n          description: Required. The resource name of the Version.\n        displayName:\n          type: string\n          description: Required. The display name of the Version. \n        description:\n          type: string\n          description: Optional. The description specified for the model when it was created.\n        createTime:\n          description: Output only. Timestamp when this model was created.\n          type: string\n        updateTime:\n          description: Output only. Timestamp when this Model was most recently updated.\n          type: string\n        errorMessage:\n          description: Output only. The details of a failure or a cancellation.\n          type: string\n        state:\n          enum:\n            - Draft\n            - Training\n            - Ready\n            - Failed\n          type: string\n          description: |\n             * `Draft` - The version state is unspecified.\n             * `Ready` - The version is ready for prediction.\n             * `Training` - The version is being trained. New versions.patch and versions.delete requests will fail if a version is in the Training state.\n             * `Failed` - errorMessage should contain the details of the failure.\n        modelMetadata:\n          $ref: '#/components/schemas/ModelMetadata'\n    EvaluationMetrics:\n      description: Evaluation metrics of the Model. \n      oneOf:\n        - $ref: '#/components/schemas/ClassificationEvaluationMetrics'\n        - $ref: '#/components/schemas/RegressionEvaluationMetrics'\n    ClassificationEvaluationMetrics:\n      type: object\n    RegressionEvaluationMetrics:\n      type: object\n    Evaluation:\n      type: object\n      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.\n      properties:\n        name:\n          description: \"Output only. Resource name of the model evaluation\"\n          type: string\n        metrics:\n          $ref: '#/components/schemas/EvaluationMetrics'\n    EvaluationSlice:\n      type: object\n    Endpoint:\n      type: object\n    Status:\n      description: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs. Each `Status` message contains three pieces of data - error code, error message, and error details. \n      properties:\n        code:\n          description: The status code, which should be an enum value\n          format: int32\n          type: integer\n        details:\n          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.\n          items:\n            additionalProperties:\n              description: Properties of the object. Contains field @type with type URL.\n            type: object\n          type: array\n        message:\n          description: A developer-facing error message, which should be in English. \n          type: string\n      type: object\n    Operation:\n      description: This resource represents a long-running operation that is the result of a network API call.\n      properties:\n        done:\n          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.\n          type: boolean\n        error:\n          description: The error result of the operation in case of failure or cancellation.\n          $ref: '#/components/schemas/Status'\n        metadata:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type URL.\n          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.\n          type: object\n        name:\n          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.\n          type: string\n        response:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type URL.\n          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.\n          type: object\n      type: object\n  parameters:\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: The number of results to return from offset\n      required: false\n      schema:\n        type: integer\n        example: 25\n        default: 100\n    offset:\n      name: offset\n      in: query\n      description: The initial position from which to return results\n      required: false\n      schema:\n        type: integer\n        default: 0\n    namespace:\n      name: namespace\n      in: path\n      description: The name of the namespace.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-namespace\n    job:\n      name: job\n      in: path\n      description: The name of the job.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-job\n    dataset:\n      name: dataset\n      in: path\n      description: The id of the dataset.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-dataset\n    tableSpec:\n      name: tableSpec\n      in: path\n      description: The id of the tableSpec.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-tableSpec\n    annotationSpec:\n      name: annotationSpec\n      in: path\n      description: The id of the annotationSpec.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-annotationSpec\n    model:\n      name: model\n      in: path\n      description: The id of the model.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-model\n    version:\n      name: version\n      in: path\n      description: The id of the version.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: v1\n    evaluation:\n      name: evaluation\n      in: path\n      description: The id of the evaluation.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    slice:\n      name: slice\n      in: path\n      description: The id of the slice.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content: {}\n    Unauthorized:\n      description: Authentication/Authorization error\n      content: {}\n    IllegalInput:\n      description: Illegal input for operation.\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralError'\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://hub.example/hub/api/oauth2/authorize\n          tokenUrl: https://hub.example/hub/api/oauth2/token\n          scopes:\n            (openapi-reference): https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml\n            (rbac-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/index.html\n            (scope-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html\n            self:\n              The user’s own resources\n            all:\n              Contains all available scopes and grants full rights to all actions.\n            admin:users:\n              Read, write, create and delete users and their authentication\n              state.\n            admin:auth_state: Read a user’s authentication state.\n            users:\n              Read and write permissions to user models (excluding authentication state).\n            delete:users: Delete users.\n            list:users: List users, including at least their names.\n            read:users:\n              Read user models (excluding authentication state).\n            read:users:name: Read names of users.\n            read:users:groups: Read users’ group membership.\n            read:roles: Read role assignments.\n            read:roles:users: Read user role assignments.\n            read:roles:groups: Read group role assignments.\n            admin:groups: Read and write group information, create and delete groups.\n            groups: Read and write group information, including adding/removing users\n              to/from groups.\n            list:groups: List groups, including at least their names.\n            read:groups: Read group models.\n            read:groups:name: Read group names.\n            delete:groups: Delete groups.\n            read:metrics: Read prometheus metrics.\n",
			"canonicalURL": "/github.com/ml-for-good/automl@8e1f2d6c8b78eebaee0c84753b08bc0c31118e31/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ml-for-good/automl/blob/8e1f2d6c8b78eebaee0c84753b08bc0c31118e31/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/user\": get: responses: code 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"discriminator inference",
		"oauth2 security"
	]
}