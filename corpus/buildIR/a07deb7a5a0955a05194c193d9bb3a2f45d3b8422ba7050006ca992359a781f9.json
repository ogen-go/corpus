{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/atc-net/atc-rest-api-generator"
		},
		"file": {
			"name": "api.v1.yaml",
			"size": 0,
			"path": "test/Atc.Rest.ApiGenerator.Tests/IntegrationTests/Scenarios/Scenario2/api.v1.yaml",
			"byteSize": 25319,
			"content": "openapi: 3.0.0\ninfo:\n  title: Demo Api\n  description: Demo Api - SingleFileVersion\n  version: '1.0'\n  contact:\n    name: atc-net A/S\nservers:\n  - url: /api/v1\n    description: Api version 1.0\npaths:\n  /orders:\n    get:\n      tags:\n        - Orders\n      summary: Get orders\n      description: Get orders\n      operationId: getOrders\n      parameters:\n        - $ref: '#/components/parameters/pagingPageSize'\n        - $ref: '#/components/parameters/pagingPageIndex'\n        - $ref: '#/components/parameters/queryString'\n        - $ref: '#/components/parameters/queryStringArray'\n        - $ref: '#/components/parameters/continuationToken'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Pagination'\n                  - $ref: '#/components/schemas/Orders'\n        '404':\n          description: Not Found\n  '/orders/{id}':\n    get:\n      tags:\n        - Orders\n      summary: Get order by id\n      description: Get order by id\n      operationId: getOrderById\n      parameters:\n        - name: myEmail\n          in: query\n          description: The email for filter orders to retrieve\n          schema:\n            type: string\n            format: email\n            nullable: true\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '404':\n          description: Not Found\n    patch:\n      summary: Update part of order by id\n      description: Update part of order by id\n      operationId: patchOrdersId\n      parameters:\n        - name: myTestHeader\n          in: header\n          required: true\n          description: The myTestHeader special key\n          schema:\n            type: string\n        - name: myTestHeaderBool\n          in: header\n          required: true\n          description: The myTestHeaderBool special key\n          schema:\n            type: boolean\n        - name: myTestHeaderInt\n          in: header\n          required: true\n          description: The myTestHeaderInt special key\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateOrderRequest'\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n        '502':\n          description: Bad Gateway\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n    parameters:\n      - name: id\n        in: path\n        description: The id of the order\n        required: true\n        schema:\n          type: string\n          format: uuid\n  /users/email:\n    get:\n      tags:\n        - Users\n      summary: Get user by email\n      description: Get user by email\n      operationId: getUserByEmail\n      parameters:\n        - name: email\n          in: query\n          description: The email of the user to retrieve\n          required: true\n          schema:\n            type: string\n            format: email\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n  '/users/{id}':\n    get:\n      summary: Get user by id\n      description: Get user by id\n      operationId: getUserById\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n    put:\n      summary: Update user by id\n      description: Update user by id\n      operationId: updateUserById\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n    delete:\n      summary: Delete user by id\n      description: Delete user by id\n      operationId: deleteUserById\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n    parameters:\n      - name: id\n        in: path\n        description: Id of the user\n        required: true\n        schema:\n          type: string\n          format: uuid\n  /users:\n    get:\n      summary: Get all users\n      description: Get all users\n      operationId: getUsers\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n        '409':\n          description: Conflict\n    post:\n      summary: Create a new user\n      description: Create a new user\n      operationId: postUser\n      responses:\n        '201':\n          description: Created\n        '400':\n          description: Bad Request\n        '409':\n          description: Conflict\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n  '/users/{id}/gender':\n    put:\n      summary: Update gender on a user\n      description: Update gender on a user\n      operationId: updateMyTestGender\n      parameters:\n        - name: genderParam\n          in: query\n          description: The gender to set on the user\n          schema:\n            $ref: '#/components/schemas/GenderType'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateTestGenderRequest'\n    parameters:\n      - name: id\n        description: Id of the user\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n  '/accounts/{accountId}/name':\n    put:\n      summary: Update name of account\n      description: Update name of account\n      operationId: updateAccountName\n      responses:\n        '200':\n          description: OK\n      parameters:\n        - name: name\n          in: header\n          description: The account name\n          schema:\n            type: string\n    post:\n      summary: Set name of account\n      description: Set name of account\n      operationId: setAccountName\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAccountRequest'\n    parameters:\n      - name: accountId\n        in: path\n        required: true\n        description: The accountId\n        schema:\n          type: string\n          format: uuid\n  '/addresses/{postalCode}':\n    get:\n      summary: Get addresses by postal code\n      description: Get addresses by postal code\n      operationId: getAddressesByPostalCodes\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n        '404':\n          description: Not Found\n    parameters:\n      - name: postalCode\n        in: path\n        required: true\n        description: The postalCode to limit addresses on\n        schema:\n          type: string\n  /route-with-dash:\n    get:\n      summary: Your GET endpoint\n      description: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n      operationId: getRouteWithDash\n  /items:\n    post:\n      summary: Create a new item\n      description: Create a new item\n      operationId: createItem\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateItemRequest'\n  '/items/{id}':\n    put:\n      summary: Updates an item\n      description: Updates an item\n      operationId: updateItem\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateItemRequest'\n      parameters:\n        - name: id\n          in: path\n          description: The id of the order\n          required: true\n          schema:\n            type: string\n            format: uuid\n  /tasks:\n    get:\n      operationId: getTasks\n      summary: Returns tasks\n      description: Returns tasks\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tasks'\n  '/eventArgs/{id}':\n    parameters:\n      - name: id\n        in: path\n        description: The id of the eventArgs\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get EventArgs By Id\n      description: Get EventArgs By Id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventArgs'\n        '404':\n          description: Not Found\n      operationId: getEventArgsById\n  /eventArgs:\n    get:\n      operationId: getEventArgs\n      summary: Get EventArgs List\n      description: Get EventArgs List\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventArgs'\n  '/files/{id}':\n    parameters:\n      - name: id\n        in: path\n        description: The file id\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getFileById\n      summary: Get File By Id\n      description: Get File By Id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n          headers: {}\n        '404':\n          description: Not Found\n  /files/form-data/singleObject:\n    post:\n      operationId: uploadSingleObjectWithFileAsFormData\n      summary: Upload a file as FormData\n      description: Upload a file as FormData\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/FileAsFormDataRequest'\n    parameters: []\n  /files/form-data/singleObjectMultiFile:\n    post:\n      operationId: uploadSingleObjectWithFilesAsFormData\n      summary: Upload files as FormData\n      description: Upload files as FormData\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/FilesAsFormDataRequest'\n    parameters: []\n  /files/form-data/singleFile:\n    post:\n      operationId: uploadSingleFileAsFormData\n      summary: Upload a file as OctetStream\n      description: Upload a file as OctetStream\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n    parameters: []\n  /files/form-data/multiFile:\n    post:\n      summary: Upload multi files as form data\n      description: Upload multi files as form data\n      operationId: uploadMultiFilesAsFormData\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: array\n              items:\n                type: string\n                format: binary\n  /list/string:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      operationId: getListOfStrings\n  /list/int:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n      operationId: getListOfInts\n  /pagination/list/string:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Pagination'\n                  - type: array\n                    items:\n                      type: string\n      operationId: getPaginatedListOfStrings\n  /pagination/list/int:\n    get:\n      summary: Your GET endpoint\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Pagination'\n                  - type: array\n                    items:\n                      type: integer\n      operationId: getPaginatedListOfInts\ncomponents:\n  parameters:\n    pagingPageSize:\n      name: pageSize\n      in: query\n      required: true\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 10\n      description: The numbers of items to return.\n    pagingPageIndex:\n      name: pageIndex\n      in: query\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n        default: 0\n      description: The number of items to skip before starting to collect the result set.\n    queryString:\n      name: queryString\n      in: query\n      required: false\n      schema:\n        type: string\n        nullable: true\n      description: The query string.\n    queryStringArray:\n      name: queryStringArray\n      in: query\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n        nullable: true\n      description: The query array of string.\n    continuationToken:\n      name: continuationToken\n      in: query\n      required: false\n      schema:\n        type: string\n        nullable: true\n      description: The continuation token.\n  schemas:\n    Pagination:\n      type: object\n      title: Pagination\n      description: A item result subset of a data query.\n      properties:\n        pageSize:\n          type: number\n          description: The number of items to request.\n        pageIndex:\n          type: number\n          nullable: true\n          description: The given page index starting with 0.\n        queryString:\n          type: string\n          nullable: true\n          description: The query to filter items by.\n        continuationToken:\n          type: string\n          nullable: true\n          description: Token to indicate next result set.\n        count:\n          type: number\n          description: Items count in result set.\n        totalCount:\n          type: number\n          nullable: true\n          description: Total items count.\n        totalPages:\n          type: number\n          nullable: true\n          description: Total pages.\n      required:\n        - pageSize\n        - count\n    ProblemDetails:\n      type: object\n      title: ProblemDetails\n      description: 'A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.'\n      properties:\n        type:\n          type: string\n          description: 'A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).'\n        title:\n          type: string\n          description: 'A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).'\n        status:\n          type: integer\n          format: int32\n          description: 'The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.'\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem.\n        instance:\n          type: string\n          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.\n    Order:\n      title: Order\n      description: |-\n        A single order.\n        Hallo description with multiline and no ending dot\n      type: object\n      x-examples:\n        MyExample:\n          id: 123\n          name: Hallo world\n        MyExample2: {}\n      properties:\n        id:\n          type: string\n          format: uuid\n        description:\n          type: string\n        myTime:\n          type: string\n          format: time\n        myEmail:\n          type: string\n          format: email\n          default: a@a.com\n        myNullableDateTime:\n          type: string\n          format: date-time\n          nullable: true\n        myDateTime:\n          type: string\n          format: date-time\n        myNumber:\n          type: number\n          minimum: 1.1\n          maximum: 20.2\n        myInteger:\n          type: integer\n          maximum: 50\n          default: 15\n        myBool:\n          type: boolean\n          description: MyBool is great\n        myUri:\n          type: string\n          format: uri\n          description: 'This is the good uri :-)'\n        myByte:\n          type: string\n          format: byte\n        myStringList:\n          type: array\n          description: 'Hallo myStringList desc :-)'\n          items:\n            type: string\n        myLong:\n          type: integer\n          format: int64\n          minimum: 10\n          exclusiveMinimum: false\n        deliveryAddress:\n          $ref: '#/components/schemas/Address'\n    Orders:\n      description: A list of orders.\n      type: array\n      x-tags:\n        - Orders\n      title: Orders\n      items:\n        $ref: '#/components/schemas/Order'\n    GenderType:\n      title: GenderType\n      description: ''\n      type: object\n      properties:\n        gender:\n          type: string\n          description: The users gender type\n          enum:\n            - None\n            - NonBinary\n            - Male\n            - Female\n      required:\n        - gender\n    ColorType:\n      title: ColorType\n      description: ''\n      type: object\n      properties:\n        color:\n          type: string\n          description: The users color type\n          enum:\n            - None = 0\n            - Black = 1\n            - White = 2\n            - Yellow = 4\n            - Red = 8\n      required:\n        - color\n    User:\n      title: User\n      description: A single user.\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 00000000-0000-0000-0000-000000000000\n        gender:\n          $ref: '#/components/schemas/GenderType'\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n          format: email\n          example: email@email.dk\n        homepage:\n          type: string\n          format: uri\n        color:\n          $ref: '#/components/schemas/ColorType'\n        homeAddress:\n          $ref: '#/components/schemas/Address'\n        companyAddress:\n          $ref: '#/components/schemas/Address'\n    Users:\n      description: A list of users.\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n      x-tags:\n        - Users\n      title: Users\n    CreateUserRequest:\n      title: CreateUserRequest\n      description: Request to create a user\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        myNullableDateTime:\n          type: string\n          format: date-time\n          nullable: true\n        myDateTime:\n          type: string\n          format: date-time\n        email:\n          type: string\n          format: email\n          example: email@email.dk\n        homepage:\n          type: string\n          format: uri\n        gender:\n          $ref: '#/components/schemas/GenderType'\n        myNullableAddress:\n          nullable: true\n          oneOf:\n            - $ref: '#/components/schemas/Address'\n      required:\n        - firstName\n        - lastName\n        - myDateTime\n        - email\n        - gender\n    CreateUsersRequest:\n      description: A list of users.\n      type: array\n      x-tags:\n        - CreateUsersRequest\n      title: CreateUsersRequest\n      items:\n        $ref: '#/components/schemas/CreateUserRequest'\n    UpdateUserRequest:\n      title: UpdateUserRequest\n      description: Request to update a user\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n          format: email\n          example: email@email.dk\n        gender:\n          $ref: '#/components/schemas/GenderType'\n    UpdateTestGenderRequest:\n      title: Update test-gender Request\n      description: ''\n      type: object\n      properties:\n        gender:\n          $ref: '#/components/schemas/GenderType'\n    Address:\n      title: Address\n      type: object\n      properties:\n        streetName:\n          type: string\n          maxLength: 255\n        streetNumber:\n          type: string\n        postalCode:\n          type: string\n        cityName:\n          type: string\n        myCountry:\n          $ref: '#/components/schemas/Country'\n    Country:\n      title: Country\n      type: object\n      properties:\n        name:\n          type: string\n        alpha2Code:\n          type: string\n          minLength: 2\n          maxLength: 2\n          pattern: '^[A-Za-z]{2}$'\n        alpha3Code:\n          type: string\n          minLength: 3\n          maxLength: 3\n          pattern: '^[A-Za-z]{3}$'\n      required:\n        - name\n        - alpha2Code\n        - alpha3Code\n    UpdateOrderRequest:\n      title: UpdateOrderRequest\n      description: Request to update an order\n      type: object\n      properties:\n        myEmail:\n          type: string\n          format: email\n      required:\n        - myEmail\n    Item:\n      title: Item\n      type: object\n      properties:\n        name:\n          type: string\n      required:\n        - name\n    CreateItemRequest:\n      title: CreateItemRequest\n      type: object\n      properties:\n        item:\n          $ref: '#/components/schemas/Item'\n        myItems:\n          type: array\n          items:\n            $ref: '#/components/schemas/Item'\n      required:\n        - item\n        - myItems\n    UpdateItemRequest:\n      title: UpdateItemRequest\n      type: object\n      properties:\n        item:\n          $ref: '#/components/schemas/Item'\n      required:\n        - item\n    Task:\n      title: Task\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n      description: Describes a single task.\n    Tasks:\n      title: Tasks\n      type: array\n      items:\n        $ref: '#/components/schemas/Task'\n      description: Contains a list of Tasks\n    EventArgs:\n      title: EventArgs\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        eventName:\n          type: string\n    FileAsFormDataRequest:\n      title: FileAsFormDataRequest\n      type: object\n      properties:\n        itemName:\n          type: string\n        file:\n          type: string\n          format: binary\n          nullable: true\n        items:\n          type: array\n          items:\n            type: string\n      required:\n        - itemName\n        - items\n    FilesAsFormDataRequest:\n      title: FilesAsFormDataRequest\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            type: string\n            format: binary\n      required:\n        - files\n    UpdateAccountRequest:\n      title: UpdateAccountRequest\n      type: object\n      properties:\n        name:\n          type: string\n",
			"canonicalURL": "/github.com/atc-net/atc-rest-api-generator@044b7e5e4465277d695229116f7e2434f323cd75/-/blob/test/Atc.Rest.ApiGenerator.Tests/IntegrationTests/Scenarios/Scenario2/api.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/atc-net/atc-rest-api-generator/blob/044b7e5e4465277d695229116f7e2434f323cd75/test/Atc.Rest.ApiGenerator.Tests/IntegrationTests/Scenarios/Scenario2/api.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/orders\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: schema type mismatch: object and array",
	"NotImplemented": [
		"complex form schema"
	]
}