{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/devtron-labs/devtron"
		},
		"file": {
			"name": "group_policy.yaml",
			"size": 0,
			"path": "specs/group_policy.yaml",
			"byteSize": 6250,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification\n  termsOfService: http://swagger.io/terms/\n  contact:\n    name: Swagger API Team\n    email: apiteam@swagger.io\n    url: http://swagger.io\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://petstore.swagger.io/api\npaths:\n  /user/role/group:\n    get:\n      summary: Returns all group policies\n      description: all the template group policies\n      operationId: findGroupPolicy\n      responses:\n        '200':\n          description: list response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleGroup'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Creates a new Group Policy\n      description: create chart group api, with multiple environment in one row of policy, plus chart group additional type of policy.\n      operationId: addGroupPolicy\n      requestBody:\n        description: json as request body\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleGroup'\n      responses:\n        '200':\n          description: create group policy response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleGroup'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: update a new pet\n      description: Creates a new pet in the store. Duplicates are allowed\n      operationId: updateGroupPolicy\n      requestBody:\n        description: json as request body\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/RoleGroup'\n                - type: object\n                  required:\n                    - id\n                  properties:\n                    id:\n                      type: integer\n                      format: int64\n      responses:\n        '200':\n          description: group response\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/RoleGroup'\n                  - type: object\n                    properties:\n                      id:\n                        type: integer\n                        format: int64\n\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /user/role/group/search:\n    get:\n      summary: search a group policies by NAME\n      description: search group policy by group name\n      operationId: findRoleGroupByName\n      parameters:\n        - name: name\n          in: query\n          description: json as request body\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: list response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleGroup'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /user/role/group/{id}:\n    delete:\n      summary: Deletes a group policy by ID\n      description: deletes a single group policy based on the ID supplied\n      operationId: deleteGroupPolicy\n      parameters:\n        - name: id\n          in: path\n          description: ID of group policy\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: group deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  schemas:\n    RoleGroup:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n          description: Unique id of role group\n        name:\n          type: string\n          description: Unique name of group\n        description:\n          type: string\n          description: description\n        roleFilters:\n          type: array\n          items:\n            $ref: '#/components/schemas/roleFilter'\n          description: role filters objects\n\n\n    roleFilter:\n      type: object\n      required:\n        - action\n      properties:\n        entity:\n          type: string\n          description: global entity name, i.e chart-group, git, docker, cluster etc. if this key is present than field team, application and environment are ignored.\n          enum:\n            - chart-group\n            - docker\n            - git\n            - cluster\n            - notification\n        team:\n          type: string\n          description: team name\n        entityName:\n          type: string\n          description: global entity name item name, i.e chart-group (\"abc\"), git(\"devtron-gt\") etc.\n        environment:\n          type: string\n          description: comma saperated environments names.\n        action:\n          type: string\n          description: action is type of role, i.e manager, admin, trigger, view, etc.\n        accessType:\n          type: string\n          enum: [\"\", \"helm-app\"]\n          description: accessType difine permission type dawf=devtron app work flow, helm-app=helm app work flow. based on this flag data categoriesed into devtron and helm permission tabs in user auth role group section.\n\n\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Error code\n        message:\n          type: string\n          description: Error message",
			"canonicalURL": "/github.com/devtron-labs/devtron@a2f8a0105207da71b443f423300906b7c45321bf/-/blob/specs/group_policy.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/devtron-labs/devtron/blob/a2f8a0105207da71b443f423300906b7c45321bf/specs/group_policy.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/user/role/group\": put: requestBody: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: schema format mismatch: int64 and "
}