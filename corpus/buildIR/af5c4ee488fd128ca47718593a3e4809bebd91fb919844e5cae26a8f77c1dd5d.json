{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "devicebrokervalue-openapiv3.yaml",
			"size": 0,
			"path": "swagger/internal/devicebrokervalue-openapiv3.yaml",
			"byteSize": 62830,
			"content": "openapi: 3.0.1\ninfo:\n  title: Device, Broker and Value Mgmt API\n  version: '1.0'\nservers:\n  - url: https://iotdirectory.snap4city.org/api\n    variables:\n      snap4city:\n        default: snap4city\npaths:\n  /device.php:\n    summary: Device Management\n    get:\n      tags: [Device]\n      summary: Insert, update, delete, retrieve devices and device information.\n      \n      description: |\n        This API is for managing the IoT devices. It can be leveraged for inserting, updating, deleting, and retrieving information about a device of interest. \n        \n        For any APIs an Authorization __token__ in the Bearer format in the HTTP Header has to be specified, depending on the choosen scenario (see \"nodered\" params below).\n        \n        The __action__ input parameter indicates which operation has to be performed:\n        \n        * __Insert__ - This API is intended for inserting a new device in the Iot-Directory. The user has to specify the required parameters for inserting a device. The status of the operation is returned. This operation also provides the registration in the Knowledge Base. This API provides also the  registration in the specified context broker (when the context broker requires a specific registration).  \n        \n        * __Update__ - This API is intended for updating a device in the Iot-Directory. The user has to specify the required parameters for updating a device. The status of the operation is returned. This operation also provides the updating in the Knowledge base and the updating in the specified context broker.\n        \n        * __Delete__ - This API is intended for deleting a device from the Iot-Directory. The user has to specify the required parameters for deleting a device. The status of the operation is returned. This operation also provides the deletion from the Knowledge base and the deletion from corresponding context broker.\n        \n        * __Get all device__ - This API is intended for retrieving all device from the Iot-Directory. The status of the operation is returned together with the requested data.\n        \n        * __Get device attributes__ - This API is intended for retrieving all the values associated with devices from the Iot-Directory. The user has to specify the required parameters for retrieving all the attributes. The status of the operation is returned together with the requested data.\n        \n        * __Get device__ - This API is intended for retrieving all available information about the specified Device. The status of the operation is returned together with the requested data.\n        \n        * __Download__ - This API is intended for retrieving the private key / certificate of a Device created with Authentication factor. The status of the operation is returned together with the requested data.\n\n      parameters:\n        - name: action\n          in: query\n          description: |\n          \n            The operation to be performed.\n            \n            _Required for actions:_ insert, update, delete, get_device_attributes.\n          required: true\n          schema:\n            type: string\n            enum: [insert,update,delete,get_all_device,get_device_attributes,get_param_values]\n          example: insert\n        - name: nodered\n          in: query\n          description: If this parameter is present (it doesn't matter actually the passed value), the passed Authorization token has to be considered as an AccessToken, otherwise has to be considered as an RefreshToken\n          schema:\n            type: string\n          example: \u003cany-value\u003e\n        - name: id\n          in: query\n          description: |\n          \n            Unique identifier for the device (in the specified context broker). Has to be conformant to regex: /[^a-zA-Z0-9_-]/ (if the device is imported from external source the character : is supported)\n            \n            _Required for actions:_ insert, update, delete, get_device_attribute, get_device, download.\n            \n          required: true\n          schema: \n            type: string\n          example: provaMM7777\n        - name: type\n          in: query\n          description: |\n          \n            The type of the device (e.g. Thermometer, TrainPass, Citylamp, fan). It cannot be modified in update.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n          example: Thermometer\n        - name: contextbroker\n          in: query\n          description: |\n            \n            Name of the context broker that handles the device. Has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Required for actions:_ insert, update, delete, get_device_attribute, get_device, download.\n            \n          required: true\n          schema:\n            type: string\n          example: mqttUNIFI\n        - name: gb_old_cb\n          in: query\n          description: |\n            \n            Name of the OLD context broker in case of upated.\n            \n            _Required for actions:_ update.\n            \n          required: true\n          schema:\n            type: string\n          example: mqttUNIFI          \n        - name: kind\n          in: query\n          description: |\n          \n            It specifies if the value is a Sensor or an Actuator.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [sensor,actuator]\n          example: sensor\n        - name: format\n          in: query\n          description: |\n            \n            Format of the value: Csv, xml, JSON.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [csv,xml,json]\n          example: csv\n        - name: latitude\n          in: query\n          description: |\n            \n            Latitude coordinate of the device location.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema: \n            type: number\n            format: float\n            maximum: 90\n            minimum: -90\n          example: \n            43.769562\n        - name: longitude\n          in: query\n          description: |\n            \n            Longitude coordinate of the device location.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: number\n            format: float\n            maximum: 180\n            minimum: -180\n          example: \n            11.255814   \n        - name: frequency\n          in: query\n          description: |\n          \n            Frequency at which it produces observations, in seconds.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: integer\n            format: int32\n          example: \n            60            \n        - name: attributes\n          in: query\n          description: |\n          \n            A list of JSON objects representing the values generated by a device for each observation. The value_name has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: array\n            minItems: 1\n            items:\n              $ref: '#/components/schemas/attribute'\n        - name: deleteattributes\n          in: query\n          description: |\n            A list of JSON objects representing the values removed by a device. (when available otherwise string \"[]\"). The value_name has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Used in actions:_ update.\n            \n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/attribute'\n        - name: newattributes\n          in: query\n          description: |\n            A list of JSON objects representing the values added to a device. (when available otherwise string \"[]\"). The value_name has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Used in actions:_ update.\n            \n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/attribute'            \n        - name: mac\n          in: query\n          description: |\n            \n            Mac address of the device (when available otherwise empty string).\n            \n            _Used in actions:_ insert, update.\n            \n          required: false\n          schema:\n            type: string\n          example: 00-14-22-01-23-45\n        - name: producer\n          in: query\n          description: |\n          \n            Device producer (when available otherwise empty string).\n            \n            _Used in actions:_ insert, update.\n            \n          required: false\n          schema:\n            type: string\n          example: Arduino\n        - name: model\n          in: query\n          description: |\n          \n            Device model (when available otherwise string \"custom\"). Has to be conformant to regex: /[^a-zA-Z0-9_-]/ and can include teh space character\n            \n            _Used in actions:_ insert, update.\n            \n          required: false\n          schema:\n            type: string\n          example: TMP36\n        - name: k1\n          in: query\n          description: |\n            \n            It specify the first part of the secret in case the device is of a protected Model (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            ab68e819-74fb-46c1-906c-2e22ea3ca537\n        - name: k2\n          in: query\n          description: |\n            \n            It specify the second part of the secret in case the device is of a protected Model (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            ab68e819-74fb-46c1-906c-2e22ea3ca537            \n        - name: visibility\n          in: query\n          description: |\n            \n            __DEPRECATED__ It specify internally in the Iot-Directory if the IOT Device is Public or Private. (when available otherwise string \"private\")\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n            enum: [public,private]\n          example:\n            public\n        - name: shouldbeRegistered\n          in: query\n          description: |\n            \n            If this parameter is present (it doesn't matter actually the passed value) the device should be registered in KB (when available otherwise string \"yes\")\n            \n            Used in actions:_ insert.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            \u003cany-value\u003e\n        - name: service\n          in: query\n          description: |\n            \n            In case of context broker Multi-tenancy, it specifies the name of the Tenant to be used (when available otherwise empty string)\n            \n            Used in actions:_ insert, update, delete, get_device_attributes, get_device.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            House\n        - name: servicePath\n          in: query\n          description: |\n            \n            In case of context broker Multi-tenancy, it specifies the path to be used (when available otherwise empty string)\n            \n            Used in actions:_ insert, update, delete, get_device_attributes, get_device.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            /Floor1\n        - name: subnature\n          in: query\n          description: |\n            \n            KB Classification of the device (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            Beach_resort    \n            \n        - name: static_attributes\n          in: query\n          description: |\n            \n            A list of JSON objects representing the Static attributes of the device (when available otherwise  string \"[]\")\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            [[\"http://schema.org/addressLocality\",\"Firenze\"]]     \n            \n        - name: edgegateway_type\n          in: query\n          description: |\n            \n            __DEPRECATED__ Type of edge device (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            N/A          \n        - name: edgegateway_uri\n          in: query\n          description: |\n            \n            __DEPRECATED__ URL of edge device (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            N/A    \n        - name: length\n          in: query\n          description: |\n            \n            How many entries to return (when available otherwise string \"-1\")\n            \n            Used in actions:_ get_all_device.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            10           \n        - name: start\n          in: query\n          description: |\n            \n            Start point from entries to return (when available otherwise string \"1\")\n            \n            Used in actions:_ get_all_device.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1         \n        - name: draw\n          in: query\n          description: |\n            \n            Draw point from entries to return (when available otherwise string \"1\")\n            \n            Used in actions:_ get_all_device.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1       \n        - name: columns\n          in: query\n          description: |\n            \n            Array about the columns from entries to return (when available otherwise empty array)\n            \n            Used in actions:_ get_all_device.\n            \n          required: false\n          schema: \n            type: string\n        - name: filename\n          in: query\n          description: |\n            \n            Filename of the file to download\n            \n            Used in actions:_ download.\n            \n          required: false\n          schema: \n            type: string            \n          example: \n            \"/private/prova-modello2-cert-key.pem /certsdb/prova-modello2-cert-crt.pem\"\n      responses:\n        200:\n          $ref: '#/components/responses/device'\n  /model.php:\n    summary: Model Management\n    get:\n      tags: [Model]\n      summary: Insert, update, delete, retrieve models and model information.\n      \n      description: |\n        This API is for managing the IoT models. It can be leveraged for inserting, updating, deleting, and retrieving information about a model of interest. \n        \n        For any APIs an Authorization __token__ in the Bearer format in the HTTP Header has to be specified, depending on the choosen scenario (see \"nodered\" params below).\n        \n        The __action__ input parameter indicates which operation has to be performed:\n        \n        * __Insert__ - This API is intended for inserting a new model in the Iot-Directory. The user has to specify the required parameters for inserting a model. The status of the operation is returned.  \n        \n        * __Update__ - This API is intended for updating a model in the Iot-Directory. The user has to specify the required parameters for updating a model. The status of the operation is returned. \n        \n        * __Delete__ - This API is intended for deleting a model from the Iot-Directory. The user has to specify the required parameters for deleting a model. The status of the operation is returned. \n        \n        * __Get all models__ - This API is intended for retrieving all models from the Iot-Directory. The status of the operation is returned together with the requested data.\n        \n        * __Get value attributes__ - This API is intended for retrieving all the values associated with model from the Iot-Directory. The user has to specify the required parameters for retrieving all the attributes. The status of the operation is returned together with the requested data.\n        \n        * __Get model__ - This API is intended for retrieving all available information about the specified model. The status of the operation is returned together with the requested data.\n        \n        * __Get all models DataTable__ - DEPRECATED (use __Get all models__ instead) This API is intended for retrieving all models from the Iot-Directory in a paginated way. The status of the operation is returned together with the requested data.\n\n      parameters:\n        - name: action\n          in: query\n          description: |\n          \n            The operation to be performed.\n            \n            _Required for actions:_ insert, update, delete, get_model, get_value_attributes, get_all_models, get_all_models_DataTable.\n          required: true\n          schema:\n            type: string\n            enum: [insert, update, delete, get_model, get_value_attributes, get_all_models, get_all_models_DataTable]\n          example: insert\n        - name: nodered\n          in: query\n          description: If this parameter is present (it doesn't matter actually the passed value), the passed Authorization token has to be considered as an AccessToken, otherwise has to be considered as an RefreshToken\n          schema:\n            type: string\n          example: \u003cany-value\u003e\n        - name: name\n          in: query\n          description: |\n          \n            Unique name for the model. \n            \n            _Required for actions:_  insert, update, get_model.\n            \n          required: true\n          schema: \n            type: string\n          example: Model Thermo\n        - name: description\n          in: query\n          description: |\n          \n            Description for the model. \n            \n            _Required for actions:_  insert, update.\n            \n          required: true\n          schema: \n            type: string\n          example: Thermo description model\n        - name: id\n          in: query\n          description: |\n          \n            Unique identifier for the model. Has to be conformant to regex: /[^a-zA-Z0-9_-]/ \n            \n            _Required for actions:_  update, delete, get_value_attribute.\n            \n          required: true\n          schema: \n            type: string\n          example: 100\n        - name: type\n          in: query\n          description: |\n          \n            The type of the model (e.g. Thermometer, TrainPass, Citylamp, fan).\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n          example: Thermometer\n        - name: contextbroker\n          in: query\n          description: |\n            \n            Name of the context broker that handles the device. Has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n          example: mqttUNIFI\n        - name: kind\n          in: query\n          description: |\n          \n            It specifies if the value is a Sensor or an Actuator.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [sensor,actuator]\n          example: sensor\n        - name: format\n          in: query\n          description: |\n            \n            Format of the value: Csv, xml, JSON.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [csv,xml,json]\n          example: csv\n        - name: frequency\n          in: query\n          description: |\n          \n            Frequency at which it produces observations, in seconds.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: integer\n            format: int32\n          example: \n            60           \n        - name: kgenerator\n          in: query\n          description: |\n          \n            Type of autehntication.\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [normal, special, authenticated]\n          example: \n            normal       \n        - name: hc\n          in: query\n          description: |\n          \n            DEPRECATED (use info in sensor value) Healthiness criteria \n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n            enum: [refresh_rate, different_values, within_bounds]\n          example: \n            refresh_rate        \n        - name: hv\n          in: query\n          description: |\n          \n            DEPRECATED (use info in sensor value) Healthiness value\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n          example: \n            300                \n        - name: attributes\n          in: query\n          description: |\n          \n            A list of JSON objects representing the values generated by a device for each observation. The value_name has to be conformant to regex: /[^a-zA-Z0-9_-]/\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: array\n            minItems: 1\n            items:\n              $ref: '#/components/schemas/attribute'\n        - name: producer\n          in: query\n          description: |\n          \n            Device producer (when available otherwise empty string). Here is required, meanwhile in device is not needed\n            \n            _Used in actions:_ insert, update.\n            \n          required: true\n          schema:\n            type: string\n          example: Arduino\n        - name: service\n          in: query\n          description: |\n            \n            In case of context broker Multi-tenancy, it specifies the name of the Tenant to be used (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            House\n        - name: servicePath\n          in: query\n          description: |\n            \n            In case of context broker Multi-tenancy, it specifies the path to be used (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            /Floor1\n        - name: subnature\n          in: query\n          description: |\n            \n            KB Classification of the device (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            Beach_resort    \n            \n        - name: static_attributes\n          in: query\n          description: |\n            \n            A list of JSON objects representing the Static attributes of the device (when available otherwise  string \"[]\")\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            [[\"http://schema.org/addressLocality\",\"Firenze\"]]     \n            \n        - name: edgegateway_type\n          in: query\n          description: |\n            \n            __DEPRECATED__ Type of edge device (when available otherwise empty string)\n            \n            Used in actions:_ insert, update.\n            \n          required: false\n          schema: \n            type: string\n          example:\n            N/A          \n        - name: length\n          in: query\n          description: |\n            \n            How many entries to return (when available otherwise string \"-1\") DEPRECATED (use Get all models instead)\n            \n            Used in actions:_ get_all_models_DataTable.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            10           \n        - name: start\n          in: query\n          description: |\n            \n            Start point from entries to return (when available otherwise string \"1\") DEPRECATED (use Get all models instead)\n            \n            Used in actions:_ get_all_models_DataTable.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1         \n        - name: draw\n          in: query\n          description: |\n            \n            Draw point from entries to return (when available otherwise string \"1\") DEPRECATED (use Get all models instead)\n            \n            Used in actions:_ get_all_models_DataTable.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1       \n        - name: columns\n          in: query\n          description: |\n            \n            Array about the columns from entries to return (when available otherwise empty array) DEPRECATED (use Get all models instead)\n            \n            Used in actions:_ get_all_models_DataTable.\n            \n          required: false\n          schema: \n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/device'          \n  /contextbroker.php:\n    get:\n      tags: [Broker]\n      summary: Insert, update, delete, retrieve context brokers and context broker information\n      \n      description: |\n        This API is for the management of the context brokers. It allows to insert, update, delete, get the full listing of the brokers. The __action__ input parameter indicates what operation has to be performed:\n        \n        * __Insert__ - This API is intended for inserting a new Context Broker in the Iot-Directory. The user has to specify the required parameters for inserting the Context Broker. The status of the operation is returned.\n        \n        * __Update__ - This API is intended for updating a Context Broker in the Iot-Directory. The user has to specify the required parameters for updating the Context Broker. The status of the operation is returned. \n        \n        * __Delete__ - This API is intended for deleting a Context Broker from the Iot-Directory. The user has to specify the required parameters for deleting the Context Broker. The status of the operation is returned. \n        \n        * __Get all Contextbroker__ - This API is intended for retrieving all Context Brokers from the Iot-Directory. The user has to specify no parameters. The status of the operation is returned, together with the requested data.\n        \n        * __Get services by cb name__ - This API is intended for retrieving Context Brokers services information in specific case of a context broker supporting NGSI with multitenancy. The user has to specify the required parameters. The status of the operation is returned, together with the requested data.\n        \n      parameters:\n        - name: action\n          in: query\n          description: The operation to be performed.\n          required: true\n          schema: \n            type: string\n            enum: [insert, update, delete, get_all_contextbroker, get_services_by_cb_name]\n          example: insert\n        - name: nodered\n          in: query\n          description: If this parameter is present (it doesn't matter actually the passed value), the passed Authorization token has to be considered as an AccessToken, otherwise has to be considered as an RefreshToken\n          schema:\n            type: string\n          example: \u003cany-value\u003e          \n        - name: name\n          in: query\n          description: |\n            Name of the Context Broker that handles different devices. It is a unique identifier.\n            \n            _Required for actions:_ insert, update, delete, get_services_by_cb_name.\n            \n          required: true\n          schema: \n            type: string\n          example: rabbitUNIMI\n        - name: kind\n          in: query\n          description: |\n            Kind of the Context Broker. It can be an Internal or External\n            \n            _Required for actions:_ insert, update.\n            \n          required: true\n          schema: \n            type: string\n            enum: [internal, external]\n          example: internal  \n        - name: ip\n          in: query\n          description: |\n            The Internet Protocol (IP) address of the Context Broker.\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema: \n            type: string\n          example: 159.149.129.184\n        - name: port\n          in: query\n          description: |\n            The port number of the Context Broker.\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema:\n            type: integer\n            format: int32\n          example: 1026\n        - name: protocol\n          in: query\n          description: |\n            The type of protocol supported by this Context Broker.\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n            enum: [amqp, coap, mqtt, ngsi, ngsi w/MultiService, sigfox]\n          example: ngsi         \n        - name: version\n          in: query\n          description: |\n            DEPRECATED The version of protocol supported by this Context Broker.\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n          example: v1           \n        - name: latitude\n          in: query\n          description: |\n            Latitude coordinate of the Context Broker location (when available, otherwise an empty string).\n            \n            _Used in actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n          example: 43.769562\n        - name: longitude\n          in: query\n          description: |\n            Longitude coordinate of the Context Broker location (when available, otherwise an empty string).\n            \n            _Used in actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n          example: 11.255814\n        - name: login\n          in: query\n          description: |\n            Login name for authenticating to the Context Broker for Internal scenario (when available, otherwise an empty string).\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: prova\n        - name: password\n          in: query\n          description: |\n            Login password for authenticating to the Context Broker for Internal scenario  (when available, otherwise an empty string).\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: prova25\n        - name: sha\n          in: query\n          description: |\n            Sha of the certificate representing the Context Broker.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: efac28bd29b76c6fa9ba74efd937cd06ae992c8af23625a21a0471ff14800fed\n        - name: accesslink\n          in: query\n          description: |\n            external accesslink to contact the Context Broker.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: brokername.snap4city.org\n        - name: accessport\n          in: query\n          description: |\n            external accessport to contact the Context Broker.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: 80\n        - name: path\n          in: query\n          description: |\n            path to contact the Context Broker.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: /v2/entities\n        - name: visibility\n          in: query\n          description: |\n            DEPRECATED visibility to the Context Broker.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: private\n        - name: services\n          in: query\n          description: |\n            For Context Broker supporting ngsi with Multitenancy specify the list of available services.\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: House          \n        - name: urlnificallback\n          in: query\n          description: |\n            For Context Broker supporting ngsi, if specified, it subsbibe for callback\n            \n            _Used in actions:_ insert, update.\n          required: false\n          schema: \n            type: string\n          example: http://192.168.1.1:5577            \n      responses:\n        200:\n          $ref: '#/components/responses/broker'\n      \n\n  /value.php:\n    summary: Values Management\n    get:\n      tags: [Value]\n      summary: Insert, update, delete, retrieve values and value information.\n      description: |\n        This API is for the management of the event values. It allows to insert, update, delete, get the full listing of the event values, and check value informations. The __action__ input parameter indicates what operation has to be performed:\n        \n        * __Insert__ - This API is intended for inserting a new value with a device already registered in the Iot-Directory. The user has to specify the required parameters for inserting a value. The status of the operation is returned. This operation also provides the registration in the Knowledge Base. Finally the value is also reported in the structure of the device registered in the Context Broker (when this is required by the Context Broker).\n        \n        * __Update__ - This API is intended for updating a value with a device already registered in the Iot-Directory. The user has to specify the required parameters for updating a value. The status of the operation is returned. This operation also provides the updating on the Knowledge Base. Finally the value is also reported in the structure of the device registered in the Context Broker (when this is required by the Context Broker).\n        \n        * __Delete__ - This API is intended for deleting a value from the Iot-Directory. The user has to specify the required parameters for deleting a value. The status of the operation is returned. This operation also provides the deletion from the Knowledge Base.  \n        \n        * __Get all event values__ - This API is intended for retrieving all values from the Iot-Directory. The user has to specify no parameters. The status of the operation is returned, together with the requested data. \n        \n        * __Check if last value__ - This API is intended for retrieving the number of the value of a specific device. The user has to specify the required parameters. The status of the operation is returned.\n      parameters:\n        - name: action\n          in: query\n          description: The operation to be performed.\n          required: true\n          schema:\n            type: string\n            enum: [insert,update,delete,get_all_event_value,check_if_last_value]\n          example: insert\n        - name: nodered\n          in: query\n          description: If this parameter is present (it doesn't matter actually the passed value), the passed Authorization token has to be considered as an AccessToken, otherwise has to be considered as an RefreshToken\n          schema:\n            type: string\n          example: \u003cany-value\u003e             \n        - name: device\n          in: query\n          description: |\n            The device unique identifier.\n            \n            _Required for actions:_ insert, update, delete, check_if_last_value. \n          required: true\n          schema: \n            type: string\n          example: provaMM77\n        - name: contextbroker\n          in: query\n          description: |\n            Name of the Context Broker that handles the device.\n            \n            _Required for actions:_ insert, update, delete, check_if_last_value. \n          required: true\n          schema: \n            type: string\n          example: rabbitUNIMI\n        - name: value_name\n          in: query\n          description: |\n            Name of the value (and unique in the specified device and context broker).\n            \n            _Required for actions:_ insert, update, delete. \n          required: false\n          schema: \n            type: string\n          example: ProvaVal\n        - name: data_type\n          in: query\n          description: |\n            Data type of the value (e.g. integer, float, string, boolean, and so on).\n            \n            _Required for actions:_ insert, update. \n            \n          required: true\n          schema: \n            type: string\n          example: binary\n        - name: value_type\n          in: query\n          description: |\n            Type of the value (e.g. Temperature, humidity, light, CO_concentration, and so on).\n            \n            _Required for actions:_ insert, update. \n          required: true\n          schema: \n            type: string\n          example: actuator_canceller\n        - name: value_unit\n          in: query\n          description: |\n            Unit of measure of the value (eg. oC,  %, lux, ppm, and so on).\n            \n            _Required for actions:_ insert, update. \n          required: true\n          schema: \n            type: string\n          example: lux\n        - name: editable\n          in: query\n          description: |\n            It specifies if the measure can be only read (false) or a value can be assigned (true). \n            \n            _Required for actions:_ insert, update, delete.\n          required: true\n          schema:\n            type: boolean\n          example: true\n        - name: healthiness_criteria\n          in: query\n          description: |\n            The type of check to perform on values (value_refresh_rate, different_values or value_bounds).\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n            enum: [value_refresh_rate,different_values,value_bounds]\n          example: value_refresh_rate \n        - name: healthiness_value\n          in: query\n          description: |\n            Healthiness value related to the healthiness criteria. The interpretetation varies depending of the adopted healthiness criteria: it could be the frequence of data acquisition (e.g. 300 seconds), the number of last values that have to have at least two different values, or the min and max allowed values.\n            \n            _Required for actions:_ insert, update.\n          required: true\n          schema:\n            type: string\n          example: 100\n        - name: length\n          in: query\n          description: |\n            \n            How many entries to return (when available otherwise string \"-1\")\n            \n            Used in actions:_ get_all_event_value.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            10           \n        - name: start\n          in: query\n          description: |\n            \n            Start point from entries to return (when available otherwise string \"1\")\n            \n            Used in actions:_ get_all_event_value.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1         \n        - name: draw\n          in: query\n          description: |\n            \n            Draw point from entries to return (when available otherwise string \"1\")\n            \n            Used in actions:_ get_all_event_value.\n            \n          required: false\n          schema: \n            type: integer\n          example:\n            1       \n        - name: columns\n          in: query\n          description: |\n            \n            Array about the columns from entries to return (when available otherwise empty array)\n            \n            Used in actions:_ get_all_event_value.\n            \n          required: false\n          schema: \n            type: string          \n      responses:\n        200:\n          $ref: '#/components/responses/value'          \ncomponents:  \n  securitySchemes:\n    accessToken:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    attribute:\n      description: A type of detection that a device is capable to perform.\n      type: object\n      required:\n        - data_type\n        - value_unit\n        - value_type\n        - healthiness_criteria\n        - helthiness_value\n      properties:\n        value_name:\n          description: Name of the value.                \n          type: string\n          example: a\n        data_type:\n          description: Basic type of the value (e.g. string, integer).                \n          type: string\n          example: binary\n        value_type:\n          description: A semantic description of the value.                  \n          type: string\n          example: actuator_canceller\n        editable:\n          description: If the value can be only read or its value can be also updated.                \n          type: string\n          example: 0\n        value_unit:\n          description: Unit of measure of the value.                  \n          type: string\n          example: A\n        healthiness_criteria:\n          description: How the healthy status of the device should be determined.                  \n          type: string\n          enum: [refresh_rate,different_values,value_bounds]\n          example: refresh_rate\n        healthiness_value:\n          description: The corresponding value.                  \n          type: string\n          example: 3600      \n  responses:\n    device:\n      description: JSON document where the status of the operation and the possible retrieved data can be found.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - status\n              - visibility\n              - active\n            properties:\n              status:\n                description: |\n                  The mandatory status of the operation: Ok, or Ko.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n                enum: [ok,ko]\n                example: ok\n              msg:\n                description: |\n                  A message related to the execution of the operation.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n                \n              visibility:\n                description: |\n                  The visibility reported in input: public, or private.\n                  \n                  _Returned by actions:_ insert, update.\n                  \n                type: string\n                enum: [public,private]\n                example: public\n              active:\n                description: |\n                  Whether the device has been properly inserted in the Knowledge Base: true, or false.\n                  \n                  _Returned by actions:_ insert, update.\n                  \n                type: boolean\n                example: true\n              content:\n                oneOf:\n                  - description: |\n                      A JSON list where information about the devices can be found.\n                  \n                      _Returned by actions:_ get_all_device.\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        contextBroker:\n                          type: string\n                          example: orionUNIMI\n                        device:\n                          type: string\n                          example: ARDUINO_ST_4201\n                        uri:\n                          type: string\n                          format: uri\n                          example: http://www.disit.org/km4city/resource/iot/orionUNIMI/ARDUINO_ST_4201\n                        devicetype:\n                          type: string\n                          example: Temperature\n                        kind:\n                          type: string\n                          enum: [sensor,actuator]\n                        status1:\n                          type: string\n                          example: active\n                        macaddress:\n                          type: string\n                          nullable: true\n                          example: 00-14-22-01-23-45\n                        model:\n                          type: string\n                          nullable: true\n                          example: ARDUINO_ST_4203\n                        producer:\n                          type: string\n                          nullable: true\n                          example: Arduino\n                        longitude:\n                          type: number\n                          format: float\n                          example: 9.214914\n                        latitude: \n                          type: number\n                          format: float\n                          example: 45.463701\n                        protocol:\n                          type: string\n                          enum: [mqtt,ngsi,amqp]\n                          example: mqtt\n                        format:\n                          type: string\n                          enum: [csv,xml,json]\n                          example: csv\n                        visibility:\n                          type: string\n                          enum: [public,private]\n                          example: public\n                        frequency:\n                          type: integer\n                          format: int32\n                          nullable: true\n                          example: 60\n                        created:\n                          type: string\n                          format: date-time\n                          example: 2018-03-12 15:21:00\n                  - description: |\n                      A JSON list where information about the device attributes can be found.\n                  \n                      _Returned by actions:_ get_device_attributes.\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        contextBroker:\n                          type: string\n                          example: orionUNIMI\n                        device:\n                          type: string\n                          example: ARDUINO_ST_4201\n                        value_name:\n                          type: string\n                          example: latitude\n                        data_type:\n                          type: string\n                          example: float\n                        value_type:\n                          type: string\n                          example: latitude\n                        editable:\n                          type: string\n                          example: 0\n                        value_unit:\n                          type: string\n                          example: A\n                        order:\n                          type: integer\n                          format: int32\n                          example: 1\n                        healthiness_criteria:\n                          type: string\n                          enum: [refresh_rate,different_values,value_bounds]\n                          example: refresh_rate\n                        healthiness_value:\n                          type: string\n                          example: 300\n              value_type:\n                description: |\n                  A JSON list containing the supported value types in the Knowledge Base.\n                  \n                  _Returned by actions:_ get_param_values.\n                type: array\n                items: \n                  type: string\n                  example: actuator_canceller  \n              data_type:\n                description: |\n                  A JSON list containing the supported data types in the Knowledge Base.\n                  \n                  _Returned by actions:_ get_param_values.\n                type: array\n                items:\n                  type: string\n                  example: binary\n                  \n              value_unit:\n                description: |\n                  A JSON list containing the supported value units in the Knowledge Base.\n                  \n                  _Returned by actions:_ get_param_values.\n                type: array\n                items: \n                  type: string\n                  example: A\n                  \n    broker:\n      description: JSON document where the status of the operation and the possible retrieved data can be found.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - status\n            properties:\n              status:\n                description: |\n                  The mandatory status of the operation: Ok, or Ko.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n                enum: [ok,ko]\n                example: ok\n              msg:\n                description: |\n                  A message related to the execution of the operation.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n              content:\n                oneOf:\n                  - description: |\n                      A list of the identified context brokers. \n                      \n                      _Returned by actions:_ get_all_contextbroker.\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        contextbroker:\n                          type: string\n                          example: mqttUNIFI\n                        protocol:\n                          type: string\n                          enum: [mqtt,amqp,ngsi]\n                          example: mqtt\n                        ip:\n                          type: string\n                          example: 192.168.1.10\n                        port:\n                          type: integer\n                          format: int32\n                          example: 1883\n                        uri:\n                          type: string\n                          nullable: true\n                          example: http://www.disit.org/km4city/resource/iot/mqttUNIFI\n                        login:\n                          type: string\n                          example: brokeruser\n                        password:\n                          type: string\n                          example: brokerpwd\n                        latitude:\n                          type: number\n                          format: float\n                          example: 43.7731\n                        longitude:\n                          type: number\n                          format: float\n                          example: 11.2560\n                        created:\n                          type: string\n                          format: date-time\n                          example: 2018-02-07 15:14:39\n                  - description: |\n                      A list of devices present on the server that can be accessed relying on the device name.\n                      \n                      _Returned by actions:_ get_config_data.\n                    type: object\n                    properties:\n                      additionalProperties:\n                        type: object\n                        properties:\n                          entityType:\n                            type: string\n                            example: Temperature\n                          kind:\n                            type: string\n                            enum: [sensor,actuator]\n                            example: sensor\n                          protocol:\n                            type: string\n                            enum: [ngsi,mqtt,amqp]\n                            example: ngsi\n                          longitude:\n                            type: number\n                            format: float\n                            example: 9.214914\n                          latitude:\n                            type: number\n                            format: float\n                            example: 45.463701\n                          contextBroker:\n                            type: string\n                            example: orionUNIMI\n                          name:\n                            type: string\n                            example: orionUNIMI\n                          type:\n                            type: string\n                            enum: [ngsi,mqtt,amqp]\n                            example: mqtt\n                          ip:\n                            type: string\n                            example: 159.149.129.184\n                          port:\n                            type: integer\n                            format: int32\n                            example: 1026\n                  - description: |\n                      A list of values associated with the devices present on the system.\n                      \n                      _Returned by actions:_ get_config_data_values.\n                      \n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        cb:\n                          type: string\n                          example: rabbitUNIMI\n                        device:\n                          type: string\n                          example: provaMM7779\n                        value_name:\n                          type: string\n                          example: a\n                        data_type:\n                          type: string\n                          example: binary\n                        value_type:\n                          type: string\n                          example: actuator_canceller\n                        editable:\n                          type: string\n                          example: 0\n                        value_unit:\n                          type: string\n                          example: A\n                        healthiness_criteria:\n                          type: string\n                          enum: [refresh_rate,different_values,value_bounds]\n                          example: refresh_rate\n                        longitude:\n                          type: number\n                          format: float\n                          example: 9.214914\n                        latitude:\n                          type: number\n                          format: float\n                          example: 45.463701\n                        protocol:\n                          type: string\n                          enum: [ngsi,mqtt,amqp]\n                          example: ngsi\n    value:\n      description: JSON document where the status of the operation and the possible retrieved data can be found.\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - status\n            properties:\n              status:\n                description: |\n                  The mandatory status of the operation: Ok, or Ko.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n                enum: [ok,ko]\n                example: ok\n              msg:\n                description: |\n                  A message related to the execution of the operation.\n                  \n                  _Returned by all actions._\n                  \n                type: string\n              content:\n                oneOf:\n                - description: |\n                    A list of values associated with devices of the system.\n                  \n                    _Returned by actions:_ get_all_event_value.\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      cb:\n                        type: string\n                        example: orionUNIMI\n                      device:\n                        type: string\n                        example: ARDUINO_ST_4201\n                      value_name:\n                        type: string\n                        example: latitude\n                      data_type:\n                        type: string\n                        example: float\n                      value_type:\n                        type: string\n                        example: latitude\n                      editable:\n                        type: string\n                        example: 0\n                      value_unit:\n                        type: string\n                        example: A\n                      healthiness_criteria:\n                        type: string\n                        enum: [refresh_rate,different_values,value_bounds]\n                        example: refresh_rate\n                      value_refresh_rate:\n                        type: integer\n                        format: int32\n                        example: 300\n                      different_values:\n                        type: integer\n                        format: int32\n                        nullable: true\n                        example: 10\n                      value_bounds:\n                        type: string\n                        nullable: true\n                        example: 10:20\n                      order: \n                        type: integer\n                        format: int32\n                        example: 1\n                      kind:\n                        type: string\n                        enum: [sensor,actuator]\n                        example: sensor\n                      latitude:\n                        type: number\n                        format: float\n                        example: 45.463701\n                      longitude:\n                        type: number\n                        format: float\n                        example: 9.214914\n                      status1:\n                        type: string\n                        example: active\n                      visibility:\n                        type: string\n                        enum: [public,private]\n                        example: public\n                - description: |\n                    The information associated with the specified value_name.\n                    \n                    _Returned by actions:_ get_event_value.\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      cb:\n                        type: string\n                        example: orionUNIMI\n                      device:\n                        type: string\n                        example: ARDUINO_ST_4201\n                      value_name:\n                        type: string\n                        example: latitude\n                      data_type:\n                        type: string\n                        example: float\n                      value_type:\n                        type: string\n                        example: latitude\n                      editable:\n                        type: string\n                        example: 0\n                      value_unit:\n                        type: string\n                        example: A\n                      healthiness_criteria:\n                        type: string\n                        enum: [refresh_rate,different_values,value_bounds]\n                        example: refresh_rate\n                      value_refresh_rate:\n                        type: integer\n                        format: int32\n                        example: 300\n                      different_values:\n                        type: integer\n                        format: int32\n                        nullable: true\n                        example: 10\n                      value_bounds:\n                        type: string\n                        nullable: true\n                        example: 10:20\n                      order: \n                        type: integer\n                        format: int32\n                        example: 1",
			"canonicalURL": "/github.com/disit/snap4city@7c61151c2308bea47000b91336102d1d9a7e1df5/-/blob/swagger/internal/devicebrokervalue-openapiv3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/7c61151c2308bea47000b91336102d1d9a7e1df5/swagger/internal/devicebrokervalue-openapiv3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/device.php\": get: parameters: \"attributes\": nested objects not allowed",
	"NotImplemented": [
		"discriminator inference"
	]
}