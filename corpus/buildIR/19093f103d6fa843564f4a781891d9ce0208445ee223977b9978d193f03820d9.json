{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/andmoredev/lambdaless-api"
		},
		"file": {
			"name": "products-openapi.yaml",
			"size": 0,
			"path": "products-openapi.yaml",
			"byteSize": 7030,
			"content": "openapi: 3.0.1\ninfo:\n  title:\n    Products API\n  version: 1.0.0\n\nservers:\n  - url: https://kkyi46yfn1.execute-api.us-east-1.amazonaws.com/Lambdaless\n\nsecurity:\n  - ApiKeyAuth: []\n\npaths:\n  /products:\n    get:\n      responses:\n        200:\n          description: The request succeded and results are in the response message.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/responses/Product\"\n\n      x-amazon-apigateway-integration:\n        httpMethod: POST\n        type: AWS\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan\" }\n        credentials: { \"Fn::GetAtt\": [ ProductsAPIRole, Arn ] }\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${tableName}\"\n                }\n              - { tableName: { Ref: ProductsTable } }\n        responses:\n          default:\n            statusCode: 200\n            responseTemplates:\n              application/json: '#set($inputRoot = $input.path(\"$\"))\n                          [\n                            #foreach($elem in $inputRoot.Items) {\n                              \"id\": \"$elem.pk.S\",\n                              \"name\": \"$elem.productname.S\"\n                            }#if($foreach.hasNext),#end\n                            #end\n                          ]'\n\n    post:\n      responses:\n        201:\n          $ref: \"#/components/responses/Created\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Product'\n      x-amazon-apigateway-integration:\n        httpMethod: POST\n        type: AWS\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem\" }\n        credentials: { \"Fn::GetAtt\": [ ProductsAPIRole, Arn ] }\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${tableName}\",\n                  \"Item\": {\n                    \"pk\": {\n                      \"S\": \"$context.requestId\"\n                    },\n                    \"productname\": {\n                      \"S\": \"$input.path(\"$.name\")\"\n                    }\n                  }\n                }\n              - { tableName: { Ref: ProductsTable } }\n        responses:\n          default:\n            statusCode: 201\n            responseTemplates:\n              application/json: '#set($inputRoot = $input.path(\"$\"))\n                {\n                    \"id\": \"$context.requestId\"\n                }'\n  /products/{productId}:\n    get:\n      parameters:\n        - name: \"productId\"\n          in: \"path\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: \"#/components/responses/Product\"\n      x-amazon-apigateway-integration:\n        httpMethod: POST\n        type: AWS\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem\" }\n        credentials: { \"Fn::GetAtt\": [ ProductsAPIRole, Arn ] }\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${tableName}\",\n                  \"Key\": {\n                          \"pk\": {\n                            \"S\": \"$input.params(\"productId\")\"\n                          }\n                        }\n                }\n              - { tableName: { Ref: ProductsTable } }\n        responses:\n          default:\n            statusCode: 200\n            responseTemplates:\n              application/json: '#set($inputRoot = $input.path(\"$\"))\n                {\n                    \"id\": \"$inputRoot.Item.pk.S\",\n                    \"name\": \"$inputRoot.Item.productname.S\"\n                }'\n\n    put:\n      parameters:\n        - name: \"productId\"\n          in: \"path\"\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The product was updated\n      x-amazon-apigateway-integration:\n        httpMethod: POST\n        type: AWS\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem\" }\n        credentials: { \"Fn::GetAtt\": [ ProductsAPIRole, Arn ] }\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${tableName}\",\n                  \"Key\": {\n                          \"pk\": {\n                            \"S\": \"$input.params(\"productId\")\"\n                          }\n                        },\n                  \"UpdateExpression\": \"SET productname = :name\",\n                  \"ExpressionAttributeValues\": {\n                    \":name\":  {\n                                \"S\": \"$input.path(\"$.name\")\"\n                              }\n                  }\n                }\n              - { tableName: { Ref: ProductsTable } }\n        responses:\n          default:\n            statusCode: 204\n\n    delete:\n      parameters:\n      - name: \"productId\"\n        in: \"path\"\n        required: true\n        schema:\n            type: string\n      responses:\n        204:\n          description: The product was deleted\n      x-amazon-apigateway-integration:\n        credentials: { \"Fn::GetAtt\": [ ProductsAPIRole, Arn ] }\n        uri: { \"Fn::Sub\": \"arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem\" }\n        requestTemplates:\n          application/json:\n            Fn::Sub:\n              - |-\n                {\n                  \"TableName\": \"${tableName}\",\n                    \"Key\": {\n                      \"pk\": {\n                        \"S\": \"$input.params(\"productId\")\"\n                      }\n                    },\n                  \"ReturnValues\": \"ALL_OLD\"\n                }\n              - { tableName: { Ref: ProductsTable } }\n        responses:\n          default:\n            statusCode: 204\n        passthroughBehavior: \"when_no_match\"\n        httpMethod: \"POST\"\n        type: \"aws\"\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n  schemas:\n    Product:\n      type: object\n      description: Product\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n  responses:\n    Created: #201\n      description: The request succeeded and created a new resource.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              id:\n                type: string\n            required:\n              - id\n    Empty:\n      description: Empty Schema\n      content:\n        application/json:\n          schema:\n            type: object\n\n    Product:\n      description: Product\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              id:\n                type: string\n              name:\n                type: string"
		}
	},
	"Error": "buildIR: make ir: anonymous type name conflict: \"Product\""
}