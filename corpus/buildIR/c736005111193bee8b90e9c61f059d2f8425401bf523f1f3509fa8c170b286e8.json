{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openclarity/apiclarity"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/pkg/modules/internal/fuzzer/restapi/openapi.yaml",
			"byteSize": 23445,
			"content": "openapi: 3.0.3\ninfo:\n  title: APIClarity PluginFuzzer\n  version: 0.0.1\n  description: APIClarity PluginFuzzer API\nservers:\n  - url: '/'\n    description: Override base path for all operations\ntags:\n  - name: fuzzer\n    description: Everything about Fuzzer\n  - name: local-fuzzer\n    description: Methods used by APIClarity UI\n    \npaths:\n\n  /version:\n    get:\n      operationId: getVersion\n      summary: Get the version of this Module\n      description: Get the version of this Module\n      responses:\n        '200':\n          description: Version of the Module\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n                \n  /state:\n    get:\n      operationId: getState\n      summary: Get the current running state of this module\n      description: Get useful informations about the current running state of the testing module\n      responses:\n        '200':\n          description: Current testing module running state\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestingModuleState'\n                \n  /fuzz/{apiID}/start:\n    post:\n      operationId: StartTest\n      summary: Start a test for an API\n      description: Start a test for an API\n      tags:\n        - fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestInput'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestHandle'\n        '400':\n          description: Status Bad Request\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '500':\n          description: Internal Error\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n                \n  /fuzz/{apiID}/stop:\n    post:\n      operationId: StopTest\n      summary: Stop (cancel) a running test for an API\n      description: Stop (cancel) a running test for an API\n      tags:\n        - fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      responses:\n        '204':\n          description: Successful Response\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '400':\n          description: Status Bad Request\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '500':\n          description: Internal Error\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n\n  /fuzz/{apiID}/progress:\n    get: \n      operationId: GetTestProgress\n      summary: Start a test for an API\n      description: Start a test for an API\n      tags:\n        - fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShortTestProgress'\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '500':\n          description: Internal Error\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n  \n  /fuzz/{apiID}/report:\n    get: \n      operationId: GetTestReport\n      summary: Start a test for an API\n      description: Start a test for an API\n      tags:\n        - fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShortTestReport'\n        '404':\n          description: Service not found\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n        '500':\n          description: Internal Error\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n  \n  /apiFindings/{apiID}:\n    get:\n      operationId: GetAPIFindings\n      summary: 'Get findings for an API and module'\n      description: 'Asks for findings of an APIClarity module, and API. Implemented by each module'\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        - $ref: '../../../../../../api3/common/openapi.yaml#/components/parameters/Sensitive'\n      responses:\n        '200':\n          description: 'An API Findings Bundle'\n          content:\n            application/json:\n              schema:\n                $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/APIFindings'\n        default:\n          description: 'Error response'\n          content:\n            'application/json':\n              schema:\n                $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/ApiResponse'\n\n  /updateStatus/{apiID}:\n    parameters:\n      - name: apiID\n        in: path\n        required: true\n        schema:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n    get:\n      operationId: GetUpdateStatus\n      summary: Retreive last update status for an API under fuzzing\n      description: Retreive last update status for an API under fuzzing\n      tags:\n        - local-fuzzer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FuzzingStatusAndReport'\n          description: Raw Finding Bundle\n    post: \n      operationId: PostUpdateStatus\n      summary: Update status for an API under fuzzing\n      description: Provide the Update status for an API under fuzzing\n      tags:\n        - local-fuzzer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FuzzingStatusAndReport'\n        required: true\n      responses:\n        '204':\n          description: Successful Response\n  \n  /tests/{apiID}:\n    get:\n      operationId: GetTests\n      summary: Retreieve the list of tests for an API\n      description: Retreive the list of tests for an API (without report)\n      tags:\n        - local-fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tests'\n          description: List of tests\n\n  /report/{apiID}/{timestamp}:\n    get:\n      operationId: GetReport\n      summary: Retreive a report for an API\n      description: Retreive a report for an API identified by its timestamp\n      tags:\n        - local-fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        - name: timestamp\n          in: path\n          description: Timestamp of the start of the test\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestWithReport'\n          description: List of tests\n\n  /report/{apiID}/{timestamp}/short:\n    get:\n      operationId: GetShortReportByTimestamp\n      summary: Retrieve a report for an API for a specific test\n      description: Retreive a report for an API identified by its timestamp\n      tags:\n        - local-fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        - name: timestamp\n          in: path\n          description: Timestamp of the start of the test\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShortTestReport'\n          description: List of tests\n\n  /annotatedspec/{apiID}:\n    get:\n      operationId: GetAnnotatedSpec\n      summary: Retreive the annotated spec for an API\n      description: Retreive the annotated spec for an API if any, 404 Not Found otherwise\n      tags:\n        - local-fuzzer\n      parameters:\n        - name: apiID\n          in: path\n          required: true\n          schema:\n            $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                description: 'spec in json format'\n                type: 'object'\n          description: List of tests\n        '404':\n          description: 'Spec not found'\n          content:\n            application/json:\n              schema:\n                description: 'error message'\n                type: 'string'\n  \ncomponents:\n  schemas: \n    TestHandle:\n      type: object\n      properties:\n        apiID:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        timestamp:\n          type: integer\n          format: int64\n\n    TestReportNotification:\n      allOf: \n      - $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/BaseNotification'\n      - $ref: '#/components/schemas/ShortTestReport'\n\n    TestProgressNotification:\n      allOf: \n      - $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/BaseNotification'\n      - $ref: '#/components/schemas/ShortTestProgress'\n  \n    AuthorizationTypeEnum:\n      description: An enumeration for the authorization type parameter.\n      enum:\n        - BASICAUTH\n        - APITOKEN\n        - BEARERTOKEN\n      title: AuthorizationType\n      type: string\n    \n    AuthorizationSchemeBase:\n      type: object\n      properties:\n        type: \n          $ref: '#/components/schemas/AuthorizationTypeEnum'\n      required:\n      - type\n      \n    BasicAuth:\n      allOf: \n        - $ref: '#/components/schemas/AuthorizationSchemeBase'\n        - type: object\n          properties:\n            username:\n              type: string\n            password:\n              type: string\n          required:\n            - username\n            - password \n    \n    ApiToken:\n      allOf: \n        - $ref: '#/components/schemas/AuthorizationSchemeBase'\n        - type: object\n          properties:\n            key:\n              type: string\n            value:\n              type: string\n          required:\n            - key\n            - value \n  \n    BearerToken:\n      allOf: \n        - $ref: '#/components/schemas/AuthorizationSchemeBase'\n        - type: object\n          properties:\n            token:\n              type: string\n          required:\n           - token\n\n    AuthorizationScheme:\n      oneOf:\n        - $ref: '#/components/schemas/BasicAuth'\n        - $ref: '#/components/schemas/ApiToken'\n        - $ref: '#/components/schemas/BearerToken'\n      discriminator:\n        propertyName: type\n        mapping:\n          BasicAuth: '#/components/schemas/BasicAuth'\n          ApiToken: '#/components/schemas/ApiToken'\n          BearerToken: '#/components/schemas/BearerToken'\n        \n    TestInputDepthEnum:\n      description: An enumeration for input depth parameter.\n      enum:\n        - QUICK\n        - DEFAULT\n        - DEEP\n      title: TestInputDepth\n      type: string\n        \n    TestInput:\n      type: object\n      description: \"contains all input parameters for a test\"\n      properties:\n        auth:\n          $ref: '#/components/schemas/AuthorizationScheme'\n        depth:\n          $ref: '#/components/schemas/TestInputDepthEnum'\n      required:\n       - depth\n\n    Version:\n      type: 'object'\n      required: [version]\n      properties:\n        version:\n          type: 'string'\n\n    TestingModuleState:\n      type: object\n      required: [version, APIsInCache]\n      properties:\n        version:\n          type: string\n        APIsInCache:\n          type: integer\n          \n    FuzzingStatusEnum:\n      description: An enumeration.\n      enum:\n        - DONE\n        - ERROR\n        - IN_PROGRESS\n      title: FuzzingStatus\n      type: string\n\n    RawFindingsSourceEnum:\n      description: An enumeration.\n      enum:\n        - BITSIGHT\n        - TALOS\n        - OPENDNS\n        - OAS_ANALYSER\n        - GRPC_ANALYZER\n        - OAS_TRACE_ANALYZER\n        - API_FUZZER\n      title: RawFindingsSource\n      type: string\n\n    ScoreExitStatusEnum:\n      description: An enumeration.\n      enum:\n        - SUCCESS\n        - NETWORK_FAILURE\n        - TOO_LONG\n        - PARSE_ERROR\n        - GENERIC_FAILURE\n      title: ScoreExitStatusEnum\n      type: string\n\n    FuzzingReportPath:\n      description: Current fuzzer report\n      properties:\n        result:\n          type: integer\n        uri:\n          type: string\n        verb:\n          type: string\n        payload:\n          type: string\n        response:\n          type: string\n      title: FuzzingReportPath\n      type: object\n    \n    FuzzingReportItem:\n      description: Current fuzzer report\n      properties:\n        name:\n          type: string\n        source:\n          type: string\n        status:\n          type: string\n        description:\n          type: string\n        testType:\n          type: string\n        paths:\n          items:\n            $ref: '#/components/schemas/FuzzingReportPath'\n          title: Paths\n          description: List of paths that has been fuzzed\n          type: array\n        findings:\n          items:\n            $ref: '#/components/schemas/RawFindings'\n          title: Paths\n          description: List of paths that has been fuzzed\n          type: array\n\n      title: FuzzingReportItem\n      type: object\n      \n    FuzzingStatusAndReport:\n      description: fuzzing status and reporting\n      properties:\n        status:\n          $ref: '#/components/schemas/FuzzingStatusEnum'\n        report:\n          additionalProperties:\n            $ref: '#/components/schemas/FuzzingReportItem'\n          title: Report\n          type: object\n          description: List of report item\n\n        progress:\n          type: integer\n      title: FuzzingStatusAndReport\n      type: object\n      required:\n        - status\n        - report\n        - progress\n\n    RawFindingsSeverity:\n      properties:\n        severity:\n          type: string\n\n    RawFindings:\n      properties:\n        namespace:\n          type: string\n        location:\n          type: array\n          items:\n            type: string\n          title: Paths location\n          description: location string token\n        type:\n          type: string\n        description:\n          type: string\n        request:\n          $ref: '#/components/schemas/RawFindingsSeverity'\n        additionalInfo:\n          type: string\n      title: RawFindings\n      type: object\n\n    RawFindingsBundle:\n      properties:\n        data:\n          description: Opaque data structure for the raw finding\n          title: Data\n          type: string\n        source:\n          $ref: '#/components/schemas/RawFindingsSourceEnum'\n        status:\n          $ref: '#/components/schemas/ScoreExitStatusEnum'\n          description: Exit status of the scoring process\n        status_message:\n          description: Message giving details about the exist status\n          title: Status Message\n          type: string\n        timestamp:\n          description: Raw finding timestamp format= date-time\n          title: Timestamp\n          type: string\n      required:\n        - status\n        - timestamp\n        - source\n        - data\n      title: RawFindingsBundle\n      type: object\n\n    Findings:\n      title: Findings\n      type: object\n      properties:\n        items:\n          title: Items\n          type: array\n          items:\n            $ref: '#/components/schemas/Finding'\n        total:\n          description: Nb of items, used for pagination\n          title: Total\n          type: integer\n\n    Finding:\n      title: Finding\n      type: object\n      properties:\n        name:\n          description: Name of the finding\n          title: Name\n          type: string\n        description:\n          description: description of the finding\n          title: Description\n          type: string\n        risk:\n          description: risk of the finding\n          title: Risk\n          type: string\n\n    Tests:\n      title: Tests\n      type: object\n      properties:\n        items:\n          title: Items\n          type: array\n          items:\n            $ref: '#/components/schemas/Test'\n        total:\n          description: Nb of items, used for pagination\n          title: Total\n          type: integer\n\n    Vulnerabilities:\n      description: risk of the finding\n      title: Risk\n      type: object\n      properties:\n        total:\n          description: Total of vuln\n          title: Total\n          type: integer\n        critical:\n          description: Total of vuln\n          title: Critical\n          type: integer\n        high:\n          description: Total of vuln\n          title: High\n          type: integer\n        medium:\n          description: Total of vuln\n          title: Medium\n          type: integer\n        low:\n          description: Total of vuln\n          title: Low\n          type: integer\n\n    Test:\n      title: Test\n      type: object\n      properties:\n        starttime:\n          description: Timestamp of the start of the test\n          title: Start time\n          type: integer\n          format: int64\n        progress:\n          description: Progress of the test\n          maximum: 100.0\n          minimum: 0.0\n          title: Progress\n          type: integer\n        errorMessage:\n          description: A message in case of error\n          title: ErrorMessage\n          type: string\n        vulnerabilities:\n          $ref: '#/components/schemas/Vulnerabilities'\n\n    TestWithReport:\n      title: Test\n      type: object\n      properties:\n        starttime:\n          description: Timestamp of the start of the test\n          title: Start time\n          type: integer\n          format: int64\n        progress:\n          description: Progress of the test\n          maximum: 100.0\n          minimum: 0.0\n          title: Description\n          type: integer\n        vulnerabilities:\n          $ref: '#/components/schemas/Vulnerabilities'\n        report:\n          $ref: '#/components/schemas/FuzzingStatusAndReport'\n        lastReportTime:\n          description: Timestamp of the last report received for the test\n          title: Start time\n          type: integer\n          format: int64\n        errorMessage:\n          description: A message in case of error\n          title: ErrorMessage\n          type: string\n\n    ShortTestProgress:\n      title: Short Test Progress Report\n      description: Describes the progress of an ongoing test\n      type: object\n      properties:\n        apiID:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        starttime:\n          description: Timestamp of the start of the test\n          title: Start time\n          type: integer\n          format: int64\n        progress:\n          description: Progress of the test\n          maximum: 100.0\n          minimum: 0.0\n          title: Description\n          type: integer\n      required:\n       - starttime\n       - progress\n\n    ShortTestReport:\n      title: Short Test Report\n      description: Short Test Report\n      type: object\n      properties:\n        apiID:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/ApiID\n        starttime:\n          description: Timestamp of the start of the test\n          title: Start time\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/FuzzingStatusEnum'\n        statusMessage:\n          title: Status message details\n          description: Message for status details, if any\n          type: string\n        tags:\n          title: Tags list\n          type: array\n          items:\n            $ref: '#/components/schemas/FuzzingReportTag'\n        highestSeverity:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/Severity        \n      required:\n        - starttime\n        - status\n            \n    FuzzingReportTag:\n      title: Report tag item\n      description: Report tag item\n      type: object\n      properties:\n        name:\n          title: Tag name\n          description: Tag name\n          type: string\n        operations:\n          title: Operations list\n          type: array\n          items:\n            $ref: '#/components/schemas/FuzzingReportOperation'\n        highestSeverity:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/Severity        \n      required:\n        - name\n        - operations\n      \n    FuzzingReportOperation:\n      description: Report tag operation\n      title: Report tag operation  \n      type: object\n      properties:\n        operation:\n          $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/MethodAndPath'\n        requestsCount:\n          title: Request count to the opea\n          description: Request count to this operation item during the test\n          type: integer\n          format: int32\n        findings:\n          title: Findings list\n          type: array\n          items:\n            $ref: '../../../../../../api3/common/openapi.yaml#/components/schemas/APIFinding'\n        highestSeverity:\n          $ref: ../../../../../../api3/common/openapi.yaml#/components/schemas/Severity        \n      required:\n        - operation\n        - requestsCount\n\n           ",
			"canonicalURL": "/github.com/openclarity/apiclarity@ccb39d95ed8bbacd6f93d11094f8de8d8e6dc816/-/blob/backend/pkg/modules/internal/fuzzer/restapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openclarity/apiclarity/blob/ccb39d95ed8bbacd6f93d11094f8de8d8e6dc816/backend/pkg/modules/internal/fuzzer/restapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/fuzz/{apiID}/start\": post: requestBody: contents: media: \"application/json\": generate schema: field auth: oneOf: discriminator: unable to map \"BasicAuth\" to \"https://raw.githubusercontent.com/openclarity/apiclarity/ccb39d95ed8bbacd6f93d11094f8de8d8e6dc816/backend/pkg/modules/internal/fuzzer/restapi/openapi.yaml#/components/schemas/BasicAuth\""
}