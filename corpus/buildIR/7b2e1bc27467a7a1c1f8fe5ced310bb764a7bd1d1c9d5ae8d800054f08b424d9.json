{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/buttondown-email/docs"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "public/schema.yaml",
			"byteSize": 39705,
			"content": "components:\n  schemas:\n    Draft:\n      properties:\n        body:\n          type: string\n        creation_date:\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        modification_date:\n          format: date-time\n          readOnly: true\n          type: string\n        subject:\n          type: string\n      required:\n      - subject\n      - body\n      type: object\n    Email:\n      properties:\n        body:\n          type: string\n        email_type:\n          enum:\n          - public\n          - private\n          - premium\n          - promoted\n          type: string\n        excluded_tags:\n          nullable: true\n          type: array\n        external_url:\n          format: uri\n          maxLength: 200\n          pattern: \"^(?:[a-z0-9\\\\.\\\\-\\\\+]*)://(?:[^\\\\s:@/]+(?::[^\\\\s:@/]*)?@)?(?:(?:25[0-5]|2[0-4]\\\\\\\n            d|[0-1]?\\\\d?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)){3}|\\\\[[0-9a-f:\\\\\\\n            .]+\\\\]|([a-z\\xA1-\\uFFFF0-9](?:[a-z\\xA1-\\uFFFF0-9-]{0,61}[a-z\\xA1-\\uFFFF\\\n            0-9])?(?:\\\\.(?!-)[a-z\\xA1-\\uFFFF0-9-]{1,63}(?<!-))*\\\\.(?!-)(?:[a-z\\xA1\\\n            -\\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\\.?|localhost))(?::\\\\d{2,5})?(?:[/?#][^\\\\\\\n            s]*)?\\\\z\"\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        included_tags:\n          nullable: true\n          type: array\n        metadata:\n          nullable: true\n          type: object\n        publish_date:\n          format: date-time\n          readOnly: true\n          type: string\n        secondary_id:\n          maximum: 2147483647\n          minimum: -2147483648\n          type: integer\n        slug:\n          maxLength: 100\n          nullable: true\n          pattern: ^[-a-zA-Z0-9_]+\\z\n          type: string\n        subject:\n          type: string\n      required:\n      - subject\n      - body\n      type: object\n    Newsletter:\n      properties:\n        api_key:\n          format: uuid\n          readOnly: true\n          type: string\n        creation_date:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        name:\n          type: string\n        username:\n          type: string\n      required:\n      - username\n      - name\n      - description\n      type: object\n    ScheduledEmail:\n      properties:\n        body:\n          type: string\n        email_type:\n          enum:\n          - public\n          - private\n          - premium\n          - promoted\n          type: string\n        excluded_tags:\n          nullable: true\n          type: array\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        included_tags:\n          nullable: true\n          type: array\n        publish_date:\n          format: date-time\n          type: string\n        subject:\n          type: string\n      required:\n      - publish_date\n      - subject\n      - body\n      type: object\n    SendEmail:\n      properties: {}\n      type: object\n    Subscriber:\n      properties:\n        creation_date:\n          format: date-time\n          readOnly: true\n          type: string\n        email:\n          format: email\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        metadata:\n          nullable: true\n          type: object\n        notes:\n          type: string\n        referrer_url:\n          maxLength: 500\n          type: string\n        secondary_id:\n          readOnly: true\n          type: integer\n        source:\n          enum:\n          - api\n          - buttondown\n          - csv\n          - mailchimp\n          - organic\n          - substack\n          - tinyletter\n          - typeform\n          - user\n          - drip\n          readOnly: true\n          type: string\n        subscriber_type:\n          enum:\n          - regular\n          - premium\n          - gifted\n          - unpaid\n          - unactivated\n          - unsubscribed\n          - spammy\n          - removed\n          - trialed\n          - disabled\n          readOnly: true\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        utm_campaign:\n          readOnly: true\n          type: string\n        utm_medium:\n          readOnly: true\n          type: string\n        utm_source:\n          readOnly: true\n          type: string\n      required:\n      - email\n      type: object\n    SubscriberTag:\n      properties:\n        color:\n          maxLength: 10\n          type: string\n        creation_date:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          nullable: true\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        name:\n          maxLength: 100\n          type: string\n      required:\n      - name\n      type: object\n    UploadedImage:\n      properties:\n        creation_date:\n          format: date-time\n          readOnly: true\n          type: string\n        id:\n          format: uuid\n          readOnly: true\n          type: string\n        image:\n          format: binary\n          type: string\n      required:\n      - image\n      type: object\ninfo:\n  description: |+\n    # Introduction\n\n    Hello and welcome to Buttondown's API schema!\n\n    I've designed Buttondown's API to be as RESTful and uninteresting as possible: if there's a primitive in\n    Buttondown, you should have a nice interface for it, with the ability to retrieve,\n    create, modify, and delete. This means that with a few lines in your language\n    of choice, you're able to programmatically keep track of your subscribers, send\n    out new emails, and more.\n\n    If you're confused about what Buttondown is, try\n    going to [buttondown.email](https://buttondown.email).\n\n    If you're looking\n    for where to find your API Key, check your [settings page](https://buttondown.email/settings).\n\n    # Authentication\n\n    Clients should authenticate by passing the token key in the \\\"Authorization\\\"\n    HTTP header, prepended with the string \\\"Token \\\".  For example:\n\n    ```\n    Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a\n    ```\n\n    You can find your API key in your <a href='https://buttondown.email/settings'>Settings page</a>.\n\n    # Events\n\n    Events are Buttondown's way of telling you (likely via Webhooks) that something interesting has happened\n    to your newsletter. You can view a table of all events [here](https://www.notion.so/buttondown/b657ff246c884b6e82327449a114ea4e?v=1d857c36b82f452ea28afdf7844eea49&p=d8244ac6aaa242038d17a01a4584f184).\n\n    # Changelog\n\n    The changelog provides a list of dated updates, each of which contains a number\n    of potentially backwards-incompatible changes. There is no explicit versioning in the\n    API at this time; all changes will be either compatible or breaking. (If I attempt any\n    brittle changes to the API that may break current implementations, I'll be sure to add\n    version gates.)\n\n    ## 2021-01-02\n\n    Added support to set and retrieve metadata on Emails.\n\n    ## 2020-12-23\n\n    Added deletion and update abilities to the [Scheduled emails endpoint](#tag/Scheduled-emails), giving you much\n    more programmability than the hitherto append-only state of the world.\n\n    ## 2020-12-09\n\n    Added a deletion endpoint to the [Images endpoint](#tag/Images), allowing you to delete unused images.\n\n  title: Buttondown\n  version: 1.0.0\nopenapi: 3.0.2\npaths:\n  /v1/drafts:\n    get:\n      description: ''\n      operationId: List all drafts\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/drafts/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/drafts/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Draft'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Drafts\n    post:\n      description: ''\n      operationId: Create a new draft\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Draft'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Draft'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Draft'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Draft'\n          description: ''\n      tags:\n      - Drafts\n  /v1/drafts/{id}:\n    get:\n      description: ''\n      operationId: Retrieve an existing draft\n      parameters:\n      - description: A UUID string identifying this draft.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Draft'\n          description: ''\n      tags:\n      - Drafts\n  /v1/emails:\n    get:\n      operationId: List all emails\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/emails/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/emails/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Email'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Emails\n    post:\n      operationId: Create a new email\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Email'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Email'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Email'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Email'\n          description: ''\n      tags:\n      - Emails\n  /v1/emails/{id}:\n    get:\n      operationId: Retrieve an existing email\n      parameters:\n      - description: A UUID string identifying this email.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Email'\n          description: ''\n      tags:\n      - Emails\n  /v1/images:\n    get:\n      description: ''\n      operationId: List all uploaded images\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/images/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/images/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/UploadedImage'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Images\n    post:\n      description: ''\n      operationId: Upload a new image\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UploadedImage'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UploadedImage'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UploadedImage'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadedImage'\n          description: ''\n      tags:\n      - Images\n  /v1/images/{id}:\n    delete:\n      description: Be sure to verify that this image hasn't been referenced in your\n        emails before deleting it!\n      operationId: Delete an uploaded image\n      parameters:\n      - description: A UUID string identifying this uploaded image.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - Images\n    get:\n      description: ''\n      operationId: Retrieve an uploaded image\n      parameters:\n      - description: A UUID string identifying this uploaded image.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadedImage'\n          description: ''\n      tags:\n      - Images\n  /v1/newsletters:\n    get:\n      description: ''\n      operationId: List all newsletters\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/newsletters/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/newsletters/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Newsletter'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Newsletters\n    post:\n      description: ''\n      operationId: Create a newsletter\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Newsletter'\n          description: ''\n      tags:\n      - Newsletters\n  /v1/newsletters/{id}:\n    delete:\n      description: ''\n      operationId: Delete a newsletter\n      parameters:\n      - description: A UUID string identifying this newsletter.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - Newsletters\n    get:\n      description: ''\n      operationId: Retrieve an existing newsletter\n      parameters:\n      - description: A UUID string identifying this newsletter.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Newsletter'\n          description: ''\n      tags:\n      - Newsletters\n    patch:\n      description: ''\n      operationId: Partially update an existing newsletter\n      parameters:\n      - description: A UUID string identifying this newsletter.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Newsletter'\n          description: ''\n      tags:\n      - Newsletters\n    put:\n      description: ''\n      operationId: Update an existing newsletter\n      parameters:\n      - description: A UUID string identifying this newsletter.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Newsletter'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Newsletter'\n          description: ''\n      tags:\n      - Newsletters\n  /v1/ping:\n    get:\n      description: A simple view to let you easily test authentication and health\n        of the API.\n      operationId: Ping\n      parameters: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items: {}\n                type: array\n          description: ''\n      tags:\n      - Miscellany\n  /v1/scheduled-emails:\n    description: Scheduled emails are analogous to, well, scheduled emails.\n    get:\n      description: ''\n      operationId: List all scheduled emails\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/scheduled-emails/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/scheduled-emails/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/ScheduledEmail'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Scheduled emails\n    post:\n      description: ''\n      operationId: Schedule a new email\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScheduledEmail'\n          description: ''\n      tags:\n      - Scheduled emails\n    summary: scheduled-emails\n  /v1/scheduled-emails/{id}:\n    delete:\n      operationId: Delete a scheduled email\n      parameters:\n      - description: A UUID string identifying this scheduled email.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - Scheduled emails\n    get:\n      description: ''\n      operationId: Retrieve an existing scheduled email\n      parameters:\n      - description: A UUID string identifying this scheduled email.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScheduledEmail'\n          description: ''\n      tags:\n      - Scheduled emails\n    patch:\n      description: ''\n      operationId: Update a scheduled email\n      parameters:\n      - description: A UUID string identifying this scheduled email.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ScheduledEmail'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScheduledEmail'\n          description: ''\n      tags:\n      - Scheduled emails\n  /v1/subscribers:\n    get:\n      description: It's worth noting that the various parametric options in this API\n        work in tandem; you can, for instance, filter down your results to all \"unpaid\"\n        subscribers matching a certain tag.\n      operationId: List all subscribers\n      parameters:\n      - description: \"An optional filter to allow you to only retrieve a subset of\\\n          \\ subscribers. The API accepts\\nthe following values:\\n\\n- `regular` \\u2014\\\n          \\ normal subscribers who have not unsubscribed or deactivated in any way.\\n\\\n          - `unactivated` \\u2014 subscribers who have not yet confirmed their email\\\n          \\ or opted in.\\n- `unpaid` \\u2014 subscribers who have not yet purchased\\\n          \\ a subscription to your newsletter.\\n- `removed` \\u2014 subscribers who\\\n          \\ have been explicitly removed by the newsletter (notably, this does not\\\n          \\ mean unsubscribers: use [/v1/unsubscribers](/v1/schema#tag/Unsubscribers)\\\n          \\ for that!\\n\"\n        example: regular\n        in: query\n        name: type\n        required: false\n        schema:\n          type: string\n      - description: |\n          An optional filter allowing you to filter subscribers based on a given tag. Provide the ID of the\n          tag, not the name.\n        example: cc661ca9-2c2b-487e-a46c-33d3bfb1c7f7\n        in: query\n        name: tag\n        required: false\n        schema:\n          type: string\n      - description: |\n          An optional filter allowing you to filter subscribers based on a substring. Providing a value of \"doe\"\n          would match both `jane.doe@gmail.com` and `john.doe@gmail.com`, but not `jane.dooe@gmail.com`.\n        example: gmail.com\n        in: query\n        name: email\n        required: false\n        schema:\n          type: string\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      - description: Which field to use when ordering the results.\n        in: query\n        name: ordering\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/subscribers/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/subscribers/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Subscriber'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Subscribers\n    post:\n      description: |\n        If Buttondown cannot create a new subscriber with the email address you've provided, there are a few likely reasons why. They're enumerated below:\n        - _A subscriber with that email has already been unsubscribed_.\n        - _That email address (justin@gmail.com) is already subscribed_.\n        - _That email address (justin@gmail.com) is already subscribed, but has not confirmed their email_.\n        - _That email address (justin@gmail.com) is already subscribed, but has not provided payment_.\n      operationId: Create a new subscriber\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriber'\n          description: ''\n        '400':\n          description: If the email is invalid for any reason or if the subscriber\n            already exists in our system.\n      tags:\n      - Subscribers\n  /v1/subscribers/{id}:\n    delete:\n      operationId: Delete a subscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Which field to use when ordering the results.\n        in: query\n        name: ordering\n        required: false\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - Subscribers\n    get:\n      operationId: Retrieve an existing subscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Which field to use when ordering the results.\n        in: query\n        name: ordering\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriber'\n          description: ''\n      tags:\n      - Subscribers\n    patch:\n      operationId: Partially update an existing subscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Which field to use when ordering the results.\n        in: query\n        name: ordering\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriber'\n          description: ''\n      tags:\n      - Subscribers\n    put:\n      operationId: Update an existing subscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: Which field to use when ordering the results.\n        in: query\n        name: ordering\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Subscriber'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriber'\n          description: ''\n      tags:\n      - Subscribers\n  /v1/subscribers/{id}/emails/{email_id}:\n    post:\n      description: This endpoint is currently in closed beta. If you're interested\n        in using it, please [email me](mailto:justin@buttondown.email) to tell me\n        more about your use case!\n      operationId: Send an email to an active subscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      - description: ''\n        in: path\n        name: email_id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendEmail'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SendEmail'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/SendEmail'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SendEmail'\n          description: ''\n      tags:\n      - Subscribers\n  /v1/tags:\n    get:\n      operationId: List all tags\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/tags/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/tags/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/SubscriberTag'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Tags\n    post:\n      operationId: Create a new tag\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberTag'\n          description: ''\n      tags:\n      - Tags\n  /v1/tags/{id}:\n    delete:\n      operationId: Delete a tag\n      parameters:\n      - description: A UUID string identifying this subscriber tag.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '204':\n          description: ''\n      tags:\n      - Tags\n    get:\n      operationId: Retrieve an existing tag\n      parameters:\n      - description: A UUID string identifying this subscriber tag.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberTag'\n          description: ''\n      tags:\n      - Tags\n    patch:\n      operationId: Partially update an existing tag\n      parameters:\n      - description: A UUID string identifying this subscriber tag.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberTag'\n          description: ''\n      tags:\n      - Tags\n    put:\n      operationId: Update an existing tag\n      parameters:\n      - description: A UUID string identifying this subscriber tag.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/SubscriberTag'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriberTag'\n          description: ''\n      tags:\n      - Tags\n  /v1/unsubscribers:\n    get:\n      operationId: List unsubscribers\n      parameters:\n      - description: A page number within the paginated result set.\n        in: query\n        name: page\n        required: false\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    example: 123\n                    type: integer\n                  next:\n                    example: https://api.buttondown.email/v1/unsubscribers/?page=4\n                    format: uri\n                    nullable: true\n                    type: string\n                  previous:\n                    example: https://api.buttondown.email/v1/unsubscribers/?page=2\n                    format: uri\n                    nullable: true\n                    type: string\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Subscriber'\n                    type: array\n                type: object\n          description: ''\n      tags:\n      - Unsubscribers\n  /v1/unsubscribers/{id}:\n    get:\n      operationId: Retrieve a specific unsubscriber\n      parameters:\n      - description: A UUID string identifying this subscriber.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriber'\n          description: ''\n      tags:\n      - Unsubscribers\ntags:\n- description: Miscellaneous API endpoints that don't belong anywhere else.\n  name: Miscellany\n- description: Subscribers are the main way you collect email addresses and recipients\n    on Buttondown.\n  name: Subscribers\n- description: Emails are what you're for here on Buttondown at the end of the day,\n    right? Creating an email via the API is just like creating one in the interface;\n    it will instantly trigger sending actual emails, based on the tags and email type\n    you provide.\n  name: Emails\n- name: Tags\n- description: Scheduled emails are analogous to, well, [scheduled emails](https://buttondown.email/emails/scheduled);\n    emails that you create to be sent at some point in the future. Depending on your\n    integration, it might make more sense for you to create scheduled emails ahead\n    of time rather than wait to create an email at exactly the time you want it going\n    out (and, just like emails scheduled via Buttondown's UI, scheduled emails created\n    via the API will automatically be sent out without requiring any further intervention.)\n  name: Scheduled emails\n- description: It's mostly a historical quirk that these API methods exist on their\n    own and not alongside your general Subscriber methods.\n  name: Unsubscribers\n- description: Images are, well, images! Buttondown allows you to upload images to\n    its secure [S3](https://aws.amazon.com/s3/) bucket and do with them what you will.\n    This is sort of an odd duck of an API, to be sure, but if you want to be able\n    to do things like draft and send emails completely on your iPad you need a surefire\n    way of creating images.\n  name: Images\n- description: Please note that this group of endpoints is currently in closed beta!\n    If you're interested in programmatically managing your newsletters, please [email\n    me](mailto:justin@buttondown.email).\n  name: Newsletters\n- description: Drafts are analogous to, well, [drafts](https://buttondown.email/emails/drafts).\n  name: Drafts\n",
			"canonicalURL": "/github.com/buttondown-email/docs@8ec730f85c5f733166e49e9a4dfac8052ae3e47a/-/blob/public/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/buttondown-email/docs/blob/8ec730f85c5f733166e49e9a4dfac8052ae3e47a/public/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/v1/emails\": get: responses: 200: contents: application/json: generate schema: field results: item: field external_url: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?!`"
}