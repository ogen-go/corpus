{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/orthanc-server.com/1.9.6/openapi.yaml",
			"byteSize": 396702,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://demo.orthanc-server.com/\ninfo:\n  description: This is the full documentation of the [REST API](https://book.orthanc-server.com/users/rest.html) of Orthanc.\u003cp\u003eThis reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://book.orthanc-server.com/users/rest-cheatsheet.html) is part of the Orthanc Book.\u003cp\u003eAn earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).\n  title: Orthanc API\n  version: 1.9.6\n  x-apisguru-categories:\n    - collaboration\n  x-origin:\n    - format: openapi\n      url: https://api.orthanc-server.com/orthanc-openapi.json\n      version: \"3.0\"\n  x-providerName: orthanc-server.com\npaths:\n  /changes:\n    delete:\n      deprecated: false\n      description: Clear the full history stored in the changes log\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Clear changes\n      tags:\n        - Tracking changes\n    get:\n      deprecated: false\n      description: Whenever Orthanc receives a new DICOM instance, this event is recorded in the so-called _Changes Log_. This enables remote scripts to react to the arrival of new DICOM resources. A typical application is auto-routing, where an external script waits for a new DICOM instance to arrive into Orthanc, then forward this instance to another modality.\n      parameters:\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: The list of changes\n                example:\n                  Changes:\n                    - ChangeType: NewInstance\n                      Date: 20180414T091510\n                      ID: 055bfbaf-2aae936c-82ed5a9a-9267f8b7-416a4000\n                      Path: /instances/055bfbaf-2aae936c-82ed5a9a-9267f8b7-416a4000\n                      ResourceType: Instance\n                      Seq: 1\n                    - ChangeType: NewSeries\n                      Date: 20180414T091510\n                      ID: 318603c5-03e8cffc-a82b6ee1-3ccd3c1e-18d7e3bb\n                      Path: /series/318603c5-03e8cffc-a82b6ee1-3ccd3c1e-18d7e3bb\n                      ResourceType: Series\n                      Seq: 2\n                  Done: false\n                  Last: 2\n                properties:\n                  Changes:\n                    description: The individual changes\n                    items:\n                      type: object\n                    type: array\n                  Done:\n                    description: Whether the last reported change is the last of the full history\n                    type: boolean\n                  Last:\n                    description: The index of the last reported change, can be used for the `since` argument in subsequent calls to this route\n                    type: number\n          description: \"\"\n      summary: List changes\n      tags:\n        - Tracking changes\n  /exports:\n    delete:\n      deprecated: false\n      description: Clear the full history stored in the exports log\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Clear exports\n      tags:\n        - Tracking changes\n    get:\n      deprecated: false\n      description: For medical traceability, Orthanc can be configured to store a log of all the resources that have been exported to remote modalities. In auto-routing scenarios, it is important to prevent this log to grow indefinitely as incoming instances are routed. You can either disable this logging by setting the option `LogExportedResources` to `false` in the configuration file, or periodically clear this log by `DELETE`-ing this URI. This route might be removed in future versions of Orthanc.\n      parameters:\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: The list of exports\n          description: \"\"\n      summary: List exports\n      tags:\n        - Tracking changes\n  /instances:\n    get:\n      deprecated: false\n      description: List the Orthanc identifiers of all the available DICOM instances\n      parameters:\n        - description: If present, retrieve detailed information about the individual instances\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing either the Orthanc identifiers, or detailed information about the reported instances (if `expand` argument is provided)\n                example:\n                  - 055bfbaf-2aae936c-82ed5a9a-9267f8b7-416a4000\n                  - 62dc1ec1-9fc2dd9d-aa66eae1-0db608b1-e17f8ce8\n          description: \"\"\n      summary: List the available instances\n      tags:\n        - Instances\n    post:\n      deprecated: false\n      description: Upload DICOM instances\n      parameters: []\n      requestBody:\n        content:\n          application/dicom:\n            schema:\n              description: DICOM file to be uploaded\n          application/zip:\n            schema:\n              description: ZIP archive containing DICOM files (new in Orthanc 1.8.2)\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the uploaded instance, or list of information for each uploaded instance in the case of ZIP archive\n                example:\n                  ID: 19816330-cb02e1cf-df3a8fe8-bf510623-ccefe9f5\n                  ParentPatient: ef9d77db-eb3b2bef-9b31fd3e-bf42ae46-dbdb0cc3\n                  ParentSeries: 3774320f-ccda46d8-69ee8641-9e791cbf-3ecbbcc6\n                  ParentStudy: 66c8e41e-ac3a9029-0b85e42a-8195ee0a-92c2e62e\n                  Path: /instances/19816330-cb02e1cf-df3a8fe8-bf510623-ccefe9f5\n                  Status: Success\n                properties:\n                  ID:\n                    description: Orthanc identifier of the new instance\n                    type: string\n                  ParentPatient:\n                    description: Orthanc identifier of the parent patient\n                    type: string\n                  ParentSeries:\n                    description: Orthanc identifier of the parent series\n                    type: string\n                  ParentStudy:\n                    description: Orthanc identifier of the parent study\n                    type: string\n                  Path:\n                    description: Path to the new instance in the REST API\n                    type: string\n                  Status:\n                    description: Can be `Success`, `AlreadyStored`, `Failure`, or `FilteredOut` (removed by some `NewInstanceFilter`)\n                    type: string\n          description: \"\"\n      summary: Upload DICOM instances\n      tags:\n        - Instances\n  \"/instances/{id}\":\n    delete:\n      deprecated: false\n      description: Delete the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete some instance\n      tags:\n        - Instances\n    get:\n      deprecated: false\n      description: Get detailed information about the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM instance\n                example:\n                  FileSize: 526744\n                  FileUuid: dc031d9e-ef02-4871-821f-ffe445deb7c2\n                  ID: d94d9a03-3003b047-a4affc69-322313b2-680530a2\n                  IndexInSeries: 155\n                  MainDicomTags:\n                    AcquisitionNumber: \"4\"\n                    ImageOrientationPatient: 1\\0\\0\\0\\1\\0\n                    ImagePositionPatient: -249.51171875\\-458.51171875\\314\n                    InstanceCreationDate: \"20151217\"\n                    InstanceCreationTime: \"125204.215000\"\n                    InstanceNumber: \"155\"\n                    SOPInstanceUID: 1.3.6.1.4.1.14519.5.2.1.2193.7172.168997935789297163075628247666\n                  ParentSeries: 52f4cb90-29d1d1a2-2ca34edd-4b8851fc-8cb269f2\n                  Type: Instance\n          description: \"\"\n      summary: Get information about some instance\n      tags:\n        - Instances\n  \"/instances/{id}/anonymize\":\n    post:\n      deprecated: false\n      description: \"Download an anonymized version of the DICOM instance whose Orthanc identifier is provided in the URL: https://book.orthanc-server.com/users/anonymization.html#anonymization-of-a-single-instance\"\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                DicomVersion:\n                  description: Version of the DICOM standard to be used for anonymization. Check out configuration option `DeidentifyLogsDicomVersion` for possible values.\n                  type: string\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: List of DICOM tags whose value must not be destroyed by the anonymization. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                KeepPrivateTags:\n                  description: Keep the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of additional tags to be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n      responses:\n        \"200\":\n          content:\n            application/dicom:\n              examples: {}\n              schema:\n                description: The anonymized DICOM instance\n          description: \"\"\n      summary: Anonymize instance\n      tags:\n        - Instances\n  \"/instances/{id}/attachments\":\n    get:\n      deprecated: false\n      description: Get the list of attachments that are associated with the given instance\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the attachments\n                example:\n                  - dicom\n                  - dicom-as-json\n          description: \"\"\n      summary: List attachments\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}\":\n    delete:\n      deprecated: false\n      description: Delete an attachment associated with the given DICOM instance. This call will fail if trying to delete a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete attachment\n      tags:\n        - Instances\n    get:\n      deprecated: false\n      description: Get the list of the operations that are available for attachments associated with the given instance\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - compress\n                  - compressed-data\n                  - compressed-md5\n                  - compressed-size\n                  - data\n                  - is-compressed\n                  - md5\n                  - size\n                  - uncompress\n                  - verify-md5\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: List operations on attachments\n      tags:\n        - Other\n    put:\n      deprecated: false\n      description: Attach a file to the given DICOM instance. This call will fail if trying to modify a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, if this is not the first time this attachment is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              description: Binary data containing the attachment\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Set attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/compress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Compress attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/compressed-data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given instance. The attachment will not be decompressed if `StorageCompression` is `true`.\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment (no decompression)\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/compressed-md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given instance, as stored on the disk. This is different from `.../md5` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment on disk\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/compressed-size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given instance, as stored on the disk. This is different from `.../size` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment on disk\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given instance\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/is-compressed\":\n    get:\n      deprecated: false\n      description: Test whether the attachment has been stored as a compressed file on the disk.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`0` if the attachment was stored uncompressed, `1` if it was compressed\"\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Is attachment compressed?\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given instance\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given instance\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/uncompress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Uncompress attachment\n      tags:\n        - Instances\n  \"/instances/{id}/attachments/{name}/verify-md5\":\n    post:\n      deprecated: false\n      description: Verify that the attachment is not corrupted, by validating its MD5 hash\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: On success, a valid JSON object is returned\n          description: \"\"\n      summary: Verify attachment\n      tags:\n        - Instances\n  \"/instances/{id}/content\":\n    get:\n      deprecated: false\n      description: Get the raw content of one DICOM tag in the hierarchy of DICOM dataset\n      parameters:\n        - description: Path to the DICOM tag. This is the interleaving of one DICOM tag, possibly followed by an index for sequences. Sequences are accessible as, for instance, `/0008-1140/1/0008-1150`\n          in: query\n          name: ...\n          required: true\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The raw value of the tag of intereset (binary data, whose memory layout depends on the underlying transfer syntax), or JSON array containing the list of available tags if accessing a dataset\n          description: \"\"\n      summary: Get raw tag\n      tags:\n        - Instances\n  \"/instances/{id}/export\":\n    post:\n      deprecated: false\n      description: Write the DICOM file onto the filesystem where Orthanc is running\n      parameters:\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: Target path on the filesystem\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Write DICOM onto filesystem\n      tags:\n        - Instances\n  \"/instances/{id}/file\":\n    get:\n      deprecated: false\n      description: Download one DICOM instance\n      parameters:\n        - description: This HTTP header can be set to retrieve the DICOM instance in DICOMweb format\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/dicom:\n              examples: {}\n              schema:\n                description: The DICOM instance\n            application/dicom+json:\n              examples: {}\n              schema:\n                description: The DICOM instance, in DICOMweb JSON format\n            application/dicom+xml:\n              examples: {}\n              schema:\n                description: The DICOM instance, in DICOMweb XML format\n          description: \"\"\n      summary: Download DICOM\n      tags:\n        - Instances\n  \"/instances/{id}/frames\":\n    get:\n      deprecated: false\n      description: List the frames that are available in the DICOM instance of interest\n      parameters:\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: The list of the indices of the available frames\n                example:\n                  - 0\n          description: \"\"\n      summary: List available frames\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}\":\n    get:\n      deprecated: false\n      description: List the available operations under URI `/instances/{id}/frames/{frame}/`\n      parameters:\n        - description: \"\"\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: string\n        - description: \"\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - image-int16\n                  - image-uint16\n                  - image-uint8\n                  - matlab\n                  - preview\n                  - raw\n                  - raw.gz\n                  - rendered\n          description: \"\"\n      summary: List operations\n      tags:\n        - Other\n  \"/instances/{id}/frames/{frame}/image-int16\":\n    get:\n      deprecated: false\n      description: Decode one frame of interest from the given DICOM instance. Pixels of grayscale images are truncated to the [-32768,32767] range. Negative values must be interpreted according to two's complement.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode a frame (int16)\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/image-uint16\":\n    get:\n      deprecated: false\n      description: Decode one frame of interest from the given DICOM instance. Pixels of grayscale images are truncated to the [0,65535] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode a frame (uint16)\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/image-uint8\":\n    get:\n      deprecated: false\n      description: Decode one frame of interest from the given DICOM instance. Pixels of grayscale images are truncated to the [0,255] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode a frame (uint8)\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/matlab\":\n    get:\n      deprecated: false\n      description: \"Decode one frame of interest from the given DICOM instance, and export this frame as a Octave/Matlab matrix to be imported with `eval()`: https://book.orthanc-server.com/faq/matlab.html\"\n      parameters:\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Octave/Matlab matrix\n          description: \"\"\n      summary: Decode frame for Matlab\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/preview\":\n    get:\n      deprecated: false\n      description: Decode one frame of interest from the given DICOM instance. The full dynamic range of grayscale images is rescaled to the [0,255] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode a frame (preview)\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/raw\":\n    get:\n      deprecated: false\n      description: Access the raw content of one individual frame of the DICOM instance of interest, bypassing image decoding. This is notably useful to access the source files in compressed transfer syntaxes.\n      parameters:\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The raw frame\n          description: \"\"\n      summary: Access raw frame\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/raw.gz\":\n    get:\n      deprecated: false\n      description: Access the raw content of one individual frame of the DICOM instance of interest, bypassing image decoding. This is notably useful to access the source files in compressed transfer syntaxes. The image is compressed using gzip\n      parameters:\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/gzip:\n              examples: {}\n              schema:\n                description: The raw frame, compressed using gzip\n          description: \"\"\n      summary: Access raw frame (compressed)\n      tags:\n        - Instances\n  \"/instances/{id}/frames/{frame}/rendered\":\n    get:\n      deprecated: false\n      description: Render one frame of interest from the given DICOM instance. This function takes scaling into account (`RescaleSlope` and `RescaleIntercept` tags), as well as the default windowing stored in the DICOM file (`WindowCenter` and `WindowWidth`tags), and can be used to resize the resulting image. Color images are not affected by windowing.\n      parameters:\n        - description: Height of the resized image\n          in: query\n          name: height\n          required: false\n          schema:\n            type: number\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Whether to smooth image on resize\n          in: query\n          name: smooth\n          required: false\n          schema:\n            type: boolean\n        - description: Width of the resized image\n          in: query\n          name: width\n          required: false\n          schema:\n            type: number\n        - description: Windowing center\n          in: query\n          name: window-center\n          required: false\n          schema:\n            type: number\n        - description: Windowing width\n          in: query\n          name: window-width\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Index of the frame (starts at `0`)\n          in: path\n          name: frame\n          required: true\n          schema:\n            type: number\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Render a frame\n      tags:\n        - Instances\n  \"/instances/{id}/header\":\n    get:\n      deprecated: false\n      description: Get the DICOM tags in the meta-header of the DICOM instance. By default, the `full` format is used, which combines hexadecimal tags with human-readable description.\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the DICOM tags and their associated value\n                example:\n                  \"0002,0000\":\n                    Name: FileMetaInformationGroupLength\n                    Type: String\n                    Value: \"202\"\n                  \"0002,0002\":\n                    Name: MediaStorageSOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.2\n                  \"0002,0003\":\n                    Name: MediaStorageSOPInstanceUID\n                    Type: String\n                    Value: 1.3.12.2.1107.5.1.4.54693.30000006100507010800000005269\n                  \"0002,0010\":\n                    Name: TransferSyntaxUID\n                    Type: String\n                    Value: 1.2.840.10008.1.2.1\n                  \"0002,0012\":\n                    Name: ImplementationClassUID\n                    Type: String\n                    Value: 1.3.6.1.4.1.19291.2.1\n                  \"0002,0013\":\n                    Name: ImplementationVersionName\n                    Type: String\n                    Value: OSIRIX001\n                  \"0002,0016\":\n                    Name: SourceApplicationEntityTitle\n                    Type: String\n                    Value: OSIRIX\n          description: \"\"\n      summary: Get DICOM meta-header\n      tags:\n        - Instances\n  \"/instances/{id}/image-int16\":\n    get:\n      deprecated: false\n      description: Decode the first frame of the given DICOM instance. Pixels of grayscale images are truncated to the [-32768,32767] range. Negative values must be interpreted according to two's complement.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode an image (int16)\n      tags:\n        - Instances\n  \"/instances/{id}/image-uint16\":\n    get:\n      deprecated: false\n      description: Decode the first frame of the given DICOM instance. Pixels of grayscale images are truncated to the [0,65535] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode an image (uint16)\n      tags:\n        - Instances\n  \"/instances/{id}/image-uint8\":\n    get:\n      deprecated: false\n      description: Decode the first frame of the given DICOM instance. Pixels of grayscale images are truncated to the [0,255] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode an image (uint8)\n      tags:\n        - Instances\n  \"/instances/{id}/matlab\":\n    get:\n      deprecated: false\n      description: \"Decode the first frame of the given DICOM instance., and export this frame as a Octave/Matlab matrix to be imported with `eval()`: https://book.orthanc-server.com/faq/matlab.html\"\n      parameters:\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Octave/Matlab matrix\n          description: \"\"\n      summary: Decode frame for Matlab\n      tags:\n        - Instances\n  \"/instances/{id}/metadata\":\n    get:\n      deprecated: false\n      description: Get the list of metadata that are associated with the given instance\n      parameters:\n        - description: If present, also retrieve the value of the individual metadata\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)\n                example:\n                  - IndexInSeries\n                  - ReceptionDate\n                  - RemoteAET\n                  - Origin\n                  - TransferSyntax\n                  - SopClassUid\n                  - RemoteIP\n                  - HttpUsername\n          description: \"\"\n      summary: List metadata\n      tags:\n        - Instances\n  \"/instances/{id}/metadata/{name}\":\n    delete:\n      deprecated: false\n      description: Delete some metadata associated with the given DICOM instance. This call will fail if trying to delete a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete metadata\n      tags:\n        - Instances\n    get:\n      deprecated: false\n      description: Get the value of a metadata that is associated with the given instance\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Value of the metadata\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the metadata, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get metadata\n      tags:\n        - Instances\n    put:\n      deprecated: false\n      description: Set the value of some metadata in the given DICOM instance. This call will fail if trying to modify a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, if this is not the first time this metadata is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: String value of the metadata\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set metadata\n      tags:\n        - Instances\n  \"/instances/{id}/modify\":\n    post:\n      deprecated: false\n      description: \"Download a modified version of the DICOM instance whose Orthanc identifier is provided in the URL: https://book.orthanc-server.com/users/anonymization.html#modification-of-a-single-instance\"\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: Keep the original value of the specified tags, to be chosen among the `StudyInstanceUID`, `SeriesInstanceUID` and `SOPInstanceUID` tags. Avoid this feature as much as possible, as this breaks the DICOM model of the real world.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of tags that must be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                RemovePrivateTags:\n                  description: Remove the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Transcode:\n                  description: \"Transcode the DICOM instances to the provided DICOM transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/dicom:\n              examples: {}\n              schema:\n                description: The modified DICOM instance\n          description: \"\"\n      summary: Modify instance\n      tags:\n        - Instances\n  \"/instances/{id}/module\":\n    get:\n      deprecated: false\n      description: Get the instance module of the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM instance\n                example:\n                  \"0008,0005\":\n                    Name: SpecificCharacterSet\n                    Type: String\n                    Value: ISO_IR 192\n                  \"0008,0012\":\n                    Name: InstanceCreationDate\n                    Type: String\n                    Value: \"20151217\"\n                  \"0008,0013\":\n                    Name: InstanceCreationTime\n                    Type: String\n                    Value: \"125204.215000\"\n                  \"0008,0016\":\n                    Name: SOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.2\n                  \"0008,0018\":\n                    Name: SOPInstanceUID\n                    Type: String\n                    Value: 1.3.6.1.4.1.14519.5.2.1.2193.7172.168997935789297163075628247666\n                  \"0020,0013\":\n                    Name: InstanceNumber\n                    Type: String\n                    Value: \"155\"\n                  \"0028,0303\":\n                    Name: LongitudinalTemporalInformationModified\n                    Type: String\n                    Value: MODIFIED\n          description: \"\"\n      summary: Get instance module\n      tags:\n        - Instances\n  \"/instances/{id}/patient\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent patient of the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM patient\n                example:\n                  ID: 65ce8003-696b2eb6-03adeee7-6561ce8e-3e03f13a\n                  IsStable: true\n                  LastUpdate: 20200803T131236\n                  MainDicomTags:\n                    PatientBirthDate: \"\"\n                    PatientID: HN_P001\n                    PatientName: HN_P001\n                    PatientSex: M\n                  Studies:\n                    - 1c379a23-9fd28bba-02b60e5b-850ff34e-4349f09b\n                  Type: Patient\n          description: \"\"\n      summary: Get parent patient\n      tags:\n        - Instances\n  \"/instances/{id}/pdf\":\n    get:\n      deprecated: false\n      description: Get the PDF file that is embedded in one DICOM instance. If the DICOM instance doesn't contain the `EncapsulatedDocument` tag or if the `MIMETypeOfEncapsulatedDocument` tag doesn't correspond to the PDF type, a `404` HTTP error is raised.\n      parameters:\n        - description: Orthanc identifier of the instance interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/pdf:\n              examples: {}\n              schema:\n                description: PDF file\n          description: \"\"\n      summary: Get embedded PDF\n      tags:\n        - Instances\n  \"/instances/{id}/preview\":\n    get:\n      deprecated: false\n      description: Decode the first frame of the given DICOM instance. The full dynamic range of grayscale images is rescaled to the [0,255] range.\n      parameters:\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Decode an image (preview)\n      tags:\n        - Instances\n  \"/instances/{id}/reconstruct\":\n    post:\n      deprecated: false\n      description: Reconstruct the main DICOM tags of the instance whose Orthanc identifier is provided in the URL. This is useful if child studies/series/instances have inconsistent values for higher-level tags, in order to force Orthanc to use the value from the resource of interest. Beware that this is a time-consuming operation, as all the children DICOM instances will be parsed again, and the Orthanc index will be updated accordingly.\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Reconstruct tags of instance\n      tags:\n        - Instances\n  \"/instances/{id}/rendered\":\n    get:\n      deprecated: false\n      description: Render the first frame of the given DICOM instance. This function takes scaling into account (`RescaleSlope` and `RescaleIntercept` tags), as well as the default windowing stored in the DICOM file (`WindowCenter` and `WindowWidth`tags), and can be used to resize the resulting image. Color images are not affected by windowing.\n      parameters:\n        - description: Height of the resized image\n          in: query\n          name: height\n          required: false\n          schema:\n            type: number\n        - description: Quality for JPEG images (between 1 and 100, defaults to 90)\n          in: query\n          name: quality\n          required: false\n          schema:\n            type: number\n        - description: Whether to smooth image on resize\n          in: query\n          name: smooth\n          required: false\n          schema:\n            type: boolean\n        - description: Width of the resized image\n          in: query\n          name: width\n          required: false\n          schema:\n            type: number\n        - description: Windowing center\n          in: query\n          name: window-center\n          required: false\n          schema:\n            type: number\n        - description: Windowing width\n          in: query\n          name: window-width\n          required: false\n          schema:\n            type: number\n        - description: Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`\n          in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/jpeg:\n              examples: {}\n              schema:\n                description: JPEG image\n            image/png:\n              examples: {}\n              schema:\n                description: PNG image\n            image/x-portable-arbitrarymap:\n              examples: {}\n              schema:\n                description: PAM image (Portable Arbitrary Map)\n          description: \"\"\n      summary: Render an image\n      tags:\n        - Instances\n  \"/instances/{id}/series\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent series of the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM series\n                example:\n                  ExpectedNumberOfInstances: null\n                  ID: 52f4cb90-29d1d1a2-2ca34edd-4b8851fc-8cb269f2\n                  Instances:\n                    - ccc7cee2-81566098-5531d590-57b3c148-1787d177\n                    - af464afa-bf0c7970-02a3c666-337a8df8-1d955e27\n                    - 42616941-88cbd2a7-f30ceecb-3f53b658-c641372c\n                    - 1470f579-11b80cb9-ecf22279-041175d9-d8f3c3ef\n                    - 373622cf-43a0259b-ebf55c2a-02e5ef32-1a3115f0\n                    - 72b68848-9729ad79-e8762db4-50d97dd3-f3591322\n                    - 73e2f25f-aa47b7ba-5d1c6e7b-91b98261-a195316e\n                    - c22831de-6ddaa06c-1f877da5-400a8f03-83668321\n                    - 0c322d30-98af6f31-0bd59c19-99e07f68-317aeb3b\n                    - dd69d888-f3065dac-a47c947c-1aed47c8-fc181d11\n                    - ...\n                  IsStable: true\n                  LastUpdate: 20200803T131236\n                  MainDicomTags:\n                    BodyPartExamined: CHEST\n                    ImageOrientationPatient: 1\\0\\0\\0\\1\\0\n                    Manufacturer: SIEMENS\n                    Modality: CT\n                    SeriesDate: \"20091022\"\n                    SeriesDescription: HEAD/NECK  2.0  B30s\n                    SeriesInstanceUID: 1.3.6.1.4.1.14519.5.2.1.2193.7172.215111709746721743805035350686\n                    SeriesNumber: \"4\"\n                    SeriesTime: \"173151.203000\"\n                  ParentStudy: 1c379a23-9fd28bba-02b60e5b-850ff34e-4349f09b\n                  Status: Unknown\n                  Type: Series\n          description: \"\"\n      summary: Get parent series\n      tags:\n        - Instances\n  \"/instances/{id}/simplified-tags\":\n    get:\n      deprecated: false\n      description: Get the DICOM tags in human-readable format (same as the `/instances/{id}/tags?simplify` route)\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the DICOM tags and their associated value\n                example:\n                  AccessionNumber: \"0\"\n                  AcquisitionDate: \"20061005\"\n                  AcquisitionNumber: \"3\"\n                  AcquisitionTime: \"101812.967223\"\n                  BitsAllocated: \"16\"\n                  BitsStored: \"12\"\n                  BodyPartExamined: EXTREMITY\n                  Columns: \"512\"\n                  ContentDate: \"20061005\"\n                  ContentTime: \"101812.967223\"\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get human-readable tags\n      tags:\n        - Instances\n  \"/instances/{id}/statistics\":\n    get:\n      deprecated: false\n      description: Get statistics about the given instance\n      parameters:\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  DicomDiskSize: \"526744\"\n                  DicomDiskSizeMB: 0\n                  DicomUncompressedSize: \"526744\"\n                  DicomUncompressedSizeMB: 0\n                  DiskSize: \"539420\"\n                  DiskSizeMB: 0\n                  UncompressedSize: \"539420\"\n                  UncompressedSizeMB: 0\n                properties:\n                  DicomDiskSize:\n                    description: Size on the disk of the DICOM instances associated with the instance, expressed in bytes\n                    type: string\n                  DicomDiskSizeMB:\n                    description: Size on the disk of the DICOM instances associated with the instance, expressed in megabytes (MB)\n                    type: number\n                  DicomUncompressedSize:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the instance, expressed in bytes\n                    type: string\n                  DicomUncompressedSizeMB:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the instance, expressed in megabytes (MB)\n                    type: number\n                  DiskSize:\n                    description: Size of the instance on the disk in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  DiskSizeMB:\n                    description: Size of the instance on the disk, expressed in megabytes (MB)\n                    type: number\n                  UncompressedSize:\n                    description: Size of the instance after decompression in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  UncompressedSizeMB:\n                    description: Size of the instance after decompression, expressed in megabytes (MB). This is different from `DiskSizeMB` iff `StorageCompression` is `true`.\n                    type: number\n          description: \"\"\n      summary: Get instance statistics\n      tags:\n        - Instances\n  \"/instances/{id}/study\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent study of the DICOM instance whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM study\n                example:\n                  ID: 1c379a23-9fd28bba-02b60e5b-850ff34e-4349f09b\n                  IsStable: true\n                  LastUpdate: 20200803T131236\n                  MainDicomTags:\n                    AccessionNumber: \"2819497684894126\"\n                    ReferringPhysicianName: \"\"\n                    StudyDate: \"20091022\"\n                    StudyDescription: RT^HEAD_NECK (Adult)\n                    StudyID: \"\"\n                    StudyInstanceUID: 1.3.6.1.4.1.14519.5.2.1.2193.7172.847236098565581057121195872945\n                    StudyTime: \"172721.327000\"\n                  ParentPatient: 65ce8003-696b2eb6-03adeee7-6561ce8e-3e03f13a\n                  PatientMainDicomTags:\n                    PatientBirthDate: \"\"\n                    PatientID: HN_P001\n                    PatientName: HN_P001\n                    PatientSex: M\n                  Series:\n                    - 9c7031b2-97909802-c35563e6-168bf0af-5cfbdce4\n                    - 1d9c4560-6480f3d9-0a4d3654-65715f38-755ad2e0\n                    - 52f4cb90-29d1d1a2-2ca34edd-4b8851fc-8cb269f2\n                  Type: Study\n          description: \"\"\n      summary: Get parent study\n      tags:\n        - Instances\n  \"/instances/{id}/tags\":\n    get:\n      deprecated: false\n      description: Get the DICOM tags in the specified format. By default, the `full` format is used, which combines hexadecimal tags with human-readable description.\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the DICOM instance of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the DICOM tags and their associated value\n                example:\n                  \"0008,0005\":\n                    Name: SpecificCharacterSet\n                    Type: String\n                    Value: ISO_IR 100\n                  \"0008,0008\":\n                    Name: ImageType\n                    Type: String\n                    Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                  \"0008,0016\":\n                    Name: SOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.2\n                  \"0008,0018\":\n                    Name: SOPInstanceUID\n                    Type: String\n                    Value: 1.3.12.2.1107.5.1.4.54693.30000006100507010800000005269\n                  \"0008,0020\":\n                    Name: StudyDate\n                    Type: String\n                    Value: \"20061005\"\n                  \"0008,0021\":\n                    Name: SeriesDate\n                    Type: String\n                    Value: \"20061005\"\n                  \"0008,0022\":\n                    Name: AcquisitionDate\n                    Type: String\n                    Value: \"20061005\"\n                  \"0008,0023\":\n                    Name: ContentDate\n                    Type: String\n                    Value: \"20061005\"\n                  \"0008,0030\":\n                    Name: StudyTime\n                    Type: String\n                    Value: \"101556.921000\"\n                  \"0008,0031\":\n                    Name: SeriesTime\n                    Type: String\n                    Value: \"102051.046000\"\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get DICOM tags\n      tags:\n        - Instances\n  /jobs:\n    get:\n      deprecated: false\n      description: List all the available jobs\n      parameters:\n        - description: If present, retrieve detailed information about the individual jobs\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing either the jobs identifiers, or detailed information about the reported jobs (if `expand` argument is provided)\n                example:\n                  - 0190e616-f520-4128-98f1-ab681bd4633a\n                  - 0a43a06e-f53a-45e5-8a2e-ce9702f81247\n                  - 4ee11497-4381-4979-b999-d96b9566bef1\n                  - ...\n          description: \"\"\n      summary: List jobs\n      tags:\n        - Jobs\n  \"/jobs/{id}\":\n    get:\n      deprecated: false\n      description: \"Retrieve detailed information about the job whose identifier is provided in the URL: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object detailing the job\n                example:\n                  CompletionTime: 20201227T161842.520129\n                  Content:\n                    ArchiveSizeMB: 22\n                    Description: REST API\n                    InstancesCount: 232\n                    UncompressedSizeMB: 64\n                  CreationTime: 20201227T161836.428311\n                  EffectiveRuntime: 6.081\n                  ErrorCode: 0\n                  ErrorDescription: Success\n                  ID: 645ecb02-7c0e-4465-b767-df873222dcfb\n                  Priority: 0\n                  Progress: 100\n                  State: Success\n                  Timestamp: 20201228T160340.253201\n                  Type: Media\n          description: \"\"\n      summary: Get job\n      tags:\n        - Jobs\n  \"/jobs/{id}/cancel\":\n    post:\n      deprecated: false\n      description: \"Cancel the job whose identifier is provided in the URL. Check out the Orthanc Book for more information about the state machine applicable to jobs: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Cancel job\n      tags:\n        - Jobs\n  \"/jobs/{id}/pause\":\n    post:\n      deprecated: false\n      description: \"Pause the job whose identifier is provided in the URL. Check out the Orthanc Book for more information about the state machine applicable to jobs: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Pause job\n      tags:\n        - Jobs\n  \"/jobs/{id}/resubmit\":\n    post:\n      deprecated: false\n      description: \"Resubmit the job whose identifier is provided in the URL. Check out the Orthanc Book for more information about the state machine applicable to jobs: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Resubmit job\n      tags:\n        - Jobs\n  \"/jobs/{id}/resume\":\n    post:\n      deprecated: false\n      description: \"Resume the job whose identifier is provided in the URL. Check out the Orthanc Book for more information about the state machine applicable to jobs: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Resume job\n      tags:\n        - Jobs\n  \"/jobs/{id}/{key}\":\n    get:\n      deprecated: false\n      description: Retrieve some output produced by a job. As of Orthanc 1.8.2, only the jobs that generate a DICOMDIR media or a ZIP archive provide such an output (with `key` equals to `archive`).\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Name of the output of interest\n          in: path\n          name: key\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: Content of the output of the job\n          description: \"\"\n      summary: Get job output\n      tags:\n        - Jobs\n  /modalities:\n    get:\n      deprecated: false\n      description: List all the DICOM modalities that are known to Orthanc. This corresponds either to the content of the `DicomModalities` configuration option, or to the information stored in the database if `DicomModalitiesInDatabase` is `true`.\n      parameters:\n        - description: If present, retrieve detailed information about the individual DICOM modalities\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing either the identifiers of the modalities, or detailed information about the modalities (if `expand` argument is provided)\n          description: \"\"\n      summary: List DICOM modalities\n      tags:\n        - Networking\n  \"/modalities/{id}\":\n    delete:\n      deprecated: false\n      description: Delete one DICOM modality. This change is permanent iff. `DicomModalitiesInDatabase` is `true`, otherwise it is lost at the next restart of Orthanc.\n      parameters:\n        - description: Identifier of the DICOM modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete DICOM modality\n      tags:\n        - Networking\n    get:\n      deprecated: false\n      description: List the operations that are available for a DICOM modality.\n      parameters:\n        - description: Identifier of the DICOM modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: List of the available operations\n          description: \"\"\n      summary: List operations on modality\n      tags:\n        - Networking\n    put:\n      deprecated: false\n      description: Define a new DICOM modality, or update an existing one. This change is permanent iff. `DicomModalitiesInDatabase` is `true`, otherwise it is lost at the next restart of Orthanc.\n      parameters:\n        - description: Identifier of the new/updated DICOM modality\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                AET:\n                  description: AET of the remote DICOM modality\n                  type: string\n                AllowEcho:\n                  description: Whether to accept C-ECHO SCU commands issued by the remote modality\n                  type: boolean\n                AllowFind:\n                  description: Whether to accept C-FIND SCU commands issued by the remote modality\n                  type: boolean\n                AllowGet:\n                  description: Whether to accept C-GET SCU commands issued by the remote modality\n                  type: boolean\n                AllowMove:\n                  description: Whether to accept C-MOVE SCU commands issued by the remote modality\n                  type: boolean\n                AllowStorageCommitment:\n                  description: Whether to accept storage commitment requests issued by the remote modality\n                  type: boolean\n                AllowStore:\n                  description: Whether to accept C-STORE SCU commands issued by the remote modality\n                  type: boolean\n                AllowTranscoding:\n                  description: Whether to allow transcoding for operations initiated by this modality. This option applies to Orthanc C-GET SCP and to Orthanc C-STORE SCU. It only has an effect if the global option `EnableTranscoding` is set to `true`.\n                  type: boolean\n                Host:\n                  description: Host address of the remote DICOM modality (typically, an IP address)\n                  type: string\n                Manufacturer:\n                  description: Manufacturer of the remote DICOM modality (check configuration option `DicomModalities` for possible values\n                  type: string\n                Port:\n                  description: TCP port of the remote DICOM modality\n                  type: number\n                UseDicomTls:\n                  description: Whether to use DICOM TLS in the SCU connection initiated by Orthanc (new in Orthanc 1.9.0)\n                  type: boolean\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Update DICOM modality\n      tags:\n        - Networking\n  \"/modalities/{id}/configuration\":\n    get:\n      deprecated: false\n      description: Get detailed information about the configuration of some DICOM modality\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Configuration of the modality\n                example:\n                  AET: ORTHANCTEST\n                  AllowEcho: true\n                  AllowEventReport: true\n                  AllowFind: true\n                  AllowGet: true\n                  AllowMove: true\n                  AllowNAction: true\n                  AllowStore: true\n                  AllowTranscoding: true\n                  Host: 127.0.1.1\n                  Manufacturer: Generic\n                  Port: 5001\n          description: \"\"\n      summary: Get modality configuration\n      tags:\n        - Networking\n  \"/modalities/{id}/echo\":\n    post:\n      deprecated: false\n      description: \"Trigger C-ECHO SCU command against the DICOM modality whose identifier is provided in URL: https://book.orthanc-server.com/users/rest.html#performing-c-echo\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                CheckFind:\n                  description: Issue a dummy C-FIND command after the C-GET SCU, in order to check whether the remote modality knows about Orthanc. This field defaults to the value of the `DicomEchoChecksFind` configuration option. New in Orthanc 1.8.1.\n                  type: boolean\n                Timeout:\n                  description: Timeout for the C-ECHO command, in seconds\n                  type: number\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Trigger C-ECHO SCU\n      tags:\n        - Networking\n  \"/modalities/{id}/find\":\n    post:\n      deprecated: true\n      description: Trigger a sequence of C-FIND SCU commands against the DICOM modality whose identifier is provided in URL, in order to discover a hierarchy of matching patients/studies/series. Deprecated in favor of `/modalities/{id}/query`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Associative array containing the query on the values of the DICOM tags\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching patients, embedding the matching studies, then the matching series.\n          description: \"\"\n      summary: Hierarchical C-FIND SCU\n      tags:\n        - Networking\n  \"/modalities/{id}/find-instance\":\n    post:\n      deprecated: true\n      description: Trigger C-FIND SCU command against the DICOM modality whose identifier is provided in URL, in order to find an instance. Deprecated in favor of `/modalities/{id}/query`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Associative array containing the query on the values of the DICOM tags\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching instances\n          description: \"\"\n      summary: C-FIND SCU for instances\n      tags:\n        - Networking\n  \"/modalities/{id}/find-patient\":\n    post:\n      deprecated: true\n      description: Trigger C-FIND SCU command against the DICOM modality whose identifier is provided in URL, in order to find a patient. Deprecated in favor of `/modalities/{id}/query`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Associative array containing the query on the values of the DICOM tags\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching patients\n          description: \"\"\n      summary: C-FIND SCU for patients\n      tags:\n        - Networking\n  \"/modalities/{id}/find-series\":\n    post:\n      deprecated: true\n      description: Trigger C-FIND SCU command against the DICOM modality whose identifier is provided in URL, in order to find a series. Deprecated in favor of `/modalities/{id}/query`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Associative array containing the query on the values of the DICOM tags\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching series\n          description: \"\"\n      summary: C-FIND SCU for series\n      tags:\n        - Networking\n  \"/modalities/{id}/find-study\":\n    post:\n      deprecated: true\n      description: Trigger C-FIND SCU command against the DICOM modality whose identifier is provided in URL, in order to find a study. Deprecated in favor of `/modalities/{id}/query`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Associative array containing the query on the values of the DICOM tags\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching studies\n          description: \"\"\n      summary: C-FIND SCU for studies\n      tags:\n        - Networking\n  \"/modalities/{id}/find-worklist\":\n    post:\n      deprecated: false\n      description: Trigger C-FIND SCU command against the remote worklists of the DICOM modality whose identifier is provided in URL\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Full:\n                  description: If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n                  type: boolean\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Short:\n                  description: If set to `true`, report the DICOM tags in hexadecimal format\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array describing the DICOM tags of the matching worklists\n          description: \"\"\n      summary: C-FIND SCU for worklist\n      tags:\n        - Networking\n  \"/modalities/{id}/move\":\n    post:\n      deprecated: false\n      description: \"Start a C-MOVE SCU command as a job, in order to drive the execution of a sequence of C-STORE commands by some remote DICOM modality whose identifier is provided in the URL: https://book.orthanc-server.com/users/rest.html#performing-c-move\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Level:\n                  description: Level of the query (`Patient`, `Study`, `Series` or `Instance`)\n                  type: string\n                LocalAet:\n                  description: Local AET that is used for this commands, defaults to `DicomAet` configuration option. Ignored if `DicomModalities` already sets `LocalAet` for this modality.\n                  type: string\n                Resources:\n                  description: List of the Orthanc identifiers of all the DICOM resources to be sent\n                  items:\n                    type: string\n                  type: array\n                TargetAet:\n                  description: Target AET that will be used by the remote DICOM modality as a target for its C-STORE SCU commands, defaults to `DicomAet` configuration option in order to do a simple query/retrieve\n                  type: string\n                Timeout:\n                  description: Timeout for the C-STORE command, in seconds\n                  type: number\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Trigger C-MOVE SCU\n      tags:\n        - Networking\n  \"/modalities/{id}/query\":\n    post:\n      deprecated: false\n      description: \"Trigger C-FIND SCU command against the DICOM modality whose identifier is provided in URL: https://book.orthanc-server.com/users/rest.html#performing-query-retrieve-c-find-and-find-with-rest\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Level:\n                  description: Level of the query (`Patient`, `Study`, `Series` or `Instance`)\n                  type: string\n                LocalAet:\n                  description: Local AET that is used for this commands, defaults to `DicomAet` configuration option. Ignored if `DicomModalities` already sets `LocalAet` for this modality.\n                  type: string\n                Normalize:\n                  description: Whether to normalize the query, i.e. whether to wipe out from the query, the DICOM tags that are not applicable for the query-retrieve level of interest\n                  type: boolean\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Timeout:\n                  description: Timeout for the C-FIND command and subsequent C-MOVE retrievals, in seconds (new in Orthanc 1.9.1)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Identifier of the query, to be used with `/queries/{id}`\n                    type: object\n                  Path:\n                    description: Root path to the query in the REST API\n                    type: object\n          description: \"\"\n      summary: Trigger C-FIND SCU\n      tags:\n        - Networking\n  \"/modalities/{id}/storage-commitment\":\n    post:\n      deprecated: false\n      description: \"Trigger a storage commitment request to some remote DICOM modality whose identifier is provided in the URL: https://book.orthanc-server.com/users/storage-commitment.html#storage-commitment-scu\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                DicomInstances:\n                  description: List of DICOM resources that are not necessarily stored within Orthanc, but that must be checked by storage commitment. This is a list of JSON objects that must contain the `SOPClassUID` and `SOPInstanceUID` fields.\n                  items:\n                    type: object\n                  type: array\n                Resources:\n                  description: List of the Orthanc identifiers of the DICOM resources to be checked by storage commitment\n                  items:\n                    type: string\n                  type: array\n                Timeout:\n                  description: Timeout for the storage commitment command (new in Orthanc 1.9.1)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Identifier of the storage commitment report, to be used with `/storage-commitment/{id}`\n                    type: object\n                  Path:\n                    description: Root path to the storage commitment report in the REST API\n                    type: object\n          description: \"\"\n      summary: Trigger storage commitment request\n      tags:\n        - Networking\n  \"/modalities/{id}/store\":\n    post:\n      deprecated: false\n      description: \"Start a C-STORE SCU command as a job, in order to send DICOM resources stored locally to some remote DICOM modality whose identifier is provided in the URL: https://book.orthanc-server.com/users/rest.html#rest-store-scu\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                LocalAet:\n                  description: Local AET that is used for this commands, defaults to `DicomAet` configuration option. Ignored if `DicomModalities` already sets `LocalAet` for this modality.\n                  type: string\n                MoveOriginatorAet:\n                  description: Move originator AET that is used for this commands, in order to fake a C-MOVE SCU\n                  type: string\n                MoveOriginatorID:\n                  description: Move originator ID that is used for this commands, in order to fake a C-MOVE SCU\n                  type: number\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: List of the Orthanc identifiers of all the DICOM resources to be sent\n                  items:\n                    type: string\n                  type: array\n                StorageCommitment:\n                  description: \"Whether to chain C-STORE with DICOM storage commitment to validate the success of the transmission: https://book.orthanc-server.com/users/storage-commitment.html#chaining-c-store-with-storage-commitment\"\n                  type: boolean\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Timeout:\n                  description: Timeout for the C-STORE command, in seconds\n                  type: number\n          text/plain:\n            schema:\n              description: The Orthanc identifier of one resource to be sent\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Trigger C-STORE SCU\n      tags:\n        - Networking\n  \"/modalities/{id}/store-straight\":\n    post:\n      deprecated: false\n      description: Synchronously send the DICOM instance in the POST body to the remote DICOM modality whose identifier is provided in URL, without having to first store it locally within Orthanc. This is an alternative to command-line tools such as `storescu` from DCMTK or dcm4che.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/dicom:\n            schema:\n              description: DICOM instance to be sent\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  SOPClassUID:\n                    description: SOP class UID of the DICOM instance, if the C-STORE SCU has succeeded\n                    type: string\n                  SOPInstanceUID:\n                    description: SOP instance UID of the DICOM instance, if the C-STORE SCU has succeeded\n                    type: string\n          description: \"\"\n      summary: Straight C-STORE SCU\n      tags:\n        - Networking\n  /patients:\n    get:\n      deprecated: false\n      description: List the Orthanc identifiers of all the available DICOM patients\n      parameters:\n        - description: If present, retrieve detailed information about the individual patients\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing either the Orthanc identifiers, or detailed information about the reported patients (if `expand` argument is provided)\n                example:\n                  - 0946fcb6-cf12ab43-bad958c1-bf057ad5-0fc6f54c\n                  - da39a3ee-5e6b4b0d-3255bfef-95601890-afd80709\n          description: \"\"\n      summary: List the available patients\n      tags:\n        - Patients\n  \"/patients/{id}\":\n    delete:\n      deprecated: false\n      description: Delete the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete some patient\n      tags:\n        - Patients\n    get:\n      deprecated: false\n      description: Get detailed information about the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM patient\n                example:\n                  ID: 46e6332c-677825b6-202fcf7c-f787bc5f-7b07c382\n                  IsStable: true\n                  LastUpdate: 20180414T091542\n                  MainDicomTags:\n                    PatientID: SOtNwu\n                    PatientName: INCISIX\n                  Studies:\n                    - e98b9ac7-dd31ac40-ff046cb2-f0400d30-12f81d85\n                  Type: Patient\n          description: \"\"\n      summary: Get information about some patient\n      tags:\n        - Patients\n  \"/patients/{id}/anonymize\":\n    post:\n      deprecated: false\n      description: Start a job that will anonymize all the DICOM instances within the patient whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new patient, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#anonymization-of-patients-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                DicomVersion:\n                  description: Version of the DICOM standard to be used for anonymization. Check out configuration option `DeidentifyLogsDicomVersion` for possible values.\n                  type: string\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: List of DICOM tags whose value must not be destroyed by the anonymization. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                KeepPrivateTags:\n                  description: Keep the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of additional tags to be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Anonymize patient\n      tags:\n        - Patients\n  \"/patients/{id}/archive\":\n    get:\n      deprecated: false\n      description: Synchronously create a ZIP archive containing the DICOM patient whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Patients\n    post:\n      deprecated: false\n      description: Create a ZIP archive containing the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Patients\n  \"/patients/{id}/attachments\":\n    get:\n      deprecated: false\n      description: Get the list of attachments that are associated with the given patient\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the attachments\n                example: []\n          description: \"\"\n      summary: List attachments\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}\":\n    delete:\n      deprecated: false\n      description: Delete an attachment associated with the given DICOM patient. This call will fail if trying to delete a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete attachment\n      tags:\n        - Patients\n    get:\n      deprecated: false\n      description: Get the list of the operations that are available for attachments associated with the given patient\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - compress\n                  - compressed-data\n                  - compressed-md5\n                  - compressed-size\n                  - data\n                  - is-compressed\n                  - md5\n                  - size\n                  - uncompress\n                  - verify-md5\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: List operations on attachments\n      tags:\n        - Other\n    put:\n      deprecated: false\n      description: Attach a file to the given DICOM patient. This call will fail if trying to modify a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, if this is not the first time this attachment is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              description: Binary data containing the attachment\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Set attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/compress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Compress attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/compressed-data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given patient. The attachment will not be decompressed if `StorageCompression` is `true`.\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment (no decompression)\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/compressed-md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given patient, as stored on the disk. This is different from `.../md5` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment on disk\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/compressed-size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given patient, as stored on the disk. This is different from `.../size` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment on disk\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given patient\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/is-compressed\":\n    get:\n      deprecated: false\n      description: Test whether the attachment has been stored as a compressed file on the disk.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`0` if the attachment was stored uncompressed, `1` if it was compressed\"\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Is attachment compressed?\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given patient\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given patient\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/uncompress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Uncompress attachment\n      tags:\n        - Patients\n  \"/patients/{id}/attachments/{name}/verify-md5\":\n    post:\n      deprecated: false\n      description: Verify that the attachment is not corrupted, by validating its MD5 hash\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: On success, a valid JSON object is returned\n          description: \"\"\n      summary: Verify attachment\n      tags:\n        - Patients\n  \"/patients/{id}/instances\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child instances of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM instances\n                example:\n                  - FileSize: 526866\n                    FileUuid: c14b2b87-53e2-420b-baf9-020cae34fedf\n                    ID: e3dfd688-80e4743a-29c45f90-371ec4a4-04d18ae5\n                    IndexInSeries: 137\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -96.3193359375\\-249.3193359375\\62\n                      InstanceNumber: \"137\"\n                      SOPInstanceUID: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014881\n                    \"{...}\": ...\n                  - FileSize: 526870\n                    FileUuid: 27cdb02f-500f-4b37-9ca1-058d8d4f649a\n                    ID: 4fecddf1-518346e4-4f30176b-c453b3d8-65899230\n                    IndexInSeries: 114\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -96.3193359375\\-249.3193359375\\73.5\n                      InstanceNumber: \"114\"\n                      SOPInstanceUID: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014858\n                    \"{...}\": ...\n                  - FileSize: 526868\n                    FileUuid: 5a6334a8-e050-47e5-8832-531ee62aa9a7\n                    ID: c9a55bc1-9e98ba4b-bc455dc3-24c4c525-1b171b6c\n                    IndexInSeries: 66\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -96.3193359375\\-249.3193359375\\97.5\n                      InstanceNumber: \"66\"\n                      SOPInstanceUID: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014810\n                    \"{...}\": ...\n                  - FileSize: 526866\n                    FileUuid: e6c09e08-8284-4416-a90f-67a7dc9f68f0\n                    ID: 135cca6f-4c099fdd-afc99251-f58a819b-5a0222eb\n                    IndexInSeries: 161\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -96.3193359375\\-249.3193359375\\50\n                      InstanceNumber: \"161\"\n                      SOPInstanceUID: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014905\n                    \"{...}\": ...\n                  - FileSize: 526866\n                    FileUuid: 9eb33412-d1e9-4bb0-879b-5501db81d574\n                    ID: 719d58b1-2a259486-7cc5919d-68a2bd30-da2cd290\n                    IndexInSeries: 61\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -96.3193359375\\-249.3193359375\\100\n                      InstanceNumber: \"61\"\n                      SOPInstanceUID: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014805\n                    \"{...}\": ...\n                  - ...\n          description: \"\"\n      summary: Get child instances\n      tags:\n        - Patients\n  \"/patients/{id}/instances-tags\":\n    get:\n      deprecated: false\n      description: Get the tags of all the child instances of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags\n                example:\n                  011ead8d-f2508edd-da315604-80b002df-e678b796:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"0008,0018\":\n                      Name: SOPInstanceUID\n                      Type: String\n                      Value: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014840\n                    \"0008,0020\":\n                      Name: StudyDate\n                      Type: String\n                      Value: \"20060531\"\n                    \"{...}\": ...\n                  01252811-30d1c47b-a8c03da5-73177742-48495192:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"0008,0018\":\n                      Name: SOPInstanceUID\n                      Type: String\n                      Value: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014790\n                    \"0008,0020\":\n                      Name: StudyDate\n                      Type: String\n                      Value: \"20060531\"\n                    \"{...}\": ...\n                  04a30982-835a4b0a-3082b997-060f01f5-071a0f8d:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"0008,0018\":\n                      Name: SOPInstanceUID\n                      Type: String\n                      Value: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014760\n                    \"0008,0020\":\n                      Name: StudyDate\n                      Type: String\n                      Value: \"20060531\"\n                    \"{...}\": ...\n                  04efd8b9-2ae1f3db-deb0f226-e3267002-6cd8fa3c:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"0008,0018\":\n                      Name: SOPInstanceUID\n                      Type: String\n                      Value: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014832\n                    \"0008,0020\":\n                      Name: StudyDate\n                      Type: String\n                      Value: \"20060531\"\n                    \"{...}\": ...\n                  0df992f4-0a841d5c-aeb8cdda-9c1a0573-dbd49c3f:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"0008,0018\":\n                      Name: SOPInstanceUID\n                      Type: String\n                      Value: 1.3.12.2.1107.5.1.4.54693.30000006053107175587500014882\n                    \"0008,0020\":\n                      Name: StudyDate\n                      Type: String\n                      Value: \"20060531\"\n                    \"{...}\": ...\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get tags of instances\n      tags:\n        - Patients\n  \"/patients/{id}/media\":\n    get:\n      deprecated: false\n      description: Synchronously create a DICOMDIR media containing the DICOM patient whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*\n          in: query\n          name: extended\n          required: false\n          schema:\n            type: string\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Patients\n    post:\n      deprecated: false\n      description: Create a DICOMDIR media containing the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Extended:\n                  description: If `true`, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*. Default value is `false`.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Patients\n  \"/patients/{id}/metadata\":\n    get:\n      deprecated: false\n      description: Get the list of metadata that are associated with the given patient\n      parameters:\n        - description: If present, also retrieve the value of the individual metadata\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)\n                example:\n                  - LastUpdate\n          description: \"\"\n      summary: List metadata\n      tags:\n        - Patients\n  \"/patients/{id}/metadata/{name}\":\n    delete:\n      deprecated: false\n      description: Delete some metadata associated with the given DICOM patient. This call will fail if trying to delete a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete metadata\n      tags:\n        - Patients\n    get:\n      deprecated: false\n      description: Get the value of a metadata that is associated with the given patient\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Value of the metadata\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the metadata, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get metadata\n      tags:\n        - Patients\n    put:\n      deprecated: false\n      description: Set the value of some metadata in the given DICOM patient. This call will fail if trying to modify a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, if this is not the first time this metadata is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: String value of the metadata\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set metadata\n      tags:\n        - Patients\n  \"/patients/{id}/modify\":\n    post:\n      deprecated: false\n      description: Start a job that will modify all the DICOM instances within the patient whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new patient, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#modification-of-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: Keep the original value of the specified tags, to be chosen among the `StudyInstanceUID`, `SeriesInstanceUID` and `SOPInstanceUID` tags. Avoid this feature as much as possible, as this breaks the DICOM model of the real world.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of tags that must be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                RemovePrivateTags:\n                  description: Remove the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"Transcode the DICOM instances to the provided DICOM transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Modify patient\n      tags:\n        - Patients\n  \"/patients/{id}/module\":\n    get:\n      deprecated: false\n      description: Get the patient module of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM patient\n                example:\n                  \"0010,0010\":\n                    Name: PatientName\n                    Type: String\n                    Value: INCISIX\n                  \"0010,0020\":\n                    Name: PatientID\n                    Type: String\n                    Value: SOtNwu\n          description: \"\"\n      summary: Get patient module\n      tags:\n        - Patients\n  \"/patients/{id}/protected\":\n    get:\n      deprecated: false\n      description: Is the patient protected against recycling?\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`1` if protected, `0` if not protected\"\n          description: \"\"\n      summary: Is the patient protected against recycling?\n      tags:\n        - Patients\n    put:\n      deprecated: false\n      description: Check out configuration options `MaximumStorageSize` and `MaximumPatientCount`\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Protect one patient against recycling\n      tags:\n        - Patients\n  \"/patients/{id}/reconstruct\":\n    post:\n      deprecated: false\n      description: Reconstruct the main DICOM tags of the patient whose Orthanc identifier is provided in the URL. This is useful if child studies/series/instances have inconsistent values for higher-level tags, in order to force Orthanc to use the value from the resource of interest. Beware that this is a time-consuming operation, as all the children DICOM instances will be parsed again, and the Orthanc index will be updated accordingly.\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Reconstruct tags of patient\n      tags:\n        - Patients\n  \"/patients/{id}/series\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child series of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM series\n                example:\n                  - ExpectedNumberOfInstances: null\n                    ID: 52cc572c-3ee31930-c4b6d5e7-16c786dc-97bc209b\n                    Instances:\n                      - e3dfd688-80e4743a-29c45f90-371ec4a4-04d18ae5\n                      - 4fecddf1-518346e4-4f30176b-c453b3d8-65899230\n                      - c9a55bc1-9e98ba4b-bc455dc3-24c4c525-1b171b6c\n                      - 135cca6f-4c099fdd-afc99251-f58a819b-5a0222eb\n                      - 719d58b1-2a259486-7cc5919d-68a2bd30-da2cd290\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091542\n                    \"{...}\": ...\n          description: \"\"\n      summary: Get child series\n      tags:\n        - Patients\n  \"/patients/{id}/shared-tags\":\n    get:\n      deprecated: false\n      description: Extract the DICOM tags whose value is constant across all the child instances of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the values of the DICOM tags\n                example:\n                  \"0008,0005\":\n                    Name: SpecificCharacterSet\n                    Type: String\n                    Value: ISO_IR 100\n                  \"0008,0008\":\n                    Name: ImageType\n                    Type: String\n                    Value: ORIGINAL\\PRIMARY\\AXIAL\\CT_SOM5 SPI\n                  \"0008,0016\":\n                    Name: SOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.2\n                  \"0008,0020\":\n                    Name: StudyDate\n                    Type: String\n                    Value: \"20060531\"\n                  \"0008,0021\":\n                    Name: SeriesDate\n                    Type: String\n                    Value: \"20060531\"\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get shared tags\n      tags:\n        - Patients\n  \"/patients/{id}/statistics\":\n    get:\n      deprecated: false\n      description: Get statistics about the given patient\n      parameters:\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  CountInstances: 166\n                  CountSeries: 1\n                  CountStudies: 1\n                  DicomDiskSize: \"87460012\"\n                  DicomDiskSizeMB: 83\n                  DicomUncompressedSize: \"87460012\"\n                  DicomUncompressedSizeMB: 83\n                  DiskSize: \"89640436\"\n                  DiskSizeMB: 85\n                  UncompressedSize: \"89640436\"\n                  UncompressedSizeMB: 85\n                properties:\n                  CountInstances:\n                    description: Number of child instances within this patient\n                    type: number\n                  CountSeries:\n                    description: Number of child series within this patient\n                    type: number\n                  CountStudies:\n                    description: Number of child studies within this patient\n                    type: number\n                  DicomDiskSize:\n                    description: Size on the disk of the DICOM instances associated with the patient, expressed in bytes\n                    type: string\n                  DicomDiskSizeMB:\n                    description: Size on the disk of the DICOM instances associated with the patient, expressed in megabytes (MB)\n                    type: number\n                  DicomUncompressedSize:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the patient, expressed in bytes\n                    type: string\n                  DicomUncompressedSizeMB:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the patient, expressed in megabytes (MB)\n                    type: number\n                  DiskSize:\n                    description: Size of the patient on the disk in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  DiskSizeMB:\n                    description: Size of the patient on the disk, expressed in megabytes (MB)\n                    type: number\n                  UncompressedSize:\n                    description: Size of the patient after decompression in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  UncompressedSizeMB:\n                    description: Size of the patient after decompression, expressed in megabytes (MB). This is different from `DiskSizeMB` iff `StorageCompression` is `true`.\n                    type: number\n          description: \"\"\n      summary: Get patient statistics\n      tags:\n        - Patients\n  \"/patients/{id}/studies\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child studies of the DICOM patient whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the patient of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM studies\n                example:\n                  - ID: e98b9ac7-dd31ac40-ff046cb2-f0400d30-12f81d85\n                    IsStable: true\n                    LastUpdate: 20180414T091542\n                    MainDicomTags:\n                      AccessionNumber: \"0\"\n                      InstitutionName: dPJ\n                      ReferringPhysicianName: YzTEkpkak0p0Tk5\n                      RequestedProcedureDescription: CT2 tête, face, sinus\n                      StudyDate: \"20060531\"\n                      \"{...}\": ...\n                    ParentPatient: 46e6332c-677825b6-202fcf7c-f787bc5f-7b07c382\n                    \"{...}\": ...\n          description: \"\"\n      summary: Get child studies\n      tags:\n        - Patients\n  /peers:\n    get:\n      deprecated: false\n      description: List all the Orthanc peers that are known to Orthanc. This corresponds either to the content of the `OrthancPeers` configuration option, or to the information stored in the database if `OrthancPeersInDatabase` is `true`.\n      parameters:\n        - description: If present, retrieve detailed information about the individual Orthanc peers\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing either the identifiers of the peers, or detailed information about the peers (if `expand` argument is provided)\n          description: \"\"\n      summary: List Orthanc peers\n      tags:\n        - Networking\n  \"/peers/{id}\":\n    delete:\n      deprecated: false\n      description: Delete one Orthanc peer. This change is permanent iff. `OrthancPeersInDatabase` is `true`, otherwise it is lost at the next restart of Orthanc.\n      parameters:\n        - description: Identifier of the Orthanc peer of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete Orthanc peer\n      tags:\n        - Networking\n    get:\n      deprecated: false\n      description: List the operations that are available for an Orthanc peer.\n      parameters:\n        - description: Identifier of the peer of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: List of the available operations\n          description: \"\"\n      summary: List operations on peer\n      tags:\n        - Networking\n    put:\n      deprecated: false\n      description: Define a new Orthanc peer, or update an existing one. This change is permanent iff. `OrthancPeersInDatabase` is `true`, otherwise it is lost at the next restart of Orthanc.\n      parameters:\n        - description: Identifier of the new/updated Orthanc peer\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                CertificateFile:\n                  description: SSL certificate for the HTTPS connections\n                  type: string\n                CertificateKeyFile:\n                  description: Key file for the SSL certificate for the HTTPS connections\n                  type: string\n                CertificateKeyPassword:\n                  description: Key password for the SSL certificate for the HTTPS connections\n                  type: string\n                HttpHeaders:\n                  description: HTTP headers to be used for the connections to the remote peer\n                  type: object\n                Password:\n                  description: Password for the credentials\n                  type: string\n                URL:\n                  description: URL of the root of the REST API of the remote Orthanc peer, for instance `http://localhost:8042/`\n                  type: string\n                Username:\n                  description: Username for the credentials\n                  type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Update Orthanc peer\n      tags:\n        - Networking\n  \"/peers/{id}/configuration\":\n    get:\n      deprecated: false\n      description: Get detailed information about the configuration of some Orthanc peer\n      parameters:\n        - description: Identifier of the peer of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Configuration of the peer\n                example:\n                  HttpHeaders: {}\n                  Password: null\n                  Pkcs11: false\n                  Url: http://127.0.1.1:5000/\n                  Username: alice\n          description: \"\"\n      summary: Get peer configuration\n      tags:\n        - Networking\n  \"/peers/{id}/store\":\n    post:\n      deprecated: false\n      description: \"Send DICOM resources stored locally to some remote Orthanc peer whose identifier is provided in the URL: https://book.orthanc-server.com/users/rest.html#sending-one-resource\"\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Compress:\n                  description: Whether to compress the DICOM instances using gzip before the actual sending\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: List of the Orthanc identifiers of all the DICOM resources to be sent\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: Transcode to the provided DICOM transfer syntax before the actual sending\n                  type: string\n          text/plain:\n            schema:\n              description: The Orthanc identifier of one resource to be sent\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Send to Orthanc peer\n      tags:\n        - Networking\n  \"/peers/{id}/store-straight\":\n    post:\n      deprecated: false\n      description: Synchronously send the DICOM instance in the POST body to the Orthanc peer whose identifier is provided in URL, without having to first store it locally within Orthanc. This is an alternative to command-line tools such as `curl`.\n      parameters:\n        - description: Identifier of the modality of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/dicom:\n            schema:\n              description: DICOM instance to be sent\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Orthanc identifier of the DICOM instance in the remote Orthanc peer\n                    type: string\n                  ParentPatient:\n                    description: Orthanc identifier of the parent patient in the remote Orthanc peer\n                    type: string\n                  ParentSeries:\n                    description: Orthanc identifier of the parent series in the remote Orthanc peer\n                    type: string\n                  ParentStudy:\n                    description: Orthanc identifier of the parent study in the remote Orthanc peer\n                    type: string\n                  Path:\n                    description: Path to the DICOM instance in the remote Orthanc server\n                    type: string\n                  Status:\n                    description: Status of the store operation\n                    type: string\n          description: \"\"\n      summary: Straight store to peer\n      tags:\n        - Networking\n  \"/peers/{id}/system\":\n    get:\n      deprecated: false\n      description: Get system information about some Orthanc peer. This corresponds to doing a `GET` request against the `/system` URI of the remote peer. This route can be used to test connectivity.\n      parameters:\n        - description: Identifier of the peer of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: System information about the peer\n          description: \"\"\n      summary: Get peer system information\n      tags:\n        - Networking\n  /plugins:\n    get:\n      deprecated: false\n      description: List all the installed plugins\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the identifiers of the installed plugins\n                example:\n                  - explorer.js\n                  - authorization\n                  - connectivity-checks\n                  - dicom-web\n                  - gdcm\n                  - mysql-index\n                  - mysql-storage\n                  - postgresql-index\n                  - postgresql-storage\n                  - serve-folders\n                  - stone-webviewer\n                  - transfers\n                  - web-viewer\n                  - worklists\n                  - wsi\n          description: \"\"\n      summary: List plugins\n      tags:\n        - System\n  /plugins/explorer.js:\n    get:\n      deprecated: false\n      description: Get the JavaScript extensions that are installed by all the plugins using the `OrthancPluginExtendOrthancExplorer()` function of the plugin SDK. This route is for internal use of Orthanc Explorer.\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/javascript:\n              examples: {}\n              schema:\n                description: The JavaScript extensions\n          description: \"\"\n      summary: JavaScript extensions to Orthanc Explorer\n      tags:\n        - System\n  \"/plugins/{id}\":\n    get:\n      deprecated: false\n      description: Get system information about the plugin whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the job of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing information about the plugin\n                example:\n                  Description: Implementation of DICOMweb (QIDO-RS, STOW-RS and WADO-RS) and WADO-URI.\n                  ExtendsOrthancExplorer: true\n                  ID: dicom-web\n                  RootUri: ../dicom-web/app/client/index.html\n                  Version: \"1.6\"\n          description: \"\"\n      summary: Get plugin\n      tags:\n        - System\n  /queries:\n    get:\n      deprecated: false\n      description: List the identifiers of all the query/retrieve operations on DICOM modalities, as initiated by calls to `/modalities/{id}/query`. The length of this list is bounded by the `QueryRetrieveSize` configuration option of Orthanc. https://book.orthanc-server.com/users/rest.html#performing-query-retrieve-c-find-and-find-with-rest\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the identifiers\n          description: \"\"\n      summary: List query/retrieve operations\n      tags:\n        - Networking\n  \"/queries/{id}\":\n    delete:\n      deprecated: false\n      description: Delete the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete a query\n      tags:\n        - Networking\n    get:\n      deprecated: false\n      description: List the available operations for the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the list of operations\n          description: \"\"\n      summary: List operations on a query\n      tags:\n        - Networking\n  \"/queries/{id}/answers\":\n    get:\n      deprecated: false\n      description: List the indices of all the available answers resulting from a query/retrieve operation on some DICOM modality, whose identifier is provided in the URL\n      parameters:\n        - description: If present, retrieve detailed information about the individual answers\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the indices of the answers, or detailed information about the reported answers (if `expand` argument is provided)\n          description: \"\"\n      summary: List answers to a query\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}\":\n    get:\n      deprecated: false\n      description: List the available operations on an answer associated with the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the list of operations\n          description: \"\"\n      summary: List operations on an answer\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}/content\":\n    get:\n      deprecated: false\n      description: Get the content (DICOM tags) of one answer associated with the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON object containing the DICOM tags of the answer\n          description: \"\"\n      summary: Get one answer\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}/query-instances\":\n    post:\n      deprecated: false\n      description: Issue a second DICOM C-FIND operation, in order to query the child instances associated with one answer to some query/retrieve operation whose identifiers are provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Timeout:\n                  description: Timeout for the C-FIND command, in seconds (new in Orthanc 1.9.1)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Identifier of the query, to be used with `/queries/{id}`\n                    type: object\n                  Path:\n                    description: Root path to the query in the REST API\n                    type: object\n          description: \"\"\n      summary: Query the child instances of an answer\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}/query-series\":\n    post:\n      deprecated: false\n      description: Issue a second DICOM C-FIND operation, in order to query the child series associated with one answer to some query/retrieve operation whose identifiers are provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Timeout:\n                  description: Timeout for the C-FIND command, in seconds (new in Orthanc 1.9.1)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Identifier of the query, to be used with `/queries/{id}`\n                    type: object\n                  Path:\n                    description: Root path to the query in the REST API\n                    type: object\n          description: \"\"\n      summary: Query the child series of an answer\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}/query-studies\":\n    post:\n      deprecated: false\n      description: Issue a second DICOM C-FIND operation, in order to query the child studies associated with one answer to some query/retrieve operation whose identifiers are provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Timeout:\n                  description: Timeout for the C-FIND command, in seconds (new in Orthanc 1.9.1)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Identifier of the query, to be used with `/queries/{id}`\n                    type: object\n                  Path:\n                    description: Root path to the query in the REST API\n                    type: object\n          description: \"\"\n      summary: Query the child studies of an answer\n      tags:\n        - Networking\n  \"/queries/{id}/answers/{index}/retrieve\":\n    post:\n      deprecated: false\n      description: \"Start a C-MOVE SCU command as a job, in order to retrieve one answer associated with the query/retrieve operation whose identifiers are provided in the URL: https://book.orthanc-server.com/users/rest.html#performing-retrieve-c-move\"\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Index of the answer\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Full:\n                  description: If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Simplify:\n                  description: If set to `true`, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n                  type: boolean\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                TargetAet:\n                  description: AET of the target modality. By default, the AET of Orthanc is used, as defined in the `DicomAet` configuration option.\n                  type: string\n                Timeout:\n                  description: Timeout for the C-MOVE command, in seconds\n                  type: number\n          text/plain:\n            schema:\n              description: AET of the target modality\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Retrieve one answer\n      tags:\n        - Networking\n  \"/queries/{id}/level\":\n    get:\n      deprecated: false\n      description: Get the query level (value of the `QueryRetrieveLevel` tag) of the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The level\n          description: \"\"\n      summary: Get level of original query\n      tags:\n        - Networking\n  \"/queries/{id}/modality\":\n    get:\n      deprecated: false\n      description: Get the identifier of the DICOM modality that was targeted by the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The identifier of the DICOM modality\n          description: \"\"\n      summary: Get modality of original query\n      tags:\n        - Networking\n  \"/queries/{id}/query\":\n    get:\n      deprecated: false\n      description: Get the original DICOM filter associated with the query/retrieve operation whose identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Content of the original query\n          description: \"\"\n      summary: Get original query arguments\n      tags:\n        - Networking\n  \"/queries/{id}/retrieve\":\n    post:\n      deprecated: false\n      description: \"Start a C-MOVE SCU command as a job, in order to retrieve all the answers associated with the query/retrieve operation whose identifier is provided in the URL: https://book.orthanc-server.com/users/rest.html#performing-retrieve-c-move\"\n      parameters:\n        - description: Identifier of the query of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Full:\n                  description: If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Simplify:\n                  description: If set to `true`, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n                  type: boolean\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                TargetAet:\n                  description: AET of the target modality. By default, the AET of Orthanc is used, as defined in the `DicomAet` configuration option.\n                  type: string\n                Timeout:\n                  description: Timeout for the C-MOVE command, in seconds\n                  type: number\n          text/plain:\n            schema:\n              description: AET of the target modality\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Retrieve all answers\n      tags:\n        - Networking\n  /series:\n    get:\n      deprecated: false\n      description: List the Orthanc identifiers of all the available DICOM series\n      parameters:\n        - description: If present, retrieve detailed information about the individual series\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing either the Orthanc identifiers, or detailed information about the reported series (if `expand` argument is provided)\n                example:\n                  - 318603c5-03e8cffc-a82b6ee1-3ccd3c1e-18d7e3bb\n                  - 7124dba7-09803f33-98b73826-33f14632-ea842d29\n          description: \"\"\n      summary: List the available series\n      tags:\n        - Series\n  \"/series/{id}\":\n    delete:\n      deprecated: false\n      description: Delete the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete some series\n      tags:\n        - Series\n    get:\n      deprecated: false\n      description: Get detailed information about the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM series\n                example:\n                  ExpectedNumberOfInstances: null\n                  ID: 37836232-d13a2350-fa1dedc5-962b31aa-010f8e52\n                  Instances:\n                    - 6582b1c0-292ad5ab-ba0f088f-f7a1766f-9a29a54f\n                  IsStable: true\n                  LastUpdate: 20180414T091542\n                  MainDicomTags:\n                    ImageOrientationPatient: 0\\1\\0\\0\\0\\-1\n                    Manufacturer: Philips\n                    Modality: CT\n                    PerformedProcedureStepDescription: CT2 tête, face, sinus\n                    ProtocolName: COU 2 mm/Neck/Sv\n                    SeriesInstanceUID: 1.2.840.113704.1.111.5692.1127828999.2\n                    SeriesNumber: \"2276\"\n                    StationName: ctrad\n                  ParentStudy: 49974143-ec23cb52-6b2a1c46-14d5daa0-0822ce1a\n                  Status: Unknown\n                  Type: Series\n          description: \"\"\n      summary: Get information about some series\n      tags:\n        - Series\n  \"/series/{id}/anonymize\":\n    post:\n      deprecated: false\n      description: Start a job that will anonymize all the DICOM instances within the series whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new series, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#anonymization-of-patients-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                DicomVersion:\n                  description: Version of the DICOM standard to be used for anonymization. Check out configuration option `DeidentifyLogsDicomVersion` for possible values.\n                  type: string\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: List of DICOM tags whose value must not be destroyed by the anonymization. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                KeepPrivateTags:\n                  description: Keep the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of additional tags to be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Anonymize series\n      tags:\n        - Series\n  \"/series/{id}/archive\":\n    get:\n      deprecated: false\n      description: Synchronously create a ZIP archive containing the DICOM series whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Series\n    post:\n      deprecated: false\n      description: Create a ZIP archive containing the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Series\n  \"/series/{id}/attachments\":\n    get:\n      deprecated: false\n      description: Get the list of attachments that are associated with the given series\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the attachments\n                example: []\n          description: \"\"\n      summary: List attachments\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}\":\n    delete:\n      deprecated: false\n      description: Delete an attachment associated with the given DICOM series. This call will fail if trying to delete a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete attachment\n      tags:\n        - Series\n    get:\n      deprecated: false\n      description: Get the list of the operations that are available for attachments associated with the given series\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - compress\n                  - compressed-data\n                  - compressed-md5\n                  - compressed-size\n                  - data\n                  - is-compressed\n                  - md5\n                  - size\n                  - uncompress\n                  - verify-md5\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: List operations on attachments\n      tags:\n        - Other\n    put:\n      deprecated: false\n      description: Attach a file to the given DICOM series. This call will fail if trying to modify a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, if this is not the first time this attachment is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              description: Binary data containing the attachment\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Set attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/compress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Compress attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/compressed-data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given series. The attachment will not be decompressed if `StorageCompression` is `true`.\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment (no decompression)\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/compressed-md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given series, as stored on the disk. This is different from `.../md5` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment on disk\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/compressed-size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given series, as stored on the disk. This is different from `.../size` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment on disk\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given series\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/is-compressed\":\n    get:\n      deprecated: false\n      description: Test whether the attachment has been stored as a compressed file on the disk.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`0` if the attachment was stored uncompressed, `1` if it was compressed\"\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Is attachment compressed?\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given series\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given series\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/uncompress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Uncompress attachment\n      tags:\n        - Series\n  \"/series/{id}/attachments/{name}/verify-md5\":\n    post:\n      deprecated: false\n      description: Verify that the attachment is not corrupted, by validating its MD5 hash\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: On success, a valid JSON object is returned\n          description: \"\"\n      summary: Verify attachment\n      tags:\n        - Series\n  \"/series/{id}/instances\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child instances of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM instances\n                example:\n                  - FileSize: 368852\n                    FileUuid: 9016272a-ee8c-41b2-afc6-dcfe06dd3be8\n                    ID: 6582b1c0-292ad5ab-ba0f088f-f7a1766f-9a29a54f\n                    IndexInSeries: 1\n                    MainDicomTags:\n                      ImagePositionPatient: 0\\-159\\-425.915649\n                      InstanceCreationDate: \"20050927\"\n                      InstanceCreationTime: \"155030.000000\"\n                      InstanceNumber: \"1\"\n                      SOPInstanceUID: 1.2.840.113704.7.1.1.6632.1127829031.2\n                    \"{...}\": ...\n          description: \"\"\n      summary: Get child instances\n      tags:\n        - Series\n  \"/series/{id}/instances-tags\":\n    get:\n      deprecated: false\n      description: Get the tags of all the child instances of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags\n                example:\n                  6582b1c0-292ad5ab-ba0f088f-f7a1766f-9a29a54f:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\LOCALIZER\\ES\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20050927\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"155030.000000\"\n                    \"0008,0016\":\n                      Name: SOPClassUID\n                      Type: String\n                      Value: 1.2.840.10008.5.1.4.1.1.2\n                    \"{...}\": ...\n          description: \"\"\n      summary: Get tags of instances\n      tags:\n        - Series\n  \"/series/{id}/media\":\n    get:\n      deprecated: false\n      description: Synchronously create a DICOMDIR media containing the DICOM series whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*\n          in: query\n          name: extended\n          required: false\n          schema:\n            type: string\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Series\n    post:\n      deprecated: false\n      description: Create a DICOMDIR media containing the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Extended:\n                  description: If `true`, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*. Default value is `false`.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Series\n  \"/series/{id}/metadata\":\n    get:\n      deprecated: false\n      description: Get the list of metadata that are associated with the given series\n      parameters:\n        - description: If present, also retrieve the value of the individual metadata\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)\n                example:\n                  - LastUpdate\n          description: \"\"\n      summary: List metadata\n      tags:\n        - Series\n  \"/series/{id}/metadata/{name}\":\n    delete:\n      deprecated: false\n      description: Delete some metadata associated with the given DICOM series. This call will fail if trying to delete a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete metadata\n      tags:\n        - Series\n    get:\n      deprecated: false\n      description: Get the value of a metadata that is associated with the given series\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Value of the metadata\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the metadata, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get metadata\n      tags:\n        - Series\n    put:\n      deprecated: false\n      description: Set the value of some metadata in the given DICOM series. This call will fail if trying to modify a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, if this is not the first time this metadata is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: String value of the metadata\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set metadata\n      tags:\n        - Series\n  \"/series/{id}/modify\":\n    post:\n      deprecated: false\n      description: Start a job that will modify all the DICOM instances within the series whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new series, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#modification-of-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: Keep the original value of the specified tags, to be chosen among the `StudyInstanceUID`, `SeriesInstanceUID` and `SOPInstanceUID` tags. Avoid this feature as much as possible, as this breaks the DICOM model of the real world.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of tags that must be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                RemovePrivateTags:\n                  description: Remove the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"Transcode the DICOM instances to the provided DICOM transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Modify series\n      tags:\n        - Series\n  \"/series/{id}/module\":\n    get:\n      deprecated: false\n      description: Get the series module of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM series\n                example:\n                  \"0008,0060\":\n                    Name: Modality\n                    Type: String\n                    Value: CT\n                  \"0008,1111\":\n                    Name: ReferencedPerformedProcedureStepSequence\n                    Type: Sequence\n                    Value:\n                      - \"0008,1150\":\n                          Name: ReferencedSOPClassUID\n                          Type: String\n                          Value: 1.2.840.10008.3.1.2.3.3\n                        \"0008,1155\":\n                          Name: ReferencedSOPInstanceUID\n                          Type: String\n                          Value: 1.2.840.113704.1.111.4496.1127828841.54\n                  \"0018,1030\":\n                    Name: ProtocolName\n                    Type: String\n                    Value: COU 2 mm/Neck/Sv\n                  \"0018,5100\":\n                    Name: PatientPosition\n                    Type: String\n                    Value: HFS\n                  \"0020,000e\":\n                    Name: SeriesInstanceUID\n                    Type: String\n                    Value: 1.2.840.113704.1.111.5692.1127828999.2\n                  \"0020,0011\":\n                    Name: SeriesNumber\n                    Type: String\n                    Value: \"2276\"\n                  \"0040,0253\":\n                    Name: PerformedProcedureStepID\n                    Type: String\n                    Value: A10011234815\n                  \"0040,0254\":\n                    Name: PerformedProcedureStepDescription\n                    Type: String\n                    Value: CT2 tête, face, sinus\n                  \"0040,0260\":\n                    Name: PerformedProtocolCodeSequence\n                    Type: Sequence\n                    Value:\n                      - \"0008,0100\":\n                          Name: CodeValue\n                          Type: String\n                          Value: CTTETE\n                        \"0008,0102\":\n                          Name: CodingSchemeDesignator\n                          Type: String\n                          Value: XPLORE\n                        \"0008,0104\":\n                          Name: CodeMeaning\n                          Type: String\n                          Value: CT2 tête, face, sinus\n                  \"0040,0275\":\n                    Name: RequestAttributesSequence\n                    Type: Sequence\n                    Value:\n                      - \"0040,0007\":\n                          Name: ScheduledProcedureStepDescription\n                          Type: String\n                          Value: CT2 tête, face, sinus\n                        \"0040,0008\":\n                          Name: ScheduledProtocolCodeSequence\n                          Type: Sequence\n                          Value:\n                            - \"0008,0100\":\n                                Name: CodeValue\n                                Type: String\n                                Value: CTTETE\n                              \"0008,0102\":\n                                Name: CodingSchemeDesignator\n                                Type: String\n                                Value: XPLORE\n                              \"0008,0104\":\n                                Name: CodeMeaning\n                                Type: String\n                                Value: CT2 TÊTE, FACE, SINUS\n                        \"0040,0009\":\n                          Name: ScheduledProcedureStepID\n                          Type: String\n                          Value: A10011234815\n                        \"0040,1001\":\n                          Name: RequestedProcedureID\n                          Type: String\n                          Value: A10011234814\n          description: \"\"\n      summary: Get series module\n      tags:\n        - Series\n  \"/series/{id}/ordered-slices\":\n    get:\n      deprecated: true\n      description: Sort the instances and frames (slices) of the DICOM series whose Orthanc identifier is provided in the URL. This URI is essentially used by the Orthanc Web viewer and by the Osimis Web viewer.\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  Dicom:\n                    - /instances/fa1fc64f-e7a051a7-c1233b31-e19bca08-54629531/file\n                    - /instances/f5701efb-98170697-404d15f6-59baf69e-4e8ddfae/file\n                    - /instances/3b2a215c-2560d4b0-e3730c07-87d3fa7d-3fef44ed/file\n                    - /instances/6059d07c-02ae8c74-9436dc7c-007b4d5d-4c770a30/file\n                    - /instances/99264275-213c3190-73251bdc-97ccfdb4-1f9656d9/file\n                    - /instances/40df6ac1-5ec86316-035ff3c1-07e5c8a8-f6cbd37c/file\n                    - /instances/08ff3a1a-c8fb57d9-4e24d9cb-2ed22b80-0ff7461e/file\n                    - /instances/6fe353dd-544ce7af-58ce22dd-ab67370c-873330fc/file\n                    - /instances/3ad70bbe-bc51faff-860461d2-44745ccf-0ebbbbc8/file\n                    - /instances/9058e01a-31a7d982-1691e575-a8607d94-29a9aaca/file\n                    - ...\n                  Slices:\n                    - /instances/fa1fc64f-e7a051a7-c1233b31-e19bca08-54629531/frames/0\n                    - /instances/f5701efb-98170697-404d15f6-59baf69e-4e8ddfae/frames/0\n                    - /instances/3b2a215c-2560d4b0-e3730c07-87d3fa7d-3fef44ed/frames/0\n                    - /instances/6059d07c-02ae8c74-9436dc7c-007b4d5d-4c770a30/frames/0\n                    - /instances/99264275-213c3190-73251bdc-97ccfdb4-1f9656d9/frames/0\n                    - /instances/40df6ac1-5ec86316-035ff3c1-07e5c8a8-f6cbd37c/frames/0\n                    - /instances/08ff3a1a-c8fb57d9-4e24d9cb-2ed22b80-0ff7461e/frames/0\n                    - /instances/6fe353dd-544ce7af-58ce22dd-ab67370c-873330fc/frames/0\n                    - /instances/3ad70bbe-bc51faff-860461d2-44745ccf-0ebbbbc8/frames/0\n                    - /instances/9058e01a-31a7d982-1691e575-a8607d94-29a9aaca/frames/0\n                    - ...\n                  SlicesShort:\n                    - - fa1fc64f-e7a051a7-c1233b31-e19bca08-54629531\n                      - 0\n                      - 1\n                    - - f5701efb-98170697-404d15f6-59baf69e-4e8ddfae\n                      - 0\n                      - 1\n                    - - 3b2a215c-2560d4b0-e3730c07-87d3fa7d-3fef44ed\n                      - 0\n                      - 1\n                    - - 6059d07c-02ae8c74-9436dc7c-007b4d5d-4c770a30\n                      - 0\n                      - 1\n                    - - 99264275-213c3190-73251bdc-97ccfdb4-1f9656d9\n                      - 0\n                      - 1\n                    - - 40df6ac1-5ec86316-035ff3c1-07e5c8a8-f6cbd37c\n                      - 0\n                      - 1\n                    - - 08ff3a1a-c8fb57d9-4e24d9cb-2ed22b80-0ff7461e\n                      - 0\n                      - 1\n                    - - 6fe353dd-544ce7af-58ce22dd-ab67370c-873330fc\n                      - 0\n                      - 1\n                    - - 3ad70bbe-bc51faff-860461d2-44745ccf-0ebbbbc8\n                      - 0\n                      - 1\n                    - - 9058e01a-31a7d982-1691e575-a8607d94-29a9aaca\n                      - 0\n                      - 1\n                    - ...\n                  Type: Volume\n                properties:\n                  Dicom:\n                    description: Ordered list of paths to DICOM instances\n                    items:\n                      type: string\n                    type: array\n                  Slices:\n                    description: Ordered list of paths to frames. It is recommended to use this field, as it is also valid in the case of multiframe images.\n                    items:\n                      type: string\n                    type: array\n                  SlicesShort:\n                    description: Same information as the `Slices` field, but in a compact form\n                    items:\n                      type: object\n                    type: array\n                  Type:\n                    description: Can be `Volume` (for 3D volumes) or `Sequence` (notably for cine images)\n                    type: string\n          description: \"\"\n      summary: Order the slices\n      tags:\n        - Series\n  \"/series/{id}/patient\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent patient of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM patient\n                example:\n                  ID: 2f74083e-9b042648-10edac14-b26950f8-f82ec3a0\n                  IsStable: true\n                  LastUpdate: 20180414T091601\n                  MainDicomTags:\n                    PatientBirthDate: \"19910101\"\n                    PatientID: Vafk,T,6\n                    PatientName: PHENIX\n                    PatientSex: \"\"\n                  Studies:\n                    - 49974143-ec23cb52-6b2a1c46-14d5daa0-0822ce1a\n                  Type: Patient\n          description: \"\"\n      summary: Get parent patient\n      tags:\n        - Series\n  \"/series/{id}/reconstruct\":\n    post:\n      deprecated: false\n      description: Reconstruct the main DICOM tags of the series whose Orthanc identifier is provided in the URL. This is useful if child studies/series/instances have inconsistent values for higher-level tags, in order to force Orthanc to use the value from the resource of interest. Beware that this is a time-consuming operation, as all the children DICOM instances will be parsed again, and the Orthanc index will be updated accordingly.\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Reconstruct tags of series\n      tags:\n        - Series\n  \"/series/{id}/shared-tags\":\n    get:\n      deprecated: false\n      description: Extract the DICOM tags whose value is constant across all the child instances of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the values of the DICOM tags\n                example:\n                  \"0008,0005\":\n                    Name: SpecificCharacterSet\n                    Type: String\n                    Value: ISO_IR 100\n                  \"0008,0008\":\n                    Name: ImageType\n                    Type: String\n                    Value: ORIGINAL\\PRIMARY\\LOCALIZER\\ES\n                  \"0008,0012\":\n                    Name: InstanceCreationDate\n                    Type: String\n                    Value: \"20050927\"\n                  \"0008,0013\":\n                    Name: InstanceCreationTime\n                    Type: String\n                    Value: \"155030.000000\"\n                  \"0008,0016\":\n                    Name: SOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.2\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get shared tags\n      tags:\n        - Series\n  \"/series/{id}/statistics\":\n    get:\n      deprecated: false\n      description: Get statistics about the given series\n      parameters:\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  CountInstances: 1\n                  DicomDiskSize: \"368852\"\n                  DicomDiskSizeMB: 0\n                  DicomUncompressedSize: \"368852\"\n                  DicomUncompressedSizeMB: 0\n                  DiskSize: \"381000\"\n                  DiskSizeMB: 0\n                  UncompressedSize: \"381000\"\n                  UncompressedSizeMB: 0\n                properties:\n                  CountInstances:\n                    description: Number of child instances within this series\n                    type: number\n                  DicomDiskSize:\n                    description: Size on the disk of the DICOM instances associated with the series, expressed in bytes\n                    type: string\n                  DicomDiskSizeMB:\n                    description: Size on the disk of the DICOM instances associated with the series, expressed in megabytes (MB)\n                    type: number\n                  DicomUncompressedSize:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the series, expressed in bytes\n                    type: string\n                  DicomUncompressedSizeMB:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the series, expressed in megabytes (MB)\n                    type: number\n                  DiskSize:\n                    description: Size of the series on the disk in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  DiskSizeMB:\n                    description: Size of the series on the disk, expressed in megabytes (MB)\n                    type: number\n                  UncompressedSize:\n                    description: Size of the series after decompression in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  UncompressedSizeMB:\n                    description: Size of the series after decompression, expressed in megabytes (MB). This is different from `DiskSizeMB` iff `StorageCompression` is `true`.\n                    type: number\n          description: \"\"\n      summary: Get series statistics\n      tags:\n        - Series\n  \"/series/{id}/study\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent study of the DICOM series whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the series of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM study\n                example:\n                  ID: 49974143-ec23cb52-6b2a1c46-14d5daa0-0822ce1a\n                  IsStable: true\n                  LastUpdate: 20180414T091601\n                  MainDicomTags:\n                    AccessionNumber: A10011234814\n                    InstitutionName: HUG\n                    ReferringPhysicianName: CHIR-PED^CHIR-PE\n                    RequestedProcedureDescription: CT2 TÊTE, FACE, SINUS\n                    RequestingPhysician: KOHLER^Romain\n                    StudyDate: \"20050927\"\n                    StudyDescription: CT2 tête, face, sinus\n                    StudyID: \"1361\"\n                    StudyInstanceUID: 2.16.840.1.113669.632.20.1211.10000098591\n                    StudyTime: \"154952.000000\"\n                  ParentPatient: 2f74083e-9b042648-10edac14-b26950f8-f82ec3a0\n                  PatientMainDicomTags:\n                    PatientBirthDate: \"19910101\"\n                    PatientID: Vafk,T,6\n                    PatientName: PHENIX\n                    PatientSex: \"\"\n                  Series:\n                    - 37836232-d13a2350-fa1dedc5-962b31aa-010f8e52\n                    - 7696013f-4c89c563-2b071693-5d1f97f6-f8ab232d\n                    - 17cc7e52-4f1a3e4d-9182f727-56e9cc71-c037892f\n                  Type: Study\n          description: \"\"\n      summary: Get parent study\n      tags:\n        - Series\n  /statistics:\n    get:\n      deprecated: false\n      description: Get statistics related to the database of Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  CountInstances: 2552\n                  CountPatients: 8\n                  CountSeries: 26\n                  CountStudies: 8\n                  TotalDiskSize: \"1068132148\"\n                  TotalDiskSizeMB: 1018\n                  TotalUncompressedSize: \"1068132148\"\n                  TotalUncompressedSizeMB: 1018\n                properties:\n                  CountInstances:\n                    description: Number of DICOM instances stored in Orthanc\n                    type: number\n                  CountPatients:\n                    description: Number of patients stored in Orthanc\n                    type: number\n                  CountSeries:\n                    description: Number of DICOM series stored in Orthanc\n                    type: number\n                  CountStudies:\n                    description: Number of DICOM studies stored in Orthanc\n                    type: number\n                  TotalDiskSize:\n                    description: Size of the storage area (in bytes)\n                    type: string\n                  TotalDiskSizeMB:\n                    description: Size of the storage area (in megabytes)\n                    type: number\n                  TotalUncompressedSize:\n                    description: Total size of all the files once uncompressed (in bytes). This corresponds to `TotalDiskSize` if no compression is enabled, cf. `StorageCompression` configuration option\n                    type: string\n                  TotalUncompressedSizeMB:\n                    description: Total size of all the files once uncompressed (in megabytes)\n                    type: number\n          description: \"\"\n      summary: Get database statistics\n      tags:\n        - System\n  \"/storage-commitment/{id}\":\n    get:\n      deprecated: false\n      description: \"Get the storage commitment report whose identifier is provided in the URL: https://book.orthanc-server.com/users/storage-commitment.html#storage-commitment-scu\"\n      parameters:\n        - description: Identifier of the storage commitment report\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  Failures:\n                    description: List of failures that have been encountered during the storage commitment request\n                    items:\n                      type: object\n                    type: array\n                  RemoteAET:\n                    description: AET of the remote DICOM modality\n                    type: string\n                  Status:\n                    description: Can be `Success`, `Failure`, or `Pending` (the latter means that no report has been received yet)\n                    type: string\n                  Success:\n                    description: List of DICOM instances that have been acknowledged by the remote modality, each one is reported as a JSON object containing the `SOPClassUID` and `SOPInstanceUID` DICOM tags\n                    items:\n                      type: object\n                    type: array\n          description: \"\"\n      summary: Get storage commitment report\n      tags:\n        - Networking\n  \"/storage-commitment/{id}/remove\":\n    post:\n      deprecated: false\n      description: Remove out of Orthanc, the DICOM instances that have been reported to have been properly received the storage commitment report whose identifier is provided in the URL. This is only possible if the `Status` of the storage commitment report is `Success`. https://book.orthanc-server.com/users/storage-commitment.html#removing-the-instances\n      parameters:\n        - description: Identifier of the storage commitment report\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Remove after storage commitment\n      tags:\n        - Networking\n  /studies:\n    get:\n      deprecated: false\n      description: List the Orthanc identifiers of all the available DICOM studies\n      parameters:\n        - description: If present, retrieve detailed information about the individual studies\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: Limit the number of results\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: number\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Show only the resources since the provided index\n          in: query\n          name: since\n          required: false\n          schema:\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing either the Orthanc identifiers, or detailed information about the reported studies (if `expand` argument is provided)\n                example:\n                  - 6c65289b-db2fcb71-7eaf73f4-8e12470c-a4d6d7cf\n                  - 6b9e19d9-62094390-5f9ddb01-4a191ae7-9766b715\n          description: \"\"\n      summary: List the available studies\n      tags:\n        - Studies\n  \"/studies/{id}\":\n    delete:\n      deprecated: false\n      description: Delete the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete some study\n      tags:\n        - Studies\n    get:\n      deprecated: false\n      description: Get detailed information about the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM study\n                example:\n                  ID: 27f7126f-4f66fb14-03f4081b-f9341db2-53925988\n                  IsStable: true\n                  LastUpdate: 20180414T091532\n                  MainDicomTags:\n                    AccessionNumber: \"0\"\n                    InstitutionName: 7GEFF0GbzqCNo43Yd0,Ibu,zQSSX\n                    ReferringPhysicianName: dAEvNTxZJO0E\n                    RequestedProcedureDescription: IRM cérébrale, neuro-crâne\n                    StudyDate: \"20061201\"\n                    StudyDescription: IRM cérébrale, neuro-crâne\n                    StudyID: \"218211405\"\n                    StudyInstanceUID: 2.16.840.1.113669.632.20.1211.10000357775\n                    StudyTime: \"141645.000000\"\n                  ParentPatient: 16738bc3-e47ed42a-43ce044c-a3414a45-cb069bd0\n                  PatientMainDicomTags:\n                    PatientBirthDate: \"19490301\"\n                    PatientID: 5Yp0E\n                    PatientName: BRAINIX\n                    PatientSex: \"0000\"\n                  Series:\n                    - 635faa23-fd8378ee-d03bce29-ee47c2fb-a65c5509\n                    - dc0216d2-a406a5ad-31ef7a78-113ae9d9-29939f9e\n                    - 1e2c125c-411b8e86-3f4fe68e-a7584dd3-c6da78f0\n                    - 4baa97c7-d53d3d82-a5eb9403-17ef5a77-4e0efb55\n                    - 2ac1316d-3e432022-62eabff2-c59f5475-9b1ac3f8\n                    - ae164c84-e5bd0366-ba937a6d-65414092-f294d6b6\n                    - 3ca69615-fcd4a4fb-e5f2cc9d-9c7a49a5-add98bbf\n                  Type: Study\n          description: \"\"\n      summary: Get information about some study\n      tags:\n        - Studies\n  \"/studies/{id}/anonymize\":\n    post:\n      deprecated: false\n      description: Start a job that will anonymize all the DICOM instances within the study whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new study, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#anonymization-of-patients-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                DicomVersion:\n                  description: Version of the DICOM standard to be used for anonymization. Check out configuration option `DeidentifyLogsDicomVersion` for possible values.\n                  type: string\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: List of DICOM tags whose value must not be destroyed by the anonymization. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                KeepPrivateTags:\n                  description: Keep the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of additional tags to be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Anonymize study\n      tags:\n        - Studies\n  \"/studies/{id}/archive\":\n    get:\n      deprecated: false\n      description: Synchronously create a ZIP archive containing the DICOM study whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Studies\n    post:\n      deprecated: false\n      description: Create a ZIP archive containing the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - Studies\n  \"/studies/{id}/attachments\":\n    get:\n      deprecated: false\n      description: Get the list of attachments that are associated with the given study\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the attachments\n                example: []\n          description: \"\"\n      summary: List attachments\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}\":\n    delete:\n      deprecated: false\n      description: Delete an attachment associated with the given DICOM study. This call will fail if trying to delete a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete attachment\n      tags:\n        - Studies\n    get:\n      deprecated: false\n      description: Get the list of the operations that are available for attachments associated with the given study\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - compress\n                  - compressed-data\n                  - compressed-md5\n                  - compressed-size\n                  - data\n                  - is-compressed\n                  - md5\n                  - size\n                  - uncompress\n                  - verify-md5\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: List operations on attachments\n      tags:\n        - Other\n    put:\n      deprecated: false\n      description: Attach a file to the given DICOM study. This call will fail if trying to modify a system attachment (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the attachment, if this is not the first time this attachment is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              description: Binary data containing the attachment\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: Empty JSON object in the case of a success\n          description: \"\"\n      summary: Set attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/compress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Compress attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/compressed-data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given study. The attachment will not be decompressed if `StorageCompression` is `true`.\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment (no decompression)\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/compressed-md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given study, as stored on the disk. This is different from `.../md5` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment on disk\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/compressed-size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given study, as stored on the disk. This is different from `.../size` iff `EnableStorage` is `true`.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment, as stored on the disk\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment on disk\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/data\":\n    get:\n      deprecated: false\n      description: Get the (binary) content of one attachment associated with the given study\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              examples: {}\n              schema:\n                description: The attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/is-compressed\":\n    get:\n      deprecated: false\n      description: Test whether the attachment has been stored as a compressed file on the disk.\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`0` if the attachment was stored uncompressed, `1` if it was compressed\"\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Is attachment compressed?\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/md5\":\n    get:\n      deprecated: false\n      description: Get the MD5 hash of one attachment associated with the given study\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The MD5 of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get MD5 of attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/size\":\n    get:\n      deprecated: false\n      description: Get the size of one attachment associated with the given study\n      parameters:\n        - description: Optional revision of the attachment, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The size of the attachment\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the attachment, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get size of attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/uncompress\":\n    post:\n      deprecated: false\n      description: Change the compression scheme that is used to store an attachment.\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Uncompress attachment\n      tags:\n        - Studies\n  \"/studies/{id}/attachments/{name}/verify-md5\":\n    post:\n      deprecated: false\n      description: Verify that the attachment is not corrupted, by validating its MD5 hash\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the attachment, or its index (cf. `UserContentType` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: On success, a valid JSON object is returned\n          description: \"\"\n      summary: Verify attachment\n      tags:\n        - Studies\n  \"/studies/{id}/instances\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child instances of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM instances\n                example:\n                  - FileSize: 527858\n                    FileUuid: 42607af0-e2ca-402a-9cb4-8819a0485dbd\n                    ID: 82cc1a6b-7b05d34e-cd74474b-594f0d43-94f609d8\n                    IndexInSeries: 3\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -118.20798927708\\-118.00763136239\\71.7517339810729\n                      InstanceCreationDate: \"20061201\"\n                      InstanceCreationTime: \"145313.000000\"\n                      InstanceNumber: \"3\"\n                      \"{...}\": ...\n                    \"{...}\": ...\n                  - FileSize: 527858\n                    FileUuid: f986a0de-cf3b-4acc-a2ca-ce6a5844ec63\n                    ID: 2fbd6d5f-802f6561-b9d8da32-c54ead16-18a208bd\n                    IndexInSeries: 13\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -116.77244740887\\-113.68593889565\\11.9247972592711\n                      InstanceCreationDate: \"20061201\"\n                      InstanceCreationTime: \"145313.000000\"\n                      InstanceNumber: \"13\"\n                      \"{...}\": ...\n                    \"{...}\": ...\n                  - FileSize: 527858\n                    FileUuid: 64cc6dae-228d-4e60-82ea-34c540a09cfb\n                    ID: 4dbca7c1-f6e1a582-b3196370-0151cac8-19caac8e\n                    IndexInSeries: 17\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -116.19823080464\\-111.95726186127\\-12.005976177752\n                      InstanceCreationDate: \"20061201\"\n                      InstanceCreationTime: \"145313.000000\"\n                      InstanceNumber: \"17\"\n                      \"{...}\": ...\n                    \"{...}\": ...\n                  - FileSize: 527858\n                    FileUuid: 06823b17-6217-4534-b318-4de5c9157c74\n                    ID: 98c6f0c7-e6f9812b-d0a9df8a-97eeaa41-fa891d8e\n                    IndexInSeries: 6\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -117.77732664509\\-116.71112352700\\53.8036520108580\n                      InstanceCreationDate: \"20061201\"\n                      InstanceCreationTime: \"145313.000000\"\n                      InstanceNumber: \"6\"\n                      \"{...}\": ...\n                    \"{...}\": ...\n                  - FileSize: 527858\n                    FileUuid: 7012f4ad-e1f7-49a8-95e0-5050227b4090\n                    ID: c25f4e48-8f7d737e-3dbeafb5-f1563a30-eddf816c\n                    IndexInSeries: 20\n                    MainDicomTags:\n                      AcquisitionNumber: \"3\"\n                      ImagePositionPatient: -115.76756829186\\-110.66075450272\\-29.954057492315\n                      InstanceCreationDate: \"20061201\"\n                      InstanceCreationTime: \"145313.000000\"\n                      InstanceNumber: \"20\"\n                      \"{...}\": ...\n                    \"{...}\": ...\n                  - ...\n          description: \"\"\n      summary: Get child instances\n      tags:\n        - Studies\n  \"/studies/{id}/instances-tags\":\n    get:\n      deprecated: false\n      description: Get the tags of all the child instances of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags\n                example:\n                  00330d0f-911e5e8d-1e305bae-e5c53b73-d2a49298:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\M_SE\\M\\SE\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20061201\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"145331.000000\"\n                    \"0008,0014\":\n                      Name: InstanceCreatorUID\n                      Type: String\n                      Value: 1.3.46.670589.11.8743.5\n                    \"{...}\": ...\n                  00402ce7-ac05c687-4d0839bc-cecd4fad-3d1b7eed:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\M_FFE\\M\\FFE\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20061201\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"145326.000000\"\n                    \"0008,0014\":\n                      Name: InstanceCreatorUID\n                      Type: String\n                      Value: 1.3.46.670589.11.8743.5\n                    \"{...}\": ...\n                  00ffd506-6460663a-cda9bddc-a0090c47-145ba829:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\M_FFE\\M\\FFE\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20061201\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"145346.000000\"\n                    \"0008,0014\":\n                      Name: InstanceCreatorUID\n                      Type: String\n                      Value: 1.3.46.670589.11.8743.5\n                    \"{...}\": ...\n                  01a6ffdc-335f82a7-c79360c2-2e6bbc35-d24ca33d:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\M_SE\\M\\SE\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20061201\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"145313.000000\"\n                    \"0008,0014\":\n                      Name: InstanceCreatorUID\n                      Type: String\n                      Value: 1.3.46.670589.11.8743.5\n                    \"{...}\": ...\n                  0577c66f-25d7cc30-bb763c60-53bb7ba0-72c8b018:\n                    \"0008,0005\":\n                      Name: SpecificCharacterSet\n                      Type: String\n                      Value: ISO_IR 100\n                    \"0008,0008\":\n                      Name: ImageType\n                      Type: String\n                      Value: ORIGINAL\\PRIMARY\\M_FFE\\M\\FFE\n                    \"0008,0012\":\n                      Name: InstanceCreationDate\n                      Type: String\n                      Value: \"20061201\"\n                    \"0008,0013\":\n                      Name: InstanceCreationTime\n                      Type: String\n                      Value: \"145346.000000\"\n                    \"0008,0014\":\n                      Name: InstanceCreatorUID\n                      Type: String\n                      Value: 1.3.46.670589.11.8743.5\n                    \"{...}\": ...\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get tags of instances\n      tags:\n        - Studies\n  \"/studies/{id}/media\":\n    get:\n      deprecated: false\n      description: Synchronously create a DICOMDIR media containing the DICOM study whose Orthanc identifier is provided in the URL. This flavor is synchronous, which might *not* be desirable to archive large amount of data, as it might lead to network timeouts. Prefer the asynchronous version using `POST` method.\n      parameters:\n        - description: If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*\n          in: query\n          name: extended\n          required: false\n          schema:\n            type: string\n        - description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n          in: query\n          name: transcode\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/zip:\n              examples: {}\n              schema:\n                description: ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Studies\n    post:\n      deprecated: false\n      description: Create a DICOMDIR media containing the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Extended:\n                  description: If `true`, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*. Default value is `false`.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - Studies\n  \"/studies/{id}/merge\":\n    post:\n      deprecated: false\n      description: \"Start a new job so as to move some DICOM resources into the DICOM study whose Orthanc identifier is provided in the URL: https://book.orthanc-server.com/users/anonymization.html#merging\"\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                KeepSource:\n                  description: If set to `true`, instructs Orthanc to keep a copy of the original resources in their source study. By default, the original resources are deleted from Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: The list of DICOM resources (studies, series, and/or instances) to be merged into the study of interest (mandatory option)\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Merge study\n      tags:\n        - Studies\n  \"/studies/{id}/metadata\":\n    get:\n      deprecated: false\n      description: Get the list of metadata that are associated with the given study\n      parameters:\n        - description: If present, also retrieve the value of the individual metadata\n          in: query\n          name: expand\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)\n                example:\n                  - LastUpdate\n          description: \"\"\n      summary: List metadata\n      tags:\n        - Studies\n  \"/studies/{id}/metadata/{name}\":\n    delete:\n      deprecated: false\n      description: Delete some metadata associated with the given DICOM study. This call will fail if trying to delete a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete metadata\n      tags:\n        - Studies\n    get:\n      deprecated: false\n      description: Get the value of a metadata that is associated with the given study\n      parameters:\n        - description: Optional revision of the metadata, to check if its content has changed\n          in: header\n          name: If-None-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Value of the metadata\n          description: \"\"\n          headers:\n            ETag:\n              description: Revision of the metadata, to be used in further `PUT` or `DELETE` operations\n              schema:\n                type: string\n      summary: Get metadata\n      tags:\n        - Studies\n    put:\n      deprecated: false\n      description: Set the value of some metadata in the given DICOM study. This call will fail if trying to modify a system metadata (i.e. whose index is \u003c 1024).\n      parameters:\n        - description: Revision of the metadata, if this is not the first time this metadata is set.\n          in: header\n          name: If-Match\n          required: false\n          schema:\n            type: string\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: The name of the metadata, or its index (cf. `UserMetadata` configuration option)\n          in: path\n          name: name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: String value of the metadata\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set metadata\n      tags:\n        - Studies\n  \"/studies/{id}/modify\":\n    post:\n      deprecated: false\n      description: Start a job that will modify all the DICOM instances within the study whose identifier is provided in the URL. The modified DICOM instances will be stored into a brand new study, whose Orthanc identifiers will be returned by the job. https://book.orthanc-server.com/users/anonymization.html#modification-of-studies-or-series\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: Keep the original value of the specified tags, to be chosen among the `StudyInstanceUID`, `SeriesInstanceUID` and `SOPInstanceUID` tags. Avoid this feature as much as possible, as this breaks the DICOM model of the real world.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of tags that must be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                RemovePrivateTags:\n                  description: Remove the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"Transcode the DICOM instances to the provided DICOM transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Modify study\n      tags:\n        - Studies\n  \"/studies/{id}/module\":\n    get:\n      deprecated: false\n      description: Get the study module of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM study\n                example:\n                  \"0008,0020\":\n                    Name: StudyDate\n                    Type: String\n                    Value: \"20061201\"\n                  \"0008,0030\":\n                    Name: StudyTime\n                    Type: String\n                    Value: \"141645.000000\"\n                  \"0008,0050\":\n                    Name: AccessionNumber\n                    Type: String\n                    Value: \"0\"\n                  \"0008,0090\":\n                    Name: ReferringPhysicianName\n                    Type: String\n                    Value: dAEvNTxZJO0E\n                  \"0008,1030\":\n                    Name: StudyDescription\n                    Type: String\n                    Value: IRM cérébrale, neuro-crâne\n                  \"0008,1032\":\n                    Name: ProcedureCodeSequence\n                    Type: Sequence\n                    Value:\n                      - \"0008,0100\":\n                          Name: CodeValue\n                          Type: String\n                          Value: IRMCEREB\n                        \"0008,0102\":\n                          Name: CodingSchemeDesignator\n                          Type: String\n                          Value: XPLORE\n                        \"0008,0104\":\n                          Name: CodeMeaning\n                          Type: String\n                          Value: IRM cérébrale, neuro-crâne\n                        \"0008,010b\":\n                          Name: ContextGroupExtensionFlag\n                          Type: String\n                          Value: N\n                  \"0008,1110\":\n                    Name: ReferencedStudySequence\n                    Type: Sequence\n                    Value:\n                      - \"0008,1150\":\n                          Name: ReferencedSOPClassUID\n                          Type: String\n                          Value: 1.2.840.10008.3.1.2.3.1\n                        \"0008,1155\":\n                          Name: ReferencedSOPInstanceUID\n                          Type: String\n                          Value: 2.16.840.1.113669.632.20.1211.10000357775\n                  \"0020,000d\":\n                    Name: StudyInstanceUID\n                    Type: String\n                    Value: 2.16.840.1.113669.632.20.1211.10000357775\n                  \"0020,0010\":\n                    Name: StudyID\n                    Type: String\n                    Value: \"218211405\"\n          description: \"\"\n      summary: Get study module\n      tags:\n        - Studies\n  \"/studies/{id}/module-patient\":\n    get:\n      deprecated: false\n      description: Get the patient module of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: Also include the DICOM tags that are provided in this list, even if their associated value is long\n          in: query\n          name: ignore-length\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the DICOM study\n                example:\n                  \"0010,0010\":\n                    Name: PatientName\n                    Type: String\n                    Value: BRAINIX\n                  \"0010,0020\":\n                    Name: PatientID\n                    Type: String\n                    Value: 5Yp0E\n                  \"0010,0030\":\n                    Name: PatientBirthDate\n                    Type: String\n                    Value: \"19490301\"\n                  \"0010,0040\":\n                    Name: PatientSex\n                    Type: String\n                    Value: \"0000\"\n          description: \"\"\n      summary: Get patient module of study\n      tags:\n        - Studies\n  \"/studies/{id}/patient\":\n    get:\n      deprecated: false\n      description: Get detailed information about the parent patient of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Information about the parent DICOM patient\n                example:\n                  ID: 16738bc3-e47ed42a-43ce044c-a3414a45-cb069bd0\n                  IsStable: true\n                  LastUpdate: 20180414T091532\n                  MainDicomTags:\n                    PatientBirthDate: \"19490301\"\n                    PatientID: 5Yp0E\n                    PatientName: BRAINIX\n                    PatientSex: \"0000\"\n                  Studies:\n                    - 27f7126f-4f66fb14-03f4081b-f9341db2-53925988\n                  Type: Patient\n          description: \"\"\n      summary: Get parent patient\n      tags:\n        - Studies\n  \"/studies/{id}/reconstruct\":\n    post:\n      deprecated: false\n      description: Reconstruct the main DICOM tags of the study whose Orthanc identifier is provided in the URL. This is useful if child studies/series/instances have inconsistent values for higher-level tags, in order to force Orthanc to use the value from the resource of interest. Beware that this is a time-consuming operation, as all the children DICOM instances will be parsed again, and the Orthanc index will be updated accordingly.\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Reconstruct tags of study\n      tags:\n        - Studies\n  \"/studies/{id}/series\":\n    get:\n      deprecated: false\n      description: Get detailed information about the child series of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n          in: query\n          name: full\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON array containing information about the child DICOM series\n                example:\n                  - ExpectedNumberOfInstances: null\n                    ID: 635faa23-fd8378ee-d03bce29-ee47c2fb-a65c5509\n                    Instances:\n                      - ed8aacd6-5d2cfad4-9e1a2f77-edf1cee5-8f3bdde0\n                      - 7a93b85e-5956dbf9-894c1f27-dc73112f-4cbcda70\n                      - 065baa49-a7b4e4a0-e7468f1d-e9b5bca8-56316fa2\n                      - ca69bc1a-a4fcc0a8-9e6828b0-c816dbaa-240fdc45\n                      - edd8ff85-9805d97a-2375f736-40662993-aef40418\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091528\n                    \"{...}\": ...\n                  - ExpectedNumberOfInstances: null\n                    ID: dc0216d2-a406a5ad-31ef7a78-113ae9d9-29939f9e\n                    Instances:\n                      - 2cd73574-190bb147-0a86bcca-68c75104-d22f09dd\n                      - ff95b7c0-d14e3e42-d642eacd-281cb07c-4e0bbc8b\n                      - 22384bf2-0bbe7bdb-013f6ff2-f7834e9f-3d8754bf\n                      - 3e50a403-17c8ce10-6e0234e3-a8bed1bf-3dbc54ee\n                      - 3db0ed84-61a28da4-72a52d5a-3f7daa77-b81ddf17\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091530\n                    \"{...}\": ...\n                  - ExpectedNumberOfInstances: null\n                    ID: 1e2c125c-411b8e86-3f4fe68e-a7584dd3-c6da78f0\n                    Instances:\n                      - 2db53a93-91179cd5-f2080c32-c9b156ec-b8f65fa7\n                      - 9058e01a-31a7d982-1691e575-a8607d94-29a9aaca\n                      - 40df6ac1-5ec86316-035ff3c1-07e5c8a8-f6cbd37c\n                      - 144ca294-6e759cfb-e14e3404-e78a0a29-1dd3273c\n                      - 3b2a215c-2560d4b0-e3730c07-87d3fa7d-3fef44ed\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091530\n                    \"{...}\": ...\n                  - ExpectedNumberOfInstances: null\n                    ID: 4baa97c7-d53d3d82-a5eb9403-17ef5a77-4e0efb55\n                    Instances:\n                      - 9b41ef96-b4031ffc-b1b7ea5d-8a38d55d-fe804601\n                      - 8137542c-069dd229-d0226fba-f8c571cd-19c7b61a\n                      - 985681e7-99cd2ce5-f7d79f12-27bfc29f-0e5a4d72\n                      - f0b9f0ab-110181f8-ce83a1a2-4d8eb2c9-0b682503\n                      - ef13019a-9edf339d-395d8632-558518bf-b82b1b21\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091531\n                    \"{...}\": ...\n                  - ExpectedNumberOfInstances: null\n                    ID: 2ac1316d-3e432022-62eabff2-c59f5475-9b1ac3f8\n                    Instances:\n                      - 61eeef27-cb5515a3-0860ab44-90125207-a56e6883\n                      - 18bc4146-4bb09c43-e4080c80-19bfc186-6b3d7272\n                      - 00402ce7-ac05c687-4d0839bc-cecd4fad-3d1b7eed\n                      - ea902bf2-6dc22ee9-e962333a-7ce2c27f-d684977e\n                      - 8371936f-4141219a-ca7d69df-0d82697e-271eef91\n                      - ...\n                    IsStable: true\n                    LastUpdate: 20180414T091531\n                    \"{...}\": ...\n                  - ...\n          description: \"\"\n      summary: Get child series\n      tags:\n        - Studies\n  \"/studies/{id}/shared-tags\":\n    get:\n      deprecated: false\n      description: Extract the DICOM tags whose value is constant across all the child instances of the DICOM study whose Orthanc identifier is provided in the URL\n      parameters:\n        - description: If present, report the DICOM tags in hexadecimal format\n          in: query\n          name: short\n          required: false\n          schema:\n            type: boolean\n        - description: If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)\n          in: query\n          name: simplify\n          required: false\n          schema:\n            type: boolean\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: JSON object containing the values of the DICOM tags\n                example:\n                  \"0008,0005\":\n                    Name: SpecificCharacterSet\n                    Type: String\n                    Value: ISO_IR 100\n                  \"0008,0012\":\n                    Name: InstanceCreationDate\n                    Type: String\n                    Value: \"20061201\"\n                  \"0008,0014\":\n                    Name: InstanceCreatorUID\n                    Type: String\n                    Value: 1.3.46.670589.11.8743.5\n                  \"0008,0016\":\n                    Name: SOPClassUID\n                    Type: String\n                    Value: 1.2.840.10008.5.1.4.1.1.4\n                  \"0008,0020\":\n                    Name: StudyDate\n                    Type: String\n                    Value: \"20061201\"\n                  \"{...}\": ...\n          description: \"\"\n      summary: Get shared tags\n      tags:\n        - Studies\n  \"/studies/{id}/split\":\n    post:\n      deprecated: false\n      description: \"Start a new job so as to split the DICOM study whose Orthanc identifier is provided in the URL, by taking some of its children series or instances out of it and putting them into a brand new study (this new study is created by setting the `StudyInstanceUID` tag to a random identifier): https://book.orthanc-server.com/users/anonymization.html#splitting\"\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Instances:\n                  description: The list of instances to be separated from the parent study. These instances must all be children of the same source study, that is specified in the URI.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `true`, instructs Orthanc to keep a copy of the original series/instances in the source study. By default, the original series/instances are deleted from Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Remove:\n                  description: List of tags that must be removed in the new study (from the same modules as in the `Replace` option)\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the new study. These tags must be part of the \"Patient Module Attributes\" or the \"General Study Module Attributes\", as specified by the DICOM 2011 standard in Tables C.7-1 and C.7-3.\n                  type: object\n                Series:\n                  description: The list of series to be separated from the parent study. These series must all be children of the same source study, that is specified in the URI.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Split study\n      tags:\n        - Studies\n  \"/studies/{id}/statistics\":\n    get:\n      deprecated: false\n      description: Get statistics about the given study\n      parameters:\n        - description: Orthanc identifier of the study of interest\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  CountInstances: 232\n                  CountSeries: 7\n                  DicomDiskSize: \"68153234\"\n                  DicomDiskSizeMB: 64\n                  DicomUncompressedSize: \"68153234\"\n                  DicomUncompressedSizeMB: 64\n                  DiskSize: \"72203548\"\n                  DiskSizeMB: 68\n                  UncompressedSize: \"72203548\"\n                  UncompressedSizeMB: 68\n                properties:\n                  CountInstances:\n                    description: Number of child instances within this study\n                    type: number\n                  CountSeries:\n                    description: Number of child series within this study\n                    type: number\n                  DicomDiskSize:\n                    description: Size on the disk of the DICOM instances associated with the study, expressed in bytes\n                    type: string\n                  DicomDiskSizeMB:\n                    description: Size on the disk of the DICOM instances associated with the study, expressed in megabytes (MB)\n                    type: number\n                  DicomUncompressedSize:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the study, expressed in bytes\n                    type: string\n                  DicomUncompressedSizeMB:\n                    description: Size on the disk of the uncompressed DICOM instances associated with the study, expressed in megabytes (MB)\n                    type: number\n                  DiskSize:\n                    description: Size of the study on the disk in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  DiskSizeMB:\n                    description: Size of the study on the disk, expressed in megabytes (MB)\n                    type: number\n                  UncompressedSize:\n                    description: Size of the study after decompression in bytes, expressed as a string for 64bit compatibility with JSON\n                    type: string\n                  UncompressedSizeMB:\n                    description: Size of the study after decompression, expressed in megabytes (MB). This is different from `DiskSizeMB` iff `StorageCompression` is `true`.\n                    type: number\n          description: \"\"\n      summary: Get study statistics\n      tags:\n        - Studies\n  /system:\n    get:\n      deprecated: false\n      description: Get system information about Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: \"\"\n                example:\n                  ApiVersion: 14\n                  CheckRevisions: false\n                  DatabaseBackendPlugin: null\n                  DatabaseVersion: 6\n                  DicomAet: ORTHANC\n                  DicomPort: 4242\n                  HttpPort: 8042\n                  IsHttpServerSecure: false\n                  Name: Orthanc Demo\n                  PluginsEnabled: true\n                  StorageAreaPlugin: null\n                  Version: 1.9.6\n                properties:\n                  ApiVersion:\n                    description: Version of the REST API\n                    type: number\n                  CheckRevisions:\n                    description: Whether Orthanc handle revisions of metadata and attachments to deal with multiple writers (new in Orthanc 1.9.2)\n                    type: boolean\n                  DatabaseBackendPlugin:\n                    description: Information about the installed database index plugin (`null` if no such plugin is installed)\n                    type: string\n                  DatabaseVersion:\n                    description: \"Version of the database: https://book.orthanc-server.com/developers/db-versioning.html\"\n                    type: number\n                  DicomAet:\n                    description: The DICOM AET of Orthanc\n                    type: string\n                  DicomPort:\n                    description: The port to the DICOM server of Orthanc\n                    type: number\n                  HttpPort:\n                    description: The port to the HTTP server of Orthanc\n                    type: number\n                  IsHttpServerSecure:\n                    description: \"Whether the REST API is properly secured (assuming no reverse proxy is in use): https://book.orthanc-server.com/faq/security.html#securing-the-http-server\"\n                    type: boolean\n                  Name:\n                    description: The name of the Orthanc server, cf. the `Name` configuration option\n                    type: string\n                  PluginsEnabled:\n                    description: Whether Orthanc was built with support for plugins\n                    type: boolean\n                  StorageAreaPlugin:\n                    description: Information about the installed storage area plugin (`null` if no such plugin is installed)\n                    type: string\n                  Version:\n                    description: Version of Orthanc\n                    type: string\n          description: \"\"\n      summary: Get system information\n      tags:\n        - System\n  /tools:\n    get:\n      deprecated: false\n      description: List the available operations under URI `/tools/`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of the available operations\n                example:\n                  - accepted-transfer-syntaxes\n                  - bulk-anonymize\n                  - bulk-content\n                  - bulk-delete\n                  - bulk-modify\n                  - create-archive\n                  - create-dicom\n                  - create-media\n                  - create-media-extended\n                  - default-encoding\n                  - dicom-conformance\n                  - dicom-echo\n                  - execute-script\n                  - find\n                  - generate-uid\n                  - invalidate-tags\n                  - log-level\n                  - log-level-dicom\n                  - log-level-generic\n                  - log-level-http\n                  - log-level-jobs\n                  - log-level-lua\n                  - log-level-plugins\n                  - log-level-sqlite\n                  - lookup\n                  - metrics\n                  - metrics-prometheus\n                  - now\n                  - now-local\n                  - reconstruct\n                  - reset\n                  - shutdown\n                  - unknown-sop-class-accepted\n          description: \"\"\n      summary: List operations\n      tags:\n        - Other\n  /tools/accepted-transfer-syntaxes:\n    get:\n      deprecated: false\n      description: Get the list of UIDs of the DICOM transfer syntaxes that are accepted by Orthanc C-STORE SCP. This corresponds to the configuration options `AcceptedTransferSyntaxes` and `XXXTransferSyntaxAccepted`.\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the transfer syntax UIDs\n          description: \"\"\n      summary: Get accepted transfer syntaxes\n      tags:\n        - System\n    put:\n      deprecated: false\n      description: Set the DICOM transfer syntaxes that accepted by Orthanc C-STORE SCP\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: JSON array containing a list of transfer syntax UIDs to be accepted. Wildcards `?` and `*` are accepted.\n          text/plain:\n            schema:\n              description: UID of the transfer syntax to be accepted. Wildcards `?` and `*` are accepted.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing the now-accepted transfer syntax UIDs\n          description: \"\"\n      summary: Set accepted transfer syntaxes\n      tags:\n        - System\n  /tools/bulk-anonymize:\n    post:\n      deprecated: false\n      description: Start a job that will anonymize all the DICOM patients, studies, series or instances whose identifiers are provided in the `Resources` field.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                DicomVersion:\n                  description: Version of the DICOM standard to be used for anonymization. Check out configuration option `DeidentifyLogsDicomVersion` for possible values.\n                  type: string\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: List of DICOM tags whose value must not be destroyed by the anonymization. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                KeepPrivateTags:\n                  description: Keep the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of additional tags to be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Resources:\n                  description: List of the Orthanc identifiers of the patients/studies/series/instances of interest.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: The list of all the resources that have been created by this anonymization\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Anonymize a set of resources\n      tags:\n        - System\n  /tools/bulk-content:\n    post:\n      deprecated: false\n      description: Get the content all the DICOM patients, studies, series or instances whose identifiers are provided in the `Resources` field, in one single call.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Full:\n                  description: If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n                  type: boolean\n                Level:\n                  description: This optional argument specifies the level of interest (can be `Patient`, `Study`, `Series` or `Instance`). Orthanc will loop over the items inside `Resources`, and explorer upward or downward in the DICOM hierarchy in order to find the level of interest.\n                  type: string\n                Metadata:\n                  description: If set to `true` (default value), the metadata associated with the resources will also be retrieved.\n                  type: boolean\n                Resources:\n                  description: List of the Orthanc identifiers of the patients/studies/series/instances of interest.\n                  items:\n                    type: string\n                  type: array\n                Short:\n                  description: If set to `true`, report the DICOM tags in hexadecimal format\n                  type: boolean\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Describe a set of instances\n      tags:\n        - System\n  /tools/bulk-delete:\n    post:\n      deprecated: false\n      description: Delete all the DICOM patients, studies, series or instances whose identifiers are provided in the `Resources` field.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Resources:\n                  description: List of the Orthanc identifiers of the patients/studies/series/instances of interest.\n                  items:\n                    type: string\n                  type: array\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Delete a set of instances\n      tags:\n        - System\n  /tools/bulk-modify:\n    post:\n      deprecated: false\n      description: Start a job that will modify all the DICOM patients, studies, series or instances whose identifiers are provided in the `Resources` field.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, run the job in asynchronous mode, which means that the REST API call will immediately return, reporting the identifier of a job. Prefer this flavor wherever possible.\n                  type: boolean\n                Force:\n                  description: Allow the modification of tags related to DICOM identifiers, at the risk of breaking the DICOM model of the real world\n                  type: boolean\n                Keep:\n                  description: Keep the original value of the specified tags, to be chosen among the `StudyInstanceUID`, `SeriesInstanceUID` and `SOPInstanceUID` tags. Avoid this feature as much as possible, as this breaks the DICOM model of the real world.\n                  items:\n                    type: string\n                  type: array\n                KeepSource:\n                  description: If set to `false`, instructs Orthanc to the remove original resources. By default, the original resources are kept in Orthanc.\n                  type: boolean\n                Permissive:\n                  description: If `true`, ignore errors during the individual steps of the job.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Replace`\n                  type: string\n                Remove:\n                  description: List of tags that must be removed from the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  items:\n                    type: string\n                  type: array\n                RemovePrivateTags:\n                  description: Remove the private tags from the DICOM instances (defaults to `false`)\n                  type: boolean\n                Replace:\n                  description: Associative array to change the value of some DICOM tags in the DICOM instances. Starting with Orthanc 1.9.4, paths to subsequences can be provided using the same syntax as the `dcmodify` command-line tool (wildcards are supported as well).\n                  type: object\n                Resources:\n                  description: List of the Orthanc identifiers of the patients/studies/series/instances of interest.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, run the job in synchronous mode, which means that the HTTP answer will directly contain the result of the job. This is the default, easy behavior, but it is *not* desirable for long jobs, as it might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"Transcode the DICOM instances to the provided DICOM transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: The list of all the resources that have been altered by this modification\n                properties:\n                  ID:\n                    description: In asynchronous mode, identifier of the job\n                    type: string\n                  Path:\n                    description: In asynchronous mode, path to access the job in the REST API\n                    type: string\n          description: \"\"\n      summary: Modify a set of resources\n      tags:\n        - System\n  /tools/create-archive:\n    post:\n      deprecated: false\n      description: Create a ZIP archive containing the DICOM resources (patients, studies, series, or instances) whose Orthanc identifiers are provided in the body\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: The list of Orthanc identifiers of interest.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create ZIP archive\n      tags:\n        - System\n  /tools/create-dicom:\n    post:\n      deprecated: false\n      description: Create one DICOM instance, and store it into Orthanc\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Content:\n                  description: This field can be used to embed an image (pixel data) or a PDF inside the created DICOM instance. The PNG image, the JPEG image or the PDF file must be provided using their [data URI scheme encoding](https://en.wikipedia.org/wiki/Data_URI_scheme). This field can possibly contain a JSON array, in which case a DICOM series is created containing one DICOM instance for each item in the `Content` field.\n                  type: string\n                Force:\n                  description: Avoid the consistency checks for the DICOM tags that enforce the DICOM model of the real-world. You can notably use this flag if you need to manually set the tags `StudyInstanceUID`, `SeriesInstanceUID`, or `SOPInstanceUID`. Be careful with this feature.\n                  type: boolean\n                InterpretBinaryTags:\n                  description: If some value in the `Tags` associative array is formatted according to some [data URI scheme encoding](https://en.wikipedia.org/wiki/Data_URI_scheme), whether this value is decoded to a binary value or kept as such (`true` by default)\n                  type: boolean\n                Parent:\n                  description: If present, the newly created instance will be attached to the parent DICOM resource whose Orthanc identifier is contained in this field. The DICOM tags of the parent modules in the DICOM hierarchy will be automatically copied to the newly created instance.\n                  type: string\n                PrivateCreator:\n                  description: The private creator to be used for private tags in `Tags`\n                  type: string\n                Tags:\n                  description: Associative array containing the tags of the new instance to be created\n                  type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"\"\n                properties:\n                  ID:\n                    description: Orthanc identifier of the newly created instance\n                    type: string\n                  Path:\n                    description: Path to access the instance in the REST API\n                    type: string\n          description: \"\"\n      summary: Create one DICOM instance\n      tags:\n        - System\n  /tools/create-media:\n    post:\n      deprecated: false\n      description: Create a DICOMDIR media containing the DICOM resources (patients, studies, series, or instances) whose Orthanc identifiers are provided in the body\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Extended:\n                  description: If `true`, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*. Default value is `false`.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: The list of Orthanc identifiers of interest.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - System\n  /tools/create-media-extended:\n    post:\n      deprecated: false\n      description: Create a DICOMDIR media containing the DICOM resources (patients, studies, series, or instances) whose Orthanc identifiers are provided in the body\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                Asynchronous:\n                  description: If `true`, create the archive in asynchronous mode, which means that a job is submitted to create the archive in background.\n                  type: boolean\n                Extended:\n                  description: If `true`, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*. Default value is `true`.\n                  type: boolean\n                Priority:\n                  description: In asynchronous mode, the priority of the job. The lower the value, the higher the priority.\n                  type: number\n                Resources:\n                  description: The list of Orthanc identifiers of interest.\n                  items:\n                    type: string\n                  type: array\n                Synchronous:\n                  description: If `true`, create the archive in synchronous mode, which means that the HTTP answer will directly contain the ZIP file. This is the default, easy behavior. However, if global configuration option \"SynchronousZipStream\" is set to \"false\", asynchronous transfers should be preferred for large amount of data, as the creation of the temporary file might lead to network timeouts.\n                  type: boolean\n                Transcode:\n                  description: \"If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html\"\n                  type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: \"In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs\"\n                properties:\n                  ID:\n                    description: Identifier of the job\n                    type: string\n                  Path:\n                    description: Path to access the job in the REST API\n                    type: string\n            application/zip:\n              examples: {}\n              schema:\n                description: In synchronous mode, the ZIP file containing the archive\n          description: \"\"\n      summary: Create DICOMDIR media\n      tags:\n        - System\n  /tools/default-encoding:\n    get:\n      deprecated: false\n      description: Get the default encoding that is used by Orthanc if parsing a DICOM instance without the `SpecificCharacterEncoding` tag, or during C-FIND. This corresponds to the configuration option `DefaultEncoding`.\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The name of the encoding\n          description: \"\"\n      summary: Get default encoding\n      tags:\n        - System\n    put:\n      deprecated: false\n      description: Change the default encoding that is used by Orthanc if parsing a DICOM instance without the `SpecificCharacterEncoding` tag, or during C-FIND. This corresponds to the configuration option `DefaultEncoding`.\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: The name of the encoding. Check out configuration option `DefaultEncoding` for the allowed values.\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set default encoding\n      tags:\n        - System\n  /tools/dicom-conformance:\n    get:\n      deprecated: false\n      description: Get the DICOM conformance statement of Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The DICOM conformance statement\n          description: \"\"\n      summary: Get DICOM conformance\n      tags:\n        - System\n  /tools/dicom-echo:\n    post:\n      deprecated: false\n      description: Trigger C-ECHO SCU command against a DICOM modality described in the POST body, without having to register the modality in some `/modalities/{id}` (new in Orthanc 1.8.1)\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                AET:\n                  description: AET of the remote DICOM modality\n                  type: string\n                CheckFind:\n                  description: Issue a dummy C-FIND command after the C-GET SCU, in order to check whether the remote modality knows about Orthanc. This field defaults to the value of the `DicomEchoChecksFind` configuration option. New in Orthanc 1.8.1.\n                  type: boolean\n                Host:\n                  description: Host address of the remote DICOM modality (typically, an IP address)\n                  type: string\n                Manufacturer:\n                  description: Manufacturer of the remote DICOM modality (check configuration option `DicomModalities` for possible values\n                  type: string\n                Port:\n                  description: TCP port of the remote DICOM modality\n                  type: number\n                Timeout:\n                  description: Timeout for the C-ECHO command, in seconds\n                  type: number\n                UseDicomTls:\n                  description: Whether to use DICOM TLS in the SCU connection initiated by Orthanc (new in Orthanc 1.9.0)\n                  type: boolean\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Trigger C-ECHO SCU\n      tags:\n        - System\n  /tools/execute-script:\n    post:\n      deprecated: false\n      description: Execute the provided Lua script by the Orthanc server. This is very insecure for Orthanc servers that are remotely accessible, cf. configuration option `ExecuteLuaEnabled`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: The Lua script to be executed\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: Output of the Lua script\n          description: \"\"\n      summary: Execute Lua script\n      tags:\n        - System\n  /tools/find:\n    post:\n      deprecated: false\n      description: \"This URI can be used to perform a search on the content of the local Orthanc server, in a way that is similar to querying remote DICOM modalities using C-FIND SCU: https://book.orthanc-server.com/users/rest.html#performing-finds-within-orthanc\"\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"\"\n              properties:\n                CaseSensitive:\n                  description: Enable case-sensitive search for PN value representations (defaults to configuration option `CaseSensitivePN`)\n                  type: boolean\n                Expand:\n                  description: Also retrieve the content of the matching resources, not only their Orthanc identifiers\n                  type: boolean\n                Full:\n                  description: If set to `true`, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)\n                  type: boolean\n                Level:\n                  description: Level of the query (`Patient`, `Study`, `Series` or `Instance`)\n                  type: string\n                Limit:\n                  description: Limit the number of reported resources\n                  type: number\n                Query:\n                  description: Associative array containing the filter on the values of the DICOM tags\n                  type: object\n                Short:\n                  description: If set to `true`, report the DICOM tags in hexadecimal format\n                  type: boolean\n                Since:\n                  description: Show only the resources since the provided index (in conjunction with `Limit`)\n                  type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing either the Orthanc identifiers, or detailed information about the reported resources (if `Expand` argument is `true`)\n          description: \"\"\n      summary: Look for local resources\n      tags:\n        - System\n  /tools/generate-uid:\n    get:\n      deprecated: false\n      description: Generate a random DICOM identifier\n      parameters:\n        - description: \"Type of DICOM resource among: `patient`, `study`, `series` or `instance`\"\n          in: query\n          name: level\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: The generated identifier\n          description: \"\"\n      summary: Generate an identifier\n      tags:\n        - System\n  /tools/invalidate-tags:\n    post:\n      deprecated: false\n      description: Remove all the attachments of the type \"DICOM-as-JSON\" that are associated will all the DICOM instances stored in Orthanc. These summaries will be automatically re-created on the next access. This is notably useful after changes to the `Dictionary` configuration option. https://book.orthanc-server.com/faq/orthanc-storage.html#storage-area\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Invalidate DICOM-as-JSON summaries\n      tags:\n        - System\n  /tools/log-level:\n    get:\n      deprecated: false\n      description: Get the main log level of Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get main log level\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the main log level of Orthanc\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set main log level\n      tags:\n        - Logs\n  /tools/log-level-dicom:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `dicom`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `dicom`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `dicom`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `dicom`\n      tags:\n        - Logs\n  /tools/log-level-generic:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `generic`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `generic`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `generic`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `generic`\n      tags:\n        - Logs\n  /tools/log-level-http:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `http`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `http`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `http`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `http`\n      tags:\n        - Logs\n  /tools/log-level-jobs:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `jobs`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `jobs`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `jobs`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `jobs`\n      tags:\n        - Logs\n  /tools/log-level-lua:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `lua`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `lua`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `lua`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `lua`\n      tags:\n        - Logs\n  /tools/log-level-plugins:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `plugins`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `plugins`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `plugins`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `plugins`\n      tags:\n        - Logs\n  /tools/log-level-sqlite:\n    get:\n      deprecated: false\n      description: Get the log level of the log category `sqlite`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"Possible values: `default`, `verbose` or `trace`\"\n          description: \"\"\n      summary: Get log level for `sqlite`\n      tags:\n        - Logs\n    put:\n      deprecated: false\n      description: Set the log level of the log category `sqlite`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"Possible values: `default`, `verbose` or `trace`\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set log level for `sqlite`\n      tags:\n        - Logs\n  /tools/lookup:\n    post:\n      deprecated: false\n      description: This URI can be used to convert one DICOM identifier to a list of matching Orthanc resources\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: The DICOM identifier of interest (i.e. the value of `PatientID`, `StudyInstanceUID`, `SeriesInstanceUID`, or `SOPInstanceUID`)\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples: {}\n              schema:\n                description: JSON array containing a list of matching Orthanc resources, each item in the list corresponding to a JSON object with the fields `Type`, `ID` and `Path` identifying one DICOM resource that is stored by Orthanc\n          description: \"\"\n      summary: Look for DICOM identifiers\n      tags:\n        - System\n  /tools/metrics:\n    get:\n      deprecated: false\n      description: Returns a Boolean specifying whether Prometheus metrics are collected and exposed at `/tools/metrics-prometheus`\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`1` if metrics are collected, `0` if metrics are disabled\"\n          description: \"\"\n      summary: Are metrics collected?\n      tags:\n        - System\n    put:\n      deprecated: false\n      description: Enable or disable the collection and publication of metrics at `/tools/metrics-prometheus`\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"`1` if metrics are collected, `0` if metrics are disabled\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Enable collection of metrics\n      tags:\n        - System\n  /tools/metrics-prometheus:\n    get:\n      deprecated: false\n      description: \"Get usage metrics of Orthanc in the Prometheus file format (OpenMetrics): https://book.orthanc-server.com/users/advanced-rest.html#instrumentation-with-prometheus\"\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              example: |\n                orthanc_count_instances 2552 1629103886979\n                orthanc_count_patients 8 1629103886979\n                orthanc_count_series 26 1629103886979\n                orthanc_count_studies 8 1629103886979\n                orthanc_dicom_cache_count 231 1629098711537\n                orthanc_dicom_cache_size 114.333038 1629098711537\n                orthanc_disk_size_mb 1018.65021 1629103886979\n                orthanc_jobs_completed 10 1629103886979\n                orthanc_jobs_failed 4 1629103886979\n                orthanc_jobs_pending 0 1629103886979\n                orthanc_jobs_running 0 1629103886979\n                orthanc_jobs_success 6 1629103886979\n                orthanc_rest_api_active_requests 1 1629103886977\n                orthanc_rest_api_duration_ms 1790 1629103882403\n                orthanc_storage_read_duration_ms 52 1629103881241\n                orthanc_uncompressed_size_mb 1018.65021 1629103886979\n          description: \"\"\n      summary: Get usage metrics\n      tags:\n        - System\n  /tools/now:\n    get:\n      deprecated: false\n      description: Get UTC time\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              example: 20210816T085127\n              schema:\n                description: The UTC time\n          description: \"\"\n      summary: Get UTC time\n      tags:\n        - System\n  /tools/now-local:\n    get:\n      deprecated: false\n      description: Get local time\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              example: 20210816T085127\n              schema:\n                description: The local time\n          description: \"\"\n      summary: Get local time\n      tags:\n        - System\n  /tools/reconstruct:\n    post:\n      deprecated: false\n      description: Reconstruct the index of all the tags of all the DICOM instances that are stored in Orthanc. This is notably useful after the deletion of resources whose children resources have inconsistent values with their sibling resources. Beware that this is a highly time-consuming operation, as all the DICOM instances will be parsed again, and as all the Orthanc index will be regenerated.\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Reconstruct all the index\n      tags:\n        - System\n  /tools/reset:\n    post:\n      deprecated: false\n      description: Restart Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Restart Orthanc\n      tags:\n        - System\n  /tools/shutdown:\n    post:\n      deprecated: false\n      description: Shutdown Orthanc\n      parameters: []\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Shutdown Orthanc\n      tags:\n        - System\n  /tools/unknown-sop-class-accepted:\n    get:\n      deprecated: false\n      description: Shall Orthanc C-STORE SCP accept DICOM instances with an unknown SOP class UID?\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              examples: {}\n              schema:\n                description: \"`1` if accepted, `0` if not accepted\"\n          description: \"\"\n      summary: Is unknown SOP class accepted?\n      tags:\n        - System\n    put:\n      deprecated: false\n      description: Set whether Orthanc C-STORE SCP should accept DICOM instances with an unknown SOP class UID\n      parameters: []\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              description: \"`1` if accepted, `0` if not accepted\"\n      responses:\n        \"200\":\n          description: \"\"\n      summary: Set unknown SOP class accepted\n      tags:\n        - System\n"
		}
	},
	"Error": "buildIR: make ir: path \"/series/{id}/attachments/{name}/compressed-data\": get: responses: 200: contents: application/octet-stream: octet stream with \"\" schema not supported",
	"NotImplemented": [
		"crypticName",
		"unsupported content types"
	]
}