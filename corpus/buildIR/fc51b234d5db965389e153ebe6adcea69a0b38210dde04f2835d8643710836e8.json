{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EMResearch/EvoMaster"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "core-it/src/test/resources/APIs_guru/amazonaws.com/mq/2017-11-27/openapi.yaml",
			"byteSize": 152409,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2017-11-27'\n  x-release: v4\n  title: AmazonMQ\n  description: 'Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.'\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: mq\n  x-aws-signingName: mq\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mq-2017-11-27.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/mq/'\nservers:\n  - url: 'http://mq.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AmazonMQ multi-region endpoint\n  - url: 'https://mq.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AmazonMQ multi-region endpoint\n  - url: 'http://mq.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://mq.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)\nx-hasEquivalentPaths: true\npaths:\n  /v1/brokers:\n    post:\n      operationId: CreateBroker\n      description: '\u003cp\u003eCreates a broker. Note: This API is asynchronous.\u003c/p\u003e \u003cp\u003eTo create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003eec2:CreateNetworkInterface\u003c/p\u003e \u003cp\u003eThis permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:CreateNetworkInterfacePermission\u003c/p\u003e \u003cp\u003eThis permission is required to attach the ENI to the broker instance.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DeleteNetworkInterface\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DeleteNetworkInterfacePermission\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DetachNetworkInterface\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeInternetGateways\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeNetworkInterfaces\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeNetworkInterfacePermissions\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeRouteTables\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeSecurityGroups\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeSubnets\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eec2:DescribeVpcs\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user\"\u003eCreate an IAM User and Get Your AWS Credentials\u003c/a\u003e and \u003ca href=\"https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface\"\u003eNever Modify or Delete the Amazon MQ Elastic Network Interface\u003c/a\u003e in the \u003ci\u003eAmazon MQ Developer Guide\u003c/i\u003e.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateBrokerResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: UnauthorizedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - autoMinorVersionUpgrade\n                - brokerName\n                - deploymentMode\n                - engineType\n                - engineVersion\n                - hostInstanceType\n                - publiclyAccessible\n                - users\n              properties:\n                authenticationStrategy:\n                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n                  type: string\n                  enum:\n                    - SIMPLE\n                    - LDAP\n                autoMinorVersionUpgrade:\n                  description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.'\n                  type: boolean\n                brokerName:\n                  description: 'Required. The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'\n                  type: string\n                configuration:\n                  description: \u003cp\u003eA list of information about the configuration.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n                  type: object\n                  properties:\n                    Id:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: id\n                          description: Required. The unique ID that Amazon MQ generates for the configuration.\n                    Revision:\n                      allOf:\n                        - $ref: '#/components/schemas/__integer'\n                        - xml:\n                            name: revision\n                          description: The revision number of the configuration.\n                creatorRequestId:\n                  description: 'The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn''t require idempotency.'\n                  type: string\n                deploymentMode:\n                  description: The broker's deployment mode.\n                  type: string\n                  enum:\n                    - SINGLE_INSTANCE\n                    - ACTIVE_STANDBY_MULTI_AZ\n                    - CLUSTER_MULTI_AZ\n                encryptionOptions:\n                  description: \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eEncryption options for the broker.\u003c/p\u003e\n                  type: object\n                  properties:\n                    KmsKeyId:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: kmsKeyId\n                          description: 'The customer master key (CMK) to use for the AWS Key Management Service (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.'\n                    UseAwsOwnedKey:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: useAwsOwnedKey\n                          description: 'Enables the use of an AWS owned CMK using AWS Key Management Service (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.'\n                engineType:\n                  description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.\n                  type: string\n                  enum:\n                    - ACTIVEMQ\n                    - RABBITMQ\n                engineVersion:\n                  description: 'Required. The broker engine''s version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n                  type: string\n                hostInstanceType:\n                  description: Required. The broker's instance type.\n                  type: string\n                ldapServerMetadata:\n                  description: \u003cp\u003eOptional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n                  type: object\n                  properties:\n                    Hosts:\n                      allOf:\n                        - $ref: '#/components/schemas/__listOf__string'\n                        - xml:\n                            name: hosts\n                          description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.\n                    RoleBase:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleBase\n                          description: |-\n                            The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,\n                                              dc=example, dc=com.\n                    RoleName:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleName\n                          description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.\n                    RoleSearchMatching:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleSearchMatching\n                          description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'\n                    RoleSearchSubtree:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: roleSearchSubtree\n                          description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'\n                    ServiceAccountPassword:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: serviceAccountPassword\n                          description: |-\n                            Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                              dc=com.\n                    ServiceAccountUsername:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: serviceAccountUsername\n                          description: |-\n                            Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                              dc=com.\n                    UserBase:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userBase\n                          description: |-\n                            Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,\n                                              dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.\n                    UserRoleName:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userRoleName\n                          description: Specifies the name of the LDAP attribute for the user group membership.\n                    UserSearchMatching:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userSearchMatching\n                          description: |-\n                            The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,\n                                              dc=com.\n                    UserSearchSubtree:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: userSearchSubtree\n                          description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'\n                logs:\n                  description: The list of information about logs to be enabled for the specified broker.\n                  type: object\n                  properties:\n                    Audit:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: audit\n                          description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.\n                    General:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: general\n                          description: Enables general logging.\n                maintenanceWindowStartTime:\n                  description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.\n                  type: object\n                  properties:\n                    DayOfWeek:\n                      allOf:\n                        - $ref: '#/components/schemas/DayOfWeek'\n                        - xml:\n                            name: dayOfWeek\n                          description: Required. The day of the week.\n                    TimeOfDay:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: timeOfDay\n                          description: 'Required. The time, in 24-hour format.'\n                    TimeZone:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: timeZone\n                          description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'\n                publiclyAccessible:\n                  description: 'Enables connections from applications outside of the VPC that hosts the broker''s subnets. Set to false by default, if no value is provided.'\n                  type: boolean\n                securityGroups:\n                  description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/__string'\n                storageType:\n                  description: \u003cp\u003eThe broker's storage type.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eEFS is not supported for RabbitMQ engine type.\u003c/p\u003e\u003c/important\u003e\n                  type: string\n                  enum:\n                    - EBS\n                    - EFS\n                subnetIds:\n                  description: '\u003cp\u003eThe list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eIf you specify subnets in a \u003ca href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\"\u003eshared VPC\u003c/a\u003e for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.\u003c/p\u003e\u003c/important\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/__string'\n                tags:\n                  description: Create tags when creating the broker.\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/__string'\n                users:\n                  description: '\u003cp\u003eRequired. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.\u003c/p\u003e \u003cimportant\u003e\u003ctitle\u003eAmazon MQ for RabbitMQ\u003c/title\u003e \u003cp\u003eWhen you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.\u003c/p\u003e\u003c/important\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/User'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListBrokers\n      description: Returns a list of all brokers.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListBrokersResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n        - name: MaxResults\n          in: query\n          schema:\n            type: string\n          description: Pagination limit\n          required: false\n        - name: NextToken\n          in: query\n          schema:\n            type: string\n          description: Pagination token\n          required: false\n  /v1/configurations:\n    post:\n      operationId: CreateConfiguration\n      description: Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateConfigurationResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - engineType\n                - engineVersion\n                - name\n              properties:\n                authenticationStrategy:\n                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n                  type: string\n                  enum:\n                    - SIMPLE\n                    - LDAP\n                engineType:\n                  description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.\n                  type: string\n                  enum:\n                    - ACTIVEMQ\n                    - RABBITMQ\n                engineVersion:\n                  description: 'Required. The broker engine''s version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n                  type: string\n                name:\n                  description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n                  type: string\n                tags:\n                  description: Create tags when creating the configuration.\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/__string'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListConfigurations\n      description: Returns a list of all configurations.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListConfigurationsResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n  '/v1/tags/{resource-arn}':\n    post:\n      operationId: CreateTags\n      description: Add a tag to a resource.\n      responses:\n        '204':\n          description: Success\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: resource-arn\n          in: path\n          required: true\n          description: The Amazon Resource Name (ARN) of the resource tag.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                tags:\n                  description: The key-value pair for the resource tag.\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/__string'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListTags\n      description: Lists tags for a resource.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListTagsResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: resource-arn\n          in: path\n          required: true\n          description: The Amazon Resource Name (ARN) of the resource tag.\n          schema:\n            type: string\n  '/v1/brokers/{broker-id}/users/{username}':\n    post:\n      operationId: CreateUser\n      description: Creates an ActiveMQ user.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateUserResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n        - name: username\n          in: path\n          required: true\n          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - password\n              properties:\n                consoleAccess:\n                  description: Enables access to the ActiveMQ Web Console for the ActiveMQ user.\n                  type: boolean\n                groups:\n                  description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/__string'\n                password:\n                  description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'\n                  type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    delete:\n      operationId: DeleteUser\n      description: Deletes an ActiveMQ user.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteUserResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n        - name: username\n          in: path\n          required: true\n          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n          schema:\n            type: string\n    get:\n      operationId: DescribeUser\n      description: Returns information about an ActiveMQ user.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeUserResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n        - name: username\n          in: path\n          required: true\n          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n          schema:\n            type: string\n    put:\n      operationId: UpdateUser\n      description: Updates the information for an ActiveMQ user.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateUserResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n        - name: username\n          in: path\n          required: true\n          description: 'The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                consoleAccess:\n                  description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.\n                  type: boolean\n                groups:\n                  description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/__string'\n                password:\n                  description: 'The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'\n                  type: string\n  '/v1/brokers/{broker-id}':\n    delete:\n      operationId: DeleteBroker\n      description: 'Deletes a broker. Note: This API is asynchronous.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteBrokerResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: DescribeBroker\n      description: Returns information about the specified broker.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeBrokerResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n    put:\n      operationId: UpdateBroker\n      description: Adds a pending configuration change to a broker.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateBrokerResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                authenticationStrategy:\n                  description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n                  type: string\n                  enum:\n                    - SIMPLE\n                    - LDAP\n                autoMinorVersionUpgrade:\n                  description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'\n                  type: boolean\n                configuration:\n                  description: \u003cp\u003eA list of information about the configuration.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n                  type: object\n                  properties:\n                    Id:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: id\n                          description: Required. The unique ID that Amazon MQ generates for the configuration.\n                    Revision:\n                      allOf:\n                        - $ref: '#/components/schemas/__integer'\n                        - xml:\n                            name: revision\n                          description: The revision number of the configuration.\n                engineVersion:\n                  description: 'The broker engine version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n                  type: string\n                hostInstanceType:\n                  description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\u003eBroker instance types\u003c/a\u003e.'\n                  type: string\n                ldapServerMetadata:\n                  description: \u003cp\u003eOptional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n                  type: object\n                  properties:\n                    Hosts:\n                      allOf:\n                        - $ref: '#/components/schemas/__listOf__string'\n                        - xml:\n                            name: hosts\n                          description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.\n                    RoleBase:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleBase\n                          description: |-\n                            The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,\n                                              dc=example, dc=com.\n                    RoleName:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleName\n                          description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.\n                    RoleSearchMatching:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: roleSearchMatching\n                          description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'\n                    RoleSearchSubtree:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: roleSearchSubtree\n                          description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'\n                    ServiceAccountPassword:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: serviceAccountPassword\n                          description: |-\n                            Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                              dc=com.\n                    ServiceAccountUsername:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: serviceAccountUsername\n                          description: |-\n                            Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                              dc=com.\n                    UserBase:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userBase\n                          description: |-\n                            Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,\n                                              dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.\n                    UserRoleName:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userRoleName\n                          description: Specifies the name of the LDAP attribute for the user group membership.\n                    UserSearchMatching:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: userSearchMatching\n                          description: |-\n                            The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,\n                                              dc=com.\n                    UserSearchSubtree:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: userSearchSubtree\n                          description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'\n                logs:\n                  description: The list of information about logs to be enabled for the specified broker.\n                  type: object\n                  properties:\n                    Audit:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: audit\n                          description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.\n                    General:\n                      allOf:\n                        - $ref: '#/components/schemas/__boolean'\n                        - xml:\n                            name: general\n                          description: Enables general logging.\n                maintenanceWindowStartTime:\n                  description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.\n                  type: object\n                  properties:\n                    DayOfWeek:\n                      allOf:\n                        - $ref: '#/components/schemas/DayOfWeek'\n                        - xml:\n                            name: dayOfWeek\n                          description: Required. The day of the week.\n                    TimeOfDay:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: timeOfDay\n                          description: 'Required. The time, in 24-hour format.'\n                    TimeZone:\n                      allOf:\n                        - $ref: '#/components/schemas/__string'\n                        - xml:\n                            name: timeZone\n                          description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'\n                securityGroups:\n                  description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/__string'\n  '/v1/tags/{resource-arn}#tagKeys':\n    delete:\n      operationId: DeleteTags\n      description: Removes a tag from a resource.\n      responses:\n        '204':\n          description: Success\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: resource-arn\n          in: path\n          required: true\n          description: The Amazon Resource Name (ARN) of the resource tag.\n          schema:\n            type: string\n        - name: tagKeys\n          in: query\n          required: true\n          description: An array of tag keys to delete\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/__string'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /v1/broker-engine-types:\n    get:\n      operationId: DescribeBrokerEngineTypes\n      description: Describe available engine types and versions.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeBrokerEngineTypesResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: engineType\n          in: query\n          required: false\n          description: Filter response by engine type.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /v1/broker-instance-options:\n    get:\n      operationId: DescribeBrokerInstanceOptions\n      description: Describe available broker instance options.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeBrokerInstanceOptionsResponse'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: engineType\n          in: query\n          required: false\n          description: Filter response by engine type.\n          schema:\n            type: string\n        - name: hostInstanceType\n          in: query\n          required: false\n          description: Filter response by host instance type.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n        - name: storageType\n          in: query\n          required: false\n          description: Filter response by storage type.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/v1/configurations/{configuration-id}':\n    get:\n      operationId: DescribeConfiguration\n      description: Returns information about the specified configuration.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeConfigurationResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: configuration-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the configuration.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    put:\n      operationId: UpdateConfiguration\n      description: Updates the specified configuration.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateConfigurationResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '484':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: configuration-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the configuration.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - data\n              properties:\n                data:\n                  description: Required. The base64-encoded XML configuration.\n                  type: string\n                description:\n                  description: The description of the configuration.\n                  type: string\n  '/v1/configurations/{configuration-id}/revisions/{configuration-revision}':\n    get:\n      operationId: DescribeConfigurationRevision\n      description: Returns the specified configuration revision for the specified configuration.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeConfigurationRevisionResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: configuration-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the configuration.\n          schema:\n            type: string\n        - name: configuration-revision\n          in: path\n          required: true\n          description: The revision of the configuration.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/v1/configurations/{configuration-id}/revisions':\n    get:\n      operationId: ListConfigurationRevisions\n      description: Returns a list of all revisions for the specified configuration.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListConfigurationRevisionsResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: configuration-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the configuration.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/v1/brokers/{broker-id}/users':\n    get:\n      operationId: ListUsers\n      description: Returns a list of all ActiveMQ users.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListUsersResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/v1/brokers/{broker-id}/reboot':\n    post:\n      operationId: RebootBroker\n      description: 'Reboots a broker. Note: This API is asynchronous.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RebootBrokerResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n      parameters:\n        - name: broker-id\n          in: path\n          required: true\n          description: The unique ID that Amazon MQ generates for the broker.\n          schema:\n            type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    CreateBrokerResponse:\n      type: object\n      properties:\n        BrokerArn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerArn\n              description: The broker's Amazon Resource Name (ARN).\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: The unique ID that Amazon MQ generates for the broker.\n    __string:\n      type: string\n    __integer:\n      type: integer\n    __boolean:\n      type: boolean\n    __listOf__string:\n      type: array\n      items:\n        $ref: '#/components/schemas/__string'\n    DayOfWeek:\n      type: string\n      enum:\n        - MONDAY\n        - TUESDAY\n        - WEDNESDAY\n        - THURSDAY\n        - FRIDAY\n        - SATURDAY\n        - SUNDAY\n    User:\n      type: object\n      required:\n        - Username\n        - Password\n      properties:\n        ConsoleAccess:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: consoleAccess\n              description: Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.\n        Groups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: groups\n              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.'\n        Password:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: password\n              description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'\n        Username:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: username\n              description: '\u003cp\u003eimportant\u003e\u003ctitle\u003eAmazon MQ for ActiveMQ\u003c/title\u003e \u003cpara\u003eFor ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.\u003c/p\u003e/important\u003e \u003cimportant\u003e\u003ctitle\u003eAmazon MQ for RabbitMQ\u003c/title\u003e \u003cp\u003eFor RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.\u003c/p\u003e\u003c/important\u003e\u003c/para\u003e'\n      description: 'A user associated with the broker. For RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.'\n    BadRequestException: {}\n    UnauthorizedException: {}\n    InternalServerErrorException: {}\n    ConflictException: {}\n    ForbiddenException: {}\n    CreateConfigurationResponse:\n      type: object\n      properties:\n        Arn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: arn\n              description: Required. The Amazon Resource Name (ARN) of the configuration.\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration.\n        Id:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: id\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        LatestRevision:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationRevision'\n            - xml:\n                name: latestRevision\n              description: The latest revision of the configuration.\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n    NotFoundException: {}\n    CreateUserResponse:\n      type: object\n      properties: {}\n    DeleteBrokerResponse:\n      type: object\n      properties:\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: The unique ID that Amazon MQ generates for the broker.\n    DeleteUserResponse:\n      type: object\n      properties: {}\n    DescribeBrokerResponse:\n      type: object\n      properties:\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: The authentication strategy used to secure the broker. The default is SIMPLE.\n        AutoMinorVersionUpgrade:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: autoMinorVersionUpgrade\n              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'\n        BrokerArn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerArn\n              description: The broker's Amazon Resource Name (ARN).\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: The unique ID that Amazon MQ generates for the broker.\n        BrokerInstances:\n          allOf:\n            - $ref: '#/components/schemas/__listOfBrokerInstance'\n            - xml:\n                name: brokerInstances\n              description: A list of information about allocated brokers.\n        BrokerName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerName\n              description: 'The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'\n        BrokerState:\n          allOf:\n            - $ref: '#/components/schemas/BrokerState'\n            - xml:\n                name: brokerState\n              description: The broker's status.\n        Configurations:\n          allOf:\n            - $ref: '#/components/schemas/Configurations'\n            - xml:\n                name: configurations\n              description: The list of all revisions for the specified configuration.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: The time when the broker was created.\n        DeploymentMode:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentMode'\n            - xml:\n                name: deploymentMode\n              description: The broker's deployment mode.\n        EncryptionOptions:\n          allOf:\n            - $ref: '#/components/schemas/EncryptionOptions'\n            - xml:\n                name: encryptionOptions\n              description: Encryption options for the broker. Does not apply to RabbitMQ brokers.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: 'The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'The broker engine''s version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: The broker's instance type.\n        LdapServerMetadata:\n          allOf:\n            - $ref: '#/components/schemas/LdapServerMetadataOutput'\n            - xml:\n                name: ldapServerMetadata\n              description: The metadata of the LDAP server used to authenticate and authorize connections to the broker.\n        Logs:\n          allOf:\n            - $ref: '#/components/schemas/LogsSummary'\n            - xml:\n                name: logs\n              description: The list of information about logs currently enabled and pending to be deployed for the specified broker.\n        MaintenanceWindowStartTime:\n          allOf:\n            - $ref: '#/components/schemas/WeeklyStartTime'\n            - xml:\n                name: maintenanceWindowStartTime\n              description: The parameters that determine the WeeklyStartTime.\n        PendingAuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: pendingAuthenticationStrategy\n              description: The authentication strategy that will be applied when the broker is rebooted. The default is SIMPLE.\n        PendingEngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: pendingEngineVersion\n              description: 'The broker engine version to upgrade to. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        PendingHostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: pendingHostInstanceType\n              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\u003eBroker instance types\u003c/a\u003e.'\n        PendingLdapServerMetadata:\n          allOf:\n            - $ref: '#/components/schemas/LdapServerMetadataOutput'\n            - xml:\n                name: pendingLdapServerMetadata\n              description: The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker after it is rebooted.\n        PendingSecurityGroups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: pendingSecurityGroups\n              description: The list of pending security groups to authorize connections to brokers.\n        PubliclyAccessible:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: publiclyAccessible\n              description: Enables connections from applications outside of the VPC that hosts the broker's subnets.\n        SecurityGroups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: securityGroups\n              description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'\n        StorageType:\n          allOf:\n            - $ref: '#/components/schemas/BrokerStorageType'\n            - xml:\n                name: storageType\n              description: The broker's storage type.\n        SubnetIds:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: subnetIds\n              description: The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones.\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: The list of all tags associated with this broker.\n        Users:\n          allOf:\n            - $ref: '#/components/schemas/__listOfUserSummary'\n            - xml:\n                name: users\n              description: The list of all broker usernames for the specified broker.\n    DescribeBrokerEngineTypesResponse:\n      type: object\n      properties:\n        BrokerEngineTypes:\n          allOf:\n            - $ref: '#/components/schemas/__listOfBrokerEngineType'\n            - xml:\n                name: brokerEngineTypes\n              description: List of available engine types and versions.\n        MaxResults:\n          allOf:\n            - $ref: '#/components/schemas/__integerMin5Max100'\n            - xml:\n                name: maxResults\n              description: Required. The maximum number of engine types that can be returned per page (20 by default). This value must be an integer from 5 to 100.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n    DescribeBrokerInstanceOptionsResponse:\n      type: object\n      properties:\n        BrokerInstanceOptions:\n          allOf:\n            - $ref: '#/components/schemas/__listOfBrokerInstanceOption'\n            - xml:\n                name: brokerInstanceOptions\n              description: List of available broker instance options.\n        MaxResults:\n          allOf:\n            - $ref: '#/components/schemas/__integerMin5Max100'\n            - xml:\n                name: maxResults\n              description: Required. The maximum number of instance options that can be returned per page (20 by default). This value must be an integer from 5 to 100.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n    DescribeConfigurationResponse:\n      type: object\n      properties:\n        Arn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: arn\n              description: Required. The ARN of the configuration.\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration revision.\n        Description:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: description\n              description: Required. The description of the configuration.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'Required. The broker engine''s version. For a list of supported engine versions, see, \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        Id:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: id\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        LatestRevision:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationRevision'\n            - xml:\n                name: latestRevision\n              description: Required. The latest revision of the configuration.\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: The list of all tags associated with this configuration.\n    DescribeConfigurationRevisionResponse:\n      type: object\n      properties:\n        ConfigurationId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: configurationId\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration.\n        Data:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: data\n              description: Required. The base64-encoded XML configuration.\n        Description:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: description\n              description: The description of the configuration.\n    DescribeUserResponse:\n      type: object\n      properties:\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: Required. The unique ID that Amazon MQ generates for the broker.\n        ConsoleAccess:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: consoleAccess\n              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.\n        Groups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: groups\n              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n        Pending:\n          allOf:\n            - $ref: '#/components/schemas/UserPendingChanges'\n            - xml:\n                name: pending\n              description: The status of the changes pending for the ActiveMQ user.\n        Username:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: username\n              description: 'Required. The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n    ListBrokersResponse:\n      type: object\n      properties:\n        BrokerSummaries:\n          allOf:\n            - $ref: '#/components/schemas/__listOfBrokerSummary'\n            - xml:\n                name: brokerSummaries\n              description: A list of information about all brokers.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n    ListConfigurationRevisionsResponse:\n      type: object\n      properties:\n        ConfigurationId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: configurationId\n              description: The unique ID that Amazon MQ generates for the configuration.\n        MaxResults:\n          allOf:\n            - $ref: '#/components/schemas/__integer'\n            - xml:\n                name: maxResults\n              description: The maximum number of configuration revisions that can be returned per page (20 by default). This value must be an integer from 5 to 100.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n        Revisions:\n          allOf:\n            - $ref: '#/components/schemas/__listOfConfigurationRevision'\n            - xml:\n                name: revisions\n              description: The list of all revisions for the specified configuration.\n    ListConfigurationsResponse:\n      type: object\n      properties:\n        Configurations:\n          allOf:\n            - $ref: '#/components/schemas/__listOfConfiguration'\n            - xml:\n                name: configurations\n              description: The list of all revisions for the specified configuration.\n        MaxResults:\n          allOf:\n            - $ref: '#/components/schemas/__integer'\n            - xml:\n                name: maxResults\n              description: The maximum number of configurations that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n    ListTagsResponse:\n      type: object\n      properties:\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: The key-value pair for the resource tag.\n    ListUsersResponse:\n      type: object\n      properties:\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: Required. The unique ID that Amazon MQ generates for the broker.\n        MaxResults:\n          allOf:\n            - $ref: '#/components/schemas/__integerMin5Max100'\n            - xml:\n                name: maxResults\n              description: Required. The maximum number of ActiveMQ users that can be returned per page (20 by default). This value must be an integer from 5 to 100.\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: nextToken\n              description: 'The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.'\n        Users:\n          allOf:\n            - $ref: '#/components/schemas/__listOfUserSummary'\n            - xml:\n                name: users\n              description: Required. The list of all ActiveMQ usernames for the specified broker. Does not apply to RabbitMQ brokers.\n    RebootBrokerResponse:\n      type: object\n      properties: {}\n    UpdateBrokerResponse:\n      type: object\n      properties:\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n        AutoMinorVersionUpgrade:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: autoMinorVersionUpgrade\n              description: The new boolean value that specifies whether broker engines automatically upgrade to new minor versions as new versions are released and supported by Amazon MQ.\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: Required. The unique ID that Amazon MQ generates for the broker.\n        Configuration:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationId'\n            - xml:\n                name: configuration\n              description: The ID of the updated configuration.\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'The broker engine version to upgrade to. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\u003eBroker instance types\u003c/a\u003e.'\n        LdapServerMetadata:\n          allOf:\n            - $ref: '#/components/schemas/LdapServerMetadataOutput'\n            - xml:\n                name: ldapServerMetadata\n              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.\n        Logs:\n          allOf:\n            - $ref: '#/components/schemas/Logs'\n            - xml:\n                name: logs\n              description: The list of information about logs to be enabled for the specified broker.\n        MaintenanceWindowStartTime:\n          allOf:\n            - $ref: '#/components/schemas/WeeklyStartTime'\n            - xml:\n                name: maintenanceWindowStartTime\n              description: The parameters that determine the WeeklyStartTime.\n        SecurityGroups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: securityGroups\n              description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'\n    UpdateConfigurationResponse:\n      type: object\n      properties:\n        Arn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: arn\n              description: Required. The Amazon Resource Name (ARN) of the configuration.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration.\n        Id:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: id\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        LatestRevision:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationRevision'\n            - xml:\n                name: latestRevision\n              description: The latest revision of the configuration.\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n        Warnings:\n          allOf:\n            - $ref: '#/components/schemas/__listOfSanitizationWarning'\n            - xml:\n                name: warnings\n              description: The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.\n    UpdateUserResponse:\n      type: object\n      properties: {}\n    AuthenticationStrategy:\n      type: string\n      enum:\n        - SIMPLE\n        - LDAP\n      description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n    AvailabilityZone:\n      type: object\n      properties:\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: Id for the availability zone.\n      description: Name of the availability zone.\n    EngineType:\n      type: string\n      enum:\n        - ACTIVEMQ\n        - RABBITMQ\n      description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.\n    __listOfEngineVersion:\n      type: array\n      items:\n        $ref: '#/components/schemas/EngineVersion'\n    BrokerEngineType:\n      type: object\n      properties:\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: The broker's engine type.\n        EngineVersions:\n          allOf:\n            - $ref: '#/components/schemas/__listOfEngineVersion'\n            - xml:\n                name: engineVersions\n              description: The list of engine versions.\n      description: Types of broker engines.\n    BrokerInstance:\n      type: object\n      properties:\n        ConsoleURL:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: consoleURL\n              description: The brokers web console URL.\n        Endpoints:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: endpoints\n              description: The broker's wire-level protocol endpoints.\n        IpAddress:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: ipAddress\n              description: The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.\n      description: Returns information about all brokers.\n    __listOfAvailabilityZone:\n      type: array\n      items:\n        $ref: '#/components/schemas/AvailabilityZone'\n    BrokerStorageType:\n      type: string\n      enum:\n        - EBS\n        - EFS\n      description: \u003cp\u003eThe broker's storage type.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eEFS is not supported for RabbitMQ engine type.\u003c/p\u003e\u003c/important\u003e\n    __listOfDeploymentMode:\n      type: array\n      items:\n        $ref: '#/components/schemas/DeploymentMode'\n    BrokerInstanceOption:\n      type: object\n      properties:\n        AvailabilityZones:\n          allOf:\n            - $ref: '#/components/schemas/__listOfAvailabilityZone'\n            - xml:\n                name: availabilityZones\n              description: The list of available az.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: The broker's engine type.\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: The broker's instance type.\n        StorageType:\n          allOf:\n            - $ref: '#/components/schemas/BrokerStorageType'\n            - xml:\n                name: storageType\n              description: The broker's storage type.\n        SupportedDeploymentModes:\n          allOf:\n            - $ref: '#/components/schemas/__listOfDeploymentMode'\n            - xml:\n                name: supportedDeploymentModes\n              description: The list of supported deployment modes.\n        SupportedEngineVersions:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: supportedEngineVersions\n              description: The list of supported engine versions.\n      description: Option for host instance type.\n    BrokerState:\n      type: string\n      enum:\n        - CREATION_IN_PROGRESS\n        - CREATION_FAILED\n        - DELETION_IN_PROGRESS\n        - RUNNING\n        - REBOOT_IN_PROGRESS\n      description: The broker's status.\n    __timestampIso8601:\n      type: string\n      format: date-time\n    DeploymentMode:\n      type: string\n      enum:\n        - SINGLE_INSTANCE\n        - ACTIVE_STANDBY_MULTI_AZ\n        - CLUSTER_MULTI_AZ\n      description: The broker's deployment mode.\n    BrokerSummary:\n      type: object\n      required:\n        - DeploymentMode\n        - EngineType\n      properties:\n        BrokerArn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerArn\n              description: The broker's Amazon Resource Name (ARN).\n        BrokerId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerId\n              description: The unique ID that Amazon MQ generates for the broker.\n        BrokerName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerName\n              description: 'The broker''s name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'\n        BrokerState:\n          allOf:\n            - $ref: '#/components/schemas/BrokerState'\n            - xml:\n                name: brokerState\n              description: The broker's status.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: The time when the broker was created.\n        DeploymentMode:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentMode'\n            - xml:\n                name: deploymentMode\n              description: The broker's deployment mode.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: The type of broker engine.\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: The broker's instance type.\n      description: Returns information about all brokers.\n    ChangeType:\n      type: string\n      enum:\n        - CREATE\n        - UPDATE\n        - DELETE\n      description: The type of change pending for the ActiveMQ user.\n    ConfigurationRevision:\n      type: object\n      required:\n        - Revision\n        - Created\n      properties:\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration revision.\n        Description:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: description\n              description: The description of the configuration revision.\n        Revision:\n          allOf:\n            - $ref: '#/components/schemas/__integer'\n            - xml:\n                name: revision\n              description: Required. The revision number of the configuration.\n      description: Returns information about the specified configuration revision.\n    __mapOf__string:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/__string'\n    Configuration:\n      type: object\n      required:\n        - Description\n        - EngineVersion\n        - LatestRevision\n        - AuthenticationStrategy\n        - EngineType\n        - Id\n        - Arn\n        - Name\n        - Created\n      properties:\n        Arn:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: arn\n              description: Required. The ARN of the configuration.\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.\n        Created:\n          allOf:\n            - $ref: '#/components/schemas/__timestampIso8601'\n            - xml:\n                name: created\n              description: Required. The date and time of the configuration revision.\n        Description:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: description\n              description: Required. The description of the configuration.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'Required. The broker engine''s version. For a list of supported engine versions, see, \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        Id:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: id\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        LatestRevision:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationRevision'\n            - xml:\n                name: latestRevision\n              description: Required. The latest revision of the configuration.\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: The list of all tags associated with this configuration.\n      description: Returns information about all configurations.\n    ConfigurationId:\n      type: object\n      required:\n        - Id\n      properties:\n        Id:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: id\n              description: Required. The unique ID that Amazon MQ generates for the configuration.\n        Revision:\n          allOf:\n            - $ref: '#/components/schemas/__integer'\n            - xml:\n                name: revision\n              description: The revision number of the configuration.\n      description: \u003cp\u003eA list of information about the configuration.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n    __listOfConfigurationId:\n      type: array\n      items:\n        $ref: '#/components/schemas/ConfigurationId'\n    Configurations:\n      type: object\n      properties:\n        Current:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationId'\n            - xml:\n                name: current\n              description: The broker's current configuration.\n        History:\n          allOf:\n            - $ref: '#/components/schemas/__listOfConfigurationId'\n            - xml:\n                name: history\n              description: The history of configurations applied to the broker.\n        Pending:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationId'\n            - xml:\n                name: pending\n              description: The broker's pending configuration.\n      description: Broker configuration information\n    EncryptionOptions:\n      type: object\n      required:\n        - UseAwsOwnedKey\n      properties:\n        KmsKeyId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: kmsKeyId\n              description: 'The customer master key (CMK) to use for the AWS Key Management Service (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.'\n        UseAwsOwnedKey:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: useAwsOwnedKey\n              description: 'Enables the use of an AWS owned CMK using AWS Key Management Service (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.'\n      description: \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eEncryption options for the broker.\u003c/p\u003e\n    LdapServerMetadataInput:\n      type: object\n      required:\n        - Hosts\n        - UserSearchMatching\n        - UserBase\n        - RoleSearchMatching\n        - ServiceAccountUsername\n        - RoleBase\n        - ServiceAccountPassword\n      properties:\n        Hosts:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: hosts\n              description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.\n        RoleBase:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleBase\n              description: |-\n                The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,\n                                  dc=example, dc=com.\n        RoleName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleName\n              description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.\n        RoleSearchMatching:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleSearchMatching\n              description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'\n        RoleSearchSubtree:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: roleSearchSubtree\n              description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'\n        ServiceAccountPassword:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: serviceAccountPassword\n              description: |-\n                Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                  dc=com.\n        ServiceAccountUsername:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: serviceAccountUsername\n              description: |-\n                Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                  dc=com.\n        UserBase:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userBase\n              description: |-\n                Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,\n                                  dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.\n        UserRoleName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userRoleName\n              description: Specifies the name of the LDAP attribute for the user group membership.\n        UserSearchMatching:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userSearchMatching\n              description: |-\n                The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,\n                                  dc=com.\n        UserSearchSubtree:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: userSearchSubtree\n              description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'\n      description: \u003cp\u003eOptional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eDoes not apply to RabbitMQ brokers.\u003c/p\u003e\u003c/important\u003e\n    Logs:\n      type: object\n      properties:\n        Audit:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: audit\n              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.\n        General:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: general\n              description: Enables general logging.\n      description: The list of information about logs to be enabled for the specified broker.\n    WeeklyStartTime:\n      type: object\n      required:\n        - TimeOfDay\n        - DayOfWeek\n      properties:\n        DayOfWeek:\n          allOf:\n            - $ref: '#/components/schemas/DayOfWeek'\n            - xml:\n                name: dayOfWeek\n              description: Required. The day of the week.\n        TimeOfDay:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: timeOfDay\n              description: 'Required. The time, in 24-hour format.'\n        TimeZone:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: timeZone\n              description: 'The time zone, UTC by default, in either the Country/City format, or the UTC offset format.'\n      description: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.\n    __listOfUser:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    CreateBrokerRequest:\n      type: object\n      required:\n        - EngineVersion\n        - HostInstanceType\n        - AutoMinorVersionUpgrade\n        - Users\n        - BrokerName\n        - DeploymentMode\n        - EngineType\n        - PubliclyAccessible\n      title: CreateBrokerRequest\n      properties:\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n        AutoMinorVersionUpgrade:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: autoMinorVersionUpgrade\n              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.'\n        BrokerName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: brokerName\n              description: 'Required. The broker''s name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.'\n        Configuration:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationId'\n            - xml:\n                name: configuration\n              description: A list of information about the configuration.\n        CreatorRequestId:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: creatorRequestId\n              description: 'The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn''t require idempotency.'\n        DeploymentMode:\n          allOf:\n            - $ref: '#/components/schemas/DeploymentMode'\n            - xml:\n                name: deploymentMode\n              description: Required. The broker's deployment mode.\n        EncryptionOptions:\n          allOf:\n            - $ref: '#/components/schemas/EncryptionOptions'\n            - xml:\n                name: encryptionOptions\n              description: Encryption options for the broker. Does not apply to RabbitMQ brokers.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'Required. The broker engine''s version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: Required. The broker's instance type.\n        LdapServerMetadata:\n          allOf:\n            - $ref: '#/components/schemas/LdapServerMetadataInput'\n            - xml:\n                name: ldapServerMetadata\n              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.\n        Logs:\n          allOf:\n            - $ref: '#/components/schemas/Logs'\n            - xml:\n                name: logs\n              description: Enables Amazon CloudWatch logging for brokers.\n        MaintenanceWindowStartTime:\n          allOf:\n            - $ref: '#/components/schemas/WeeklyStartTime'\n            - xml:\n                name: maintenanceWindowStartTime\n              description: The parameters that determine the WeeklyStartTime.\n        PubliclyAccessible:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: publiclyAccessible\n              description: 'Enables connections from applications outside of the VPC that hosts the broker''s subnets. Set to false by default, if no value is provided.'\n        SecurityGroups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: securityGroups\n              description: 'The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.'\n        StorageType:\n          allOf:\n            - $ref: '#/components/schemas/BrokerStorageType'\n            - xml:\n                name: storageType\n              description: The broker's storage type.\n        SubnetIds:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: subnetIds\n              description: '\u003cp\u003eThe list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eIf you specify subnets in a \u003ca href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\"\u003eshared VPC\u003c/a\u003e for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.\u003c/p\u003e\u003c/important\u003e'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: Create tags when creating the broker.\n        Users:\n          allOf:\n            - $ref: '#/components/schemas/__listOfUser'\n            - xml:\n                name: users\n              description: '\u003cp\u003eRequired. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.\u003c/p\u003e \u003cimportant\u003e\u003ctitle\u003eAmazon MQ for RabbitMQ\u003c/title\u003e \u003cp\u003eWhen you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.\u003c/p\u003e\u003c/important\u003e'\n      description: Creates a broker using the specified properties.\n    CreateConfigurationRequest:\n      type: object\n      required:\n        - EngineVersion\n        - EngineType\n        - Name\n      title: CreateConfigurationRequest\n      properties:\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy associated with the configuration. The default is SIMPLE.\n        EngineType:\n          allOf:\n            - $ref: '#/components/schemas/EngineType'\n            - xml:\n                name: engineType\n              description: 'Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.'\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'Required. The broker engine''s version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: 'Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: Create tags when creating the configuration.\n      description: Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).\n    CreateTagsRequest:\n      type: object\n      title: CreateTagsRequest\n      properties:\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/__mapOf__string'\n            - xml:\n                name: tags\n              description: The key-value pair for the resource tag.\n      description: A map of the key-value pairs for the resource tag.\n    CreateUserRequest:\n      type: object\n      required:\n        - Password\n      title: CreateUserRequest\n      properties:\n        ConsoleAccess:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: consoleAccess\n              description: Enables access to the ActiveMQ Web Console for the ActiveMQ user.\n        Groups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: groups\n              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n        Password:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: password\n              description: 'Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'\n      description: Creates a new ActiveMQ user.\n    DeleteBrokerRequest:\n      type: object\n      title: DeleteBrokerRequest\n      properties: {}\n    DeleteTagsRequest:\n      type: object\n      title: DeleteTagsRequest\n      properties: {}\n    DeleteUserRequest:\n      type: object\n      title: DeleteUserRequest\n      properties: {}\n    MaxResults:\n      type: integer\n      minimum: 1\n      maximum: 100\n    DescribeBrokerEngineTypesRequest:\n      type: object\n      title: DescribeBrokerEngineTypesRequest\n      properties: {}\n    __listOfBrokerEngineType:\n      type: array\n      items:\n        $ref: '#/components/schemas/BrokerEngineType'\n    __integerMin5Max100:\n      type: integer\n      minimum: 5\n      maximum: 100\n    DescribeBrokerInstanceOptionsRequest:\n      type: object\n      title: DescribeBrokerInstanceOptionsRequest\n      properties: {}\n    __listOfBrokerInstanceOption:\n      type: array\n      items:\n        $ref: '#/components/schemas/BrokerInstanceOption'\n    DescribeBrokerRequest:\n      type: object\n      title: DescribeBrokerRequest\n      properties: {}\n    __listOfBrokerInstance:\n      type: array\n      items:\n        $ref: '#/components/schemas/BrokerInstance'\n    LdapServerMetadataOutput:\n      type: object\n      required:\n        - Hosts\n        - UserSearchMatching\n        - UserBase\n        - RoleSearchMatching\n        - ServiceAccountUsername\n        - RoleBase\n      properties:\n        Hosts:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: hosts\n              description: Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.\n        RoleBase:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleBase\n              description: |-\n                The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,\n                                  dc=example, dc=com.\n        RoleName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleName\n              description: Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.\n        RoleSearchMatching:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: roleSearchMatching\n              description: 'The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client''s username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.'\n        RoleSearchSubtree:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: roleSearchSubtree\n              description: 'The directory search scope for the role. If set to true, scope is to search the entire subtree.'\n        ServiceAccountUsername:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: serviceAccountUsername\n              description: |-\n                Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                                  dc=com.\n        UserBase:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userBase\n              description: |-\n                Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,\n                                  dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.\n        UserRoleName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userRoleName\n              description: Specifies the name of the LDAP attribute for the user group membership.\n        UserSearchMatching:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: userSearchMatching\n              description: |-\n                The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,\n                               dc=com.\n        UserSearchSubtree:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: userSearchSubtree\n              description: 'The directory search scope for the user. If set to true, scope is to search the entire subtree.'\n      description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.\n    LogsSummary:\n      type: object\n      required:\n        - GeneralLogGroup\n        - General\n      properties:\n        Audit:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: audit\n              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.\n        AuditLogGroup:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: auditLogGroup\n              description: The location of the CloudWatch Logs log group where audit logs are sent.\n        General:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: general\n              description: Enables general logging.\n        GeneralLogGroup:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: generalLogGroup\n              description: The location of the CloudWatch Logs log group where general logs are sent.\n        Pending:\n          allOf:\n            - $ref: '#/components/schemas/PendingLogs'\n            - xml:\n                name: pending\n              description: The list of information about logs pending to be deployed for the specified broker.\n      description: The list of information about logs currently enabled and pending to be deployed for the specified broker.\n    __listOfUserSummary:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserSummary'\n    DescribeConfigurationRequest:\n      type: object\n      title: DescribeConfigurationRequest\n      properties: {}\n    DescribeConfigurationRevisionRequest:\n      type: object\n      title: DescribeConfigurationRevisionRequest\n      properties: {}\n    DescribeUserRequest:\n      type: object\n      title: DescribeUserRequest\n      properties: {}\n    UserPendingChanges:\n      type: object\n      required:\n        - PendingChange\n      properties:\n        ConsoleAccess:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: consoleAccess\n              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.\n        Groups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: groups\n              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n        PendingChange:\n          allOf:\n            - $ref: '#/components/schemas/ChangeType'\n            - xml:\n                name: pendingChange\n              description: Required. The type of change pending for the ActiveMQ user.\n      description: Returns information about the status of the changes pending for the ActiveMQ user.\n    EngineVersion:\n      type: object\n      properties:\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: name\n              description: Id for the version.\n      description: Id of the engine version.\n    ListBrokersRequest:\n      type: object\n      title: ListBrokersRequest\n      properties: {}\n    __listOfBrokerSummary:\n      type: array\n      items:\n        $ref: '#/components/schemas/BrokerSummary'\n    ListConfigurationRevisionsRequest:\n      type: object\n      title: ListConfigurationRevisionsRequest\n      properties: {}\n    __listOfConfigurationRevision:\n      type: array\n      items:\n        $ref: '#/components/schemas/ConfigurationRevision'\n    ListConfigurationsRequest:\n      type: object\n      title: ListConfigurationsRequest\n      properties: {}\n    __listOfConfiguration:\n      type: array\n      items:\n        $ref: '#/components/schemas/Configuration'\n    ListTagsRequest:\n      type: object\n      title: ListTagsRequest\n      properties: {}\n    ListUsersRequest:\n      type: object\n      title: ListUsersRequest\n      properties: {}\n    PendingLogs:\n      type: object\n      properties:\n        Audit:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: audit\n              description: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.\n        General:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: general\n              description: Enables general logging.\n      description: The list of information about logs to be enabled for the specified broker.\n    RebootBrokerRequest:\n      type: object\n      title: RebootBrokerRequest\n      properties: {}\n    SanitizationWarningReason:\n      type: string\n      enum:\n        - DISALLOWED_ELEMENT_REMOVED\n        - DISALLOWED_ATTRIBUTE_REMOVED\n        - INVALID_ATTRIBUTE_VALUE_REMOVED\n      description: The reason for which the XML elements or attributes were sanitized.\n    SanitizationWarning:\n      type: object\n      required:\n        - Reason\n      properties:\n        AttributeName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: attributeName\n              description: The name of the XML attribute that has been sanitized.\n        ElementName:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: elementName\n              description: The name of the XML element that has been sanitized.\n        Reason:\n          allOf:\n            - $ref: '#/components/schemas/SanitizationWarningReason'\n            - xml:\n                name: reason\n              description: Required. The reason for which the XML elements or attributes were sanitized.\n      description: Returns information about the XML element or attribute that was sanitized in the configuration.\n    UpdateBrokerRequest:\n      type: object\n      title: UpdateBrokerRequest\n      properties:\n        AuthenticationStrategy:\n          allOf:\n            - $ref: '#/components/schemas/AuthenticationStrategy'\n            - xml:\n                name: authenticationStrategy\n              description: Optional. The authentication strategy used to secure the broker. The default is SIMPLE.\n        AutoMinorVersionUpgrade:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: autoMinorVersionUpgrade\n              description: 'Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.'\n        Configuration:\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationId'\n            - xml:\n                name: configuration\n              description: A list of information about the configuration.\n        EngineVersion:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: engineVersion\n              description: 'The broker engine version. For a list of supported engine versions, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\u003eSupported engines\u003c/a\u003e.'\n        HostInstanceType:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: hostInstanceType\n              description: 'The broker''s host instance type to upgrade to. For a list of supported instance types, see \u003ca href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\u003eBroker instance types\u003c/a\u003e.'\n        LdapServerMetadata:\n          allOf:\n            - $ref: '#/components/schemas/LdapServerMetadataInput'\n            - xml:\n                name: ldapServerMetadata\n              description: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.\n        Logs:\n          allOf:\n            - $ref: '#/components/schemas/Logs'\n            - xml:\n                name: logs\n              description: Enables Amazon CloudWatch logging for brokers.\n        MaintenanceWindowStartTime:\n          allOf:\n            - $ref: '#/components/schemas/WeeklyStartTime'\n            - xml:\n                name: maintenanceWindowStartTime\n              description: The parameters that determine the WeeklyStartTime.\n        SecurityGroups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: securityGroups\n              description: 'The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.'\n      description: Updates the broker using the specified properties.\n    UpdateConfigurationRequest:\n      type: object\n      required:\n        - Data\n      title: UpdateConfigurationRequest\n      properties:\n        Data:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: data\n              description: Required. The base64-encoded XML configuration.\n        Description:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: description\n              description: The description of the configuration.\n      description: Updates the specified configuration.\n    __listOfSanitizationWarning:\n      type: array\n      items:\n        $ref: '#/components/schemas/SanitizationWarning'\n    UpdateUserRequest:\n      type: object\n      title: UpdateUserRequest\n      properties:\n        ConsoleAccess:\n          allOf:\n            - $ref: '#/components/schemas/__boolean'\n            - xml:\n                name: consoleAccess\n              description: Enables access to the the ActiveMQ Web Console for the ActiveMQ user.\n        Groups:\n          allOf:\n            - $ref: '#/components/schemas/__listOf__string'\n            - xml:\n                name: groups\n              description: 'The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n        Password:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: password\n              description: 'The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).'\n      description: Updates the information for an ActiveMQ user.\n    UserSummary:\n      type: object\n      required:\n        - Username\n      properties:\n        PendingChange:\n          allOf:\n            - $ref: '#/components/schemas/ChangeType'\n            - xml:\n                name: pendingChange\n              description: The type of change pending for the broker user.\n        Username:\n          allOf:\n            - $ref: '#/components/schemas/__string'\n            - xml:\n                name: username\n              description: 'Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.'\n      description: Returns a list of all broker users. Does not apply to RabbitMQ brokers.\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/EMResearch/EvoMaster@910784d611073e73d97ffc611421bbda37d78bb7/-/blob/core-it/src/test/resources/APIs_guru/amazonaws.com/mq/2017-11-27/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/EMResearch/EvoMaster/blob/910784d611073e73d97ffc611421bbda37d78bb7/core-it/src/test/resources/APIs_guru/amazonaws.com/mq/2017-11-27/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/v1/broker-engine-types\": get: responses: code 200: contents: media: \"application/json\": generate schema: field BrokerEngineTypes: allOf: schema type mismatch: array and "
}