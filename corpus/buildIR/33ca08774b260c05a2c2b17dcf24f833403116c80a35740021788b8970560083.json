{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Zooz/predator"
		},
		"file": {
			"name": "swagger-docs.yaml",
			"size": 0,
			"path": "docs/devguide/docs/swagger-docs.yaml",
			"byteSize": 88398,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.6.3\n  title: Predator\n  x-logo:\n    url: logo.png\n    backgroundColor: white\n  description: \u003e\n    # Overview\n\n\n    Predator is an open-source performance framework. It manages the entire\n\n    lifecycle of load testing a server, from creating a test file, running\n\n    scheduled and on-demand tests, and finally viewing the test results.\n\n    Developers who want to load their system end-to-end or test a specific\n\n    service will benefit from this framework. Bootstrapped with a user-friendly\n\n    UI alongside a simple REST API, Predator simplifies the performance testing\n\n    regime.\n\n\n    For an introduction to Predator and its concepts, see the \u003ca\n    href=\"https://www.predator.dev\" target=\"_blank\"\u003ePredator Website\u003c/a\u003e.\ntags:\n  - name: Tests\n    description: \u003e\n      Tests include end-to-end scenarios that are executed at pre-configured\n      intervals to provide in-depth performance metrics of your API.\n  - name: DSL Definitions\n    description: \u003e\n      Predator's Domain Specific Language (DSL) allows you to generate request\n      templates, which you can then reuse in the same test and in other tests,\n      reducing replication.\n  - name: Processors\n    description: \u003e\n      Processor files allow Predator to execute custom javascript code during\n      test flows.\n  - name: Jobs\n    description: \u003e\n      Predator executes tests through so-called **jobs**. Depending on your\n      configuration, the job will either execute immediately or at scheduled\n      intervals.\n  - name: Reports\n    description: \u003e\n      Reports give you insight into the performance of your API. Predator\n      generates a report for each test that is executed.\n  - name: Configuration\n    description: |\n      This resource allows you to configure Predator programmatically.\n  - name: Files\n    description: \u003e\n      This resource allows uploading files which can be used by Predator tests\n      like csv.\n  - name: Benchmarks\n    description: \u003e\n      By creating a benchmark for a specific test, each subsequent test run for\n      that test will be given a score from 0-100 summarizing the test run in one\n      simple to analyze numerical value.\n  - name: Webhooks\n    description: |\n      This resource allows you to configure webhooks.\nx-tagGroups:\n  - name: Reference\n    tags:\n      - Tests\n      - DSL Definitions\n      - Processors\n      - Jobs\n      - Reports\n      - Configuration\n      - Files\n      - Benchmarks\n      - Webhooks\npaths:\n  /v1/dsl/{dsl_name}/definitions:\n    parameters:\n      - $ref: '#/components/parameters/dsl_name'\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: create-a-dsl-definition\n      tags:\n        - DSL Definitions\n      summary: Create a DSL Definition\n      description: Create a new DSL definition to generate a request template.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/definition'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/definition'\n        description: The definition to create\n        required: true\n    get:\n      operationId: retrieve-all-dsl-definitions\n      tags:\n        - DSL Definitions\n      summary: Retrieve all DSL Definitions\n      description: Retrieve all DSL definitions for the specified DSL group name.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/definitions_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/dsl/{dsl_name}/definitions/{definition_name}:\n    parameters:\n      - $ref: '#/components/parameters/dsl_name'\n      - $ref: '#/components/parameters/definition_name'\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-a-dsl-definition\n      tags:\n        - DSL Definitions\n      summary: Retrieve a DSL Definition\n      description: Retrieve a specific DSL definition.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/definition'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: update-a-dsl-definition\n      tags:\n        - DSL Definitions\n      summary: Update a DSL Definition\n      description: Update a specific DSL definition.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/definition'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/update_definition'\n        description: The DSL definition to update\n        required: true\n    delete:\n      operationId: Delete-a-dsl-definition\n      tags:\n        - DSL Definitions\n      summary: Delete a DSL Definition\n      description: Delete a specific DSL definition.\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: create-a-test\n      tags:\n        - Tests\n      summary: Create a Test\n      description: Create a new test.\n      parameters:\n        - in: query\n          name: filter\n          description: is filter and by what property\n          required: false\n          schema:\n            type: string\n            enum:\n              - is_favorite\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/create_test_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/test'\n        description: The test to add\n        required: true\n    get:\n      operationId: retrieve-all-tests\n      tags:\n        - Tests\n      summary: Retrieve all Tests\n      description: Retrieve all available tests.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tests_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/{test_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-a-test\n      tags:\n        - Tests\n      summary: Retrieve a Test\n      description: Retrieve a specific test.\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tests_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: update-a-test\n      tags:\n        - Tests\n      summary: Update a Test\n      description: Update a specific test.\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/create_test_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/test'\n        description: The test to update\n        required: true\n    delete:\n      operationId: delete-a-test\n      tags:\n        - Tests\n      summary: Delete a Test\n      description: Delete a specific test.\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/{test_id}/revisions:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-all-test-revisions\n      tags:\n        - Tests\n      summary: Retrieve Test Revisions\n      description: Retrieve the revisions of the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tests_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/jobs:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: create-a-job\n      tags:\n        - Jobs\n      summary: Create a Job\n      description: Create a new job that will trigger a test run.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/create_job_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/job'\n        description: The job to add\n        required: true\n    get:\n      operationId: retrieve-all-jobs\n      tags:\n        - Jobs\n      summary: Retrieve all Jobs\n      description: Retrieve the details of all available jobs.\n      parameters:\n        - in: query\n          name: one_time\n          description: Should return the one time tests (no cron expression)\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/job_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/jobs/{job_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-a-job\n      tags:\n        - Jobs\n      summary: Retrieve a Job\n      description: Retrieve a specific job.\n      parameters:\n        - in: path\n          name: job_id\n          description: The id of the job to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: update-a-job\n      tags:\n        - Jobs\n      summary: Update a Job\n      description: Update a specific job.\n      parameters:\n        - in: path\n          name: job_id\n          description: The id of the job to update.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/job_update'\n        description: The job to add\n        required: true\n    delete:\n      operationId: delete-a-job\n      tags:\n        - Jobs\n      summary: Delete a Job\n      description: Delete a specific job.\n      parameters:\n        - in: path\n          name: job_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/jobs/{job_id}/runs/{report_id}/stop:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: terminate-a-job\n      tags:\n        - Jobs\n      summary: Terminate a Job\n      description: Terminate the execution of a running job.\n      parameters:\n        - in: path\n          description: The ID of the job.\n          name: job_id\n          required: true\n          schema:\n            type: string\n        - in: path\n          description: The id of a specific run in metronome which is also the report id.\n          name: report_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '404':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/jobs/{job_id}/runs/{report_id}/logs:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      tags:\n        - Jobs\n      description: Get logs of specific job.\n      parameters:\n        - in: path\n          description: The ID of the job.\n          name: job_id\n          required: true\n          schema:\n            type: string\n        - in: path\n          description: The id of a specific run in metronome which is also the report id.\n          name: report_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '404':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/jobs/containers/:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    delete:\n      operationId: delete-all-job-containers\n      summary: Delete all finished containers/pods\n      tags:\n        - Jobs\n      description: delete all containers/pods of predator-runner\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/delete_containers_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/{test_id}/reports:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-all-reports\n      tags:\n        - Reports\n      summary: Retrieve all Reports\n      description: Retrieve all reports for the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          description: The id of the test for which to retrieve the reports.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: filter\n          description: is filter and by what property\n          required: false\n          schema:\n            type: string\n            enum:\n              - is_favorite\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/report_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    post:\n      deprecated: true\n      operationId: create-a-report\n      tags:\n        - Reports\n      summary: Create a Report\n      description: Create a new report for the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/post_report_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/post_report'\n        description: report data\n        required: true\n  /v1/tests/{test_id}/reports/{report_id}/subscribe:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: subscribe-runner-to-report\n      tags:\n        - Reports\n      summary: Subscribe runner to a report\n      description: Subscribe a runner to a specific report.\n      parameters:\n        - in: header\n          name: x-runner-id\n          description: id of the predator-runner\n          required: true\n          schema:\n            type: string\n            example: afbb6b43-fe52-48f2-84f4-1eebdbb2d5de\n        - in: path\n          name: test_id\n          required: true\n          description: The id of the test for which to retrieve the report.\n          schema:\n            type: string\n            example: 81a27853-0db5-4e57-ad63-4b637528398a\n        - in: path\n          name: report_id\n          description: The id of the report to retrieve.\n          required: true\n          schema:\n            type: string\n            example: '1601759162814'\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/{test_id}/reports/{report_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-a-report\n      tags:\n        - Reports\n      summary: Retrieve a Report\n      description: Retrieve a specific report for the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          required: true\n          description: The id of the test for which to retrieve the report.\n          schema:\n            type: string\n            example: 81a27853-0db5-4e57-ad63-4b637528398a\n        - in: path\n          name: report_id\n          description: The id of the report to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/report_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: edit-a-report\n      tags:\n        - Reports\n      summary: edit a Report\n      description: edit a specific report for the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          required: true\n          description: The id of the test for which to retrieve the report.\n          schema:\n            type: string\n            example: 81a27853-0db5-4e57-ad63-4b637528398a\n        - in: path\n          name: report_id\n          description: The id of the report to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/edit_report'\n        description: report data\n        required: true\n    delete:\n      operationId: delete-a-report\n      tags:\n        - Reports\n      summary: delete a Report\n      description: delete a specific report for the specified test.\n      parameters:\n        - in: path\n          name: test_id\n          required: true\n          description: The id of the test for which to delete the report.\n          schema:\n            type: string\n            format: uuid\n            example: 81a27853-0db5-4e57-ad63-4b637528398a\n        - in: path\n          name: report_id\n          description: The id of the report to delete.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/last_reports:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-recent-reports\n      tags:\n        - Reports\n      summary: Retrieve Recent Reports\n      description: Retrieve the most recent reports.\n      parameters:\n        - in: query\n          name: limit\n          description: The number of most recent reports to retrieve.\n          required: true\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 250\n        - in: query\n          name: filter\n          description: is filter and by what property\n          required: false\n          schema:\n            type: string\n            enum:\n              - is_favorite\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/report_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/tests/{test_id}/reports/{report_id}/stats:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      tags:\n        - Reports\n      summary: Insert a Stats Object\n      description: Insert a new stats object for a specific report\n      parameters:\n        - in: path\n          name: test_id\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: report_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/stats'\n        description: stats data\n        required: true\n  /v1/tests/{test_id}/benchmark:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      tags:\n        - Benchmarks\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      summary: Create benchmark for test\n      description: Create benchmark for test\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/benchmark_request'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/benchmark_request'\n        description: The benchmark to add\n        required: true\n    get:\n      tags:\n        - Benchmarks\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      summary: Get a benchmark for test\n      description: Get a benchmark for a test\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/benchmark_request'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/{test_id}/reports/{report_id}/export/{file_format}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: export-report\n      tags:\n        - Reports\n      parameters:\n        - in: path\n          name: test_id\n          description: The test id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n        - in: path\n          name: report_id\n          description: The id of the report to retrieve.\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: file_format\n          description: The file format for export.\n          required: true\n          schema:\n            type: string\n            enum:\n              - csv\n      summary: Exports a report to a file in the required format\n      description: Exports a report to a file in the required format.\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Unsupported File Format\n  /v1/tests/reports/compare/export/{file_format}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: export-comparison-report\n      tags:\n        - Reports\n      parameters:\n        - in: path\n          name: file_format\n          description: The file format for export.\n          required: true\n          schema:\n            type: string\n            enum:\n              - csv\n        - in: query\n          name: report_ids\n          description: List of report IDs that are part of comparison\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n          explode: false\n        - in: query\n          name: test_ids\n          description: List of test IDs that are part of comparison\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n          explode: false\n      summary: Exports a comparison report.\n      description: Exports a comparison report from multiple tests.\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Unsupported File Format\n  /v1/config:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-configurations\n      tags:\n        - Configuration\n      summary: Retrieve Configuration Settings\n      description: Retrieve all Predator configuration settings.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/config_body'\n        '500':\n          description: Internal server error\n    put:\n      operationId: update-configurations\n      tags:\n        - Configuration\n      summary: Update Configuration Settings\n      description: \u003e-\n        Update existing configuration settings. This will override environment\n        variables.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/config_body'\n        description: The config data to add\n        required: true\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/config_body'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/config/{config_key}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    delete:\n      operationId: delete-a-configuration\n      tags:\n        - Configuration\n      summary: Delete a Specific Configuration Value\n      description: |\n        Delete a specific configuration value. This will restore the original\n        environment variable.\n      parameters:\n        - in: path\n          name: config_key\n          required: true\n          description: They key to delete.\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/processors:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: create-processor-file\n      tags:\n        - Processors\n      summary: Create processor file\n      description: \u003e-\n        Create a new processor file which will have javascript code that can be\n        executed by tests.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/processor'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/processor'\n        description: The processor file to create\n        required: true\n    get:\n      operationId: retrieve-all-processor-files\n      tags:\n        - Processors\n      summary: Retrieve all processors files\n      description: Retrieve the details of all processor files.\n      parameters:\n        - in: query\n          name: from\n          description: From which result to start retrieve data\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n        - in: query\n          name: limit\n          description: Max results to return from this query ( Limit to 100 )\n          required: false\n          schema:\n            type: integer\n            maximum: 200\n            default: 100\n        - in: query\n          name: exclude\n          description: fields to exclude from response\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - javascript\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/processor'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/processors/{processor_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-processor-file\n      tags:\n        - Processors\n      summary: Retrieve processor file\n      description: Retrieve a specific job.\n      parameters:\n        - in: path\n          name: processor_id\n          description: The id of the processor file to retrieve.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/processor'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: update-processor-file\n      tags:\n        - Processors\n      summary: Update a processor file\n      description: Update a specific processor file.\n      parameters:\n        - in: path\n          name: processor_id\n          description: The id of the processor file to update.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/processor'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '422':\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/processor'\n        description: The processor to update\n        required: true\n    delete:\n      operationId: delete-processor-file\n      tags:\n        - Processors\n      summary: Delete processor file\n      description: Delete a specific processor file.\n      parameters:\n        - in: path\n          name: processor_id\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '409':\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/webhooks:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-webhooks\n      tags:\n        - Webhooks\n      summary: Retrieve webhooks\n      description: Retrieve all webhooks.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/webhook'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    post:\n      operationId: create-a-webhook\n      tags:\n        - Webhooks\n      summary: Create a Webhook\n      description: Create a new Webhook.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhook'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webhook'\n        description: The webhook to add\n        required: true\n  /v1/webhooks/{webhook_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-a-webhook\n      tags:\n        - Webhooks\n      summary: Retrieve a webhook by id\n      description: Retrieve a webhook by id.\n      parameters:\n        - in: path\n          name: webhook_id\n          description: The webhook id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhook'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n    put:\n      operationId: update-a-webhook\n      tags:\n        - Webhooks\n      summary: Update a webhook\n      description: Update a webhook.\n      parameters:\n        - in: path\n          name: webhook_id\n          description: The webhook id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webhook'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webhook'\n    delete:\n      operationId: delete-webhook\n      tags:\n        - Webhooks\n      summary: Delete webhook file\n      description: Delete a specific webhook by id.\n      parameters:\n        - in: path\n          name: webhook_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n            example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n      responses:\n        '204':\n          description: Success\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n  /v1/webhooks/test:\n    post:\n      operationId: test-a-webhook\n      tags:\n        - Webhooks\n      summary: Tests that the webhook is configure correctly\n      description: \u003e-\n        Tests that the webhook is configure correctly by sending a message to\n        the target webhook url.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/test_webhook_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/test_webhook_request'\n  /v1/files:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    post:\n      operationId: upload-file\n      tags:\n        - Files\n      summary: Create file\n      description: Upload a file which can be used by Predator tests like csv.\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/upload_file_response'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '413':\n          description: Payload Too Large\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n        '500':\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error_response'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                csv:\n                  type: string\n                  format: binary\n        description: The file to create upload\n        required: true\n  /v1/files/{file_id}:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-file\n      tags:\n        - Files\n      summary: Download file\n      description: Retrieve a specific file.\n      parameters:\n        - in: path\n          name: file_id\n          description: The id of file to download\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/upload_file_response'\n  /v1/files/{file_id}/metadata:\n    parameters:\n      - $ref: '#/components/parameters/context_id'\n    get:\n      operationId: retrieve-file-medtadata\n      tags:\n        - Files\n      summary: Get filename by id\n      description: Retrieve a specific file metadata.\n      parameters:\n        - in: path\n          name: file_id\n          description: The id of file to download\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/upload_file_response'\ncomponents:\n  parameters:\n    context_id:\n      in: header\n      name: x-context-id\n      description: The id of the user/organization context\n      required: false\n      schema:\n        type: string\n        example: team-mick\n    dsl_name:\n      name: dsl_name\n      in: path\n      required: true\n      description: \u003e-\n        The group (category) in which the DSL definition will be created.\n        Specify a group name of your choice. We recommend you place related DSL\n        definitions in the same group.\n      schema:\n        type: string\n      example: petstore\n    definition_name:\n      name: definition_name\n      in: path\n      required: true\n      description: The name of the DSL definition.\n      schema:\n        type: string\n      example: create-pet\n  schemas:\n    definition:\n      type: object\n      required:\n        - name\n        - request\n      properties:\n        name:\n          description: The name of the DSL definition.\n          type: string\n          example: create-pet\n        request:\n          description: The request template that the DSL definition will generate.\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/artillery_request_schema'\n          example:\n            post:\n              url: http://127.0.0.1:3000/pets\n              headers:\n                Content-Type: application/json\n              json:\n                name: mickey\n                species: dog\n              capture:\n                - json: $.id\n                  as: petId\n    update_definition:\n      required:\n        - request\n      properties:\n        request:\n          type: object\n          description: The request template that the DSL definition will generate.\n          additionalProperties:\n            $ref: '#/components/schemas/artillery_request_schema'\n    definitions_response:\n      type: array\n      items:\n        $ref: '#/components/schemas/definition'\n    test:\n      type: object\n      discriminator:\n        propertyName: type\n      oneOf:\n        - $ref: '#/components/schemas/basic'\n        - $ref: '#/components/schemas/dsl'\n      required:\n        - name\n        - description\n        - type\n      properties:\n        name:\n          type: string\n          minLength: 1\n          description: The name of the test.\n          example: Order from Pet Store\n        processor_file_url:\n          type: string\n          format: uri\n          example: http://www.example.com/file.txt\n          description: Url to text file location , will be used by the processor\n        csv_file_id:\n          type: string\n          format: uuid\n          example: 8e83bca3-f04f-4d16-a324-b0d2959db7d4\n          description: The id of the uploaded csv file resource\n        description:\n          type: string\n          description: A description of the test.\n          example: Performance test for placing orders from the pet store.\n        processor_id:\n          description: Unique processor identifier\n          type: string\n          format: uuid\n        is_favorite:\n          type: boolean\n          description: Test has been marked favorite\n        type:\n          $ref: '#/components/schemas/test_type'\n    test_type:\n      type: string\n      description: \u003e\n        The type of test. Can be one of the following:\n\n        * `basic`: Tests of this type cannot reuse request templates (DSL\n        definition). All request specifications must be directly included in the\n        test itself.\n          This test type is identical to the type of tests you can create through the Predator UI.\n        * `dsl`: Tests of this type reuse request templates based on previously\n        created DSL definitons.\n\n        enum:\n\n        - dsl\n\n        - basic\n\n        example: dsl\n    benchmark_request:\n      type: object\n      additionalProperties: false\n      required:\n        - errors\n        - codes\n        - rps\n        - latency\n      properties:\n        errors:\n          type: object\n          example:\n            ECONNREFUSED: 33\n            CLIENTERROR: 10\n        codes:\n          type: object\n          example:\n            '200': 161\n            '201': 1061\n            '500': 53\n        rps:\n          type: object\n          required:\n            - mean\n            - count\n          properties:\n            mean:\n              type: number\n              description: average RPS per all test run.\n            count:\n              description: Total number of request, will be used to calculate errors ratio.\n              type: number\n        latency:\n          type: object\n          required:\n            - median\n            - p95\n          properties:\n            median:\n              type: number\n            p95:\n              type: number\n    dsl:\n      description: A test that is made of scenarios base on domain specific language\n      required:\n        - scenarios\n      properties:\n        scenarios:\n          description: \u003e-\n            A scenario is a sequence of HTTP requests aimed to test the\n            performance of specific functionality.\n          type: array\n          items:\n            $ref: '#/components/schemas/scenario'\n    artillery_request_schema:\n      description: \u003e\n        The request schema used in test scenarios. The property name must be one\n        of the following HTTP methods: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`.\n\n\n        **Beware**: Specifying an invalid property name will return an error.\n      type: object\n      properties:\n        capture:\n          description: \u003e\n            Allows you to extract (capture) data from the request response and\n            store it in a variable for reuse in another request.\n\n            Must include one or more objects with a `json` attribute specifying\n            the data to extract (using JSONPath syntax), as well as an `as`\n            attribute specifying the variable name in which to store the\n            extracted data.\n          type: array\n          items:\n            type: object\n            additionalProperties:\n              type: string\n        url:\n          description: The endpoint against which the request will be executed.\n          type: string\n        headers:\n          description: The headers to pass in the request.\n          additionalProperties:\n            type: string\n        json:\n          description: The JSON body to use in the request.\n    key_value_string_object:\n      type: object\n      additionalProperties:\n        type: string\n    basic:\n      description: A test that is made of artillery json\n      required:\n        - artillery_test\n      properties:\n        artillery_test:\n          type: object\n    test_id:\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: The id of the test.\n    create_test_response:\n      allOf:\n        - $ref: '#/components/schemas/test_id'\n      required:\n        - revision_id\n      properties:\n        revision_id:\n          type: string\n          format: uuid\n          description: \u003e\n            The test's revision ID.\n\n\n            When a test is created, it is assigned a revision ID. If you update\n            a test, then it's revision ID changes as well. This allows Predator\n            to always relate an existing report to the test it was originally\n            based on.\n    tests_response:\n      type: object\n      discriminator:\n        propertyName: type\n        mapping:\n          dsl: '#/components/schemas/dsl_test_response'\n          basic: '#/components/schemas/basic_test_response'\n      required:\n        - type\n        - name\n        - description\n        - updated_at\n      properties:\n        type:\n          $ref: '#/components/schemas/test_type'\n        updated_at:\n          type: string\n          format: date-time\n          description: The date and time that the test was created.\n        name:\n          type: string\n          description: The name of the test.\n        description:\n          type: string\n          description: The description of the test.\n        file_id:\n          type: string\n          description: File id.\n        processor_id:\n          description: Unique processor identifier\n          type: string\n          format: uuid\n    dsl_test_response:\n      type: object\n      description: A test that is made of scenarios base on domain specific language\n      allOf:\n        - $ref: '#/components/schemas/create_test_response'\n      properties:\n        scenarios:\n          description: \u003e-\n            A scenario is a sequence of HTTP requests aimed to test the\n            performance of specific functionality.\n          type: array\n          items:\n            $ref: '#/components/schemas/scenario'\n          example:\n            scenarios:\n              - scenario_name: Only get pet\n                steps:\n                  - action: petstore.get-pet\n        before:\n          type: object\n          example:\n            before:\n              steps:\n                - action: petstore.create-pet\n                  properties:\n                    name:\n                      - kushkush\n                      - daisy\n        artillery_test:\n          type: object\n          description: \u003e\n            The request JSON created from the DSL specification (as returned in\n            the `raw_data` array).\n          example:\n            config:\n              target: ''\n              http:\n                pool: 100\n              phases:\n                - duration: 0\n                  arrivalRate: 0\n                  rampTo: 0\n              variables:\n                before_0_petstore.create-pet_name:\n                  - kushkush\n                  - daisy\n            scenarios:\n              - name: Only get pet\n                flow:\n                  - get:\n                      url: http://127.0.0.1:3000/pets/{{petId}}\n                weight: 100\n            before:\n              flow:\n                - post:\n                    url: http://127.0.0.1:3000/pets\n                    json:\n                      name: '{{ before_0_petstore.create-pet_name }}'\n                      species: dog\n                    capture:\n                      - json: $.id\n                        as: petId\n                    headers:\n                      Content-Type: application/json\n    basic_test_response:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/create_test_response'\n        - type: object\n          required:\n            - artillery_test\n      properties:\n        artillery_test:\n          type: object\n          description: |\n            The complete request JSON used in the test.\n          example:\n            config:\n              target: http://127.0.0.1:3000\n            scenarios:\n              - name: Get Pets\n                weight: 100\n                flow:\n                  - get:\n                      url: /pets\n                      headers: {}\n                      capture: []\n    error_response:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n    scenario:\n      required:\n        - scenario_name\n        - steps\n      properties:\n        scenario_name:\n          type: string\n          description: The name of the scenario.\n          example: Get Inventory\n        steps:\n          type: array\n          minItems: 1\n          items:\n            type: object\n            required:\n              - action\n            properties:\n              action:\n                type: string\n                description: \u003e\n                  A reference to the DSL definition you want to use. Uses the\n                  following syntax: `{dsl_group_name}.{dsl_name}`.\n                example: petstore.create-pet\n              properties:\n                type: object\n                description: \u003e\n                  Allows you to replace a request's body's property value when\n                  the test is executed. `properties` must be an object of\n                  key-value pairs.\n\n                  Each key you specify must correspond to the name you specified\n                  in the `json` object of the [Create a DSL\n                  Defintion](/#operation/create-a-dsl-definition) request.\n\n                  The value must be an `array` of the values that should be used\n                  during test execution (when specifying multiple values, the\n                  value to be used will be selected randomly).,\n                example:\n                  name:\n                    - kushkush\n                    - daisy\n              wait:\n                type: integer\n                description: The time to wait before starting the request. In seconds.\n                example: 2\n            description: An object that represent an action.\n          description: \u003e-\n            An array of the scenario steps. Steps are the HTTP requests that\n            make up the scenario.\n        weight:\n          type: number\n          description: \u003e\n            Allows for the probability (in %) of a scenario being picked by a\n            new virtual user to be \"weighed\" relative to other scenarios. If not\n            specified, each scenario is equally likely to be picked.\n          example: 20\n    job:\n      discriminator:\n        propertyName: type\n      oneOf:\n        - $ref: '#/components/schemas/load_test'\n        - $ref: '#/components/schemas/functional_test'\n      required:\n        - type\n        - test_id\n        - duration\n      properties:\n        run_immediately:\n          type: boolean\n          description: \u003e-\n            Determines if the test will be executed immediately when the job is\n            created.\n          example: true\n        type:\n          type: string\n          enum:\n            - load_test\n            - functional_test\n          description: The type of the job to run.\n          example: load_test\n    job_update:\n      properties:\n        test_id:\n          type: string\n          pattern: \u003e-\n            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\n          description: The id of the test to schedule.\n          example: 4bf5d7ab-f310-4a64-8ec2-d65c06188ec1\n        cron_expression:\n          type: string\n          description: \u003e-\n            A cron expression for scheduling the test to run periodically at a\n            specified date/time.\n          example: 0 0 12 * * ?\n        webhooks:\n          type: array\n          uniqueItems: true\n          description: \u003e\n            An array of webhooks ids, events will be fired to the coresponding\n            webhooks according to their events configuration.\n\n            The event body will include detailed information about the test,\n            such as the number of scenarios that were executed\n\n            and the number of requests that were invoked.\n          items:\n            type: string\n            format: uuid\n            description: The id of the webhook\n        duration:\n          type: number\n          minimum: 1\n          description: The time during which the test will run. In seconds.\n          example: 20\n        max_virtual_users:\n          type: number\n          minimum: 1\n          description: \u003e\n            The maximum number of virtual users executing the scenario requests.\n            This places a threshold on the number of requests that can exist\n            simultaneously.\n          example: 5\n        parallelism:\n          type: number\n          minimum: 1\n          description: \u003e\n            The number of runners that will be allocated to executing the test.\n            The `arrival_rate`, `duration` and `max_virtual_users` will be split\n            between the specified number of runners.\n          example: 5\n        emails:\n          type: array\n          description: \u003e-\n            An email address to which Predator will send a message when the test\n            execution is completed.\n          items:\n            type: string\n            example: nhoj@atlovart.com\n        environment:\n          type: string\n          description: \u003e-\n            Free text describing the environment against which the test is\n            executed.\n          example: test\n        proxy_url:\n          type: string\n          description: URL of the proxy server that predator runners will use\n          example: test\n        debug:\n          type: string\n          description: set to * in order to print all requests and responeses of the runner\n          example: test\n        enabled:\n          type: boolean\n          description: Ability to enable/disable scheduled jobs.\n          example: true\n          default: true\n        tag:\n          type: string\n          description: \u003e-\n            tag of the machine type/region that the job will run on (currently\n            supported in aws fargate)\n          example: eu-west-1\n    delete_containers_response:\n      required:\n        - deleted\n      properties:\n        deleted:\n          type: number\n          description: Number of deleted containers.\n    job_response:\n      allOf:\n        - $ref: '#/components/schemas/job'\n        - properties:\n            id:\n              type: string\n              pattern: \u003e-\n                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\n                description: The job id.\n    create_job_response:\n      allOf:\n        - $ref: '#/components/schemas/job_response'\n        - properties:\n            report_id:\n              type: string\n              description: The run id. Only shown if the job is ran immediately.\n    processor:\n      required:\n        - name\n        - description\n        - javascript\n      properties:\n        id:\n          description: Unique processor identifier\n          type: string\n          format: uuid\n          readOnly: true\n        name:\n          type: string\n          minLength: 1\n          description: The name of the processor.\n          example: Custom javascript for logging\n        description:\n          type: string\n          description: A description of the processor.\n          example: logs every error (5xx).\n        exported_functions:\n          type: array\n          readOnly: true\n          description: Names of all exported function in the javascript file\n          items:\n            type: string\n          example: generateNameBeforeScenario\n        updated_at:\n          type: string\n          format: date-time\n          description: The date and time that the procesor file was updated.\n          readOnly: true\n        created_at:\n          type: string\n          format: date-time\n          description: The date and time that the procesor file was created.\n          readOnly: true\n        javascript:\n          type: string\n          description: Raw javascript that will be used by the processor resource.\n          example: \u003e-\n            module.exports.generateNameBeforeScenario = (context, ee, next) =\u003e {\n            context.name = Date.now() + '_mick' }\n    edit_report:\n      additionalProperties: false\n      properties:\n        notes:\n          type: string\n          description: notes for specific report\n        is_favorite:\n          type: boolean\n          description: whether this report should be marked as favorite\n    post_report:\n      required:\n        - report_id\n        - job_id\n        - revision_id\n        - test_type\n        - test_name\n        - test_description\n        - start_time\n        - runner_id\n      properties:\n        report_id:\n          type: string\n          description: The id of the report\n        test_id:\n          type: string\n          description: The id of the test we would like to schedule.\n        revision_id:\n          type: string\n          description: The revision id of the test\n        job_id:\n          type: string\n          description: The id of the job in the scheduler\n        test_name:\n          type: string\n          description: The test name\n        test_description:\n          type: string\n          description: The test description\n        start_time:\n          type: string\n          description: When the test started\n        last_stats:\n          type: object\n          description: The current report metrics.\n        notes:\n          type: string\n          description: notes about the test\n        runner_id:\n          type: string\n          description: the id of the runner that created the report\n    post_report_response:\n      required:\n        - report_id\n      properties:\n        report_id:\n          type: string\n          description: The id of the report\n    stats:\n      required:\n        - stats_time\n        - phase_status\n        - data\n      properties:\n        stats_time:\n          type: string\n          description: The time the stats were taken of the test\n        phase_status:\n          type: string\n          description: The phase status of the test\n        phase_index:\n          type: string\n          description: The phase number the test is running\n        data:\n          type: string\n          description: The stats data\n        error:\n          type: object\n          description: Error thrown while running test\n    report_response:\n      discriminator:\n        propertyName: job_type\n      oneOf:\n        - $ref: '#/components/schemas/load_test'\n        - $ref: '#/components/schemas/functional_test'\n      required:\n        - test_id\n        - revision_id\n        - report_id\n        - job_id\n        - job_type\n        - test_type\n        - status\n        - start_time\n        - end_time\n        - duration_seconds\n        - tag\n      properties:\n        test_id:\n          type: string\n          description: The test id.\n        revision_id:\n          type: string\n          description: The revision id of the test.\n        report_id:\n          type: string\n          description: The report id.\n        job_id:\n          type: string\n          description: The job id.\n        test_type:\n          $ref: '#/components/schemas/test_type'\n        status:\n          type: string\n          description: The status of the running test.\n        start_time:\n          type: string\n          format: date\n          description: The date and time that the test started its execution.\n        end_time:\n          type: string\n          format: date\n          description: The date and time that the test execution ended.\n        duration_seconds:\n          type: number\n          description: The duration of the test in seconds.\n          example: 60\n        score:\n          type: number\n          description: \u003e-\n            The score of a report, calculated based on a benchmark and benchmark\n            weights\n          example: 9.25\n        benchmark_weights_data:\n          type: object\n          description: The way score calualated\n        arrival_rate:\n          type: number\n          description: \u003e-\n            The arrival rate that was set for the test. This is the number of\n            times per second that the test scenarios will run.\n        last_stats:\n          type: string\n          description: The current report metrics.\n        avg_rps:\n          type: number\n          description: The average rps.\n        notes:\n          type: string\n          description: notes about the test\n        tag:\n          description: \u003e-\n            tag of the machine type/region that the job will run on (currently\n            supported in aws fargate)\n          example: eu-west-1\n    config_body:\n      additionalProperties: false\n      properties:\n        grafana_url:\n          type: string\n          description: The url for grafana.\n        internal_address:\n          type: string\n          description: The local ip address of your machine.\n        runner_docker_image:\n          type: string\n          description: The predator-runner docker image that will run the test.\n        job_platform:\n          type: string\n          description: \u003e-\n            Type of platform using to run predator\n            (METRONOME,KUBERNETES,DOCKER,AWS_FARGATE)\n        runner_cpu:\n          minimum: 0\n          type: number\n          description: Number of CPU use by the each runner.\n        runner_memory:\n          type: number\n          minimum: 128\n          description: Max memory to use by each runner.\n        allow_insecure_tls:\n          type: boolean\n          description: \u003e-\n            If true, don't fail requests on unverified server certificate\n            errors.\n        interval_cleanup_finished_containers_ms:\n          type: number\n          minimum: 0\n          description: \u003e-\n            Interval (in ms) to search and delete finished tests containers.\n            Value of 0 means no auto clearing enabled.\n        metrics_plugin_name:\n          type: string\n          enum:\n            - influx\n            - prometheus\n          description: Metrics to use, in case one or both metrics are configured.\n        default_email_address:\n          type: string\n          description: \u003e-\n            Default email to send final report to, address can be configured\n            only by using API.\n        minimum_wait_for_delayed_report_status_update_in_ms:\n          minimum: 0\n          type: number\n          description: \u003e-\n            The minimum of time waiting for runner to report before the test\n            considered as finished. configured only by using API.\n        delay_runner_ms:\n          type: number\n          minimum: 0\n          description: \u003e-\n            Delay before the runners will start the test, useful for enviroments\n            like kubernetes with sidecars that should be initialized before the\n            runner starts\n        influx_metrics:\n          additionalProperties: false\n          type: object\n          description: Influx configuration  .\n          required:\n            - host\n            - username\n            - password\n            - database\n          properties:\n            host:\n              type: string\n              description: Influx host.\n            username:\n              type: string\n              description: User name to influx.\n            password:\n              type: string\n              description: Password name to influx.\n            database:\n              type: string\n              description: Influx db name.\n        prometheus_metrics:\n          additionalProperties: false\n          type: object\n          description: prometheus configuration.\n          required:\n            - push_gateway_url\n          properties:\n            push_gateway_url:\n              type: string\n              description: Url of push gateway.\n            buckets_sizes:\n              type: array\n              items:\n                type: number\n              description: Bucket sizes use to configure prometheus.\n            labels:\n              description: Labels which will be passed to prometheus push gateway.\n              type: object\n              additionalProperties:\n                type: string\n        smtp_server:\n          additionalProperties: false\n          type: object\n          description: Simple mail transfer protocol.\n          required:\n            - from\n            - host\n            - port\n            - username\n            - password\n            - timeout\n          properties:\n            from:\n              type: string\n              format: email\n              description: the 'from' email address that will be used to send emails\n            host:\n              type: string\n            port:\n              type: number\n            username:\n              type: string\n            password:\n              type: string\n            timeout:\n              description: timout to smtp server in milliseconds\n              type: number\n        benchmark_threshold:\n          type: number\n          description: \u003e-\n            Minimum acceptable score of tests, if a score is less than this\n            value, a webhook will be sent to the threshold webhook url.\n          minimum: 0\n          maximum: 100\n        benchmark_weights:\n          additionalProperties: false\n          type: object\n          description: benchmark_weights\n          required:\n            - percentile_ninety_five\n            - percentile_fifty\n            - server_errors_ratio\n            - client_errors_ratio\n            - rps\n          properties:\n            percentile_ninety_five:\n              description: Percentage of the score affected by p95 results.\n              allOf:\n                - $ref: '#/components/schemas/benchmark_weights'\n            percentile_fifty:\n              description: Percentage of the score affected by median results.\n              allOf:\n                - $ref: '#/components/schemas/benchmark_weights'\n            server_errors_ratio:\n              description: Percentage of the score affected by server errors ratio.\n              allOf:\n                - $ref: '#/components/schemas/benchmark_weights'\n            client_errors_ratio:\n              description: Percentage of the score affected by client errors ratio.\n              allOf:\n                - $ref: '#/components/schemas/benchmark_weights'\n            rps:\n              description: Percentage of the score affected by requests per second results.\n              allOf:\n                - $ref: '#/components/schemas/benchmark_weights'\n        custom_runner_definition:\n          description: \u003e-\n            custom json that will be merged with the kubernetes/metronome/aws\n            fargate predator runner job definition\n          type: object\n        streaming_excluded_attributes:\n          description: \u003e-\n            string of attributes to remove from streamed messages with ',' as\n            delimeter\n          type: string\n    benchmark_weights:\n      type: object\n      required:\n        - percentage\n      properties:\n        percentage:\n          type: number\n          description: benchmark percentage weight\n    upload_file_response:\n      type: object\n      required:\n        - id\n        - filename\n      properties:\n        id:\n          type: string\n          pattern: uuid\n          description: the id of the file\n        filename:\n          type: string\n          description: the name of the file\n    load_test:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/job_update'\n        - type: object\n      required:\n        - arrival_rate\n      properties:\n        arrival_rate:\n          type: number\n          minimum: 1\n          description: \u003e-\n            The number of times to run the scenarios during the full duration of\n            the test. A value of 20 arrival_count in a 60 second test will\n            result in running a scenario once every 3 seconds.\n        ramp_to:\n          type: number\n          minimum: 1\n          description: \u003e\n            Used in combination with the `arrival_rate` and `duration` values.\n            Increases the arrival rate linearly to the value specified, within\n            the specified duration.\n          example: 5\n    functional_test:\n      allOf:\n        - $ref: '#/components/schemas/job_update'\n        - type: object\n      type: object\n      required:\n        - arrival_count\n      properties:\n        arrival_count:\n          type: number\n          minimum: 1\n          description: The number of times per second that the test scenarios will run.\n    webhook:\n      type: object\n      required:\n        - name\n        - url\n        - events\n        - format_type\n      properties:\n        id:\n          description: Unique webhook identifier\n          type: string\n          format: uuid\n          readOnly: true\n        name:\n          type: string\n          description: Webhook name\n        url:\n          type: string\n          description: Webhook url to post events\n        events:\n          description: list of events which will trigger the webhook\n          type: array\n          uniqueItems: true\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/webhooks_types'\n        format_type:\n          $ref: '#/components/schemas/webhook_format_types'\n        global:\n          type: boolean\n          description: \u003e-\n            indicates whether the webhook should be applied globally(over all\n            jobs)\n    webhooks_types:\n      type: string\n      enum:\n        - started\n        - finished\n        - in_progress\n        - api_failure\n        - failed\n        - aborted\n        - benchmark_passed\n        - benchmark_failed\n    webhook_format_types:\n      type: string\n      enum:\n        - slack\n        - json\n        - teams\n        - discord\n    test_webhook_response:\n      type: object\n      required:\n        - webhook_status_code\n        - is_sucessful\n      properties:\n        webhook_status_code:\n          type: number\n          example: 400\n        is_sucessful:\n          type: boolean\n          example: false\n          description: true, if webhook target returned 2xx status code\n    test_webhook_request:\n      type: object\n      required:\n        - format_type\n        - url\n      properties:\n        format_type:\n          $ref: '#/components/schemas/webhook_format_types'\n        url:\n          type: string\n          description: Webhook url to post events\n",
			"canonicalURL": "/github.com/Zooz/predator@ca9c1dd1cca9dd4772d1e3cc6538b5fa79f29d6e/-/blob/docs/devguide/docs/swagger-docs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Zooz/predator/blob/ca9c1dd1cca9dd4772d1e3cc6538b5fa79f29d6e/docs/devguide/docs/swagger-docs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/v1/jobs\": get: responses: code 200: contents: media: \"application/json\": generate schema: item: allOf: schema type mismatch:  and object"
}