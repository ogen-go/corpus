{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/enseadaio/enseada"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "server/docs/openapi.yml",
			"byteSize": 27920,
			"content": "openapi: 3.0.1\ninfo:\n  title: Enseada\n  description: A Cloud native multi-package registry\n  x-logo:\n    url: https://enseada.io/images/enseada-logo.png\n    backgroundColor: \"#FFFFFF\"\n    altText: Enseada logo\n  contact:\n    email: enseada@pm.me\n    url: https://enseada.io\n  license:\n    name: MPL 2.0\n    url: https://opensource.org/licenses/MPL-2.0\n  version: 0.1.0\nexternalDocs:\n  description: Find out more about Enseada\n  url: https://enseada.io\ntags:\n  - name: docker\n    description: Docker V2 registry endpoints\n  - name: monitoring\n    description: Monitoring and observability endpoints\n  - name: rbac\n    description: RBAC management endpoints\n  - name: users\n    description: User management endpoints\npaths:\n  /api/v1beta1/users:\n    get:\n      tags:\n        - users\n      summary: List registered users\n      operationId: user::list\n      x-required-permissions:\n        - object: users\n          action: read\n      security:\n        - oauth:\n            - users:read\n      parameters:\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          description: List of users\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PageInfo\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        uniqueItems: true\n                        minItems: 0\n                        items:\n                          $ref: \"#/components/schemas/User\"\n    post:\n      tags:\n        - users\n      summary: Register a new user\n      operationId: user::register\n      x-required-permissions:\n        - object: users\n          action: create\n      security:\n        - oauth:\n            - users:manage\n      requestBody:\n        required: true\n        description: New user login information\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserRegistrationInfo\"\n      responses:\n        \"200\":\n          description: New user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"409\":\n          description: A user with the given username already exists\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  \"/api/v1beta1/users/{username}\":\n    parameters:\n      - name: username\n        in: path\n        description: Username of the desired user\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - users\n      summary: Fetch a single user details\n      operationId: user::get\n      x-required-permissions:\n        - object: user:$username\n          action: read\n      security:\n        - oauth:\n            - users:read\n      responses:\n        \"200\":\n          description: User details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    put:\n      tags:\n        - users\n      summary: Edit a user\n      operationId: user::update\n      x-required-permissions:\n        - object: user:$username\n          action: update\n        - object: user:$username\n          action: disable\n          description: only required to change the `enabled` status\n      security:\n        - oauth:\n            - users:manage\n      requestBody:\n        required: true\n        description: User information to update\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserEdit\"\n      responses:\n        \"200\":\n          description: Updated user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    delete:\n      tags:\n        - users\n      summary: Delete a user\n      operationId: user::delete\n      x-required-permissions:\n        - object: user:$username\n          action: delete\n      security:\n        - oauth:\n            - users:manage\n      responses:\n        \"200\":\n          description: Deleted user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  \"/api/v1beta1/users/{username}/permissions\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      tags:\n        - users\n        - rbac\n      summary: Fetch a user's permissions\n      operationId: rbac::get_user_permissions\n      x-required-permissions:\n        - object: user:$username\n          action: read_permissions\n      security:\n        - oauth:\n            - users:read\n            - permissions\n      responses:\n        \"200\":\n          description: User permissions\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PageInfo\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        uniqueItems: true\n                        minItems: 0\n                        items:\n                          $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    post:\n      tags:\n        - users\n        - rbac\n      summary: Add a permission to the user\n      operationId: rbac::add_user_permission\n      x-required-permissions:\n        - object: user:$username\n          action: manage_permissions\n      security:\n        - oauth:\n            - users:read\n            - permissions\n      requestBody:\n        description: The new permission\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Permission\"\n      responses:\n        \"200\":\n          description: The newly created permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"409\":\n          description: The user already has this permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    delete:\n      tags:\n        - users\n        - rbac\n      summary: Remove a permission to the user\n      operationId: rbac::remove_user_permission\n      x-required-permissions:\n        - object: user:$username\n          action: manage_permissions\n      security:\n        - oauth:\n            - users:read\n            - permissions\n      requestBody:\n        description: The permission to remove\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Permission\"\n      responses:\n        \"200\":\n          description: The removed permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: |\n            Either user with the given username doesn't exist,\n            or it does not have the given permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  \"/api/v1beta1/users/{username}/roles\":\n    parameters:\n      - $ref: \"#/components/parameters/username\"\n    get:\n      tags:\n        - users\n        - rbac\n      summary: Fetch a user's roles\n      operationId: rbac::get_user_roles\n      x-required-permissions:\n        - object: user:$username\n          action: read_roles\n      security:\n        - oauth:\n            - users:read\n            - roles\n      responses:\n        \"200\":\n          description: User roles details\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PageInfo\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        uniqueItems: true\n                        minItems: 0\n                        items:\n                          $ref: \"#/components/schemas/Role\"\n  \"/api/v1beta1/users/{username}/roles/{role}\":\n    parameters:\n      - $ref: '#/components/parameters/username'\n      - $ref: '#/components/parameters/role'\n    put:\n      tags:\n        - users\n        - rbac\n      summary: Add a role to the user\n      operationId: rbac::add_user_role\n      x-required-permissions:\n        - object: user:$username\n          action: manage_roles\n      security:\n        - oauth:\n            - users:manage\n            - roles\n      responses:\n        \"200\":\n          description: Updated user role\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    delete:\n      tags:\n        - users\n        - rbac\n      summary: Remove a role from the user\n      operationId: rbac::remove_user_role\n      x-required-permissions:\n        - object: user:$username\n          action: manage_roles\n      security:\n        - oauth:\n            - users:manage\n            - roles\n      responses:\n        \"200\":\n          description: Delete user role\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A user with the given username doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  /api/v1beta1/users/me:\n    get:\n      tags:\n        - users\n      summary: Fetches information about the currently authenticated user\n      operationId: user::me\n      security:\n        - oauth:\n            - profile\n      responses:\n        \"200\":\n          description: Current user details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  \"/api/v1beta1/roles/{role}/permissions\":\n    parameters:\n      - $ref: \"#/components/parameters/role\"\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      tags:\n        - rbac\n      summary: Fetch a role's permissions\n      operationId: rbac::get_role_permissions\n      x-required-permissions:\n        - object: role:$role\n          action: read_permissions\n      security:\n        - oauth:\n            - roles\n            - permissions\n      responses:\n        \"200\":\n          description: Role permissions\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PageInfo\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        uniqueItems: true\n                        minItems: 0\n                        items:\n                          $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A role with the given name doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    post:\n      tags:\n        - rbac\n      summary: Add a permission to the role\n      operationId: rbac::add_role_permission\n      x-required-permissions:\n        - object: role:$role\n          action: manage_permissions\n      security:\n        - oauth:\n            - roles\n            - permissions\n      requestBody:\n        description: The new permission\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Permission\"\n      responses:\n        \"200\":\n          description: The newly created permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A role with the given name doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"409\":\n          description: The role already has this permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    delete:\n      tags:\n        - rbac\n      summary: Remove a permission from the role\n      operationId: rbac::remove_role_permission\n      x-required-permissions:\n        - object: role:$role\n          action: manage_permissions\n      security:\n        - oauth:\n            - roles\n            - permissions\n      requestBody:\n        description: The permission to remove\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Permission\"\n      responses:\n        \"200\":\n          description: The removed permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Permission\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: |\n            Either a role with the given name doesn't exist,\n            or it does not have the given permission\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  /api/v1beta1/clients:\n    get:\n      tags:\n        - clients\n      summary: List registered clients\n      operationId: client::list\n      x-required-permissions:\n        - object: clients\n          action: read\n      security:\n        - oauth:\n            - clients:read\n      parameters:\n        - $ref: \"#/components/parameters/cursor\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          description: List of clients\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PageInfo\"\n                  - type: object\n                    properties:\n                      items:\n                        type: array\n                        uniqueItems: true\n                        minItems: 0\n                        items:\n                          $ref: \"#/components/schemas/Client\"\n    post:\n      tags:\n        - clients\n      summary: Register a new client\n      operationId: client::register\n      x-required-permissions:\n        - object: clients\n          action: create\n      security:\n        - oauth:\n            - clients:manage\n      requestBody:\n        required: true\n        description: New client login information\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Client\"\n      responses:\n        \"200\":\n          description: New client details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Client\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"409\":\n          description: A client with the given client ID already exists\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  \"/api/v1beta1/clients/{client_id}\":\n    parameters:\n      - name: client_id\n        in: path\n        description: Client ID of the desired client\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - clients\n      summary: Fetch a single client details\n      operationId: client::get\n      x-required-permissions:\n        - object: client:$client_id\n          action: read\n      security:\n        - oauth:\n            - clients:read\n      responses:\n        \"200\":\n          description: Client details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Client\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A client with the given client ID doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    put:\n      tags:\n        - clients\n      summary: Edit a client\n      operationId: client::update\n      x-required-permissions:\n        - object: client:$client_id\n          action: update\n        - object: client:$client_id\n          action: disable\n          description: only required to change the `enabled` status\n      security:\n        - oauth:\n            - clients:manage\n      requestBody:\n        required: true\n        description: Client information to update\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientEdit\"\n      responses:\n        \"200\":\n          description: Updated client details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Client\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A client with the given client ID doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n    delete:\n      tags:\n        - clients\n      summary: Delete a client\n      operationId: client::delete\n      x-required-permissions:\n        - object: client:$client_id\n          action: delete\n      security:\n        - oauth:\n            - clients:manage\n      responses:\n        \"200\":\n          description: Deleted client details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Client\"\n        \"401\":\n          description: Authentication failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n        \"404\":\n          description: A client with the given client ID doesn't exist\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\n  /health:\n    get:\n      tags:\n        - monitoring\n      summary: Get the server health status\n      operationId: health::get\n      responses:\n        \"200\":\n          description: Server is active\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthResponse\"\n        \"503\":\n          description: Server is not active\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/APIError\"\ncomponents:\n  parameters:\n    cursor:\n      name: cursor\n      in: query\n      description: |\n        Opaque cursor used for pagination.\n        Can be obtained from the `next_cursor` field in PageInfo.\n      required: false\n      schema:\n        type: string\n        format: base64\n      example: V2h5IGFyZSB5b3UgdHJ5aW5nIHRvIGRlY29kZSBhIGN1cnNvcj8gSSB0b2xkIHlvdSBpdCB3YXMgb3BhcXVlIDopCg==\n    limit:\n      name: limit\n      in: query\n      description: Numbers of items to return when paginating.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n    username:\n      name: username\n      in: path\n      description: Username of the desired user\n      required: true\n      schema:\n        type: string\n    role:\n      name: role\n      in: path\n      description: Role name\n      required: true\n      schema:\n        type: string\n  schemas:\n    User:\n      type: object\n      required:\n        - username\n      properties:\n        username:\n          type: string\n        enabled:\n          type: boolean\n          description: If false, the user is not able to authenticate\n          default: true\n    UserEdit:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: If false, the user is not able to authenticate\n    UserRegistrationInfo:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        roles:\n          type: array\n          description: Default roles for the new user\n          example:\n            - - admin\n          items:\n            type: string\n            minItems: 0\n    Role:\n      type: object\n      properties:\n        role:\n          type: string\n          description: The user's role\n      example:\n        role: users:manage\n    Permission:\n      type: object\n      required:\n        - object\n        - action\n      description: A permission represented in the traditional subject-object-action tuple.\n      properties:\n        subject:\n          type: string\n          format: guid\n          description: |\n            The subject the permission is granted to.\n            Can be omitted in relative paths like `/users/{username}/permissions` as it will be\n            overwritten by the relative subject itself.\n          example: user:root\n        object:\n          type: string\n          format: guid\n          description: The object this permission is granted over\n          example: docker_image:example\n        action:\n          type: string\n          description: The action that is permitted on the object\n          example: read\n    Client:\n      type: object\n      required:\n        - client_id\n        - kind\n        - allowed_scopes\n        - allowed_redirect_uris\n      properties:\n        client_id:\n          type: string\n        client_secret:\n          type: string\n          description: Required for clients with kind 'confidential'\n        kind:\n          type: string\n          enum:\n            - public\n            - confidential\n        allowed_scopes:\n          type: string\n        allowed_redirect_uris:\n          type: array\n          items:\n            type: string\n    ClientEdit:\n      type: object\n      properties:\n        client_secret:\n          type: string\n        allowed_scopes:\n          type: string\n        allowed_redirect_uris:\n          type: array\n          items:\n            type: string\n    HealthResponse:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          type: string\n          enum:\n            - ok\n    APIError:\n      type: object\n      required:\n        - error\n        - reasons\n      properties:\n        error:\n          type: string\n          description: Canonical reason for the error\n          example: Error Name\n        reasons:\n          type: array\n          items:\n            type: string\n          example:\n            - an error has occurred\n    PageInfo:\n      type: object\n      description: Pagination info\n      required:\n        - count\n        - next_cursor\n      properties:\n        count:\n          type: integer\n          minimum: 0\n          description: Number of items in the current page\n        next_cursor:\n          type: string\n          description: |\n            Opaque cursor to access the next page.\n            Can be `null` if there are no more pages\n          x-nullable: true\n          example: V2h5IGFyZSB5b3UgdHJ5aW5nIHRvIGRlY29kZSBhIGN1cnNvcj8gSSB0b2xkIHlvdSBpdCB3YXMgb3BhcXVlIDopCg==\n        offset:\n          type: integer\n          minimum: 0\n          description: Offset representing the current page\n  securitySchemes:\n    oauth:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth/authorize\n          tokenUrl: /oauth/token\n          scopes:\n            profile: access user profile information\n            users:read: read-only access to registered users\n            users:manage: read-write access to registered users\n            roles: read-write access to user roles\n            permissions: read-write access to user permissions\n"
		}
	},
	"Error": "buildIR: make ir: path \"/api/v1beta1/clients\": post: security: security \"oauth\" (index 0): flow \"authorizationCode\": unknown scope \"clients:manage\"",
	"NotImplemented": [
		"allOf"
	]
}