{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ga4gh/task-execution-schemas"
		},
		"file": {
			"name": "task_execution_service.openapi.yaml",
			"size": 0,
			"path": "openapi/task_execution_service.openapi.yaml",
			"byteSize": 28076,
			"content": "openapi: 3.0.1\ninfo:\n  title: Task Execution Service\n  version: 1.0.0\n  x-logo:\n    url: 'https://w3id.org/ga4gh/ga4gh-logo.svg'\n  description: \u003e\n    ## Executive Summary\n\n    The Task Execution Service (TES) API is a standardized schema and API for\n    describing and executing batch execution tasks. A task defines a set of\n    input files, a set of containers and commands to run, a set of\n    output files and some other logging and metadata.\n\n\n    TES servers accept task documents and execute them asynchronously on\n    available compute resources. A TES server could be built on top of\n    a traditional HPC queuing system,\n    such as Grid Engine, Slurm or cloud style compute systems such as AWS Batch\n    or Kubernetes.\n\n    ## Introduction\n\n    This document describes the TES API and provides details on the specific\n    endpoints, request formats, and responses. It is intended to provide key\n    information for developers of TES-compatible services as well as clients\n    that will call these TES services. Use cases include:\n\n      - Deploying existing workflow engines on new infrastructure. Workflow engines\n      such as CWL-Tes and Cromwell have extentions for using TES. This will allow\n      a system engineer to deploy them onto a new infrastructure using a job scheduling\n      system not previously supported by the engine.\n\n      - Developing a custom workflow management system. This API provides a common\n      interface to asynchronous batch processing capabilities. A developer can write\n      new tools against this interface and expect them to work using a variety of\n      backend solutions that all support the same specification.\n\n\n    ## Standards\n\n    The TES API specification is written in OpenAPI and embodies a RESTful service\n    philosophy. It uses JSON in requests and responses and standard\n    HTTP/HTTPS for information transport. HTTPS should be used rather than plain HTTP\n    except for testing or internal-only purposes.\n\n    ### Authentication and Authorization\n\n    Is is envisaged that most TES API instances will require users to authenticate to use the endpoints.\n    However, the decision if authentication is required should be taken by TES API implementers.\n\n\n    If authentication is required, we recommend that TES implementations use an OAuth2  bearer token, although they can choose other mechanisms if appropriate.\n\n\n    Checking that a user is authorized to submit TES requests is a responsibility of TES implementations.\n\n    ### CORS\n\n    If TES API implementation is to be used by another website or domain it must implement Cross Origin Resource Sharing (CORS).\n    Please refer to https://w3id.org/ga4gh/product-approval-support/cors for more information about GA4GHâ€™s recommendations and how to implement CORS.\n\n\nservers:\n- url: /ga4gh/tes/v1\npaths:\n  /service-info:\n    get:\n      tags:\n      - TaskService\n      summary: GetServiceInfo\n      description: |-\n        Provides information about the service, this structure is based on the\n        standardized GA4GH service info structure. In addition, this endpoint\n        will also provide information about customized storage endpoints offered\n        by the TES server.\n      operationId: GetServiceInfo\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tesServiceInfo'\n  /tasks:\n    get:\n      tags:\n      - TaskService\n      summary: ListTasks\n      description: |-\n        List tasks tracked by the TES server. This includes queued, active and completed tasks.\n        How long completed tasks are stored by the system may be dependent on the underlying\n        implementation.\n      operationId: ListTasks\n      parameters:\n      - name: name_prefix\n        in: query\n        description: |-\n          OPTIONAL. Filter the list to include tasks where the name matches this prefix.\n          If unspecified, no task name filtering is done.\n        schema:\n          type: string\n      - name: page_size\n        in: query\n        description: |-\n          Optional number of tasks to return in one page.\n          Must be less than 2048. Defaults to 256.\n        schema:\n          type: integer\n          format: int64\n      - name: page_token\n        in: query\n        description: |-\n          OPTIONAL. Page token is used to retrieve the next page of results.\n          If unspecified, returns the first page of results. The value can be found\n          in the `next_page_token` field of the last returned result of ListTasks\n        schema:\n          type: string\n      - $ref: '#/components/parameters/view'\n\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tesListTasksResponse'\n    post:\n      tags:\n      - TaskService\n      summary: CreateTask\n      description: |-\n        Create a new task. The user provides a Task document, which the server\n        uses as a basis and adds additional fields.\n      operationId: CreateTask\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/tesTask'\n        required: true\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tesCreateTaskResponse'\n      x-codegen-request-body-name: body\n  /tasks/{id}:\n    get:\n      tags:\n      - TaskService\n      summary: GetTask\n      description: |-\n        Get a single task, based on providing the exact task ID string.\n      operationId: GetTask\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: ID of task to retrieve.\n        schema:\n          type: string\n      - $ref: '#/components/parameters/view'\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tesTask'\n  /tasks/{id}:cancel:\n    post:\n      tags:\n      - TaskService\n      summary: CancelTask\n      description: Cancel a task based on providing an exact task ID.\n      operationId: CancelTask\n      parameters:\n      - name: id\n        in: path\n        description: ID of task to be canceled.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tesCancelTaskResponse'\ncomponents:\n  parameters:\n    view:\n      name: view\n      in: query\n      description: |-\n        OPTIONAL. Affects the fields included in the returned Task messages.\n\n        `MINIMAL`: Task message will include ONLY the fields:\n        - `tesTask.Id`\n        - `tesTask.State`\n\n        `BASIC`: Task message will include all fields EXCEPT:\n        - `tesTask.ExecutorLog.stdout`\n        - `tesTask.ExecutorLog.stderr`\n        - `tesInput.content`\n        - `tesTaskLog.system_logs`\n\n        `FULL`: Task message includes all fields.\n      schema:\n        type: string\n        default: MINIMAL\n        enum:\n        - MINIMAL\n        - BASIC\n        - FULL\n\n  schemas:\n    tesCancelTaskResponse:\n      type: object\n      description: CancelTaskResponse describes a response from the CancelTask endpoint.\n    tesCreateTaskResponse:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: Task identifier assigned by the server.\n      description: |-\n        CreateTaskResponse describes a response from the CreateTask endpoint. It\n        will include the task ID that can be used to look up the status of the job.\n    tesExecutor:\n      required:\n      - command\n      - image\n      type: object\n      properties:\n        image:\n          type: string\n          example: ubuntu:20.04\n          description: |-\n            Name of the container image. The string will be passed as the image\n            argument to the containerization run command. Examples:\n               - `ubuntu`\n               - `quay.io/aptible/ubuntu`\n               - `gcr.io/my-org/my-image`\n               - `myregistryhost:5000/fedora/httpd:version1.0`\n        command:\n          type: array\n          description: |-\n            A sequence of program arguments to execute, where the first argument\n            is the program to execute (i.e. argv). Example:\n            ```\n            {\n              \"command\" : [\"/bin/md5\", \"/data/file1\"]\n            }\n            ```\n          items:\n            type: string\n          example: [\"/bin/md5\", \"/data/file1\"]\n        workdir:\n          type: string\n          description: |-\n            The working directory that the command will be executed in.\n            If not defined, the system will default to the directory set by\n            the container image.\n          example: /data/\n        stdin:\n          type: string\n          description: |-\n            Path inside the container to a file which will be piped\n            to the executor's stdin. This must be an absolute path. This mechanism\n            could be used in conjunction with the input declaration to process\n            a data file using a tool that expects STDIN.\n\n            For example, to get the MD5 sum of a file by reading it into the STDIN\n            ```\n            {\n              \"command\" : [\"/bin/md5\"],\n              \"stdin\" : \"/data/file1\"\n            }\n            ```\n          example: \"/data/file1\"\n        stdout:\n          type: string\n          description: |-\n            Path inside the container to a file where the executor's\n            stdout will be written to. Must be an absolute path. Example:\n            ```\n            {\n              \"stdout\" : \"/tmp/stdout.log\"\n            }\n            ```\n          example: \"/tmp/stdout.log\"\n        stderr:\n          type: string\n          description: |-\n            Path inside the container to a file where the executor's\n            stderr will be written to. Must be an absolute path. Example:\n            ```\n            {\n              \"stderr\" : \"/tmp/stderr.log\"\n            }\n            ```\n          example: \"/tmp/stderr.log\"\n        env:\n          type: object\n          additionalProperties:\n            type: string\n          description: |-\n            Enviromental variables to set within the container. Example:\n            ```\n            {\n              \"env\" : {\n                \"ENV_CONFIG_PATH\" : \"/data/config.file\",\n                \"BLASTDB\" : \"/data/GRC38\",\n                \"HMMERDB\" : \"/data/hmmer\"\n              }\n            }\n            ```\n          example:\n            \"BLASTDB\" : \"/data/GRC38\"\n            \"HMMERDB\" : \"/data/hmmer\"\n      description: Executor describes a command to be executed, and its environment.\n    tesExecutorLog:\n      required:\n      - exit_code\n      type: object\n      properties:\n        start_time:\n          type: string\n          description: Time the executor started, in RFC 3339 format.\n          example: 2020-10-02T10:00:00-05:00\n        end_time:\n          type: string\n          description: Time the executor ended, in RFC 3339 format.\n          example: 2020-10-02T11:00:00-05:00\n        stdout:\n          type: string\n          description: |-\n            Stdout content.\n\n            This is meant for convenience. No guarantees are made about the content.\n            Implementations may chose different approaches: only the head, only the tail,\n            a URL reference only, etc.\n\n            In order to capture the full stdout client should set Executor.stdout\n            to a container file path, and use Task.outputs to upload that file\n            to permanent storage.\n        stderr:\n          type: string\n          description: |-\n            Stderr content.\n\n            This is meant for convenience. No guarantees are made about the content.\n            Implementations may chose different approaches: only the head, only the tail,\n            a URL reference only, etc.\n\n            In order to capture the full stderr client should set Executor.stderr\n            to a container file path, and use Task.outputs to upload that file\n            to permanent storage.\n        exit_code:\n          type: integer\n          description: Exit code.\n          format: int32\n      description: ExecutorLog describes logging information related to an Executor.\n    tesFileType:\n      type: string\n      default: FILE\n      enum:\n      - FILE\n      - DIRECTORY\n    tesInput:\n      required:\n      - path\n      - type\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        url:\n          type: string\n          description: |-\n            REQUIRED, unless \"content\" is set.\n\n            URL in long term storage, for example:\n             - s3://my-object-store/file1\n             - gs://my-bucket/file2\n             - file:///path/to/my/file\n             - /path/to/my/file\n          example: s3://my-object-store/file1\n        path:\n          type: string\n          description: |-\n            Path of the file inside the container.\n            Must be an absolute path.\n          example: /data/file1\n        type:\n          $ref: '#/components/schemas/tesFileType'\n        content:\n          type: string\n          description: |-\n            File content literal.\n\n            Implementations should support a minimum of 128 KiB in this field\n            and may define their own maximum.\n\n            UTF-8 encoded\n\n            If content is not empty, \"url\" must be ignored.\n      description: Input describes Task input files.\n    tesListTasksResponse:\n      required:\n      - tasks\n      type: object\n      properties:\n        tasks:\n          type: array\n          description: |-\n            List of tasks. These tasks will be based on the original submitted\n            task document, but with other fields, such as the job state and\n            logging info, added/changed as the job progresses.\n          items:\n            $ref: '#/components/schemas/tesTask'\n        next_page_token:\n          type: string\n          description: |-\n            Token used to return the next page of results. This value can be used\n            in the `page_token` field of the next ListTasks request.\n      description: ListTasksResponse describes a response from the ListTasks endpoint.\n    tesOutput:\n      required:\n      - path\n      - type\n      - url\n      type: object\n      properties:\n        name:\n          type: string\n          description: User-provided name of output file\n        description:\n          type: string\n          description: Optional users provided description field, can be used for documentation.\n        url:\n          type: string\n          description: |-\n            URL for the file to be copied by the TES server after the task is complete.\n            For Example:\n             - `s3://my-object-store/file1`\n             - `gs://my-bucket/file2`\n             - `file:///path/to/my/file`\n        path:\n          type: string\n          description: |-\n            Path of the file inside the container.\n            Must be an absolute path.\n        type:\n          $ref: '#/components/schemas/tesFileType'\n      description: Output describes Task output files.\n    tesOutputFileLog:\n      required:\n      - path\n      - size_bytes\n      - url\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL of the file in storage, e.g. s3://bucket/file.txt\n        path:\n          type: string\n          description: Path of the file inside the container. Must be an absolute\n            path.\n        size_bytes:\n          type: string\n          description: |-\n            Size of the file in bytes. Note, this is currently coded as a string\n            because official JSON doesn't support int64 numbers.\n          format: int64\n          example:\n            - \"1024\"\n      description: |-\n        OutputFileLog describes a single output file. This describes\n        file details after the task has completed successfully,\n        for logging purposes.\n    tesResources:\n      type: object\n      properties:\n        cpu_cores:\n          type: integer\n          description: Requested number of CPUs\n          format: int64\n          example: 4\n        preemptible:\n          type: boolean\n          description: |-\n            Define if the task is allowed to run on preemptible compute instances,\n            for example, AWS Spot. This option may have no effect when utilized\n            on some backends that don't have the concept of preemptible jobs.\n          format: boolean\n          example: false\n        ram_gb:\n          type: number\n          description: Requested RAM required in gigabytes (GB)\n          format: double\n          example: 8\n        disk_gb:\n          type: number\n          description: Requested disk size in gigabytes (GB)\n          format: double\n          example: 40\n        zones:\n          type: array\n          description: |-\n            Request that the task be run in these compute zones. How this string\n            is utilized will be dependent on the backend system. For example, a\n            system based on a cluster queueing system may use this string to define\n            priorty queue to which the job is assigned.\n          items:\n            type: string\n          example: us-west-1\n        backend_parameters:\n            type: object\n            additionalProperties:\n                type: string\n            description: |-\n                Key/value pairs for backend configuration.\n                ServiceInfo shall return a list of keys that a backend supports.\n                Keys are case insensitive.\n                It is expected that clients pass all runtime or hardware requirement key/values\n                that are not mapped to existing tesResources properties to backend_parameters.\n                Backends shall log system warnings if a key is passed that is unsupported.\n                Backends shall not store or return unsupported keys if included in a task.\n                If backend_parameters_strict equals true,\n                backends should fail the task if any key/values are unsupported, otherwise,\n                backends should attempt to run the task\n                Intended uses include VM size selection, coprocessor configuration, etc.\n                Example:\n                ```\n                {\n                  \"backend_parameters\" : {\n                    \"VmSize\" : \"Standard_D64_v3\"\n                  }\n                }\n                ```\n            example:\n                \"VmSize\" : \"Standard_D64_v3\"\n        backend_parameters_strict:\n            type: boolean\n            description: |-\n                If set to true, backends should fail the task if any backend_parameters \n                key/values are unsupported, otherwise, backends should attempt to run the task\n            format: boolean\n            default: false\n            example: false\n      description: Resources describes the resources requested by a task.\n    tesServiceType:\n      allOf:\n      - $ref: 'https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-service-info/v1.0.0/service-info.yaml#/components/schemas/ServiceType'\n      - type: object\n        required:\n        - artifact\n        properties:\n          artifact:\n            type: string\n            enum: [tes]\n            example: tes\n    tesServiceInfo:\n      allOf:\n      - $ref: 'https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-service-info/v1.0.0/service-info.yaml#/components/schemas/Service'\n      - type: object\n        properties:\n          storage:\n            type: array\n            description: |-\n              Lists some, but not necessarily all, storage locations supported\n              by the service.\n            items:\n              type: string\n            example:\n               - file:///path/to/local/funnel-storage\n               - s3://ohsu-compbio-funnel/storage\n          tesResources_backend_parameters:\n            type: array\n            description: |-\n              Lists all tesResources.backend_parameters keys supported \n              by the service\n            items:\n              type: string\n            example: [\"VmSize\"]\n          type:\n            $ref: '#/components/schemas/tesServiceType'\n    tesState:\n      type: string\n      readOnly: True\n      description: |-\n        Task state as defined by the server.\n\n         - `UNKNOWN`: The state of the task is unknown. The cause for this status\n          message may be dependent on the underlying system. The `UNKNOWN` states\n          provides a safe default for messages where this field is missing so\n          that a missing field does not accidentally imply that\n          the state is QUEUED.\n         - `QUEUED`: The task is queued and awaiting resources to begin computing.\n         - `INITIALIZING`: The task has been assigned to a worker and is currently preparing to run.\n        For example, the worker may be turning on, downloading input files, etc.\n         - `RUNNING`: The task is running. Input files are downloaded and the first Executor\n        has been started.\n         - `PAUSED`: The task is paused. The reasons for this would be tied to\n          the specific system running the job. An implementation may have the ability\n          to pause a task, but this is not required.\n         - `COMPLETE`: The task has completed running. Executors have exited without error\n        and output files have been successfully uploaded.\n         - `EXECUTOR_ERROR`: The task encountered an error in one of the Executor processes. Generally,\n        this means that an Executor exited with a non-zero exit code.\n         - `SYSTEM_ERROR`: The task was stopped due to a system error, but not from an Executor,\n        for example an upload failed due to network issues, the worker's ran out\n        of disk space, etc.\n         - `CANCELED`: The task was canceled by the user.\n      default: UNKNOWN\n      example: COMPLETE\n      enum:\n      - UNKNOWN\n      - QUEUED\n      - INITIALIZING\n      - RUNNING\n      - PAUSED\n      - COMPLETE\n      - EXECUTOR_ERROR\n      - SYSTEM_ERROR\n      - CANCELED\n    tesTask:\n      required:\n      - executors\n      type: object\n      properties:\n        id:\n          type: string\n          description: Task identifier assigned by the server.\n          readOnly: true\n          example: job-0012345\n        state:\n          $ref: '#/components/schemas/tesState'\n        name:\n          type: string\n          description: User-provided task name.\n        description:\n          type: string\n          description: |-\n            Optional user-provided description of task for documentation purposes.\n        inputs:\n          type: array\n          description: |-\n            Input files that will be used by the task. Inputs will be downloaded\n            and mounted into the executor container as defined by the task request\n            document.\n          items:\n            $ref: '#/components/schemas/tesInput'\n          example:\n            - { \"url\" : \"s3://my-object-store/file1\", \"path\" : \"/data/file1\" }\n        outputs:\n          type: array\n          description: |-\n            Output files.\n            Outputs will be uploaded from the executor container to long-term storage.\n          items:\n            $ref: '#/components/schemas/tesOutput'\n          example:\n            - { \"path\" : \"/data/outfile\", \"url\" : \"s3://my-object-store/outfile-1\", type: \"FILE\" }\n        resources:\n          $ref: '#/components/schemas/tesResources'\n        executors:\n          type: array\n          description: |-\n            An array of executors to be run. Each of the executors will run one\n            at a time sequentially. Each executor is a different command that\n            will be run, and each can utilize a different docker image. But each of\n            the executors will see the same mapped inputs and volumes that are declared\n            in the parent CreateTask message.\n\n            Execution stops on the first error.\n          items:\n            $ref: '#/components/schemas/tesExecutor'\n        volumes:\n          type: array\n          example:\n            - \"/vol/A/\"\n          description: |-\n            Volumes are directories which may be used to share data between\n            Executors. Volumes are initialized as empty directories by the\n            system when the task starts and are mounted at the same path\n            in each Executor.\n\n            For example, given a volume defined at `/vol/A`,\n            executor 1 may write a file to `/vol/A/exec1.out.txt`, then\n            executor 2 may read from that file.\n\n            (Essentially, this translates to a `docker run -v` flag where\n            the container path is the same for each executor).\n          items:\n            type: string\n        tags:\n          type: object\n          example:\n            \"WORKFLOW_ID\" : \"cwl-01234\"\n            \"PROJECT_GROUP\" : \"alice-lab\"\n\n          additionalProperties:\n            type: string\n          description: |-\n            A key-value map of arbitrary tags. These can be used to store meta-data\n            and annotations about a task. Example:\n            ```\n            {\n              \"tags\" : {\n                  \"WORKFLOW_ID\" : \"cwl-01234\",\n                  \"PROJECT_GROUP\" : \"alice-lab\"\n              }\n            }\n            ```\n        logs:\n          type: array\n          description: |-\n            Task logging information.\n            Normally, this will contain only one entry, but in the case where\n            a task fails and is retried, an entry will be appended to this list.\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/tesTaskLog'\n        creation_time:\n          type: string\n          description: |-\n            Date + time the task was created, in RFC 3339 format.\n            This is set by the system, not the client.\n          example: 2020-10-02T10:00:00-05:00\n          readOnly: true\n      description: Task describes an instance of a task.\n    tesTaskLog:\n      required:\n      - logs\n      - outputs\n      type: object\n      properties:\n        logs:\n          type: array\n          description: Logs for each executor\n          items:\n            $ref: '#/components/schemas/tesExecutorLog'\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n          description: Arbitrary logging metadata included by the implementation.\n          example:\n            host: worker-001\n            slurmm_id: 123456\n        start_time:\n          type: string\n          description: When the task started, in RFC 3339 format.\n          example: 2020-10-02T10:00:00-05:00\n        end_time:\n          type: string\n          description: When the task ended, in RFC 3339 format.\n          example: 2020-10-02T11:00:00-05:00\n        outputs:\n          type: array\n          description: |-\n            Information about all output files. Directory outputs are\n            flattened into separate items.\n          items:\n            $ref: '#/components/schemas/tesOutputFileLog'\n        system_logs:\n          type: array\n          description: |-\n            System logs are any logs the system decides are relevant,\n            which are not tied directly to an Executor process.\n            Content is implementation specific: format, size, etc.\n\n            System logs may be collected here to provide convenient access.\n\n            For example, the system may include the name of the host\n            where the task is executing, an error message that caused\n            a SYSTEM_ERROR state (e.g. disk is full), etc.\n\n            System logs are only included in the FULL task view.\n          items:\n            type: string\n      description: TaskLog describes logging information related to a Task.\n",
			"canonicalURL": "/github.com/ga4gh/task-execution-schemas@9c89664ce32167efb51f75d037b114c6a5b3dbea/-/blob/openapi/task_execution_service.openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ga4gh/task-execution-schemas/blob/9c89664ce32167efb51f75d037b114c6a5b3dbea/openapi/task_execution_service.openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/service-info\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: schema type mismatch:  and object"
}