{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nasa/utm-apis"
		},
		"file": {
			"name": "nup-oauth2.yaml",
			"size": 0,
			"path": "fimsauthz-api/nup-oauth2.yaml",
			"byteSize": 15444,
			"content": "openapi: 3.0.1\ninfo:\n  title: NUP OAuth2 Authorization Service API Documentation\n  description: |\n    NUP OAuth2 Authorization Service\n  version: 0.1.0\nservers:\n  - url: https://future.url.uam/nup-oauth2/oauth\n\npaths:\n  \"/token/\":\n    post:\n      tags:\n        - A. Client Credentials Flow\n      summary: Request for an access token with params in the HTTP body.\n      description: |\n        This endpoint is required as per RFC 6749.  A POST to this endpoint acts as a request for an access token.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - grant_type\n                - scope\n              type: object\n              properties:\n                grant_type:\n                  type: string\n                  description: Type of grant. Must be 'client_credentials'.\n                  enum:\n                    - client_credentials\n                scope:\n                  type: string\n                  description:\n                    Scope (one and only one) to be associated with the\n                    access token being requested. An error code of 400 will be returned\n                    if no scope, incorrect scope or more than one scope is specified.\n                  enum:\n                    - scope\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n        \"400\":\n          description: \u003e-\n            - Request did not conform to the API specification or failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: \u003e-\n            - Request used invalid or incorrect credentials.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"429\":\n          description: \u003e-\n            - [NOT IMPLEMENTED] Client has been timed-out for making too many requests.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      security:\n        - authenticate_using_client_credentials: []\n\n  \"/token\":\n    post:\n      tags:\n        - A. Client Credentials Flow\n      summary: Request for an access token with params in the HTTP URI as query params.\n      description: |\n        This endpoint is required as per RFC 6749.  A POST to this endpoint acts as a request for an access token.\n      parameters:\n        - in: query\n          name: grant_type\n          required: true\n          schema:\n            type: string\n            enum:\n              - client_credentials\n          description: Type of grant. Must be 'client_credentials'.\n        - in: query\n          name: scope\n          required: true\n          schema:\n            type: string\n          description: \u003e-\n            Scope (one and only one) to be associated with the access token \n            being requested. An error code of 400 will be returned if no scope, \n            incorrect scope or more than one scope is specified.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n        \"400\":\n          description: \u003e-\n            - Request did not conform to the API specification or failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: \u003e-\n            - Request used invalid or incorrect credentials.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"429\":\n          description: \u003e-\n            - [NOT IMPLEMENTED] Client has been timed-out for making too many requests.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      security:\n        - authenticate_using_client_credentials: []\n\n\n  \"/token/ \":\n    post:\n      tags:\n        - B. Password Credentials Flow\n      summary: Request for an access token with params in the HTTP body.\n      description: |\n        A POST to this endpoint acts as a request for an access token.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - grant_type\n                - username\n                - password\n              type: object\n              properties:\n                grant_type:\n                  type: string\n                  description: Type of grant. Must be 'password'.\n                  enum:\n                    - password\n                scope:\n                  type: string\n                  description:\n                    Scope (one and only one) to be associated with the\n                    access token being requested. An error code of 400 will be returned\n                    if no scope, incorrect scope or more than one scope is specified.\n                  enum:\n                    - scope\n                username:\n                  type: string\n                  description: The user’s username for the 'password' grant type.\n                password:\n                  type: string\n                  description: The user’s password for the 'password' grant type.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n        \"400\":\n          description: \u003e-\n            - Request did not conform to the API specification or failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: \u003e-\n            - Request used invalid or incorrect credentials.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"429\":\n          description: \u003e-\n            - [NOT IMPLEMENTED] Client has been timed-out for making too many requests.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      security:\n        - authenticate_using_client_credentials: []\n\n  \"/token \":\n    post:\n      tags:\n        - B. Password Credentials Flow\n      summary: Request for an access token with params in the HTTP URI as query params.\n      description: |\n        A POST to this endpoint acts as a request for an access token.\n      parameters:\n        - in: query\n          name: grant_type\n          required: true\n          schema:\n            type: string\n            enum:\n              - password\n          description: Type of grant. Must be 'password'.\n        - in: query\n          name: scope\n          schema:\n            type: string\n          description: \u003e-\n            Scope (one and only one) to be associated with the access token \n            being requested. An error code of 400 will be returned if no scope, \n            incorrect scope or more than one scope is specified.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - username\n                - password\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: The user’s username for the 'password' grant type.\n                password:\n                  type: string\n                  description: The user’s password for the 'password' grant type.\n        required: true    \n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n        \"400\":\n          description: \u003e-\n            - Request did not conform to the API specification or failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: \u003e-\n            - Request used invalid or incorrect credentials.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"429\":\n          description: \u003e-\n            - [NOT IMPLEMENTED] Client has been timed-out for making too many requests.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      security:\n        - authenticate_using_client_credentials: []\n\n\n  /api:\n    get:\n      tags:\n        - C. Version and Health\n      summary: get server info.  Can be used to check health.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\ncomponents:\n  schemas:\n    TokenResponse:\n      type: object\n      properties:\n        access_token:\n          type: string\n          description: see definitions/JwsCompactSerialization in this spec\n          format: JwsCompactSerialization\n        scope:\n          type: string\n          description: white space separated list of scopes\n        token_type:\n          type: string\n          enum:\n            - bearer\n        expires_in:\n          type: number\n          description: see definitions/JwtClaimsSet.exp property in this spec\n          format: integer\n        sub:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n        jti:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n          format: uuid\n        iss:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n        nbf:\n          type: number\n          description: see definitions/JwtClaimsSet in this spec\n      example:\n        access_token: tokenstring\n        token_type: bearer\n        expires_in: 3599\n        scope: utm.nasa.gov_write.operation\n        sub: nuss1.testing.nasa.gov\n        nbf: 1509470774\n        iss: fims.arc.nasa.gov/fimsAuthServer\n        jti: 4d4c1a63-0959-48cc-885a-3648fd582db7\n    JwtClaimsSet:\n      type: object\n      properties:\n        iss:\n          type: string\n          description:\n            The \"iss\" (issuer) claim identifies the principal that issued\n            the JWT. The URL of the FIMS Authorization Server.\n          format: URL\n        sub:\n          type: string\n          description:\n            The \"sub\" (suv4-draft identifies the principal that is the\n            subject of the JWT.\n        exp:\n          type: integer\n          description:\n            The \"exp\" (expiration time) claim identifies the expiration\n            time on or after which the JWT MUST NOT be accepted for processing.  The\n            processing of the \"exp\" claim requires that the current date/time MUST\n            be before the expiration date/time listed in the \"exp\" claim.\n          format: unix-time\n        nbf:\n          type: integer\n          description:\n            The \"nbf\" (not before) claim identifies the time before which\n            the JWT MUST NOT be accepted for processing.  The processing of the \"nbf\"\n            claim requires that the current date/time MUST be after or equal to the\n            not-before date/time listed in the \"nbf\" claim.\n          format: unix-time\n        iat:\n          type: integer\n          description:\n            The \"iat\" (issued at) claim identifies the time at which the\n            JWT was issued.  This claim can be used to determine the age of the JWT.\n          format: unix-time\n        jti:\n          type: string\n          description:\n            The \"jti\" (JWT ID) claim provides a unique identifier for the\n            JWT. For this server, this is satisfied by the use of a UUID.\n          format: uuid\n        scope:\n          type: object\n          description: See securityDefinitions section in this spec.\n    Version:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the API\n        version:\n          type: string\n          description: Version number for the API\n        build_time:\n          type: string\n          description: Time of the latest build\n          format: date-time\n          example: 2015-08-20T14:11:56.118Z\n          x-utm-data-accessibility: PUBLIC\n        api_docs:\n          type: array\n          description: URL(s) for API Documentation\n          items:\n            type: string\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          type: string\n          example: \"Error Title\"\n        error_description:\n          type: string\n          example: \"Human readable description of the error.\"\n  securitySchemes:\n    application:\n      type: oauth2\n      description: A write scope allows reading.\n      flows:\n        clientCredentials:\n          tokenUrl: https://utm.defined.host/oauth/token\n          scopes:\n            utm.nasa.gov_read.fimsadmin: Subject can read data internal to FIMS.\n            utm.nasa.gov_write.fimsadmin:\n              Subject can read, create, and update data\n              internal to FIMS.\n            utm.nasa.gov_read.operation:\n              Subject can read operational data such as\n              USS Instance data\n            utm.nasa.gov_write.operation:\n              Subject can read, create, and update operational\n              data such as USS Instance data\n            utm.nasa.gov_read.message:\n              Subject can read message data such as UTM Message\n              and Negotiations\n            utm.nasa.gov_write.message:\n              Subject can read, create, and update message\n              data such as UTM Message and Negotiations\n            utm.nasa.gov_read.publicsafety:\n              Subject can read operations that are designated\n              public safety operations.\n            utm.nasa.gov_write.publicsafety:\n              Subject can read, create, and update\n              operations that are designated public safety operations.\n            utm.nasa.gov_read.constraint: Subject can read UTM constraint data\n            utm.nasa.gov_write.constraint:\n              Subject can read, create, and update UTM\n              constraint data. This means that the Subject can define areas that restrict\n              other operations.\n            utm.nasa.gov_read.conflictmanagement:\n              Subject can read conflict management\n              data.\n            utm.nasa.gov_write.conflictmanagement:\n              Subject can read and write conflict\n              management data.\n    authenticate_using_client_credentials:\n      type: http\n      description: |\n        The FIMS AZ server authenticates clients using the HTTP Authorization header with the Basic keyword and the oauth2 client secret. Note that the FIMS Authorization Server facilitates the RFC-6749 Client Credentials flow for UTM components that are Oauth2 Resources servers.\n      scheme: basic\n",
			"canonicalURL": "/github.com/nasa/utm-apis@3e959c2302c5b756e87ea5397d613b3e32247584/-/blob/fimsauthz-api/nup-oauth2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nasa/utm-apis/blob/3e959c2302c5b756e87ea5397d613b3e32247584/fimsauthz-api/nup-oauth2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: anonymous type name conflict: \"TokenPostGrantType\""
}