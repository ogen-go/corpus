{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nokazn/ravyd"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "packages/shared/openapi/schema.yml",
			"byteSize": 8786,
			"content": "openapi: 3.0.2\ninfo:\n  title: Authorization API\n  description: ''\n  version: 0.1.0\n\nservers:\n  - url: '{protocol}://api.ravyd.com/v1'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: https\n\n# TODO: add a component used for error message\ncomponents:\n  parameters:\n    SessionId:\n      in: cookie\n      name: connect.sid\n      schema:\n        type: string\n      description: Session ID\n\n  schemas:\n    Status:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n\n    AccessToken:\n      type: object\n      properties:\n        authState:\n          type: string\n        accessToken:\n          type: string\n          nullable: false\n        expireIn:\n          type: integer\n          minimum: 0\n      required:\n        - authState\n        - accessToken\n        - expireIn\n\n    EmptyAccessToken:\n      type: object\n      properties:\n        authState:\n          type: string\n          enum:\n            - null\n        accessToken:\n          type: string\n          enum:\n            - null\n        expireIn:\n          type: integer\n          minimum: 0\n          enum:\n            - 0\n      required:\n        - authState\n        - accessToken\n        - expireIn\n\n    FailedAccessToken:\n      type: object\n      properties:\n        authState:\n          type: string\n        accessToken:\n          type: string\n          enum:\n            - null\n        expireIn:\n          type: integer\n          minimum: 0\n          enum:\n            - 0\n      required:\n        - authState\n        - accessToken\n        - expireIn\n\npaths:\n  /auth:\n    get:\n      summary: Check whether a user loges in.\n      parameters:\n        - $ref: '#/components/parameters/SessionId'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - oneOf:\n                    - allOf:\n                      - $ref: '#/components/schemas/AccessToken'\n                      - type: object\n                        properties:\n                          authenticated:\n                            type: boolean\n                            enum:\n                              - true\n                        required:\n                          - authenticated\n                    - allOf:\n                      - $ref: '#/components/schemas/EmptyAccessToken'\n                      - type: object\n                        properties:\n                          authenticated:\n                            type: boolean\n                            enum:\n                              - false\n                        required:\n                          - authenticated\n\n  /auth/login:\n    post:\n      summary: Return refresh token if exists, or URL for login to Spotify.\n      parameters:\n        - $ref: '#/components/parameters/SessionId'\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - oneOf:\n                    - allOf:\n                      - $ref: '#/components/schemas/AccessToken'\n                      - type: object\n                        properties:\n                          authenticated:\n                            type: boolean\n                            enum:\n                              - true\n                          url:\n                            type: string\n                            enum:\n                              - null\n                        required:\n                          - authenticated\n                          - url\n                    - allOf:\n                      - $ref: '#/components/schemas/EmptyAccessToken'\n                      - type: object\n                        properties:\n                          authenticated:\n                            type: boolean\n                            enum:\n                              - false\n                          url:\n                            type: string\n                            nullable: true\n                        required:\n                          - authenticated\n                          - url\n\n  /auth/login/callback:\n    get:\n      summary: Receive code \u0026 state from Spotify's auth server, and return access token.\n      parameters:\n        - in: cookie\n          name: csrfState\n          description: CSRF token for checking 'state' that Spotify's auth server returns in query parameters.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: code\n          description: Authorization code\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: state\n          description: CSRF state\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Obtain an access token successfully.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/AccessToken'\n        400:\n          description: Fail to obtain an access token mainly caused by incorrect code or state in query parameters.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n        403:\n          description: Fail to obtain an access token especially caused by not matching between state in cookie and in query parameters.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n\n  /auth/refresh:\n    put:\n      summary: Refresh access token.\n      parameters:\n        - $ref: '#/components/parameters/SessionId'\n      requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  accessToken:\n                    type: string\n                  authState:\n                    type: string\n                required:\n                  - accessToken\n                  - authState\n      responses:\n        200:\n          description: Update an access token successfully.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/AccessToken'\n        400:\n          description: Failure mainly caused by invalid request body.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n        403:\n          description: Failure mainly caused by no refresh token in session or no correspond access_token_key in session.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n        409:\n          description: Failure mainly caused by conflicting on refreshing.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/EmptyAccessToken'\n        500:\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/Status'\n                  - $ref: '#/components/schemas/FailedAccessToken'\n\n  /auth/logout:\n    post:\n      summary: Delete access token \u0026 refresh token in session.\n      parameters:\n        - $ref: '#/components/parameters/SessionId'\n      responses:\n        204:\n          description: Log out successfully.\n        500:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n"
		}
	},
	"Error": "buildIR: make ir: path \"/auth\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch: object and ",
	"NotImplemented": [
		"cookie params"
	]
}