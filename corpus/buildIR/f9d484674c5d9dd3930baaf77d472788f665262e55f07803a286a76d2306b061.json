{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Southclaws/storyden"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 33623,
			"content": "openapi: 3.0.1\n\n#\n#            ╓███,\n#          ▄██▀\"███▄\n#         ╚█▀    `▀██▄\n#     ,,     ╓███,  ▀██▌_\n#   ╓███   ▄██▀\"███▄  ╙███_\n#  ▐██\"  ▄██▀    `▀██▄  ╙██\n#  ▐██  ╙██▄       ╫██Γ  ██─\n#  ▐██    ▀██▄  ,▓██▀    ██─\n#  ▐██      ╙█████▀      ██─\n#  ▐██      ╓█████_      ██─\n#  ▐██    ▄██▀` ╙███╥    ██─\n#  └███████▀      `▀██   ██\n#\n\ninfo:\n  contact:\n    name: Barnaby Keene\n  description: Storyden social API for building community driven platforms.\n  title: storyden\n  version: \"1\"\n\nservers:\n  - url: \"/api\"\n    description: |\n      The HTTP interface that this document describes is mounted on the `/api` \n      path and any requests outside of this base path will be proxied to the\n      frontend if Storyden is running in standalone mode.\n\nsecurity:\n  - browser: []\n\ntags:\n  - name: misc\n    description: Non-business logic stuff.\n  - name: auth\n    description: Authentication resources.\n  - name: accounts\n    description: User accounts.\n  - name: profiles\n    description: Public profiles.\n  - name: threads\n    description: Forum threads.\n  - name: posts\n    description: Posts within a specific thread.\n\n#\n# 8888888b.     d8888 88888888888 888    888  .d8888b.\n# 888   Y88b   d88888     888     888    888 d88P  Y88b\n# 888    888  d88P888     888     888    888 Y88b.\n# 888   d88P d88P 888     888     8888888888  \"Y888b.\n# 8888888P\" d88P  888     888     888    888     \"Y88b.\n# 888      d88P   888     888     888    888       \"888\n# 888     d8888888888     888     888    888 Y88b  d88P\n# 888    d88P     888     888     888    888  \"Y8888P\"\n#\n\npaths:\n  #\n  #                d8b\n  #                Y8P\n  #\n  #  88888b.d88b.  888 .d8888b   .d8888b\n  #  888 \"888 \"88b 888 88K      d88P\"\n  #  888  888  888 888 \"Y8888b. 888\n  #  888  888  888 888      X88 Y88b.\n  #  888  888  888 888  88888P'  \"Y8888P\n  #\n\n  /version:\n    get:\n      operationId: GetVersion\n      summary: Get the software version string.\n      description: |\n        The version number includes the date and time of the release build as\n        well as a short representation of the Git commit hash.\n      security: []\n      tags: [misc]\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /openapi.json:\n    get:\n      operationId: GetSpec\n      summary: Get the OpenAPI 3.0 specification as JSON.\n      description: |\n        Note: the generator creates a `map[string]interface{}` if this is set to\n        `application/json`... so I'm just using plain text for now.\n\n      security: []\n      tags: [misc]\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  #\n  #                   888    888\n  #                   888    888\n  #                   888    888\n  #  8888b.  888  888 888888 88888b.\n  #     \"88b 888  888 888    888 \"88b\n  # .d888888 888  888 888    888  888\n  # 888  888 Y88b 888 Y88b.  888  888\n  # \"Y888888  \"Y88888  \"Y888 888  888\n  #\n\n  /v1/auth:\n    get:\n      operationId: AuthProviderList\n      description: |\n        Retrieve a list of authentication providers. Storyden supports a few \n        ways to authenticate, from simple passwords to OAuth and WebAuthn. This\n        endpoint tells a client which auth capabilities are enabled.\n      tags: [auth]\n      security: []\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"400\": { $ref: \"#/components/responses/BadRequest\" }\n        \"200\": { $ref: \"#/components/responses/AuthProviderList\" }\n\n  /v1/auth/password/signup:\n    post:\n      operationId: AuthPasswordSignup\n      description: Register a new account with a username and password.\n      tags: [auth]\n      security: []\n      requestBody: { $ref: \"#/components/requestBodies/AuthPassword\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"400\": { $ref: \"#/components/responses/BadRequest\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  /v1/auth/password/signin:\n    post:\n      operationId: AuthPasswordSignin\n      description: Sign in to an existing account with a username and password.\n      tags: [auth]\n      security: []\n      requestBody: { $ref: \"#/components/requestBodies/AuthPassword\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  /v1/auth/oauth/{oauth_provider}/callback:\n    post:\n      operationId: AuthOAuthProviderCallback\n      description: Sign in to an existing account with a username and password.\n      tags: [auth]\n      security: []\n      parameters: [$ref: \"#/components/parameters/OAuthProvider\"]\n      requestBody:\n        { $ref: \"#/components/requestBodies/AuthOAuthProviderCallback\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  /v1/auth/webauthn/make/{account_handle}:\n    get:\n      operationId: WebAuthnRequestCredential\n      description: |\n        Start the WebAuthn registration process by requesting a credential.\n      tags: [auth]\n      security: []\n      parameters: [$ref: \"#/components/parameters/AccountHandle\"]\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"400\": { $ref: \"#/components/responses/BadRequest\" }\n        \"200\":\n          { $ref: \"#/components/responses/WebAuthnPublicKeyCreationOptions\" }\n\n  /v1/auth/webauthn/make:\n    post:\n      operationId: WebAuthnMakeCredential\n      description: Complete WebAuthn registration by creating a new credential.\n      tags: [auth]\n      security: [webauthn: []]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"400\": { $ref: \"#/components/responses/BadRequest\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  /v1/auth/webauthn/assert/{account_handle}:\n    post:\n      operationId: WebAuthnGetAssertion\n      description: Start the WebAuthn assertion for an existing account.\n      tags: [auth]\n      security: []\n      parameters: [$ref: \"#/components/parameters/AccountHandle\"]\n      requestBody: { $ref: \"#/components/requestBodies/AuthPassword\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  /v1/auth/webauthn/assert:\n    get:\n      operationId: WebAuthnMakeAssertion\n      description: Complete the credential assertion and sign in to an account.\n      tags: [auth]\n      security: [webauthn: []]\n      requestBody: { $ref: \"#/components/requestBodies/AuthPassword\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AuthSuccess\" }\n\n  #\n  #                                                      888\n  #                                                      888\n  #                                                      888\n  #   8888b.   .d8888b .d8888b .d88b.  888  888 88888b.  888888 .d8888b\n  #      \"88b d88P\"   d88P\"   d88\"\"88b 888  888 888 \"88b 888    88K\n  #  .d888888 888     888     888  888 888  888 888  888 888    \"Y8888b.\n  #  888  888 Y88b.   Y88b.   Y88..88P Y88b 888 888  888 Y88b.       X88\n  #  \"Y888888  \"Y8888P \"Y8888P \"Y88P\"   \"Y88888 888  888  \"Y888  88888P'\n  #\n\n  /v1/accounts:\n    get:\n      operationId: AccountsGet\n      description: Get the information for the currently authenticated account.\n      tags: [accounts]\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AccountsGetSuccess\" }\n\n    patch:\n      operationId: AccountsUpdate\n      description: Update the information for the currently authenticated account.\n      tags: [accounts]\n      requestBody: { $ref: \"#/components/requestBodies/AccountsUpdate\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AccountsUpdateSuccess\" }\n\n  /v1/accounts/self/avatar:\n    post:\n      operationId: AccountsSetAvatar\n      description: Upload an avatar for the authenticated account.\n      tags: [accounts]\n      requestBody: { $ref: \"#/components/requestBodies/AccountsSetAvatar\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { description: \"OK\" }\n\n  /v1/accounts/{account_handle}/avatar:\n    get:\n      operationId: AccountsGetAvatar\n      description: Get an avatar for the specified account.\n      tags: [accounts]\n      security: []\n      parameters: [$ref: \"#/components/parameters/AccountHandle\"]\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/AccountsGetAvatar\" }\n\n  #\n  #                           .d888 d8b 888\n  #                          d88P\"  Y8P 888\n  #                          888        888\n  # 88888b.  888d888 .d88b.  888888 888 888  .d88b.  .d8888b\n  # 888 \"88b 888P\"  d88\"\"88b 888    888 888 d8P  Y8b 88K\n  # 888  888 888    888  888 888    888 888 88888888 \"Y8888b.\n  # 888 d88P 888    Y88..88P 888    888 888 Y8b.          X88\n  # 88888P\"  888     \"Y88P\"  888    888 888  \"Y8888   88888P'\n  # 888\n  # 888\n  # 888\n  #\n\n  /v1/profiles/{account_handle}:\n    get:\n      operationId: ProfilesGet\n      description: Get a public profile by ID.\n      tags: [profiles]\n      security: []\n      parameters: [$ref: \"#/components/parameters/AccountHandle\"]\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/ProfilesGetSuccess\" }\n\n  #\n  # 888    888                                    888\n  # 888    888                                    888\n  # 888    888                                    888\n  # 888888 88888b.  888d888 .d88b.   8888b.   .d88888 .d8888b\n  # 888    888 \"88b 888P\"  d8P  Y8b     \"88b d88\" 888 88K\n  # 888    888  888 888    88888888 .d888888 888  888 \"Y8888b.\n  # Y88b.  888  888 888    Y8b.     888  888 Y88b 888      X88\n  #  \"Y888 888  888 888     \"Y8888  \"Y888888  \"Y88888  88888P'\n  #\n\n  /v1/threads:\n    post:\n      operationId: ThreadsCreate\n      description: Create a new thread within the specified category.\n      tags: [threads]\n      requestBody: { $ref: \"#/components/requestBodies/ThreadsCreate\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/ThreadsCreateSuccess\" }\n\n    get:\n      operationId: ThreadsList\n      description: Get a list of all threads.\n      tags: [threads]\n      security: []\n      parameters:\n        - name: author\n          description: Show only results creeated by this user.\n          required: false\n          in: query\n          schema: { $ref: \"#/components/schemas/AccountHandle\" }\n        - name: tags\n          description: Show only results with these tags\n          required: false\n          in: query\n          schema: { $ref: \"#/components/schemas/TagListIDs\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/ThreadsList\" }\n\n  /v1/threads/{thread_id}:\n    get:\n      operationId: ThreadsGet\n      summary: Get information about a thread and the posts within the thread.\n      description: |\n        Get information about a thread such as its title, author, when it was\n        created as well as a list of the posts within the thread.\n      security: []\n      tags: [threads]\n      parameters: [$ref: \"#/components/parameters/ThreadID\"]\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/ThreadsGet\" }\n\n  #\n  #                             888\n  #                             888\n  #                             888\n  #  88888b.   .d88b.  .d8888b  888888 .d8888b\n  #  888 \"88b d88\"\"88b 88K      888    88K\n  #  888  888 888  888 \"Y8888b. 888    \"Y8888b.\n  #  888 d88P Y88..88P      X88 Y88b.       X88\n  #  88888P\"   \"Y88P\"   88888P'  \"Y888  88888P'\n  #  888\n  #  888\n  #  888\n  #\n\n  /v1/threads/{thread_id}/posts:\n    post:\n      operationId: PostsCreate\n      description: Create a new post within a thread.\n      tags: [posts]\n      parameters: [$ref: \"#/components/parameters/ThreadID\"]\n      requestBody: { $ref: \"#/components/requestBodies/PostsCreate\" }\n      responses:\n        default: { $ref: \"#/components/responses/InternalServerError\" }\n        \"404\": { $ref: \"#/components/responses/NotFound\" }\n        \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n        \"200\": { $ref: \"#/components/responses/PostsCreateSuccess\" }\n\n  # /v1/threads/{thread_id}/posts/{post_id}:\n  #   get:\n  #     operationId: PostsGet\n  #     description: Get the data for a single post.\n  #     tags: [posts]\n  #     responses:\n  #       default: { $ref: \"#/components/responses/InternalServerError\" }\n  #       \"404\": { $ref: \"#/components/responses/NotFound\" }\n  #       \"401\": { $ref: \"#/components/responses/Unauthorised\" }\n\ncomponents:\n  #\n  # 8888888b.     d8888 8888888b.         d8888 888b     d888 8888888888 88888888888 8888888888 8888888b.   .d8888b.\n  # 888   Y88b   d88888 888   Y88b       d88888 8888b   d8888 888            888     888        888   Y88b d88P  Y88b\n  # 888    888  d88P888 888    888      d88P888 88888b.d88888 888            888     888        888    888 Y88b.\n  # 888   d88P d88P 888 888   d88P     d88P 888 888Y88888P888 8888888        888     8888888    888   d88P  \"Y888b.\n  # 8888888P\" d88P  888 8888888P\"     d88P  888 888 Y888P 888 888            888     888        8888888P\"      \"Y88b.\n  # 888      d88P   888 888 T88b     d88P   888 888  Y8P  888 888            888     888        888 T88b         \"888\n  # 888     d8888888888 888  T88b   d8888888888 888   \"   888 888            888     888        888  T88b  Y88b  d88P\n  # 888    d88P     888 888   T88b d88P     888 888       888 8888888888     888     8888888888 888   T88b  \"Y8888P\"\n  #\n\n  parameters:\n    AccountHandle:\n      description: Account handle.\n      example: southclaws\n      name: account_handle\n      in: path\n      required: true\n      schema:\n        type: string\n\n    ThreadID:\n      description: Thread ID\n      name: thread_id\n      in: path\n      required: true\n      schema:\n        $ref: \"#/components/schemas/Identifier\"\n\n    OAuthProvider:\n      description: The identifier for an OAuth2 provider such as \"twitter\".\n      name: oauth_provider\n      in: path\n      required: true\n      example: twitter\n      schema:\n        type: string\n\n  #\n  # 8888888b.  8888888888 .d88888b.  888     888 8888888888 .d8888b. 88888888888 .d8888b.\n  # 888   Y88b 888       d88P\" \"Y88b 888     888 888       d88P  Y88b    888    d88P  Y88b\n  # 888    888 888       888     888 888     888 888       Y88b.         888    Y88b.\n  # 888   d88P 8888888   888     888 888     888 8888888    \"Y888b.      888     \"Y888b.\n  # 8888888P\"  888       888     888 888     888 888           \"Y88b.    888        \"Y88b.\n  # 888 T88b   888       888 Y8b 888 888     888 888             \"888    888          \"888\n  # 888  T88b  888       Y88b.Y8b88P Y88b. .d88P 888       Y88b  d88P    888    Y88b  d88P\n  # 888   T88b 8888888888 \"Y888888\"   \"Y88888P\"  8888888888 \"Y8888P\"     888     \"Y8888P\"\n  #                             Y8b\n  #\n\n  requestBodies:\n    AuthPassword:\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/AuthPasswordBody\" }\n        application/x-www-form-urlencoded:\n          schema: { $ref: \"#/components/schemas/AuthPasswordBody\" }\n\n    AuthOAuthProviderCallback:\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/AuthOAuthProviderCallbackBody\" }\n\n    AccountsUpdate:\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/AccountsUpdateBody\" }\n\n    AccountsSetAvatar:\n      content:\n        application/octet-stream:\n          schema:\n            type: string\n            format: binary\n\n    ThreadsCreate:\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/ThreadsCreateBody\" }\n        application/x-www-form-urlencoded:\n          schema: { $ref: \"#/components/schemas/ThreadsCreateBody\" }\n\n    PostsCreate:\n      description: Create a post within a thread.\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/PostSubmission\" }\n        application/x-www-form-urlencoded:\n          schema: { $ref: \"#/components/schemas/PostSubmission\" }\n\n  #\n  # 8888888b.  8888888888 .d8888b.  8888888b.   .d88888b.  888b    888  .d8888b.  8888888888 .d8888b.\n  # 888   Y88b 888       d88P  Y88b 888   Y88b d88P\" \"Y88b 8888b   888 d88P  Y88b 888       d88P  Y88b\n  # 888    888 888       Y88b.      888    888 888     888 88888b  888 Y88b.      888       Y88b.\n  # 888   d88P 8888888    \"Y888b.   888   d88P 888     888 888Y88b 888  \"Y888b.   8888888    \"Y888b.\n  # 8888888P\"  888           \"Y88b. 8888888P\"  888     888 888 Y88b888     \"Y88b. 888           \"Y88b.\n  # 888 T88b   888             \"888 888        888     888 888  Y88888       \"888 888             \"888\n  # 888  T88b  888       Y88b  d88P 888        Y88b. .d88P 888   Y8888 Y88b  d88P 888       Y88b  d88P\n  # 888   T88b 8888888888 \"Y8888P\"  888         \"Y88888P\"  888    Y888  \"Y8888P\"  8888888888 \"Y8888P\"\n  #\n\n  responses:\n    BadRequest:\n      description: Bad request\n    NotFound:\n      description: Not found\n    Unauthorised:\n      description: Unauthorized\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/APIError\"\n\n    AuthSuccess:\n      description: OK\n      headers:\n        \"Set-Cookie\":\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AuthSuccess\"\n\n    AuthProviderList:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AuthProviderListBody\"\n\n    WebAuthnPublicKeyCreationOptions:\n      description: OK\n      headers:\n        \"Set-Cookie\":\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            type: object\n            x-go-type: any\n\n    AccountsGetSuccess:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Account\"\n\n    AccountsUpdateSuccess:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Account\"\n\n    AccountsGetAvatar:\n      description: OK\n      content:\n        image/png:\n          schema:\n            type: string\n            format: binary\n\n    ProfilesGetSuccess:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PublicProfile\"\n\n    ThreadsCreateSuccess:\n      description: Thread created.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Thread\"\n\n    ThreadsList:\n      description: List of all threads.\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/ThreadReference\"\n\n    ThreadsGet:\n      description: The information about a thread and its posts.\n      content:\n        application/json:\n          schema: { $ref: \"#/components/schemas/Thread\" }\n\n    PostsCreateSuccess:\n      description: Thread post created successfully.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Post\"\n\n  #\n  #  .d8888b.   .d8888b.  888    888 8888888888 888b     d888        d8888  .d8888b.\n  # d88P  Y88b d88P  Y88b 888    888 888        8888b   d8888       d88888 d88P  Y88b\n  # Y88b.      888    888 888    888 888        88888b.d88888      d88P888 Y88b.\n  #  \"Y888b.   888        8888888888 8888888    888Y88888P888     d88P 888  \"Y888b.\n  #     \"Y88b. 888        888    888 888        888 Y888P 888    d88P  888     \"Y88b.\n  #       \"888 888    888 888    888 888        888  Y8P  888   d88P   888       \"888\n  # Y88b  d88P Y88b  d88P 888    888 888        888   \"   888  d8888888888 Y88b  d88P\n  #  \"Y8888P\"   \"Y8888P\"  888    888 8888888888 888       888 d88P     888  \"Y8888P\"\n  #\n\n  schemas:\n    Identifier:\n      type: string\n      format: xid\n      # NOTE: Does not work currently with oapi-codegen because it generates a\n      # new type declaration instead of a type alias so the unmarshalling fails.\n      # To work around this, there are special conversion APIs in the oapi pkg.\n      x-go-type: string\n      # x-go-type-import:\n      #   name: xid\n      #   path: github.com/rs/xid\n      example: \"cc5lnd2s1s4652adtu50\"\n      description: A unique identifier for this resource.\n\n    CommonProperties:\n      type: object\n      required:\n        - id\n        - createdAt\n        - updatedAt\n      properties:\n        id: { $ref: \"#/components/schemas/Identifier\" }\n        createdAt:\n          type: string\n          format: date-time\n          description: The time the resource was created.\n        updatedAt:\n          type: string\n          format: date-time\n          description: The time the resource was updated.\n        deletedAt:\n          type: string\n          format: date-time\n          description: The time the resource was soft-deleted.\n        misc:\n          type: object\n          description: Arbitrary extra data stored with the resource.\n\n    APIError:\n      type: object\n      description: |\n        A description of an error including a human readable message and any\n        related metadata from the request and associated services.\n      required: [error]\n      properties:\n        error:\n          description: The internal error, not intended for end-user display.\n          type: string\n        message:\n          description: A human-readable message intended for end-user display.\n          type: string\n        suggested:\n          description: A suggested action for the user.\n          type: string\n        metadata:\n          description: Any additional metadata related to the error.\n          type: object\n          additionalProperties: true\n\n    Metadata:\n      type: object\n      additionalProperties: true\n      description: Arbitrary metadata for the resource.\n\n    # -\n    # Auth\n    # -\n\n    AuthProviderListBody:\n      type: array\n      items:\n        $ref: \"#/components/schemas/AuthProvider\"\n\n    AuthProvider:\n      required: [provider, name, logo_url, link]\n      properties:\n        provider:\n          description: The slug name of the provider.\n          type: string\n        name:\n          description: The human-readable name of the provider.\n          type: string\n        logo_url:\n          description: The logo to display for the provider.\n          type: string\n        link:\n          description: The hyperlink to render for the user.\n          type: string\n\n    AuthPasswordBody:\n      type: object\n      required: [identifier, token]\n      properties:\n        identifier:\n          example: \"southclaws@storyden.org\"\n          type: string\n        token:\n          example: \"password\"\n          type: string\n\n    AuthSuccess:\n      type: object\n      required: [id]\n      properties:\n        id:\n          type: string\n\n    AuthOAuthProviderCallbackBody:\n      type: object\n      required:\n        - state\n        - code\n      properties:\n        state:\n          type: string\n        code:\n          type: string\n\n    # -\n    # Account\n    # -\n\n    Account:\n      type: object\n      required: [handle, id]\n      allOf:\n        - $ref: \"#/components/schemas/CommonProperties\"\n        - properties:\n            handle:\n              $ref: \"#/components/schemas/AccountHandle\"\n            name:\n              $ref: \"#/components/schemas/AccountName\"\n            bio:\n              type: string\n            interests:\n              $ref: \"#/components/schemas/TagList\"\n\n    AccountsUpdateBody:\n      type: object\n      properties:\n        handle:\n          $ref: \"#/components/schemas/AccountHandle\"\n        name:\n          $ref: \"#/components/schemas/AccountName\"\n        bio:\n          type: string\n        interests:\n          $ref: \"#/components/schemas/TagList\"\n\n    # -\n    # PublicProfile\n    # -\n\n    PublicProfile:\n      type: object\n      required: [id, handle, name, createdAt, interests]\n      allOf:\n        - $ref: \"#/components/schemas/CommonProperties\"\n        - properties:\n            handle:\n              $ref: \"#/components/schemas/AccountHandle\"\n            name:\n              $ref: \"#/components/schemas/AccountName\"\n            bio:\n              type: string\n            image:\n              type: string\n            createdAt:\n              type: string\n            interests:\n              $ref: \"#/components/schemas/TagList\"\n\n    # -\n    # Threads\n    # -\n\n    ThreadsCreateBody:\n      type: object\n      required:\n        - title\n        - body\n        - tags\n        - category\n      properties:\n        title: { $ref: \"#/components/schemas/ThreadTitle\" }\n        body: { $ref: \"#/components/schemas/PostBodyMarkdown\" }\n        tags: { $ref: \"#/components/schemas/TagList\" }\n        meta: { $ref: \"#/components/schemas/Metadata\" }\n        category:\n          $ref: \"#/components/schemas/Identifier\"\n\n    ThreadReference:\n      description: |\n        A thread reference includes most of the information about a thread but\n        does not include the posts within the thread. Useful for rendering large\n        lists of threads or other situations when you don't need the full data.\n      allOf:\n        - $ref: \"#/components/schemas/CommonProperties\"\n        - type: object\n          required:\n            - title\n            - slug\n            - short\n            - pinned\n            - author\n            - tags\n            - post_count\n            - category\n            - reacts\n            - meta\n          properties:\n            title:\n              type: string\n              example: Hello world!\n              description: The title of the thread.\n            slug:\n              type: string\n              readOnly: true\n              description: |\n                A URL friendly slug which is prepended with the post ID\n                for uniqueness and sortability.\n            short:\n              type: string\n              readOnly: true\n              description: |\n                A short version of the thread's body text for use in previews.\n            pinned:\n              type: boolean\n              description: Whether the thread is pinned in this category.\n            author: { $ref: \"#/components/schemas/ProfileReference\" }\n            tags:\n              type: array\n              items:\n                type: string\n              description: A list of tags associated with the thread.\n            post_count:\n              type: integer\n              readOnly: true\n              description: The number of posts under this thread.\n            category: { $ref: \"#/components/schemas/Category\" }\n            reacts:\n              type: array\n              items: { $ref: \"#/components/schemas/React\" }\n              description: A list of reactions this post has had from people.\n            meta: { $ref: \"#/components/schemas/Metadata\" }\n\n    Thread:\n      allOf:\n        - $ref: \"#/components/schemas/ThreadReference\"\n        - type: object\n          required:\n            [title, slug, short, pinned, author, tags, posts, category, reacts]\n          properties:\n            posts:\n              type: array\n              items: { $ref: \"#/components/schemas/Post\" }\n\n    Category:\n      type: object\n      properties:\n        id: { $ref: \"#/components/schemas/Identifier\" }\n        name:\n          type: string\n        description:\n          type: string\n        colour:\n          type: string\n        sort:\n          type: integer\n        admin:\n          type: boolean\n        postCount:\n          type: integer\n\n    # -\n    # Posts\n    # -\n\n    PostSubmission:\n      $ref: \"#/components/schemas/Post\"\n\n    Post:\n      type: object\n      description: |\n        A new post within a thread of posts. A post may reply to another post in\n        the thread by specifying the `reply_to` property. The identifier in the\n        `reply_to` value must be post within the same thread.\n      allOf:\n        - $ref: \"#/components/schemas/CommonProperties\"\n        - type: object\n          required: [body]\n          properties:\n            body: { $ref: \"#/components/schemas/PostBodyMarkdown\" }\n            meta: { $ref: \"#/components/schemas/Metadata\" }\n            reply_to:\n              $ref: \"#/components/schemas/Identifier\"\n\n    React:\n      type: object\n      properties:\n        id: { $ref: \"#/components/schemas/Identifier\" }\n        emoji:\n          type: string\n\n    # -\n    # Commonly used small/simple types.\n    # -\n\n    AccountName:\n      type: string\n      description: The account owners display name.\n      example: Barnaby Keene\n\n    AccountHandle:\n      type: string\n      x-go-type: string\n      description: The unique @ handle of an account.\n      example: Southclaws\n\n    ProfileReference:\n      type: object\n      description: A minimal reference to an account.\n      properties:\n        id: { $ref: \"#/components/schemas/Identifier\" }\n        name: { $ref: \"#/components/schemas/AccountName\" }\n\n    ThreadTitle:\n      type: string\n      description: The title of a thread.\n      example: Hello world!\n\n    Tag:\n      type: object\n      description: A tag which can link profiles or threads via interests.\n      required: [id, name]\n      properties:\n        id: { $ref: \"#/components/schemas/Identifier\" }\n        name: { $ref: \"#/components/schemas/TagName\" }\n        colour: { type: string }\n\n    TagName:\n      type: string\n      description: The name of a tag.\n\n    TagList:\n      type: array\n      description: A list of tags.\n      items: { $ref: \"#/components/schemas/Tag\" }\n\n    TagListIDs:\n      type: array\n      description: A list of tags.\n      items: { $ref: \"#/components/schemas/Identifier\" }\n\n    PostBodyMarkdown:\n      type: string\n      description: The body text of a post within a thread.\n      example: |\n        # My post\n\n        This is a _post_ within a _thread_ formatted in *markdown*.\n\n  securitySchemes:\n    browser:\n      type: apiKey\n      in: cookie\n      name: storyden-session\n    webauthn:\n      type: apiKey\n      in: cookie\n      name: \"storyden-webauthn-session\"\n#\n#     ..:.                                                        .***=\n#  .+#%%%%%#+   ...                                               :%%%+\n#  #%%%+==+#.  =%%%.                                              :%%%+\n# :%%%%:      -*%%%=-.   :==+==:    ---: :== ----     .---- .-===-:%%%+   :==+=-:   .---..-==-.\n#  +%%%%%#*=. #%%%%%%-.+%%%%#%%%%+ .%%%##%%% -%%%#.  .#%%#=*%%%%%%%%%%+ =%%#+=+#%#- -%%%#%#%%%%*\n#   .-+#%%%%%- +%%%:..#%%%=   +%%%*.%%%#-. .  :#%%#..#%%#:#%%%=  .+%%%+-%%%*===+%%%:-%%%+  .#%%%.\n#        +%%%# =%%%. .%%%#    .%%%%.%%%+       .#%%##%%#:.%%%#    :%%%+=%%%*+++++++:-%%%:   +%%%.\n# .##*===#%%%= =%%%.  +%%%#=-=#%%%-.%%%+        .#%%%%*.  +%%%#=-=#%%%+.#%%+:..=++= -%%%:   +%%%.\n# -*%%%%%%%*-  =%%%.   :*%%%%%%#+: .%%%+         -%%%#.    -*%%%%%*%%%+ .+#%%%%%%+. -%%%:   +%%%.\n#    .:::.                .:::.                 -%%%*.        .:.          .:::.\n#                                              -%%%*\n#                                             -***+\n#\n",
			"canonicalURL": "/github.com/Southclaws/storyden@9335ac3097eef18cb14701b110b2a8a58319927a/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Southclaws/storyden/blob/9335ac3097eef18cb14701b110b2a8a58319927a/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/v1/profiles/{account_handle}\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: schema format mismatch:  and date-time",
	"NotImplemented": [
		"cookie security"
	]
}