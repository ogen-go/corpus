{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eikek/docspell"
		},
		"file": {
			"name": "docspell-openapi.yml",
			"size": 0,
			"path": "modules/restapi/src/main/resources/docspell-openapi.yml",
			"byteSize": 253029,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Docspell\n  version: 0.37.0-SNAPSHOT\n  description: |\n    This is the remote API to Docspell. Docspell is a free document\n    management system focused on small groups or families.\n\n    The routes can be divided into protected, unprotected routes and\n    admin routes. The unprotected, or open routes are at `/open/*`\n    while the protected routes are at `/sec/*` and admin routes are at\n    `/admin/*`. Open routes don't require authenticated access and can\n    be used by any user. The protected routes require an authenticated\n    user. The admin routes require a special http header with a value\n    from the config file. They are disabled by default, you need to\n    specify a secret in order to enable admin routes.\n  license:\n    name: AGPLv3\n    url: https://spdx.org/licenses/AGPL-3.0-or-later.html\n\nexternalDocs:\n  description: Docspell Homepage\n  url: https://docspell.org\n\nservers:\n  - url: /api/v1\n    description: Current host\n\npaths:\n  /api/info/version:\n    get:\n      operationId: \"api-info-version\"\n      tags: [ Information ]\n      summary: Get version information.\n      description: |\n        Returns information about this software.\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionInfo\"\n\n  /open/auth/login:\n    post:\n      operationId: \"open-auth-login\"\n      tags: [ Authentication ]\n      summary: Authenticate with account name and password.\n      description: |\n        Authenticate with account name and password. The account name\n        is comprised of the collective id and user id separated by\n        slash, backslash or whitespace.\n\n        If successful, an authentication token is returned that can be\n        used for subsequent calls to protected routes.\n\n        If the account has two-factor auth enabled, the returned token\n        must be used to supply the second factor.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserPass\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthResult\"\n  /open/auth/two-factor:\n    post:\n      operationId: \"open-auth-two-factor\"\n      tags: [ Authentication ]\n      summary: Provide the second factor to finalize authentication\n      description: |\n        After a login with account name and password, a second factor\n        must be supplied (only for accounts that enabled it) in order\n        to complete login.\n\n        If the code is correct, a new token is returned that can be\n        used for subsequent calls to protected routes.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SecondFactor\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthResult\"\n  /open/auth/openid/{providerId}:\n    get:\n      operationId: \"open-auth-openid\"\n      tags: [ Authentication ]\n      summary: Authenticates via OIDC at the external provider given by its id\n      description: |\n        Initiates the [\"Authorization Code\n        Flow\"](https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth)\n        as described in the OpenID Connect specification. This only is\n        enabled, if an external provider has been configured correctly\n        in the config file.\n\n        This will redirect to the external provider to authenticate\n        the user. Once authenticated, the user is redirected back to\n        the `/resume` endpoint.\n      parameters:\n        - $ref: \"#/components/parameters/providerId\"\n      responses:\n        422:\n          description: BadRequest\n        302:\n          description: Found. Redirect to external authentication provider\n        200:\n          description: Not used, is only here because openid requires it\n  /open/auth/openid/{providerId}/resume:\n    get:\n      operationId: \"open-auth-openid-resume\"\n      tags: [ Authentication ]\n      summary: The callback URL for the authentication provider\n      description: |\n        This URL is used to redirect the user back to the application\n        by the authentication provider after login is completed.\n\n        This will then try to find (or create) the account at docspell\n        using information about the user provided by the\n        authentication provider. If the required information cannot be\n        found, the user cannot be logged into the application.\n\n        If the process completed successfully, this endpoint redirects\n        into the web application which will take over from here.\n      parameters:\n        - $ref: \"#/components/parameters/providerId\"\n      responses:\n        422:\n          description: BadRequest\n        303:\n          description: See Other. Redirect to the webapp\n        200:\n          description: Not used, is only here because openid requires it\n\n  /open/checkfile/{id}/{checksum}:\n    get:\n      operationId: \"open-checkfile-checksum-by-id\"\n      tags: [ Upload ]\n      summary: Check if a file is in docspell (via source).\n      description: |\n        Checks if a file with the given SHA-256 checksum is in\n        docspell. The id is a *source id* configured by a collective.\n\n        The result shows all items that contains a file with the given\n        checksum.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/checksum\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckFileResult\"\n  /open/upload/item/{id}:\n    post:\n      operationId: \"open-upload-new-item-by-source\"\n      tags: [ Upload ]\n      summary: Upload files to docspell (via source).\n      description: |\n        Upload a file to docspell for processing. The id is a *source\n        id* configured by a collective. Files are submitted for\n        processing which eventually resuts in an item in the inbox of\n        the corresponding collective.\n\n        The request must be a `multipart/form-data` request, where the\n        first part has name `meta`, is optional and may contain upload\n        metadata as JSON. Checkout the structure `ItemUploadMeta` at\n        the end if it is not shown here. Other parts specify the\n        files. Multiple files can be specified, but at least on is\n        required.\n\n        The upload meta data can be used to tell, whether multiple\n        files are one item, or if each file should become a single\n        item. By default, each file will be a one item.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: \"#/components/schemas/ItemUploadMeta\"\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /open/upload/item/{itemId}/{id}:\n    post:\n      operationId: \"open-upload-to-item-by-source\"\n      tags: [ Upload ]\n      summary: Upload files to an existing item (via source).\n      description: |\n        Upload a file to docspell for processing. The id is a *source\n        id* configured by a collective. Files are submitted for\n        processing which eventually resuts in an item in the inbox of\n        the corresponding collective. This endpoint associates the\n        files to an existing item identified by its `itemId`.\n\n        The request must be a `multipart/form-data` request, where the\n        first part has name `meta`, is optional and may contain upload\n        metadata as JSON. Checkout the structure `ItemUploadMeta` at\n        the end if it is not shown here. Other parts specify the\n        files. Multiple files can be specified, but at least on is\n        required.\n\n        Upload meta data is ignored.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/itemId\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: \"#/components/schemas/ItemUploadMeta\"\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /admin/fts/reIndexAll:\n    post:\n      operationId: \"admin-fts-reindex-all\"\n      tags: [Full-Text Index, Admin]\n      summary: Re-creates the full-text index.\n      description: |\n        Clears the full-text index and inserts all data from the\n        database. This migh take a while to complete. The response\n        returns immediately. A task is submitted that will be executed\n        by a job executor. Note that this affects all data of all\n        collectives.\n\n        This is an admin route, so you need to provide the secret from\n        the config file as header `Docspell-Admin-Secret`.\n      security:\n        - adminHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/fts/reIndex:\n    post:\n      operationId: \"sec-fts-reindex\"\n      tags: [Full-Text Index]\n      summary: Re-creates the full-text index for the current collective\n      description: |\n        Clears the full-text index for all data belonging to the\n        current collective and inserts the data from the database. The\n        response is immediately returned and a task is submitted that\n        will be executed by a job executor.\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/checkfile/{checksum}:\n    get:\n      operationId: \"sec-checkfile-by-checksum\"\n      tags: [ Upload ]\n      summary: Check if a file is in docspell (authenticated).\n      description: |\n        Checks if a file with the given SHA-256 checksum is in\n        docspell.\n\n        The result shows all items that contains a file with the given\n        checksum.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/checksum\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckFileResult\"\n\n  /sec/upload/item:\n    post:\n      operationId: \"sec-upload-new-item\"\n      tags: [ Upload ]\n      summary: Upload files to docspell (authenticated).\n      description: |\n        Upload files to docspell for processing. This route is meant\n        for authenticated users that upload files to their account.\n\n        Everything else is the same as with the\n        `/open/upload/item/{id}` endpoint.\n\n        The request must be a \"multipart/form-data\" request, where the\n        first part is optional and may contain upload metadata as\n        JSON. Other parts specify the files. Multiple files can be\n        specified, but at least one is required.\n\n        The upload meta data can be used to tell, whether multiple\n        files are one item, or if each file should become a single\n        item. By default, each file will be a one item.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: \"#/components/schemas/ItemUploadMeta\"\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/upload/{itemId}:\n    post:\n      operationId: \"sec-upload-to-item\"\n      tags: [ Upload ]\n      summary: Upload files to an existing item (authenticated).\n      description: |\n        Upload files to docspell for processing. This route is meant\n        for authenticated users that upload files to their account.\n        This endpoint will associate the files to an existing item\n        identified by its `itemId`.\n\n        Everything else is the same as with the\n        `/open/upload/item/{itemId}/{id}` endpoint.\n\n        The request must be a \"multipart/form-data\" request, where the\n        first part is optional and may contain upload metadata as\n        JSON. Other parts specify the files. Multiple files can be\n        specified, but at least on is required.\n\n        The upload meta data is ignored, since the item already\n        exists.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/itemId\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: \"#/components/schemas/ItemUploadMeta\"\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/downloadAll/prefetch:\n    post:\n      operationId: \"sec-downloadall-prefetch\"\n      tags: [Download]\n      summary: Return information about a potential zip download\n      description: |\n        This endpoint calculates the number of files and\n        (uncompressed) size of the zip file that would be created with\n        this request.\n\n        It also checks against configured thresholds and tells whether\n        the server allows to ask for a download using this query.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DownloadAllRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DownloadAllSummary\"\n  /sec/downloadAll/submit:\n    post:\n      operationId: \"sec-downloadall-submit\"\n      tags: [Download]\n      summary: Submits a job to create a zip containing all files in the query\n      description: |\n        A job is submitted to create a ZIP file containing all the\n        files that are included in the given query.\n\n        Once the job is done, the returned ID can be used to download\n        the zip file.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DownloadAllRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DownloadAllSummary\"\n\n  /sec/downloadAll/cancel/{id}:\n    put:\n      operationId: \"sec-downloadall-cancel\"\n      tags: [Download]\n      summary: Cancels potentially running jobs to create a download archive\n      description: |\n        If a job is running (created via the `submit` endpoint) to\n        prepare a zip file for download, it is cancelled. The id is\n        the download id as defined in the `prefetch` or `submit`\n        responses.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"      \n\n  /sec/downloadAll/file/{id}:\n    get:\n      operationId: \"sec-downloadall-get-file\"\n      tags: [Download]\n      summary: Download the zip file given the id\n      description: |\n        Download the zip file to the given id.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        404:\n          description: NotFound\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    delete:\n      operationId: \"sec-downloadall-delete-file\"\n      tags: [Download]\n      summary: Deletets the zip file given the id\n      description: |\n        Deletes the zip file to the given id.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"      \n\n  /open/integration/item/{id}:\n    get:\n      operationId: \"open-integration-item-check-collective\"\n      tags: [ Integration Endpoint ]\n      summary: Check if integration endpoint is available.\n      description: |\n        Allows to check whether an integration endpoint is enabled for\n        a collective. The collective is given by the `id` parameter.\n        It returns not found (404) if the endpoint is disabled (either\n        globally by an admin or by a specific collective). It returns\n        403 (or 401 if http-basic is enabled) if authorization fails.\n\n        The response body is empty (an empty json object).\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Not Found\n        403:\n          description: Forbidden\n        401:\n          description: Unauthorized\n    post:\n      operationId: \"open-integration-item-upload\"\n      tags: [ Integration Endpoint, Upload ]\n      summary: Upload files to docspell (Integration Endpoint).\n      description: |\n        Upload a file to docspell for processing. The id is a\n        *collective name*. This route only exists, if enabled by an\n        admin in the configuration. The route might be protected by\n        different methods, all configurable via the configuration:\n\n        - A specific header must be prestent\n        - username/password via HTTP Basic mechanism\n        - a specific source ip\n\n        Files are submitted for processing to the specified\n        collective, which eventually resuts in an item in their inbox.\n\n        The request must be a `multipart/form-data` request, where the\n        first part has name `meta`, is optional and may contain upload\n        metadata as JSON. Checkout the structure `ItemUploadMeta` at\n        the end if it is not shown here. Other parts specify the\n        files. Multiple files can be specified, but at least on is\n        required.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                meta:\n                  $ref: \"#/components/schemas/ItemUploadMeta\"\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /open/integration/checkfile/{id}/{checksum}:\n    get:\n      operationId: \"open-integration-checkfile-by-checksum\"\n      tags: [ Integration Endpoint, Upload ]\n      summary: Check if a file is in docspell (Integration Endpoint).\n      description: |\n        Checks if a file with the given SHA-256 checksum is in\n        docspell. The `id` is the *collective name*. This route only\n        exists, if it is enabled in the configuration file.\n\n        The result shows all items that contains a file with the given\n        checksum.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/checksum\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckFileResult\"\n\n  /open/signup/register:\n    post:\n      operationId: \"open-signup-register\"\n      tags: [ Registration ]\n      summary: Register a new account.\n      description: |\n        Create a new account by creating a collective and user.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Registration\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /open/signup/newinvite:\n    post:\n      operationId: \"open-signup-newinvite\"\n      tags: [ Registration ]\n      summary: Generate a new invite.\n      description: |\n        When signup mode is set to \"invite\", docspell requires an\n        invitation key when signing up. These keys can be created\n        here. Creating such keys requires an admin role, and since\n        docspell has no such concept, a password from the\n        configuration file is required for this action.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GenInvite\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InviteResult\"\n\n  /open/share/verify:\n    post:\n      operationId: \"open-share-verify\"\n      tags: [ Share ]\n      summary: Verify a secret for a share\n      description: |\n        Given the share id and optionally a password, it verifies the\n        correctness of the given data. As a result, a token is\n        returned that must be used with all `share/*` routes. If the\n        password is missing, but required, the response indicates\n        this. Then the requests needs to be replayed with the correct\n        password to retrieve the token.\n\n        The token is also added as a session cookie to the response.\n\n        The token is used to avoid passing the user define password\n        with every request.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ShareSecret\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShareVerifyResult\"\n\n  /sec/auth/session:\n    post:\n      operationId: \"sec-auth-session\"\n      tags: [ Authentication ]\n      summary: Authentication with a token\n      description: |\n        Authenticate with a token. This can be used to get a new\n        authentication token based on another valid one.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthResult\"\n  /sec/auth/logout:\n    post:\n      operationId: \"sec-auth-logout\"\n      tags: [ Authentication ]\n      summary: Logout.\n      description: |\n        This route informs the server about a logout. This is not\n        strictly necessary.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n\n  /sec/tag:\n    get:\n      operationId: \"sec-tag-get-all\"\n      tags: [ Tags ]\n      summary: Get a list of tags\n      description: |\n        Return a list of all configured tags. The `sort` query\n        parameter is optional and can specify how the list is sorted.\n        Possible values are: `name`, `-name`, `category`, `-category`.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagList\"\n    post:\n      operationId: \"sec-tag-new\"\n      tags: [ Tags ]\n      summary: Create a new tag.\n      description: |\n        Create a new tag. If a tag with this name already exists, an\n        error is returned. The id in the input structure is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tag\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-tag-edit\"\n      tags: [ Tags ]\n      summary: Change an existing tag.\n      description: |\n        Changes an existing tag. The tag is looked up by its id and\n        all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tag\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/tag/{id}:\n    delete:\n      operationId: \"sec-tag-delete-by-id\"\n      tags: [ Tags ]\n      summary: Delete a tag.\n      description: |\n        Deletes a tag. This also removes this tags from all items.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/organization:\n    get:\n      operationId: \"sec-org-get-all\"\n      tags: [ Organization ]\n      summary: Get a list of organizations.\n      description: |\n        Return a list of all organizations. Only name and id are\n        returned. If `full` is specified, the list contains all\n        organization data. The `sort` parameter can be either `name`\n        or `-name` to specify the order.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/full\"\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/ReferenceList\"\n                  - $ref: \"#/components/schemas/OrganizationList\"\n    post:\n      operationId: \"sec-org-new\"\n      tags: [ Organization ]\n      summary: Create a new organization.\n      description: |\n        Create a new organizaion. If an organization with this name already exists, an\n        error is returned. The id attribute of the request structure is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-org-edit\"\n      tags: [ Organization ]\n      summary: Change an existing organization.\n      description: |\n        Changes an existing organization. The organization is looked up by its id and\n        all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/organization/{id}:\n    get:\n      operationId: \"sec-org-details\"\n      tags: [ Organization ]\n      summary: Get a list of organizations.\n      description: |\n        Return details about an organization.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n    delete:\n      operationId: \"sec-org-delete-by-id\"\n      tags: [ Organization ]\n      summary: Delete a organization by its id.\n      description: |\n        Deletes an organization.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/person:\n    get:\n      operationId: \"sec-persion-get-all\"\n      tags: [ Person ]\n      summary: Get a list of persons.\n      description: |\n        Return a list of all persons. Only name and id are returned\n        unless the `full` parameter is specified. The `sort` parameter\n        can be used to control the order of the result. Use one of:\n        `name`, `-name`, `org`, `-org`. Note that order by `org` only\n        works when retrieving the full list.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/full\"\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/ReferenceList\"\n                  - $ref: \"#/components/schemas/PersonList\"\n    post:\n      operationId: \"sec-person-new\"\n      tags: [ Person ]\n      summary: Create a new person.\n      description: |\n        Create a new organizaion. If an person with this name already exists, an\n        error is returned. The id attribute of the request structure is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Person\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-person-edit\"\n      tags: [ Person ]\n      summary: Change an existing person.\n      description: |\n        Changes an existing person. The person is looked up by its id and\n        all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Person\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/person/{id}:\n    get:\n      operationId: \"sec-person-details\"\n      tags: [ Person ]\n      summary: Get person details.\n      description: |\n        Return details about an person.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Person\"\n    delete:\n      operationId: \"sec-person-delete-by-id\"\n      tags: [ Person ]\n      summary: Delete a person by its id.\n      description: |\n        Deletes an person.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/equipment:\n    get:\n      operationId: \"sec-equip-get-all\"\n      tags: [ Equipment ]\n      summary: Get a list of equipments\n      description: |\n        Return a list of all configured equipments. The sort query\n        parameter is optional and can be one of `name` or `-name` to\n        sort the list of equipments.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EquipmentList\"\n    post:\n      operationId: \"sec-equip-new\"\n      tags: [ Equipment ]\n      summary: Create a new equipment.\n      description: |\n        Create a new equipment. If a equipment with this name already\n        exists, an error is returned.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Equipment\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-equip-edit\"\n      tags: [ Equipment ]\n      summary: Change an existing equipment.\n      description: |\n        Changes an existing equipment. The equipment is looked up by\n        its id and all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Equipment\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/equipment/{id}:\n    get:\n      operationId: \"sec-equip-details\"\n      tags: [ Equipment ]\n      summary: Get details about a single equipment.\n      description: |\n        Loads one equipment by its id.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Equipment\"\n\n    delete:\n      operationId: \"sec-equip-delete-by-id\"\n      tags: [ Equipment ]\n      summary: Delete a equipment.\n      description: |\n        Deletes a equipment. This also removes this equipments from\n        all items.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/folder:\n    get:\n      operationId: \"sec-folder-get-all\"\n      tags: [ Folder ]\n      summary: Get a list of folders.\n      description: |\n        Return a list of folders for the current collective.\n\n        All folders are returned, including those not owned by the\n        current user.\n\n        It is possible to restrict the results by a substring match of\n        the name.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/owning\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FolderList\"\n    post:\n      operationId: \"sec-folder-new\"\n      tags: [ Folder ]\n      summary: Create a new folder\n      description: |\n        Create a new folder owned by the current user. If a folder with\n        the same name already exists, an error is thrown.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewFolder\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdResult\"\n  /sec/folder/{id}:\n    get:\n      operationId: \"sec-folder-details\"\n      tags: [ Folder ]\n      summary: Get folder details.\n      description: |\n        Return details about a folder.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FolderDetail\"\n    put:\n      operationId: \"sec-folder-edit-name\"\n      tags: [ Folder ]\n      summary: Change the name of a folder\n      description: |\n        Changes the name of a folder. The new name must not exists.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewFolder\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-folder-delete-by-id\"\n      tags: [ Folder ]\n      summary: Delete a folder by its id.\n      description: |\n        Deletes a folder.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/folder/{id}/member/{userId}:\n    put:\n      operationId: \"sec-folder-add-member\"\n      tags: [ Folder ]\n      summary: Add a member to this folder\n      description: |\n        Adds a member to this folder (identified by `id`).\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/userId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-folder-delete-member\"\n      tags: [ Folder ]\n      summary: Removes a member from this folder.\n      description: |\n        Removes a member from this folder.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/userId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/collective:\n    get:\n      operationId: \"sec-collective-get-all\"\n      tags: [ Collective ]\n      summary: Get information about your collective\n      description: |\n        Return some information about the current collective.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collective\"\n  /sec/collective/settings:\n    get:\n      operationId: \"sec-collective-get-settings\"\n      tags: [ Collective ]\n      summary: Get collective settings\n      description: |\n        Return the settings of a collective.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CollectiveSettings\"\n    post:\n      operationId: \"sec-collective-update-settings\"\n      tags: [ Collective ]\n      summary: Update settings for a collective\n      description: |\n        Updates settings for a collective.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CollectiveSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collective\"\n  /sec/collective/insights:\n    get:\n      operationId: \"sec-collective-get-insights\"\n      tags: [ Collective ]\n      summary: Get some insights regarding your items.\n      description: |\n        Returns some information about how many items there are, how\n        much folder they occupy etc.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemInsights\"\n  /sec/collective/tagcloud:\n    get:\n      operationId: \"sec-collective-tag-cloud\"\n      tags: [ Collective ]\n      summary: Summary of used tags.\n      description: |\n        Returns all tags and how often each has been applied.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagCloud\"\n\n  /sec/collective/contacts:\n    get:\n      operationId: \"sec-collective-contacts-get-all\"\n      tags: [ Collective ]\n      summary: Return a list of contacts.\n      description: |\n        Return a list of all contacts available from the collectives\n        address book.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/contactKind\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContactList\"\n\n  /sec/collective/classifier/startonce:\n    post:\n      operationId: \"sec-collective-classifier-start-now\"\n      tags: [ Collective ]\n      summary: Starts the learn-classifier task\n      description: |\n        If the collective has classification enabled, this will submit\n        the task for learning a classifier from existing data. This\n        task is usally run periodically as determined by the\n        collective settings.\n\n        The request is empty, settings are used from the collective.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/collective/emptytrash/startonce:\n    post:\n      operationId: \"sec-collective-emptytrash-start-now\"\n      tags: [ Collective ]\n      summary: Starts the empty trash task\n      description: |\n        Submits a task to remove all items from the database that have\n        been \"soft-deleted\". This task is also run periodically and\n        can be triggered here to be immediatly submitted.\n\n        The request is empty, settings are used from the collective.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmptyTrashSetting\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/user:\n    get:\n      operationId: \"sec-user-get-all\"\n      tags: [ Collective ]\n      summary: Get a list of collective users.\n      description: |\n        Return a list of all users of the collective.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserList\"\n    post:\n      operationId: \"sec-user-new\"\n      tags: [ Collective ]\n      summary: Create a new collective user.\n      description: |\n        Create a new collective user. If a user with this name already\n        exists, an error is returned.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-user-edit\"\n      tags: [ Collective ]\n      summary: Change an existing user.\n      description: |\n        Changes an existing user. The user is looked up by\n        its id and all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/user/{username}:\n    delete:\n      operationId: \"sec-user-delete-by-username\"\n      tags: [ Collective ]\n      summary: Delete a user.\n      description: |\n        Deletes a user.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/username\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/user/{username}/deleteData:\n    get:\n      operationId: \"sec-user-delete-data\"\n      tags: [ Collective ]\n      summary: Shows some data that would be deleted if the user is deleted\n      description: |\n        Gets some data that would be deleted, when the user with the\n        given username is deleted. The `username` must be part of this\n        collective.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/username\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteUserData\"\n\n  /sec/user/changePassword:\n    post:\n      operationId: \"sec-user-change-password\"\n      tags: [ Collective ]\n      summary: Change the password.\n      description: |\n        Allows users to change their password.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/user/otp/state:\n    get:\n      operationId: \"sec-user-otp-state\"\n      tags: [ Collective ]\n      summary: Gets the otp state for the current user.\n      description: |\n        Returns whether the current account as OTP enabled or not.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OtpState\"\n                  \n  /sec/user/otp/init:\n    post:\n      operationId: \"sec-user-otp-init\"\n      tags: [ Collective, Authentication ]\n      summary: Initialize two factor auth via OTP\n      description: |\n        Requests to enable two factor authentication for this user. A\n        secret key is generated and returned. The client is expected\n        to insert it into some OTP application. Currently, only time\n        based OTP is supported.\n\n        The request body is empty.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OtpResult\"\n                \n  /sec/user/otp/confirm:\n    post:\n      operationId: \"sec-user-otp-confirm\"\n      tags: [ Collective, Authentication ]\n      summary: Confirms two factor authentication\n      description: |\n        Confirms using two factor authentication by sending a one time\n        password. If the password is correct, this enables two factor\n        authentication for the current user.\n\n        If there exists no unapproved otp request or the password is\n        not correct, an error is returned. If 2fa is already enabled\n        for this account, success is returned.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OtpConfirm\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/user/otp/disable:\n    post:\n      operationId: \"sec-user-otp-disable\"\n      tags: [ Collective, Authentication ]\n      summary: Disables two factor authentication.\n      description: |\n        Disables two factor authentication for the current user. If\n        the user has no two factor authentication enabled, an error is\n        returned.\n\n        It requires to specify a valid otp.\n\n        After this completes successfully, two factor auth can be\n        enabled again by initializing it anew.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OtpConfirm\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/notification/channel:\n    get:\n      operationId: \"sec-notification-channel-get\"\n      tags: [ Notification ]\n      summary: Return notification channels of the current user\n      description: |\n        Returns a list of notification channels for the current user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/NotificationMail\"\n                  - $ref: \"#/components/schemas/NotificationGotify\"\n                  - $ref: \"#/components/schemas/NotificationMatrix\"\n                  - $ref: \"#/components/schemas/NotificationHttp\"                    \n    post:\n      operationId: \"sec-notification-channel-post\"\n      tags: [ Notification ]\n      summary: Create a new notification channel\n      description: |\n        Creates a new channel that can be used for notification.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/NotificationMail\"\n                  - $ref: \"#/components/schemas/NotificationGotify\"\n                  - $ref: \"#/components/schemas/NotificationMatrix\"\n                  - $ref: \"#/components/schemas/NotificationHttp\"                    \n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-notification-channel-put\"\n      tags: [ Notification ]\n      summary: Change a notification channel\n      description: |\n        Change details about a notification channel.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/NotificationMail\"\n                  - $ref: \"#/components/schemas/NotificationGotify\"\n                  - $ref: \"#/components/schemas/NotificationMatrix\"\n                  - $ref: \"#/components/schemas/NotificationHttp\"                    \n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/notification/channel/{id}:\n    delete:\n      operationId: \"sec-notification-channel-delete\"\n      tags: [ Notification ]\n      summary: Delete a channel\n      description: |\n        Deletes the channel with the given id. This causes all hooks\n        of this channel to be deleted as well.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/notification/hook:\n    get:\n      operationId: \"sec-notification-hook-get\"\n      tags: [ Notification ]\n      summary: Return list of all hooks\n      description: |\n        Returns a list of all defined hooks for the current user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/NotificationHook\"\n    post:\n      operationId: \"sec-notification-hook-post\"\n      tags: [ Notification ]\n      summary: Creates a new notification hook\n      description: |\n        Creates a new notification hook, that issues a request via the\n        given channel description.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationHook\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-notification-hook-put\"\n      tags: [ Notification ]\n      summary: Updates a notification hook\n      description: |\n        Updates the hook details.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationHook\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/notification/hook/{id}:\n    delete:\n      operationId: \"sec-notification-hook-delete\"\n      tags: [ Notification ]\n      summary: Delete a hook\n      description: |\n        Deletes the hook with the given id.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/notification/hook/sendTestEvent:\n    post:\n      operationId: \"sec-notification-hook-sendtestevent-post\"\n      tags: [ Notification ]\n      summary: Test a webhook\n      description: |\n        Tests the webhook specified in the body by applying it to a\n        sample event.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationHook\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationChannelTestResult\"\n  /sec/notification/hook/verifyJsonFilter:\n    post:\n      operationId: \"sec-notification-hook-verifyjsonfilter-post\"\n      tags: [ Notification ]\n      summary: Verify a json filter expression\n      description: |\n        Parses the given value into a JSON mini query. \n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringValue\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/notification/event/sample:\n    post:\n      operationId: \"sec-notification-sample-event-post\"\n      tags: [ Notification ]\n      summary: Provide sample event data\n      description: |\n        Given an event type, generate some random sample of what would\n        be send on such an event.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationSampleEventReq\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema: {}\n\n  /sec/querybookmark:\n    get:\n      operationId: \"sec-querybookmark-get-all\"\n      tags: [Query Bookmarks]\n      summary: Return all query bookmarks\n      description: |\n        Returns all query bookmarks of the current user.\n\n        Bookmarks can be \"global\", where they belong to the whole\n        collective or personal, so they are only for the user. This\n        returns both.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/BookmarkedQuery\"\n    post:\n      operationId: \"sec-querybookmark-post\"\n      tags: [Query Bookmarks]\n      summary: Create a new query bookmark\n      description: |\n        Creates a new query bookmark.\n\n        A bookmark must have a unique name (within both collective and\n        personal scope). If a name already exists, a failure is\n        returned - use PUT instead for changing existing bookmarks.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BookmarkedQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-querybookmark-put\"\n      tags: [Query Bookmarks]\n      summary: Change a query bookmark\n      description: |\n        Changes an existing  query bookmark.\n\n        A bookmark must have a unique name within the collective\n        (considering collective and personal scope). The bookmark is\n        identified by its id, which must exist.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BookmarkedQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/querybookmark/{bookmarkId}:\n    parameters:\n      - $ref: \"#/components/parameters/bookmarkId\"\n    delete:\n      operationId: \"sec-querybookmark-delete\"\n      tags: [Query Bookmarks]\n      summary: Delete a bookmark.\n      description: |\n        Deletes a bookmarks by its id.\n      responses:\n        422:\n          description: BadRequest            \n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/clientSettings/{clientId}:\n    parameters:\n      - $ref: \"#/components/parameters/clientId\"\n    get:\n      operationId: \"sec-clientsettings-get\"\n      tags: [ Client Settings ]\n      summary: Return the client settings of current user\n      description: |\n        Returns the settings for the current user by merging the\n        client settings for the collective and the user's own client\n        settings into one json structure.\n\n        Null, Array, Boolean, String and Number are treated as values,\n        and values from the users settings completely replace values\n        from the collective's settings.\n        \n        The `clientId` is an identifier to a client application. It\n        returns a JSON structure. The server doesn't care about the\n        actual data, since it is meant to be interpreted by clients.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema: {}\n\n  /sec/clientSettings/user/{clientId}:\n    parameters:\n      - $ref: \"#/components/parameters/clientId\"\n    get:\n      operationId: \"sec-clientsettings-user-get\"\n      tags: [ Client Settings ]\n      summary: Return the user's own client settings \n      description: |\n        Returns the settings for the current user. The `clientId` is\n        an identifier to a client application. It returns a JSON\n        structure. The server doesn't care about the actual data,\n        since it is meant to be interpreted by clients.\n\n        If there is nothing stored for the given `clientId` an empty\n        JSON object (`{}`) is returned!\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema: {}\n    put:\n      operationId: \"sec-clientsettings-user-update\"\n      tags: [ Client Settings ]\n      summary: Update client settings of current user\n      description: |\n        Updates (replaces or creates) the current user's settings with\n        the given data. The `clientId` is an identifier to a client\n        application. The request body is expected to be JSON, the\n        structure is not important to the server.\n\n        The data is stored for the current user and given `clientId`.\n\n        The data is only saved without being checked in any way\n        (besides being valid JSON). It is returned \"as is\" to the\n        client in the corresponding GET endpoint.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-clientsettings-user-delete\"\n      tags: [ Client Settings ]\n      summary: Clears client settings of current user\n      description: |\n        Removes all stored user settings for the client identified by\n        `clientId`.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/clientSettings/collective/{clientId}:\n    parameters:\n      - $ref: \"#/components/parameters/clientId\"\n    get:\n      operationId: \"sec-clientsettings-collective-get\"\n      tags: [ Client Settings ]\n      summary: Return collective client settings\n      description: |\n        Returns the settings for the current collective. The\n        `clientId` is an identifier to a client application. It\n        returns a JSON structure. The server doesn't care about the\n        actual data, since it is meant to be interpreted by clients.\n\n        If there is nothing stored for the given `clientId` an empty\n        JSON object (`{}`) is returned!\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema: {}\n    put:\n      operationId: \"sec-clientsettings-collective-update\"\n      tags: [ Client Settings ]\n      summary: Update collective client settings\n      description: |\n        Updates (replaces or creates) the current collective's\n        settings with the given data. The `clientId` is an identifier\n        to a client application. The request body is expected to be\n        JSON, the structure is not important to the server.\n\n        The data is stored for the current user and given `clientId`.\n\n        The data is only saved without being checked in any way\n        (besides being valid JSON). It is returned \"as is\" to the\n        client in the corresponding GET endpoint.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-clientsettings-collective-delete\"\n      tags: [ Client Settings ]\n      summary: Clears collective's client settings\n      description: |\n        Removes all stored client settings of id `clientId` for\n        collective.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /share/search/query:\n    post:\n      operationId: \"share-search-query\"\n      tags: [Share]\n      summary: Performs a search in a share.\n      description: |\n        Allows to run a search query in the shared documents. The\n        input data structure is the same as with a standard query. The\n        `searchMode` parameter is ignored here.\n      security:\n        - shareTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemLightList\"\n  /share/search/stats:\n    post:\n      operationId: \"share-search-stats\"\n      tags: [ Share ]\n      summary: Get basic statistics about search results.\n      description: |\n        Instead of returning the results of a query, uses it to return\n        a summary, constraint to the share.\n      security:\n        - shareTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchStats\"\n  /share/item/{id}:\n    get:\n      operationId: \"share-item-get\"\n      tags: [ Share ]\n      summary: Get details about an item.\n      description: |\n        Get detailed information about an item.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemDetail\"      \n  /share/attachment/{id}:\n    head:\n      operationId: \"share-attach-head\"\n      tags: [ Share ]\n      summary: Get headers to an attachment file.\n      description: |\n        Get information about the binary file belonging to the\n        attachment with the given id.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          headers:\n            Content-Type:\n              schema:\n                type: string\n            Content-Length:\n              schema:\n                type: integer\n                format: int64\n            ETag:\n              schema:\n                type: string\n            Content-Disposition:\n              schema:\n                type: string\n    get:\n      operationId: \"share-attach-get\"\n      tags: [ Share ]\n      summary: Get an attachment file.\n      description: |\n        Get the binary file belonging to the attachment with the given\n        id. The binary is a pdf file. If conversion failed, then the\n        original file is returned.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /share/attachment/{id}/view:\n    get:\n      operationId: \"share-attach-show-viewerjs\"\n      tags: [ Share ]\n      summary: A javascript rendered view of the pdf attachment\n      description: |\n        This provides a preview of the attachment rendered in a\n        browser.\n\n        It currently uses a third-party javascript library (viewerjs)\n        to display the preview. This works by redirecting to the\n        viewerjs url with the attachment url as parameter. Note that\n        the resulting url that is redirected to is not stable. It may\n        change from version to version. This route, however, is meant\n        to provide a stable url for the preview.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        303:\n          description: See Other\n        422:\n          description: BadRequest\n        200:\n          description: Ok      \n  /share/attachment/{id}/preview:\n    head:\n      operationId: \"share-attach-check-preview\"\n      tags: [ Share ]\n      summary: Get the headers to a preview image of an attachment file.\n      description: |\n        Checks if an image file showing a preview of the attachment is\n        available. If not available, a 404 is returned.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        200:\n          description: Ok\n        404:\n          description: NotFound\n    get:\n      operationId: \"share-attach-get-preview\"\n      tags: [ Share ]\n      summary: Get a preview image of an attachment file.\n      description: |\n        Gets a image file showing a preview of the attachment. Usually\n        it is a small image of the first page of the document.If not\n        available, a 404 is returned. However, if the query parameter\n        `withFallback` is `true`, a fallback preview image is\n        returned. You can also use the `HEAD` method to check for\n        existence.\n\n        The attachment must be in the search results of the current\n        share.\n      security:\n        - shareTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/withFallback\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /share/clientSettings/{clientId}:\n    parameters:\n      - $ref: \"#/components/parameters/clientId\"\n    get:\n      operationId: \"share-clientsettings-get\"\n      tags: [ Share ]\n      summary: Return the client settings of current user\n      description: |\n        Returns the settings for the share. This is the settings of\n        the collective that belongs to the share.\n        \n        The `clientId` is an identifier to a client application. It\n        returns a JSON structure. The server doesn't care about the\n        actual data, since it is meant to be interpreted by clients.\n      security:\n        - shareTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema: {}\n\n  /share/downloadAll/prefetch:\n    post:\n      operationId: \"share-downloadall-prefetch\"\n      tags: [Download, Share]\n      summary: Return information about a potential zip download\n      description: |\n        This endpoint calculates the number of files and\n        (uncompressed) size of the zip file that would be created with\n        this request.\n\n        It also checks against configured thresholds and tells whether\n        the server allows to ask for a download using this query.\n\n        This variant adds the query of the share and the `fileType`\n        property in the request is ignored. It is always fixed to\n        `converted`.\n      security:\n        - shareTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DownloadAllRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DownloadAllSummary\"\n  /share/downloadAll/submit:\n    post:\n      operationId: \"share-downloadall-submit\"\n      tags: [Download, Share]\n      summary: Submits a job to create a zip containing all files in the query\n      description: |\n        A job is submitted to create a ZIP file containing all the\n        files that are included in the given query.\n\n        Once the job is done, the returned ID can be used to download\n        the zip file.\n\n        This variant adds the query of the share and the `fileType`\n        property in the request is ignored. It is always fixed to\n        `converted`.        \n      security:\n        - shareTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DownloadAllRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DownloadAllSummary\"\n  /share/downloadAll/file/{id}:\n    get:\n      operationId: \"share-downloadall-get-file\"\n      tags: [Download, Share]\n      summary: Download the zip file given the id\n      description: |\n        Download the zip file to the given id.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      security:\n        - shareTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        404:\n          description: NotFound\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n\n  /admin/user/resetPassword:\n    post:\n      operationId: \"admin-user-reset-password\"\n      tags: [ Collective, Admin ]\n      summary: Reset a user password.\n      description: |\n        Resets a user password to some random string which is returned\n        as the result. This is an admin route, so you need to specify\n        the secret from the config file via a http header\n        `Docspell-Admin-Secret`.\n      security:\n        - adminHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResetPassword\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResetPasswordResult\"\n  /admin/user/otp/resetOTP:\n    post:\n      operationId: \"admin-user-reset-otp\"\n      tags: [ Collective, Admin ]\n      summary: Disables OTP two factor auth for the given user.\n      description: |\n        Removes the OTP setup for the given user account. The account\n        can login afterwards with a correct password. A second factor\n        is not required. Two factor auth can be setup again for this\n        account.\n      security:\n        - adminHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResetPassword\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /admin/attachments/generatePreviews:\n    post:\n      operationId: \"admin-attachments-generate-previews\"\n      tags: [Attachment, Admin]\n      summary: (Re)generate all preview images\n      description: |\n        Submits a task that re-generates preview images of all\n        attachments. Each existing preview image will be replaced.\n\n        This can be used after changing the `preview` settings.\n\n        If only preview images of selected attachments should be\n        regenerated, see the `/sec/attachment/{id}/preview` endpoint.\n\n        This is an admin route, you need to specify the secret from\n        the config file via a http header `Docspell-Admin-Secret`.\n      security:\n        - adminHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /admin/attachments/convertallpdfs:\n    post:\n      operationId: \"admin-attachments-convertallpdf\"\n      tags: [Attachment, Admin]\n      summary: Convert all PDF files not yet converted\n      description: |\n        Docspell converts PDF files into PDF/A files by default, if\n        the OcrMyPDF tool is configured.\n\n        This endpoint can be used to submit a task that runs this on\n        all files that have not been converted yet in this way.\n\n        This conversion tool has been added in version 0.9.0 and so\n        older files can be \"migrated\" this way, or maybe after\n        enabling the tool (it is optional).\n\n        The task finds all files collective and submits a task for\n        each file to convert. These tasks are submitted with a low\n        priority so that normal processing can still proceed.\n\n        The body of the request should be empty.\n      security:\n        - adminHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /admin/files/cloneFileRepository:\n    post:\n      operationId: \"admin-files-cloneFileRepository\"\n      tags: [Admin]\n      summary: Copy all files into a new repository\n      description: |\n        Submits a task that will copy all files of the application\n        (from the default file repository) into another file\n        repository as specified in the request. The request may define\n        ids of file repository configurations that must be present in\n        the config file. An empty list means to copy to all enabled\n        file repositories from te default file repository.\n      security:\n        - adminHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FileRepositoryCloneRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /admin/files/integrityCheck:\n    post:\n      operationId: \"admin-files-integrityCheck\"\n      tags: [ Admin ]\n      summary: Verifies the stored checksum\n      description: |\n        Submits a task that goes through the files and compares the\n        stored checksum (at the time of inserting) against a newly\n        calculated one.\n      security:\n        - adminHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FileIntegrityCheckRequest\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/source:\n    get:\n      operationId: \"sec-source-get-all\"\n      tags: [ Source ]\n      summary: Get a list of sources\n      description: |\n        Return a list of all configured sources.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SourceList\"\n    post:\n      operationId: \"sec-source-new\"\n      tags: [ Source ]\n      summary: Create a new source.\n      description: |\n        Create a new source. If a source with this name already\n        exists, an error is returned.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SourceTagIn\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-source-edit\"\n      tags: [ Source ]\n      summary: Change an existing source.\n      description: |\n        Changes an existing source. The source is looked up by\n        its id and all properties are changed as given.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SourceTagIn\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/source/{id}:\n    delete:\n      operationId: \"sec-source-delete-by-id\"\n      tags: [ Source ]\n      summary: Delete a source.\n      description: |\n        Deletes a source. This also removes this sources from\n        all items.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/share:\n    get:\n      operationId: \"sec-share-get-all\"\n      tags: [ Share ]\n      summary: Get a list of shares\n      description: |\n        Return a list of all shares for this collective.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/owningShare\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShareList\"\n    post:\n      operationId: \"sec-share-new\"\n      tags: [ Share ]\n      summary: Create a new share.\n      description: |\n        Create a new share.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ShareData\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdResult\"\n  /sec/share/email/send/{name}:\n    post:\n      operationId: \"sec-share-email-send\"\n      tags: [ Share, E-Mail ]\n      summary: Send an email.\n      description: |\n        Sends an email as specified in the body of the request.\n\n        An existing shareId must be given with the request, no matter\n        the content of the mail.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SimpleShareMail\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/share/{shareId}:\n    parameters:\n      - $ref: \"#/components/parameters/shareId\"\n    get:\n      operationId: \"sec-share-get\"\n      tags: [Share]\n      summary: Get details to a single share.\n      description: |\n        Given the id of a share, returns some details about it.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShareDetail\"\n    put:\n      operationId: \"sec-share-update\"\n      tags: [ Share ]\n      summary: Update an existing share.\n      description: |\n        Updates an existing share.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ShareData\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-share-delete-by-id\"\n      tags: [ Share ]\n      summary: Delete a share.\n      description: |\n        Deletes a share\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/search:\n    get:\n      operationId: \"sec-item-search-by-get\"\n      tags: [ Item Search ]\n      summary: Search for items.\n      description: |\n        Search for items given a search query. The results are grouped\n        by month and are sorted by item date (newest first). Tags and\n        attachments are *not* resolved. The results will always\n        contain an empty list for item tags and attachments. Set\n        `withDetails` to `true` for retrieving all tags and a list of\n        attachments of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/withDetails\"\n        - $ref: \"#/components/parameters/searchMode\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemLightList\"\n    post:\n      operationId: \"sec-item-search-by-post\"\n      tags: [ Item Search ]\n      summary: Search for items.\n      description: |\n        Search for items given a search query. The results are grouped\n        by month and are sorted by item date (newest first). Tags and\n        attachments are *not* resolved. The results will always\n        contain an empty list for item tags and attachments. Use\n        `withDetails` to also retrieve all tags and a list of\n        attachments of an item.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemLightList\"\n\n  /sec/item/searchIndex:\n    post:\n      operationId: \"sec-item-search-index\"\n      tags: [ Item Search ]\n      summary: Search for items using full-text search only.\n      description: |\n        Search for items by only using the full-text search index.\n\n        Unlike the other search routes, this one only asks the\n        full-text search index and returns only one group that\n        contains the results in the same order as given from the\n        index. Most full-text search engines use an ordering that\n        reflect the relevance wrt the search term.\n\n        The other search routes always order the results by some\n        property (the item date) and thus the relevance ordering is\n        destroyed when using the full-text search.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemLightList\"\n\n  /sec/item/searchStats:\n    post:\n      operationId: \"sec-item-search-stats-get\"\n      tags: [ Item Search ]\n      summary: Get basic statistics about search results.\n      description: |\n        Instead of returning the results of a query, uses it to return\n        a summary.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemQuery\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchStats\"\n    get:\n      operationId: \"sec-item-search-stats-post\"\n      tags: [ Item Search ]\n      summary: Get basic statistics about search results.\n      description: |\n        Instead of returning the results of a query, uses it to return\n        a summary.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/searchMode\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SearchStats\"\n\n  /sec/item/{id}:\n    get:\n      operationId: \"sec-item-details\"\n      tags: [ Item ]\n      summary: Get details about an item.\n      description: |\n        Get detailed information about an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemDetail\"\n    delete:\n      operationId: \"sec-item-delete-by-id\"\n      tags: [ Item ]\n      summary: Delete an item.\n      description: |\n        Delete an item and all its data. This is a \"soft delete\", the\n        item is still in the database and can be undeleted. A periodic\n        job will eventually remove this item from the database.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/restore:\n    post:\n      operationId: \"sec-item-restore-by-id\"\n      tags: [ Item ]\n      summary: Restore a deleted item.\n      description: |\n        A deleted item can be restored as long it is still in the\n        database. This action sets the item state to `created`.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/{id}/tags:\n    put:\n      operationId: \"sec-item-get-tags\"\n      tags: [ Item ]\n      summary: Set new set of tags.\n      description: |\n        Update the tags associated to an item. This will remove all\n        existing ones and sets the given tags, such that after this\n        returns, the item has exactly the tags as given.\n\n        Tags may be specified as names or ids.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    post:\n      operationId: \"sec-item-create-and-add-tag\"\n      tags: [ Item ]\n      summary: Add a new tag to an item.\n      description: |\n        Creates a new tag and associates it to the given item.\n\n        The tag's `id` and `created` are generated and not used from\n        the given data, so it can be left empty. Only `name` and\n        `category` are used, where `category` is optional.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tag\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/{id}/taglink:\n    put:\n      operationId: \"sec-item-link-tags\"\n      tags: [Item]\n      summary: Link existing tags to an item.\n      description: |\n        Sets all given tags to the item. The tags must exist,\n        otherwise they are ignored. The tags may be specified as names\n        or ids.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/{id}/tagtoggle:\n    post:\n      operationId: \"sec-item-toggle-tags\"\n      tags: [Item]\n      summary: Toggles existing tags to an item.\n      description: |\n        Toggles all given tags of the item. The tags must exist,\n        otherwise they are ignored. The tags may be specified as names\n        or ids. Tags are either removed or linked from/to the item,\n        depending on whether the item currently is tagged with the\n        corresponding tag.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/{id}/tagsremove:\n    post:\n      operationId: \"sec-item-remove-tags\"\n      tags: [ Item ]\n      summary: Remove tags from an item\n      description: |\n        Remove the given tags from the item. The tags can be specified\n        via ids or names.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StringList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/item/{id}/direction:\n    put:\n      operationId: \"sec-item-set-direction\"\n      tags: [ Item ]\n      summary: Set the direction of an item.\n      description: |\n        Update the direction of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DirectionValue\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/folder:\n    put:\n      operationId: \"sec-item-set-folder\"\n      tags: [ Item ]\n      summary: Set a folder for this item.\n      description: |\n        Updates the folder property for this item to \"place\" the item\n        into a folder. If the request contains an empty object or an\n        `id` property of `null`, the item is moved into the \"public\"\n        or \"root\" folder.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/corrOrg:\n    put:\n      operationId: \"sec-item-set-org\"\n      tags: [ Item ]\n      summary: Set the correspondent organization of an item.\n      description: |\n        Update the correspondent organization of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    post:\n      operationId: \"sec-item-create-and-set-org\"\n      tags: [ Item ]\n      summary: Set a new correspondent organization of an item.\n      description: |\n        Create a new organization and update the correspondent\n        organization of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/corrPerson:\n    put:\n      operationId: \"sec-item-set-corr-person\"\n      tags: [ Item ]\n      summary: Set the correspondent person of an item.\n      description: |\n        Update the correspondent person of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    post:\n      operationId: \"sec-item-create-and-set-corr-person\"\n      tags: [ Item ]\n      summary: Create and set the correspondent person of an item.\n      description: |\n        Creates a new person and updates the correspondent person of\n        an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Person\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/concPerson:\n    put:\n      operationId: \"sec-item-set-conc-person\"\n      tags: [ Item ]\n      summary: Set the concerning person of an item.\n      description: |\n        Update the concerning person of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    post:\n      operationId: \"sec-item-create-and-set-conc-person\"\n      tags: [ Item ]\n      summary: Create and set the concerning person of an item.\n      description: |\n        Creates a new person and updates the concerning person of an\n        item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Person\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/concEquipment:\n    put:\n      operationId: \"sec-item-set-equip\"\n      tags: [ Item ]\n      summary: Set the concering equipment of an item.\n      description: |\n        Update the concering equipment of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    post:\n      operationId: \"sec-item-create-and-set-equip\"\n      tags: [ Item ]\n      summary: Create and set a new the concering equipment of an item.\n      description: |\n        Creates a new equipment and sets it as the concering equipment\n        of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Equipment\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/notes:\n    put:\n      operationId: \"sec-item-set-notes\"\n      tags: [ Item ]\n      summary: Set notes of an item.\n      description: |\n        Update the notes of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalText\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/name:\n    put:\n      operationId: \"sec-item-set-name\"\n      tags: [ Item ]\n      summary: Set the name of an item.\n      description: |\n        Update the name of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalText\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/confirm:\n    post:\n      operationId: \"sec-item-confirm\"\n      tags: [ Item ]\n      summary: Confirms the current meta data of an item.\n      description: |\n        An item is initially in state \"created\". The user can confirm\n        the associated data to put it in state \"confirmed\".\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/unconfirm:\n    post:\n      operationId: \"sec-item-unconfirm\"\n      tags: [ Item ]\n      summary: Puts an item back to created state.\n      description: |\n        If an item is confirmed it can be set back to created to\n        appear as new.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/date:\n    put:\n      operationId: \"sec-item-set-date\"\n      tags: [ Item ]\n      summary: Sets the item date.\n      description: |\n        Sets the date of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalDate\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/duedate:\n    put:\n      operationId: \"sec-item-set-duedate\"\n      tags: [ Item ]\n      summary: Sets the items due date.\n      description: |\n        Sets the due date of an item.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalDate\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{id}/proposals:\n    get:\n      operationId: \"sec-item-get-proposals\"\n      tags: [ Item ]\n      summary: Get a list of proposals for this item.\n      description: |\n        During text processing, a list of possible meta data has been\n        extracted from each attachment that may be a match to this\n        item. This is returned here, without duplicates.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemProposals\"\n  /sec/item/{id}/preview:\n    head:\n      operationId: \"sec-item-check-preview\"\n      tags: [ Attachment ]\n      summary: Get a preview image of an attachment file.\n      description: |\n        Checks if an image file showing a preview of the item is\n        available. If not available, a 404 is returned. The preview is\n        an image of the first page of the first attachment.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n        404:\n          description: NotFound\n    get:\n      operationId: \"sec-item-get-preview\"\n      tags: [ Attachment ]\n      summary: Get a preview image of an attachment file.\n      description: |\n        Gets a image file showing a preview of the item. Usually it is\n        a small image of the first page of the first attachment. If\n        not available, a 404 is returned. However, if the query\n        parameter `withFallback` is `true`, a fallback preview image\n        is returned. You can also use the `HEAD` method to check for\n        existence.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/withFallback\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n\n  /sec/item/{id}/customfield:\n    put:\n      operationId: \"sec-item-set-customfield-value\"\n      tags: [ Item ]\n      summary: Set the value of a custom field.\n      description: |\n        Sets the value for a custom field to this item. If a value\n        already exists, it is overwritten. A value must comply to the\n        type of the associated field. It must not be the empty string.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CustomFieldValue\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/item/{itemId}/customfield/{id}:\n    delete:\n      operationId: \"sec-item-delete-customfield-value\"\n      tags: [ Item ]\n      summary: Removes the value for a custom field\n      description: |\n        Removes the value for the given custom field. The `id` may be\n        the id of a custom field or its name.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/itemId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/item/{itemId}/reprocess:\n    post:\n      operationId: \"sec-item-start-reprocess\"\n      tags: [ Item ]\n      summary: Start reprocessing the files of the item.\n      description: |\n        This submits a job that will re-process the files (either all\n        or the ones specified) of the item and replace their metadata.\n\n        If the item is not in \"confirmed\" state, its associated metada\n        is also updated. Otherwise only the file metadata is updated\n        (text analysis).\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/itemId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/item/{itemId}/attachment/movebefore:\n    post:\n      operationId: \"sec-item-attach-move-before\"\n      tags: [ Item ]\n      summary: Reorder attachments within an item\n      description: |\n        Moves the `source` attachment before the `target` attachment,\n        such that `source` becomes the immediate neighbor of `target`\n        with a lower position.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/itemId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MoveAttachment\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/itemlink/{itemId}:\n    get:\n      operationId: \"sec-itemlink-get\"\n      tags: [ Item ]\n      summary: Get related items\n      description: |\n        Returns a list of related items for the given one.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/itemId\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemLightGroup\"\n\n  /sec/itemlink/{itemId}/{id}:\n    delete:\n      operationId: \"sec-itemlink-delete\"\n      tags: [Item]\n      summary: Delete an item from the list of related items\n      description: |\n        Deletes the item `id` from the list of related items on\n        `itemId`.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/itemId\"\n        - $ref: \"#/components/parameters/id\"          \n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/itemlink/addAll:\n    post:\n      operationId: \"sec-itemlink-appendall-post\"\n      tags: [ Item ]\n      summary: Add more items as related\n      description: |\n        Add one or more items to anothers list of related items.\n        Duplicates are ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemLinkData\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/itemlink/removeAll:\n    post:\n      operationId: \"sec-itemlink-removeall-post\"\n      tags: [ Item ]\n      summary: Remove items from the list of related items\n      description: |\n        Remove all given items from the list of related items\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemLinkData\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/items/merge:\n    post:\n      operationId: \"sec-items-merge\"\n      tags:\n        - Item (Multi Edit)\n      summary: Merge multiple items into one.\n      description: |\n        A list of items is merged into one item by copying all\n        metadata into the first item in the list.\n\n        Metadata is copied into the target item, if there is no value\n        present. So the order of items in the list matters - the first\n        item with a correspondent or folder will win.\n\n        For metadata that allow multiple values, like tags or custom\n        fields the values are combined. Notes are concatenated from\n        all items and custom fields with the same name are added\n        together for money/numeric fields, concatenated for text\n        fields or the first value is used for other field types.\n\n        After a successful merge, the remaining items are deleted from\n        the database (they cannot be restored).\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/deleteAll:\n    post:\n      operationId: \"sec-items-delete-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Delete multiple items.\n      description: |\n        Given a list of item ids, deletes all of them.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/restoreAll:\n    post:\n      operationId: \"sec-items-restore-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Restore multiple items.\n      description: |\n        Given a list of item ids, restores all of them.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/tags:\n    post:\n      operationId: \"sec-items-add-all-tags\"\n      tags:\n        - Item (Multi Edit)\n      summary: Add tags to multiple items\n      description: |\n        Add the given tags to all given items. The tags that are\n        currently attached to the items are not changed. If there are\n        new tags in the given list, then they are added. Otherwise,\n        the item is left unchanged.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRefs\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-items-replace-all-tags\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets tags to multiple items\n      description: |\n        Sets the given tags to all given items. If the tag list is\n        empty, then all tags are removed from the items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRefs\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/tagsremove:\n    post:\n      operationId: \"sec-items-remove-all-tags\"\n      tags:\n        - Item (Multi Edit)\n      summary: Remove tags from multiple items\n      description: |\n        Remove the given tags from all given items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRefs\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/items/name:\n    put:\n      operationId: \"sec-items-set-name-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Change the name of multiple items\n      description: |\n        Sets the name of multiple items at once. The name must not be\n        empty.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndName\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/folder:\n    put:\n      operationId: \"sec-items-set-folder-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets a folder to multiple items.\n      description: |\n        Given a folder id, sets it on all given items. If the folder\n        reference is not present, the folder is removed from all\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRef\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/direction:\n    put:\n      operationId: \"sec-items-set-direction-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Set the direction of multiple items\n      description: |\n        Given multiple item ids and a direction value, sets it to all\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndDirection\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/date:\n    put:\n      operationId: \"sec-items-set-date-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Set the date of multiple items\n      description: |\n        Given multiple item ids and a date, sets it to all items as\n        the item date. If no date is present, remove the date from the\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndDate\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/duedate:\n    put:\n      operationId: \"sec-items-set-duedate-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Set the direction of multiple items\n      description: |\n        Given multiple item ids and a date value, sets it to all items\n        as the due date. If the date is missing, remove the due-date\n        from the items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndDate\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/corrOrg:\n    put:\n      operationId: \"sec-items-set-corr-org-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets an organization to multiple items.\n      description: |\n        Given an organization id, sets it on all given items. If the\n        organization is missing, the reference is removed from all\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRef\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/corrPerson:\n    put:\n      operationId: \"sec-items-set-corr-person-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets an correspondent person to multiple items.\n      description: |\n        Given an person id, sets it on all given items as\n        correspondent person. If the person is missing, the reference\n        is removed from all items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRef\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/concPerson:\n    put:\n      operationId: \"sec-items-set-conc-person-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets an concerning person to multiple items.\n      description: |\n        Given an person id, sets it on all given items as concerning\n        person. If the person is missing, it is removed from all\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRef\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/concEquipment:\n    put:\n      operationId: \"sec-items-set-equip-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Sets an equipment to multiple items.\n      description: |\n        Given an equipment id, sets it on all given items. If no\n        equipment is given, the reference is removed from all given\n        items.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndRef\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/confirm:\n    put:\n      operationId: \"sec-items-confirm-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Confirm multiple items.\n      description: |\n        Given a list of item ids, confirm all of them.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/unconfirm:\n    put:\n      operationId: \"sec-items-unconfirm-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Un-confirm multiple items.\n      description: |\n        Given a list of item ids, un-confirm all of them.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/reprocess:\n    post:\n      operationId: \"sec-items-reprocess-all\"\n      tags:\n        - Item (Multi Edit)\n      summary: Submit multiple items to re-processing\n      description: |\n        Given a list of item-ids, submits all these items for\n        reprocessing. All attachments of these items will be\n        reprocessed. Item metadata may be changed if an item is not\n        confirmed. Confirmed items are not changed.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/customfield:\n    put:\n      operationId: \"sec-items-set-customfield-all\"\n      tags: [ Item (Multi Edit) ]\n      summary: Set the value of a custom field for multiple items\n      description: |\n        Sets the value for a custom field to multiple given items. If\n        a value already exists, it is overwritten. The value must\n        comply to the associated field type. It must not be the empty\n        string.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndFieldValue\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/items/customfieldremove:\n    post:\n      operationId: \"sec-items-remove-customfield-all\"\n      tags: [ Item (Multi Edit) ]\n      summary: Removes the value for a custom field on multiple items\n      description: |\n        Removes the value for the given custom field from multiple\n        items. The field may be specified by its id or name.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemsAndName\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n\n  /sec/attachment/{id}:\n    delete:\n      operationId: \"sec-attach-delete-by-id\"\n      tags: [ Attachment ]\n      summary: Delete an attachment.\n      description: |\n        Deletes a single attachment with all its related data like\n        file, the original file, extracted text, results from analysis\n        etc.\n\n        If the attachment is part of an archive, the archive is only\n        deleted, if it is the last entry left. Archives are otherwise\n        not deleted, if there are remaining attachments available.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    head:\n      operationId: \"sec-attach-check\"\n      tags: [ Attachment ]\n      summary: Get headers to an attachment file.\n      description: |\n        Get information about the binary file belonging to the\n        attachment with the given id.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          headers:\n            Content-Type:\n              schema:\n                type: string\n            Content-Length:\n              schema:\n                type: integer\n                format: int64\n            ETag:\n              schema:\n                type: string\n            Content-Disposition:\n              schema:\n                type: string\n    get:\n      operationId: \"sec-attach-get\"\n      tags: [ Attachment ]\n      summary: Get an attachment file.\n      description: |\n        Get the binary file belonging to the attachment with the given\n        id. The binary is a pdf file. If conversion failed, then the\n        original file is returned.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /sec/attachment/{id}/original:\n    head:\n      operationId: \"sec-attach-check-original\"\n      tags: [ Attachment ]\n      summary: Get headers of the original file of an attachment.\n      description: |\n        Get information about the original binary file of the\n        attachment with the given id.\n\n        If the attachment is a converted PDF file, this route gets the\n        original file as it was uploaded.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          headers:\n            Content-Type:\n              schema:\n                type: string\n            Content-Length:\n              schema:\n                type: integer\n                format: int64\n            ETag:\n              schema:\n                type: string\n            Content-Disposition:\n              schema:\n                type: string\n    get:\n      operationId: \"sec-attach-get-original\"\n      tags: [ Attachment ]\n      summary: Get the original file of an attachment.\n      description: |\n        Get the original binary file of the attachment with the given\n        id.\n\n        If the attachment is a converted PDF file, this route gets the\n        original file as it was uploaded.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /sec/attachment/{id}/archive:\n    head:\n      operationId: \"sec-attach-check-archive\"\n      tags: [ Attachment ]\n      summary: Get headers of the archive file to an attachment.\n      description: |\n        Get information about the archive that contains the attachment\n        with the given id.\n\n        If the attachment was not uploaded as part of an archive, 404\n        is returned.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          headers:\n            Content-Type:\n              schema:\n                type: string\n            Content-Length:\n              schema:\n                type: integer\n                format: int64\n            ETag:\n              schema:\n                type: string\n            Content-Disposition:\n              schema:\n                type: string\n    get:\n      operationId: \"sec-attach-get-archive\"\n      tags: [ Attachment ]\n      summary: Get the archive file of an attachment.\n      description: |\n        Get the archive file that was originally uploaded that\n        contains the attachment with the given id.\n\n        If the attachment was not uploaded as part of an archive, a\n        404 is returned.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /sec/attachment/{id}/preview:\n    head:\n      operationId: \"sec-attach-check-preview\"\n      tags: [ Attachment ]\n      summary: Get the headers to a preview image of an attachment file.\n      description: |\n        Checks if an image file showing a preview of the attachment is\n        available. If not available, a 404 is returned.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n        404:\n          description: NotFound\n    get:\n      operationId: \"sec-attach-get-preview\"\n      tags: [ Attachment ]\n      summary: Get a preview image of an attachment file.\n      description: |\n        Gets a image file showing a preview of the attachment. Usually\n        it is a small image of the first page of the document.If not\n        available, a 404 is returned. However, if the query parameter\n        `withFallback` is `true`, a fallback preview image is\n        returned. You can also use the `HEAD` method to check for\n        existence.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/withFallback\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    post:\n      operationId: \"sec-attach-regenerate-preview\"\n      tags: [ Attachment ]\n      summary: (Re)generate a preview image.\n      description: |\n        Submits a task that generates a preview image for this\n        attachment. The existing preview will be replaced.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/attachment/{id}/meta:\n    get:\n      operationId: \"sec-attach-get-meta\"\n      tags: [ Attachment ]\n      summary: Get the attachment's meta data.\n      description: |\n        Get meta data for this attachment. The meta data has been\n        extracted from the contents.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AttachmentMeta\"\n  /sec/attachment/{id}/view:\n    get:\n      operationId: \"sec-attach-show-viewerjs\"\n      tags: [ Attachment ]\n      summary: A javascript rendered view of the pdf attachment\n      description: |\n        This provides a preview of the attachment rendered in a\n        browser.\n\n        It currently uses a third-party javascript library (viewerjs)\n        to display the preview. This works by redirecting to the\n        viewerjs url with the attachment url as parameter. Note that\n        the resulting url that is redirected to is not stable. It may\n        change from version to version. This route, however, is meant\n        to provide a stable url for the preview.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        303:\n          description: See Other\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n  /sec/attachment/{id}/name:\n    post:\n      operationId: \"sec-attach-set-name\"\n      tags: [ Attachment ]\n      summary: Changes the name of an attachment\n      description: |\n        Change the name of the attachment with the given id. The\n        attachment must be part of an item that belongs to the\n        collective of the current user.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptionalText\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/attachments/delete:\n    post:\n      operationId: \"sec-attachs-delete-all\"\n      tags:\n        - Attachment (Multi Edit)\n      summary: Delete multiple attachments.\n      description: |\n        Given a list of attachment ids, deletes all of them.\n      security:\n        - authTokenHeader: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdList\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/queue/state:\n    get:\n      operationId: \"sec-jobs-get-state\"\n      tags: [ Job Queue ]\n      summary: Get complete state of job queue.\n      description: |\n        Get the current state of the job qeue. The job qeue contains\n        all processing tasks and other long-running operations. All\n        users/collectives share processing resources.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobQueueState\"\n  /sec/queue/{id}/cancel:\n    post:\n      operationId: \"sec-jobs-cancel-job\"\n      tags: [ Job Queue ]\n      summary: Cancel a job.\n      description: |\n        Tries to cancel a job and remove it from the queue. If the job\n        is running, a cancel request is send to the corresponding joex\n        instance. Otherwise the job is removed from the queue.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/queue/{id}/priority:\n    post:\n      operationId: \"sec-jobs-set-prio\"\n      tags: [ Job Queue ]\n      summary: Change the priority of a waiting job.\n      description: |\n        A waiting job can change its priority. If the job is not in\n        state waiting, this operation fails.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobPriority\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/email/settings/smtp:\n    get:\n      operationId: \"sec-email-settings-smtp-all\"\n      tags: [ E-Mail ]\n      summary: List email settings for current user.\n      description: |\n        List all available e-mail settings for the current user.\n        E-Mail settings specify smtp connections that can be used to\n        sent e-mails.\n\n        Multiple e-mail settings can be specified, they are\n        distinguished by their `name`. The query `q` parameter does a\n        simple substring search in the connection name.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EmailSettingsList\"\n    post:\n      operationId: \"sec-email-new-smtp-settings\"\n      tags: [ E-Mail ]\n      summary: Create new email settings\n      description: |\n        Create new e-mail settings.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/email/settings/smtp/{name}:\n    parameters:\n      - $ref: \"#/components/parameters/name\"\n    get:\n      operationId: \"sec-email-get-smtp-details\"\n      tags: [ E-Mail ]\n      summary: Return specific email settings by name.\n      description: |\n        Return the stored e-mail settings for the given connection\n        name.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EmailSettings\"\n    put:\n      operationId: \"sec-email-set-smtp-settings\"\n      tags: [ E-Mail ]\n      summary: Change specific email settings.\n      description: |\n        Changes all settings for the connection with the given `name`.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EmailSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-email-delete-smtp-settings\"\n      tags: [ E-Mail ]\n      summary: Delete e-mail settings.\n      description: |\n        Deletes the e-mail settings with the specified `name`.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/email/settings/imap:\n    get:\n      operationId: \"sec-email-imap-settings-all\"\n      tags: [ E-Mail ]\n      summary: List email settings for current user.\n      description: |\n        List all available e-mail settings for the current user.\n        E-Mail settings specify imap connections that can be used to\n        retrieve e-mails.\n\n        Multiple e-mail settings can be specified, they are\n        distinguished by their `name`. The query `q` parameter does a\n        simple substring search in the connection name.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImapSettingsList\"\n    post:\n      operationId: \"sec-email-new-imap-settings\"\n      tags: [ E-Mail ]\n      summary: Create new email settings\n      description: |\n        Create new e-mail settings.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImapSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/email/settings/imap/{name}:\n    parameters:\n      - $ref: \"#/components/parameters/name\"\n    get:\n      operationId: \"sec-email-get-imap-details\"\n      tags: [ E-Mail ]\n      summary: Return specific email settings by name.\n      description: |\n        Return the stored e-mail settings for the given connection\n        name.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImapSettings\"\n    put:\n      operationId: \"sec-email-set-imap-settings\"\n      tags: [ E-Mail ]\n      summary: Change specific email settings.\n      description: |\n        Changes all settings for the connection with the given `name`.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImapSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-email-delete-imap-settings\"\n      tags: [ E-Mail ]\n      summary: Delete e-mail settings.\n      description: |\n        Deletes the e-mail settings with the specified `name`.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/email/send/{name}/{id}:\n    post:\n      operationId: \"sec-email-send-with-item\"\n      tags: [ E-Mail ]\n      summary: Send an email.\n      description: |\n        Sends an email as specified in the body of the request.\n\n        The item's attachment are added to the mail if requested.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SimpleMail\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/email/sent/item/{id}:\n    get:\n      operationId: \"sec-email-get-sent-mails-to-item\"\n      tags: [ E-Mail ]\n      summary: Get sent mail related to an item\n      description: |\n        Return all mails that have been sent related to the item with\n        id `id`.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SentMails\"\n  /sec/email/sent/mail/{mailId}:\n    parameters:\n      - $ref: \"#/components/parameters/mailId\"\n    get:\n      operationId: \"sec-email-get-sent-mail\"\n      tags: [ E-Mail ]\n      summary: Get sent single mail related to an item\n      description: |\n        Return one mail with the given id.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SentMail\"\n    delete:\n      operationId: \"sec-email-delete-sent-mail\"\n      tags: [ E-Mail ]\n      summary: Delete a sent mail.\n      description: |\n        Delete a sent mail.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/calevent/check:\n    post:\n      operationId: \"sec-calevent-check\"\n      tags: [ Utility ]\n      summary: Check a calendar event string\n      description: |\n        For ui purposes, this route checks a calendar event string and\n        either returns the normal form or an error message.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CalEventCheck\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CalEventCheckResult\"\n\n  /sec/usertask/notifydueitems:\n    get:\n      operationId: \"sec-usertask-notify-all\"\n      tags: [ User Tasks ]\n      summary: Get settings for \"Notify Due Items\" task\n      description: |\n        Return all current notification settings of the authenticated\n        user. Users can be notified on due items via e-mail. This is\n        done by periodically querying items. It is possible to have\n        multiple tasks.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PeriodicDueItemsSettings\"\n    post:\n      operationId: \"sec-usertask-notify-new\"\n      tags: [ User Tasks ]\n      summary: Create settings for \"Notify Due Items\" task\n      description: |\n        Create a new notification settings task of the authenticated\n        user. The id field in the input is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicDueItemsSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-usertask-notify-edit\"\n      tags: [ User Tasks ]\n      summary: Change settings for \"Notify Due Items\" task\n      description: |\n        Change the settings for a notify-due-items task. The task is\n        looked up by its id.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicDueItemsSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/usertask/notifydueitems/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      operationId: \"sec-usertask-notify-get-details\"\n      tags: [ User Tasks ]\n      summary: Get notify items settings for a specific task\n      description: |\n        Return the current settings for a single notify-due-items task\n        of the authenticated user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PeriodicDueItemsSettings\"\n    delete:\n      operationId: \"sec-usertask-notify-delete\"\n      tags: [ User Tasks ]\n      summary: Delete a specific notify due items task\n      description: |\n        Delete the settings to a notify-due-items task of the\n        authenticated user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/usertask/notifydueitems/startonce:\n    post:\n      operationId: \"sec-usertask-notify-start-now\"\n      tags: [ User Tasks ]\n      summary: Start the \"Notify Due Items\" task once\n      description: |\n        Starts the notify-due-items task just once, discarding the\n        schedule and not updating the periodic task.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicDueItemsSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/usertask/periodicquery:\n    get:\n      operationId: \"sec-usertask-periodic-query-all\"\n      tags: [ User Tasks ]\n      summary: Get settings for PeriodicQuery task\n      description: |\n        Return all current settings of the authenticated user. \n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PeriodicQuerySettings\"\n    post:\n      operationId: \"sec-usertask-periodic-query-new\"\n      tags: [ User Tasks ]\n      summary: Create settings for PeriodicQuery task\n      description: |\n        Create a new periodic-query task of the authenticated user.\n        The id field in the input is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicQuerySettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-usertask-periodic-query-edit\"\n      tags: [ User Tasks ]\n      summary: Change settings for PeriodicQuery task\n      description: |\n        Change the settings for a periodic-query task. The task is\n        looked up by its id.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicQuerySettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/usertask/periodicquery/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      operationId: \"sec-usertask-periodic-query-get-details\"\n      tags: [ User Tasks ]\n      summary: Get periodic query for a specific task\n      description: |\n        Return the current settings for a single periodic-query task\n        of the authenticated user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PeriodicQuerySettings\"\n    delete:\n      operationId: \"sec-usertask-periodic-query-delete\"\n      tags: [ User Tasks ]\n      summary: Delete a specific periodic-query task\n      description: |\n        Delete the settings to a periodic-query task of the\n        authenticated user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/usertask/periodicquery/startonce:\n    post:\n      operationId: \"sec-usertask-periodic-query-start-now\"\n      tags: [ User Tasks ]\n      summary: Start the PeriodicQuery task once\n      description: |\n        Starts the periodic-query task just once, discarding the\n        schedule and not updating the periodic task.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PeriodicQuerySettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/usertask/scanmailbox:\n    get:\n      operationId: \"sec-usertask-scanmailbox-get-all\"\n      tags: [ User Tasks ]\n      summary: Get settings for \"Scan Mailbox\" task\n      description: |\n        Return the current settings for the scan-mailbox tasks of the\n        authenticated user. Users can periodically fetch mails to be\n        imported into docspell. It is possible to have multiple of\n        these tasks.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScanMailboxSettingsList\"\n    post:\n      operationId: \"sec-usertask-scanmailbox-new\"\n      tags: [ User Tasks ]\n      summary: Create settings for \"Scan Mailbox\" task\n      description: |\n        Create new settings for a scan-mailbox task. The id field in\n        the input data is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScanMailboxSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-usertask-scanmailbox-edit\"\n      tags: [ User Tasks ]\n      summary: Change settings for a \"Scan Mailbox\" task\n      description: |\n        Change the settings for a scan-mailbox task. The task is\n        looked up by its id.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScanMailboxSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n  /sec/usertask/scanmailbox/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      operationId: \"sec-usertask-scanmailbox-get-details\"\n      tags: [ User Tasks ]\n      summary: Get settings for \"Scan Mailbox\" task\n      description: |\n        Return the current settings for a single scan-mailbox task of\n        the authenticated user. Users can periodically fetch mails to\n        be imported into docspell.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScanMailboxSettings\"\n    delete:\n      operationId: \"sec-usertask-scanmailbox-delete\"\n      tags: [ User Tasks ]\n      summary: Delete a scan-mailbox task.\n      description: |\n        Deletes the settings to a scan-mailbox task of the\n        authenticated user.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/usertask/scanmailbox/startonce:\n    post:\n      operationId: \"sec-usertask-scanmailbox-start-now\"\n      tags: [ User Tasks ]\n      summary: Start the \"Scan Mailbox\" task once\n      description: |\n        Starts the scan-mailbox task just once, discarding the\n        schedule and not updating the periodic task.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScanMailboxSettings\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/customfield:\n    get:\n      operationId: \"sec-customfield-get-all\"\n      tags: [ Custom Fields ]\n      summary: Get all defined custom fields.\n      description: |\n        Get all custom fields defined for the current collective. The\n        `sort` parameter can be used to control the order of the\n        returned list. It can take a value from: `name`, `-name`,\n        `label`, `-label`, `type`, `-type`.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - $ref: \"#/components/parameters/q\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CustomFieldList\"\n    post:\n      operationId: \"sec-customfield-new\"\n      tags: [ Custom Fields ]\n      summary: Create a new custom field\n      description: |\n        Creates a new custom field.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewCustomField\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/customfield/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      operationId: \"sec-customfield-get-details\"\n      tags: [ Custom Fields ]\n      summary: Get details about a custom field.\n      description: |\n        Returns the details about a custom field.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CustomField\"\n    put:\n      operationId: \"sec-customfield-edit\"\n      tags: [ Custom Fields ]\n      summary: Change a custom field\n      description: |\n        Change properties of a custom field.\n\n        Changing the label has no further impliciations, since it is\n        only used for displaying. The name and type on the other hand\n        have consequences: name must be unique and the type determines\n        how the value is stored internally.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewCustomField\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-customfield-delete\"\n      tags: [ Custom Fields ]\n      summary: Deletes a custom field.\n      description: |\n        Deletes the custom field and all its relations.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/addon/archive:\n    get:\n      operationId: \"sec-addon-archive-get\"\n      tags: [Addons]\n      summary: Get all registered addons\n      description: |\n        Returns a list of all registered addons.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddonList\"\n    post:\n      operationId: \"sec-addon-post\"\n      tags: [ Addons ]\n      summary: Install a new addon\n      description: |\n        Given an URL to an addon (which is a zip file containing a\n        `docspell-meta.yaml` or json descriptor), the addon is\n        downloaded and installed in docspell.\n\n        By default this happens asynchronously and the response only\n        indicates that installing has been submitted. The result will\n        be transfered over the websocket channel. With query parameter\n        `sync` installing happens synchronously and it may take a\n        while to complete (if successful, the addon id is returned).\n      security:\n        - authTokenHeader: []\n      parameters:\n        - in: query\n          name: sync\n          required: false\n          allowEmptyValue: true\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddonRegister\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdResult\"\n  /sec/addon/archive/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    delete:\n      operationId: \"sec-addon-archive-delete\"\n      tags: [Addons]\n      summary: Deletes the addon and removes it from all addon run configs\n      description: |\n        Deletes the addon from the database and also removes it from\n        all run configurations where it might be referenced.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    put:\n      operationId: \"sec-addon-archive-put\"\n      tags: [ Addons ]\n      summary: Update an addon from its url\n      description: |\n        Addons are urls to zip files. This call reads the url again\n        and updates the contents in docspell for this addon.\n\n        By default this happens asynchronously and the response only\n        indicates that updating has been submitted. The result will be\n        transfered over the websocket channel. With query parameter\n        `sync` updating happens synchronously and it may take a while\n        to complete.\n      security:\n        - authTokenHeader: []\n      parameters:\n        - in: query\n          name: sync\n          required: false\n          allowEmptyValue: true\n          schema:\n            type: boolean\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/addon/run-config:\n    get:\n      operationId: \"sec-addon-run-config-get\"\n      tags: [Addons]\n      summary: Get all addon run configs\n      description: |\n        Returns a list of addon run configs.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddonRunConfigList\"\n    post:\n      operationId: \"sec-addon-run-config-post\"\n      tags: [ Addons ]\n      summary: Adds a new addon run config\n      description: |\n        Adds a new set of configured addons, creating a run\n        configuration.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddonRunConfig\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdResult\"\n\n  /sec/addon/run-config/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    put:\n      operationId: \"sec-addon-run-config-id-put\"\n      tags: [ Addons ]\n      summary: Updates an addon run config\n      description: |\n        Updates an existing addon run configuration. The id is taken\n        from the URL and any given id in the request body is ignored.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddonRunConfig\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n    delete:\n      operationId: \"sec-addonrunconfig-delete\"\n      tags: [Addons]\n      summary: Deletes the addon run config given its id\n      description: |\n        Deletes the addon run configuration.\n      security:\n        - authTokenHeader: []\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\n  /sec/addon/run/existingitem:\n    post:\n      operationId: \"sec-addon-run-existing-item\"\n      tags: [Addons]\n      summary: Submits a task running addons for an item\n      description: |\n        Submits a background task that executes the specified (or all)\n        addons configured to use for an existing item.\n      security:\n        - authTokenHeader: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddonRunExistingItem\"\n      responses:\n        422:\n          description: BadRequest\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicResult\"\n\ncomponents:\n  schemas:\n    AddonRunExistingItem:\n      description: |\n        Data to run addons for an existing item.\n      required:\n        - itemId\n      properties:\n        itemId:\n          type: string\n          format: ident\n        additionalItems:\n          type: array\n          items:\n            type: string\n            format: ident\n          description: |\n            Additional items to run addons on. There will be one job\n            submitted per item.\n        addonRunConfigIds:\n          type: array\n          items:\n            type: string\n            format: ident\n          description: |\n            If non empty, only select these addon run configs.\n            Otherwise all configured to be run for existing items are\n            executed.\n\n    AddonRef:\n      description: |\n        A reference to an addon (archive) with additional name and\n        version and its arguments. When used for adding addon run\n        configs, name and version are ignored.\n      required:\n        - addonId\n        - name\n        - version\n        - args\n      properties:\n        addonId:\n          type: string\n          format: ident\n        name:\n          type: string\n        version:\n          type: string\n        description:\n          type: string\n        args:\n          type: string\n\n    AddonRunConfig:\n      description: |\n        A set of configured addons that are run on certain points\n        defined by the `trigger` property.\n      required:\n        - id\n        - name\n        - enabled\n        - trigger\n        - addons\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        enabled:\n          type: boolean\n        userId:\n          type: string\n          format: ident\n          description: |\n            An addon can be run on behalf of a user. If not given, no\n            authentication token is generated into the environment of\n            the addon. The user can be given as user_id or by its\n            login name.\n        schedule:\n          type: string\n          format: calevent\n          description: |\n            A schedule must be supplied when a trigger type of\n            'scheduled' is defined.\n        trigger:\n          description: |\n            Defines when this task is executed. There must be at least\n            one element. Possible values:\n              \n              * process-item: After an item has been processed\n              * reprocess-item: After an item has been re-processed\n              * scheduled: Executed periodically based on a schedule,\n                which must be defined then\n          type: array\n          items:\n            type: string\n            format: addon-trigger-type\n            enum:\n              - process-item\n              - reprocess-item\n              - scheduled\n        addons:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AddonRef\"\n\n    AddonRunConfigList:\n      description: |\n        A list of addon run configurations.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AddonRunConfig\"\n          \n    AddonRegister:\n      description: |\n        Data to register addons\n      required:\n        - url\n      properties:\n        url:\n          type: string\n          format: uri\n\n    Addon:\n      description: |\n        An registered addon.\n      required:\n        - id\n        - name\n        - version\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        version:\n          type: string\n        description:\n          type: string\n        url:\n          type: string\n          format: uri\n        created:\n          type: integer\n          format: date-time\n\n    AddonList:\n      description: |\n        A list of addons\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Addon\"       \n\n    DownloadAllSummary:\n      description: |\n        Information about a ZIP download.\n      required:\n        - id\n        - fileCount\n        - uncompressedSize\n        - state\n      properties:\n        id:\n          type: string\n          format: ident\n          description: Unique identifier for the download request\n        fileCount:\n          type: integer\n          format: int32\n          description: How many files are included\n        uncompressedSize:\n          type: integer\n          format: bytesize\n          description: The sum of sizes of all included files\n        state:\n          type: string\n          format: downloadstate\n          enum:\n            - forbidden\n            - notpresent\n            - preparing\n            - present\n            - empty\n          description: |\n            A state for the download, it may not exist yet or be\n            forbidden because it exceeds configured thresholds. Then a\n            job may be running to create it or the file is present and\n            ready to download.\n\n    DownloadAllRequest:\n      description: |\n        A request to download all files included in a query.\n      required:\n        - query\n        - fileType\n      properties:\n        query:\n          type: string\n          format: itemquery\n        fileType:\n          type: string\n          format: downloadalltype\n          enum:\n            - converted\n            - original\n      \n    ItemLinkData:\n      description: |\n        Data for changing the list of related items.\n      required:\n        - item\n        - related\n      properties:\n        item:\n          type: string\n          format: ident\n        related:\n          type: array\n          items:\n            type: string\n            format: ident\n\n    FileIntegrityCheckRequest:\n      description: |\n        Data for running a file integrity check\n      properties:\n        collective:\n          type: string\n          format: ident\n          \n    FileRepositoryCloneRequest:\n      description: |\n        Clone the file repository to a new location.\n      required:\n        - targetRepositories\n      properties:\n        targetRepositories:\n          type: array\n          items:\n            type: string\n            format: ident\n\n    BookmarkedQuery:\n      description: |\n        A query bookmark.\n      required:\n        - id\n        - name\n        - query\n        - personal\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        label:\n          type: string\n        query:\n          type: string\n          format: itemquery\n        personal:\n          type: boolean\n        created:\n          type: integer\n          format: date-time\n\n    StringValue:\n      description: |\n        A generic string value\n      required:\n        - value\n      properties:\n        value:\n          type: string\n\n    NotificationSampleEventReq:\n      description: |\n        An event type.\n      required:\n        - eventType\n      properties:\n        eventType:\n          type: string\n          format: eventtype\n    NotificationChannelTestResult:\n      description: |\n        Results from running a sample event.\n      required:\n        - success\n        - messages\n      properties:\n        success:\n          type: boolean\n        messages:\n          type: array\n          items:\n            type: string\n    NotificationChannelRef:\n      description: |\n        A reference to a channel. The `id` and `channelType` are\n        required to identify a channel. The `name` attribute is as a\n        descriptive name and is returned by the server if it is\n        specified for the corresponding channel.\n      required:\n        - id\n        - channelType\n      properties:\n        id:\n          type: string\n          format: ident\n        channelType:\n          type: string\n          format: channeltype\n        name:\n          type: string\n    NotificationMatrix:\n      description: |\n        A notification channel for matrix.\n      required:\n        - id\n        - channelType\n        - homeServer\n        - roomId\n        - accessToken\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        channelType:\n          type: string\n          format: channeltype\n        homeServer:\n          type: string\n          format: uri\n        roomId:\n          type: string\n        accessToken:\n          type: string\n          format: password\n    NotificationGotify:\n      description: |\n        A notification channel for gotify.\n      required:\n        - id\n        - channelType\n        - url\n        - appKey\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        channelType:\n          type: string\n          format: channeltype\n        url:\n          type: string\n          format: uri\n        appKey:\n          type: string\n          format: password\n        priority:\n          type: integer\n          format: int32\n          description: |\n            A priority number [0-10]\n    NotificationHttp:\n      description: |\n        A notification channel for receiving a generic http request.\n      required:\n        - id\n        - channelType\n        - url\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        channelType:\n          type: string\n          format: channeltype\n        url:\n          type: string\n          format: uri\n    NotificationMail:\n      description: |\n        A notification channel for receiving e-mails.\n      required:\n        - id\n        - channelType\n        - connection\n        - recipients\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        channelType:\n          type: string\n          format: channeltype\n        connection:\n          type: string\n          format: ident\n        recipients:\n          type: array\n          items:\n            type: string\n\n    NotificationHook:\n      description: |\n        Describes a notifcation hook. There must be at least one\n        channel specified. When creating hooks, the channels must\n        provide the `ìd` and the `channelType` while their `name`\n        attribute is optional.\n      required:\n        - id\n        - enabled\n        - channel\n        - events\n        - allEvents\n      properties:\n        id:\n          type: string\n          format: ident\n        enabled:\n          type: boolean\n        channels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NotificationChannelRef\"\n        allEvents:\n          type: boolean\n        eventFilter:\n          type: string\n          format: jsonminiq\n          description: |\n            A filter expression that is applied to the event to be able\n            to ignore a subset of them. See its\n            [documentation](https://docspell.org/docs/jsonminiquery/).\n        events:\n          type: array\n          items:\n            type: string\n            format: eventtype\n            enum:\n              - tagsAdded\n              - tagsSet\n  \n    PeriodicQuerySettings:\n      description: |\n        Settings for the periodc-query task. At least one of `query`\n        and `bookmark` is required! There must be at least one channel\n        specified when creating settings. A channel must provide its\n        `id` and `channelType`, while its `name` is optional.\n      required:\n        - id\n        - enabled\n        - channel\n        - schedule\n      properties:\n        id:\n          type: string\n          format: ident\n        enabled:\n          type: boolean\n        summary:\n          type: string\n        channels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NotificationChannelRef\"\n        schedule:\n          type: string\n          format: calevent\n        query:\n          type: string\n          format: itemquery\n        bookmark:\n          type: string\n          description: |\n            Name or ID of bookmark to use.\n        contentStart:\n          type: string\n  \n    PeriodicDueItemsSettings:\n      description: |\n        Settings for notifying about due items. At least one of\n        `query` and `bookmark` is required! There must be at least one\n        channel specified when creating settings. A channel must\n        provide its `id` and `channelType`, while its `name` is\n        optional.\n      required:\n        - id\n        - enabled\n        - channel\n        - schedule\n        - remindDays\n        - capOverdue\n        - tagsInclude\n        - tagsExclude\n      properties:\n        id:\n          type: string\n          format: ident\n        enabled:\n          type: boolean\n        summary:\n          type: string\n        channels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NotificationChannelRef\"\n        schedule:\n          type: string\n          format: calevent\n        remindDays:\n          type: integer\n          format: int32\n          description: |\n            Used to restrict items by their due dates. All items with\n            a due date lower than (now + remindDays) are searched.\n        capOverdue:\n          type: boolean\n          description: |\n            If this is true, the search is also restricted to due\n            dates greater than `now - remindDays'. Otherwise, due date\n            are not restricted in that direction (only lower than `now\n            + remindDays' applies) and it is expected to restrict it\n            more using custom tags.\n        tagsInclude:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        tagsExclude:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Tag\"\n  \n    ShareSecret:\n      description: |\n        The secret (the share id + optional password) to access a\n        share.\n      required:\n        - shareId\n      properties:\n        shareId:\n          type: string\n          format: ident\n        password:\n          type: string\n          format: password\n\n    ShareVerifyResult:\n      description: |\n        The data returned when verifying a `ShareSecret`.\n      required:\n        - success\n        - token\n        - passwordRequired\n        - message\n      properties:\n        success:\n          type: boolean\n        token:\n          type: string\n        passwordRequired:\n          type: boolean\n        message:\n          type: string\n        name:\n          type: string\n          description: |\n            The name of the share if it exists. Only valid to use when\n            `success` is `true`.\n\n    ShareData:\n      description: |\n        Editable data for a share.\n      required:\n        - query\n        - enabled\n        - publishUntil\n      properties:\n        name:\n          type: string\n        query:\n          type: string\n          format: itemquery\n        enabled:\n          type: boolean\n        password:\n          type: string\n          format: password\n        publishUntil:\n          type: integer\n          format: date-time\n        removePassword:\n          type: boolean\n          description: |\n            For an update request, this can control whether to delete\n            the password. Otherwise if the password is not set, it\n            will not be changed. When adding a new share, this has no\n            effect.\n\n    ShareDetail:\n      description: |\n        Details for an existing share.\n      required:\n        - id\n        - query\n        - owner\n        - enabled\n        - publishAt\n        - publishUntil\n        - password\n        - views\n        - expired\n      properties:\n        id:\n          type: string\n          format: ident\n        query:\n          type: string\n          format: itemquery\n        owner:\n          $ref: \"#/components/schemas/IdName\"          \n        name:\n          type: string\n        enabled:\n          type: boolean\n        publishAt:\n          type: integer\n          format: date-time\n        publishUntil:\n          type: integer\n          format: date-time\n        expired:\n          type: boolean\n        password:\n          type: boolean\n        views:\n          type: integer\n          format: int32\n        lastAccess:\n          type: integer\n          format: date-time\n\n    ShareList:\n      description: |\n        A list of shares.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ShareDetail\"\n        \n    DeleteUserData:\n      description: |\n        An excerpt of data that would be deleted when deleting the\n        associated user.\n      required:\n        - folders\n        - sentMails\n        - shares\n      properties:\n        folders:\n          type: array\n          items:\n            type: string\n            format: ident\n        sentMails:\n          type: integer\n          format: int32\n        shares:\n          type: integer\n          format: int32\n\n    SecondFactor:\n      description: |\n        Provide a second factor for login.\n      required:\n        - token\n        - otp\n        - rememberMe\n      properties:\n        token:\n          type: string\n        otp:\n          type: string\n          format: password\n        rememberMe:\n          type: boolean          \n    OtpState:\n      description: |\n        The state for OTP for an account\n      required:\n        - enabled\n      properties:\n        enabled:\n          type: boolean\n        created:\n          type: integer\n          format: date-time        \n    OtpResult:\n      description: |\n        The result from initializing OTP. It contains the shared\n        secret.\n      required:\n        - authenticatorUrl\n        - secret\n        - authType\n        - issuer\n      properties:\n        authenticatorUrl:\n          type: string\n          format: uri\n        secret:\n          type: string\n        authType:\n          type: string\n          enum:\n            - totp\n        issuer:\n          type: string\n\n    OtpConfirm:\n      description: |\n        Transports a one time password.\n      required:\n        - otp\n      properties:\n        otp:\n          type: string\n          format: password          \n\n    ResetPassword:\n      description: |\n        The account to reset the password.\n      required:\n        - account\n      properties:\n        account:\n          type: string\n          format: accountid\n\n    ResetPasswordResult:\n      description: |\n        Contains the newly generated password or an error.\n      required:\n        - success\n        - newPassword\n        - message\n      properties:\n        success:\n          type: boolean\n        newPassword:\n          type: string\n          format: password\n        message:\n          type: string\n\n    ItemsAndFieldValue:\n      description: |\n        Holds a list of item ids and a custom field value.\n      required:\n        - items\n        - field\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        field:\n          $ref: \"#/components/schemas/CustomFieldValue\"\n\n    ItemsAndRefs:\n      description: |\n        Holds a list of item ids and a list of names or ids of some\n        other related entity (e.g. tags).\n      required:\n        - items\n        - refs\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        refs:\n          type: array\n          items:\n            type: string\n    ItemsAndRef:\n      description: |\n        Holds a list of item ids and a single optional id of some\n        other related entity (e.g. person, org).\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        ref:\n          type: string\n          format: ident\n    ItemsAndName:\n      description: |\n        Holds a list of item ids and an item name.\n      required:\n        - items\n        - name\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        name:\n          type: string\n    ItemsAndDirection:\n      description: |\n        Holds a list of item ids and a direction value.\n      required:\n        - items\n        - direction\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        direction:\n          type: string\n          format: direction\n    ItemsAndDate:\n      description: |\n        Holds a list of item ids and a date value.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n            format: ident\n        date:\n          type: integer\n          format: date-time\n\n\n    CustomFieldList:\n      description: |\n        A list of known custom fields.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CustomField\"\n\n    ItemFieldValue:\n      description: |\n        Information about a custom field on an item.\n      required:\n        - id\n        - name\n        - ftype\n        - value\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n          format: ident\n        label:\n          type: string\n        ftype:\n          type: string\n          format: customfieldtype\n          enum:\n            - text\n            - numeric\n            - date\n            - bool\n            - money\n        value:\n          type: string\n\n    CustomFieldValue:\n      description: |\n        Data structure to update the value of a custom field.\n      required:\n        - field\n        - value\n      properties:\n        field:\n          type: string\n          format: ident\n        value:\n          type: string\n\n    NewCustomField:\n      description: |\n        Data for creating a custom field.\n      required:\n        - name\n        - ftype\n      properties:\n        name:\n          type: string\n          format: ident\n        label:\n          type: string\n        ftype:\n          type: string\n          format: customfieldtype\n          enum:\n            - text\n            - numeric\n            - date\n            - bool\n            - money\n\n    CustomField:\n      description: |\n        A custom field definition.\n      required:\n        - id\n        - name\n        - ftype\n        - usages\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n          format: ident\n        label:\n          type: string\n        ftype:\n          type: string\n          format: customfieldtype\n          enum:\n            - text\n            - numeric\n            - date\n            - bool\n            - money\n        usages:\n          type: integer\n          format: int32\n        created:\n          type: integer\n          format: date-time\n\n    JobPriority:\n      description: |\n        Transfer the priority of a job.\n      required:\n        - priority\n      properties:\n        priority:\n          type: string\n          format: priority\n          enum:\n            - high\n            - low\n    IdList:\n      description:\n        A list of identifiers.\n      required:\n        - ids\n      properties:\n        ids:\n          type: array\n          items:\n            type: string\n            format: ident\n    StringList:\n      description: |\n        A simple list of strings.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n    FolderList:\n      description: |\n        A list of folders with their member counts.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FolderItem\"\n    FolderItem:\n      description: |\n        An item in a folder list.\n      required:\n        - id\n        - name\n        - owner\n        - created\n        - isMember\n        - memberCount\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        owner:\n          $ref: \"#/components/schemas/IdName\"\n        created:\n          type: integer\n          format: date-time\n        isMember:\n          type: boolean\n        memberCount:\n          type: integer\n          format: int32\n    NewFolder:\n      description: |\n        Data required to create a new folder.\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    FolderDetail:\n      description: |\n        Details about a folder.\n      required:\n        - id\n        - name\n        - owner\n        - created\n        - isMember\n        - memberCount\n        - members\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        owner:\n          $ref: \"#/components/schemas/IdName\"\n        created:\n          type: integer\n          format: date-time\n        isMember:\n          type: boolean\n        memberCount:\n          type: integer\n          format: int32\n        members:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n    ItemQuery:\n      description: |\n        Query description for a search. Is used for fulltext-only\n        searches and combined searches.\n      required:\n        - query\n      properties:\n        offset:\n          type: integer\n          format: int32\n        limit:\n          type: integer\n          format: int32\n          description: |\n            The maximum number of results to return. Note that this\n            limit is a soft limit, there is some hard limit on the\n            server, too.\n        withDetails:\n          type: boolean\n          default: false\n        searchMode:\n          type: string\n          format: searchmode\n          enum:\n            - normal\n            - trashed\n            - all\n          default: normal\n          description: |\n            Specify whether the search query should apply to\n            soft-deleted items or not.\n        query:\n          type: string\n          description: |\n            A query searching the contents of documents.\n    MoveAttachment:\n      description: |\n        Data to move an attachment to another position.\n      required:\n        - source\n        - target\n      properties:\n        source:\n          type: string\n          format: ident\n        target:\n          type: string\n          format: ident\n    ScanMailboxSettingsList:\n      description: |\n        A list of scan-mailbox tasks.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ScanMailboxSettings\"\n    ScanMailboxSettings:\n      description: |\n        Settings for the scan mailbox task.\n      required:\n        - id\n        - enabled\n        - scanRecursively\n        - imapConnection\n        - schedule\n        - folders\n        - deleteMail\n      properties:\n        id:\n          type: string\n          format: ident\n        enabled:\n          type: boolean\n        summary:\n          type: string\n        imapConnection:\n          type: string\n          format: ident\n        folders:\n          type: array\n          items:\n            type: string\n        scanRecursively:\n          type: boolean\n          description: |\n            Scan folders recursively for new mails.\n        schedule:\n          type: string\n          format: calevent\n        receivedSinceHours:\n          type: integer\n          format: int32\n          description: |\n            Look only for mails newer than `receivedSinceHours' hours.\n        targetFolder:\n          type: string\n          description: |\n            The folder to move all mails into that have been\n            successfully submitted to docspell.\n        deleteMail:\n          type: boolean\n          description: |\n            Whether to delete all successfully imported mails. This\n            only applies, if `targetFolder' is not set.\n        direction:\n          type: string\n          format: direction\n          description: |\n            The direction to apply to items resulting from importing\n            mails. If not set, the value is guessed based on the from\n            and to mail headers and your address book.\n        itemFolder:\n          type: string\n          format: ident\n          description: |\n            The folder id that is applied to items resulting from\n            importing mails. If the folder id is not valid when the\n            task executes, items have no folder set.\n        tags:\n          $ref: \"#/components/schemas/StringList\"\n        fileFilter:\n          description: |\n            A glob to filter attachments to import by file name.\n          type: string\n          format: glob\n        subjectFilter:\n          description: |\n            A glob to filter attachments to import by subject.\n          type: string\n          format: glob\n        language:\n          description: |\n            The language used for text extraction and analysis when\n            processing mails.\n          type: string\n          format: language\n        postHandleAll:\n          type: boolean\n        attachmentsOnly:\n          type: boolean\n          description: |\n            Import only the attachments e-mails and discard the body\n\n    ImapSettingsList:\n      description: |\n        A list of user email settings.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ImapSettings\"\n    ImapSettings:\n      description: |\n        IMAP settings for sending mail.\n      required:\n        - name\n        - imapHost\n        - from\n        - sslType\n        - ignoreCertificates\n        - useOAuth\n      properties:\n        name:\n          type: string\n          format: ident\n        imapHost:\n          type: string\n        imapPort:\n          type: integer\n          format: int32\n        imapUser:\n          type: string\n        imapPassword:\n          type: string\n          format: password\n        sslType:\n          type: string\n        ignoreCertificates:\n          type: boolean\n        useOAuth:\n          type: boolean\n          description: |\n            Use the password as an OAuth2 access token with the\n            authentication scheme XOAUTH2.\n    CalEventCheckResult:\n      description: |\n        The result of checking a calendar event string.\n      required:\n        - success\n        - message\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        event:\n          type: string\n          format: calevent\n        next:\n          type: array\n          items:\n            type: integer\n            format: date-time\n    CalEventCheck:\n      description: |\n        A calendar event.\n      required:\n        - event\n      properties:\n        event:\n          type: string\n    SentMails:\n      description: |\n        A list of sent mails.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SentMail\"\n    SentMail:\n      description: |\n        A mail that has been sent previously related to an item.\n      required:\n        - id\n        - sender\n        - connection\n        - recipients\n        - subject\n        - body\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        sender:\n          type: string\n          format: ident\n        connection:\n          type: string\n          format: ident\n        recipients:\n          type: array\n          items:\n            type: string\n        subject:\n          type: string\n        body:\n          type: string\n        created:\n          type: integer\n          format: date-time\n    SimpleMail:\n      description: |\n        A simple e-mail related to an item.\n\n        The mail may contain the item attachments as mail attachments.\n        If all item attachments should be send, set\n        `addAllAttachments` to `true`. Otherwise set it to `false` and\n        specify a list of file-ids that you want to include. This list\n        is ignored, if `addAllAttachments` is set to `true`.\n      required:\n        - recipients\n        - cc\n        - bcc\n        - subject\n        - body\n        - addAllAttachments\n        - attachmentIds\n      properties:\n        recipients:\n          type: array\n          items:\n            type: string\n        cc:\n          type: array\n          items:\n            type: string\n        bcc:\n          type: array\n          items:\n            type: string\n        subject:\n          type: string\n        body:\n          type: string\n        addAllAttachments:\n          type: boolean\n        attachmentIds:\n          type: array\n          items:\n            type: string\n            format: ident\n    SimpleShareMail:\n      description: |\n        A simple e-mail related to a share.\n      required:\n        - shareId\n        - recipients\n        - cc\n        - bcc\n        - subject\n        - body\n      properties:\n        shareId:\n          type: string\n          format: ident\n        recipients:\n          type: array\n          items:\n            type: string\n        cc:\n          type: array\n          items:\n            type: string\n        bcc:\n          type: array\n          items:\n            type: string\n        subject:\n          type: string\n        body:\n          type: string\n    EmailSettingsList:\n      description: |\n        A list of user email settings.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EmailSettings\"\n    EmailSettings:\n      description: |\n        SMTP settings for sending mail.\n      required:\n        - name\n        - smtpHost\n        - from\n        - sslType\n        - ignoreCertificates\n      properties:\n        name:\n          type: string\n          format: ident\n        smtpHost:\n          type: string\n        smtpPort:\n          type: integer\n          format: int32\n        smtpUser:\n          type: string\n        smtpPassword:\n          type: string\n          format: password\n        from:\n          type: string\n        replyTo:\n          type: string\n        sslType:\n          type: string\n        ignoreCertificates:\n          type: boolean\n    CheckFileResult:\n      description: |\n        Results when searching for file checksums.\n      required:\n        - exists\n        - items\n      properties:\n        exists:\n          type: boolean\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/BasicItem\"\n    BasicItem:\n      description: |\n        Basic properties about an item.\n      required:\n        - id\n        - name\n        - direction\n        - state\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        direction:\n          type: string\n          format: direction\n        state:\n          type: string\n          format: itemstate\n        created:\n          type: integer\n          format: date-time\n        itemDate:\n          type: integer\n          format: date-time\n    GenInvite:\n      description: |\n        A request to generate a new invitation key.\n      required:\n        - password\n      properties:\n        password:\n          type: string\n          format: password\n    InviteResult:\n      description: |\n        The result when requesting new invitation keys.\n      required:\n        - success\n        - message\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        key:\n          type: string\n          format: ident\n    SearchStats:\n      description: |\n        A summary of search results.\n      required:\n        - count\n        - tagCloud\n        - tagCategoryCloud\n        - fieldStats\n        - folderStats\n        - corrOrgStats\n        - corrPersStats\n        - concPersStats\n        - concEquipStats\n      properties:\n        count:\n          type: integer\n          format: int32\n        tagCloud:\n          $ref: \"#/components/schemas/TagCloud\"\n        tagCategoryCloud:\n          $ref: \"#/components/schemas/NameCloud\"\n        fieldStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FieldStats\"\n        folderStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FolderStats\"\n        corrOrgStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdRefStats\"\n        corrPersStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdRefStats\"\n        concPersStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdRefStats\"\n        concEquipStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdRefStats\"\n\n    ItemInsights:\n      description: |\n        Information about the items in docspell.\n      required:\n        - incomingCount\n        - outgoingCount\n        - deletedCount\n        - itemSize\n        - tagCloud\n      properties:\n        incomingCount:\n          type: integer\n          format: int32\n        outgoingCount:\n          type: integer\n          format: int32\n        deletedCount:\n          type: integer\n          format: int32\n        itemSize:\n          type: integer\n          format: int64\n        tagCloud:\n          $ref: \"#/components/schemas/TagCloud\"\n    FolderStats:\n      description: |\n        Count of folder usage.\n      required:\n        - id\n        - name\n        - owner\n        - count\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        owner:\n          $ref: \"#/components/schemas/IdName\"\n        count:\n          type: integer\n          format: int32\n    FieldStats:\n      description: |\n        Basic statistics about a custom field.\n      required:\n        - id\n        - name\n        - ftype\n        - count\n        - avg\n        - sum\n        - max\n        - min\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n          format: ident\n        label:\n          type: string\n        ftype:\n          type: string\n          format: customfieldtype\n          enum:\n            - text\n            - numeric\n            - date\n            - bool\n            - money\n        count:\n          type: integer\n          format: int32\n        sum:\n          type: number\n          format: double\n        avg:\n          type: number\n          format: double\n        max:\n          type: number\n          format: double\n        min:\n          type: number\n          format: double\n    TagCloud:\n      description: |\n        A tag \"cloud\"\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TagCount\"\n    TagCount:\n      description: |\n        Structure for counting tags.\n      required:\n        - tag\n        - count\n      properties:\n        tag:\n          $ref: \"#/components/schemas/Tag\"\n        count:\n          type: integer\n          format: int32\n\n    NameCloud:\n      description: |\n        A set of counters.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NameCount\"\n    NameCount:\n      description: |\n        Generic structure for counting something.\n      required:\n        - count\n      properties:\n        name:\n          type: string\n        count:\n          type: integer\n          format: int32\n\n    IdRefStats:\n      description: |\n        Counting some objects that have an id and a name.\n      required:\n        - ref\n        - count\n      properties:\n        ref:\n          $ref: \"#/components/schemas/IdName\"\n        count:\n          type: integer\n          format: int32\n\n    AttachmentMeta:\n      description: |\n        Extracted meta data of an attachment.\n      required:\n        - content\n        - labels\n        - proposals\n      properties:\n        content:\n          type: string\n        labels:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Label\"\n        proposals:\n          $ref: \"#/components/schemas/ItemProposals\"\n    ItemProposals:\n      description: |\n        Metadata that has been suggested to an item.\n      required:\n        - corrOrg\n        - corrPerson\n        - concPerson\n        - concEquipment\n        - itemDate\n        - dueDate\n      properties:\n        corrOrg:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n        corrPerson:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n        concPerson:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n        concEquipment:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n        itemDate:\n          type: array\n          items:\n            type: integer\n            format: date-time\n        dueDate:\n          type: array\n          items:\n            type: integer\n            format: date-time\n    Label:\n      description: |\n        Extracted label.\n      required:\n        - labelType\n        - label\n        - beginPos\n        - endPos\n      properties:\n        labelType:\n          type: string\n          format: nertag\n        label:\n          type: string\n        beginPos:\n          type: integer\n          format: int32\n        endPos:\n          type: integer\n          format: int32\n    OptionalDate:\n      description: |\n        Structure for sending an optional datetime value.\n      properties:\n        date:\n          type: integer\n          format: date-time\n    OptionalText:\n      description: |\n        Structure for sending optional text.\n      properties:\n        text:\n          type: string\n    OptionalId:\n      description: |\n        Structure for sending optional ids.\n      properties:\n        id:\n          type: string\n          format: ident\n    DirectionValue:\n      description: |\n        A direction.\n      required:\n        - direction\n      properties:\n        direction:\n          type: string\n          format: direction\n    ItemDetail:\n      description: |\n        Detailed information about an item.\n      required:\n        - id\n        - direction\n        - name\n        - source\n        - state\n        - created\n        - updated\n        - attachments\n        - sources\n        - archives\n        - tags\n        - customfields\n        - relatedItems\n      properties:\n        id:\n          type: string\n          format: ident\n        direction:\n          type: string\n          format: direction\n          enum:\n            - incoming\n            - outgoing\n        name:\n          type: string\n        source:\n          type: string\n        state:\n          type: string\n          format: itemstate\n        created:\n          type: integer\n          format: date-time\n        updated:\n          type: integer\n          format: date-time\n        itemDate:\n          type: integer\n          format: date-time\n        corrOrg:\n          $ref: \"#/components/schemas/IdName\"\n        corrPerson:\n          $ref: \"#/components/schemas/IdName\"\n        concPerson:\n          $ref: \"#/components/schemas/IdName\"\n        concEquipment:\n          $ref: \"#/components/schemas/IdName\"\n        inReplyTo:\n          $ref: \"#/components/schemas/IdName\"\n        folder:\n          $ref: \"#/components/schemas/IdName\"\n        dueDate:\n          type: integer\n          format: date-time\n        notes:\n          type: string\n        attachments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Attachment\"\n        sources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AttachmentSource\"\n        archives:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AttachmentSource\"\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        customfields:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemFieldValue\"\n        relatedItems:\n          description: |\n            All related items to this item. The list contains items\n            without more details being resolved.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemLight\"\n    Attachment:\n      description: |\n        Information about an attachment to an item.\n      required:\n        - id\n        - size\n        - contentType\n        - converted\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        size:\n          type: integer\n          format: int64\n        contentType:\n          type: string\n          format: mimetype\n        converted:\n          type: boolean\n    AttachmentSource:\n      description: |\n        The source or original file of an attachment.\n      required:\n        - id\n        - size\n        - contentType\n      properties:\n        id:\n          type: string\n          format: ident\n          description: |\n            The id is the attachment id.\n        name:\n          type: string\n        size:\n          type: integer\n          format: int64\n        contentType:\n          type: string\n          format: mimetype\n    Registration:\n      description: |\n        Data for registering a new account.\n      required:\n        - collectiveName\n        - login\n        - password\n      properties:\n        collectiveName:\n          type: string\n          format: ident\n        login:\n          type: string\n          format: ident\n        password:\n          type: string\n          format: password\n        invite:\n          type: string\n          format: ident\n    JobQueueState:\n      description: |\n        Contains all information about the job queue.\n      required:\n        - progress\n        - completed\n        - queued\n      properties:\n        progress:\n          type: array\n          items:\n            $ref: \"#/components/schemas/JobDetail\"\n        completed:\n          type: array\n          items:\n            $ref: \"#/components/schemas/JobDetail\"\n        queued:\n          type: array\n          items:\n            $ref: \"#/components/schemas/JobDetail\"\n    JobDetail:\n      description: |\n        Details about a job.\n      required:\n        - id\n        - name\n        - submitted\n        - priority\n        - state\n        - retries\n        - logs\n        - progress\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        submitted:\n          description: DateTime\n          type: integer\n          format: date-time\n        priority:\n          type: string\n          format: priority\n          enum:\n            - high\n            - low\n        state:\n          type: string\n          format: jobstate\n          enum:\n            - waiting\n            - scheduled\n            - running\n            - stuck\n            - failed\n            - canceled\n            - success\n        retries:\n          type: integer\n          format: int32\n        logs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/JobLogEvent\"\n        progress:\n          type: integer\n          format: int32\n        worker:\n          type: string\n          format: ident\n        started:\n          description: DateTime\n          type: integer\n          format: date-time\n        finished:\n          type: integer\n          format: date-time\n    JobLogEvent:\n      description: |\n        A log output line.\n      required:\n        - time\n        - level\n        - message\n      properties:\n        time:\n          description: DateTime\n          type: integer\n          format: date-time\n        level:\n          type: string\n          format: loglevel\n        message:\n          type: string\n    PasswordChange:\n      description: |\n        Change the password, by given the old and new one.\n      required:\n        - currentPassword\n        - newPassword\n      properties:\n        currentPassword:\n          type: string\n          format: password\n        newPassword:\n          type: string\n          format: password\n    UserList:\n      description: |\n        A list of users.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n    User:\n      description: |\n        A user of a collective.\n      required:\n        - id\n        - login\n        - state\n        - source\n        - loginCount\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        login:\n          type: string\n          format: ident\n        state:\n          type: string\n          format: userstate\n          enum:\n            - active\n            - disabled\n        source:\n          type: string\n          format: accountsource\n          enum:\n            - local\n            - openid\n        password:\n          type: string\n          format: password\n        email:\n          type: string\n        lastLogin:\n          description: DateTime\n          type: integer\n          format: date-time\n        loginCount:\n          type: integer\n          format: int32\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n\n    ItemUploadMeta:\n      description: |\n        Meta information for an item upload. The user can specify some\n        structured information with a binary file.\n\n        Additional metadata is not required. However, if there is some\n        specified, you have to specifiy whether the corresponding\n        files should become one single item or if an item is created\n        for each file.\n      required:\n        - multiple\n      properties:\n        multiple:\n          type: boolean\n          default: true\n          description: |\n            If `true` (the default) each file in the upload request\n            results in a separate item. If it is set to `false`, then\n            all files in the request are put into a single item.\n        flattenArchives:\n          type: boolean\n          default: false\n          description: |\n            This implies `multiple = true` and will (when `true`)\n            treat every ZIP file as a container of independent files\n            that will result in separate items. When this is `false`\n            then each zip file will result in one item with its\n            contents being the attachments.\n        direction:\n          type: string\n          format: direction\n          default: \"incoming\"\n          description: |\n            The direction of the item, can be `Incoming` or `Outgoing`.\n        folder:\n          type: string\n          format: ident\n          description: |\n            A folder can be specified that is attached to the new\n            item. The folder must exist and can be specified by id or\n            name.\n        skipDuplicates:\n          type: boolean\n          default: false\n          description: |\n            If set to `true` the processing will look for the same\n            file in Docspell and will skip processing this one if one\n            is found. The check is done via the file's checksum.\n        tags:\n          $ref: \"#/components/schemas/StringList\"\n          description: |\n            The `tags` input allows to provide tags that should be\n            applied to the item being created. This only works if the\n            tags already exist. It is possible to specify their ids or\n            names.\n        fileFilter:\n          type: string\n          format: glob\n          description: |\n            The `fileFilter` is an optional glob for filtering files\n            to import. Only applicable if archive files are uploaded.\n            It applies to all of them. For example, to only import pdf\n            files when uploading e-mails, use `*.pdf`. If the pattern\n            doesn't contain a slash `/`, then it is applied to all\n            file names. Otherwise it is applied to the complete path\n            in the archive (useful for zip files). Note that the\n            archive file itself is always saved completely, too.\n        language:\n          type: string\n          format: language\n          description: |\n            The `language` of the document may be specified, otherwise\n            the one from settings is used.\n        attachmentsOnly:\n          type: boolean\n          default: false\n          description: |\n            Only applies to e-mail files. If `true` then only\n            attachments of the e-mail are imported and the e-mail body\n            is discarded. E-mails that don't have any attachments are\n            skipped.\n\n    Collective:\n      description: |\n        Information about a collective.\n      required:\n        - id\n        - state\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        state:\n          type: string\n          format: collectivestate\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n\n    CollectiveSettings:\n      description: |\n        Settings for a collective.\n      required:\n        - language\n        - integrationEnabled\n        - classifier\n        - emptyTrash\n        - passwords\n      properties:\n        language:\n          type: string\n          format: language\n        integrationEnabled:\n          type: boolean\n          description: |\n            Whether the collective has the integration endpoint\n            enabled.\n        classifier:\n          $ref: \"#/components/schemas/ClassifierSetting\"\n        emptyTrash:\n          $ref: \"#/components/schemas/EmptyTrashSetting\"\n        passwords:\n          type: array\n          items:\n            type: string\n            format: password\n\n    EmptyTrashSetting:\n      description: |\n        Settings for clearing the trash of items.\n      required:\n        - schedule\n        - minAge\n      properties:\n        schedule:\n          type: string\n          format: calevent\n        minAge:\n          type: integer\n          format: duration\n\n    ClassifierSetting:\n      description: |\n        Settings for learning a document classifier.\n      required:\n        - schedule\n        - itemCount\n        - categoryList\n        - listType\n      properties:\n        itemCount:\n          type: integer\n          format: int32\n          description: |\n            The max. number of items to learn from. The newest items\n            are considered.\n        schedule:\n          type: string\n          format: calevent\n        categoryList:\n          type: array\n          items:\n            type: string\n        listType:\n          type: string\n          format: listtype\n          enum:\n            - blacklist\n            - whitelist\n\n    SourceList:\n      description: |\n        A list of sources.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SourceAndTags\"\n\n    Source:\n      description: |\n        Data about a Source. A source defines the endpoint where\n        docspell receives files.\n      required:\n        - id\n        - abbrev\n        - counter\n        - enabled\n        - priority\n        - created\n        - attachmentsOnly\n      properties:\n        id:\n          type: string\n          format: ident\n        abbrev:\n          type: string\n        description:\n          type: string\n        counter:\n          type: integer\n          format: int32\n        enabled:\n          type: boolean\n        priority:\n          type: string\n          format: priority\n          enum:\n            - high\n            - low\n        folder:\n          type: string\n          format: ident\n        fileFilter:\n          type: string\n          format: glob\n        language:\n          type: string\n          format: language\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n        attachmentsOnly:\n          type: boolean\n    SourceTagIn:\n      description: |\n        A source and optional tags (ids or names) for updating/adding.\n      required:\n        - source\n        - tags\n      properties:\n        source:\n          $ref: \"#/components/schemas/Source\"\n        tags:\n          type: array\n          items:\n            type: string\n    SourceAndTags:\n      description: |\n        A source and optional tags.\n      required:\n        - source\n        - tags\n      properties:\n        source:\n          $ref: \"#/components/schemas/Source\"\n        tags:\n          $ref: \"#/components/schemas/TagList\"\n\n    EquipmentList:\n      description: |\n        A list of equipments.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Equipment\"\n    Equipment:\n      description: |\n        Some \"thing\" that occurs in documents.\n      required:\n        - id\n        - name\n        - created\n        - use\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n        notes:\n          type: string\n        use:\n          type: string\n          format: equipmentuse\n          enum:\n            - concerning\n            - disabled\n    ReferenceList:\n      description:\n        Listing of entities with their id and a name.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/IdName\"\n    Person:\n      description: |\n        Basic information about a person.\n      required:\n        - id\n        - name\n        - address\n        - contacts\n        - created\n        - use\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        organization:\n          $ref: \"#/components/schemas/IdName\"\n        address:\n          $ref: \"#/components/schemas/Address\"\n        contacts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Contact\"\n        notes:\n          type: string\n        use:\n          type: string\n          format: personuse\n          enum:\n            - concerning\n            - correspondent\n            - both\n            - disabled\n          description: |\n            Whether this person should be used to create suggestions\n            for the \"concerning person\", \"correspondent\" or both.\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n    PersonList:\n      description: |\n        A list of persons.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Person\"\n    Organization:\n      description: |\n        An organisation.\n      required:\n        - id\n        - name\n        - address\n        - contacts\n        - created\n        - use\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        address:\n          $ref: \"#/components/schemas/Address\"\n        contacts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Contact\"\n        notes:\n          type: string\n        created:\n          description: DateTime\n          type: integer\n          format: date-time\n        shortName:\n          type: string\n        use:\n          type: string\n          format: orguse\n          enum:\n            - correspondent\n            - disabled\n    OrganizationList:\n      description: |\n        A list of full organization values.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Organization\"\n    Address:\n      description: |\n        Postal address information.\n      required:\n        - street\n        - zip\n        - city\n        - country\n      properties:\n        street:\n          type: string\n        zip:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n    ContactList:\n      description: |\n        A list of contacts.\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Contact\"\n    Contact:\n      description: |\n        Contact information.\n      required:\n        - id\n        - value\n        - kind\n      properties:\n        id:\n          type: string\n          format: ident\n        value:\n          type: string\n        kind:\n          type: string\n          format: contactkind\n          enum:\n            - phone\n            - mobile\n            - website\n            - fax\n            - docspell\n            - email\n    ItemLightList:\n      description: |\n        A list of item details.\n      required:\n        - groups\n      properties:\n        groups:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemLightGroup\"\n    ItemLightGroup:\n      description: |\n        A group of items.\n      required:\n        - name\n        - items\n      properties:\n        name:\n          type: string\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemLight\"\n    ItemLight:\n      description: |\n        An item with only a few important properties.\n      required:\n        - id\n        - name\n        - state\n        - date\n        - source\n        - tags\n        - attachments\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        state:\n          type: string\n          format: itemstate\n        date:\n          type: integer\n          format: date-time\n        dueDate:\n          type: integer\n          format: date-time\n        source:\n          type: string\n        direction:\n          type: string\n          enum:\n            - incoming\n            - outgoing\n        corrOrg:\n          $ref: \"#/components/schemas/IdName\"\n        corrPerson:\n          $ref: \"#/components/schemas/IdName\"\n        concPerson:\n          $ref: \"#/components/schemas/IdName\"\n        concEquipment:\n          $ref: \"#/components/schemas/IdName\"\n        folder:\n          $ref: \"#/components/schemas/IdName\"\n        attachments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AttachmentLight\"\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        customfields:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemFieldValue\"\n        relatedItems:\n          type: array\n          items:\n            type: string\n            format: ident\n        notes:\n          description: |\n            Some prefix of the item notes.\n          type: string\n        highlighting:\n          description: |\n            Optional contextual information of a search query. Each\n            item refers to some field where a search match was found\n            (e.g. the name of an attachment or the item notes) and a\n            list of lines giving surrounding context of the macth.\n          type: array\n          items:\n            $ref: \"#/components/schemas/HighlightEntry\"\n    AttachmentLight:\n      description: |\n        Some little details about an attachment.\n      required:\n        - id\n        - position\n      properties:\n        id:\n          type: string\n          format: ident\n        position:\n          type: integer\n          format: int32\n        name:\n          type: string\n        pageCount:\n          type: integer\n          format: int32\n    HighlightEntry:\n      description: |\n        Highlighting information for a single field (maybe attachment\n        name or item notes).\n      required:\n        - name\n        - lines\n      properties:\n        name:\n          type: string\n        lines:\n          type: array\n          items:\n            type: string\n    IdName:\n      description: |\n        The identifier and a human readable name of some entity.\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n    BasicResult:\n      description: |\n        Some basic result of an operation.\n      required:\n        - success\n        - message\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n    IdResult:\n      description: |\n        Some basic result of an operation with an ID as payload, if\n        success is true. If success is `false` the id is not usable.\n      required:\n        - success\n        - message\n        - id\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        id:\n          type: string\n          format: ident\n    Tag:\n      description: |\n        A tag used to annotate items. A tag may have a category which\n        groups tags together.\n      required:\n        - id\n        - name\n        - created\n      properties:\n        id:\n          type: string\n          format: ident\n        name:\n          type: string\n        category:\n          type: string\n        created:\n          type: integer\n          format: date-time\n    TagList:\n      description: |\n        A list of tags.\n      required:\n        - count\n        - items\n      properties:\n        count:\n          type: integer\n          format: int32\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n    UserPass:\n      description: |\n        Account name and password.\n      required:\n        - account\n        - password\n      properties:\n        account:\n          type: string\n        password:\n          type: string\n        rememberMe:\n          type: boolean\n    AuthResult:\n      description: |\n        The response to a authentication request.\n      required:\n        - collective\n        - user\n        - requireSecondFactor\n        - success\n        - message\n        - validMs\n      properties:\n        collective:\n          type: string\n        user:\n          type: string\n        success:\n          type: boolean\n        message:\n          type: string\n        token:\n          description: |\n            The authentication token that should be used for\n            subsequent requests to secured endpoints.\n          type: string\n        validMs:\n          description: |\n            How long the token is valid in ms.\n          type: integer\n          format: int64\n        requireSecondFactor:\n          type: boolean\n    VersionInfo:\n      description: |\n        Information about the software.\n      required:\n        - version\n        - builtAtMillis\n        - builtAtString\n        - gitCommit\n        - gitVersion\n      properties:\n        version:\n          type: string\n        builtAtMillis:\n          type: integer\n          format: int64\n        builtAtString:\n          type: string\n        gitCommit:\n          type: string\n        gitVersion:\n          type: string\n  securitySchemes:\n    authTokenHeader:\n      type: apiKey\n      in: header\n      name: X-Docspell-Auth\n    adminHeader:\n      type: apiKey\n      in: header\n      name: Docspell-Admin-Secret\n    shareTokenHeader:\n      type: apiKey\n      in: header\n      name: Docspell-Share-Auth\n  parameters:\n    id:\n      name: id\n      in: path\n      description: An identifier\n      required: true\n      schema:\n        type: string\n    userId:\n      name: userId\n      in: path\n      description: An identifier\n      required: true\n      schema:\n        type: string\n    shareId:\n      name: shareId\n      in: path\n      description: An identifier for a share\n      required: true\n      schema:\n        type: string\n    username:\n      name: username\n      in: path\n      required: true\n      description: The username of a user of this collective\n      schema:\n        type: string\n    itemId:\n      name: itemId\n      in: path\n      description: An identifier for an item\n      required: true\n      schema:\n        type: string\n    full:\n      name: full\n      in: query\n      description: Whether to list full data or just name and id.\n      required: false\n      schema:\n        type: boolean\n    owning:\n      name: full\n      in: query\n      description: Whether to get owning folders\n      required: false\n      schema:\n        type: boolean\n    owningShare:\n      name: owning\n      in: query\n      description: Return my own shares only\n      required: false\n      schema:\n        type: boolean\n    checksum:\n      name: checksum\n      in: path\n      description: A SHA-256 checksum\n      required: true\n      schema:\n        type: string\n    q:\n      name: q\n      in: query\n      description: A query string.\n      required: false\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: A limit for a search query\n      schema:\n        type: integer\n        format: int32\n    offset:\n      name: offset\n      in: query\n      description: A offset into the results for a search query\n      schema:\n        type: integer\n        format: int32\n    sort:\n      name: sort\n      in: query\n      required: false\n      description: |\n        How to sort the returned list\n      schema:\n        type: string\n    withDetails:\n      name: withDetails\n      in: query\n      description: Whether to return details to each item.\n      schema:\n        type: boolean\n    searchMode:\n      name: searchMode\n      in: query\n      schema:\n        type: string\n        format: searchmode\n      description: |\n        Specify whether the search query should apply to soft-deleted\n        items or not.\n    name:\n      name: name\n      in: path\n      description: An e-mail connection name\n      required: true\n      schema:\n        type: string\n    mailId:\n      name: mailId\n      in: path\n      description: The id of a sent mail.\n      required: true\n      schema:\n        type: string\n    contactKind:\n      name: kind\n      in: query\n      required: false\n      description: |\n        One of the available contact kinds.\n      schema:\n        type: string\n    withFallback:\n      name: withFallback\n      in: query\n      description: Whether to provide a fallback or not.\n      required: false\n      schema:\n        type: boolean\n    clientId:\n      name: clientId\n      in: path\n      required: true\n      description: |\n        some identifier for a client application\n      schema:\n        type: string\n    bookmarkId:\n      name: bookmarkId\n      in: path\n      required: true\n      description: |\n        An identifier for a bookmark\n      schema:\n        type: string\n    providerId:\n      name: providerId\n      in: path\n      required: true\n      schema:\n        type: string\n        format: ident\n"
		}
	},
	"Error": "buildIR: make ir: path \"/sec/upload/item\": post: requestBody: contents: multipart/form-data: form parameter \"meta\": field \"Tags\": nested objects not allowed",
	"NotImplemented": [
		"enum format"
	]
}