{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/acr-lfr/generate-it"
		},
		"file": {
			"name": "test_openapi3.yml",
			"size": 0,
			"path": "test_openapi3.yml",
			"byteSize": 9260,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: openweathermap-swagger\n  description: A sample API\n  contact:\n    name: Swagger API Team\n    email: john@boats.io\n    url: https://github.com/johndcarmichael/boats/\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: weather\n    description: Weather data\npaths:\n  /weather/:\n    get:\n      tags:\n        - weather\n      summary: Get weather\n      description: Query with varying content\n      operationId: weatherGet\n      parameters:\n        - $ref: '#/components/parameters/queryAppId'\n        - $ref: '#/components/parameters/queryCountry'\n        - $ref: '#/components/parameters/queryId'\n        - $ref: '#/components/parameters/queryLat'\n        - $ref: '#/components/parameters/queryLon'\n        - $ref: '#/components/parameters/headerSearchId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Weather'\n        '400':\n          description: Invalid Identifier supplied\n        '404':\n          description: Round not found\n      security:\n        - apiKeyAdmin: []\n        - jwtToken: []\n        - basic: []\n      x-passRequest: true\n  '/weather/{id}':\n    get:\n      tags:\n        - weather\n      summary: Get weather\n      description: Query with varying content\n      operationId: weatherIdGet\n      x-permission: getWeatherDetail\n      parameters:\n        - $ref: '#/components/parameters/pathId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WeatherFull'\n        '400':\n          description: Invalid Identifier supplied\n        '404':\n          description: Round not found\n      security:\n        - apiKeyAdmin: []\n        - jwtToken: []\n      x-passThruWithoutJWT: true\n  /rain/:\n    get:\n      tags:\n        - weather\n      summary: Get weather\n      description: Query with varying content\n      operationId: rainGet\n      parameters:\n        - $ref: '#/components/parameters/queryCountry'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Weather'\n        '400':\n          description: Invalid Identifier supplied\n        '404':\n          description: Round not found\n    post:\n      tags:\n        - weather\n      summary: Get weather\n      description: Query with varying content\n      operationId: rainPost\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Coord'\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Weather'\n        '400':\n          description: Invalid Identifier supplied\n        '404':\n          description: Round not found\n      x-passRequest: true\n    put:\n      tags:\n        - weather\n      summary: Get weather\n      description: Query with varying content\n      operationId: rainPut\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                image:\n                  description: An image to upload\n                  type: string\n                  format: binary\n              required:\n                - image\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Weather'\n        '400':\n          description: Invalid Identifier supplied\n        '404':\n          description: Round not found\n      x-passRequest: true\n  /me/weather:\n    get:\n      tags:\n        - me\n      summary: Get my weather\n      operationId: getMyWeather\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Weather'\n        '404':\n          description: Round not found\n      security:\n        - apiToken: []\n  /weather-upload:\n    post:\n      tags:\n        - Wet-er\n      operationId: weatherUpload\n      summary: Upload new weather\n      description: Upload new weather (ie in case it's summer and you, a normal person, prefer winter)\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/WeatherUpload'\n      responses:\n        '201':\n          description: successful operation\nservers:\n  - url: https://samples.openweathermap.org/data/2.5\n  - url: https://api.example.com\n  - url: https://api.example.com:8443/v1/reports\n  - url: http://localhost:3025/v1\n  - url: http://10.0.81.36/v1\n  - url: ws://api.example.com/v1\n  - url: wss://api.example.com/v1\n  - url: /v1/reports\n  - url: /\n  - url: //api.example.com\ncomponents:\n  parameters:\n    pathId:\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    queryAppId:\n      in: query\n      name: appid\n      required: true\n      description: |\n        Grab a free API key from here: https://openweathermap.org/price\n      schema:\n        type: string\n    queryCountry:\n      in: query\n      name: q\n      required: false\n      description: \u003e\n        q city name and country code divided by comma, use ISO 3166 country\n        codes. for example: q=London,uk or just q=London\n      schema:\n        type: string\n    queryId:\n      in: query\n      name: id\n      required: false\n      description: \u003e\n        City ID based on city.list.json.gz can be downloaded here\n        http://bulk.openweathermap.org/sample/\n      schema:\n        type: number\n    queryLat:\n      in: query\n      name: lat\n      required: false\n      description: |\n        Needs to be paired with lon\n      schema:\n        type: number\n    queryLon:\n      in: query\n      name: lon\n      required: false\n      description: |\n        Needs to be paired with lat\n      schema:\n        type: number\n    headerSearchId:\n      in: header\n      name: Search-Id\n      description: Unique search id\n      example: 569eecd9-9962-4aed-a0f0-30476c6a82ed\n      schema:\n        type: string\n        pattern: ^Bearer .+$\n  securitySchemes:\n    jwtToken:\n      type: apiKey\n      name: Authorization\n      in: header\n    apiKeyAdmin:\n      type: apiKey\n      name: x-api-key\n      in: header\n    apiToken:\n      type: http\n      scheme: bearer\n    basic:\n      type: http\n      scheme: basic\n  schemas:\n    AdditionalProps:\n      type: object\n      additionalProperties:\n        type: string\n    ArrayProps:\n      type: array\n      items:\n        type: string\n    Coord:\n      type: object\n      properties:\n        lon:\n          type: number\n        lat:\n          type: number\n    JwtAccess:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n    WeatherFull:\n      allOf:\n        - $ref: '#/components/schemas/Weather'\n        - type: object\n          required:\n            - name\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n    Weather:\n      type: object\n      required:\n        - coord\n      properties:\n        coord:\n          $ref: '#/components/schemas/Coord'\n        weather:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: number\n              main:\n                type: string\n              description:\n                type: string\n              icon:\n                type: string\n        base:\n          type: string\n        main:\n          type: object\n          properties:\n            temp:\n              type: number\n            pressure:\n              type: number\n            humidity:\n              type: number\n            temp_min:\n              type: number\n            temp_max:\n              type: number\n            sea_level:\n              type: number\n            grnd_level:\n              type: number\n        wind:\n          type: object\n          properties:\n            speed:\n              type: number\n            deg:\n              type: number\n            clouds:\n              type: object\n              properties:\n                all:\n                  type: number\n        dt:\n          type: number\n        sys:\n          type: object\n          properties:\n            message:\n              type: number\n            country:\n              type: string\n            sunrise:\n              type: number\n            sunset:\n              type: number\n        id:\n          type: number\n        name:\n          type: string\n        cod:\n          type: number\n    WeatherUpload:\n      type: object\n      properties:\n        rain:\n          type: boolean\n        pdfAboutHowMuchBetterWinterIs:\n          type: string\n          format: binary\n        startDate:\n          type: string\n          format: date\n",
			"canonicalURL": "/github.com/acr-lfr/generate-it@916ffeff7e0ec1ba7b347ba7df8da9de843048ee/-/blob/test_openapi3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/acr-lfr/generate-it/blob/916ffeff7e0ec1ba7b347ba7df8da9de843048ee/test_openapi3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/weather/{id}\": get: responses: code 200: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: schema type mismatch: string and number"
}