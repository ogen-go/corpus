{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator"
		},
		"file": {
			"name": "z_complex_self_made_example.yml",
			"size": 0,
			"path": ".circleci/specifications/z_complex_self_made_example.yml",
			"byteSize": 8907,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: dev-platform@stripe.com\n    name: Stripe Dev Platform Team\n    url: https://stripe.com\n  description: The Stripe REST API. Please see https://stripe.com/docs/api for more\n    details.\n  termsOfService: https://stripe.com/us/terms/\n  title: Stripe API\n  version: 2020-03-02\n  x-stripeSpecFilename: spec3\nservers:\n- url: https://api.stripe.com/\nsecurity:\n- basicAuth: []\n- bearerAuth: []\npaths:\n  /pets:\n    patch:\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                age:\n                  type: integer\n                nickname:\n                  type: string\n              required:\n                - age\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/Cat'\n                - $ref: '#/components/schemas/Dog'\n                - $ref: '#/components/schemas/CoverType'\n      responses:\n        '200':\n          description: Updated\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      parameters:\n        - $ref: '#/components/parameters/PetParameters'\n      responses:\n        default:\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dog\"\n  /pet/noparam:\n    get:\n      description: Operation with no parameters\n      operationId: noParam\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dog\"\n  /pet/singleparam:\n    get:\n      description: Operation with a single parameter\n      operationId: singleParam\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n          enum:\n          - available\n          - pending\n          - sold\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dog\"\n  /pet/multiparam/{status}:\n    get:\n      description: Operation with multiple parameters\n      operationId: multiParam\n      parameters:\n      - name: status\n        in: query\n        description: Status in query\n        required: true\n        schema:\n          type: string\n          enum:\n          - available\n          - pending\n          - sold\n      - name: status\n        in: path\n        description: Status in path\n        required: true\n        schema:\n          type: integer\n          enum:\n          - 1\n          - 3\n          - 5\n      - name: filter\n        in: query\n        description: Filter the entries?\n        schema:\n          type: boolean\n      - name: referenceParameter\n        in: query\n        required: true\n        schema:\n          $ref: '#/components/schemas/Cat'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dog\"\ncomponents:\n  schemas:\n    PetByAge:\n      type: object\n      properties:\n        first_relative:\n          allOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/PetByType'\n            - type: string\n        another_relative:\n          oneOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/PetByType'\n            - type: string\n            - type: string\n              enum:\n                - ''\n            - type: string\n              enum:\n                - test\n            - type: array\n              items:\n                type: string\n            - type: object\n              properties:\n                pet_type:\n                  type: string\n                hunts:\n                  type: boolean\n        relative:\n          anyOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/PetByType'\n            - type: string\n        age:\n          type: integer\n        nickname:\n          type: string\n      required:\n        - age\n\n    PetByType:\n      type: object\n      properties:\n        pet_type:\n          type: string\n          enum: [Cat, Dog]\n        hunts:\n          type: boolean\n      required:\n        - pet_type\n    Dog:\n      type: object\n      properties:\n        integer:\n          type: integer\n        int32:\n          type: integer\n          format: int32\n        int64:\n          type: integer\n          format: int64\n        number:\n          type: number\n        float:\n          type: number\n          format: float\n        double:\n          type: number\n          format: double\n        strDateTime:\n          type: string\n          format: date-time\n        strDate:\n          type: string\n          format: date\n        str:\n          type: string\n          maxLength: 244\n          minLength: 100\n        byte:\n          type: string\n          format: byte\n        binary:\n          type: string\n          format: binary\n        tags:\n          type: array\n          items:\n            type: string\n        bark:\n          type: boolean\n        pet_type:\n          not:\n            type: integer\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n        secondFather:\n          schema:\n            oneOf:\n             - $ref: '#/components/schemas/Cat'\n             - $ref: '#/components/schemas/Dog'\n        father:\n          schema:\n            oneOf:\n             - $ref: '#/components/schemas/Cat'\n             - $ref: '#/components/schemas/Dog'\n             - type: string\n               nullable: true\n               maxLength: 255\n    Cat:\n      type: object\n      properties:\n        another_relative:\n          oneOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/PetByType'\n            - type: string\n        relative:\n          anyOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/PetByType'\n            - type: string\n        hunts:\n          type: boolean\n        age:\n          type: integer\n    Mischling:\n      allOf: # Combines the main `Pet` schema with `Cat`-specific properties\n        - $ref: '#/components/schemas/Dog'\n        - $ref: '#/components/schemas/PetByAge'\n        - $ref: '#/components/schemas/Test2'\n        - type: object\n          # all other properties specific to a `Cat`\n          properties:\n            huntssecond:\n              type: boolean\n            ageThird:\n              type: integer\n    Test:\n      type: string\n    Test2:\n      type: array\n      items:\n        type: string\n    Test3:\n      description: No properties\n    Test4:\n      type: array\n      items:\n        $ref: '#/components/schemas/Test2'\n    Test5:\n      type: array\n      items:\n        $ref: '#/components/schemas/Dog'\n    Test6:\n      type: string\n      enum: [\"hello\", \"there\"]\n    Test7:\n      type: array\n      items:\n        type: object\n        properties:\n          prop1:\n            type: integer\n          prop2:\n            type: string\n    Test8:\n      nullable: true\n      type: object\n      required:\n        - prop1\n        - prop3\n      properties:\n        prop1:\n          nullable: true\n          type: integer\n        prop2:\n          nullable: true\n          type: string\n        prop3:\n          nullable: true\n          type: array\n          items:\n            nullable: true\n            type: string\n    CoverType:\n      type: object\n      properties:\n        cover:\n          oneOf:\n            - $ref: '#/components/schemas/PetByAge'\n            - $ref: '#/components/schemas/Mischling'\n            - $ref: '#/components/schemas/Test'\n            - $ref: '#/components/schemas/Test2'\n            - $ref: '#/components/schemas/Test3'\n            - $ref: '#/components/schemas/Test4'\n            - $ref: '#/components/schemas/Test5'\n            - $ref: '#/components/schemas/Test6'\n            - $ref: '#/components/schemas/Test7'\n            - $ref: '#/components/schemas/Test8'\n  parameters:\n    PetParameters:\n      name: petId\n      in: path\n      required: true\n      description: The id of the pet to retrieve\n      schema:\n        type: string\n  securitySchemes:\n    basicAuth:\n      description: 'Basic HTTP authentication. Allowed headers-- Authorization: Basic\n        \u003capi_key\u003e | Authorization: Basic \u003cbase64 hash of `api_key:`\u003e'\n      scheme: basic\n      type: http\n    bearerAuth:\n      bearerFormat: auth-scheme\n      description: 'Bearer HTTP authentication. Allowed headers-- Authorization: Bearer\n        \u003capi_key\u003e'\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "buildIR: make ir: path \"/pet/multiparam/{status}\": get: parameters: fail: \"status\": save schema types: save inlined type: schema name conflict: \"MultiParamStatus\"",
	"NotImplemented": [
		"complex form schema"
	]
}