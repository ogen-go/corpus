{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "azure.com-datalake-store-filesystem-2015-10-01-preview-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/azure.com-datalake-store-filesystem-2015-10-01-preview-swagger.yaml",
			"byteSize": 52461,
			"content": "openapi: 3.0.0\ninfo:\n  description: Creates an Azure Data Lake Store filesystem client.\n  title: DataLakeStoreFileSystemManagementClient\n  version: 2015-10-01-preview\n  x-apisguru-categories:\n    - cloud\n  x-logo:\n    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/datalake-store/data-plane/Microsoft.DataLakeStore/preview/2015-10-01-preview/filesystem.json\n      version: \"2.0\"\n  x-preferred: false\n  x-providerName: azure.com\n  x-serviceName: datalake-store-filesystem\n  x-tags:\n    - Azure\n    - Microsoft\npaths:\n  \"/WebHdfsExt/{filePath}\":\n    post:\n      description: \"Appends to the specified file. This method supports multiple concurrent\n        appends to the file. NOTE: ConcurrentAppend and normal (serial) Append\n        CANNOT be used interchangeably; once a file has been appended to using\n        either of these append options, it can only be appended to using that\n        append option. ConcurrentAppend DOES NOT guarantee order and can result\n        in duplicated data landing in the target file. In order to close a file\n        after using ConcurrentAppend, call the Flush method.\"\n      operationId: FileSystem_ConcurrentAppend\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file to which to\n            append using concurrent append.\n          in: path\n          name: filePath\n          required: true\n          schema:\n            type: string\n        - description: Indicates the concurrent append call should create the file if it\n            doesn't exist or just open the existing file for append\n          in: query\n          name: appendMode\n          required: false\n          x-ms-enum:\n            modelAsString: false\n            name: AppendModeType\n          schema:\n            type: string\n            enum:\n              - autocreate\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - CONCURRENTAPPEND\n        - description: Indicates the data being sent to the server is being streamed in\n            chunks.\n          in: header\n          name: Transfer-Encoding\n          required: true\n          schema:\n            type: string\n            enum:\n              - chunked\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      requestBody:\n        $ref: \"#/components/requestBodies/FileSystem_ConcurrentAppendStreamcontents\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n    put:\n      description: Sets or removes the expiration time on the specified file. This\n        operation can only be executed against files. Folders are not supported.\n      operationId: FileSystem_SetFileExpiry\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file on which to\n            set or remove the expiration time.\n          in: path\n          name: filePath\n          required: true\n          schema:\n            type: string\n        - description: \"Indicates the type of expiration to use for the file: 1.\n            NeverExpire: ExpireTime is ignored. 2. RelativeToNow: ExpireTime is\n            an integer in milliseconds representing the expiration date relative\n            to when file expiration is updated. 3. RelativeToCreationDate:\n            ExpireTime is an integer in milliseconds representing the expiration\n            date relative to file creation. 4. Absolute: ExpireTime is an\n            integer in milliseconds, as a Unix timestamp relative to 1/1/1970\n            00:00:00.\"\n          in: query\n          name: expiryOption\n          required: true\n          x-ms-enum:\n            modelAsString: false\n            name: ExpiryOptionType\n          schema:\n            type: string\n            enum:\n              - NeverExpire\n              - RelativeToNow\n              - RelativeToCreationDate\n              - Absolute\n        - description: The time that the file will expire, corresponding to the\n            ExpiryOption that was set.\n          in: query\n          name: expireTime\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - SETEXPIRY\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: Successfully set the expiration time on the specified file.\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{path}\":\n    get:\n      description: Checks if the specified access is available at the given path.\n      operationId: FileSystem_CheckAccess\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory for which to check access.\n          in: path\n          name: path\n          required: true\n          schema:\n            type: string\n        - description: File system operation read/write/execute in string form, matching\n            regex pattern '[rwx-]{3}'\n          in: query\n          name: fsaction\n          required: false\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - CHECKACCESS\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n    put:\n      description: Creates a directory.\n      operationId: FileSystem_Mkdirs\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the directory to\n            create.\n          in: path\n          name: path\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MKDIRS\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\nx-ms-paths:\n  \"/webhdfs/v1/{aclFilePath}?op=REMOVEACL\":\n    get:\n      description: Gets Access Control List (ACL) entries for the specified file or\n        directory.\n      operationId: FileSystem_GetAclStatus\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory for which to get the ACL.\n          in: path\n          name: aclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MSGETACLSTATUS\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AclStatusResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AclStatusResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AclStatusResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n    put:\n      description: Removes the existing Access Control List (ACL) of the specified file or\n        directory.\n      operationId: FileSystem_RemoveAcl\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory with the ACL being removed.\n          in: path\n          name: aclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - REMOVEACL\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: Successfully removed the Access Control List on the specified file\n            or directory.\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{defaultAclFilePath}?op=REMOVEDEFAULTACL\":\n    put:\n      description: Removes the existing Default Access Control List (ACL) of the specified\n        directory.\n      operationId: FileSystem_RemoveDefaultAcl\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the directory with\n            the default ACL being removed.\n          in: path\n          name: defaultAclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - REMOVEDEFAULTACL\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: Successfully Removed the Default Access Control List on the\n            specified directory.\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{destinationPath}?op=CONCAT\":\n    post:\n      deprecated: true\n      description: Concatenates the list of source files into the destination file,\n        removing all source files upon success.  This operation has been\n        deprecated, please use operation FileSystem_MsConcat instead.\n      operationId: FileSystem_Concat\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the destination file\n            resulting from the concatenation.\n          in: path\n          name: destinationPath\n          required: true\n          schema:\n            type: string\n        - description: A list of comma separated Data Lake Store paths (starting with '/')\n            of the files to concatenate, in the order in which they should be\n            concatenated.\n          in: query\n          name: sources\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - CONCAT\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{directFilePath}?op=APPEND\":\n    get:\n      description: Opens and reads from the specified file.\n      operationId: FileSystem_Open\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file to open.\n          in: path\n          name: directFilePath\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: length\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - in: query\n          name: offset\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - OPEN\n        - description: The constant value for the operation.\n          in: query\n          name: read\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"true\"\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n            text/json:\n              schema:\n                type: string\n                format: binary\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n    post:\n      description: \"Appends to the specified file. This method does not support multiple\n        concurrent appends to the file. NOTE: Concurrent append and normal\n        (serial) append CANNOT be used interchangeably. Once a file has been\n        appended to using either append option, it can only be appended to using\n        that append option. Use the ConcurrentAppend option if you would like\n        support for concurrent appends.\"\n      operationId: FileSystem_Append\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file to which to\n            append.\n          in: path\n          name: directFilePath\n          required: true\n          schema:\n            type: string\n        - description: The optional offset in the stream to begin the append operation.\n            Default is to append at the end of the stream.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - APPEND\n        - description: The constant value for the operation.\n          in: query\n          name: append\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"true\"\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      requestBody:\n        $ref: \"#/components/requestBodies/FileSystem_ConcurrentAppendStreamcontents\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n    put:\n      description: Creates a file with optionally specified content.\n      operationId: FileSystem_Create\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file to create.\n          in: path\n          name: directFilePath\n          required: true\n          schema:\n            type: string\n        - description: The indication of if the file should be overwritten.\n          in: query\n          name: overwrite\n          required: false\n          schema:\n            type: boolean\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - CREATE\n        - description: The constant value for the operation.\n          in: query\n          name: write\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"true\"\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: file\n              type: object\n        description: The file contents to include when creating the file. This parameter is\n          optional, resulting in an empty file if not specified.  The maximum\n          content size is 4MB.  For content larger than 4MB you must append the\n          content in 4MB chunks.\n      responses:\n        \"201\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{filePath}?op=DELETE\":\n    delete:\n      description: Deletes the requested file or directory, optionally recursively.\n      operationId: FileSystem_Delete\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory to delete.\n          in: path\n          name: filePath\n          required: true\n          schema:\n            type: string\n        - description: The optional switch indicating if the delete should be recursive\n          in: query\n          name: recursive\n          required: false\n          schema:\n            type: boolean\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - DELETE\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{flushFilePath}?op=APPEND;append=true;flush=true\":\n    post:\n      description: Flushes the specified file to the store. This forces an update to the\n        metadata of the file (returned from GetFileStatus), and is required by\n        ConcurrentAppend once the file is done to populate finalized metadata.\n      operationId: FileSystem_Flush\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file to which to\n            flush.\n          in: path\n          name: flushFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - APPEND\n        - description: The constant value that avoids redirects.\n          in: query\n          name: append\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"true\"\n        - description: The constant value initiating the flush.\n          in: query\n          name: flush\n          required: true\n          schema:\n            type: string\n            enum:\n              - \"true\"\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: Successfully flushed the specified file.\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{getFilePath}?op=MSGETFILESTATUS\":\n    get:\n      description: Get the file status object specified by the file path.\n      operationId: FileSystem_GetFileStatus\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory for which to retrieve the status.\n          in: path\n          name: getFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MSGETFILESTATUS\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileStatusResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/FileStatusResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileStatusResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{listFilePath}?op=MSLISTSTATUS\":\n    get:\n      description: Get the list of file status objects specified by the file path, with\n        optional pagination parameters\n      operationId: FileSystem_ListFileStatus\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the directory to\n            list.\n          in: path\n          name: listFilePath\n          required: true\n          schema:\n            type: string\n        - description: Gets or sets the number of items to return. Optional.\n          in: query\n          name: listSize\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Gets or sets the item or lexicographical index after which to begin\n            returning results. For example, a file list of 'a','b','d' and\n            listAfter='b' will return 'd', and a listAfter='c' will also return\n            'd'. Optional.\n          in: query\n          name: listAfter\n          required: false\n          schema:\n            type: string\n        - description: Gets or sets the item or lexicographical index before which to begin\n            returning results. For example, a file list of 'a','b','d' and\n            listBefore='d' will return 'a','b', and a listBefore='c' will also\n            return 'a','b'. Optional.\n          in: query\n          name: listBefore\n          required: false\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MSLISTSTATUS\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileStatusesResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/FileStatusesResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileStatusesResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{modifyAclFilePath}?op=MODIFYACLENTRIES\":\n    put:\n      description: Modifies existing Access Control List (ACL) entries on a file or folder.\n      operationId: FileSystem_ModifyAclEntries\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory with the ACL being modified.\n          in: path\n          name: modifyAclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The ACL specification included in ACL modification operations in the\n            format '[default:]user|group|other::r|-w|-x|-'\n          in: query\n          name: aclspec\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MODIFYACLENTRIES\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{msConcatDestinationPath}?op=MSCONCAT\":\n    post:\n      description: Concatenates the list of source files into the destination file,\n        deleting all source files upon success. This method accepts more source\n        file paths than the Concat method. This method and the parameters it\n        accepts are subject to change for usability in an upcoming version.\n      operationId: FileSystem_MsConcat\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the destination file\n            resulting from the concatenation.\n          in: path\n          name: msConcatDestinationPath\n          required: true\n          schema:\n            type: string\n        - description: \"Indicates that as an optimization instead of deleting each\n            individual source stream, delete the source stream folder if all\n            streams are in the same folder instead. This results in a\n            substantial performance improvement when the only streams in the\n            folder are part of the concatenation operation. WARNING: This\n            includes the deletion of any other files that are not source files.\n            Only set this to true when source files are the only files in the\n            source directory.\"\n          in: query\n          name: deleteSourceDirectory\n          required: false\n          schema:\n            type: boolean\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - MSCONCAT\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: file\n              type: object\n        description: \"A list of Data Lake Store paths (starting with '/') of the source\n          files. Must be in the format: sources=\u003ccomma separated list\u003e\"\n        required: true\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{removeAclFilePath}?op=REMOVEACLENTRIES\":\n    put:\n      description: Removes existing Access Control List (ACL) entries for a file or folder.\n      operationId: FileSystem_RemoveAclEntries\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory with the ACL being removed.\n          in: path\n          name: removeAclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The ACL spec included in ACL removal operations in the format\n            '[default:]user|group|other'\n          in: query\n          name: aclspec\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - REMOVEACLENTRIES\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{renameFilePath}?op=RENAME\":\n    put:\n      description: Rename a file or directory.\n      operationId: FileSystem_Rename\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory to move/rename.\n          in: path\n          name: renameFilePath\n          required: true\n          schema:\n            type: string\n        - description: The path to move/rename the file or folder to\n          in: query\n          name: destination\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - RENAME\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileOperationResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{setAclFilePath}?op=SETACL\":\n    put:\n      description: Sets the Access Control List (ACL) for a file or folder.\n      operationId: FileSystem_SetAcl\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory on which to set the ACL.\n          in: path\n          name: setAclFilePath\n          required: true\n          schema:\n            type: string\n        - description: The ACL spec included in ACL creation operations in the format\n            '[default:]user|group|other::r|-w|-x|-'\n          in: query\n          name: aclspec\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - SETACL\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{setOwnerFilePath}?op=SETOWNER\":\n    put:\n      description: Sets the owner of a file or directory.\n      operationId: FileSystem_SetOwner\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory for which to set the owner.\n          in: path\n          name: setOwnerFilePath\n          required: true\n          schema:\n            type: string\n        - description: The AAD Object ID of the user owner of the file or directory. If\n            empty, the property will remain unchanged.\n          in: query\n          name: owner\n          required: false\n          schema:\n            type: string\n        - description: The AAD Object ID of the group owner of the file or directory. If\n            empty, the property will remain unchanged.\n          in: query\n          name: group\n          required: false\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - SETOWNER\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/v1/{setPermissionFilePath}?op=SETPERMISSION\":\n    put:\n      description: Sets the permission of the file or folder.\n      operationId: FileSystem_SetPermission\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file or\n            directory for which to set the permission.\n          in: path\n          name: setPermissionFilePath\n          required: true\n          schema:\n            type: string\n        - description: A string representation of the permission (i.e 'rwx'). If empty,\n            this property remains unchanged.\n          in: query\n          name: permission\n          required: false\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - SETPERMISSION\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\n  \"/webhdfs/va/{getContentSummaryFilePath}?op=GETCONTENTSUMMARY\":\n    get:\n      description: Gets the file content summary object specified by the file path.\n      operationId: FileSystem_GetContentSummary\n      parameters:\n        - description: The Data Lake Store path (starting with '/') of the file for which\n            to retrieve the summary.\n          in: path\n          name: getContentSummaryFilePath\n          required: true\n          schema:\n            type: string\n        - description: The constant value for the operation.\n          in: query\n          name: op\n          required: true\n          schema:\n            type: string\n            enum:\n              - GETCONTENTSUMMARY\n        - $ref: \"#/components/parameters/ApiVersionParameter\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentSummaryResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/ContentSummaryResult\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/ContentSummaryResult\"\n        default:\n          description: An unexpected error from the server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/AdlsError\"\n      tags:\n        - FileSystem\nservers:\n  - url: https://azure.local\n  - url: https://{accountName}.{adlsFileSystemDnsSuffix}\n    variables:\n      accountName:\n        description: The Azure Data Lake Store account to execute filesystem operations on.\n        x-ms-skip-url-encoding: true\n        default: \"\"\n      adlsFileSystemDnsSuffix:\n        default: azuredatalakestore.net\n        description: Gets the URI used as the base for all cloud service requests.\n        x-ms-parameter-location: client\n        x-ms-skip-url-encoding: true\ncomponents:\n  parameters:\n    ApiVersionParameter:\n      description: Client Api Version.\n      in: query\n      name: api-version\n      required: true\n      schema:\n        type: string\n    adlsFilesystemDnsSuffixInPath:\n      description: Gets the URI used as the base for all cloud service requests.\n      in: path\n      name: adlsFileSystemDnsSuffix\n      required: true\n      x-ms-parameter-location: client\n      x-ms-skip-url-encoding: true\n      schema:\n        type: string\n        default: azuredatalakestore.net\n  requestBodies:\n    FileSystem_ConcurrentAppendStreamcontents:\n      content:\n        application/octet-stream:\n          schema:\n            format: file\n            type: object\n      description: The file contents to include when appending to the file.  The maximum\n        content size is 4MB.  For content larger than 4MB you must append the\n        content in 4MB chunks.\n      required: true\n  schemas:\n    AclStatus:\n      description: Data Lake Store file or directory Access Control List information.\n      properties:\n        entries:\n          description: the list of ACLSpec entries on a file or directory.\n          items:\n            type: string\n          type: array\n        group:\n          description: the group owner, an AAD Object ID.\n          type: string\n        owner:\n          description: the user owner, an AAD Object ID.\n          type: string\n        permission:\n          description: The octal representation of the unnamed user, mask and other\n            permissions.\n          format: int32\n          type: integer\n        stickyBit:\n          description: the indicator of whether the sticky bit is on or off.\n          readOnly: true\n          type: boolean\n    AclStatusResult:\n      description: Data Lake Store file or directory Access Control List information.\n      properties:\n        AclStatus:\n          $ref: \"#/components/schemas/AclStatus\"\n    AdlsAccessControlException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating that access is denied due to\n        insufficient permissions. Thrown when a 403 error response code is\n        returned (forbidden).\n      x-ms-discriminator-value: AccessControlException\n    AdlsBadOffsetException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating the append or read is from a bad\n        offset. Thrown when a 400 error response code is returned for append and\n        open operations (Bad request).\n      x-ms-discriminator-value: BadOffsetException\n    AdlsError:\n      description: Data Lake Store filesystem error containing a specific WebHDFS exception.\n      properties:\n        RemoteException:\n          $ref: \"#/components/schemas/AdlsRemoteException\"\n    AdlsFileAlreadyExistsException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating the file or folder already exists.\n        Thrown when a 403 error response code is returned (forbidden).\n      x-ms-discriminator-value: FileAlreadyExistsException\n    AdlsFileNotFoundException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating the file or folder could not be\n        found. Thrown when a 404 error response code is returned (not found).\n      x-ms-discriminator-value: FileNotFoundException\n    AdlsIOException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating there was an IO (read or write)\n        error. Thrown when a 403 error response code is returned (forbidden).\n      x-ms-discriminator-value: IOException\n    AdlsIllegalArgumentException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating that one more arguments is\n        incorrect. Thrown when a 400 error response code is returned (bad\n        request).\n      x-ms-discriminator-value: IllegalArgumentException\n    AdlsRemoteException:\n      description: Data Lake Store filesystem exception based on the WebHDFS definition for\n        RemoteExceptions.\n      discriminator:\n        propertyName: exception\n      properties:\n        exception:\n          description: the class name of the exception thrown, such as\n            'IllegalArgumentException'.\n          readOnly: true\n          type: string\n        javaClassName:\n          description: the full class package name for the exception thrown, such as\n            'java.lang.IllegalArgumentException'.\n          readOnly: true\n          type: string\n        message:\n          description: the message associated with the exception that was thrown, such as\n            'Invalid value for webhdfs parameter \"permission\":...'.\n          readOnly: true\n          type: string\n      required:\n        - exception\n    AdlsRuntimeException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown when an unexpected error occurs during an\n        operation. Thrown when a 500 error response code is returned (Internal\n        server error).\n      x-ms-discriminator-value: RuntimeException\n    AdlsSecurityException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating that access is denied. Thrown when\n        a 401 error response code is returned (Unauthorized).\n      x-ms-discriminator-value: SecurityException\n    AdlsUnsupportedOperationException:\n      allOf:\n        - $ref: \"#/components/schemas/AdlsRemoteException\"\n      description: A WebHDFS exception thrown indicating that the requested operation is\n        not supported. Thrown when a 400 error response code is returned (bad\n        request).\n      x-ms-discriminator-value: UnsupportedOperationException\n    ContentSummary:\n      description: Data Lake Store content summary information\n      properties:\n        directoryCount:\n          description: the number of directories.\n          format: int64\n          readOnly: true\n          type: integer\n        fileCount:\n          description: the number of files.\n          format: int64\n          readOnly: true\n          type: integer\n        length:\n          description: the number of bytes used by the content.\n          format: int64\n          readOnly: true\n          type: integer\n        spaceConsumed:\n          description: the disk space consumed by the content.\n          format: int64\n          readOnly: true\n          type: integer\n    ContentSummaryResult:\n      description: Data Lake Store filesystem content summary information response.\n      properties:\n        ContentSummary:\n          $ref: \"#/components/schemas/ContentSummary\"\n    FileOperationResult:\n      description: The result of the request or operation.\n      properties:\n        boolean:\n          description: the result of the operation or request.\n          readOnly: true\n          type: boolean\n          x-ms-client-name: operationResult\n    FileStatusProperties:\n      description: Data Lake Store file or directory information.\n      properties:\n        accessTime:\n          description: the last access time as ticks since the epoch.\n          format: int64\n          readOnly: true\n          type: integer\n        blockSize:\n          description: the block size for the file.\n          format: int64\n          readOnly: true\n          type: integer\n        childrenNum:\n          description: the number of children in the directory.\n          format: int64\n          readOnly: true\n          type: integer\n        expirationTime:\n          description: Gets the expiration time, if any, as ticks since the epoch. If this\n            is set to 0 or DateTime.MaxValue there is no expiration.\n          format: int64\n          readOnly: true\n          type: integer\n        group:\n          description: the group owner.\n          readOnly: true\n          type: string\n        length:\n          description: the number of bytes in a file.\n          format: int64\n          readOnly: true\n          type: integer\n        modificationTime:\n          description: the modification time as ticks since the epoch.\n          format: int64\n          readOnly: true\n          type: integer\n        owner:\n          description: the user who is the owner.\n          readOnly: true\n          type: string\n        pathSuffix:\n          description: the path suffix.\n          readOnly: true\n          type: string\n        permission:\n          description: the permission represented as an string.\n          readOnly: true\n          type: string\n        type:\n          description: the type of the path object.\n          enum:\n            - FILE\n            - DIRECTORY\n          readOnly: true\n          type: string\n          x-ms-enum:\n            modelAsString: false\n            name: FileType\n    FileStatusResult:\n      description: Data Lake Store filesystem file status information response.\n      properties:\n        FileStatus:\n          $ref: \"#/components/schemas/FileStatusProperties\"\n    FileStatuses:\n      description: Data Lake Store file status list information.\n      properties:\n        FileStatus:\n          description: the object containing the list of properties of the files.\n          items:\n            $ref: \"#/components/schemas/FileStatusProperties\"\n          readOnly: true\n          type: array\n    FileStatusesResult:\n      description: Data Lake Store filesystem file status list information response.\n      properties:\n        FileStatuses:\n          $ref: \"#/components/schemas/FileStatuses\"\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/azure.com-datalake-store-filesystem-2015-10-01-preview-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/azure.com-datalake-store-filesystem-2015-10-01-preview-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/WebHdfsExt/{filePath}\": put: responses: default: contents: application/octet-stream: octet stream with \"object\" schema not supported"
}