{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/thm-mni-ii/feedbacksystem"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 62590,
			"content": "openapi: 3.0.0\ninfo:\n  title: Feedbacksystem\n  description: Feedbacksystem API\n  version: 1.0.0\n  contact:\n    email: Andrej.Sajenko@mni.thm.de\n  license:\n    name: CC BY-NC-SA 4.0\n    url: https://creativecommons.org/licenses/by-nc-sa/4.0/\ntags:\n  - name: Login\n    description: Login api\n  - name: User\n    description: The user api\n  - name: Course\n    description: The course api\n  - name: Course Registration\n    description: The course registration api\n  - name: Task\n    description: The task api\n  - name: Course evaluation\n    description: Course evaluation api\n  - name: Course Results\n    description: Course Results api\n  - name: Checker Configuration\n    description: Checker configuration api\n  - name: Submission\n    description: Task submission api\n  - name: Legal\n    description: Legally obligatory documents and checks\n  - name: Result\n    description: Incomming checker results\n  - name: Analysis\n    description: Routes to query data for analysis purposes\npaths:\n  /login/cas:\n    post:\n      tags:\n        - Login\n      summary: Login into system via the cas protocol\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n  /login/ldap:\n    post:\n      tags:\n        - Login\n      summary: Login into system via username and password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - username\n                - password\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n  /login/local:\n    post:\n      tags:\n        - Login\n      summary: Login into system via username and password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - username\n                - password\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n  /users:\n    get:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Get user list\n      description: \"\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n    post:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Create a new user\n      description: \"\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: User object to create\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Invalid Format\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"409\":\n          description: Already Existing\n  \"/users/{uid}\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Find user by ID\n      description: Returns a single user\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Delete user by ID\n      description: \"\"\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n  \"/users/{uid}/passwd\":\n    put:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Change password of a local user\n      description: \"\"\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - passwd\n                - passwdRepeat\n              properties:\n                passwd:\n                  type: string\n                passwdRepeat:\n                  type: string\n        description: The new password\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Invalid Format\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/users/{uid}/global-role\":\n    put:\n      security:\n        - JWT: []\n      tags:\n        - User\n      summary: Change global role of a user\n      description: \"\"\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - roleName\n              properties:\n                roleName:\n                  type: string\n        description: The global role id\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Invalid Format\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/users/{uid}/courses\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course Registration\n      summary: Get all registered courses\n      description: \"\"\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Course\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/{cid}/participants\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course Registration\n      summary: Get all participants of a course\n      description: \"\"\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Participant\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/users/{uid}/courses/{cid}\":\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Course Registration\n      summary: Register a user into a course\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - roleName\n              properties:\n                roleName:\n                  type: string\n        description: \"Course role: either DOCENT, TUTOR, or STUDENT. Default is STUDENT\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Course Registration\n      summary: De-register a user from a course\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n  \"/courses/{cid}/deregisterrole\":\n    put:\n      security:\n        - JWT: [ ]\n      tags:\n        - Course Registration\n      summary: Deregister all users with a specific role\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - roleName\n              properties:\n                roleName:\n                  type: string\n        description: \"All users with the roleName role get deregistered from the course with uid\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/{cid}/deregisterall\":\n    get:\n      security:\n        - JWT: [ ]\n      tags:\n        - Course Registration\n      summary: Deregister all users except the current user from the course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  /courses:\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Get a list of all courses\n      description: \"\"\n      parameters:\n        - name: visible\n          in: query\n          description: Returns all courses that satisfy the visibility value [true, false]\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Course\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Create a new course\n      description: \"\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Course\"\n        description: Course object to create\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Course\"\n        \"400\":\n          description: Invalid Format\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n  \"/courses/{cid}\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Get a course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Course\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Update course\n      description: \"\"\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Course\"\n        description: Course object to update\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Invalid format\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Delete course by ID\n      description: \"\"\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n  \"/courses/{cid}/export\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course\n      summary: Get a Zip-Archive of the course\n      description: Get a Zip containing an archive of the course and tasks without user data\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/{cid}/tasks\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Get all tasks of a course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Task\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Create a new task for this course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/Task\"\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/{cid}/tasks/results\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Get all the result for the tasks\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/UserTaskResult\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/{cid}/tasks/{tid}\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Get a task by id\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Update an existing task for this course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        $ref: \"#/components/requestBodies/Task\"\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Delete a task by id\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n  \"/courses/{cid}/tasks/{tid}/result\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Task\n      summary: Gets the task result by id\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserTaskResult\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n  \"/courses/evaluation/formula/validate\":\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Validate a evaluation formula\n      requestBody:\n        required: true\n        content:\n          \"application/json\":\n            schema:\n              type: object\n              properties:\n                formula:\n                  type: string\n      responses:\n        \"200\":\n          description: Formula is valid\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  valid:\n                    type: boolean\n                    default: true\n                  message:\n                    type: string\n\n        \"400\":\n          description: Formula is invalid\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  valid:\n                    type: boolean\n                    default: false\n                  message:\n                    type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/evaluation/container\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Get all Course evaluation Containers\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Create a Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddEvaluationContainer'\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n\n  \"/courses/{cid}/evaluation/container/{ctid}\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Get a Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: ctid\n          in: path\n          description: Container id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Update a Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: ctid\n          in: path\n          description: Container id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddEvaluationContainer'\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Delete a Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: ctid\n          in: path\n          description: Container id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/evaluation/container/{ctid}/task/{tid}\":\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Add a Task to an Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: ctid\n          in: path\n          description: Container id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: Task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Course evaluation\n      summary: Delate a Task from an Course evaluation Container\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: ctid\n          in: path\n          description: Container id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: Task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationContainer'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n\n  \"/courses/{cid}/results\":\n    get:\n      security:\n        - JWT: [ ]\n      tags:\n        - Course Results\n      summary: Get the Results for a Course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/CourseResult'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n\n  \"/courses/{cid}/evaluation/results\":\n    get:\n      security:\n        - JWT: [ ]\n      tags:\n        - Course Results\n      summary: Get the Evaluation Results for a Course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/EvaluationResults'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n\n  \"/courses/{cid}/statistics/subtasks\":\n    get:\n      security:\n        - JWT: [ ]\n      tags:\n        - Course Statistics\n      summary: Get the Subtask statistic for a course\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/SubTaskStatistics'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/users/{uid}/courses/{cid}/tasks/{tid}/submissions\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Submission\n      summary: Get all submissions for a task\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - in: query\n          name: passed\n          description: Filters only the passed submissions\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"*/*\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Submission\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Submission\n      summary: Submit a solution for a task\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              format: binary\n        description: The solution for the task\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/users/{uid}/courses/{cid}/tasks/{tid}/submissions/{sid}/subresults\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Submission\n      summary: Get all subresults for a submission\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: sid\n          in: path\n          description: submission id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"*/*\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SubTaskResult\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/users/{uid}/courses/{cid}/tasks/{tid}/submissions/{sid}\":\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Submission\n      summary: Restart the submission process\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: sid\n          in: path\n          description: ID of submission\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Submission\n      summary: Get the current submission state\n      parameters:\n        - name: uid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: sid\n          in: path\n          description: ID of submission\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/tasks/{tid}/checker-configurations\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Get a list of configured checkers\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CheckerConfig\"\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    post:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Create a new checker configuration\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CheckerConfig\"\n\n      responses:\n        \"201\":\n          description: Created\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckerConfig\"\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/tasks/{tid}/checker-configurations/{ccid}\":\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Update an existing checker configuration\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: ID of checker configuration\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CheckerConfig'\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    delete:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Delete an existing checker configuration\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: ID of checker configuration\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/tasks/{tid}/checker-configurations/{ccid}/main-file\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Get a the main file of the configuration\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: configuration id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            text/*:\n              schema:\n                type: string\n                format: binary\n            application/*:\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Update / upload a new file\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: configuration id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        description: new file\n        content:\n          \"*/*\":\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/courses/{cid}/tasks/{tid}/checker-configurations/{ccid}/secondary-file\":\n    get:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Get a list of configured checkers\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: configuration id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            text/*:\n              schema:\n                type: string\n                format: binary\n            application/*:\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    put:\n      security:\n        - JWT: []\n      tags:\n        - Checker Configuration\n      summary: Update / upload a new file\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: task id\n          required: true\n          schema:\n            type: integer\n        - name: ccid\n          in: path\n          description: configuration id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        description: new file\n        content:\n          \"*/*\":\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  /legal/impressum:\n    get:\n      tags:\n        - Legal\n      summary: Returns the imprint\n      responses:\n        \"200\":\n          description: OK\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: binary\n  /legal/privacy-text:\n    get:\n      tags:\n        - Legal\n      summary: Returns the information how user data is treated in the system\n      responses:\n        \"200\":\n          description: OK\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: binary\n  \"/legal/termsofuse/{uid}\":\n    get:\n      tags:\n        - Legal\n      summary: Get the information if a user accepted the terms of usage\n      parameters:\n        - in: path\n          name: uid\n          required: true\n          description: User id\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            \"*/*\":\n              schema:\n                type: object\n                properties:\n                  accepted:\n                    type: boolean\n                    description: True if accepted, false otherwise\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n    put:\n      tags:\n        - Legal\n      summary: Accept the terms of usage\n      parameters:\n        - in: path\n          name: uid\n          required: true\n          description: User id\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/results/{sid}/{cid}\":\n    put:\n      tags:\n        - Result\n      summary: Incomming checker results\n      parameters:\n        - in: path\n          name: sid\n          required: true\n          description: Submission id\n          schema:\n            type: integer\n        - in: path\n          name: cid\n          required: true\n          description: Configuration id\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n  \"/analysis/courses/{cid}/results/{tid}\":\n    get:\n      security:\n        - JWT: [ ]\n      tags:\n        - Analysis\n      summary: Get anonymised results of a course from an task\n      parameters:\n        - name: cid\n          in: path\n          description: course id\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: Task id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Authorization:\n              description: Bearer\n              schema:\n                type: string\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/AnalysisCourseResult'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\nservers:\n  - url: https://feedback.mni.thm.de/api/v1\ncomponents:\n  requestBodies:\n    postCourses_cid_tasks_tid_checkerConfigurations:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              upfile:\n                description: The file to upload.\n                type: string\n                format: binary\n    Task:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Task\"\n      description: Task object to create\n      required: true\n  securitySchemes:\n    JWT:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: Bearer\n  schemas:\n    User:\n      type: object\n      required:\n        - username\n        - prename\n        - surname\n        - postname\n        - email\n        - password\n      properties:\n        id:\n          type: integer\n        prename:\n          type: string\n        surname:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n          description: Only for creation\n        username:\n          type: string\n        alias:\n          type: string\n        globalRole:\n          type: string\n          description: \"Either, ADMIN, MODERATOR, or USER. Default is USER\"\n    Course:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        visible:\n          type: boolean\n    Task:\n      type: object\n      required:\n        - name\n        - deadline\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        deadline:\n          type: string\n          description: ISO-8601 time as string\n        mediaType:\n          type: string\n          description: The media type for the submissions according to RFC 4288\n        mediaInformation:\n          description: Media type spezific Information\n          oneOf:\n            - $ref: '#/components/schemas/SpreadsheetInformationRequest'\n            - $ref: '#/components/schemas/SpreadsheetInformationResponse'\n    SpreadsheetInformationRequest:\n      type: object\n      properties:\n        idField:\n          type: string\n        inputFields:\n          type: string\n        outputFields:\n          type: string\n        pointFields:\n          type: string\n    SpreadsheetInformationResponse:\n      type: object\n      properties:\n        fields:\n          type: object\n          properties:\n            inputs:\n              type: array\n              items:\n                type: object\n            outputs:\n              type: array\n              items:\n                type: string\n    Submission:\n      type: object\n      required:\n        - submissionTime\n        - done\n        - id\n        - results\n      properties:\n        submissionTime:\n          type: integer\n          description: Unix time as long\n        done:\n          type: boolean\n          description: True if all checkers have checked the submissions\n        id:\n          type: integer\n          description: The submission id\n        results:\n          type: array\n          description: The check results of each configured checker, may be empty\n          items:\n            $ref: '#/components/schemas/CheckResult'\n    CheckResult:\n      type: object\n      required:\n        - exitCode\n        - resultText\n        - checkerType\n        - configurationId\n      properties:\n        exitCode:\n          type: integer\n          description: Exit code of the check result 0 is okay\n        resultText:\n          type: string\n          description: The output the check\n        checkerType:\n          type: string\n          description: The type of the checker that checked the submission\n        configurationId:\n          type: integer\n          description: The configuration id of the checker configuration\n        extInfo:\n          type: object\n          nullable: true\n          additionalProperties: true\n          description: Extended information of the check\n    CheckerConfig:\n      type: object\n      required:\n        - checkerType\n        - ord\n      properties:\n        id:\n          type: integer\n        checkerType:\n          type: string\n        mainFileUploaded:\n          type: boolean\n          description:  True if main file was provided\n        secondaryFileUploaded:\n          type: boolean\n          description: True if secondary file was provided\n        ord:\n          type: integer\n          description: Defines in which order the checker are executed\n    Participant:\n      type: object\n      properties:\n        user:\n          $ref: \"#/components/schemas/User\"\n        role:\n          type: string\n          description: Users course role name. Either DOCENT, TUTOR, or STUDENT.\n    JWTToken:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The users id\n        username:\n          type: string\n          description: The users username\n        globalRole:\n          type: string\n          description: The users global role id\n        courseRoles:\n          type: object\n          description: \"Associative array: course id -\u003e role id (Either, DOCENT, TUTOR, or STUDENT)\"\n          properties:\n            key:\n              type: integer\n              description: The course id\n            value:\n              type: integer\n              description: \"The course role \"\n    AddEvaluationContainer:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n        toPass:\n          type: integer\n          description: The number of tasks that need to be passed\n        bonusFormula:\n          type: string\n          description: The formula that defines when you get the bonus points of the container\n        hidePoints:\n          type: boolean\n    EvaluationContainer:\n      type: object\n      required:\n        - id\n        - tasks\n      properties:\n        id:\n          type: integer\n        tasks:\n          type: array\n          description: \"List of tasks\"\n          items:\n            $ref: \"#/components/schemas/Task\"\n        toPass:\n          type: integer\n          description: The number of tasks that need to be passed\n        bonusFormula:\n          type: string\n          description: The formula that defines when you get the bonus points of the container\n        hidePoints:\n          type: boolean\n    CourseResult:\n      type: array\n      items:\n        type: object\n        required:\n          - user\n          - passed\n          - reqPassed\n          - pointScore\n          - bonusScore\n          - results\n        properties:\n          user:\n            $ref: \"#/components/schemas/User\"\n          passed:\n            type: boolean\n          results:\n            type: object\n            required:\n              - task\n              - attempts\n              - passed\n            properties:\n              task:\n                $ref: \"#/components/schemas/Task\"\n              attempts:\n                type: integer\n              passed:\n                type: boolean\n    AnalysisCourseResult:\n      type: array\n      items:\n        type: object\n        required:\n          - submission\n          - passed\n          - resultText\n          - userId\n          - attempt\n        properties:\n          submission:\n            type: string\n            description: The submission of the user\n          passed:\n            type: boolean\n            description: Was the task passed?\n          resultText:\n            type: string\n            description: The result of the test\n          userId:\n            type: integer\n            description: An identification number for the user. However, this does not correspond to the correct userId, but is incremented during creation.\n          attempt:\n            type: integer\n            description: Attempt number\n    EvaluationResults:\n      type: array\n      items:\n        type: object\n        required:\n          - user\n          - bonusPoints\n          - passed\n          - results\n        properties:\n          user:\n            $ref: \"#/components/schemas/User\"\n          bonusPoints:\n            type: integer\n          passed:\n            type: boolean\n          results:\n            $ref: \"#/components/schemas/EvaluationContainerResults\"\n    EvaluationContainerResults:\n      type: array\n      items:\n        type: object\n        required:\n          - bonusPoints\n          - passed\n          - passedTasks\n          - container\n        properties:\n          bonusPoints:\n            type: integer\n          passed:\n            type: boolean\n          passedTasks:\n            type: integer\n          container:\n            $ref: \"#/components/schemas/EvaluationContainerResult\"\n    EvaluationContainerResult:\n      allOf:\n        - $ref: '#/components/schemas/EvaluationContainer'\n        - type: object\n          required:\n            - id\n            - tasks\n            - toPass\n            - bonusFormula\n            - hidePoints\n          properties:\n            tasks:\n              type: object\n              required:\n                - task\n                - attempts\n                - passed\n              properties:\n                task:\n                  $ref: \"#/components/schemas/Task\"\n                attempts:\n                  type: integer\n                passed:\n                  type: boolean\n    SubTaskResult:\n      type: object\n      properties:\n        name:\n          type: string\n        points:\n          type: number\n        maxPoints:\n          type: number\n    UserTaskResult:\n      type: object\n      properties:\n        points:\n          type: number\n        maxPoints:\n          type: number\n        passed:\n          type: boolean\n        submission:\n          type: boolean\n    SubTaskStatistics:\n      type: object\n      properties:\n        taskID:\n          type: number\n        name:\n          type: string\n        subtasks:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              maxPoints:\n                type: number\n              avgPoints:\n                type: number\n",
			"canonicalURL": "/github.com/thm-mni-ii/feedbacksystem@3924d9bb8dd2298e326248248891b0e3628cb062/-/blob/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/thm-mni-ii/feedbacksystem/blob/3924d9bb8dd2298e326248248891b0e3628cb062/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/courses/{cid}/evaluation/results\": get: responses: 200: contents: application/json: generate schema: item: field results: item: field container: allOf: merge properties: try to merge conflicting property schemas: schema type mismatch: object and array",
	"NotImplemented": [
		"unsupported content types"
	]
}