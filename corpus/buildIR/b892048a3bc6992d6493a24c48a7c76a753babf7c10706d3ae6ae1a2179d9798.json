{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/interledger/open-payments"
		},
		"file": {
			"name": "open-api-spec.yaml",
			"size": 0,
			"path": "open-api-spec.yaml",
			"byteSize": 25795,
			"content": "openapi: 3.1.0\ninfo:\n  title: Open Payments\n  version: \"1.0\"\n  license:\n    name: Apache 2.0\n    identifier: Apache-2.0\n  description: \u003e-\n    The Open Payments API is a simple REST API with 4 resource types:\n    **account**, **account holder**, **incoming payment** and **outgoing\n    payment**.  \n\n\n    The *service endpoint* for the API is always the URL of the account resource\n    and all other resources are sub-resources of the account.  \n\n\n    All resource and collection resource representations use JSON and the\n    media-type `application/json`.  \n\n\n    The `account` resource has two collections of sub-resources and a single\n    **account holder** sub-resource:   \n\n    1. `/incoming-payments` contains the **incoming payment** sub-resources  \n\n    2. `/outgoing-payments` contains the **outgoing payment** sub-resources  \n\n    3. `/holder` contains the **outgoing payment** sub-resources  \n\n\n    Access to resources and permission to execute the methods exposed by the API\n    is determined by the grants given to the client represented by an access\n    token used in API requests.\n  summary: An API for open access to financial accounts to send and receive payments.\nservers:\n  - url: \"https://openpayments.guide/alice\"\n    description: alice\n  - url: \"https://openpayments.guide/bob\"\n    description: bob\npaths:\n  /:\n    get:\n      summary: Get a Payment Pointer\n      tags: []\n      responses:\n        \"200\":\n          description: Account Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/account\"\n              examples:\n                Get account for $openpayments.example:\n                  value:\n                    id: \"https://openpayments.example\"\n        \"404\":\n          description: Account Not Found\n      operationId: get-public-account\n      description: \u003e-\n        Retrieve the public information of the account represented by the\n        Payment Pointer.\n\n\n        This end-point should be open to anonymous requests as it allows clients\n        to verify a Payment Pointer URL and get the basic information required\n        to construct new transactions and discover the grant request URL.\n\n\n        The content should be slow changing and cacheable for long periods.\n        Servers SHOULD use cache control headers.\n      security: []\n  /incoming-payments:\n    post:\n      summary: Create an Incoming Payment\n      tags: []\n      operationId: create-incoming-payment\n      responses:\n        \"201\":\n          description: Incoming Payment Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/incoming-payment\"\n              examples:\n                New Incoming Payment for $25:\n                  value:\n                    id: \"http://openpayments.example/incoming-payments/87562464512\"\n                    accountId: \"http://openpayments.example\"\n                    state: completed\n                    incomingAmount:\n                      amount: 2500\n                      assetCode: USD\n                      assetScale: 2\n                    receivedAmount:\n                      amount: 0\n                      assetCode: USD\n                      assetScale: 2\n                    expiresAt: \"2022-02-03T23:20:50.52Z\"\n                    externalRef: INV2022-02-0137\n                    receiptsEnabled: true\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                incomingAmount:\n                  $ref: \"#/components/schemas/amount\"\n                expiresAt:\n                  type: string\n                  description: \u003e-\n                    The date and time when payments into the incoming payment\n                    must no longer be accepted.\n                  format: date-time\n                  writeOnly: true\n                description:\n                  type: string\n                  description: \u003e-\n                    Human readable description of the incoming payment that will\n                    be visible to the account holder.\n                externalRef:\n                  type: string\n                  description: \u003e-\n                    A reference that can be used by external systems to\n                    reconcile this payment with their systems. E.g. An invoice\n                    number. (Optional)\n                receiptsEnabled:\n                  type: boolean\n                  description: \u003e-\n                    True if the client wants the receiving account provider to\n                    generate receipts.\n            examples:\n              Create incoming payment for $25 to pay invoice INV2022-02-0137:\n                value:\n                  incomingAmount:\n                    amount: 2500\n                    assetCode: USD\n                    assetScale: 2\n                  externalRef: INV2022-02-0137\n        description: \u003e-\n          A subset of the incoming payments schema is accepted as input to\n          create a new incoming payment.\n\n\n          If provided, the `incomingAmount` must use the same `assetCode` and\n          `assetScale` as the account.\n      description: \u003e-\n        A client MUST create an **incoming payment** resource before it is\n        possible to send any payments to the account. \n\n\n        All of the input parameters are _optional_.\n    get:\n      summary: List Incoming Payments\n      operationId: list-incoming-payments\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/incoming-payment\"\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n      description: List all incoming payments on the account\n      parameters: []\n  /outgoing-payments:\n    post:\n      summary: Create an Outgoing Payment\n      tags: []\n      operationId: create-outgoing-payment\n      responses:\n        \"201\":\n          description: Outgoing Payment Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/outgoing-payment\"\n              examples:\n                New Fixed Send Outgoing Payment for $25:\n                  value:\n                    id: \u003e-\n                      https://openpayments.example/outgoing-payments/gwe867t2frof\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n      requestBody:\n        content:\n          application/json:\n            examples:\n              ? Create fixed-send-amount outgoing payment for $25 to pay invoice INV2022-02-0137\n              : value:\n                  receivingAccount: \"https://openpayments.example\"\n                  sendAmount:\n                    amount: 2500\n                  externalRef: INV2022-02-0137\n              ? Create fixed-receive-amount outgoing payment for $25 to pay invoice INV2022-02-0137\n              : value:\n                  receivingAccount: \"https://openpayments.example\"\n                  receiveAmount:\n                    amount: 2500\n                  externalRef: INV2022-02-0137\n            schema:\n              type: object\n              properties:\n                authorized:\n                  type: boolean\n                  description: Indicates if the payment is authorized to begin processing.\n                  default: false\n                receivingAccount:\n                  type: string\n                  format: uri\n                  description: The URL of the account that is being paid.\n                receivingPayment:\n                  type: string\n                  format: uri\n                  description: The URL of the incoming payment that is being paid.\n                receiveAmount:\n                  $ref: \"#/components/schemas/amount\"\n                sendAmount:\n                  $ref: \"#/components/schemas/amount\"\n                fundsAvailable:\n                  type: boolean\n                  description: \u003e-\n                    Indicates that there are funds available in the underlying\n                    account to complete this payment. This is not a guarantee\n                    they will still be available when the payment is attempted\n                    but it is a good indicator to a client that it should\n                    attempt to authorize the payment.\n                  readOnly: true\n                expiresAt:\n                  type: string\n                  description: \u003e-\n                    The date and time when the calculated `sendAmount` is no\n                    longer valid.\n                  readOnly: true\n                description:\n                  type: string\n                  description: \u003e-\n                    Human readable description of the outgoing payment that will\n                    be visible to the account holder and shared with the\n                    receiver.\n                externalRef:\n                  type: string\n                  description: \u003e-\n                    A reference that can be used by external systems to\n                    reconcile this payment with their systems. E.g. An invoice\n                    number. (Optional)\n                receiptsEnabled:\n                  type: boolean\n                  description: True if the underlying STREAM has receipts enabled.\n        description: \u003e-\n          A subset of the outgoing payments schema is accepted as input to\n          create a new outgoing payment.\n\n\n          If provided, the `sendAmount` must use the same `assetCode` and\n          `assetScale` as the account.\n      description: \u003e-\n        An **outgoing payment** is a sub-resource of an account. It represents a\n        payment from the account.\n    description: Create a new outgoing payment at the account.\n    get:\n      summary: List Outgoing Payments\n      operationId: list-outgoing-payments\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/outgoing-payment\"\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n      description: List all outgoing payments on the account\n      parameters: []\n  \"/incoming-payments/{id}\":\n    get:\n      summary: Get an Incoming Payment\n      tags: []\n      operationId: get-incoming-payment\n      responses:\n        \"200\":\n          description: Incoming Payment Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/incoming-payment\"\n              examples:\n                Incoming Payment for $25 with $12.34 received so far:\n                  value:\n                    id: \u003e-\n                      https://openpayments.example/incoming-payments/gwe867t2frof\n                    accountId: \"http://openpayments.example\"\n                    state: processing\n                    incomingAmount:\n                      amount: 2500\n                      assetCode: USD\n                      assetScale: 2\n                    receivedAmount:\n                      amount: 1234\n                      assetCode: USD\n                      assetScale: 2\n                    expiresAt: \"2022-04-12T23:20:50.52Z\"\n                    description: Thanks for the flowers!\n                    externalRef: INV-12876\n                    ilpAddress: g.ilp.iwuyge987y.98y08y\n                    sharedSecret: 6jR5iNIVRvqeasJeCty6C+YB5X9FhSOUPCL/5nha5Vs=\n                    receiptsEnabled: true\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n        \"404\":\n          description: Incoming Payment Not Found\n      description: \u003e-\n        A client can fetch the latest state of an incoming payment to determine\n        the amount received into the account.\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n        description: Incoming Payment identifier\n    put:\n      summary: Update an Incoming Payment\n      operationId: update-incoming-payment\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/incoming-payment\"\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n        \"404\":\n          description: Incoming Payment Not Found\n      description: \u003e-\n        A client with the appropriate permissions MAY update the state of an\n        **incoming payment** to `completed` if it is in a state of `pending` or\n        `processing`.\n\n\n        This indicates to the receiving account provider that it can begin any\n        post processing of the payment such as generating account statements or\n        notifying the account holder of the completed payment.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: string\n                  example: completed\n                  enum:\n                    - completed\n            examples:\n              Complete Incoming Payment:\n                value:\n                  state: completed\n        description: Update the state of the incoming payment to `completed`.\n  \"/outgoing-payments/{id}\":\n    get:\n      summary: Get an Outgoing Payment\n      tags: []\n      operationId: get-outgoing-payment\n      responses:\n        \"200\":\n          description: Outgoing Payment Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/outgoing-payment\"\n              examples:\n                Outgoing Payment with a fixed send amount of $25:\n                  value:\n                    id: \u003e-\n                      https://openpayments.example/outgoing-payments/gwe867t2frof\n                    accountId: \"http://openpayments.example\"\n                    state: processing\n                    authorized: true\n                    receivingPayment: \"http://openpayments.example/incoming-payments/68gq6t97qwf\"\n                    sendAmount:\n                      amount: 2500\n                      assetCode: USD\n                      assetScale: 2\n                    receiveAmount:\n                      amount: 2198\n                      assetCode: EUR\n                      assetScale: 2\n                    fundsAvailable: true\n                    expiresAt: \"2022-04-12T23:20:50.52Z\"\n                    description: Thanks for the flowers!\n                    externalRef: INV-12876\n                    receiptsEnabled: true\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n        \"404\":\n          description: Incoming Payment Not Found\n      description: A client can fetch the latest state of an outgoing payment.\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n        description: Incoming Payment identifier\n    put:\n      summary: Update an Outgoing Payment\n      operationId: update-outgoing-payment\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/outgoing-payment\"\n        \"401\":\n          $ref: \"#/components/responses/401\"\n        \"403\":\n          $ref: \"#/components/responses/403\"\n        \"404\":\n          description: Outgoing Payment Not Found\n      description: \u003e-\n        A client with the appropriate permissions MAY update an **outgoing\n        payment** to either change the amount that was originally requested or\n        authorize the payment.\n\n\n        To authorize the payment the client updates the value of `authorized` to\n        `true`.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  type: string\n                  example: completed\n                  enum:\n                    - completed\n            examples:\n              Authorize Outgoing Payment:\n                value:\n                  authorized: true\n              Update Send Amount:\n                value:\n                  sendAmount:\n                    amount: 2500\n              Update Receive Amount:\n                value:\n                  receiveAmount:\n                    amount: 512\n                    assetCode: EUR\n                    assetScale: 2\n        description: Update the state of the incoming payment to `completed`.\ncomponents:\n  schemas:\n    account:\n      title: Account\n      type: object\n      description: \u003e-\n        An **account** resource is the root of the API and contains the public\n        details of the financial account represented by the Payment Pointer that\n        is also the service endpoint URL.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: The URL identifying the incoming payment.\n          readOnly: true\n        publicName:\n          type: string\n          description: \u003e-\n            A public name for the account. This should be set by the account\n            holder with their provider to provide a hint to counterparties as to\n            the identity of the account holder.\n          readOnly: true\n        assetCode:\n          type: string\n          description: \u003e-\n            The asset code of the account. This SHOULD be an ISO4217 currency\n            code.\n          example: USD\n          readOnly: true\n        assetScale:\n          type: integer\n          description: The scale of the account.\n          example: 2\n          readOnly: true\n        authServer:\n          type: string\n          format: uri\n          description: \u003e-\n            The URL of the authorization server endpoint for getting grants and\n            access tokens for this account.\n          readOnly: true\n    incoming-payment:\n      title: Incoming Payment\n      description: \u003e-\n        An **incoming payment** resource represents a payment that will be, is\n        currently being, or has been received by the account.\n      type: object\n      properties:\n        id:\n          type: string\n          format: uri\n          description: The URL identifying the incoming payment.\n          readOnly: true\n        accountId:\n          type: string\n          format: uri\n          description: The URL of the account this payment is being made into.\n          readOnly: true\n        state:\n          type: string\n          description: The state of the payment as described above.\n          enum:\n            - pending\n            - processing\n            - completed\n            - expired\n          example: completed\n          default: pending\n        incomingAmount:\n          $ref: \"#/components/schemas/amount\"\n        receivedAmount:\n          $ref: \"#/components/schemas/amount\"\n        expiresAt:\n          type: string\n          description: \u003e-\n            The date and time when payments into the incoming payment will no\n            longer be accepted.\n        description:\n          type: string\n          description: \u003e-\n            Human readable description of the incoming payment that will be\n            visible to the account holder.\n        externalRef:\n          type: string\n          description: \u003e-\n            A reference that can be used by external systems to reconcile this\n            payment with their systems. E.g. An invoice number. (Optional)\n        ilpApddress:\n          type: string\n          description: The ILP address to use when establishing a STREAM connection.\n          readOnly: true\n        sharedSecret:\n          type: string\n          description: The shared secret to use when establishing a STREAM connection.\n          readOnly: true\n        receiptsEnabled:\n          type: boolean\n          description: True if the underlying STREAM has receipts enabled.\n      examples:\n        - id: \"http://openpayments.example/incoming-payments/87562464512\"\n          accountId: \"http://openpayments.example\"\n          state: completed\n          incomingAmount:\n            amount: 2500\n            assetCode: USD\n            assetScale: 2\n          receivedAmount:\n            amount: 2500\n            assetCode: USD\n            assetScale: 2\n          expiresAt: \"2022-02-03T23:20:50.52Z\"\n          description: Thanks for the coffee. Mo\n          receiptsEnabled: true\n    outgoing-payment:\n      title: Outgoing Payment\n      description: \u003e-\n        An **outgoing payment** resource represents a payment that will be, is\n        currently being, or has previously been, sent from the account.\n      type: object\n      properties:\n        id:\n          type: string\n          format: uri\n          description: The URL identifying the incoming payment.\n          readOnly: true\n        accountId:\n          type: string\n          format: uri\n          description: The URL of the account this payment is being made into.\n          readOnly: true\n        state:\n          type: string\n          description: The state of the payment as described above.\n          enum:\n            - pending\n            - processing\n            - completed\n            - expired\n            - failed\n          example: completed\n          default: pending\n        authorized:\n          type: boolean\n          description: Indicates if the payment is authorized to begin processing.\n          default: false\n        receivingAccount:\n          type: string\n          format: uri\n          description: The URL of the account that is being paid.\n        receivingPayment:\n          type: string\n          format: uri\n          description: The URL of the incoming payment that is being paid.\n        receiveAmount:\n          $ref: \"#/components/schemas/amount\"\n        sendAmount:\n          $ref: \"#/components/schemas/amount\"\n        fundsAvailable:\n          type: boolean\n          description: \u003e-\n            Indicates that there are funds available in the underlying account\n            to complete this payment. This is not a guarantee they will still be\n            available when the payment is attempted but it is a good indicator\n            to a client that it should attempt to authorize the payment.\n          readOnly: true\n        expiresAt:\n          type: string\n          description: \u003e-\n            The date and time when the calculated `sendAmount` is no longer\n            valid.\n          readOnly: true\n        description:\n          type: string\n          description: \u003e-\n            Human readable description of the outgoing payment that will be\n            visible to the account holder and shared with the receiver.\n        externalRef:\n          type: string\n          description: \u003e-\n            A reference that can be used by external systems to reconcile this\n            payment with their systems. E.g. An invoice number. (Optional)\n        receiptsEnabled:\n          type: boolean\n          description: True if the underlying STREAM has receipts enabled.\n    amount:\n      title: Amount\n      type: object\n      description: \u003e-\n        All amounts in open payments are represented as an unsigned 64-bit\n        integer amount and an asset code and scale.\n\n\n        The `assetCode` is a code that indicates the underlying asset. In most\n        cases this SHOULD be a 3-character ISO 4217 currency code.\n\n\n        The `assetScale` indicates how the value of `amount` has been scaled\n        relative to the natural scale of the asset. For example, an `amount` of\n        `1234` with an `assetScale` of `2` represents an amount of `12.34`.\n      properties:\n        amount:\n          type: integer\n          description: The amount that must be paid into the receiver’s account.\n          example: 250\n          maximum: 18446744073709552000\n          minimum: 0\n        assetCode:\n          type: string\n          description: \u003e-\n            The asset code of the amount. This SHOULD be an ISO4217 currency\n            code.\n          example: USD\n        assetScale:\n          type: integer\n          description: The scale of the amount.\n          example: 2\n      examples:\n        - amount: 2500\n          assetCode: USD\n          assetScale: 2\n        - amount: 500\n          assetCode: EUR\n          assetScale: 2\n        - amount: 123456789\n          assetCode: BTC\n          assetScale: 8\n  securitySchemes:\n    GNAP:\n      name: Authorization\n      type: apiKey\n      in: header\n      description: \u003e-\n        The API uses the Grant Negotiation and Authorization Protocol for\n        authorization. An access token must be acquired from an authorization\n        server before accessing the API and then provided in the request headers\n        using the prefix `GNAP`.\n\n\n        All requests must also be signed using a client key over some select\n        headers and a digest of the request body.\n  responses:\n    \"401\":\n      description: Authorization required\n      headers:\n        WWW-Authenticate:\n          schema:\n            type: string\n          description: \u003e-\n            The address of the authorization server for grant requests in the\n            format `GNAP as_uri=\u003cURI\u003e`\n    \"403\":\n      description: Forbidden\nsecurity:\n  - GNAP: []\n"
		}
	},
	"Error": "buildIR: make ir: path \"/incoming-payments\": get: responses: 200: contents: application/json: schema: item: field incomingAmount: field amount: int validator: set maximum: overflow"
}