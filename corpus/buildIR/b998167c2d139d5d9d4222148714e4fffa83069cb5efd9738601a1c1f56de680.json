{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Nexmo/api-specification"
		},
		"file": {
			"name": "meetings.yml",
			"size": 0,
			"path": "definitions/meetings.yml",
			"byteSize": 31515,
			"content": "openapi: 3.0.0\ninfo:\n  title: Vonage Meetings Public API\n  version: 0.1.2\n  x-label: Beta\nservers:\n  - url: https://api-eu.vonage.com/beta/meetings\npaths:\n  /rooms:\n    get:\n      summary: Get all available rooms\n      operationId: getRooms\n      parameters:\n        - $ref: '#/components/parameters/start_id_parameter'\n        - $ref: '#/components/parameters/end_id_parameter'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  page_size:\n                    type: integer\n                    example: 10\n                    description: The number of results returned on this page.\n                  _embedded:\n                    type: object\n                    properties:\n                      rooms:\n                        type: array\n                        description: List of all accessible rooms\n                        items:\n                          $ref: '#/components/schemas/Room'\n                  _links:\n                    type: object\n                    properties:\n                      first:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10'\n                      self:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026start_id=20'\n                      next:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026start_id=30'\n                      prev:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026end_id=20'\n    post:\n      summary: Create a room\n      operationId: createRoom\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateRoomDetails'\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Room'\n        '403':\n          description: Maximum number of rooms for owner exceeded\n  '/rooms/:room_id':\n    get:\n      summary: Get room details\n      operationId: getRoom\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Room'\n        '404':\n          description: Room not found\n    delete:\n      summary: Delete a room\n      operationId: deleteRoom\n      responses:\n        '204':\n          description: OK\n        '404':\n          description: Room not found\n    patch:\n       summary: Update an existing room\n       operationId: updateRoom\n       requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                update_details:\n                  type: object\n                  properties:\n                    expires_at:\n                      type: string\n                      format: date\n                      description: The time for when the room will be expired, expressed in ISO 8601 format.\n                    expire_after_use:\n                      type: boolean\n                      description: 'Close the room after a session ends. Only relevant for long_term rooms.'\n                    theme_id:\n                      type: string\n                      format: uuid\n                      description: 'The theme id for the room'\n       responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Room'\n        '400':\n          description: Bad request\n        '404':\n          description: Room not found\n  '/recordings/:recording_id':\n    get:\n      summary: Get a recording\n      operationId: getRecording\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Recording'\n        '404':\n          description: Recording not found\n    delete:\n      summary: Delete a recording\n      operationId: deleteRecording\n      responses:\n        '204':\n          description: No Content\n        '403':\n          description: Can only delete recordings in 'uploaded' status\n        '404':\n          description: Recording not found\n  '/sessions/:session_id/recordings':\n    get:\n      summary: Get recordings of a session\n      operationId: getSessionRecordings\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _embedded:\n                    type: object\n                    properties:\n                      recordings:\n                        type: array\n                        description: List of recordings for the given session\n                        items:\n                          $ref: '#/components/schemas/Recording'\n        '404':\n          description: Session not found\n  /dial-in-numbers:\n    get:\n      summary: Get numbers that can be used to dial into a meeting\n      operationId: getDialInNumbers\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DialInNumber'\n  /themes:\n    get:\n      summary: Get application themes\n      operationId: getThemes\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Theme'\n    post:\n      summary: Create a theme\n      operationId: createTheme\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateThemeDetails'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Theme'\n        '409':\n          description: short_company_url already exist or theme_name already exist in application\n        '403':\n          description: exceeded maximum theme limit\n  /themes/:theme_id:\n    get:\n      summary: Get theme by theme id\n      operationId: getThemeById\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Theme'\n        '404':\n          description: Theme not found\n    delete:\n      summary: Delete a theme\n      operationId: deleteTheme\n      parameters:\n        - name: force\n          in: query\n          description: force delete - delete theme even if theme is used by rooms or as application default theme\n          schema:\n            type: boolean\n      responses:\n        '204':\n          description: OK\n        '400':\n          description: Theme is used by rooms or application\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: integer\n                    enum: [400]\n                  name:\n                    type: string\n                    enum: [BadRequestError]\n                  message:\n                    type: string\n                    enum: ['could not delete theme']\n                  errors:\n                    type: array\n                    items:\n                      type: string\n        '404':\n          description: Theme not found\n    patch:\n      summary: Update theme by id\n      operationId: updateTheme\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                update_details:\n                  $ref: '#/components/schemas/UpdateThemeDetails'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Theme'\n        '400':\n          description: Invalid main_color or Invalid short_company_url or update_details must have at least 1 key\n        '404':\n          description: Theme not found\n        '409':\n          description: short_company_url already exist or theme_name already exist in application\n  /themes/:theme_id/finalizeLogos:\n    put:\n      summary: Change given logo to be permanent\n      operationId: finalizeLogosForTheme\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FinalizeThemeLogosRequestBody'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Logos has invalid property or Keys not found in bucket\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: integer\n                    enum: [400]\n                  name:\n                    type: string\n                    enum: [BadRequestError]\n                  message:\n                    type: string\n                    enum: ['could not finalize logos']\n                  errors:\n                    type: array\n                    description: each error has logoKey, code and invalidProperty if it is invalid logo property error\n                    items:\n                      type: object\n                      properties:\n                        logoKey:\n                          type: string\n                        code:\n                          type: string\n                          enum: [invalid_logo_properties, key_not_found]\n                        invalidProperty:\n                          type: string\n                          enum: [exceeds_size, type, dimensions, transparent_bg]\n        '404':\n          description: Theme not found\n  /themes/logos-upload-urls:\n    get:\n      summary: Get URLs that can be used to upload logos for a theme via a POST\n      operationId: getUploadUrlsForTheme\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: list of S3 presigned URLs\n                items:\n                  $ref: '#/components/schemas/UploadUrlForTheme'\n  /themes/:themeId/rooms:\n    get:\n      summary: Get rooms that associate with the theme id\n      operationId: getRoomsByThemeId\n      parameters:\n        - $ref: '#/components/parameters/start_id_parameter'\n        - $ref: '#/components/parameters/end_id_parameter'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  page_size:\n                    type: integer\n                    example: 10\n                    description: The number of results returned on this page\n                  _embedded:\n                    type: object\n                    properties:\n                      rooms:\n                        type: array\n                        description: List of all accessible rooms\n                        items:\n                          $ref: '#/components/schemas/Room'\n                  _links:\n                    type: object\n                    properties:\n                      first:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10'\n                      self:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026start_id=20'\n                      next:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026start_id=30'\n                      prev:\n                        type: object\n                        properties:\n                          href:\n                            type: string\n                            example: 'https://api.nexmo.com/v0.1/meetings/rooms?page_size=10\u0026end_id=20'\n        '404':\n          description: Theme not found\n  /applications:\n    patch:\n      summary: Update an existing application\n      operationId: updateApplication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateApplicationDetails'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '400':\n          description: Bad request\nx-webhooks:\n  meeting-events:\n    room-expired:\n      post:\n        summary: Room Expired Callback\n        operationId: room-expired\n        description: 'A notification about a room becoming inactive, which means no more sessions can be created for it'\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'room:expired'\n                  room_id:\n                    type: string\n                    format: uuid\n                  room_type:\n                    type: string\n                    enum:\n                      - instant\n                      - long_term\n                  expires_at:\n                    type: string\n                    format: date\n                    description: 'The time for when the room will be expired, expressed in ISO 8601 format'\n                  created_at:\n                    type: string\n                    format: date\n                    description: 'The time for when the room was created, expressed in ISO 8601 format'\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    session-started:\n      post:\n        summary: Session Started Callback\n        operationId: session-started\n        description: A notification about a newly started session\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'session:started'\n                  session_id:\n                    type: string\n                  room_id:\n                    type: string\n                    format: uuid\n                  started_at:\n                    type: string\n                    format: date-time\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    session-ended:\n      post:\n        summary: Session Ended Callback\n        operationId: session-ended\n        description: A notification about a session that has just ended\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'session:ended'\n                  session_id:\n                    type: string\n                  room_id:\n                    type: string\n                    format: uuid\n                  started_at:\n                    type: string\n                    format: date-time\n                  ended_at:\n                    type: string\n                    format: date-time\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    recording-started:\n      post:\n        summary: Recording Started Callback\n        operationId: recording-started\n        description: A notification about recording being turned on in a specific session\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'recording:started'\n                  recording_id:\n                    type: string\n                    format: uuid\n                  session_id:\n                    type: string\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    recording-ended:\n      post:\n        summary: Recording Ended Callback\n        operationId: recording-stopped\n        description: A notification about recording being turned off in a specific session\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'recording:ended'\n                  recording_id:\n                    type: string\n                    format: uuid\n                  session_id:\n                    type: string\n                  started_at:\n                    type: string\n                    format: date-time\n                  ended_at:\n                    type: string\n                    format: date-time\n                  duration:\n                    type: number\n                    description: Duration of the recording in seconds\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    recording-ready:\n      post:\n        summary: Recording Ready Callback\n        operationId: recording-ready\n        description: A notification about recording ready to be downloaded\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'recording:ready'\n                  recording_id:\n                    type: string\n                    format: uuid\n                  session_id:\n                    type: string\n                  room_id:\n                    type: string\n                    format: uuid\n                  started_at:\n                    type: string\n                    format: date-time\n                  ended_at:\n                    type: string\n                    format: date-time\n                  duration:\n                    type: number\n                    description: Duration of the recording in seconds\n                  url:\n                    type: string\n                    format: uri\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    participant-joined:\n      post:\n        summary: Participant Joined Callback\n        operationId: participant-joined\n        description: A notification about someone joining a specific session\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'session:participant:joined'\n                  participant_id:\n                    type: string\n                    format: uuid\n                  session_id:\n                    type: string\n                  room_id:\n                    type: string\n                    format: uuid\n                  name:\n                    type: string\n                  type:\n                    type: string\n                  is_host:\n                    description: indicates if this participant is the session's host\n                    type: boolean\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\n    participant-left:\n      post:\n        summary: Participant Left Callback\n        operationId: participant-left\n        description: A notification about someone leaving a specific session\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                properties:\n                  event:\n                    type: string\n                    enum:\n                      - 'session:participant:left'\n                  participant_id:\n                    type: string\n                    format: uuid\n                  session_id:\n                    type: string\n                  room_id:\n                    type: string\n                    format: uuid\n                  name:\n                    type: string\n                  type:\n                    type: string\n                  is_host:\n                    description: indicates if this participant is the session's host\n                    type: boolean\n        responses:\n          '204':\n            description: Your server returns this code if it accepts the callback\ncomponents:\n  parameters:\n    start_id_parameter:\n      name: start_id\n      in: query\n      schema:\n        type: string\n      example: 13\n      required: false\n      description: The ID to start returning events at\n    end_id_parameter:\n      name: end_id\n      in: query\n      schema:\n        type: string\n      example: 13\n      required: false\n      description: The ID to end returning events at (excluding end_id itself)\n  schemas:\n    Room:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        display_name:\n          type: string\n          maxLength: 200\n        metadata:\n          maxLength: 500\n          type: string\n          description: Free text that can be attached to a room. This will be passed in the form of a header in events related to this room.\n        type:\n          type: string\n          enum:\n            - instant\n            - long_term\n        recording_options:\n          $ref: '#/components/schemas/RecordingOptions'\n        meeting_code:\n          type: string\n          pattern: ^\\d+$\n          example: '123456789'\n          minLength: 9\n        is_available:\n          type: boolean\n          description: 'Once a room becomes unavailable, no new sessions can be created under it'\n        theme_id:\n          type: string\n          format: uuid\n          description: 'The theme id for the room'\n        created_at:\n          type: string\n          format: date\n          description: 'The time for when the room was created, expressed in ISO 8601 format'\n        expires_at:\n          type: string\n          format: date\n          description: 'The time for when the room will be expired, expressed in ISO 8601 format'\n        expire_after_use:\n          type: boolean\n          description: 'Close the room after a session ends. Only relevant for long_term rooms.'\n        _links:\n          type: object\n          properties:\n            guest_url:\n              type: object\n              properties:\n                href:\n                  type: string\n                  example: 'https://meetings.vonage.com/123456789'\n            host_url:\n              type: object\n              properties:\n                href:\n                  type: string\n                  example: 'https://meetings.vonage.com/123456789?participant_token=xyz'\n    CreateRoomDetails:\n      type: object\n      properties:\n        display_name:\n          type: string\n          maxLength: 200\n        metadata:\n          maxLength: 500\n          type: string\n          description: Free text that can be attached to a room. This will be passed in the form of a header in events related to this room.\n        type:\n          type: string\n          enum:\n            - instant\n            - long_term\n          description: Represents the type of the room.\n        expires_at:\n          type: string\n          format: date\n          description: The time for when the room will be expired, expressed in ISO 8601 format. Required only for long-term room creation.\n        recording_options:\n          $ref: '#/components/schemas/RecordingOptions'\n        expire_after_use:\n          type: boolean\n          description: 'Close the room after a session ends. Only relevant for long_term rooms.'\n        theme_id:\n          type: string\n          format: uuid\n          description: 'The theme id for the room'\n    RecordingOptions:\n      type: object\n      properties:\n        auto_record:\n          type: boolean\n          description: Automatically record all sessions in this room. Recording cannot be stopped when this is set to `true`.\n        record_only_owner:\n          type: boolean\n          description: Record only the owner screen or any share screen of the video.\n    Recording:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        session_id:\n          type: string\n          example: 2_MX40NjMwODczMn5-MTU3NTgyODEwNzQ2MH5OZDJrVmdBRUNDbG5MUzNqNXgya20yQ1Z-fg\n          description: Corresponds to the underlying Video API session id\n        started_at:\n          type: string\n          format: date-time\n        ended_at:\n          type: string\n          format: date-time\n        status:\n          type: string\n          enum:\n            - started\n            - stopped\n            - paused\n            - uploaded\n        _links:\n          type: object\n          properties:\n            url:\n              type: object\n              properties:\n                href:\n                  type: string\n    DialInNumber:\n      type: object\n      properties:\n        number:\n          type: string\n          example: '17323338801'\n        locale:\n          type: string\n          example: en-US\n        display_name:\n          type: string\n          example: United States\n    Theme:\n      type: object\n      properties:\n        theme_id:\n          type: string\n          format: uuid\n        theme_name:\n          type: string\n          example: 'Theme1'\n        domain:\n          type: string\n          enum: [VCP, VBC]\n        account_id:\n          type: string\n        application_id:\n          type: string\n          format: uuid\n        main_color:\n          type: string\n          example: '#12f64e'\n        short_company_url:\n          type: string\n          example: 'short-url'\n        brand_text:\n          type: string\n          example: 'Brand'\n        brand_image_colored:\n          type: string\n          description: Colored logo's key in storage system\n        brand_image_white:\n          type: string\n          description: White logo's key in storage system\n        branded_favicon:\n          type: string\n          description: Favicon's key in storage system\n        brand_image_colored_url:\n          type: string\n          description: Colored logo's link\n        brand_image_white_url:\n          type: string\n          description: White logo's link\n        branded_favicon_url:\n          type: string\n          description: Favicon's link\n    CreateThemeDetails:\n      type: object\n      required:\n        - main_color\n        - brand_text\n      properties:\n        theme_name:\n          type: string\n          maxLength: 200\n          example: 'Theme1'\n        main_color:\n          maxLength: 7\n          type: string\n          pattern: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$'\n          example: '#12f64e'\n        brand_text:\n          type: string\n          maxLength: 200\n          example: 'Brand'\n        short_company_url:\n          type: string\n          maxLength: 128\n          pattern: '^(?=.*[a-zA-Z_~-])([a-zA-Z0-9_~-]+)$'\n          example: 'short-url'\n    UpdateThemeDetails:\n      type: object\n      properties:\n        theme_name:\n          type: string\n          maxLength: 200\n          example: 'Theme1'\n        main_color:\n          maxLength: 7\n          type: string\n          pattern: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$'\n          example: '#12f64e'\n        brand_text:\n          type: string\n          maxLength: 200\n          example: 'Brand'\n        short_company_url:\n          type: string\n          maxLength: 128\n          pattern: '^(?=.*[a-zA-Z_~-])([a-zA-Z0-9_~-]+)$'\n          example: 'short-url'\n    FinalizeThemeLogosRequestBody:\n      type: object\n      properties:\n        keys:\n          type: array\n          description: List of temporary theme's logos to make permanent\n          example: ['logo-key1', 'logo-key2']\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n    UploadUrlForTheme:\n      type: object\n      properties:\n        url:\n          type: string\n          description: Storage system URL\n          example: 'https://storage-url.com'\n        fields:\n          type: object\n          description: Fields property has to be part of the POST request's body\n          properties:\n            Content-Type:\n              type: string\n              example: 'image/png'\n            key:\n              type: string\n              example: 'auto-expiring-temp/logos/white/ca63a155-d5f0-4131-9903-c59907e53df0'\n              description: Logo's key in storage system\n            logoType:\n              type: string\n              enum: [white, colored, favicon]\n            bucket:\n              type: string\n              description: Bucket name to upload to\n            X-Amz-Algorithm:\n              type: string\n            X-Amz-Credential:\n              type: string\n            X-Amz-Date:\n              type: string\n            X-Amz-Security-Token:\n              type: string\n            Policy:\n              type: string\n            X-Amz-Signature:\n              type: string\n    Application:\n      type: object\n      properties:\n        application_id:\n          type: string\n          format: uuid\n          description: The application id\n        account_id:\n          type: string\n          description: The applications account id\n        default_theme_id:\n          type: string\n          format: uuid\n          description: The application default theme id\n    UpdateApplicationDetails:\n      type: object\n      properties:\n        default_theme_id:\n          type: string\n          format: uuid\n          description: The theme id to set as application default theme\ntags: []",
			"canonicalURL": "/github.com/Nexmo/api-specification@9c787c0bd24b52fede45f6f13ebe82b261c79ab8/-/blob/definitions/meetings.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Nexmo/api-specification/blob/9c787c0bd24b52fede45f6f13ebe82b261c79ab8/definitions/meetings.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/themes\": post: requestBody: contents: media: \"application/json\": generate schema: field short_company_url: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?=`"
}