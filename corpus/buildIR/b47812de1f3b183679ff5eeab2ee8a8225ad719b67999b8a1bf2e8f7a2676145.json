{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gooddata/gooddata-ui-sdk"
		},
		"file": {
			"name": "openapi-spec.json",
			"size": 0,
			"path": "libs/api-client-tiger/src/generated/scan-json-api/openapi-spec.json",
			"byteSize": 26743,
			"content": "{\n    \"openapi\": \"3.0.1\",\n    \"info\": {\n        \"title\": \"OpenAPI definition\",\n        \"version\": \"v0\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"/\",\n            \"description\": \"GoodData.CN endpoint\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"name\": \"actions\",\n            \"description\": \"| execution of some form of computation (RPC over JSON)\"\n        }\n    ],\n    \"paths\": {\n        \"/api/v1/actions/dataSources/{dataSourceId}/test\": {\n            \"post\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Test data source connection by data source id\",\n                \"description\": \"Test if it is possible to connect to a database using an existing data source definition.\",\n                \"operationId\": \"testDataSource\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"description\": \"Data source id\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"myPostgres\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/TestRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"The result of the test of a data source connection.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/TestResponse\"\n                                },\n                                \"examples\": {\n                                    \"An example of a successful connection\": {\n                                        \"description\": \"An example of a successful connection\",\n                                        \"value\": {\n                                            \"successful\": true\n                                        }\n                                    },\n                                    \"An example of an unsuccessful connection\": {\n                                        \"description\": \"An example of an unsuccessful connection\",\n                                        \"value\": {\n                                            \"error\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\",\n                                            \"successful\": false\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"USE\"],\n                    \"description\": \"Permissions required to test a data source.\"\n                }\n            }\n        },\n        \"/api/v1/actions/dataSources/{dataSourceId}/scan\": {\n            \"post\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Scan a database to get a physical data model (PDM)\",\n                \"description\": \"It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.\",\n                \"operationId\": \"scanDataSource\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"description\": \"Data source id\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"myPostgres\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/ScanRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"The result of the scan.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ScanResultPdm\"\n                                },\n                                \"examples\": {\n                                    \"An example of a successful scan\": {\n                                        \"description\": \"An example of a successful scan\",\n                                        \"value\": {\n                                            \"pdm\": {\n                                                \"tables\": [\n                                                    {\n                                                        \"columns\": [\n                                                            {\n                                                                \"dataType\": \"NUMERIC\",\n                                                                \"isPrimaryKey\": false,\n                                                                \"name\": \"budget\"\n                                                            },\n                                                            {\n                                                                \"dataType\": \"STRING\",\n                                                                \"isPrimaryKey\": false,\n                                                                \"name\": \"category\"\n                                                            },\n                                                            {\n                                                                \"dataType\": \"NUMERIC\",\n                                                                \"isPrimaryKey\": false,\n                                                                \"name\": \"spend\"\n                                                            }\n                                                        ],\n                                                        \"id\": \"campaign_channels\",\n                                                        \"path\": [\"demo\", \"campaign_channels\"],\n                                                        \"type\": \"TABLE\"\n                                                    }\n                                                ]\n                                            },\n                                            \"warnings\": []\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            }\n        },\n        \"/api/v1/actions/dataSource/test\": {\n            \"post\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Test connection by data source definition\",\n                \"description\": \"Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.\",\n                \"operationId\": \"testDataSourceDefinition\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/TestDefinitionRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"The result of the test of a data source connection.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/TestResponse\"\n                                },\n                                \"examples\": {\n                                    \"An example of a successful connection\": {\n                                        \"description\": \"An example of a successful connection\",\n                                        \"value\": {\n                                            \"successful\": true\n                                        }\n                                    },\n                                    \"An example of an unsuccessful connection\": {\n                                        \"description\": \"An example of an unsuccessful connection\",\n                                        \"value\": {\n                                            \"error\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\",\n                                            \"successful\": false\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal organization permission required to use this endpoint.\"\n                }\n            }\n        },\n        \"/api/v1/actions/dataSources/{dataSourceId}/scanSchemata\": {\n            \"get\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Get a list of schema names of a database\",\n                \"description\": \"It scans a database and reads metadata. The result of the request contains a list of schema names of a database.\",\n                \"operationId\": \"getDataSourceSchemata\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"description\": \"Data source id\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"myPostgres\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"The result of the scan schemata\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DataSourceSchemata\"\n                                },\n                                \"examples\": {\n                                    \"An example of a successful scan\": {\n                                        \"description\": \"An example of a successful scan\",\n                                        \"value\": {\n                                            \"schemaNames\": [\"demo\", \"public\"]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"TestResponse\": {\n                \"required\": [\"successful\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"successful\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"A flag indicating whether test passed or not.\",\n                        \"example\": true\n                    },\n                    \"error\": {\n                        \"type\": \"string\",\n                        \"description\": \"Field containing more details in case of a failure. Details are available to a privileged user only.\",\n                        \"example\": \"Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \\\"user\\\"\"\n                    }\n                },\n                \"description\": \"Response from data source testing.\"\n            },\n            \"DataSourceParameter\": {\n                \"required\": [\"name\", \"value\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Parameter name.\"\n                    },\n                    \"value\": {\n                        \"type\": \"string\",\n                        \"description\": \"Parameter value.\"\n                    }\n                },\n                \"description\": \"A parameter for testing data source connection\"\n            },\n            \"TestRequest\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"URL to database in JDBC format, where test should connect to.\",\n                        \"example\": \"jdbc:postgresql://localhost:5432/db_name\"\n                    },\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database schema.\",\n                        \"example\": \"public\"\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database user name.\",\n                        \"example\": \"dbadmin\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database user password.\",\n                        \"example\": \"admin123\"\n                    },\n                    \"token\": {\n                        \"type\": \"string\",\n                        \"description\": \"Secret for token based authentication for data sources which supports it.\"\n                    },\n                    \"enableCaching\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Enable caching of intermediate results.\",\n                        \"example\": false\n                    },\n                    \"cachePath\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"parameters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DataSourceParameter\"\n                        }\n                    }\n                },\n                \"description\": \"A request containing all information for testing existing data source.\"\n            },\n            \"ColumnWarning\": {\n                \"required\": [\"message\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"array\",\n                        \"description\": \"Column name.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"message\": {\n                        \"type\": \"array\",\n                        \"description\": \"Warning message related to the column.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"description\": \"Warning related to single column.\"\n            },\n            \"DeclarativeColumn\": {\n                \"required\": [\"dataType\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column name\",\n                        \"example\": \"customer_id\"\n                    },\n                    \"dataType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column type\",\n                        \"example\": \"INT\",\n                        \"enum\": [\"INT\", \"STRING\", \"DATE\", \"NUMERIC\", \"TIMESTAMP\", \"TIMESTAMP_TZ\", \"BOOLEAN\"]\n                    },\n                    \"isPrimaryKey\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is column part of primary key?\"\n                    },\n                    \"referencedTableId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Referenced table (Foreign key)\",\n                        \"example\": \"customers\"\n                    },\n                    \"referencedTableColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"Referenced table (Foreign key)\",\n                        \"example\": \"customer_id\"\n                    }\n                },\n                \"description\": \"A table column.\"\n            },\n            \"DeclarativeTable\": {\n                \"required\": [\"columns\", \"id\", \"path\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Table id.\",\n                        \"example\": \"customers\"\n                    },\n                    \"path\": {\n                        \"type\": \"array\",\n                        \"description\": \"Path to table.\",\n                        \"example\": [\"table_schema\", \"table_name\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"example\": \"table_name\"\n                        }\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Table type: TABLE or VIEW.\",\n                        \"example\": \"VIEW\"\n                    },\n                    \"namePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Table or view name prefix used in scan. Will be stripped when generating LDM.\",\n                        \"example\": \"out_gooddata\"\n                    },\n                    \"columns\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of physical columns\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeColumn\"\n                        }\n                    }\n                },\n                \"description\": \"A database table.\"\n            },\n            \"DeclarativeTables\": {\n                \"required\": [\"tables\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"tables\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of physical database tables.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeTable\"\n                        }\n                    }\n                },\n                \"description\": \"A physical data model (PDM) tables.\"\n            },\n            \"ScanResultPdm\": {\n                \"required\": [\"pdm\", \"warnings\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"pdm\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeTables\"\n                    },\n                    \"warnings\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/TableWarning\"\n                        }\n                    }\n                },\n                \"description\": \"Result of scan of data source physical model.\"\n            },\n            \"TableWarning\": {\n                \"required\": [\"columns\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"array\",\n                        \"description\": \"Table name.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"message\": {\n                        \"type\": \"array\",\n                        \"description\": \"Warning message related to the table.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"columns\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ColumnWarning\"\n                        }\n                    }\n                },\n                \"description\": \"Warnings related to single table.\"\n            },\n            \"ScanRequest\": {\n                \"required\": [\"scanTables\", \"scanViews\", \"separator\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"separator\": {\n                        \"type\": \"string\",\n                        \"description\": \"A separator between prefixes and the names.\",\n                        \"example\": \"__\"\n                    },\n                    \"scanTables\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"A flag indicating whether the tables should be scanned.\",\n                        \"example\": true\n                    },\n                    \"scanViews\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"A flag indicating whether the views should be scanned.\",\n                        \"example\": true\n                    },\n                    \"schemata\": {\n                        \"type\": \"array\",\n                        \"description\": \"What schemata will be scanned.\",\n                        \"example\": [\"tpch\", \"demo\"],\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"tablePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.\",\n                        \"example\": \"out_table\"\n                    },\n                    \"viewPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.\",\n                        \"example\": \"out_view\"\n                    }\n                },\n                \"description\": \"A request containing all information critical to model scanning.\"\n            },\n            \"TestDefinitionRequest\": {\n                \"required\": [\"type\", \"url\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Type of database, where test should connect to.\",\n                        \"example\": \"POSTGRESQL\",\n                        \"enum\": [\n                            \"POSTGRESQL\",\n                            \"REDSHIFT\",\n                            \"VERTICA\",\n                            \"SNOWFLAKE\",\n                            \"ADS\",\n                            \"BIGQUERY\",\n                            \"MSSQL\",\n                            \"PRESTO\",\n                            \"DREMIO\",\n                            \"DRILL\"\n                        ]\n                    },\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"URL to database in JDBC format, where test should connect to.\",\n                        \"example\": \"jdbc:postgresql://localhost:5432/db_name\"\n                    },\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database schema.\",\n                        \"example\": \"public\"\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database user name.\",\n                        \"example\": \"dbadmin\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"Database user password.\",\n                        \"example\": \"admin123\"\n                    },\n                    \"token\": {\n                        \"type\": \"string\",\n                        \"description\": \"Secret for token based authentication for data sources which supports it.\"\n                    },\n                    \"parameters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DataSourceParameter\"\n                        }\n                    }\n                },\n                \"description\": \"A request containing all information for testing data source definition.\"\n            },\n            \"DataSourceSchemata\": {\n                \"required\": [\"schemaNames\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"schemaNames\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"description\": \"Result of getSchemata. Contains list of available DB schema names.\"\n            }\n        }\n    }\n}\n",
			"canonicalURL": "/github.com/gooddata/gooddata-ui-sdk@e87e94aacbf31fb730b5aadc02baf8bd8ce6b2f0/-/blob/libs/api-client-tiger/src/generated/scan-json-api/openapi-spec.json",
			"externalURLs": [
				{
					"url": "https://github.com/gooddata/gooddata-ui-sdk/blob/e87e94aacbf31fb730b5aadc02baf8bd8ce6b2f0/libs/api-client-tiger/src/generated/scan-json-api/openapi-spec.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/v1/actions/dataSources/{dataSourceId}/scan\": post: parameters: \"dataSourceId\": string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?!`"
}