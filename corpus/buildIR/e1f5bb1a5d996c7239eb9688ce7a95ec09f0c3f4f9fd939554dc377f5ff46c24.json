{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hack-as-a-service/api"
		},
		"file": {
			"name": "openapi-legacy.yaml",
			"size": 0,
			"path": "openapi/openapi-legacy.yaml",
			"byteSize": 25386,
			"content": "openapi: 3.0.0\ninfo:\n  description: |-\n    This is the API documentation for Hack as a Service, the PaaS built for Hack Clubbers, by Hack Clubbers.\n\n    You can find out more about HaaS at \u003chttps://haas.hackclub.com\u003e.\n\n    The canonical version of the OpenAPI specification is available at\n    \u003chttps://haas.hackclub.com/swagger.yaml\u003e.\n  version: \"1.0.0\"\n  title: Hack as a Service (HaaS)\nservers:\n  - url: \"https://haas.hackclub.com/api\"\n    description: HaaS production\n  - url: \"http://localhost:5000/api\"\n    description: Local server\ntags:\n  - name: users\n    description: Information about HaaS users\n  - name: teams\n    description: Information about HaaS teams\n  - name: apps\n    description: Information about HaaS apps\n  - name: builds\n    description: Information about HaaS app builds\npaths:\n  /users/search:\n    get:\n      tags: [users]\n      summary: Search for HaaS users\n      parameters:\n        - name: q\n          in: query\n          description: Search query\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Limit number of results\n          required: false\n          schema:\n            type: integer\n            default: 10\n        - name: excludeSelf\n          in: query\n          description: Whether or not to exclude the authed user from the results\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  users:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Missing required parameter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /users/me:\n    get:\n      tags: [users]\n      summary: Returns information about the current user\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  user:\n                    $ref: \"#/components/schemas/User\"\n  /users/me/apps:\n    get:\n      tags: [users]\n      summary: Returns apps accessible by the current user\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  apps:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/App\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /users/me/teams:\n    get:\n      tags: [users]\n      summary: Returns teams the current user is part of\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  teams:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Team\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /teams:\n    post:\n      tags: [teams]\n      summary: Creates a team\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Name:\n                  type: string\n                Automatic:\n                  type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  team:\n                    $ref: \"#/components/schemas/TeamWithUsers\"\n        \"400\":\n          description: Invalid JSON\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /teams/{id}:\n    get:\n      tags: [teams]\n      summary: Returns information about a team\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  team:\n                    $ref: \"#/components/schemas/TeamWithUsers\"\n        \"400\":\n          description: Invalid team ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n    patch:\n      tags: [teams]\n      summary: Update a team\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Name:\n                  type: string\n                Avatar:\n                  type: string\n                AddUsers:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/ID\"\n                RemoveUsers:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/ID\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: Invalid team ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /teams/{id}/apps:\n    get:\n      tags: [teams]\n      summary: Returns the apps that belong to this team\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  apps:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/App\"\n        \"400\":\n          description: Invalid team ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /teams/me:\n    get:\n      tags: [teams]\n      summary: Returns the current user's personal team\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  team:\n                    $ref: \"#/components/schemas/TeamWithUsers\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps:\n    post:\n      tags: [apps]\n      summary: Creates an app\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Name:\n                  type: string\n                ShortName:\n                  $ref: \"#/components/schemas/AppShortName\"\n                TeamID:\n                  $ref: \"#/components/schemas/ID\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  app:\n                    $ref: \"#/components/schemas/App\"\n        \"400\":\n          description: Invalid JSON\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps/{id}:\n    get:\n      tags: [apps]\n      summary: Returns information about an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  app:\n                    $ref: \"#/components/schemas/App\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n    delete:\n      tags: [apps]\n      summary: Deletes an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n    patch:\n      tags: [apps]\n      summary: Renames an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Name:\n                  type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  app:\n                    $ref: \"#/components/schemas/App\"\n        \"400\":\n          description: Invalid JSON\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps/{id}/letsencrypt:\n    get:\n      tags: [apps]\n      summary: Returns Let's Encrypt information about an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  letsencrypt:\n                    type: object\n                    properties:\n                      LetsEncryptEnabled:\n                        type: boolean\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps/{id}/letsencrypt/enable:\n    post:\n      tags: [apps]\n      summary: Enables Let's Encrypt for an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps/{id}/env:\n    get:\n      tags: [apps]\n      summary: Gets environment variables for an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  env:\n                    type: object\n                    example:\n                      SLACK_TOKEN: xoxb-1423-5252-4525554225\n                      SLACK_SIGNING_SECRET: \"12345\"\n                    properties:\n                      status:\n                        $ref: \"#/components/schemas/Status\"\n                      env:\n                        type: object\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n    put:\n      tags: [apps]\n      summary: Sets environment variables for an app\n      description: Normally, you should call `/apps/{id}/restart` after calling this method.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              example:\n                env:\n                  SLACK_TOKEN: xoxb-1423-5252-4525554225\n                  SLACK_SIGNING_SECRET: \"12345\"\n              type: object\n              properties:\n                env:\n                  type: object\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /apps/{id}/restart:\n    post:\n      tags: [apps]\n      summary: Restarts an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n\n  /apps/{id}/builds:\n    get:\n      tags: [apps]\n      summary: Returns builds associated with an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 50\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  builds:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Build\"\n        \"400\":\n          description: Invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  # TODO: /apps/{id}/logs - WebSocket are not supported\n  # See https://github.com/OAI/OpenAPI-Specification/issues/55\n  /apps/{id}/deploy:\n    post:\n      tags: [apps]\n      summary: Deploys an app\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                GitRepository:\n                  type: string\n                  format: uri\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  build:\n                    $ref: \"#/components/schemas/Build\"\n        \"400\":\n          description: Invalid JSON or invalid app ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  /builds/{id}:\n    get:\n      tags: [builds]\n      summary: Returns information about a build\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: \"#/components/schemas/ID\"\n          required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    $ref: \"#/components/schemas/Status\"\n                  build:\n                    $ref: \"#/components/schemas/Build\"\n        \"400\":\n          description: Invalid build ID\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n        \"500\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorStatus\"\n  # TODO: /builds/{id}/logs - WebSocket are not supported\n  # See https://github.com/OAI/OpenAPI-Specification/issues/55\nexternalDocs:\n  description: Find out more about HaaS\n  url: https://haas.hackclub.com/docs\ncomponents:\n  schemas:\n    ID:\n      type: integer\n      minimum: 1\n    Model:\n      type: object\n      properties:\n        ID:\n          $ref: \"#/components/schemas/ID\"\n        CreatedAt:\n          type: string\n          format: date-time\n        UpdatedAt:\n          type: string\n          format: date-time\n    Status:\n      type: string\n      enum: [ok]\n    ErrorStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          enum: [error]\n        error:\n          type: string\n    User:\n      allOf:\n        - $ref: \"#/components/schemas/Model\"\n        - type: object\n          properties:\n            SlackUserID:\n              type: string\n            Name:\n              type: string\n            Avatar:\n              type: string\n              format: uri\n      example:\n        ID: 5\n        Name: Zach Latta\n        SlackUserID: U0266FRGP\n        Avatar: https://avatars.slack-edge.com/2021-03-16/1864480102915_6f3a18561c92ce478c3d_512.jpg\n    # Uncomment when we return such a resource\n    #\n    # UserWithTeams:\n    #   allOf:\n    #   - $ref: \"#/components/schemas/User\"\n    #   - type: object\n    #     properties:\n    #       Teams:\n    #         type: array\n    #         items:\n    #           $ref: \"#/components/schemas/Team\"\n    Team:\n      allOf:\n        - $ref: \"#/components/schemas/Model\"\n        - type: object\n          properties:\n            Name:\n              type: string\n            Avatar:\n              type: string\n              format: uri\n            Automatic:\n              type: boolean\n            Personal:\n              type: boolean\n      example:\n        ID: 9\n        Name: Hack Club HQ\n        Avatar: https://github.com/hackclub.png\n        Automatic: false\n        Personal: false\n    TeamWithUsers:\n      allOf:\n        - $ref: \"#/components/schemas/Team\"\n        - type: object\n          properties:\n            Users:\n              type: array\n              items:\n                $ref: \"#/components/schemas/User\"\n    AppShortName:\n      type: string\n      pattern: \"^[a-z0-9][^/:_A-Z\\\\s]*$\"\n      description: The app's Dokku name\n    App:\n      allOf:\n        - $ref: \"#/components/schemas/Model\"\n        - type: object\n          properties:\n            Name:\n              type: string\n            ShortName:\n              $ref: \"#/components/schemas/AppShortName\"\n            TeamID:\n              $ref: \"#/components/schemas/ID\"\n      example:\n        ID: 14\n        Name: Scrappy\n        ShortName: scrappy\n        TeamID: 9\n    Build:\n      type: object\n      properties:\n        ID:\n          $ref: \"#/components/schemas/ID\"\n        ExecID:\n          type: string\n          format: uuid\n        AppID:\n          $ref: \"#/components/schemas/ID\"\n        StartedAt:\n          type: string\n          format: date-time\n        EndedAt:\n          type: string\n          format: date-time\n        Running:\n          type: boolean\n        Stdout:\n          type: string\n        Stderr:\n          type: string\n        Status:\n          type: integer\n      example:\n        ID: 3\n        ExecID: 0c522073-5b5f-4f3f-958c-7ba461d80d20\n        AppID: 14\n        StartedAt: 2021-05-01T21:56:34.47995-04:00\n        EndedAt: null\n        Running: true\n        Stdout: Building the app...\n        Stderr: \"\"\n        Status: 0\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: token\nsecurity:\n  - cookieAuth: []\n"
		}
	},
	"Error": "buildIR: make ir: path \"/teams/me\": get: responses: 200: contents: application/json: generate schema: field team: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"cookie security"
	]
}