{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/intellifi.nl/2.20.0/openapi.yaml",
			"byteSize": 117849,
			"content": "openapi: 3.0.1\nservers:\n  - description: Cloud hosted Brain API endpoint.\n    url: \"{protocol}://{customer}.intellifi.{tld}/api\"\n    variables:\n      customer:\n        default: brain\n        description: Customer sub-domain assigned by Intellifi\n      protocol:\n        default: https\n        enum:\n          - https\n          - http\n      tld:\n        default: cloud\n        enum:\n          - nl\n          - cloud\ninfo:\n  contact:\n    email: support@intellifi.nl\n    name: Support\n    url: https://intellifi.zendesk.com\n  description: |\n    This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)\n    Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).\n\n    The Brain Web API is a RESTful API that allows you to interact with the\n    [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and\n    services in a powerful and simple way. Our end-to-end solution allows you to\n    localize your items/assets based on technologies such as RFID and Bluetooth.\n\n    # Try it out!\n\n    The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).\n    This UI allows anyone to visualize and interact with the API’s resources without having any of the implementation logic in place.\n    It’s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.\n\n    # Authentication\n\n    Applications are required to provide some form of authentication to the API\n    for every secured endpoint. The Brain offers two forms of authentication.\n\n    - API key (Via an HTTP request header or URL parameter)\n    - Session cookie\n\n    \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\n\n    # See also\n\n    - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)\n    - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)\n  license:\n    name: MIT\n    url: ./LICENSE\n  title: Brain Web API\n  version: 2.20.0\n  x-apisguru-categories:\n    - iot\n  x-logo:\n    altText: Intellifi logo\n    backgroundColor: \"#FFFFFF\"\n    url: https://avatars1.githubusercontent.com/u/9928538?s=200\u0026v=4\n  x-origin:\n    - format: openapi\n      url: https://intellifi-nl.github.io/brain-rest-api-spec/openapi.yml\n      version: \"3.0\"\n  x-providerName: intellifi.nl\nexternalDocs:\n  description: Find out more\n  url: https://intellifi.zendesk.com\nsecurity:\n  - CookieSid: []\n  - HeaderApiKey: []\n  - QueryApiKey: []\ntags:\n  - description: |\n      Read-only route providing information about how the requesting client is authenticated on the API, as well as corresponding permissions.\n    name: authinfo\n  - description: |\n      The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.\n      Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.\n\n      See also the `kvpairs` resource.\n    name: blobs\n  - description: |\n      The `events` resource temporarily holds Brain events that match an event subscription in the `subscriptions` resource.\n      The subscription determines how long the events are held.\n\n      See also the `subscriptions` resource.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/sections/360001588534\n    name: events\n  - description: |\n      The `items` resource contains data about things that can be tracked using the Brain.\n      When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.\n      It will then be updated with information about where the item currently is, or where it has been seen for the last time.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/articles/360007502554\n    name: items\n  - description: |\n      The `keys` resource contains the access keys used to authenticate requests to this API.\n\n      Note that this resource is only accessible for administrator users logged into the Brain Management Console.\n      It is not possible to access this resource using API key authentication.\n      This resource is therefore irrelevant to most applications.\n    name: keys\n  - description: |\n      The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.\n      Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.\n\n      See also the `blobs` resource.\n    name: kvpairs\n  - description: |\n      The `locations` resource is an abstraction for the area around a physical location that items can be localized at.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/articles/360007502554\n    name: locations\n  - description: |\n      Location rules are directives for the localization engine that may be useful for certain solutions.\n    name: locationrules\n  - description: |\n      The `presences` resource is an abstraction for the detection of an item (from the `items` resource) at a location (from the `locations` resource).\n      Presences are always kept current by the Brain, i.e. if the hold time of a presence expires it is simply removed from the resource.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/articles/360008309313\n    name: presences\n  - description: |\n      The Brain consists of several software components with their own responsibilities, referred to as \"services\".\n      Some of these services have status information and/or configuration that can be managed using the `services` resource.\n    name: services\n  - description: |\n      It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.\n      Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/articles/360007824993\n    name: sets\n  - description: |\n      The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.\n      It is possible to configure Smartspots through this resource.\n\n      Smartspots also have their own locally stored sets, referred to as \"spotsets\".\n      Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.\n      Created or updated spotsets are automatically synced between Smartspot and server.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/categories/360000685434\n    name: spots\n  - description: |\n      The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.\n      Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.\n      Spotsets primarly are used as an input for Sense\u0026Control.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/articles/360009282834\n    name: spotsets\n  - description: |\n      The `subscriptions` resource contains rules to store and/or deliver events from the Brain event system.\n\n      See also the `events` resource.\n    externalDocs:\n      url: https://intellifi.zendesk.com/hc/en-us/sections/360001588534\n    name: subscriptions\n  - description: |\n      The `users` resource contains the user accounts that can log into the Brain Management Console.\n\n      Note that this resource is only accessible for administrator users logged into the Brain Management Console.\n      It is not possible to access this resource using API key authentication.\n      This resource is therefore irrelevant to most applications.\n    name: users\npaths:\n  /authinfo:\n    get:\n      operationId: getAuthinfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  api_key_id:\n                    description: Reference to the static API key (/api/keys) used to authenticate this request (when auth_method=static_api_key)\n                    example: 5b7d6cbd7503c445552a1664\n                    type: string\n                  auth_method:\n                    description: What kind of authentication was used\n                    enum:\n                      - user_session\n                      - internal\n                      - static_api_key\n                    type: string\n                  authenticated:\n                    description: Whether or not you are authenticated\n                    type: boolean\n                  permissions:\n                    properties:\n                      mutate:\n                        description: Whether or not this session can mutate resources\n                        type: boolean\n                    type: object\n                  url:\n                    $ref: \"#/components/schemas/Url\"\n                  user_id:\n                    description: Reference to the user account (/api/users) used to authenticate this request (when auth_method=user_session)\n                    example: 5b7d6cbd7503c445552a1664\n                    type: string\n                type: object\n          description: A JSON object containing the authentication information\n      summary: Authentication information\n      tags:\n        - authinfo\n  /blobs:\n    get:\n      operationId: getBlobs\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - description: Filter based on the hash of the blob.\n          in: query\n          name: hash\n          schema:\n            type: string\n        - description: Filter based on the unique blob_key\n          in: query\n          name: blob_key\n          schema:\n            type: string\n        - description: Filter based on the content type of the blob.\n          in: query\n          name: content_type\n          schema:\n            type: string\n        - description: Filter based on the filename of the blob.\n          in: query\n          name: filename\n          schema:\n            type: string\n        - description: Filter based on the last time the blob was accessed\n          in: query\n          name: time_last_accessed\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Blob\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of blobs\n      summary: Get all binary large objects (blob)\n      tags:\n        - blobs\n    post:\n      operationId: addBlob\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Blob\"\n        description: A JSON object containing blob information\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create binary large object (blob) metadata\n      tags:\n        - blobs\n  \"/blobs/{id}\":\n    delete:\n      operationId: deleteBlob\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete binary large object (blob)\n      tags:\n        - blobs\n    get:\n      operationId: getBlobMetadataById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Blob\"\n          description: A JSON object containing the blob\n      summary: Get binary large object (blob)\n      tags:\n        - blobs\n  \"/blobs/{id}/download/{filename}\":\n    get:\n      operationId: getBlobById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - description: Filename of the blob.\n          in: path\n          name: filename\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            image/*:\n              schema:\n                format: binary\n                type: string\n          description: The stored binary blob\n      summary: Download a binary large object (blob)\n      tags:\n        - blobs\n  \"/blobs/{id}/upload\":\n    post:\n      operationId: uploadBlobById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  format: binary\n                  type: string\n      responses:\n        \"200\":\n          description: Upload was successful\n      summary: Create binary large object (blob)\n      tags:\n        - blobs\n  /events:\n    get:\n      operationId: getEvents\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TopicResourceType\"\n        - $ref: \"#/components/parameters/TopicAction\"\n        - $ref: \"#/components/parameters/TopicResource\"\n        - $ref: \"#/components/parameters/TimeEvent\"\n        - $ref: \"#/components/parameters/TimeExpire\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Event\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of events\n      summary: Get all events\n      tags:\n        - events\n  \"/events/{id}\":\n    get:\n      operationId: getEventById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n          description: A JSON object containing the event\n      summary: Get event\n      tags:\n        - events\n  /items:\n    get:\n      operationId: getItems\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/AfterCode\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/BeforeCode\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/FromCode\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/UntilCode\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/CodeHex\"\n        - $ref: \"#/components/parameters/IsPresent\"\n        - $ref: \"#/components/parameters/Label\"\n        - $ref: \"#/components/parameters/Location\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/MoveCount\"\n        - $ref: \"#/components/parameters/Protocol\"\n        - $ref: \"#/components/parameters/Sets\"\n        - $ref: \"#/components/parameters/Technology\"\n        - $ref: \"#/components/parameters/Text\"\n        - $ref: \"#/components/parameters/TimeLastPresent\"\n        - $ref: \"#/components/parameters/TimeMoved\"\n        - $ref: \"#/components/parameters/Type\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Item\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of items\n      summary: Get all items\n      tags:\n        - items\n    post:\n      operationId: addItem\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Item\"\n        description: A JSON object containing item information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create item\n      tags:\n        - items\n  \"/items/{id}\":\n    delete:\n      operationId: deleteItem\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete item\n      tags:\n        - items\n    get:\n      operationId: getItemById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Item\"\n          description: A JSON object containing the items\n      summary: Get item\n      tags:\n        - items\n    put:\n      operationId: updateItem\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ItemUpdate\"\n        description: A JSON object containing item information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing item\n      tags:\n        - items\n  /keys:\n    get:\n      description: Can only be used by an **administrative** user.\n      operationId: getKeys\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - description: Filter on the secret token.\n          in: query\n          name: secret\n          schema:\n            type: string\n        - description: Filter on the label.\n          in: query\n          name: label\n          schema:\n            type: string\n        - description: Filter on read only status.\n          in: query\n          name: is_read_only\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Key\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of keys\n      security:\n        - CookieSid: []\n      summary: Get all keys\n      tags:\n        - keys\n    post:\n      description: Can only be used by an **administrative** user.\n      operationId: addKey\n      requestBody:\n        $ref: \"#/components/requestBodies/Key\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      security:\n        - CookieSid: []\n      summary: Create key\n      tags:\n        - keys\n  \"/keys/{id}\":\n    delete:\n      description: Can only be used by an **administrative** user.\n      operationId: deleteKey\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      security:\n        - CookieSid: []\n      summary: Delete key\n      tags:\n        - keys\n    get:\n      description: Can only be used by an **administrative** user.\n      operationId: getKeyById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Key\"\n          description: A JSON object containing the key\n      security:\n        - CookieSid: []\n      summary: Get key\n      tags:\n        - keys\n    put:\n      description: Can only be used by an **administrative** user.\n      operationId: updateKey\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Key\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      security:\n        - CookieSid: []\n      summary: Update existing key\n      tags:\n        - keys\n  /kvpairs:\n    get:\n      operationId: getKvPairs\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - description: Filter on the key-value pair key value.\n          in: query\n          name: kv_key\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/KeyValuePair\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of key-value pairs\n      summary: Get all key-value pairs\n      tags:\n        - kvpairs\n    post:\n      operationId: addKvPairs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KeyValuePair\"\n        description: A JSON object containing Key-value information\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create key-value pair\n      tags:\n        - kvpairs\n  \"/kvpairs/{id}\":\n    delete:\n      operationId: deleteKvPair\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete key-value pair\n      tags:\n        - kvpairs\n    get:\n      operationId: getKvPairsById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/KeyValuePair\"\n          description: A JSON object containing the subscription\n      summary: Get key-value pair\n      tags:\n        - kvpairs\n    put:\n      operationId: updateKvPair\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KeyValuePairUpdate\"\n        description: A JSON object containing Key-value information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing Key-value pair\n      tags:\n        - kvpairs\n  /locationrules:\n    get:\n      operationId: getLocationRules\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Label\"\n        - $ref: \"#/components/parameters/LocationRuleType\"\n        - $ref: \"#/components/parameters/RuleEnabled\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/LocationRule\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of location rules\n      summary: Get all location rules\n      tags:\n        - locationrules\n    post:\n      operationId: addLocationRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LocationRuleUpdate\"\n        description: A JSON object containing the location rule\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create location rule\n      tags:\n        - locationrules\n  \"/locationrules/{id}\":\n    delete:\n      operationId: deleteLocationRule\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete location rule\n      tags:\n        - locationrules\n    get:\n      operationId: getLocationRuleById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LocationRule\"\n          description: A JSON object containing the location rule\n      summary: Get location rule\n      tags:\n        - locationrules\n    put:\n      operationId: updateLocationRule\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LocationRuleUpdate\"\n        description: A JSON object containing new properties\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing location rule\n      tags:\n        - locationrules\n  /locations:\n    get:\n      operationId: getLocations\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Label\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Text\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Location\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of locations\n      summary: Get all locations\n      tags:\n        - locations\n    post:\n      operationId: addLocation\n      requestBody:\n        $ref: \"#/components/requestBodies/Location\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create location\n      tags:\n        - locations\n  \"/locations/{id}\":\n    delete:\n      operationId: deleteLocation\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete location\n      tags:\n        - locations\n    get:\n      operationId: getLocationById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Location\"\n          description: A JSON object containing the location\n      summary: Get location\n      tags:\n        - locations\n    put:\n      operationId: updateLocation\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Location\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing location\n      tags:\n        - locations\n  /presences:\n    get:\n      operationId: getPresences\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Item\"\n        - $ref: \"#/components/parameters/Location\"\n        - $ref: \"#/components/parameters/Proximity\"\n        - $ref: \"#/components/parameters/Technology\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Presence\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of presences\n      summary: Get all presences\n      tags:\n        - presences\n  \"/presences/{id}\":\n    get:\n      operationId: getPresenceById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Presence\"\n          description: A JSON object containing the presence\n      summary: Get presence\n      tags:\n        - presences\n  /services:\n    get:\n      operationId: getServices\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Name\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Service\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of services\n      summary: Get all services\n      tags:\n        - services\n  \"/services/{id}\":\n    get:\n      operationId: getServiceById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: A JSON object containing the service\n      summary: Get service\n      tags:\n        - services\n    put:\n      operationId: updateService\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n        description: A JSON object containing service information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing service\n      tags:\n        - services\n  /sets/itemlists:\n    get:\n      operationId: getItemLists\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Label\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Text\"\n        - description: Filter based on the total amount of items in the list\n          example: 2\n          in: query\n          name: total\n          schema:\n            type: integer\n        - description: The sha1 checksum of the list. This will change when the list is mutated.\n          example: 92cfceb39d57d914ed8b14d0e37643de0797ae56\n          in: query\n          name: sha1\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/ItemList\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of item lists\n      summary: Get all item lists\n      tags:\n        - sets\n    post:\n      operationId: addItemList\n      requestBody:\n        $ref: \"#/components/requestBodies/ItemList\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create item list\n      tags:\n        - sets\n  \"/sets/itemlists/{id}\":\n    delete:\n      operationId: deleteItemSet\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete item list\n      tags:\n        - sets\n    get:\n      operationId: getItemListById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ItemList\"\n          description: A JSON object containing the item list\n      summary: Get item list\n      tags:\n        - sets\n    put:\n      operationId: updateItemList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ItemList\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing item list\n      tags:\n        - sets\n  \"/sets/itemlists/{id}/ids\":\n    get:\n      operationId: getItemListIdsById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListOfItemIds\"\n          description: An array object containing the item ids for this list\n      summary: Get item ids for this list\n      tags:\n        - sets\n    post:\n      operationId: addItemIdsList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListOfItemIds\"\n        description: A JSON array containing item ids\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OkPostList\"\n      summary: Add items to an existing list\n      tags:\n        - sets\n  \"/sets/itemlists/{id}/ids/{itemId}\":\n    delete:\n      operationId: deleteItemIdFromItemList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - description: Item ID.\n          in: path\n          name: itemId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDeleteList\"\n      summary: Delete item from list\n      tags:\n        - sets\n  /sets/spotlists:\n    get:\n      operationId: getSpotLists\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/Label\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Text\"\n        - description: Filter based on the total amount of spots in the list\n          example: 2\n          in: query\n          name: total\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/SpotList\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of spot lists\n      summary: Get all spot lists\n      tags:\n        - sets\n    post:\n      operationId: addSpotList\n      requestBody:\n        $ref: \"#/components/requestBodies/ItemList\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create spot list\n      tags:\n        - sets\n  \"/sets/spotlists/{id}\":\n    delete:\n      operationId: deleteSpotList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete spot list\n      tags:\n        - sets\n    get:\n      operationId: getSpotListById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotList\"\n          description: A JSON object containing the spot list\n      summary: Info for a specific spot list\n      tags:\n        - sets\n    put:\n      operationId: updateSpotList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/SpotList\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing spot list\n      tags:\n        - sets\n  \"/sets/spotlists/{id}/ids\":\n    get:\n      operationId: getSpotListIdsById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListOfItemIds\"\n          description: An array object containing the item ids for this list\n      summary: Get spot ids for this list\n      tags:\n        - sets\n    post:\n      operationId: addItemIdsSpotList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ListOfItemIds\"\n        description: A JSON array containing spot ids\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OkPostList\"\n      summary: Add spots to an existing list\n      tags:\n        - sets\n  \"/sets/spotlists/{id}/ids/{itemId}\":\n    delete:\n      operationId: deleteItemIdFromSpotList\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - description: Item ID.\n          in: path\n          name: itemId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDeleteList\"\n      summary: Delete spot from list\n      tags:\n        - sets\n  /spots:\n    get:\n      operationId: getSpots\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - $ref: \"#/components/parameters/IsOnline\"\n        - $ref: \"#/components/parameters/RequestCounter\"\n        - $ref: \"#/components/parameters/SerialNumber\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/SpotGet\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of spots\n      summary: Get all spots\n      tags:\n        - spots\n  \"/spots/{id}\":\n    get:\n      operationId: getSpotById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotGet\"\n          description: A JSON object containing the spot\n      summary: Get spot\n      tags:\n        - spots\n    put:\n      operationId: updateSpot\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SpotUpdate\"\n        description: A JSON object containing spot information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing spot\n      tags:\n        - spots\n  \"/spots/{id}/sets\":\n    get:\n      operationId: getSpotSetsById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotSet\"\n          description: A JSON object containing the spotset\n      summary: Get spotsets\n      tags:\n        - spots\n    post:\n      operationId: addSpotSet\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/SpotSet\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create spotset\n      tags:\n        - spots\n  \"/spots/{id}/sets/{setId}\":\n    get:\n      operationId: getSpotSetById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - description: Unique spot set identifier\n          example: 5b8d0b717503c445552a1865\n          in: path\n          name: setId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotSet\"\n          description: A JSON object containing the spotset\n      summary: Get spotset\n      tags:\n        - spots\n    put:\n      operationId: updateSpotSet\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - description: Unique spot set identifier\n          example: 5b8d0b717503c445552a1865\n          in: path\n          name: setId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SpotSetUpdate\"\n        description: A JSON object containing spotset information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing spotset\n      tags:\n        - spots\n  /spotsets:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotSet\"\n          description: A JSON object containing the spotset\n      summary: Get spotsets\n      tags:\n        - spotsets\n    post:\n      requestBody:\n        $ref: \"#/components/requestBodies/SpotSet\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create spotset\n      tags:\n        - spotsets\n  \"/spotsets/{id}\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpotSet\"\n          description: A JSON object containing the spotset\n      summary: Get spotset\n      tags:\n        - spotsets\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SpotSetUpdate\"\n        description: A JSON object containing spotset information\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing spotset\n      tags:\n        - spotsets\n  /subscriptions:\n    get:\n      operationId: getSubscriptions\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - description: Filter on the topic filter. Make sure to use [percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding) in the query parameter.\n          in: query\n          name: topic_filter\n          schema:\n            type: string\n        - description: Filter based on the description.\n          in: query\n          name: description\n          schema:\n            type: string\n        - description: Filter based on the number of hours events are retained in the database.\n          in: query\n          name: database_hold_time_h\n          schema:\n            type: integer\n        - description: Filter based on subscriptions that populate the events\n          in: query\n          name: populate_events\n          schema:\n            type: boolean\n        - description: Filter on the verification of the target certificate.\n          in: query\n          name: verify_target_certificate\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Subscription\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of subscriptions\n      summary: Get all subscriptions\n      tags:\n        - subscriptions\n    post:\n      operationId: addSubscription\n      requestBody:\n        $ref: \"#/components/requestBodies/Subscription\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      summary: Create subscription\n      tags:\n        - subscriptions\n  \"/subscriptions/{id}\":\n    delete:\n      operationId: deleteSubscription\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      summary: Delete subscription\n      tags:\n        - subscriptions\n    get:\n      operationId: getSubscriptionById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n          description: A JSON object containing the subscription\n      summary: Get subscription\n      tags:\n        - subscriptions\n    put:\n      operationId: updateSubscription\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Subscription\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      summary: Update existing subscription\n      tags:\n        - subscriptions\n  \"/subscriptions/{id}/events\":\n    get:\n      operationId: getEventsForSubscriptionById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TopicResourceType\"\n        - $ref: \"#/components/parameters/TopicAction\"\n        - $ref: \"#/components/parameters/TopicResource\"\n        - $ref: \"#/components/parameters/TimeEvent\"\n        - $ref: \"#/components/parameters/TimeExpire\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/Event\"\n                        type: array\n                    type: object\n          description: A JSON object containing the events for a specific subscription\n      summary: Get subscription events\n      tags:\n        - subscriptions\n  /users:\n    get:\n      description: Can only be used by an **administrative** user.\n      operationId: getUsers\n      parameters:\n        - $ref: \"#/components/parameters/After\"\n        - $ref: \"#/components/parameters/AfterId\"\n        - $ref: \"#/components/parameters/Before\"\n        - $ref: \"#/components/parameters/BeforeId\"\n        - $ref: \"#/components/parameters/From\"\n        - $ref: \"#/components/parameters/FromId\"\n        - $ref: \"#/components/parameters/IdOnly\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Populate\"\n        - $ref: \"#/components/parameters/ResultsOnly\"\n        - $ref: \"#/components/parameters/Select\"\n        - $ref: \"#/components/parameters/Sort\"\n        - $ref: \"#/components/parameters/Until\"\n        - $ref: \"#/components/parameters/UntilId\"\n        - $ref: \"#/components/parameters/TimeoutS\"\n        - $ref: \"#/components/parameters/Id\"\n        - $ref: \"#/components/parameters/TimeCreated\"\n        - $ref: \"#/components/parameters/TimeUpdated\"\n        - description: Filter on the email address.\n          in: query\n          name: email\n          schema:\n            type: string\n        - description: Filter on the first name.\n          in: query\n          name: first_name\n          schema:\n            type: string\n        - description: Filter on the last name.\n          in: query\n          name: last_name\n          schema:\n            type: string\n        - description: Filter on the administrator status.\n          in: query\n          name: is_admin\n          schema:\n            type: boolean\n        - description: Filter on the locked status.\n          in: query\n          name: is_locked\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ResponseEnvelope\"\n                  - properties:\n                      results:\n                        items:\n                          $ref: \"#/components/schemas/User\"\n                        type: array\n                    type: object\n          description: A JSON object containing a list of users\n      security:\n        - CookieSid: []\n      summary: Get all users\n      tags:\n        - users\n    post:\n      description: Can only be used by an **administrative** user.\n      operationId: addUser\n      requestBody:\n        $ref: \"#/components/requestBodies/User\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/OkPost\"\n      security:\n        - CookieSid: []\n      summary: Create user\n      tags:\n        - users\n  \"/users/{id}\":\n    delete:\n      description: Can only be used by an **administrative** user.\n      operationId: deleteUser\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkDelete\"\n      security:\n        - CookieSid: []\n      summary: Delete user\n      tags:\n        - users\n    get:\n      description: Can only be used by an **administrative** user.\n      operationId: getUserById\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: A JSON object containing the user\n      security:\n        - CookieSid: []\n      summary: Get user\n      tags:\n        - users\n    put:\n      description: Can only be used by an **administrative** user.\n      operationId: updateUser\n      parameters:\n        - $ref: \"#/components/parameters/PathId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/User\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/200OkPut\"\n      security:\n        - CookieSid: []\n      summary: Update existing user\n      tags:\n        - users\ncomponents:\n  parameters:\n    After:\n      description: Limits on `time_created`, Marks the start of a range, optionally use `before` to set the end. Result output excludes the given timestamp.\n      example: 2016-01-27T08:38:55.255Z\n      in: query\n      name: after\n      schema:\n        format: date-time\n        type: string\n    AfterCode:\n      description: Limits directly on `code_hex`. Marks the start of a range, optionally use `before_code` to set the end. Result output excludes the given `code_hex` value.\n      example: e20000000000000000000000\n      in: query\n      name: after_code\n      schema:\n        type: string\n    AfterId:\n      description: Limits directly on `id`. Marks the start of a range, optionally use `before_id` to set the end. Result output excludes the given `id` value. Please note that `id` is in chronological order.\n      example: 56a88364e783152127d15340\n      in: query\n      name: after_id\n      schema:\n        type: string\n    Before:\n      description: Limits on `time_created`. Marks the end of a range, optionally use `after` to set the start. Result output excludes the given timestamp.\n      example: 2016-01-27T08:38:55.255Z\n      in: query\n      name: before\n      schema:\n        format: dateTime\n        type: string\n    BeforeCode:\n      description: Limits directly on `code_hex`. Marks the end of a range, optionally use `after_code` to set the start. Result output excludes the given `code_hex` value.\n      example: e20000000000000000001fff\n      in: query\n      name: before_code\n      schema:\n        type: string\n    BeforeId:\n      description: Limits directly on `id`. Marks the end of a range, optionally use `after_id` to set the start. Result output excludes the given `id` value. Please note that `id` is in chronological order.\n      example: 56a88364e783152127d15340\n      in: query\n      name: before_id\n      schema:\n        type: string\n    CodeHex:\n      description: \"Filter based on the hexadecimal string representation of the item. Supports wildcards: `*`.\"\n      examples:\n        $:\n          value: \"*42*\"\n        multi-wildcard:\n          summary: Returns resources whose `code_hex` contains value like `e20055550000000000001fff`.\n          value: \"*5555*\"\n        simple:\n          summary: Returns resources whose `code_hex` is equal to value.\n          value: e20000000000000000001fff\n        wildcard:\n          summary: Returns resources whose `code_hex` ends in value like `e20000000000000000004444`.\n          value: \"*4444\"\n      in: query\n      name: code_hex\n      schema:\n        $ref: \"#/components/schemas/CodeHex\"\n    From:\n      description: Limits on `time_created`. Marks the start of a range, optionally use `until` to set the end. Result output includes the given timestamp.\n      example: 2016-01-27T08:38:55.255Z\n      in: query\n      name: from\n      schema:\n        format: dateTime\n        type: string\n    FromCode:\n      description: Limits on `code_hex`. Marks the start of a range, optionally use `until_code` to set the end. Result output includes the given `code_hex` value.\n      example: e20000000000000000000000\n      in: query\n      name: from_code\n      schema:\n        type: string\n    FromId:\n      description: Limits on `id`. Marks the start of a range, optionally use `until_id` to set the end. Result output includes the given `id` value. Please note that `id` is in chronological order.\n      example: 56a88364e783152127d15340\n      in: query\n      name: from_id\n      schema:\n        type: string\n    Id:\n      description: Unique identifier\n      example: 5b8d0b717503c445552a1865\n      in: query\n      name: id\n      schema:\n        $ref: \"#/components/schemas/IdReadOnly\"\n    IdOnly:\n      allowEmptyValue: true\n      description: Removes `url` fields from output and shows `_id` instead of `_url` in references.\n      in: query\n      name: id_only\n      schema:\n        default: false\n        type: boolean\n    IsOnline:\n      description: Filter based on the online status.\n      example: true\n      in: query\n      name: is_online\n      schema:\n        $ref: \"#/components/schemas/IsOnline\"\n    IsPresent:\n      description: Only show items which are present of not.\n      example: true\n      in: query\n      name: is_present\n      schema:\n        type: boolean\n    Item:\n      description: Filter based on the item\n      in: query\n      name: item\n      schema:\n        $ref: \"#/components/schemas/IdReadOnly\"\n    Label:\n      description: \"Filter based on the label value. Supports wildcards: `*`\"\n      example: \"*foo*\"\n      in: query\n      name: label\n      schema:\n        $ref: \"#/components/schemas/Label\"\n    Limit:\n      description: Sets the maximum number of returned resources. You may increase this number to large values, keep in mind that query times could become large. We advise you to use the pagination feature whenever you can.\n      example: 5\n      in: query\n      name: limit\n      schema:\n        default: 100\n        type: integer\n    Location:\n      description: Filter based on the location\n      in: query\n      name: location\n      schema:\n        $ref: \"#/components/schemas/IdReadOnly\"\n    LocationRuleType:\n      description: Filter based on the type of location rule.\n      in: query\n      name: type\n      schema:\n        $ref: \"#/components/schemas/LocationRuleType\"\n    Metadata:\n      description: Filter based on metadata. Does a partial match on any value in the metadata object. It is also possible to do an exact/wildcard match on specific properties, e.g. `metadata.foo=bar`\n      in: query\n      name: metadata\n      schema:\n        type: string\n    MoveCount:\n      description: Filter based on move count\n      example: 5342\n      in: query\n      name: move_count\n      schema:\n        $ref: \"#/components/schemas/MoveCount\"\n    Name:\n      description: \"Filter based on the name of the resource. Supports wildcards: `*`\"\n      examples:\n        multi-wildcard:\n          summary: Returns resources whose `name` contains `foo` like `barfoobar`.\n          value: \"*foo*\"\n        simple:\n          summary: Returns resources whose `name` is equal to `foo`.\n          value: foo\n        wildcard:\n          summary: Returns resources whose `name` ends in `foo` like `barfoo`.\n          value: \"*foo\"\n      in: query\n      name: name\n      schema:\n        $ref: \"#/components/schemas/Name\"\n    PathId:\n      description: Unique identifier\n      example: 5b8d0b717503c445552a1865\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    Populate:\n      description: Expand a reference into the actual resource (lookup). You may add multiple fields by giving a comma separated value.\n      example: location,item\n      in: query\n      name: populate\n      schema:\n        type: string\n    Protocol:\n      description: Filter based on the detected protocol of an item.\n      example: epcgen2\n      in: query\n      name: protocol\n      schema:\n        $ref: \"#/components/schemas/ItemProtocol\"\n    Proximity:\n      description: Filter based on the proximity.\n      example: immediate\n      in: query\n      name: proximity\n      schema:\n        $ref: \"#/components/schemas/Proximity\"\n    RequestCounter:\n      description: Filter based on the amount of request made\n      example: 1234\n      in: query\n      name: request_counter\n      schema:\n        $ref: \"#/components/schemas/RequestCounter\"\n    ResultsOnly:\n      allowEmptyValue: true\n      description: Removes response envelope with information about query, only sends back a JSON array with the applicable resources.\n      in: query\n      name: results_only\n      schema:\n        default: false\n        type: boolean\n    RuleEnabled:\n      description: Filter based on the `enabled` property.\n      in: query\n      name: enabled\n      schema:\n        $ref: \"#/components/schemas/RuleEnabled\"\n    Select:\n      description: \"Select which properties should be returned. You may add multiple fields by giving a comma separated value. Select can also be used together with populate: Specify the resource first, then a period(.) followed by the field.\"\n      examples:\n        mix:\n          summary: Select `type`, and `label` from the populated resource `location`. Note use together with `populate=location` to expand a `location` reference into an actual resource, and allows the query to work on populated resources.\n          value: type,location.label\n        populated:\n          summary: Select `label` and `metadata` from the populated resource `location`. Note use together with `populate=location` to expand a `location` reference into an actual resource, and allows the query to work on populated resources.\n          value: location.label,location.metadata\n        simple:\n          summary: Select `type` and `technology`.\n          value: type,technology\n      in: query\n      name: select\n      schema:\n        type: string\n    SerialNumber:\n      description: Filter based on the serial number.\n      example: 1337\n      in: query\n      name: serial_number\n      schema:\n        $ref: \"#/components/schemas/SerialNumber\"\n    Sets:\n      description: Filter based on the set the resource is in.\n      example: 5b8d0b717503c445552a1865\n      in: query\n      name: sets\n      schema:\n        $ref: \"#/components/schemas/IdReadOnly\"\n    Sort:\n      description: Allows you to sort on on or more fields in the resource. You may append a minus sign (`-`) to request reverse order (new to old).\n      example: -move_count,technology\n      in: query\n      name: sort\n      schema:\n        default: -id\n        type: string\n    Technology:\n      description: Filter based on the detected technology of an item.\n      example: rfid\n      in: query\n      name: technology\n      schema:\n        $ref: \"#/components/schemas/Technology\"\n    Text:\n      description: Filter based on a full text search. Searched properties depend on the resource type. Matches on any of the given words. Supports quote (exact words) and minus (exclude) operators.\n      example: penguin\n      in: query\n      name: text\n      schema:\n        type: string\n    TimeCreated:\n      description: Filter on the time the resource was created.\n      example: 2018-08-30T09:51:59.737Z\n      in: query\n      name: time_created\n      schema:\n        $ref: \"#/components/schemas/TimeCreated\"\n    TimeEvent:\n      description: Filter on the time the event was generated on the device.\n      example: 2018-08-30T09:51:59.737Z\n      in: query\n      name: time_event\n      schema:\n        $ref: \"#/components/schemas/TimeExpire\"\n    TimeExpire:\n      description: Filter on the time the event will expire.\n      example: 2018-08-30T09:51:59.737Z\n      in: query\n      name: time_expire\n      schema:\n        $ref: \"#/components/schemas/TimeExpire\"\n    TimeLastPresent:\n      description: Filter based on the time last present\n      example: 2018-09-03T10:23:46.596Z\n      in: query\n      name: time_last_present\n      schema:\n        type: string\n    TimeMoved:\n      description: Filter based on time last moved\n      example: 2018-08-30T09:51:59.737Z\n      in: query\n      name: time_moved\n      schema:\n        $ref: \"#/components/schemas/TimeMoved\"\n    TimeUpdated:\n      description: Filter on the time the resource was last updated\n      example: 2018-08-30T09:51:59.737Z\n      in: query\n      name: time_updated\n      schema:\n        $ref: \"#/components/schemas/TimeUpdated\"\n    TimeoutS:\n      description: \"Overrides the default query timeout (in seconds). A value of 0 means unlimited. IMPORTANT: using high timeouts in production code is strongly discouraged as it may lead to stability issues.\"\n      example: 60\n      in: query\n      name: timeout_s\n      schema:\n        type: number\n    TopicAction:\n      description: Filter on the topic action\n      example: created\n      in: query\n      name: topic.action\n      schema:\n        $ref: \"#/components/schemas/EventTopicAction\"\n    TopicResource:\n      description: Filter on the topic resource id\n      example: 5b7d6cbd7503c445552a1664\n      in: query\n      name: topic.resource\n      schema:\n        $ref: \"#/components/schemas/IdReadOnly\"\n    TopicResourceType:\n      description: Filter on the topic resource type\n      example: items\n      in: query\n      name: topic.resource_type\n      schema:\n        $ref: \"#/components/schemas/EventTopicResourceType\"\n    Type:\n      description: Filter based on the type of an item.\n      example: tag\n      in: query\n      name: type\n      schema:\n        $ref: \"#/components/schemas/ItemType\"\n    Until:\n      description: Limits on `time_created`. Marks the end of a range, optionally use `from` to set the start. Result output includes the given timestamp.\n      example: 2016-01-27T08:38:55.255Z\n      in: query\n      name: until\n      schema:\n        format: dateTime\n        type: string\n    UntilCode:\n      description: Limits on `code_hex`. Marks the end of a range, optionally use `from_code` to set the start. Result output includes the given `code_hex` value.\n      example: e20000000000000000001ffff\n      in: query\n      name: until_code\n      schema:\n        type: string\n    UntilId:\n      description: Limits on `id`. Marks the end of a range, optionally use `from_id` to set the start. Result output includes the given `id` value. Please note that `id` is in chronological order.\n      example: 56a88364e783152127d15340\n      in: query\n      name: until_id\n      schema:\n        type: string\n  requestBodies:\n    ItemList:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ItemList\"\n      description: A JSON object containing item list information\n      required: true\n    Key:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Key\"\n      description: A JSON object containing key information\n      required: true\n    Location:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Location\"\n      description: A JSON object containing location information\n      required: true\n    SpotList:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SpotList\"\n      description: A JSON object containing spot list information\n      required: true\n    SpotSet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SpotSetCreate\"\n      description: A JSON object containing spot set information\n      required: true\n    Subscription:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Subscription\"\n      description: A JSON object containing sibscription information\n      required: true\n    User:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/User\"\n      description: A JSON object containing user information\n      required: true\n  responses:\n    200OkDelete:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResponseDefaultResource\"\n      description: A JSON object containing the deleted resource\n    200OkDeleteList:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResponseListResource\"\n      description: A JSON object containing the status and the total amount of items in the list\n    200OkPut:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResponseDefaultResource\"\n      description: A JSON object containing the modified resource\n    OkPost:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResponseDefaultResource\"\n      description: A JSON object containing the newly added resource\n    OkPostList:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ResponseListResource\"\n      description: A JSON object containing the status and the total amount of items in the newly added list\n  schemas:\n    Blob:\n      properties:\n        blob_key:\n          description: Unique key to the blob\n          example: foobar\n          type: string\n        content_type:\n          description: Media type of the resource. Automatically detected when not given in a POST.\n          example: image/png\n          type: string\n        download_url:\n          $ref: \"#/components/schemas/Url\"\n        filename:\n          description: Filename of the blob\n          example: Foo bar\n          type: string\n        hash:\n          description: Hash of the blob\n          example: 50df961c6c099f778fa50647572ef21f4ef416d52f7e00e311d7dbca1a735f6a\n          readOnly: true\n          type: string\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_last_accessed:\n          $ref: \"#/components/schemas/TimeLastAccessed\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        upload_url:\n          $ref: \"#/components/schemas/Url\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      required:\n        - key\n      type: object\n    BootCount:\n      description: Is increased with 1 when the service starts. Is never cleared (unless the database is adjusted).\n      example: 22\n      readOnly: true\n      type: integer\n    CodeHex:\n      description: String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (\u003e 40 bytes!) that a decimal representation would be useless to generate.\n      example: deadbeef\n      type: string\n    Config:\n      description: JSON object with possible settings. Refer to individual service documentation for a good overview.\n      example:\n        foo: bar\n      readOnly: true\n      type: object\n    ConfigRequest:\n      description: Object containing the new configuration. This will be applied automatically when the values are valid.\n      example:\n        foo: bar\n      type: object\n    Custom:\n      description: \"The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...\"\n      example:\n        foo: bar\n      nullable: true\n    Event:\n      properties:\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        payload:\n          description: An object containing the payload, if any, of the event.\n          example:\n            foo: bar\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_event:\n          $ref: \"#/components/schemas/TimeEvent\"\n        time_expire:\n          $ref: \"#/components/schemas/TimeExpire\"\n        topic:\n          properties:\n            action:\n              $ref: \"#/components/schemas/EventTopicAction\"\n            arguments:\n              $ref: \"#/components/schemas/EventTopicArgument\"\n            resource_id:\n              $ref: \"#/components/schemas/IdReadOnly\"\n            resource_type:\n              $ref: \"#/components/schemas/EventTopicResourceType\"\n            resource_url:\n              $ref: \"#/components/schemas/Url\"\n          type: object\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    EventTopicAction:\n      description: Indicates the kind of event that was executed. In most cases it's a verb. I.e. 'connected', 'created' etc...\n      enum:\n        - created\n        - updated\n        - deleted\n        - disappeared\n        - connection-rssi-changed\n      example: created\n      type: string\n    EventTopicArgument:\n      description: Extra arguments may be added to a topic string, it depends on the `resource_type` and the `action` what extra arguments are added.\n      example:\n        foo: bar\n    EventTopicResourceType:\n      description: The The available event topic resources types on the API. Is written in its plural form.\n      enum:\n        - blobs\n        - items\n        - keys\n        - kvpairs\n        - locations\n        - presences\n        - services\n        - spots\n        - subscriptions\n        - users\n      example: items\n      type: string\n    GeoCoords:\n      description: Last known geolocation estimate of this object. Not guaranteed to be included in response.\n      properties:\n        lat:\n          description: Latitude angle in degrees\n          type: number\n        lng:\n          description: Longitude angle in degrees\n          type: number\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n      type: object\n    GeoCoordsReadOnly:\n      description: Last known geolocation estimate of this object. Not guaranteed to be included in response.\n      properties:\n        lat:\n          description: Latitude angle in degrees\n          readOnly: true\n          type: number\n        lng:\n          description: Longitude angle in degrees\n          readOnly: true\n          type: number\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n      readOnly: true\n      type: object\n    Id:\n      description: Unique identifier for resource.\n      example: 5b7d6cbd7503c445552a1664\n      type: string\n    IdReadOnly:\n      description: Unique identifier for resource.\n      example: 5b7d6cbd7503c445552a1664\n      readOnly: true\n      type: string\n    IsOnline:\n      description: Whether or not this resource is actively connected to the Brain.\n      example: true\n      readOnly: true\n      type: boolean\n    Item:\n      allOf:\n        - $ref: \"#/components/schemas/ItemUpdate\"\n        - properties:\n            code_hex:\n              $ref: \"#/components/schemas/CodeHex\"\n            geo_coords:\n              $ref: \"#/components/schemas/GeoCoordsReadOnly\"\n            id:\n              $ref: \"#/components/schemas/IdReadOnly\"\n            is_present:\n              description: Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.\n              example: true\n              readOnly: true\n              type: boolean\n            move_count:\n              $ref: \"#/components/schemas/MoveCount\"\n            protocol:\n              $ref: \"#/components/schemas/ItemProtocol\"\n            sets:\n              $ref: \"#/components/schemas/ListOfSetIds\"\n            technology:\n              $ref: \"#/components/schemas/Technology\"\n            time_created:\n              $ref: \"#/components/schemas/TimeCreated\"\n            time_last_present:\n              description: Last time the item was present.\n              example: 2018-08-30T09:51:59.737Z\n              format: dateTime\n              readOnly: true\n              type: string\n            time_moved:\n              $ref: \"#/components/schemas/TimeMoved\"\n            time_updated:\n              $ref: \"#/components/schemas/TimeUpdated\"\n            type:\n              $ref: \"#/components/schemas/ItemType\"\n            url:\n              $ref: \"#/components/schemas/Url\"\n          type: object\n        - oneOf:\n            - properties:\n                location:\n                  $ref: \"#/components/schemas/Location\"\n                  description: Reference to the location resource where the item is located. Or, if the item is out of reach, the last known location. Only returned when populate is set to 'location'\n              type: object\n            - properties:\n                location_id:\n                  $ref: \"#/components/schemas/IdReadOnly\"\n              type: object\n            - properties:\n                location_url:\n                  $ref: \"#/components/schemas/Url\"\n              type: object\n    ItemList:\n      properties:\n        custom:\n          $ref: \"#/components/schemas/Custom\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        list:\n          $ref: \"#/components/schemas/Url\"\n        metadata:\n          $ref: \"#/components/schemas/Metadata\"\n        sha1:\n          description: The sha1 checksum of the list. This will change when the list is mutated.\n          readOnly: true\n          type: string\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        total:\n          description: Total amount of items in this set\n          example: 2\n          readOnly: true\n          type: integer\n      type: object\n    ItemProtocol:\n      description: Type of protocol that was used to decode this item.\n      enum:\n        - altbeacon\n        - uniwear\n        - nfc\n        - generic\n        - eddystone\n        - epcgen2\n        - ibeacon\n        - nanoble\n      example: epcgen2\n      type: string\n    ItemType:\n      description: Type of item.\n      enum:\n        - barcode\n        - bluetitan\n        - gbtag\n        - relay\n        - smarttag\n        - tag\n      example: tag\n      type: string\n    ItemUpdate:\n      properties:\n        config_request:\n          $ref: \"#/components/schemas/ConfigRequest\"\n        custom:\n          $ref: \"#/components/schemas/Custom\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        location_request:\n          $ref: \"#/components/schemas/LocationRequest\"\n        metadata:\n          $ref: \"#/components/schemas/Metadata\"\n      type: object\n    Key:\n      properties:\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        is_read_only:\n          description: Whether or not this key can only read and not write.\n          type: boolean\n        label:\n          description: Custom label for this API key.\n          type: string\n        secret:\n          description: The secret token for authentication.\n          example: 59cb1e86-a08d-44c9-9b37-c27f4ccd97f4\n          readOnly: true\n          type: string\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    KeyValuePair:\n      allOf:\n        - $ref: \"#/components/schemas/KeyValuePairUpdate\"\n        - properties:\n            id:\n              $ref: \"#/components/schemas/IdReadOnly\"\n            kv_key:\n              description: Unique identifier for the value.\n              example: foo\n              type: string\n            kv_value:\n              description: The value of the key value pair.\n              example: all the bars\n              nullable: true\n            time_created:\n              $ref: \"#/components/schemas/TimeCreated\"\n            time_updated:\n              $ref: \"#/components/schemas/TimeUpdated\"\n            url:\n              $ref: \"#/components/schemas/Url\"\n          type: object\n    KeyValuePairUpdate:\n      properties:\n        kv_value:\n          description: The value of the key value pair.\n          example: all the bars\n          nullable: true\n      type: object\n    Label:\n      description: A name or a label for this resource. This is used in the user interface, may be empty.\n      example: Foo Bar\n      type: string\n    ListOfItemIds:\n      description: List of item ids\n      items:\n        $ref: \"#/components/schemas/IdReadOnly\"\n      type: array\n    ListOfSetIds:\n      description: List of set ids\n      items:\n        $ref: \"#/components/schemas/IdReadOnly\"\n      readOnly: true\n      type: array\n    Location:\n      properties:\n        custom:\n          $ref: \"#/components/schemas/Custom\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        metadata:\n          $ref: \"#/components/schemas/Metadata\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      readOnly: true\n      type: object\n    LocationRequest:\n      description: Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.\n      example: 5b7d6cbd7503c445552a1664\n      type: string\n    LocationRule:\n      properties:\n        conditions:\n          anyOf:\n            - oneOf:\n                - properties:\n                    from_location:\n                      $ref: \"#/components/schemas/Location\"\n                      description: Rule applies to moves at or away from this location.\n                  type: object\n                - properties:\n                    from_location_id:\n                      $ref: \"#/components/schemas/IdReadOnly\"\n                  type: object\n                - properties:\n                    from_location_url:\n                      $ref: \"#/components/schemas/Url\"\n                  type: object\n            - oneOf:\n                - properties:\n                    to_location:\n                      $ref: \"#/components/schemas/Location\"\n                      description: Rule applies to moves towards this location.\n                  type: object\n                - properties:\n                    to_location_id:\n                      $ref: \"#/components/schemas/IdReadOnly\"\n                  type: object\n                - properties:\n                    to_location_url:\n                      $ref: \"#/components/schemas/Url\"\n                  type: object\n          description: Scope of this rule, e.g. moves at or away from a specific location or towards a specific location.\n        enabled:\n          $ref: \"#/components/schemas/RuleEnabled\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        parameters:\n          $ref: \"#/components/schemas/LocationRuleParameters\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        type:\n          $ref: \"#/components/schemas/LocationRuleType\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    LocationRuleParameters:\n      description: Parameters for this rule; depends on the rule type. Refer to the rule type specification for details.\n      type: object\n    LocationRuleType:\n      description: |\n        The type of location rule to be applied.\n        Allow: items at `conditions.from_location` can only move to `conditions.to_location` and locations allowed in other `allow` rules (destination whitelist).\n        Disallow: items at `conditions.from_location` cannot be moved to `conditions.to_location` and locations disallowed in other `disallow` rules (destination blacklist).\n        Disappeared: items disappearing at `conditions.from_location` will be moved to `parameters.location` after `parameters.time_s` seconds.\n        Debounce: items moves from `conditions.from_location` (and optionally to `conditions.to_location`) will be debounced with a period of `parameters.time_s` seconds, for a maximum of `parameters.max_periods` periods.\n      enum:\n        - allow\n        - disallow\n        - disappeared\n        - debounce\n      type: string\n    LocationRuleUpdate:\n      properties:\n        conditions:\n          description: Scope of this rule, e.g. moves at or away from a specific location or towards a specific location. The `from_location` is mandatory. The `to_location` is either mandatory, optional or not allowed depending on rule type.\n          properties:\n            from_location:\n              $ref: \"#/components/schemas/Id\"\n            to_location:\n              $ref: \"#/components/schemas/Id\"\n          type: object\n        enabled:\n          $ref: \"#/components/schemas/RuleEnabled\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        parameters:\n          $ref: \"#/components/schemas/LocationRuleParameters\"\n        type:\n          $ref: \"#/components/schemas/LocationRuleType\"\n      type: object\n    Metadata:\n      description: Object of searchable metadata for this resource. Can be freely used to store metadata properties.\n      example:\n        foo: bar\n      nullable: false\n      type: object\n    MoveCount:\n      description: How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.\n      example: 4523\n      readOnly: true\n      type: integer\n    Name:\n      description: Human readable name for the resource.\n      example: Foo Bar\n      readOnly: true\n      type: string\n    Presence:\n      properties:\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        item:\n          $ref: \"#/components/schemas/Item\"\n        item_id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        item_url:\n          $ref: \"#/components/schemas/Url\"\n        location:\n          $ref: \"#/components/schemas/Location\"\n        location_id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        location_url:\n          $ref: \"#/components/schemas/Url\"\n        proximity:\n          $ref: \"#/components/schemas/Proximity\"\n        technology:\n          $ref: \"#/components/schemas/Technology\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    Proximity:\n      description: Strongest proximity of all 'child' presences. This is a rough estimate on the distance from the item to the receiver.\n      enum:\n        - far\n        - near\n        - immediate\n      example: immediate\n      type: string\n    RequestCounter:\n      description: The total number of HTTP requests that this resource has done.\n      example: 73807\n      readOnly: true\n      type: integer\n    ResponseDefaultResource:\n      properties:\n        resource:\n          properties:\n            id:\n              $ref: \"#/components/schemas/IdReadOnly\"\n            url:\n              $ref: \"#/components/schemas/Url\"\n          type: object\n        status:\n          description: Status code\n          example: 200\n          type: integer\n      type: object\n    ResponseEnvelope:\n      properties:\n        count:\n          description: The maximum number of items in the response (as set in the query or by default).\n          example: 293401\n          type: integer\n        count_current:\n          description: The maximum number of items available to return.\n          example: 100\n          type: integer\n        is_limited:\n          description: Becomes false when the number of results is smaller than limit.\n          example: true\n          type: boolean\n        next_url:\n          description: URL to the next page of items. ( null if none)\n          example: https://brain.intellifi.nl/api/items?before_id=5b599c427503c44239cf0399\n          type: string\n        query_duration_ms:\n          description: Amount of time, in milliseconds, the request needed to complete.\n          example: 42\n          type: integer\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    ResponseListResource:\n      properties:\n        status:\n          description: Status code\n          example: 200\n          type: integer\n        total:\n          description: Total items in the list\n          example: 2\n          type: integer\n      type: object\n    RestartRequest:\n      description: Set this to `true` to send a reset request for the specific resource.\n      example: true\n      type: boolean\n    RuleEnabled:\n      description: Whether this rule should be in effect (`true`) or on hold (`false`).\n      example: true\n      type: boolean\n    Senses:\n      description: Senses are values that in most cases are generated inside the spot (number of presences, spot booted etc.). We also have a few senses that can be controlled by the brain. See [Sense \u0026 Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.\n      example:\n        foo: bar\n      readOnly: true\n      type: object\n    SensesRequest:\n      description: Object containing the new senses configuration. See [Sense \u0026 Control](https://intellifi.zendesk.com/hc/en-us/sections/360001568254) documentation for more information.\n      example:\n        foo: bar\n      type: object\n    SerialNumber:\n      description: This is the fixed and unique spot number. It's assigned during the production process and used to identify an individual device during its lifetime.\n      example: 1337\n      readOnly: true\n      type: integer\n    Service:\n      properties:\n        boot_count:\n          $ref: \"#/components/schemas/BootCount\"\n        config:\n          $ref: \"#/components/schemas/Config\"\n        config_request:\n          $ref: \"#/components/schemas/ConfigRequest\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        name:\n          $ref: \"#/components/schemas/Name\"\n        restart_request:\n          $ref: \"#/components/schemas/RestartRequest\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n        version:\n          $ref: \"#/components/schemas/Version\"\n      type: object\n    SpotBase:\n      properties:\n        antenna_report_locations:\n          description: You may configure this field to an object which couples individual antenna ports to locations.\n          items:\n            properties:\n              antenna_number:\n                description: Antenna number\n                example: 1\n                type: integer\n              report_location:\n                $ref: \"#/components/schemas/Location\"\n              report_location_id:\n                $ref: \"#/components/schemas/IdReadOnly\"\n              report_location_url:\n                $ref: \"#/components/schemas/Url\"\n            type: object\n          type: array\n        config:\n          $ref: \"#/components/schemas/Config\"\n        config_request:\n          $ref: \"#/components/schemas/ConfigRequest\"\n        geo_coords:\n          $ref: \"#/components/schemas/GeoCoords\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        is_online:\n          $ref: \"#/components/schemas/IsOnline\"\n        request_counter:\n          $ref: \"#/components/schemas/RequestCounter\"\n        senses:\n          $ref: \"#/components/schemas/Senses\"\n        senses_request:\n          $ref: \"#/components/schemas/SensesRequest\"\n        serial_number:\n          $ref: \"#/components/schemas/SerialNumber\"\n        status:\n          description: An object with specific information about the spot, directly send by the spot itself when the connection is created.\n          example:\n            foo: bar\n          readOnly: true\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    SpotGet:\n      allOf:\n        - $ref: \"#/components/schemas/SpotBase\"\n        - oneOf:\n            - properties:\n                report_location:\n                  $ref: \"#/components/schemas/Location\"\n              type: object\n            - properties:\n                report_location_id:\n                  $ref: \"#/components/schemas/IdReadOnly\"\n              type: object\n            - properties:\n                report_location_url:\n                  $ref: \"#/components/schemas/Url\"\n              type: object\n    SpotList:\n      properties:\n        custom:\n          $ref: \"#/components/schemas/Custom\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        label:\n          $ref: \"#/components/schemas/Label\"\n        list:\n          $ref: \"#/components/schemas/Url\"\n        metadata:\n          $ref: \"#/components/schemas/Metadata\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        total:\n          description: Total amount of spots in this set\n          example: 2\n          readOnly: true\n          type: integer\n      type: object\n    SpotSet:\n      allOf:\n        - $ref: \"#/components/schemas/SpotSetBase\"\n        - oneOf:\n            - $ref: \"#/components/schemas/SpotSetTypeAny\"\n            - $ref: \"#/components/schemas/SpotSetTypeAreacode\"\n            - $ref: \"#/components/schemas/SpotSetTypeCodelength\"\n            - $ref: \"#/components/schemas/SpotSetTypeCodemask\"\n            - $ref: \"#/components/schemas/SpotSetTypeCoderange\"\n            - $ref: \"#/components/schemas/SpotSetTypeExtended\"\n            - $ref: \"#/components/schemas/SpotSetTypeList\"\n            - $ref: \"#/components/schemas/SpotSetTypeProtocol\"\n            - $ref: \"#/components/schemas/SpotSetTypeTechnology\"\n            - $ref: \"#/components/schemas/SpotSetTypeType\"\n    SpotSetBase:\n      properties:\n        created_by:\n          description: Who was responsible for the creation of this spot list. Value determines who's allowed to manages this object.\n          readOnly: true\n          type: string\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        setid:\n          description: Spot set unique identifier. Must be unique within a single device\n          maximum: 255\n          minimum: 0\n          type: integer\n        spot_id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n      type: object\n    SpotSetCreate:\n      allOf:\n        - $ref: \"#/components/schemas/SpotSetBase\"\n        - oneOf:\n            - $ref: \"#/components/schemas/SpotSetTypeAreacode\"\n            - $ref: \"#/components/schemas/SpotSetTypeCodelength\"\n            - $ref: \"#/components/schemas/SpotSetTypeCodemask\"\n            - $ref: \"#/components/schemas/SpotSetTypeCoderange\"\n            - $ref: \"#/components/schemas/SpotSetTypeExtended\"\n            - $ref: \"#/components/schemas/SpotSetTypeList\"\n            - $ref: \"#/components/schemas/SpotSetTypeProtocol\"\n            - $ref: \"#/components/schemas/SpotSetTypeTechnology\"\n            - $ref: \"#/components/schemas/SpotSetTypeType\"\n    SpotSetTypeAny:\n      properties:\n        type:\n          description: Spot set type `any`; A wildcard that matches all type of items\n          enum:\n            - any\n          type: string\n      type: object\n    SpotSetTypeAreacode:\n      properties:\n        area_code:\n          description: Area Code\n          format: int32\n          minimum: 1\n          type: integer\n        type:\n          description: Spot set type `areacode`; Matches Item with the same Area Code as specified by this set\n          enum:\n            - areacode\n          type: string\n      type: object\n    SpotSetTypeCodelength:\n      properties:\n        length_bits:\n          description: The length of the item code in bits\n          format: int32\n          minimum: 1\n          type: integer\n        type:\n          description: Spot set type `codelength`; Matches all Item codes that have the exact same length in bits as specified by this value\n          enum:\n            - codelength\n          type: string\n      type: object\n    SpotSetTypeCodemask:\n      properties:\n        code:\n          description: Item code\n          maxLength: 84\n          minLength: 2\n          type: string\n        mask:\n          description: Mask which part of the code should match.\n          maxLength: 84\n          minLength: 2\n          type: string\n        type:\n          description: Spot set type `codemask`; Matches all Items that return true as a result of using the following equation ((Item.code \u0026 Item.mask) == (Set.code \u0026 Set.mask)).\n          enum:\n            - codemask\n          type: string\n      type: object\n    SpotSetTypeCoderange:\n      properties:\n        end:\n          description: End of the code range\n          maxLength: 84\n          minLength: 2\n          type: string\n        start:\n          description: Start of the code range\n          maxLength: 84\n          minLength: 2\n          type: string\n        type:\n          description: Spot set type `coderange`; Matches all Items codes if within specified range as specified by this set\n          enum:\n            - coderange\n          type: string\n      type: object\n    SpotSetTypeExtended:\n      properties:\n        key:\n          description: Extended data property key\n          maxLength: 32\n          minLength: 1\n          type: string\n        operator:\n          description: Operator\n          enum:\n            - gt\n            - gte\n            - eq\n            - in\n            - ne\n            - lt\n            - lte\n            - starts\n            - ends\n          maxLength: 32\n          minLength: 1\n          type: string\n        type:\n          description: Spot set type `extended`; Items that have the extended property (key) and match the requirement for value using the specified operator, as specified by this set\n          enum:\n            - extended\n          type: string\n        value:\n          description: Extended data property value.\n          oneOf:\n            - format: byte\n              maxLength: 100\n              minLength: 2\n              type: string\n            - maxLength: 100\n              minLength: 1\n              type: string\n            - format: float\n              type: number\n            - format: int32\n              type: integer\n            - type: boolean\n      type: object\n    SpotSetTypeList:\n      properties:\n        itemlist_id:\n          $ref: \"#/components/schemas/Id\"\n        limit:\n          description: Number, list limit, default `1000` if not specified.\n          format: int32\n          maximum: 2000\n          minimum: 1\n          type: integer\n        mutation:\n          description: Last mutation that was synchronized to the device. This is used for internal synchronization between the device and the server.\n          readOnly: true\n          type: string\n        restrictions:\n          description: Restrict changes spot and brain.\n          properties:\n            allow_server_edit:\n              description: Server can change this set.\n              type: boolean\n            allow_spot_edit:\n              description: Spots can change set, differences from the brain server will be merged with the device\n              type: boolean\n          type: object\n        sha1:\n          description: The sha1 checksum of the list. This will change when the list is mutated.\n          readOnly: true\n          type: string\n        total:\n          description: Total amount of items in this set\n          example: 2\n          readOnly: true\n          type: integer\n        type:\n          description: Spot set type `list`; List of items. Matches this set if Item is part of this list.\n          enum:\n            - list\n          type: string\n      type: object\n    SpotSetTypeProtocol:\n      properties:\n        item_protocol:\n          $ref: \"#/components/schemas/ItemProtocol\"\n        type:\n          description: Spot set type `protocol`; Matches Items with the same Protocol as specified by this set.\n          enum:\n            - protocol\n          type: string\n      type: object\n    SpotSetTypeTechnology:\n      properties:\n        item_technology:\n          $ref: \"#/components/schemas/Technology\"\n        type:\n          description: Spot set type `technology`; Matches Items with the same Technology as specified by this set.\n          enum:\n            - technology\n          type: string\n      type: object\n    SpotSetTypeType:\n      properties:\n        item_type:\n          $ref: \"#/components/schemas/ItemType\"\n        type:\n          description: Spot set type `type`; Matches Items with the same Type as specified by this set.\n          enum:\n            - type\n          type: string\n      type: object\n    SpotSetUpdate:\n      properties:\n        delete:\n          description: Request to delete a set. Remove request needs to be synchronized to the device, so it may take some time before the resource is being removed.\n          type: boolean\n      type: object\n    SpotUpdate:\n      allOf:\n        - $ref: \"#/components/schemas/SpotBase\"\n        - properties:\n            report_location:\n              $ref: \"#/components/schemas/Id\"\n          type: object\n    Subscription:\n      properties:\n        custom:\n          $ref: \"#/components/schemas/Custom\"\n        database_hold_time_h:\n          description: The number of hours this event is retained in the database. *Only use larger numbers if you know what you are doing.* A couple of hours is enough for most use cases.\n          example: 2\n          type: integer\n        description:\n          description: Additional field to add some notes about this subscription.\n          example: Item events\n          nullable: true\n          type: string\n        events_url:\n          $ref: \"#/components/schemas/Url\"\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        populate_events:\n          description: If set to `true`, resource references in an event (e.g. the location an item moved to) are resolved and populated with data instead of giving just an ID.\n          type: boolean\n        target_delivery_last_failure:\n          description: If `target_url` is set or has been set before, and delivery to the target URL failed at least once, this contains debugging information about the nature of the most recent failure.\n          readOnly: true\n          type: object\n        target_delivery_status:\n          description: If `target_url` is set, `target_delivery_status.ok` will be `true` or `false` depending on whether events are being succesfully delivered. `target_delivery_status.since` indicates when t his status last changed.\n          readOnly: true\n          type: object\n        target_retry:\n          description: Set to `true` if you want our server to retry if `target_url` is not giving back a `2xx` success code.\n          type: boolean\n        target_url:\n          description: Url to an external service that all applicable events are pushed to (webhook). Configure to `null` if you don't wish to use this (default).\n          type: string\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeUpdated\"\n        topic_filter:\n          description: MQTT filter that is applied to all events. Allows you to select and filter events. See [Event filtering](https://intellifi.zendesk.com/hc/en-us/articles/360008791494) for more information\n          example: items/#\n          type: string\n        url:\n          $ref: \"#/components/schemas/Url\"\n        verify_target_certificate:\n          description: Whether or not the `target_url` endpoint TLS certificate is verified to be valid.\n          type: boolean\n      type: object\n    Technology:\n      description: Type of technology that was used to detect this item.\n      enum:\n        - bluetooth\n        - optical\n        - rfid\n      example: rfid\n      type: string\n    TimeCreated:\n      description: \"[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.\"\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    TimeEvent:\n      description: \"[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this event was generated on the device. This is the device's own timestamp. Could be different due to buffering and clock differences.\"\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    TimeExpire:\n      description: \"[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource is going to be deleted.\"\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    TimeLastAccessed:\n      description: \"[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was last accessed.\"\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    TimeMoved:\n      description: Last time this item moved. This is the last time that the location for this item was changed.\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    TimeUpdated:\n      description: \"[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.\"\n      example: 2018-08-30T09:51:59.737Z\n      format: dateTime\n      readOnly: true\n      type: string\n    Url:\n      description: Url to the individual resource.\n      example: https://brain.intellifi.nl/api/foobar\n      readOnly: true\n      type: string\n    User:\n      properties:\n        email:\n          description: Email address\n          example: user@intellifi.nl\n          type: string\n        first_name:\n          description: First name\n          example: Foo\n          type: string\n        id:\n          $ref: \"#/components/schemas/IdReadOnly\"\n        is_admin:\n          description: Whether or not this is an administrator.\n          type: boolean\n        is_locked:\n          description: Whether or not this user is locked and can't change the password.\n          type: boolean\n        last_name:\n          description: Last name\n          example: Bar\n          type: string\n        password:\n          description: Password of the user\n          example: password1\n          type: string\n          writeOnly: true\n        time_created:\n          $ref: \"#/components/schemas/TimeCreated\"\n        time_updated:\n          $ref: \"#/components/schemas/TimeCreated\"\n        url:\n          $ref: \"#/components/schemas/Url\"\n      type: object\n    Version:\n      description: Current running version of the resource.\n      example: 1.2.3\n      readOnly: true\n      type: string\n  securitySchemes:\n    CookieSid:\n      description: |\n        This [session cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n        will be set after a successful graphical front-end login into the Brain.\n        Authentication via this method is particularly useful for using the API manually via the\n        '[tryitout](./tryitout)' tool or by browsing the API using some JSON viewer browser extension.\n        A [same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy) is enforced for cookie authentication.\n        Therefore applications accessing the API outside of the Brain, are not\n        allowed to be authenticated via this cookie.\n\n        Some endpoints, mainly `users` and `keys` can only be used when\n        authenticated via an administrative account using a Cookie. This means\n        that these endpoints can only be used when logged in into the Graphical\n        front-end of the Brain.\n      in: cookie\n      name: brain.sid\n      type: apiKey\n    HeaderApiKey:\n      description: |\n        Applications are required to provide an API key with every HTTP request\n        to the Web API.\n      in: header\n      name: X-Api-Key\n      type: apiKey\n    QueryApiKey:\n      description: |\n        Applications are required to provide an API key with every HTTP request\n        to the Web API.\n      in: query\n      name: key\n      type: apiKey\n"
		}
	},
	"Error": "buildIR: make ir: path \"/presences\": get: responses: 200: contents: application/json: generate schema: allOf: field results: item: field item: allOf: schema type mismatch: object and "
}