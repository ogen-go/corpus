{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sodafoundation/api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "openapi-spec/swagger.yaml",
			"byteSize": 118290,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"v1beta\"\n  title: SODA API\n  description: Unified SODA API for data management across multiple, heterogeneous storage backends. Currently supporting file/block for on prem\n  termsOfService: 'https://www.linuxfoundation.org/terms'\n  contact:\n    name: SODA Support\n    url: 'https://sodafoundation.io/slack'\n    email: support@sodafoundation.io\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\npaths:\n  /:\n    get:\n      tags:\n        - API versions\n      description: Lists information for all API versions.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  versions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VersionSpec'\n              examples:\n                response:\n                  value:\n                    - name: v1beta\n                      status: CURRENT\n                      updated: '2017-07-10T14:36:58.014Z'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/{apiVersion}':\n    parameters:\n      - $ref: '#/components/parameters/apiVersion'\n    get:\n      tags:\n        - API versions\n      description: Gets version details by specified API version.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    $ref: '#/components/schemas/VersionSpec'\n              examples:\n                response:\n                  value:\n                    name: v1beta\n                    status: SUPPORTED\n                    updated: '2017-04-10T14:36:58.014Z'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/docks':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Dock\n      description: Lists information for all storage docks.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: storageType\n          in: query\n          schema:\n            type: string\n            enum:\n            - block\n            - file\n            - object\n        - name: type\n          in: query\n          schema:\n            type: string\n            enum:\n            - provisioner\n            - attacher\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum:\n            - available\n            - unavailable\n        - name: name\n          in: query\n          schema:\n            minLength: 1\n            maxLength: 255\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DockSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/docks/{dockId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/dockId'\n    get:\n      tags:\n        - Dock\n      description: Gets storage dock detail by dock ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DockSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/pools':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Pool\n      description: Lists information for all block storage pool.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: storageType\n          in: query\n          schema:\n            type: string\n            enum:\n            - block\n            - file\n            - object\n        - name: name\n          in: query\n          schema:\n            minLength: 1\n            maxLength: 255\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StoragePoolSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/availabilityZones':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Availability Zone\n      description: Lists availability zones.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: storageType\n          in: query\n          schema:\n            type: string\n            enum:\n            - block\n            - file\n            - object\n        - name: name\n          in: query\n          schema:\n            minLength: 1\n            maxLength: 255\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/pools/{poolId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/poolId'\n    get:\n      tags:\n        - Pool\n      description: Gets storage pool detail by pool ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoragePoolSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/profiles':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Profiles\n      description: Lists information for all profiles.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: storageType\n          in: query\n          schema:\n            type: string\n            enum:\n            - block\n            - file\n            - object\n        - name: availabilityZone\n          in: query\n          schema:\n            type: string\n        - name: status\n          in: query\n          schema:\n            type: string\n            enum:\n            - available\n            - unavailable\n        - name: name\n          in: query\n          schema:\n            minLength: 1\n            maxLength: 255\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProfileRespSpec'\n              examples:\n                response:\n                  value:\n                    - id: 5d8c3732-a248-50ed-bebc-539a6ffd25c1\n                      name: Gold\n                      description: provide gold storage service\n                      storageType: block\n                      provisioningProperties:\n                        dataStorage:\n                          recoveryTimeObjective: 10\n                          provisioningPolicy: Thin\n                          compression: true\n                          deduplication: true\n                        ioConnectivity:\n                          accessProtocol: iscsi\n                          maxIOPS: 1000000\n                          maxBWS: 60000\n                          minIOPS: 1000000\n                          minBWS: 100\n                          latency: 100\n                      replicationProperties:\n                        dataProtection:\n                          isIsolated: true\n                          minLifetime: P3Y6M4DT12H30M5S\n                          recoveryGeographicObjective: Datacenter\n                          recoveryPointObjectiveTime: P3Y6M4DT12H30M5S\n                          RecoveryTimeObjective: OnlineActive\n                          replicaType: Clone\n                        replicaInfos:\n                          replicaUpdateMode: Active\n                          consistencyEnabled: true\n                          replicationPeriod: P3Y6M4DT12H30M5S\n                          replicationBandwidth: 60000\n                      snapshotProperties:\n                        schedule:\n                          datetime: '2008-09-15T15:53:00.000Z'\n                          occurrence: Weekly\n                        retention:\n                          number: 10\n                          duration: 60\n                        topology:\n                          bucket: s3\n                      customProperties:\n                        key1: value1\n                        key2:\n                          subKey1: subValue1\n                          subKey2: subValue2\n                        key3: value3\n                    - id: 5d8c3732-a248-50ed-bebc-539a6ffd25c2\n                      name: Silver\n                      storageType: block\n                      description: provide silver storage service\n                      provisioningProperties:\n                        dataStorage:\n                          provisioningPolicy: Thin\n                        ioConnectivity:\n                          accessProtocol: iscsi\n                      customProperties:\n                        key1: value1\n                        key2: value2\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Profiles\n      description: Creates a profile.\n      responses:\n        '200':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileRespSpec'\n              examples:\n                response:\n                  value:\n                    id: 5d8c3732-a248-50ed-bebc-539a6ffd25c2\n                    name: Silver\n                    storageType: block\n                    description: provide silver storage service\n                    provisioningProperties:\n                      dataStorage:\n                        provisioningPolicy: Thin\n                      ioConnectivity:\n                        accessProtocol: iscsi\n                    customProperties:\n                      key1: value1\n                      key2: value2\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/ProfileCreateSpec'\n  '/v1beta/{tenantId}/profiles/{profileId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/profileId'\n    get:\n      tags:\n        - Profiles\n      description: Gets profile detail by profile ID.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Profiles\n      description: Updates a profile.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileRespSpec'\n              examples:\n                response:\n                  value:\n                    id: 5d8c3732-a248-50ed-bebc-539a6ffd25c2\n                    name: Silver\n                    storageType: block\n                    description: provide silver storage service\n                    provisioningProperties:\n                      dataStorage:\n                        provisioningPolicy: Thin\n                      ioConnectivity:\n                        accessProtocol: iscsi\n                    customProperties:\n                      key1: value1\n                      key2: value2\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/ProfileUpdateSpec'\n    delete:\n      tags:\n        - Profiles\n      description: Deletes a profile.\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/profiles/{profileId}/customProperties':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/profileId'\n    post:\n      tags:\n        - Profiles\n      description: Adds customized property to the profile.\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomPropertiesSpec'\n              examples:\n                response:\n                  value:\n                    key1: value1\n                    key2:\n                      subKey1: subValue1\n                      subKey2: subValue2\n                    key3: value3\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomPropertiesSpec'\n    get:\n      tags:\n        - Profiles\n      description: Lists all customized properties for the profile.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomPropertiesSpec'\n              examples:\n                response:\n                  value:\n                    key1: value1\n                    key2:\n                      subKey1: subValue1\n                      subKey2: subValue2\n                    key3: value3\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/profiles/{profileId}/customProperties/{customKey}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/profileId'\n      - $ref: '#/components/parameters/customKey'\n    delete:\n      tags:\n        - Profiles\n      description: Remove a customized property from profile.\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/volumes':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Block volumes\n      description: Lists information for all volumes.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The volume name\n          schema:\n            type: string\n        - name: profileId\n          in: query\n          description: The UUID of profile\n          schema:\n            type: string\n        - name: poolId\n          in: query\n          description: The UUID of pool\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The volume status\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VolumeRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Block volumes\n      description: Creates a volume.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeCreateSpec'\n  '/v1beta/{tenantId}/block/volumes/{volumeId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/volumeId'\n    get:\n      tags:\n        - Block volumes\n      description: Gets volume detail by volume id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Block volumes\n      description: Updates a volume.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeUpdateSpec'\n    delete:\n      tags:\n        - Block volumes\n      description: Deletes a volume.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/volumes/{volumeId}/resize':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/volumeId'\n    post:\n      tags:\n        - Block volumes\n      description: Extends a volume.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeExtendSpec'\n  '/v1beta/{tenantId}/block/attachments':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      parameters:\n        - name: volumeId\n          description: The UUID of the volume assosicated with the attachment.\n          in: query\n          schema:\n            type: string\n            uniqueItems: true\n        - name: hostId\n          in: query\n          description: The UUID of the host assosicated with the attachment.\n          schema:\n            type: string\n            uniqueItems: true\n      tags:\n        - Block volume attachments\n      description: Lists information for all volume attachments.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VolumeAttachmentRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Block volume attachments\n      description: Creates a volume attachment.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeAttachmentRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeAttachmentCreateSpec'\n  '/v1beta/{tenantId}/block/attachments/{attachmentId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/attachmentId'\n    get:\n      tags:\n        - Block volume attachments\n      description: Gets volume attachment detail by attachment id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeAttachmentRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Block volume attachments\n      description: Updates a volume attachments\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeAttachmentRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeAttachmentUpdateSpec'\n    delete:\n      tags:\n        - Block volume attachments\n      description: Deletes a volume attachment.\n      responses:\n        '202':\n          description: Accepted\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/snapshots':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: volumeId\n          description: The UUID of the volume assosicated with the snapshot.\n          in: query\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The volume snapshot status\n          schema:\n            type: string\n      tags:\n        - Block volume snapshots\n      description: Lists information for all volume snapshots.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VolumeSnapshotRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Block volume snapshots\n      description: Creates a volume snapshot.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeSnapshotRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeSnapshotCreateSpec'\n  '/v1beta/{tenantId}/block/snapshots/{snapshotId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/snapshotId'\n    get:\n      tags:\n        - Block volume snapshots\n      description: Gets snapshot detail by volume snapshot id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeSnapshotRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Block volume snapshots\n      description: Updates a volume snapshot.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeSnapshotRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n    delete:\n      tags:\n        - Block volume snapshots\n      description: Deletes a volume snapshot.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/volumeGroups':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Block volume group\n      description: Lists information for all volume groups.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VolumeGroupRespSpec'\n              examples:\n                response:\n                  value:\n                    - id: 015184f3-8e73-47fd-8f57-26ea912e2a6b\n                      name: volumeGroup-demo\n                      status: available\n                      description: volumeGroup test\n                      profiles:\n                        - 993c87dc-1928-498b-9767-9da8f901d6ce\n                        - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n                      availabilityZone: default\n                      poolId: 6e14588f-9da9-5ef3-a89d-86375c1352f6\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Block volume group\n      description: Creates a volume group.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeGroupRespSpec'\n              examples:\n                response:\n                  value:\n                    - id: 015184f3-8e73-47fd-8f57-26ea912e2a6b\n                      name: volumeGroup-demo\n                      status: creating\n                      description: volumeGroup test\n                      profiles:\n                        - 993c87dc-1928-498b-9767-9da8f901d6ce\n                        - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n                      availabilityZone: default\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/VolumeGroupCreateSpec'\n  '/v1beta/{tenantId}/block/volumeGroups/{volumeGroupId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/volumeGroupId'\n    get:\n      tags:\n        - Block volume group\n      description: Gets volume group detail by volume group id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeGroupRespSpec'\n              examples:\n                response:\n                  value:\n                    id: 015184f3-8e73-47fd-8f57-26ea912e2a6b\n                    createdAt: '2018-06-03T07:02:35.389Z'\n                    name: volumeGroup-demo\n                    status: available\n                    description: volumeGroup test\n                    profiles:\n                      - 993c87dc-1928-498b-9767-9da8f901d6ce\n                      - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n                    availabilityZone: default\n                    poolId: 6e14588f-9da9-5ef3-a89d-86375c1352f6\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Block volume group\n      description: Updates a volume group.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeGroupRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: volumeGroup-demo\n                description:\n                  type: string\n                  example: volumeGroup test\n                addVolumes:\n                  type: array\n                  items:\n                    type: string\n                    example:\n                      - 993c87dc-1928-498b-9767-9da8f901d6ce\n                      - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n                removeVolumes:\n                  type: array\n                  items:\n                    type: string\n                    example: 1b7277b8-493a-4c8d-bccd-89db580e5f60\n        required: true\n    delete:\n      tags:\n        - Block volume group\n      description: Deletes a volume group.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/replications':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Block Replications\n      description: Lists information for all replications.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: name\n          description: The replication name\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReplicationRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Block Replications\n      description: Create a replication.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationRespSpec'\n              examples:\n                response:\n                  value:\n                    id: e416db95-b6f4-4669-a075-5a873d050a93\n                    createdAt: '2018-05-07T07:02:35.389Z'\n                    updatedAt: null\n                    name: replication-demo\n                    description: volume replication demo\n                    availabilityZone: default\n                    primaryVolumeId: 655ec3e2-5840-4138-b5bd-bce930d2acda\n                    secondaryVolumeId: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n                    primaryReplicationDriverData:\n                      AttachmentId: 0a1bb216-3096-4be0-a392-5124937717b7\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:baec258b-8f79-4bbc-bf97-28addfa903d3-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-baec258b-8f79-4bbc-bf97-28addfa903d3\n                    secondaryReplicationDriverData:\n                      AttachmentId: b3e1d639-66f4-486c-9be9-217b7ac05ac3\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:1f782f63-21cd-4475-9dcb-e2cc0eae7546-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-1f782f63-21cd-4475-9dcb-e2cc0eae7546\n                    ReplicationStatus: enabled\n                    replicationMode: sync\n                    replicationPeriod: 0\n                    profileId: fb210bfe-8809-4a8f-aaf2-53acd98e28ac\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/ReplicationCreateSpec'\n  '/v1beta/{tenantId}/block/replications/{replicationId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/replicationId'\n    get:\n      tags:\n        - Block Replications\n      description: Gets replication detail by replication id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationRespSpec'\n              examples:\n                response:\n                  value:\n                    id: e416db95-b6f4-4669-a075-5a873d050a93\n                    createdAt: '2018-05-07T07:02:35.389Z'\n                    updatedAt: null\n                    name: replication-demo\n                    description: volume replication demo\n                    availabilityZone: default\n                    primaryVolumeId: 655ec3e2-5840-4138-b5bd-bce930d2acda\n                    secondaryVolumeId: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n                    primaryReplicationDriverData:\n                      AttachmentId: 0a1bb216-3096-4be0-a392-5124937717b7\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:baec258b-8f79-4bbc-bf97-28addfa903d3-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-baec258b-8f79-4bbc-bf97-28addfa903d3\n                    secondaryReplicationDriverData:\n                      AttachmentId: b3e1d639-66f4-486c-9be9-217b7ac05ac3\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:1f782f63-21cd-4475-9dcb-e2cc0eae7546-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-1f782f63-21cd-4475-9dcb-e2cc0eae7546\n                    ReplicationStatus: enabled\n                    replicationMode: sync\n                    replicationPeriod: 0\n                    profileId: fb210bfe-8809-4a8f-aaf2-53acd98e28ac\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - Block Replications\n      description: Updates a replication.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationRespSpec'\n              examples:\n                response:\n                  value:\n                    id: e416db95-b6f4-4669-a075-5a873d050a93\n                    createdAt: '2018-05-07T07:02:35.389Z'\n                    updatedAt: null\n                    name: replication-demo\n                    description: volume replication demo\n                    availabilityZone: default\n                    primaryVolumeId: 655ec3e2-5840-4138-b5bd-bce930d2acda\n                    secondaryVolumeId: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n                    primaryReplicationDriverData:\n                      AttachmentId: 0a1bb216-3096-4be0-a392-5124937717b7\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:baec258b-8f79-4bbc-bf97-28addfa903d3-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-baec258b-8f79-4bbc-bf97-28addfa903d3\n                    secondaryReplicationDriverData:\n                      AttachmentId: b3e1d639-66f4-486c-9be9-217b7ac05ac3\n                      HostIp: 192.168.56.100\n                      HostName: opensds-master\n                      Mountpoint: \u003e-\n                        /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:1f782f63-21cd-4475-9dcb-e2cc0eae7546-lun-1\n                      lvPath: \u003e-\n                        /dev/opensds-volumes-default/volume-1f782f63-21cd-4475-9dcb-e2cc0eae7546\n                    ReplicationStatus: enabled\n                    replicationMode: sync\n                    replicationPeriod: 0\n                    profileId: fb210bfe-8809-4a8f-aaf2-53acd98e28ac\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n    delete:\n      tags:\n        - Block Replications\n      description: Deletes a replication.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/replications/detail':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Block Replications\n      description: Lists detail information for all replications.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as name, createdAt\n          schema:\n            type: string\n        - name: name\n          description: The replication name\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReplicationRespSpec'\n              examples:\n                response:\n                  value:\n                    - id: e416db95-b6f4-4669-a075-5a873d050a93\n                      createdAt: '2018-05-07T07:02:35.389Z'\n                      updatedAt: null\n                      name: replication-demo\n                      description: volume replication demo\n                      availabilityZone: default\n                      primaryVolumeId: 655ec3e2-5840-4138-b5bd-bce930d2acda\n                      secondaryVolumeId: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n                      primaryReplicationDriverData:\n                        AttachmentId: 0a1bb216-3096-4be0-a392-5124937717b7\n                        HostIp: 192.168.56.100\n                        HostName: opensds-master\n                        Mountpoint: \u003e-\n                          /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:baec258b-8f79-4bbc-bf97-28addfa903d3-lun-1\n                        lvPath: \u003e-\n                          /dev/opensds-volumes-default/volume-baec258b-8f79-4bbc-bf97-28addfa903d3\n                      secondaryReplicationDriverData:\n                        AttachmentId: b3e1d639-66f4-486c-9be9-217b7ac05ac3\n                        HostIp: 192.168.56.100\n                        HostName: opensds-master\n                        Mountpoint: \u003e-\n                          /dev/disk/by-path/ip-192.168.56.100:3260-iscsi-iqn.2017-10.io.opensds:1f782f63-21cd-4475-9dcb-e2cc0eae7546-lun-1\n                        lvPath: \u003e-\n                          /dev/opensds-volumes-default/volume-1f782f63-21cd-4475-9dcb-e2cc0eae7546\n                      ReplicationStatus: enabled\n                      replicationMode: sync\n                      replicationPeriod: 0\n                      profileId: fb210bfe-8809-4a8f-aaf2-53acd98e28ac\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/replications/{replicationId}/enable':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/replicationId'\n    post:\n      tags:\n        - Block Replications\n      description: Enable Replication.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/block/replications/{replicationId}/disable':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/replicationId'\n    post:\n      tags:\n        - Block Replications\n      description: Disable Replication.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n\n  '/v1beta/{tenantId}/block/replications/{replicationId}/failover':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/replicationId'\n    post:\n      tags:\n        - Block Replications\n      description: Failover Replication.\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FailoverReplicationSpec'\n  '/v1beta/{tenantId}/file/shares':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - File Shares\n      description: Lists information for all file shares.\n      parameters:\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/sortDir'\n      - name: sortKey\n        in: query\n        description: Sorting key word\n        schema:\n          type: string\n      - name: name\n        in: query\n        description: The fileshare name\n        schema:\n          type: string\n      - name: profileId\n        in: query\n        description: The UUID of profile\n        schema:\n          type: string\n      - name: status\n        in: query\n        description: The fileshare status\n        schema:\n          type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileShareRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - File Shares\n      description: Creates a file share.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FileShareCreateSpec'\n  '/v1beta/{tenantId}/file/shares/{fileshareId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/fileshareId'\n    get:\n      tags:\n        - File Shares\n      description: Gets fileshare detail by fileshare id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - File Shares\n      description: Updates a file share.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FileShareUpdateSpec'\n    delete:\n      tags:\n        - File Shares\n      description: Deletes a fileshare.\n      responses:\n        '202':\n          description: Accepted\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/file/snapshots':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - File Share Snapshots\n      description: Lists information for all file share spanshots.\n      parameters:\n      - $ref: '#/components/parameters/limit'\n      - $ref: '#/components/parameters/offset'\n      - $ref: '#/components/parameters/sortDir'\n      - name: sortKey\n        in: query\n        description: Sorting key word\n        schema:\n          type: string\n      - name: name\n        in: query\n        description: The fileshare snapshot name\n        schema:\n          type: string\n      - name: status\n        in: query\n        description: The fileshare snapshot status\n        schema:\n          type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileShareSnapshotRespSpec'\n              examples:\n                response:\n                  value:\n                  - id: 405ded84-b6ff-4ac6-8a3c-cb0e82dcf372\n                    createdAt: 2019-12-04T13:23:13\n                    updatedAt: 2019-12-04T13:31:03\n                    tenantId: e93b4c0934da416eb9c8d120c5d04d96\n                    userId:\n                    fileshareId: eedfbfcf-de50-4476-a2b6-058e6bfa3558\n                    name: snaptest\n                    description: Testing file share snapshot\n                    shareSize: 1\n                    snapshotSize: 1\n                    status: available\n                    profileId: ed273ef0-4602-4790-ae68-09bdbb22d133\n                    metadata: {\"lvPath\": \"/dev/opensds-files-default/test\",\"snapshotID\": \"405ded84-b6ff-4ac6-8a3c-cb0e82dcf372\",\"snapshotName\": \"snaptest\"}\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - File Share Snapshots\n      description: Creates a file share snapshot.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareSnapshotRespSpec'\n              examples:\n                response:\n                  value:\n                  - id: 405ded84-b6ff-4ac6-8a3c-cb0e82dcf372\n                    createdAt: 2019-12-04T13:23:13\n                    tenantId: e93b4c0934da416eb9c8d120c5d04d96\n                    userId:\n                    fileshareId: eedfbfcf-de50-4476-a2b6-058e6bfa3558\n                    name: snaptest\n                    description: Testing file share snapshot\n                    shareSize: 1\n                    snapshotSize: 1\n                    status: creating\n                    profileId: ed273ef0-4602-4790-ae68-09bdbb22d133\n                    metadata: {\"lvPath\": \"/dev/opensds-files-default/test\",\"snapshotID\": \"405ded84-b6ff-4ac6-8a3c-cb0e82dcf372\",\"snapshotName\": \"snaptest\"}\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FileShareSnapshotCreateSpec'\n  '/v1beta/{tenantId}/file/snapshots/{shareSnapshotId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/shareSnapshotId'\n    get:\n      tags:\n        - File Share Snapshots\n      description: Gets fileshare snapshot details by fileshare id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareSnapshotRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n        - File Share Snapshots\n      description: Updates a file share Snapshot.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareSnapshotRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FileShareSnapshotUpdateSpec'\n    delete:\n      tags:\n        - File Share Snapshots\n      description: Deletes a fileshare snapshot.\n      responses:\n        '202':\n          description: Accepted\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/file/acls':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - File Share Acls\n      description: Lists information for all file share acls.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FileShareAclRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - File Share Acls\n      description: Creates a file share acl.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareAclRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        $ref: '#/components/requestBodies/FileShareAclCreateSpec'\n  '/v1beta/{tenantId}/file/acls/{fileshareaclId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/fileshareaclId'\n    get:\n      tags:\n        - File Share Acls\n      description: Gets fileshareacl detail by fileshareacl id.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileShareAclRespSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    delete:\n      tags:\n        - File Share Acls\n      description: Deletes a fileshareacl.\n      responses:\n        '202':\n          description: Accepted\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/host/hosts':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Host\n      description: Lists host information.\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sortDir'\n        - name: sortKey\n          in: query\n          description: Sorting key word, such as hostName, createdAt\n          schema:\n            type: string\n        - name: hostName\n          in: query\n          description: Host name\n          schema:\n            maxLength: 255\n            minLength: 1\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HostRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n      - Host\n      description: Creates host.\n      requestBody:\n        $ref: '#/components/requestBodies/HostCreateSpec'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HostRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n\n  '/v1beta/{tenantId}/host/hosts/{hostId}':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n      - $ref: '#/components/parameters/hostId'\n    get:\n      tags:\n      - Host\n      description: Get details about the host\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HostRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    put:\n      tags:\n      - Host\n      description: Modify host details\n      operationId: putHost\n      requestBody:\n        $ref: '#/components/requestBodies/HostUpdateSpec'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HostRespSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    delete:\n      tags:\n      - Host\n      description: Removes host\n      responses:\n        '200':\n          description: OK\n          content: {}\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '404':\n          $ref: '#/components/responses/HTTPStatus404'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/metrics':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Metrics\n      description: Lists metrics for the specified time series.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetricSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n    post:\n      tags:\n        - Metrics\n      description: Trigger metric collection for the specified driver.\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetricSpec'\n        '400':\n          $ref: '#/components/responses/HTTPStatus400'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectMetricSpec'\n  '/v1beta/{tenantId}/metrics/urls':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Metrics\n      description: Lists urls of metric management tools for visualization, alert management etc.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UrlSpec'\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/metrics/downloadconf':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    get:\n      tags:\n        - Metrics\n      description: download a config file.\n      parameters:\n      - name: conftype\n        in: query\n        required: true\n        description: Name of the tool to which the configuration file to be downloaded from.\n        schema:\n          minimum: 1\n          type: string\n          enum:\n            - prometheus\n            - alertmanager\n            - grafana\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\n  '/v1beta/{tenantId}/metrics/uploadconf':\n    parameters:\n      - $ref: '#/components/parameters/tenantId'\n    post:\n      tags:\n        - Metrics\n      description: upload a config file.\n      parameters:\n      - name: conftype\n        in: query\n        required: true\n        description: Name of the tool to which the configuration file to be uploaded.\n        schema:\n          minimum: 1\n          type: string\n          enum:\n            - prometheus\n            - alertmanager\n            - grafana\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/HTTPStatus401'\n        '403':\n          $ref: '#/components/responses/HTTPStatus403'\n        '500':\n          $ref: '#/components/responses/HTTPStatus500'\nsecurity:\n  - basicAuth: []\nexternalDocs:\n  description:  Unified SODA API for data management across multiple, heterogeneous storage backends.\n  url: 'https://github.com/sodafoundation/api'\nservers:\n  - url: 'https://localhost:50040/'\n  - url: 'http://localhost:50040/'\ncomponents:\n  parameters:\n    apiVersion:\n      name: apiVersion\n      in: path\n      required: true\n      description: API version string\n      schema:\n        type: string\n        pattern: 'v([1-9][0-9]*)((alpha)([1-9][0-9]*)|(beta)([1-9][0-9]*))?'\n    tenantId:\n      name: tenantId\n      in: path\n      required: true\n      description: The tenant UUID in a multi-tenancy environment.\n      schema:\n        type: string\n    dockId:\n      name: dockId\n      in: path\n      required: true\n      description: The UUID of the storage backend (dock) service.\n      schema:\n        type: string\n    poolId:\n      name: poolId\n      in: path\n      required: true\n      description: The UUID of the storage pool.\n      schema:\n        type: string\n    profileId:\n      name: profileId\n      in: path\n      required: true\n      description: The UUID of the profile.\n      schema:\n        type: string\n    fileshareId:\n      name: fileshareId\n      in: path\n      required: true\n      description: The UUID of the file share.\n      schema:\n        type: string\n    fileshareaclId:\n      name: fileshareaclId\n      in: path\n      required: true\n      description: The UUID of the file share acl.\n      schema:\n        type: string\n    volumeId:\n      name: volumeId\n      in: path\n      required: true\n      description: The UUID of the volume.\n      schema:\n        type: string\n    customKey:\n      name: customKey\n      in: path\n      required: true\n      description: The key of the customized properties.\n      schema:\n        type: string\n    attachmentId:\n      name: attachmentId\n      in: path\n      required: true\n      description: The UUID of the volume attachment.\n      schema:\n        type: string\n    snapshotId:\n      name: snapshotId\n      in: path\n      required: true\n      description: The UUID of the volume snapshot.\n      schema:\n        type: string\n    shareSnapshotId:\n      name: shareSnapshotId\n      in: path\n      required: true\n      description: The UUID of the fileshare snapshot.\n      schema:\n        type: string\n    volumeGroupId:\n      name: volumeGroupId\n      in: path\n      required: true\n      description: The UUID of the volume group.\n      schema:\n        type: string\n    replicationId:\n      name: replicationId\n      in: path\n      required: true\n      description: The UUID of the relication.\n      schema:\n        type: string\n    hostId:\n      name: hostId\n      in: path\n      required: true\n      description: The UUID of the host.\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: Number of query results on multiple pages\n      schema:\n        minimum: 1\n        type: integer\n        format: int32\n    offset:\n      name: offset\n      in: query\n      description: Start position of the pagination query\n      schema:\n        minimum: 0\n        type: integer\n        format: int32\n    sortDir:\n      name: sortDir\n      in: query\n      description: Ascending or descending\n      schema:\n        type: string\n        enum:\n        - asc\n        - desc\n  responses:\n    HTTPStatus400:\n      description: BadRequest\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus401:\n      description: NotAuthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus403:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus404:\n      description: The resource does not exist\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus500:\n      description: An unexpected error occured.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n  requestBodies:\n    ReplicationCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReplicationCreateSpec'\n    FailoverReplicationSpec:\n      content:\n        application/json:\n          schema:\n            description: \u003e-\n              FailoverReplicationSpec represents failover replication relationship\n              between the volumes on the primary and secondary sites.\n            type: object\n            properties:\n              allowAttachedVolume:\n                type: boolean\n              secondaryBackendId:\n                type: string\n    ProfileCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProfileCreateSpec'\n    ProfileUpdateSpec:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              description:\n                type: string\n    VolumeCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VolumeCreateSpec'\n    VolumeUpdateSpec:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              description:\n                type: string\n    VolumeExtendSpec:\n      content:\n        application/json:\n          schema:\n            type: object\n            description: 'Extends the size of a volume to a requested size, in gibibytes (GiB).'\n            required:\n              - newSize\n            properties:\n              newSize:\n                type: integer\n                format: int64\n                example: 2\n    VolumeSnapshotCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VolumeSnapshotCreateSpec'\n    VolumeGroupCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VolumeGroupCreateSpec'\n    VolumeAttachmentCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VolumeAttachmentCreateSpec'\n    VolumeAttachmentUpdateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/VolumeAttachmentUpdateSpec'\n    HostCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HostCreateSpec'\n    HostUpdateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HostUpdateSpec'\n    FileShareCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FileShareCreateSpec'\n    FileShareUpdateSpec:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              description:\n                type: string\n    FileShareSnapshotCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FileShareSnapshotCreateSpec'\n    FileShareSnapshotUpdateSpec:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              description:\n                type: string\n    FileShareAclCreateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FileShareAclCreateSpec'\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    BaseModel:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          example: '2017-07-10T14:36:58.014Z'\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          example: '2017-07-10T14:36:58.014Z'\n          readOnly: true\n    DataStorageLoS:\n      type: object\n      properties:\n        recoveryTimeObjective:\n          example: 10\n          description: Recovery Time Objective(RTO) is a maximum acceptable time within which storage must be restored after disaster. For e.g 10 sec.\n          type: integer\n          format: int64\n        provisioningPolicy:\n          default: thick\n          description: The provisioning policy of the pool. It can be thick or thin.\n          type: string\n          enum:\n            - Thin\n            - Thick\n        compression:\n          description: The optimization policy to reduce the number of data bits to save storage space\n          default: false\n          type: boolean\n        deduplication:\n          description: The optimization policy to remove redundant data or file on the storage\n          default: false\n          type: boolean\n        characterCodeSet:\n          description: The code set to store the data\n          example: ASCII\n          type: string\n        maxFileNameLengthBytes:\n          description: The maximum filename length in bytes\n          example: 255\n          type: integer\n          format: int64\n        storageAccessCapability:\n          description: The type of access capability. This can be set of read,write or execute.\n          example: Read\n          type: array\n          items:\n            type: string\n            enum:\n              - Read\n              - Write\n              - Execute\n      description: DataStorageLoS can be used to describe a service option covering\n        storage provisioning and availability.\n    IOConnectivityLoS:\n      type: object\n      properties:\n        accessProtocol:\n          description: The type of access protocol. This can be iscsi, rbd, fibre channel, or DSWare(Data Service Middleware), nvmeof and nfs\n          example: iscsi\n          type: string\n          enum:\n            - iscsi\n            - rbd\n            - fibre_channel\n            - nvmeof\n            - DSWare\n            - NFS\n        maxIOPS:\n          example: 150\n          description: The maximum IOPS(Input/Output Operations Per Second) supported by storage. For e.g. 150IOPS\n          type: integer\n          format: int64\n        minIOPS:\n          example: 50\n          description: The minimum IOPS(Input/Output Operations Per Second) supported by storage. In other words, performance can not drop below this level. For e.g. 50IOPS\n          type: integer\n          format: int64\n        maxBWS:\n          description: The maximum bandwidth supported by storage. For e.g. 5mbps\n          example: 5\n          type: integer\n          format: int64\n        minBWS:\n          description: The minimum bandwidth supported by storage. In other words, performance can not drop below this level. For e.g. 1mbps\n          example: 1\n          type: integer\n          format: int64\n        latency:\n          description: The latency of the storage in ns(nanosec.). For e.g. 1ns\n          example: 1\n          type: integer\n          format: int64\n      description: IOConnectivityLoS can be used to specify the characteristics of storage connectivity.\n    DataProtectionLoS:\n      type: object\n      properties:\n        isIsolated:\n          default: false\n          example: true\n          description: Isolated storage is designed to prevent data corruption and data loss\n          type: boolean\n        minLifetime:\n          description: It is an ISO 8601 duration that specifies the minimum lifetime required for the replica\n          type: string\n          example: P3Y6M4DT12H30M5S\n        RecoveryGeographicObjective:\n          description: Supported failure domain from where data can be restored after disaster\n          example: datacenter\n          type: string\n          enum:\n            - Datacenter\n            - Rack\n            - RackGroup\n            - Region\n            - Row\n            - Server\n        RecoveryPointObjectiveTime:\n          description: It's an ISO 8601 time interval that specifies the maximum source information that may be lost on failure. In the case of isIsolated = false, failure of the domain is not considered.\n          type: string\n          example: P3Y6M4DT12H30M5S\n        RecoveryTimeObjective:\n          description: It specifies the relative time required to make a replica available as a source\n          example: offline\n          type: string\n          enum:\n            - OnlineActive\n            - OnlinePassive\n            - Nearline\n            - Offline\n        ReplicaType:\n          description: This value specify the type of replica\n          example: snapshot\n          type: string\n          enum:\n            - Clone\n            - Mirror\n            - Snapshot\n            - TokenizedClone\n      description: DataProtectionLoS describes a replica that protects data from loss.\n        The requirements must be met collectively by the communication path and the\n        replica.\n    DockSpec:\n      description: \u003e-\n        A backend is initialized by specific driver configuration. Each backend\n        can be regarded as a docking service between SDS controller and storage\n        service.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          required:\n            - name\n            - status\n            - driverName\n            - endpoint\n            - nodeId\n          properties:\n            type:\n              type: string\n              enum:\n                - provisioner\n                - attacher\n            name:\n              type: string\n            description:\n              type: string\n            storageType:\n              type: string\n              enum:\n                - block\n                - file\n                - object\n            status:\n              type: string\n              enum:\n                - available\n                - unavailable\n            driverName:\n              type: string\n              enum:\n                - default\n                - lvm\n                - ceph\n                - cinder\n                - huawei_oceanstor_block\n                - huawei_fusionstorage\n            endpoint:\n              type: string\n              example: '0.0.0.0:50050'\n            nodeId:\n              type: string\n              example: 127.0.0.1\n            metadata:\n              type: object\n    StoragePoolSpec:\n      description: \u003e-\n        A pool is discoveried and updated by a dock service. Each pool can be\n        regarded as a physical storage pool or a virtual storage pool. It is a\n        logical and atomic pool and can be abstracted from any storage platform.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          required:\n            - name\n            - status\n            - availabilityZone\n            - totalCapacity\n            - freeCapacity\n            - dockId\n          properties:\n            name:\n              type: string\n            storageType:\n              type: string\n              enum:\n                - block\n                - file\n                - object\n            description:\n              type: string\n            multiAttach:\n              type: boolean\n            status:\n              type: string\n              enum:\n                - available\n                - unavailable\n            availabilityZone:\n              type: string\n              default: default\n            totalCapacity:\n              type: integer\n              format: int64\n            freeCapacity:\n              type: integer\n              format: int64\n            dockId:\n              type: string\n              example: f4a5e666-c669-4c64-a2a1-8f9ecd560c78\n            extras:\n              $ref: '#/components/schemas/StoragePoolExtraSpec'\n    StoragePoolExtraSpec:\n      description: \u003e-\n        StoragePoolExtraSpec object represents the extra properties of the pool,\n        such as supported capabilities.\n      type: object\n      properties:\n        dataStorage:\n          $ref: '#/components/schemas/DataStorageLoS'\n        ioConnectivity:\n          $ref: '#/components/schemas/IOConnectivityLoS'\n        dataProtection:\n          $ref: '#/components/schemas/DataProtectionLoS'\n        customProperties:\n          type: object\n          additionalProperties:\n            type: object\n          example:\n            key1: value1\n            key2: false\n            key3:\n              key31: value31\n    ProfileCreateSpec:\n      description: A configuration profile is identified by a unique name and ID. With\n        adding extra properties, each profile can contain a set of tags of storage\n        capabilities which are desirable features for a class of applications.\n      required:\n        - name\n        - storageType\n      type: object\n      properties:\n        name:\n          description: The name of the profile\n          minLength: 1\n          maxLength: 255\n          pattern: '[A-Za-z0-9_-]'\n          type: string\n          example: File_Profile\n        storageType:\n          description: The type of the storage. It can be either block, file or object\n          example: block\n          type: string\n          enum:\n          - block\n          - file\n          - object\n        description:\n          description: The description of the profile\n          type: string\n        provisioningProperties:\n          $ref: '#/components/schemas/ProvisioningPropertiesSpec'\n        replicationProperties:\n          $ref: '#/components/schemas/ReplicationPropertiesSpec'\n        snapshotProperties:\n          $ref: '#/components/schemas/SnapshotPropertiesSpec'\n        dataProtectionProperties:\n          $ref: '#/components/schemas/DataProtectionPropertiesSpec'\n        customProperties:\n          $ref: '#/components/schemas/CustomPropertiesSpec'\n    ProfileRespSpec:\n      description: A configuration profile is identified by a unique name and ID. With\n        adding extra properties, each profile can contain a set of tags of storage\n        capabilities which are desirable features for a class of applications.\n      allOf:\n      - $ref: '#/components/schemas/BaseModel'\n      - type: object\n        properties:\n            name:\n              description: The name of the profile\n              minLength: 1\n              maxLength: 255\n              pattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-\\_]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-\\_]*[A-Za-z0-9])$'\n              type: string\n              example: File_Profile\n            storageType:\n              description: The type of the storage. It can be either block, file or object\n              example: block\n              type: string\n              enum:\n              - block\n              - file\n              - object\n            description:\n              description: The is description of the profile\n              type: string\n            provisioningProperties:\n              $ref: '#/components/schemas/ProvisioningPropertiesSpec'\n            replicationProperties:\n              $ref: '#/components/schemas/ReplicationPropertiesSpec'\n            snapshotProperties:\n              $ref: '#/components/schemas/SnapshotPropertiesSpec'\n            dataProtectionProperties:\n              $ref: '#/components/schemas/DataProtectionPropertiesSpec'\n            customProperties:\n              $ref: '#/components/schemas/CustomPropertiesSpec'\n    FileShareCreateSpec:\n      type: object\n      required:\n        - name\n        - size\n      properties:\n        name:\n          type: string\n          minLength: 1\n          maxLength: 255\n          pattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-\\_]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-\\_]*[A-Za-z0-9])$'\n        description:\n          type: string\n        size:\n          type: integer\n          format: int64\n          example: 2\n        availabilityZone:\n          type: string\n          default: default\n        profileId:\n          type: string\n\n    FileShareRespSpec:\n      description: \u003e-\n        FileShare is a file system created by nfs southbound driver, it can be\n        mounted on to physical machine or virtual machine instance.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            name:\n              type: string\n            description:\n              type: string\n            size:\n              type: integer\n              format: int64\n              example: 2\n            availabilityZone:\n              type: string\n              default: default\n            status:\n              type: string\n              readOnly: true\n            profileId:\n              type: string\n            protocols:\n              type: array\n              items:\n                type: string\n              readOnly: true\n            exportLocations:\n              type: array\n              items:\n                type: string\n              readOnly: true\n            metadata:\n              type: object\n              readOnly: true\n              additionalProperties:\n                type: string\n              example:\n                lvPath: string\n                nfsFileshareID: string\n                nfsFileshareName: string\n    FileShareSnapshotCreateSpec:\n      type: object\n      required:\n      - name\n      - fileshareId\n      properties:\n        fileshareId:\n          type: string\n        name:\n          minLength: 1\n          maxLength: 255\n          type: string\n        description:\n          type: string\n    FileShareSnapshotRespSpec:\n      description: Snapshot of file share has following specification.\n      allOf:\n      - $ref: '#/components/schemas/BaseModel'\n      - type: object\n        properties:\n          fileshareId:\n            type: string\n          snapId:\n            type: string\n          createdAt:\n            type: string\n          updatedAt:\n            type: string\n          tenantId:\n            type: string\n            readOnly: true\n          userId:\n            type: string\n            readOnly: true\n          name:\n            type: string\n          description:\n            type: string\n          shareSize:\n            type: integer\n            format: int64\n            example: 2\n          snapshotSize:\n            type: integer\n            format: int64\n            example: 2\n          status:\n            type: string\n            readOnly: true\n          profileId:\n            type: string\n          metadata:\n            type: object\n            readOnly: true\n            additionalProperties:\n              type: string\n            example:\n              snapshotId: string\n              snapshotName: string\n              lvPath: string\n    FileShareAclCreateSpec:\n      type: object\n      required:\n        - fileshareId\n        - type\n        - accessCapability\n        - accessTo\n      properties:\n        fileshareId:\n          type: string\n        type:\n          type: string\n        accessCapability:\n          type: array\n          items:\n            type: string\n            enum:\n              - Read\n              - Write\n              - Execute\n        accessTo:\n          type: string\n        description:\n          type: string\n\n    FileShareAclRespSpec:\n      description: File Share Acl API describes the  acl of file share resource\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            fileshareId:\n              type: string\n            type:\n              type: string\n            accessCapability:\n              type: array\n              items:\n                type: string\n                enum:\n                  - Read\n                  - Write\n                  - Execute\n            accessTo:\n              type: string\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            description:\n              type: string\n            status:\n              type: string\n              readOnly: true\n            profileId:\n              type: string\n              readOnly: true\n            metadata:\n              type: object\n              readOnly: true\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n    ProvisioningPropertiesSpec:\n      description: \u003e-\n        ProvisioningPropertiesSpec represents some suggested properties for\n        performing provisioning policies.\n      type: object\n      properties:\n        dataStorage:\n          $ref: '#/components/schemas/DataStorageLoS'\n        ioConnectivity:\n          $ref: '#/components/schemas/IOConnectivityLoS'\n    ReplicationPropertiesSpec:\n      type: object\n      properties:\n        dataProtection:\n          $ref: '#/components/schemas/DataProtectionLoS'\n        replicaInfos:\n          type: object\n          properties:\n            replicaUpdateMode:\n              description: It specify the replica update mode. It can be Active, Adaptive, Asynchronous, Synchronous\n              example: Active\n              type: string\n              enum:\n                - Active\n                - Adaptive\n                - Asynchronous\n                - Synchronous\n            replcationBandwidth:\n              description: The bandwidth required for replication in MB\n              example: 5\n              type: integer\n              format: int64\n            replicationPeriod:\n              description: It is an ISO 8601 interval that specify the required time for replication\n              type: string\n              example: P3Y6M4DT12H30M5S\n            consistencyEnalbed:\n              description: It specify the data consitency in replication\n              default: false\n              example: true\n              type: boolean\n      description: ReplicationPropertiesSpec represents some suggested properties\n        for performing replication policies.\n    SnapshotPropertiesSpec:\n      type: object\n      properties:\n        schedule:\n          type: object\n          properties:\n            datetime:\n              example: \"2019-09-07T07:02:35.389\"\n              type: string\n              format: date-time\n            occurrence:\n              description: The occurence of snapshot creation\n              example: Daily\n              type: string\n              enum:\n                - Daily\n                - Weekly\n                - Monthly\n        retention:\n          type: object\n          properties:\n            duration:\n              description: The retention time of snapshot in days\n              example: 15\n              type: integer\n              format: int64\n            number:\n              description: The number of snapshot at a particular time\n              example: 10\n              type: integer\n              format: int64\n        topology:\n          type: object\n          properties:\n            bucket:\n\n              type: string\n      description: SnapshotPropertiesSpec represents some suggested properties for\n        performing snapshot policies.\n    DataProtectionPropertiesSpec:\n      type: object\n      properties:\n        dataProtection:\n          $ref: '#/components/schemas/DataProtectionLoS'\n        consistencyEnalbed:\n          description: It specify the data consitency in dataprotection\n          default: false\n          example: true\n          type: boolean\n      description: DataProtectionPropertiesSpec represents some suggested properties\n        for performing data protection policies.\n    CustomPropertiesSpec:\n      type: object\n      additionalProperties: {}\n      description: CustomPropertiesSpec is a map of keys and JSON object that represents\n        the customized properties of profile, such as requested capabilities including\n        disk type, latency, de-duplicaiton, compression and so forth.\n      example:\n        key1: value1\n        key2: false\n        key3:\n          key31: value31\n    VolumeCreateSpec:\n      description: \u003e-\n        Volume is an block device created by storage service, it can be attached\n        to physical machine or virtual machine instance.\n      type: object\n      required:\n        - name\n        - size\n      properties:\n        name:\n          type: string\n        multiAttach:\n          type: boolean\n        description:\n          type: string\n        size:\n          type: integer\n          format: int64\n          example: 2\n        availabilityZone:\n          type: string\n          default: default\n        profileId:\n          type: string\n        poolId:\n          type: string\n        snapshotId:\n          type: string\n        groupId:\n          type: string\n        snapshotFromCloud:\n          type: boolean\n        replicationId:\n          type: string\n    VolumeRespSpec:\n      description: \u003e-\n        Volume is an block device created by storage service, it can be attached\n        to physical machine or virtual machine instance.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            name:\n              type: string\n            multiAttach:\n              type: boolean\n            description:\n              type: string\n            size:\n              type: integer\n              format: int64\n              example: 2\n            availabilityZone:\n              type: string\n              default: default\n            status:\n              type: string\n              readOnly: true\n            profileId:\n              type: string\n            poolId:\n              type: string\n            snapshotId:\n              type: string\n            groupId:\n              type: string\n            snapshotFromCloud:\n              type: boolean\n            replicationId:\n              type: string\n            identifier:\n              type: object\n              properties:\n                durableName:\n                  type: string\n                durableNameFormat:\n                  type: string\n            replicationDriverData:\n              type: object\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n            metadata:\n              type: object\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n\n    VolumeAttachmentCreateSpec:\n      description: Attachment is a description of volume attached resource.\n      required:\n      - volumeId\n      - hostId\n      type: object\n      properties:\n        hostId:\n          type: string\n        volumeId:\n          type: string\n        attachMode:\n          type: string\n          enum:\n          - ro\n          - rw\n    VolumeAttachmentRespSpec:\n      description: Attachment is a description of volume attached resource.\n      allOf:\n      - $ref: '#/components/schemas/BaseModel'\n      - type: object\n        properties:\n          tenantId:\n            type: string\n            readOnly: true\n          userId:\n            type: string\n            readOnly: true\n          attachMode:\n            type: string\n            enum:\n            - rw\n            - ro\n          hostId:\n            type: string\n          volumeId:\n            type: string\n          mountpoint:\n            type: string\n          status:\n            type: string\n            readOnly: true\n          connectionInfo:\n            $ref: '#/components/schemas/ConnectionInfo'\n\n\n    VolumeAttachmentUpdateSpec:\n      type: object\n      properties:\n        mountpoint:\n          type: string\n\n\n    ConnectionInfo:\n      description: \u003e-\n        ConnectionInfo is a structure for all properties of connection when\n        creating a volume attachment.\n      type: object\n      properties:\n        driverVolumeType:\n          type: string\n        data:\n          type: object\n          additionalProperties:\n            type: object\n          example:\n            key1: value1\n            key2: false\n            key3:\n              key31: value31\n        extraProperties:\n          type: object\n          additionalProperties:\n            type: object\n          example:\n            key1: value1\n            key2: false\n            key3:\n              key31: value31\n    VolumeSnapshotCreateSpec:\n      type: object\n      required:\n        - name\n        - volumeId\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        volumeId:\n          type: string\n        profileId:\n          type: string\n    VolumeSnapshotRespSpec:\n      description: Snapshot is a description of volume snapshot resource.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            name:\n              type: string\n            description:\n              type: string\n            size:\n              type: integer\n              format: int64\n              readOnly: true\n            status:\n              type: string\n              readOnly: true\n            volumeId:\n              type: string\n            profileId:\n              type: string\n            metadata:\n              type: object\n              example:\n                key1: value1\n                key2: value2\n    VolumeGroupCreateSpec:\n      type: object\n      required:\n        - profiles\n        - name\n      properties:\n        name:\n          type: string\n          example: volumeGroup-demo\n        description:\n          type: string\n          example: volume group test\n        profiles:\n          type: array\n          items:\n            type: string\n          example:\n            - 993c87dc-1928-498b-9767-9da8f901d6ce\n            - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n    VolumeGroupRespSpec:\n      description: \u003e-\n        Volume group contains a list of volumes that are used in the same\n        application.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            name:\n              type: string\n              example: volumeGroup-demo\n            description:\n              type: string\n              example: volume group test\n            availabilityZone:\n              type: string\n              example: default\n              readOnly: true\n            status:\n              type: string\n              readOnly: true\n            poolId:\n              type: string\n              readOnly: true\n            profiles:\n              type: array\n              items:\n                type: string\n              example:\n                - 993c87dc-1928-498b-9767-9da8f901d6ce\n                - 90d667f0-e9a9-427c-8a7f-cc714217c7bd\n    ReplicationCreateSpec:\n      type: object\n      required:\n        - name\n        - primaryVolumeId\n        - secondaryVolumeId\n        - availabilityZone\n        - replicationPeriod\n        - replicationMode\n        - profileId\n      properties:\n        name:\n          type: string\n          example: replication-demo\n        description:\n          type: string\n          example: This is replication demo api specs\n        availabilityZone:\n          type: string\n          example: default\n        primaryVolumeId:\n          type: string\n          example: 655ec3e2-5840-4138-b5bd-bce930d2acda\n        secondaryVolumeId:\n          type: string\n          example: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n        replicationMode:\n          type: string\n          enum:\n            - sync\n            - async\n        replicationPeriod:\n          type: integer\n          format: int64\n          minimum: 0\n        profileId:\n          type: string\n          example: a66976e0-9fbf-4cf3-912a-e891dd41b1a5\n    ReplicationRespSpec:\n      description: \u003e-\n        Replication represents a replication relationship between the volumes on\n        the primary and secondary sites.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            tenantId:\n              type: string\n              readOnly: true\n            userId:\n              type: string\n              readOnly: true\n            name:\n              type: string\n              example: replication-demo\n            description:\n              type: string\n              example: This is replication demo api specs\n            availabilityZone:\n              type: string\n              example: default\n            replicationStatus:\n              type: string\n              enum:\n                - available\n                - creating\n                - deleting\n                - enabling\n                - disabling\n                - failing_over\n                - failing_back\n                - error\n                - error_deleting\n                - error_enabling\n                - error_disabling\n                - error_failover\n                - error_failback\n                - enabled\n                - disabled\n                - failed_over\n              readOnly: true\n            primaryVolumeId:\n              type: string\n              example: 655ec3e2-5840-4138-b5bd-bce930d2acda\n            secondaryVolumeId:\n              type: string\n              example: 8cfa9839-7fb8-4b16-ae7a-5eb7f2dafd0b\n            primaryReplicationDriverData:\n              type: object\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n            secondaryReplicationDriverData:\n              type: object\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n            replicationMode:\n              type: string\n              enum:\n                - sync\n                - async\n            replicationPeriod:\n              type: integer\n              format: int64\n              minimum: 0\n            profileId:\n              type: string\n              example: a66976e0-9fbf-4cf3-912a-e891dd41b1a5\n\n    ErrorSpec:\n      description: \u003e-\n        Detailed HTTP error response, which consists of a HTTP status code, and\n        a custom error message unique for each failure case.\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n    VersionSpec:\n      description: \u003e-\n        Lists information for all SDS controller API versions. An API version is\n        a  string that consists of a 'v' + number, or 'v' + number + 'alpha'  or\n        'beta' + number.\n      type: object\n      required:\n        - name\n        - status\n        - updated\n      properties:\n        name:\n          type: string\n          example: v1beta\n        status:\n          type: string\n          enum:\n            - CURRENT\n            - SUPPORTED\n            - DEPRECATED\n        updated:\n          type: string\n          format: date-time\n          example: '2017-04-10T14:36:58.014Z'\n    HostCreateSpec:\n      required:\n      - accessMode\n      - osType\n      - ip\n      - hostName\n      type: object\n      properties:\n        osType:\n          type: string\n          enum:\n          - linux\n          - windows\n          - esxi\n        hostName:\n          type: string\n          minLength: 1\n          maxLength: 64\n          pattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$'\n          description: Only numbers, letters, '-', '.' in ASCII characters are allowed.\n          example: opensds-node1\n        ip:\n          type: string\n          description: IP address of the host, mandatory\n          pattern: \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n          example: 8.8.8.8\n        port:\n          maximum: 65535\n          minimum: 1\n          type: integer\n          description: Host access port\n          format: int32\n          example: 22\n        accessMode:\n          type: string\n          description: The way to access host, system will access host to get more information and install agent if accessMode is 'agent'. 'port', 'username'and 'password' are requried in 'agent' mode.\n          enum:\n          - agent\n          - agentless\n        username:\n          maxLength: 255\n          minLength: 1\n          type: string\n          description: username to access Host\n          example: root\n        password:\n          maxLength: 1024\n          minLength: 1\n          type: string\n          description: password to access Host\n          example: password\n        availabilityZones:\n          type: array\n          nullable: true\n          items:\n            type: string\n            maxLength: 64\n            minLength: 1\n            description: name or uuid of availablity zone\n          uniqueItems: true\n        initiators:\n          type: array\n          nullable: true\n          description: Initiator of host\n          items:\n            type: object\n            properties:\n              portName:\n                maxLength: 255\n                minLength: 1\n                type: string\n                description: Host initiator. Set the wwn, iSCSI type of the host whose\n                  FC type is set to iqn of the host\n                example: 20000024ff5bb888\n              protocol:\n                type: string\n                description: Initiator type FC or iSCSI\n                example: iscsi\n                enum:\n                - iscsi\n                - fibre_channel\n                - nvmeof\n      description: Host is a consumer of volume from storage.\n\n    HostUpdateSpec:\n      type: object\n      properties:\n        hostName:\n          type: string\n          minLength: 1\n          maxLength: 64\n          pattern: '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$'\n          description: Only numbers, letters, '-', '.' in ASCII characters are allowed.\n          example: opensds-node1\n        ip:\n          type: string\n          description: IP address of the host, mandatory\n          pattern: \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n          example: 8.8.8.8\n        port:\n          maximum: 65535\n          minimum: 1\n          type: integer\n          description: Host access port\n          format: int32\n          example: 22\n        accessMode:\n          type: string\n          description: The way to access host, system will access host to get more information and install agent if accessMode is 'agent'. 'port', 'username'and 'password' are requried in 'agent' mode.\n          enum:\n          - agent\n          - agentless\n        username:\n          maxLength: 255\n          minLength: 1\n          type: string\n          description: username to access Host\n          example: root\n        password:\n          maxLength: 1024\n          minLength: 1\n          type: string\n          description: password to access Host\n          example: password\n        availabilityZones:\n          type: array\n          nullable: true\n          items:\n            type: string\n            maxLength: 64\n            minLength: 1\n            description: name or uuid of availablity zone\n          uniqueItems: true\n        initiators:\n          type: array\n          nullable: true\n          description: Initiator of host\n          items:\n            type: object\n            properties:\n              portName:\n                maxLength: 255\n                minLength: 1\n                type: string\n                description: Host initiator. Set the wwn, iSCSI type of the host whose\n                  FC type is set to iqn of the host\n                example: 20000024ff5bb888\n              protocol:\n                type: string\n                description: Initiator type FC or iSCSI\n                example: iscsi\n                enum:\n                - iscsi\n                - fibre_channel\n                - nvmeof\n      description: Host is a consumer of volume from storage.\n    HostRespSpec:\n      allOf:\n      - $ref: '#/components/schemas/BaseModel'\n      - type: object\n        properties:\n          id:\n            type: string\n          tenantId:\n            type: string\n          hostName:\n            type: string\n          osType:\n            type: string\n          accessMode:\n            type: string\n          ip:\n            type: string\n          port:\n            type: string\n          username:\n            type: string\n          availabilityZones:\n            type: array\n            items:\n              type: string\n          initiators:\n            type: array\n            items:\n              type: object\n              properties:\n                portName:\n                  type: string\n                  example: 20000024ff5bb888\n                protocol:\n                  type: string\n                  example: iscsi\n                  enum:\n                  - iscsi\n                  - fibre_channel\n                  - nvmeof\n\n      description: Host is a consumer of volume from storage.\n    MetricSpec:\n      description: \u003e-\n        Metric spec represents metrics of different type, which has name, instanceID label, timestamp , value etc..\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          required:\n            - name\n          properties:\n            instanceID:\n              type: string\n              readOnly: true\n            instanceName:\n              type: string\n              readOnly: true\n            job:\n              type: string\n            name:\n              type: string\n              default: default\n            unit:\n              type: string\n              readOnly: true\n            aggrType:\n              type: string\n            metricValues:\n              type: array\n              description: Metric values for the timestamp\n              items:\n                type: object\n                properties:\n                  timestamp:\n                    type: integer\n                    format: int64\n                    description: Timestamp of the metric\n                    example: 1575363783\n                  value:\n                    type: number\n                    description: Value of the metric for this timestamp\n                    example: 16.74\n            labels:\n              type: object\n              additionalProperties:\n                type: string\n              example:\n                key1: value1\n                key2: value2\n    CollectMetricSpec:\n      description: \u003e-\n        Collect Metric spec specifies the driver to trigger collect metrics action.\n      allOf:\n        - type: object\n          required:\n            - driverType\n          properties:\n            driverType:\n              type: string\n              enum:\n                - lvm\n                - ceph\n                - huawei_oceanstor_block\n    UrlSpec:\n      description: \u003e-\n        Lists information for all url which can be used to access telemetry related services like grafana and alert manager.\n      type: object\n      required:\n        - name\n        - url\n        - desc\n      properties:\n        name:\n          type: string\n          example: Grafana\n        url:\n          type: string\n          example: http://localhost:3000\n        desc:\n          type: string\n          example: Open Grafana tool to visualize collected metric\n",
			"canonicalURL": "/github.com/sodafoundation/api@df1bf3d6aeff2469c87616d90ccacaf7fff91802/-/blob/openapi-spec/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sodafoundation/api/blob/df1bf3d6aeff2469c87616d90ccacaf7fff91802/openapi-spec/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/v1beta/{tenantId}/file/snapshots/{shareSnapshotId}\": get: responses: 200: contents: application/json: generate schema: allOf: merge properties: try to merge conflicting property schemas: schema format mismatch:  and date-time"
}