{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/docs-is"
		},
		"file": {
			"name": "approvals.yaml",
			"size": 0,
			"path": "en/docs/apis/restapis/approvals.yaml",
			"byteSize": 15349,
			"content": "openapi: 3.0.1\ninfo:\n  title: WSO2 Identity Server - Workflow Approval API Definition\n  description: |\n    This is the RESTful API for a user to manage pending approvals in WSO2 Identity Server. This API can be used to retrieve pending approvals and update the status of the approval tasks for the authenticated user.\n  contact:\n    name: WSO2 Identity Server\n    url: https://wso2.com/identity-and-access-management/\n    email: architecture@wso2.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: v1\nservers:\n- url: https://{serverUrl}/t/{tenantDomain}/api/users/v1\n  variables:\n    serverUrl:\n      default: localhost:9443\n    tenantDomain:\n      default: carbon.super\nsecurity:\n- OAuth2: []\n- BasicAuth: []\ntags:\n- name: me\n  description: Operations for the authenticated user.\npaths:\n  /me/approval-tasks:\n    get:\n      tags:\n      - me\n      summary: Retrieves available approvals for the authenticated user\n      description: |\n        Retrieve the available approval tasks in the system for the authenticated user. This API returns the following types of approvals:\n          * READY - Tasks that are _claimable_ by the user. If a particular task is in the READY state, the user is eligible to assign the task to themself and complete it.\n          * RESERVED -  Tasks that are _assigned_ to the user and to be approved by this user.\n          * COMPLETED - Tasks that are already _completed_ (approved or denied) by this user.\n\n        \u003cb\u003ePermission required:\u003c/b\u003e\n            * /permission/admin/manage/humantask/viewtasks\n        \u003cb\u003eScope required:\u003c/b\u003e\n            * internal_humantask_view\n\n         A user can also invoke the endpoint with the following query parameters.\n      operationId: listApprovalTasksForLoggedInUser\n      parameters:\n      - name: limit\n        in: query\n        description: Maximum number of records to return\n        schema:\n          minimum: 0\n          type: integer\n          format: int32\n      - name: offset\n        in: query\n        description: Number of records to skip for pagination\n        schema:\n          minimum: 0\n          type: integer\n          format: int32\n      - name: status\n        in: query\n        description: |\n          Approval task's status to filter tasks by their status:\n           * **RESERVED** - Tasks that are **assigned to** the authenticated user.\n           * **READY** - Tasks that **can be assigned to** and **can be approved by** the authenticated user.\n           * **COMPLETED** - Tasks that are **completed by** the user\n           * \\\u003cempty\\\u003e - **All** the viewable tasks will be retrieved if this parameter is not specified.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: object\n      responses:\n        200:\n          description: Array of approval tasks matching the search criteria\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TaskSummary'\n            application/json:\n              example:\n              - id: \"453\"\n                name: '{http://ht.bpel.mgt.workflow.identity.carbon.wso2.org}testTask'\n                presentationSubject: Update Claims\n                presentationName: SampleWorkflowTask\n                taskType: TASK\n                status: RESERVED\n                priority: 0\n                createdTimeInMillis: \"1565597712157\"\n              - id: \"452\"\n                name: '{http://ht.bpel.mgt.workflow.identity.carbon.wso2.org}testTask'\n                presentationSubject: Update Claims\n                presentationName: SampleWorkflowTask\n                taskType: TASK\n                status: COMPLETED\n                priority: 0\n                createdTimeInMillis: \"1565597675414\"\n              - id: \"451\"\n                name: '{http://ht.bpel.mgt.workflow.identity.carbon.wso2.org}testTask'\n                presentationSubject: Update Claims\n                presentationName: SampleWorkflowTask\n                taskType: TASK\n                status: READY\n                priority: 0\n                createdTimeInMillis: \"1565597569021\"\n        400:\n          description: Invalid input request\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Resource Forbidden\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/approval-tasks/{task-id}:\n    get:\n      tags:\n      - me\n      summary: Retrieves an approval task by the task-id\n      description: |\n        Retrieves information of a specific approval task identified by the task-id \u003cbr/\u003e\n        \u003cb\u003ePermission required:\u003c/b\u003e\n            * /permission/admin/manage/humantask/viewtasks\n        \u003cb\u003eScope required:\u003c/b\u003e\n            * internal_humantask_view\n      operationId: getApprovalTaskInfo\n      parameters:\n      - name: task-id\n        in: path\n        description: Task ID\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Detailed information of the approval task identified by the\n            task-id\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/TaskData'\n            application/json:\n              example:\n                id: \"452\"\n                subject: Update Claims\n                description: You have a request to approve claim update action of\n                  a user.\n                priority: 0\n                initiator: admin\n                approvalStatus: APPROVE\n                assignees:\n                - key: group\n                  value: admin\n                properties:\n                - key: REQUEST ID\n                  value: 34172334-fccb-4ef4-9830-08c3caeaab9e,\n                - key: Username\n                  value: aysh234,\n                - key: User Store Domain\n                  value: PRIMARY,\n                - key: Profile\n                  value: default,\n                - key: Claims\n                  value: http://wso2.org/claims/organization:,http://wso2.org/claims/telephone:,http://wso2.org/claims/im:,http://wso2.org/claims/country:Sri\n                    Lanka,http://wso2.org/claims/mobile:,http://wso2.org/claims/emailaddress:ayesha@wso2.com,profileConfiguration:default,http://wso2.org/claims/lastname:Dissanayaka,http://wso2.org/claims/url:,http://wso2.org/claims/givenname:Ayesha,\n        400:\n          description: Invalid input request\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Resource Forbidden\n          content: {}\n        404:\n          description: The specified resource is not found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        409:\n          description: Element Already Exists\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal Server Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me/approval-tasks/{task-id}/state:\n    put:\n      tags:\n      - me\n      summary: Changes the state of an approval task\n      description: |\n        Update the approval task status by defining one of the following actions:\n         * CLAIM - Reserve the task for the user. Status of the task will be changed from READY to RESERVED.\n         * RELEASE - Release the task for other users to claim. Status of the task will be changed from RESERVED to READY.\n         * APPROVE - Approve the task. Status of the task will be changed to COMPLETED.\n         * REJECT - Deny the task. Status of the task will be changed to COMPLETED.\n         \u003cbr/\u003e\n\n        \u003cb\u003ePermission required:\u003c/b\u003e\n            * /permission/admin/manage/humantask/viewtasks\n        \u003cb\u003eScope required:\u003c/b\u003e\n            * internal_humantask_view\n      operationId: updateStateOfTask\n      parameters:\n      - name: task-id\n        in: path\n        description: Task ID\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: To which state the task should be changed.\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/State'\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Invalid input request\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Resource Forbidden\n          content: {}\n        404:\n          description: The specified resource is not found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal Server Error\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: next-state\ncomponents:\n  schemas:\n    TaskSummary:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID to represent an Approval Task\n          example: \"451\"\n        name:\n          type: string\n          description: Unique name for the Approval Task\n          example: s367:testTask\n        presentationSubject:\n          type: string\n          description: Display value for Approval Operation\n          example: Add new Role\n        presentationName:\n          type: string\n          description: Display value for Approval Task\n          example: sampleTask\n        taskType:\n          type: string\n          description: Type of the Approval\n          example: TASK\n        status:\n          type: string\n          description: State of the Approval task\n          example: READY\n          enum:\n          - READY\n          - RESERVED\n          - COMPLETED\n        priority:\n          type: integer\n          description: Priority of the Approval task\n          example: 0\n        createdTimeInMillis:\n          type: string\n          description: The time that the operation for approval initiated\n          example: \"1565597569021\"\n    TaskData:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID to represent a approval task\n          example: \"451\"\n        subject:\n          type: string\n          description: Subject of the Approval\n          example: Add new Role\n        description:\n          type: string\n          description: Description on the Approval task\n          example: Addes a new role to the system\n        priority:\n          type: integer\n          description: Priority of the Approval task\n          example: 0\n        initiator:\n          type: string\n          description: The user who initiated the task\n          example: some-user-name\n        approvalStatus:\n          type: string\n          description: |\n            Available only for the completed Tasks, APPROVED or REJECTED if the task has been completed, PENDING otherwise\n          example: APPROVE\n          enum:\n          - PENDING\n          - APPROVED\n          - REJECTED\n        assignees:\n          type: array\n          description: |\n            To whom the task is assigned:\n              * user - username(s) if the task is reserved for specific user(s).\n              * group - role name(s) if the task is assignable for group(s).\n          items:\n            $ref: '#/components/schemas/Property'\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n    Property:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    State:\n      type: object\n      properties:\n        action:\n          type: string\n          description: Action to perform on the task.\n          example: APPROVE\n          enum:\n          - CLAIM\n          - RELEASE\n          - APPROVE\n          - REJECT\n    Error:\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: string\n          example: some_error_code\n        message:\n          type: string\n          example: Some Error Message\n        description:\n          type: string\n          example: Some Error Description\n        traceId:\n          type: string\n          example: Some Correlation for Error Instance\n  responses:\n    Conflict:\n      description: Element Already Exists\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n    Created:\n      description: Item Created\n      content: {}\n    Deleted:\n      description: Item Deleted\n      content: {}\n    Forbidden:\n      description: Resource Forbidden\n      content: {}\n    InvalidInput:\n      description: Invalid input request\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: The specified resource is not found\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n    OK:\n      description: OK\n      content: {}\n    ServerError:\n      description: Internal Server Error\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Unauthorized\n      content: {}\n  parameters:\n    taskIdPathParam:\n      name: task-id\n      in: path\n      description: Task ID\n      required: true\n      schema:\n        type: string\n    offsetQueryParam:\n      name: offset\n      in: query\n      description: Number of records to skip for pagination\n      schema:\n        minimum: 0\n        type: integer\n        format: int32\n    limitQueryParam:\n      name: limit\n      in: query\n      description: Maximum number of records to return\n      schema:\n        minimum: 0\n        type: integer\n        format: int32\n    statusQueryParam:\n      name: status\n      in: query\n      description: |\n        Approval task's status to filter tasks by their status:\n         * **RESERVED** - Tasks that are **assigned to** the authenticated user.\n         * **READY** - Tasks that **can be assigned to** and **can be approved by** the authenticated user.\n         * **COMPLETED** - Tasks that are **completed by** the user\n         * \\\u003cempty\\\u003e - **All** the viewable tasks will be retrieved if this parameter is not specified.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: object\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://localhost:9443/oauth2/authorize\n          tokenUrl: https://localhost:9443/oauth2/token\n          scopes: {}\n",
			"canonicalURL": "/github.com/wso2/docs-is@2d7e7ea75fa504fce95d6132d1246762ff69ed21/-/blob/en/docs/apis/restapis/approvals.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/docs-is/blob/2d7e7ea75fa504fce95d6132d1246762ff69ed21/en/docs/apis/restapis/approvals.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/me/approval-tasks\": get: parameters: \"status\": nested objects not allowed"
}