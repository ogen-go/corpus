{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bcgov/OCWA"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "microservices/policyApi/v1/spec/v1.yaml",
			"byteSize": 5873,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: OCWA Policy API\n  license:\n    name: Apache 2.0\n  description: |-\n    # OCWA Policy API\n    This is the documentation for the OCWA Policy API.\nservers:\n  - url: '/v1'\ntags:\n  - name: Status\n    description: API status\n\npaths:\n  /status:\n    get:\n      summary: Return overall API status\n      description: Returns the overall API status\n      tags:\n        - Status\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/status'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  '/':\n    get:\n      summary: Get the policy\n      description: Returns the policy\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getPolicy'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      summary: (Over)write the policy\n      description: \u003e-\n        Creates the policy if it doesn't already exist, otherwise it overwrites the existing policy\n      responses:\n        '201':\n          description: Wrote Policy\n        '202':\n          description: Accepted existing file\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n  '/{ruleName}':\n    parameters:\n      - $ref: '#/components/parameters/ruleName'\n    get:\n      summary: Get a specific rule by name\n      description: Returns the contents of that specific rule\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ruleObject'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\n    post:\n      summary: Over(write) a specific rule\n      description: \u003e-\n        Write a rule to the corresponding name, if one already exists it will be replaced, otherwise it will be created\n      responses:\n        '201':\n          description: Created new rule\n        '202':\n          description: Accepted existing file\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '500':\n          $ref: '#/components/responses/500InternalServerError'\ncomponents:\n  parameters:\n    ruleName:\n      name: ruleName\n      in: path\n      description: The rule name\n      required: true\n      schema:\n        type: string\n        pattern: '^[a-fA-F0-9]+$'\n        example: testRule\n  responses:\n    401Unauthorized:\n      description: Unauthorized\n    404NotFound:\n      description: Not Found\n    500InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n  schemas:\n    errorResponse:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n          example: Something exploded\n        code:\n          type: integer\n          format: int32\n          minimum: 0\n          description: Error code\n          example: 42\n    status:\n      type: object\n      properties:\n        endpoint_load:\n          type: integer\n          format: int32\n          minimum: 0\n          description: Number of calls in progress\n          example: 0\n        operational:\n          type: boolean\n          description: Policy API functional\n          example: true\n        policy_endpoint:\n          $ref: '#/components/schemas/statusEndpointState'\n        storage_endpoint:\n          $ref: '#/components/schemas/statusEndpointState'\n    statusEndpointState:\n      type: object\n      properties:\n        endpoint:\n          type: string\n          format: url\n          description: Endpoint URL\n          example: 'http://example.endpoint/v1'\n        name:\n          type: string\n          description: Endpoint Name\n          example: Example Endpoint\n        status:\n          type: boolean\n          description: Endpoint Reachability\n          example: true\n    policyArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/ruleObject'\n    ruleObject:\n      type: object\n      properties:\n        _id.$oid:\n          type: string\n          description: Rule Object Id\n          pattern: '^[a-fA-F0-9]{24}$'\n          example: ff4c5d676443a37cc86ea7e0\n        name:\n          type: string\n          description: Rule Name\n          pattern: '^[a-zA-Z0-9]+$'\n          example: ruleName\n        source:\n          type: string\n          description: The code to execute on the file.\n          example: ${file.size}\u003c500\n        mandatory:\n          type: boolean\n          description: Indicates if a file must pass this rule for a submission to be valid\n          example: true\n    getPolicy:\n      type: object\n      properties:\n        results:\n          $ref: '#/components/schemas/policyArray'\n\n\n  securitySchemes:\n    jwtAuth:\n      type: jwt\n      in: header\n      name: Authorization\nsecurity:\n  - jwtAuth: []\n",
			"canonicalURL": "/github.com/bcgov/OCWA@e0bd0763ed1e3c0acc498cb1689778b4e22a475c/-/blob/microservices/policyApi/v1/spec/v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bcgov/OCWA/blob/e0bd0763ed1e3c0acc498cb1689778b4e22a475c/microservices/policyApi/v1/spec/v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/\": get: security: security \"jwtAuth\" (index 0): unknown security type \"jwt\""
}