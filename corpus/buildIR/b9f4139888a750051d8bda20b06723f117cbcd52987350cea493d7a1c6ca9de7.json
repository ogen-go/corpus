{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/QuantConnect/Documentation"
		},
		"file": {
			"name": "QuantConnect-Platform-2.0.0.yaml",
			"size": 0,
			"path": "QuantConnect-Platform-2.0.0.yaml",
			"byteSize": 88158,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: QuantConnect Platform API v2.0\n  description: QuantConnect Platform API controls creating, updating and deleting projects, files, backtests and live algorithms. Automate the updating and backtesting of your strategies, or build tools to fast track your development.\n  termsOfService: https://www.quantconnect.com/terms\n  contact:\n    name: QuantConnect\n    email: contact@quantconnect.com\n  license:\n    name: License For Use Granted Under QuantConnect Terms of Service. All other rights reserved.\n  version: 2.0.0\nservers:\n- url: https://virtserver.swaggerhub.com/QuantConnect/Platform/2.0.0\n  description: SwaggerHub API Auto Mocking\n- url: https://www.quantconnect.com/api/v2\n  description: Primary REST Endpoint\nsecurity:\n- nonceTokenAuth: []\npaths:\n  /projects/create:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 02 Project Management\n      - 01 Create Project\n      summary: Create a new project in your default organization.\n      description: Create a project with the specified name and programming language. If the project-name already exists, API call returns success:false with exception details in the errors array.\n      requestBody:\n        description: Name and language of the project to create.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Project list response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectListResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /projects/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 02 Project Management\n      - 02 Read Project\n      summary: If a ReadProjectRequest is passed, get details about that single project. If no request body is passed, list details of all projects.\n      requestBody:\n        description: The projectId for the project to read, or nothing to get a list of all projects.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadProjectRequest'\n        required: false\n      responses:\n        \"200\":\n          description: Project list response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectListResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /projects/update:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 02 Project Management\n      - 03 Update Project\n      summary: Update a project name, description or parameters.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateProjectRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /projects/delete:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 02 Project Management\n      - 04 Delete Project\n      summary: Delete a project.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteProjectRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /files/create:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 03 File Management\n      - 01 Create File\n      summary: Add a file to given project.\n      requestBody:\n        description: Project, file name and file content to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectFileRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Response received when reading all files of a project.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectFilesResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /files/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 03 File Management\n      - 02 Read File\n      summary: If a ReadSingleFileRequest is passed, reads that file from the project. If a ReadAllFilesRequest is passed, reads all files in the project.\n      requestBody:\n        description: An array list of files from the project requested.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadFilesRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Response received when reading all files of a project.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectFilesResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /files/update:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 03 File Management\n      - 03 Update File\n      summary: If an UpdateProjectFileNameRequest is passed, update the name of a file. If a UpdateProjectFileContentsRequest is passed, update the contents of a file.\n      requestBody:\n        description: Information about the file to update along with the new properties to set.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/files_update_body'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /files/delete:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 03 File Management\n      - 04 Delete File\n      summary: Delete a file in a project\n      requestBody:\n        description: Project Id and filename to specify the file for deletion.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteFileRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /compile/create:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 04 Compiling Code\n      - 01 Create Compilation Job\n      summary: Asynchronously create a compile job request for a project\n      requestBody:\n        description: Project Id specifying project to build.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCompileRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Response from the compiler on a build event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompileResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /compile/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 04 Compiling Code\n      - 02 Read Compilation Result\n      summary: Read a compile packet job result.\n      requestBody:\n        description: Read a compile result for a specific Project Id and Compile Id.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadCompileRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Response from the compiler on a build event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompileResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/create:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 01 Create Backtest\n      summary: Create a new backtest request and get the backtest Id.\n      requestBody:\n        description: Create a new backtest given a project Id and compile Id.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateBacktestRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Backtest read response packet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BacktestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 02 Read Backtest\n      - 01 Backtest Statistics\n      summary: If a backtest id is provided, read out that backtest from the project, otherwise list all the backtests for the project.\n      requestBody:\n        description: Fetch the results for the project Id and backtest Id provided.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadBacktestRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/read/portfolio:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 02 Read Backtest\n      - 02 Portfolio\n      summary: Read out the portfolio state of a backtest.\n      requestBody:\n        description: Fetch the portfolio state of a backtest for the project Id and backtest Id.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadBacktestPortfolioRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Portfolio state of the backtest instance.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BacktestPortfolioResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/read/orders:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 02 Read Backtest\n      - 03 Orders\n      summary: Read out the orders of a backtest.\n      requestBody:\n        description: Fetch the orders of a backtest for the project Id, backtest Id and steps provided.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadBacktestOrdersRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Orders of the backtest within range.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BacktestOrdersResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/read/report:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 09 Reports\n      - 01 Backtest Report\n      summary: Read out the report of a backtest in the project id specified\n      requestBody:\n        description: A JSON object containing info about the project to delete.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BacktestReportRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_1'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/update:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 03 Update Backtest\n      summary: Update a backtest name or note\n      requestBody:\n        description: A JSON object containing info about the backtest and new name.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateBacktestRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /backtests/delete:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 05 Backtest Management\n      - 04 Delete Backtest\n      summary: Delete a backtest from the specified project and backtestId\n      requestBody:\n        description: Information required to delete the backtest.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteBacktestRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/create:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 01 Create Live Algorithm\n      summary: Create a live algorithm\n      requestBody:\n        description: Project, compile and brokerage login information for deploying a live algorithm.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateLiveAlgorithmRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Live algorithm instance result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LiveAlgorithm'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 02 Read Live Algorithm\n      - 01 Live Algorithm Statistics\n      summary: If a ReadLiveAlgorithmRequest is provided details on a live algorithm are returned. If a ListLiveAlgorithmsRequest is passed get a list of live running algorithms.\n      requestBody:\n        description: Dynamic arguement to specify whether seeking single project or list response.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/live_read_body'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_2'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/read/log:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 02 Read Live Algorithm\n      - 02 Logs\n      summary: Get the logs of a specific live algorithm.\n      requestBody:\n        description: Information about the algorithm to read live logs from.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadLiveLogsRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Logs from a live algorithm.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadLiveLogsResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/read/portfolio:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 02 Read Live Algorithm\n      - 03 Portfolio State\n      summary: Read out the portfolio state of a live algorithm.\n      requestBody:\n        description: Fetch the live portfolio state for the project Id provided.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadLivePortfolioRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Portfolio holdings and cash of the live algorithm.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LivePortfolioResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/read/orders:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 02 Read Live Algorithm\n      - 04 Orders\n      summary: Read out the orders of a live algorithm.\n      requestBody:\n        description: Fetch the orders of a live algorithm for the project Id and steps provided.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReadLiveOrdersRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Orders of the live algorithm within range.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LiveOrdersResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/update/liquidate:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 03 Update Live Algorithm\n      - 01 Liquidate Live Portfolio\n      summary: Liquidate a live algorithm from the specified project and deployId.\n      requestBody:\n        description: Information about the live algorithm to liquidate.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LiquidateLiveAlgorithmRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /live/update/stop:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 07 Live Management\n      - 03 Update Live Algorithm\n      - 02 Stop Live Algorithm\n      summary: Stop a live algorithm from the specified project and deployId.\n      requestBody:\n        description: Information about the project to delete.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StopLiveAlgorithmRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Base API response class.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\n  /data/read:\n    post:\n      tags:\n      - 01 Our Platform\n      - 11 API Reference\n      - 08 Downloading Data\n      - 01 Read Downloaded Data\n      summary: Get the link to the downloadable data.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataDownloadRequest'\n        required: true\n      responses:\n        \"200\":\n          description: Response from reading purchased data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadDataLinkResponse'\n        \"401\":\n          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n          headers:\n            www_authenticate:\n              style: simple\n              explode: false\n              schema:\n                type: string\ncomponents:\n  schemas:\n    AlgorithmPerformance:\n      type: object\n      properties:\n        TradeStatistics:\n          $ref: '#/components/schemas/TradeStatistics'\n        PortfolioStatistics:\n          $ref: '#/components/schemas/PortfolioStatistics'\n        ClosedTrades:\n          type: array\n          description: The algorithm statistics on portfolio.\n          items:\n            $ref: '#/components/schemas/Trade'\n      description: The AlgorithmPerformance class is a wrapper for TradeStatistics and PortfolioStatistics.\n    AlgorithmStatus:\n      type: string\n      description: States of a live deployment.\n      enum:\n      - DeployError\n      - InQueue\n      - Running\n      - Stopped\n      - Liquidated\n      - Deleted\n      - Completed\n      - RuntimeError\n      - Invalid\n      - LoggingIn\n      - Initializing\n      - History\n    AlphaRuntimeStatistics:\n      type: object\n      properties:\n        MeanPopulationScore:\n          $ref: '#/components/schemas/InsightScore'\n        RollingAveragedPopulationScore:\n          $ref: '#/components/schemas/InsightScore'\n        LongCount:\n          type: string\n          description: Gets the total number of insights with an up direction.\n        ShortCount:\n          type: string\n          description: Gets the total number of insights with a down direction.\n        LongShortRatio:\n          type: number\n          description: The ratio of InsightDirection.Up over InsightDirection.Down\n          format: float\n        TotalAccumulatedEstimatedAlphaValue:\n          type: number\n          description: The total accumulated estimated value of trading all insights.\n          format: float\n        KellyCriterionEstimate:\n          type: number\n          description: Score of the strategy's insights predictive power.\n          format: float\n        KellyCriterionProbabilityValue:\n          type: number\n          description: The p-value or probability value of the KellyCriterionEstimate.\n          format: float\n        FitnessScore:\n          type: number\n          description: Score of the strategy's performance, and suitability for the Alpha Stream Market.\n          format: float\n        PortfolioTurnover:\n          type: number\n          description: Measurement of the strategies trading activity with respect to the portfolio value. Calculated as the sales volume with respect to the average total portfolio value.\n          format: float\n        ReturnOverMaxDrawdown:\n          type: number\n          description: Provides a risk adjusted way to factor in the returns and drawdown of the strategy. It is calculated by dividing the Portfolio Annualized Return by the Maximum Drawdown seen during the backtest.\n          format: float\n        SortinoRatio:\n          type: number\n          description: Gives a relative picture of the strategy volatility. It is calculated by taking a portfolio's annualized rate of return and subtracting the risk free rate of return.\n          format: float\n        EstimatedMonthlyAlphaValue:\n          type: number\n          description: Suggested Value of the Alpha On A Monthly Basis For Licensing.\n          format: float\n        TotalInsightsGenerated:\n          type: string\n          description: The total number of insight signals generated by the algorithm.\n        TotalInsightsClosed:\n          type: string\n          description: The total number of insight signals generated by the algorithm.\n        TotalInsightsAnalysisCompleted:\n          type: string\n          description: The total number of insight signals generated by the algorithm.\n        MeanPopulationEstimatedInsightValue:\n          type: number\n          description: Gets the mean estimated insight value.\n          format: float\n      description: Contains insight population run time statistics.\n    BacktestPortfolioResponse:\n      type: object\n      properties:\n        portfolio:\n          $ref: '#/components/schemas/Portfolio'\n      description: Contains holdings and cash of the backtest instance.\n    BacktestOrdersResponse:\n      type: object\n      properties:\n        Orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n        Length:\n          type: integer\n          description: Total number of returned orders\n      description: Contains orders and the number of orders of the backtest in the request criteria.\n    BacktestResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the backtest.\n        note:\n          type: string\n          description: Note on the backtest attached by the user.\n        backtestId:\n          type: string\n          description: Assigned backtest Id\n        completed:\n          type: boolean\n          description: Boolean true when the backtest is completed.\n        progress:\n          type: number\n          description: Progress of the backtest in percent 0-1\n          format: float\n        result:\n          $ref: '#/components/schemas/BacktestResult'\n        error:\n          type: string\n          description: Backtest error message.\n        stacktrace:\n          type: string\n          description: Backtest error stacktrace.\n        created:\n          type: string\n          description: Backtest creation date and time.\n          format: date-time\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Packet container for carrying Backtest results.\n    BacktestList:\n      type: object\n      properties:\n        backtests:\n          type: array\n          description: Array of BacktestResponse objects\n          items:\n            $ref: '#/components/schemas/BacktestResponse'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Collection container for a list of Backtest objects for a project.\n    BacktestReport:\n      type: object\n      properties:\n        report:\n          type: string\n          description: HTML data of the report with embedded base64 images.\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Backtest Report Response wrapper.\n    BacktestReportRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project to read.\n        backtestId:\n          type: string\n          description: Specific backtest Id to read.\n      description: Request to read out the report of a backtest.\n    BacktestResult:\n      type: object\n      properties:\n        RollingWindow:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/AlgorithmPerformance'\n          description: Rolling window detailed statistics.\n        TotalPerformance:\n          $ref: '#/components/schemas/AlgorithmPerformance'\n        AlphaRuntimeStatistics:\n          $ref: '#/components/schemas/AlphaRuntimeStatistics'\n        Charts:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Chart'\n          description: Charts updates for the live algorithm since the last result packet.\n        Orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n          description: Order updates since the last result packet.\n        OrderEvents:\n          type: array\n          description: OrderEvent updates since the last result packet.\n          items:\n            $ref: '#/components/schemas/OrderEvent'\n        ProfitLoss:\n          type: object\n          additionalProperties:\n            type: number\n            format: float\n          description: Trade profit and loss information since the last algorithm result packet.\n        Statistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Statistics information sent during the algorithm operations.\n        RuntimeStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI.\n        ServerStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Server status information, including CPU and RAM usage.\n      description: Results object class. Results are exhaust from backtest or live algorithms running in LEAN.\n    BaseLiveAlgorithmSettings:\n      type: object\n      properties:\n        id:\n          type: string\n          description: '''Interactive'' / ''FXCM'' / ''Oanda'' / ''Tradier'' /''PaperTrading'''\n        user:\n          type: string\n          description: Username associated with brokerage.\n        password:\n          type: string\n          description: Password associated with brokerage.\n        environment:\n          $ref: '#/components/schemas/BrokerageEnvironment'\n        account:\n          type: string\n          description: Account of the associated brokerage.\n      description: Base class for settings that must be configured per Brokerage to create new algorithms via the API.\n    BrokerageEnvironment:\n      type: string\n      description: Represents the types of environments supported by brokerages for trading.\n      enum:\n      - live\n      - paper\n    Cash:\n      type: object\n      properties:\n        Symbol:\n          type: string\n          description: Gets the symbol used to represent this cash.\n        Amount:\n          type: number\n          description: Gets or sets the amount of cash held.\n          format: float\n        ConversionRate:\n          type: number\n          description: The currency conversion rate to the account base currency.\n          format: float\n        CurrencySymbol:\n          description: The symbol of the currency, such as $.\n        ValueInAccountCurrency:\n          type: number\n          description: The value of the currency cash in the account base currency.\n          format: float\n      description: Represents a holding of a currency in cash.\n    CashAmount:\n      properties:\n        Amount:\n          type: number\n          description: The amount of cash.\n          format: float\n        Currency:\n          type: string\n          description: The currency in which the cash amount is denominated.\n      description: Represents a cash amount which can be converted to account currency using a currency converter.\n    CashBook:\n      type: object\n      properties:\n        TotalValueInAccountCurrency:\n          type: number\n          description: The total value of the cash book in units of the base currency.\n          format: float\n        AccountCurrency:\n          type: string\n          description: Gets account currency.\n      additionalProperties:\n        $ref: '#/components/schemas/Cash'\n      description: Keeps track of the different cash holdings of an algorithm. Is also a Dictionary of Cash objects.\n    Chart:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the Chart.\n        ChartType:\n          type: string\n          description: Type of the Chart, Overlayed or Stacked.\n          enum:\n          - Overlay\n          - Stacked\n        Series:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Series'\n          description: List of Series Objects for this Chart.\n      description: Single Parent Chart Object for Custom Charting.\n    ChartPoint:\n      type: object\n      properties:\n        x:\n          type: string\n          description: 'Time of this chart point: lower case for javascript encoding simplicty.'\n        y:\n          type: number\n          description: 'Value of this chart point:  lower case for javascript encoding simplicty.'\n          format: float\n      description: Location on a chart containing the X-Y location\n    CreateCompileRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id we wish to compile.\n      description: Request to compile a project.\n    CompileResponse:\n      type: object\n      properties:\n        compileId:\n          type: string\n          description: Compile Id for a sucessful build.\n        state:\n          type: string\n          description: True on successful compile.\n          enum:\n          - InQueue\n          - BuildSuccess\n          - BuildError\n        logs:\n          type: array\n          description: Logs of the compilation request.\n          items:\n            type: string\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Response from the compiler on a build event.\n    CreateBacktestRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project Id we sent for compile.\n        compileId:\n          type: string\n          description: Compile Id for the project to backtest.\n        backtestName:\n          type: string\n          description: Name for the new backtest.\n      description: Request to create a new backtest.\n    CreateLiveAlgorithmRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project Id.\n        compileId:\n          type: string\n          description: Compile Id.\n        serverType:\n          type: string\n          description: Type of server instance that will run the algorithm.\n        baseLiveAlgorithmSettings:\n          $ref: '#/components/schemas/BaseLiveAlgorithmSettings'\n        versionId:\n          type: string\n          description: The version of the Lean used to run the algorithm. -1 is master, however, sometimes this can create problems with live deployments. If you experience problems using, try specifying the version of Lean you would like to use.\n          example: \"-1\"\n      description: Request to create a live algorithm.\n    CreateProjectRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Project name.\n        language:\n          type: string\n          description: Programming langage to use.\n          enum:\n          - C#\n          - Py\n      description: Request to create a project.\n    CreateProjectFileRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        name:\n          type: string\n          description: The name of the new file.\n          example: main.py\n        content:\n          type: string\n          description: The content of the new file.\n      description: Request to add a file to a project.\n    DataDownloadRequest:\n      type: object\n      properties:\n        format:\n          description: Format for returning data, link or download.\n          example: link\n        ticker:\n          type: string\n        type:\n          $ref: '#/components/schemas/SecurityType'\n        resolution:\n          $ref: '#/components/schemas/Resolution'\n        market:\n          $ref: '#/components/schemas/Market'\n        date:\n          type: string\n          description: Date of the data requested yyyyMMdd.\n          example: yyyyMMdd\n      description: Request for a link to downloadable data.\n    DeleteFileRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        name:\n          type: string\n          description: The name of the file that should be deleted.\n      description: Request to delete a file in a project.\n    DeleteProjectRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n      description: Request to delete a project.\n    DeleteBacktestRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id for the backtest we want to delete.\n        backtestId:\n          type: string\n          description: Backtest id we want to delete.\n      description: Request to delete a backtest.\n    Holding:\n      type: object\n      properties:\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        Type:\n          $ref: '#/components/schemas/SecurityType'\n        CurrencySymbol:\n          type: string\n          description: The currency symbol of the holding.\n          example: $\n        AveragePrice:\n          type: number\n          description: Average Price of our Holding in the currency the symbol is traded in.\n          format: float\n        Quantity:\n          type: number\n          description: Quantity of the Symbol we hold.\n          format: float\n        MarketPrice:\n          type: number\n          description: Current Market Price of the Asset in the currency the symbol is traded in.\n          format: float\n        ConversionRate:\n          type: number\n          description: Current market conversion rate into the account currency.\n          format: float\n        MarketValue:\n          type: number\n          description: Current market value of the holding.\n          format: float\n        UnrealizedPnl:\n          type: number\n          description: Current unrealized P/L of the holding.\n          format: float\n      description: Live results object class for packaging live result data.\n    InsightScore:\n      type: object\n      properties:\n        UpdatedTimeUtc:\n          type: string\n          description: The time these scores were last updated.\n          format: date-time\n        Direction:\n          type: number\n          description: The direction score.\n          format: float\n        Magnitude:\n          type: number\n          description: The magnitude score.\n          format: float\n        IsFinalScore:\n          type: boolean\n          description: Is the insight past its expiry time and score can be finalized.\n      description: Defines the scores given to a particular insight\n    LiveAlgorithm:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id for the live instance.\n        deployId:\n          type: string\n          description: Unique live algorithm deployment identifier (similar to a backtest id).\n        status:\n          $ref: '#/components/schemas/AlgorithmStatus'\n        launched:\n          type: string\n          description: Datetime the algorithm was launched in UTC.\n          format: date-time\n        stopped:\n          type: string\n          description: Datetime the algorithm was stopped in UTC, null if its still running.\n          format: date-time\n        brokerage:\n          type: string\n          description: Brokerage\n          enum:\n          - Interactive\n          - FXCM\n          - Oanda\n          - Tradier\n          - PaperTrading\n          - Alpaca\n          - Bitfinex\n          - Binance\n          - GDAX\n        subscription:\n          type: string\n          description: Chart we're subscribed to.\n        error:\n          type: string\n          description: Live algorithm error message from a crash or algorithm runtime error.\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Live algorithm instance result from the QuantConnect Rest API.\n    LiveResult:\n      type: object\n      properties:\n        Holdings:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Holding'\n          description: Dictionary of algorithm holdings information.\n        Cash:\n          $ref: '#/components/schemas/Cash'\n        AlphaRuntimeStatistics:\n          $ref: '#/components/schemas/AlphaRuntimeStatistics'\n        Charts:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Chart'\n          description: Charts updates for the live algorithm since the last result packet.\n        Orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n          description: Order updates since the last result packet.\n        OrderEvents:\n          type: array\n          description: OrderEvent updates since the last result packet.\n          items:\n            $ref: '#/components/schemas/OrderEvent'\n        ProfitLoss:\n          type: object\n          additionalProperties:\n            type: number\n            format: float\n          description: Trade profit and loss information since the last algorithm result packet.\n        Statistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Statistics information sent during the algorithm operations.\n        RuntimeStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI.\n        ServerStatistics:\n          type: object\n          additionalProperties:\n            type: string\n          description: Server status information, including CPU and RAM usage.\n      description: Live results object class for packaging live result data.\n    LiveAlgorithmResults:\n      type: object\n      properties:\n        LiveResults:\n          $ref: '#/components/schemas/LiveResultsData'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Details a live algorithm from the live/read API endpoint.\n    LiveAlgorithmLogs:\n      type: object\n      properties:\n        LiveAlgorithmLogs:\n          type: array\n          description: List of logs from the live algorithm.\n          items:\n            type: string\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Logs from a live algorithm.\n    LiveAlgorithmList:\n      type: object\n      properties:\n        live:\n          type: array\n          description: Algorithm list matching the requested status.\n          items:\n            $ref: '#/components/schemas/LiveAlgorithm'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: List of the live algorithms running which match the requested status.\n    LiquidateLiveAlgorithmRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project Id for the live instance we want to liquidate.\n      description: Request to liquidate a live algorithm.\n    LiveList:\n      type: object\n      properties:\n        Algorithms:\n          type: array\n          description: Algorithm list matching the requested status.\n          items:\n            $ref: '#/components/schemas/LiveAlgorithm'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: List of the live algorithms running which match the requested status.\n    LivePortfolioResponse:\n      type: object\n      properties:\n        portfolio:\n          $ref: '#/components/schemas/Portfolio'\n      description: Contains holdings and cash of the live algorithm in the request criteria.\n    LiveOrdersResponse:\n      type: object\n      properties:\n        orders:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Order'\n        Length:\n          type: integer\n          description: Total number of returned orders\n        latestOrderTimestamp:\n          type: integer\n          description: Timestamp of the latest order event.\n      description: Contains orders and the number of orders of the live algorithm in the request criteria.\n    LiveResultsData:\n      type: object\n      properties:\n        version:\n          type: integer\n          description: Results version.\n        resolution:\n          $ref: '#/components/schemas/ChartResolution'\n        results:\n          $ref: '#/components/schemas/LiveResult'\n      description: Holds information about the state and operation of the live running algorithm.\n    Market:\n      type: string\n      description: Fungible market of the underlying security.\n      enum:\n      - usa\n      - oanda\n      - fxcm\n      - dukascopy\n      - bitfinex\n      - cmeglobex\n      - nymex\n      - cbot\n      - ice\n      - cboe\n      - nse\n      - comex\n      - cme\n      - sgx\n      - hkfe\n      - gdax\n      - kraken\n      - bitstamp\n      - okcoin\n      - bithumb\n      - binance\n      - poloniex\n      - coinone\n      - hitbtc\n      - bittrex\n    Order:\n      type: object\n      properties:\n        Id:\n          type: integer\n          description: Order ID.\n        ContingentId:\n          type: integer\n          description: Order id to process before processing this order.\n        BrokerId:\n          type: array\n          description: Brokerage Id for this order for when the brokerage splits orders into multiple pieces.\n          items:\n            type: string\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        Price:\n          type: number\n          description: Price of the Order.\n          format: float\n        PriceCurrency:\n          type: string\n          description: Currency for the order price.\n        Time:\n          type: string\n          description: Gets the utc time the order was created.\n          format: date-time\n        CreatedTime:\n          type: string\n          description: Gets the utc time this order was created. Alias for Time.\n          format: date-time\n        LastFillTime:\n          type: string\n          description: Gets the utc time the last fill was received, or null if no fills have been received.\n          format: date-time\n        LastUpdateTime:\n          type: string\n          description: Gets the utc time this order was last updated, or null if the order has not been updated.\n          format: date-time\n        CanceledTime:\n          type: string\n          description: Gets the utc time this order was canceled, or null if the order was not canceled.\n          format: date-time\n        Quantity:\n          type: number\n          description: Number of shares to execute.\n          format: float\n        Type:\n          type: string\n          description: Order type.\n          enum:\n          - Market\n          - Limit\n          - StopMarket\n          - StopLimit\n          - MarketOnOpen\n          - MarketOnClose\n          - OptionExercise\n        Status:\n          type: string\n          description: Status of the Order.\n          enum:\n          - New\n          - Submitted\n          - PartiallyFilled\n          - Filled\n          - Canceled\n          - None\n          - Invalid\n          - CancelPending\n          - UpdateSubmitted\n        Tag:\n          type: string\n          description: Tag the order with some custom data.\n        SecurityType:\n          $ref: '#/components/schemas/SecurityType'\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Value:\n          type: number\n          description: Gets the executed value of this order. If the order has not yet filled, then this will return zero.\n          format: float\n        OrderSubmissionData:\n          $ref: '#/components/schemas/OrderSubmissionData'\n        IsMarketable:\n          type: boolean\n          description: Returns true if the order is a marketable order.\n      description: Order struct for placing new trade.\n    OrderDirection:\n      type: string\n      description: Direction of the order.\n      enum:\n      - Buy\n      - Sell\n      - Hold\n    OrderEvent:\n      type: object\n      properties:\n        OrderId:\n          type: integer\n          description: Id of the order this event comes from.\n        Id:\n          type: integer\n          description: The unique order event id for each order.\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        UtcTime:\n          type: string\n          description: The date and time of this event (UTC).\n          format: date-time\n        Status:\n          $ref: '#/components/schemas/OrderStatus'\n        OrderFee:\n          $ref: '#/components/schemas/OrderFee'\n        FillPrice:\n          type: number\n          description: Fill price information about the order.\n          format: float\n        FillPriceCurrency:\n          type: string\n          description: Currency for the fill price.\n        FillQuantity:\n          type: number\n          description: Number of shares of the order that was filled in this event.\n          format: float\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Message:\n          type: string\n          description: Any message from the exchange.\n        IsAssignment:\n          type: boolean\n          description: True if the order event is an assignment.\n        StopPrice:\n          type: number\n          description: The current stop price.\n          format: float\n        LimitPrice:\n          type: number\n          description: The current limit price.\n          format: float\n        Quantity:\n          type: number\n          description: The current order quantity.\n          format: float\n      description: Change in an order state applied to user algorithm portfolio\n    OrderFee:\n      type: object\n      properties:\n        Value:\n          $ref: '#/components/schemas/CashAmount'\n      description: The order fee associated with the specified order.\n    OrderSubmissionData:\n      type: object\n      properties:\n        BidPrice:\n          type: number\n          description: The bid price at an order submission time.\n          format: float\n        AskPrice:\n          type: number\n          description: The ask price at an order submission time.\n          format: float\n        LastPrice:\n          type: number\n          description: The current price at an order submission time.\n          format: float\n      description: Stores time and price information available at the time an order was submitted.\n    OrderStatus:\n      type: object\n      properties:\n        OrderId:\n          type: integer\n          description: Id of the order this event comes from.\n        Id:\n          type: integer\n          description: The unique order event id for this order.\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        UtcTime:\n          type: string\n          description: The date and time of this event.\n          format: date-time\n        Status:\n          $ref: '#/components/schemas/Order/properties/Status'\n        FillPrice:\n          type: number\n          description: Fill price information about the order.\n          format: float\n        FillPriceCurrency:\n          type: string\n          description: Currency for the fill price.\n        FillQuantity:\n          type: number\n          description: Number of shares of the order that was filled in this event.\n          format: float\n        Direction:\n          $ref: '#/components/schemas/OrderDirection'\n        Message:\n          type: string\n          description: Any message from the exchange.\n        IsAssignment:\n          type: boolean\n          description: Order event is an allocation of trades from ITM option assignment.\n        StopPrice:\n          type: number\n          description: The current stop price.\n          format: float\n        LimitPrice:\n          type: number\n          description: The current limit price.\n          format: float\n        Quantity:\n          type: number\n          description: The current order quantity.\n          format: float\n      description: Messaging class signifying a change in an order state and record the change in the users algorithm portfolio.\n    Portfolio:\n      type: object\n      properties:\n        Holdings:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Holding'\n          description: Dictionary of algorithm holdings information.\n        Cash:\n          $ref: '#/components/schemas/Cash'\n    Project:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id.\n        name:\n          type: string\n          description: Name of the project.\n        created:\n          type: string\n          description: Date the project was created.\n          format: date-time\n        modified:\n          type: string\n          description: Modified date for the project.\n          format: date-time\n        language:\n          type: string\n          description: Programming language of the project.\n          enum:\n          - C#\n          - Py\n      description: Response from reading a project by id.\n    ProjectFile:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of a project file.\n        content:\n          type: string\n          description: Contents of the project file.\n        modified:\n          type: string\n          description: DateTime project file was modified.\n          format: date-time\n      description: File for a project.\n    ProjectFilesResponse:\n      type: object\n      properties:\n        files:\n          type: array\n          description: List of project file information.\n          items:\n            $ref: '#/components/schemas/ProjectFile'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Response received when reading files from a project.\n    ProjectListResponse:\n      type: object\n      properties:\n        projects:\n          type: array\n          description: List of projects for the authenticated user.\n          items:\n            $ref: '#/components/schemas/Project'\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Project list response.\n    PortfolioStatistics:\n      type: object\n      properties:\n        RiskFreeRate:\n          type: number\n          description: The current defined risk free annual return rate.\n          format: float\n        AverageWinRate:\n          type: number\n          description: The average rate of return for winning trades.\n          format: float\n        AverageLossRate:\n          type: number\n          description: The average rate of return for losing trades.\n          format: float\n        ProfitLossRatio:\n          type: number\n          description: The ratio of the average win rate to the average loss rate.\n          format: float\n        WinRate:\n          type: number\n          description: The ratio of the number of winning trades to the total number of trades.\n          format: float\n        LossRate:\n          type: number\n          description: The ratio of the number of losing trades to the total number of trades.\n          format: float\n        Expectancy:\n          type: number\n          description: The expected value of the rate of return.\n          format: float\n        CompoundingAnnualReturn:\n          type: number\n          description: Annual compounded returns statistic based on the final-starting capital and years.\n          format: float\n        Drawdown:\n          type: number\n          description: Drawdown maximum percentage.\n          format: float\n        TotalNetProfit:\n          type: number\n          description: The total net profit percentage.\n          format: float\n        SharpeRatio:\n          type: number\n          description: 'Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.'\n          format: float\n        ProbabilisticSharpeRatio:\n          type: number\n          description: Probabilistic Sharpe Ratio is a probability measure associated with the Sharpe ratio. It informs us of the probability that the estimated Sharpe ratio is greater than a chosen benchmark.\n          format: float\n        Alpha:\n          type: number\n          description: Algorithm \"Alpha\" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.\n          format: float\n        Beta:\n          type: number\n          description: Algorithm beta statistic - the covariance between the algorithm and benchmark performance, divided by benchmark variance.\n          format: float\n        AnnualStandardDeviation:\n          type: number\n          description: Annualized standard deviation\n          format: float\n        AnnualVariance:\n          type: number\n          description: Annualized variance statistic calculation using the daily performance variance and trading days per year.\n          format: float\n        InformationRatio:\n          type: number\n          description: Information ratio - risk adjusted return.\n          format: float\n        TrackingError:\n          type: number\n          description: Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked.\n          format: float\n        TreynorRatio:\n          type: number\n          description: Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.\n          format: float\n      description: Represents a set of statistics calculated from equity and benchmark samples.\n    ReadFilesRequest:\n      required:\n      - projectId\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        fileName:\n          type: string\n          description: Optional. The name of the file that should be updated.\n      description: Request to read all files from a project.\n    ReadCompileRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project Id we sent for compile.\n        compileId:\n          type: string\n          description: Compile Id returned during the creation request.\n      description: Request to read a compile packet job.\n    ReadDataLinkResponse:\n      type: object\n      properties:\n        link:\n          type: string\n          description: Link to the data.\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Response from reading purchased data.\n    ReadLiveLogsRequest:\n      type: object\n      properties:\n        format:\n          description: Format of the log results\n          example: json\n        projectId:\n          type: integer\n          description: Project Id of the live running algorithm.\n        algorithmId:\n          type: string\n          description: Deploy Id (Algorithm Id) of the live running algorithm.\n        start:\n          type: integer\n          description: No logs will be returned before this unixtime.\n        end:\n          type: integer\n          description: No logs will be returned after this unixtime.\n      description: Request to read the logs of a specific algorithm.\n    ReadLiveLogsResponse:\n      type: object\n      properties:\n        LiveLogs:\n          type: array\n          description: List of logs from the live algorithm.\n          items:\n            type: string\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Logs from a live algorithm.\n    ReadProjectRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project.\n      description: Request to get details about a specific project.\n    ReadLiveAlgorithmRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project to read.\n        deployId:\n          type: string\n          description: Specific instance id to read.\n      description: Request to read out a single algorithm.\n    ReadLivePortfolioRequest:\n      required:\n      - projectId\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project from which to read the live algorithm.\n      description: Request to read the portfolio state from a live algorithm.\n    ReadLiveOrdersRequest:\n      required:\n      - end\n      - projectId\n      type: object\n      properties:\n        start:\n          type: integer\n          description: Starting index of the orders to be fetched. Required if end \u003e 100.\n        end:\n          type: integer\n          description: Last index of the orders to be fetched. Note that end - start must be less than 100.\n        projectId:\n          type: integer\n          description: Id of the project from which to read the live algorithm.\n      description: Request to read orders from a live algorithm.\n    ListLiveAlgorithmsRequest:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/AlgorithmStatus'\n        start:\n          type: string\n          description: Earliest launched time of the algorithms\n          format: date-time\n        end:\n          type: string\n          description: Latest launched time of the algorithms\n          format: date-time\n      description: Request for a list of live running algorithms.\n    ReadBacktestRequest:\n      required:\n      - projectId\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project from which to read one or multiple backtests.\n        backtestId:\n          type: string\n          description: When provided, specific backtest Id to read.\n      description: Request to read a single backtest from a project.\n    ReadBacktestPortfolioRequest:\n      required:\n      - projectId\n      - backtestId\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Id of the project from which to read the backtest.\n        backtestId:\n          type: string\n          description: Id of the backtest from which to read the portfolio state.\n      description: Request to read the portfolio state from a backtest in a project.\n    ReadBacktestOrdersRequest:\n      required:\n      - start\n      - end\n      - projectId\n      - backtestId\n      type: object\n      properties:\n        start:\n          type: integer\n          description: Starting index of the orders to be fetched. Required if end \u003e 100.\n        end:\n          type: integer\n          description: Last index of the orders to be fetched. Note that end - start must be less than 100.\n        projectId:\n          type: integer\n          description: Id of the project from which to read the backtest.\n        backtestId:\n          type: string\n          description: Id of the backtest from which to read the orders.\n      description: Request to read orders from a backtest.\n    RequestFailedError:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: The API method call could not be completed as requested.\n    RestResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: Indicate if the API request was successful.\n        errors:\n          type: array\n          description: List of errors with the API call.\n          items:\n            type: string\n      description: Base API response class for the QuantConnect API.\n    Resolution:\n      type: string\n      description: Resolution of data requested.\n      enum:\n      - Tick\n      - Second\n      - Minute\n      - Hour\n      - Daily\n    ChartResolution:\n      type: string\n      description: Storage format of the charting data\n      enum:\n      - 10minute\n      - minute\n      - second\n    SecurityType:\n      type: string\n      description: Type of tradable security / underlying asset.\n      enum:\n      - Base\n      - Equity\n      - Option\n      - Commodity\n      - Forex\n      - Future\n      - Cfd\n      - Crypto\n    Series:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the series.\n        Unit:\n          type: string\n          description: Axis for the chart series.\n        Index:\n          type: integer\n          description: Index/position of the series on the chart.\n        Values:\n          type: array\n          description: Values for the series plot. These values are assumed to be in ascending time order (first points earliest, last points latest)\n          items:\n            $ref: '#/components/schemas/ChartPoint'\n        SeriesType:\n          type: string\n          description: Chart type for the series.\n          enum:\n          - Line\n          - Scatter\n          - Candle\n          - Bar\n          - Flag\n          - StackedArea\n          - Pie\n          - Treemap\n        Color:\n          type: string\n          description: Color the series.\n        ScatterMarkerSymbol:\n          type: string\n          description: Shape or symbol for the marker in a scatter plot.\n          enum:\n          - none\n          - circle\n          - square\n          - diamond\n          - triangle\n          - triangle-down\n      description: Chart Series Object - Series data and properties for a chart.\n    StopLiveAlgorithmRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project Id for the live instance we want to stop.\n      description: Request to stop a live algorithm.\n    Symbol:\n      type: object\n      properties:\n        Value:\n          type: string\n          description: The current symbol for this ticker.\n        ID:\n          type: string\n          description: The security identifier for this symbol.\n        Permtick:\n          type: string\n          description: The current symbol for this ticker.\n      description: Represents a unique security identifier. This is made of two components, the unique SID and the Value. The value is the current ticker symbol while the SID is constant over the life of a security.\n    Trade:\n      type: object\n      properties:\n        Symbol:\n          $ref: '#/components/schemas/Symbol'\n        EntryTime:\n          type: string\n          description: The date and time the trade was opened.\n          format: date-time\n        EntryPrice:\n          type: number\n          description: The price at which the trade was opened (or the average price if multiple entries).\n          format: float\n        Direction:\n          $ref: '#/components/schemas/TradeDirection'\n        Quantity:\n          type: number\n          description: The total unsigned quantity of the trade.\n          format: float\n        ExitTime:\n          type: string\n          description: The date and time the trade was closed.\n          format: date-time\n        ExitPrice:\n          type: number\n          description: The price at which the trade was closed (or the average price if multiple exits).\n          format: float\n        ProfitLoss:\n          type: number\n          description: The gross profit/loss of the trade (as account currency).\n          format: float\n        TotalFees:\n          type: number\n          description: The total fees associated with the trade (always positive value) (as account currency).\n          format: float\n        MAE:\n          type: number\n          description: The Maximum Adverse Excursion (as account currency).\n          format: float\n        MFE:\n          type: number\n          description: The Maximum Favorable Excursion (as account currency).\n          format: float\n        Duration:\n          type: string\n          description: The duration of the trade.\n        EndTradeDrawdown:\n          type: number\n          description: The amount of profit given back before the trade was closed.\n          format: float\n      description: Represents a closed trade.\n    TradeDirection:\n      type: string\n      description: Direction of a trade.\n      enum:\n      - Long\n      - Short\n    TradeStatistics:\n      type: object\n      properties:\n        StartDateTime:\n          type: string\n          description: The entry date/time of the first trade\n          format: date-time\n        EndDateTime:\n          type: string\n          description: The exit date/time of the first trade.\n          format: date-time\n        TotalNumberOfTrades:\n          type: integer\n          description: The total number of trades.\n        NumberOfWinningTrades:\n          type: integer\n          description: The total number of winning trades.\n        NumberOfLosingTrades:\n          type: integer\n          description: The total number of losing trades.\n        TotalProfitLoss:\n          type: number\n          description: The total profit/loss for all trades (as symbol currency).\n          format: float\n        TotalProfit:\n          type: number\n          description: The total profit for all winning trades (as symbol currency).\n          format: float\n        TotalLoss:\n          type: number\n          description: The total loss for all losing trades (as symbol currency).\n          format: float\n        LargestProfit:\n          type: number\n          description: The largest profit in a single trade (as symbol currency).\n          format: float\n        LargestLoss:\n          type: number\n          description: The largest loss in a single trade (as symbol currency).\n          format: float\n        AverageProfitLoss:\n          type: number\n          description: The average profit/loss (a.k.a. Expectancy or Average Trade) for all trades (as symbol currency).\n          format: float\n        AverageProfit:\n          type: number\n          description: The average profit for all winning trades (as symbol currency).\n          format: float\n        AverageLoss:\n          type: number\n          description: The average loss for all winning trades (as symbol currency).\n          format: float\n        AverageTradeDuration:\n          type: string\n          description: The average duration for all trades.\n        AverageWinningTradeDuration:\n          type: string\n          description: The average duration for all winning trades.\n        AverageLosingTradeDuration:\n          type: string\n          description: The average duration for all losing trades.\n        MedianTradeDuration:\n          type: string\n          description: The median duration for all trades.\n        MedianWinningTradeDuration:\n          type: string\n          description: The median duration for all winning trades.\n        MedianLosingTradeDuration:\n          type: string\n          description: The median duration for all losing trades.\n        MaxConsecutiveWinningTrades:\n          type: integer\n          description: The maximum number of consecutive winning trades.\n        MaxConsecutiveLosingTrades:\n          type: integer\n          description: The maximum number of consecutive losing trades.\n        ProfitLossRatio:\n          type: number\n          description: The ratio of the average profit per trade to the average loss per trade.\n          format: float\n        WinLossRatio:\n          type: number\n          description: The ratio of the number of winning trades to the number of losing trades.\n          format: float\n        WinRate:\n          type: number\n          description: The ratio of the number of winning trades to the total number of trades.\n          format: float\n        LossRate:\n          type: number\n          description: The ratio of the number of losing trades to the total number of trades.\n          format: float\n        AverageMAE:\n          type: number\n          description: The average Maximum Adverse Excursion for all trades.\n          format: float\n        AverageMFE:\n          type: number\n          description: The average Maximum Adverse Excursion for all trades.\n          format: float\n        LargestMAE:\n          type: number\n          description: The average Maximum Favorable Excursion for all trades.\n          format: float\n        LargestMFE:\n          type: number\n          description: The largest Maximum Adverse Excursion in a single trade (as symbol currency).\n          format: float\n        MaximumClosedTradeDrawdown:\n          type: number\n          description: The maximum closed-trade drawdown for all trades (as symbol currency).\n          format: float\n        MaximumIntraTradeDrawdown:\n          type: number\n          description: The maximum intra-trade drawdown for all trades (as symbol currency).\n          format: float\n        ProfitLossStandardDeviation:\n          type: number\n          description: The standard deviation of the profits/losses for all trades (as symbol currency).\n          format: float\n        ProfitLossDownsideDeviation:\n          type: number\n          description: The downside deviation of the profits/losses for all trades (as symbol currency).\n          format: float\n        ProfitFactor:\n          type: number\n          description: The ratio of the total profit to the total loss.\n          format: float\n        SharpeRatio:\n          type: number\n          description: The ratio of the average profit/loss to the standard deviation.\n          format: float\n        SortinoRatio:\n          type: number\n          description: The ratio of the average profit/loss to the downside deviation.\n          format: float\n        ProfitToMaxDrawdownRatio:\n          type: number\n          description: The ratio of the total profit/loss to the maximum closed trade drawdown.\n          format: float\n        MaximumEndTradeDrawdown:\n          type: number\n          description: The maximum amount of profit given back by a single trade before exit (as symbol currency).\n          format: float\n        AverageEndTradeDrawdown:\n          type: number\n          description: The average amount of profit given back by all trades before exit (as symbol currency).\n          format: float\n        MaximumDrawdownDuration:\n          type: string\n          description: The maximum amount of time to recover from a drawdown (longest time between new equity highs or peaks).\n        TotalFees:\n          type: number\n          description: The sum of fees for all trades.\n          format: float\n      description: A set of statistics calculated from a list of closed trades.\n    UpdateBacktestRequest:\n      required:\n      - backtestId\n      - projectId\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id for the backtest we want to update.\n        backtestId:\n          type: string\n          description: Backtest id we want to update.\n        name:\n          type: string\n          description: Name we'd like to assign to the backtest.\n        note:\n          type: string\n          description: Note attached to the backtest.\n      description: Request to update a backtest's name.\n    UpdateFileNameRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        oldFileName:\n          type: string\n          description: The current name of the new file.\n        newFileName:\n          type: string\n          description: The new name for the file.\n      description: Request to update the name of a file.\n    UpdateFileContentsRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        fileName:\n          type: string\n          description: The name of the file that should be updated.\n        newFileContents:\n          type: string\n          description: The new contents of the file.\n      description: Request to update the contents of a file.\n    UpdateProjectRequest:\n      type: object\n      properties:\n        projectId:\n          type: integer\n          description: Project id to which the file belongs.\n        name:\n          type: string\n          description: The new name for the project.\n        description:\n          description: The new description for the project.\n      description: Update a project name, description or parameters.\n    files_update_body:\n      oneOf:\n      - $ref: '#/components/schemas/UpdateFileNameRequest'\n      - $ref: '#/components/schemas/UpdateFileContentsRequest'\n    inline_response_200:\n      oneOf:\n      - $ref: '#/components/responses/BacktestResponse'\n      - $ref: '#/components/responses/BacktestList'\n    inline_response_200_1:\n      oneOf:\n      - $ref: '#/components/responses/BacktestReport'\n      - $ref: '#/components/responses/RequestFailedError'\n    live_read_body:\n      oneOf:\n      - $ref: '#/components/schemas/ReadLiveAlgorithmRequest'\n      - $ref: '#/components/schemas/ListLiveAlgorithmsRequest'\n    inline_response_200_2:\n      oneOf:\n      - $ref: '#/components/responses/LiveAlgorithmResults'\n      - $ref: '#/components/responses/LiveList'\n  responses:\n    BacktestResponse:\n      description: Backtest read response packet.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BacktestResponse'\n    BacktestList:\n      description: Collection container for a list of backtests for a project.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BacktestList'\n    BacktestReport:\n      description: Backtest Report Response wrapper.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BacktestReport'\n    CompileResponse:\n      description: Response from the compiler on a build event.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CompileResponse'\n    LiveAlgorithm:\n      description: Live algorithm instance result.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveAlgorithm'\n    LiveAlgorithmLog:\n      description: Logs from a live algorithm.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveAlgorithmLogs'\n    LiveAlgorithmList:\n      description: List of the live algorithms running which match the requested status.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveAlgorithmList'\n    LiveAlgorithmResults:\n      description: Details a live algorithm from the live/read API endpoint.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveAlgorithmResults'\n    LiveList:\n      description: List of the live algorithms running which match the requested status.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LiveList'\n    ProjectListResponse:\n      description: Project list response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProjectListResponse'\n    ProjectFilesResponse:\n      description: Response received when reading all files of a project.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProjectFilesResponse'\n    ReadDataLinkResponse:\n      description: Response from reading purchased data.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReadDataLinkResponse'\n    ReadLiveLogsResponse:\n      description: Logs from a live algorithm.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ReadLiveLogsResponse'\n    RequestFailedError:\n      description: Request Failed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RequestFailedError'\n    RestResponse:\n      description: Base API response class.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RestResponse'\n    UnauthorizedError:\n      description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.\n      headers:\n        www_authenticate:\n          style: simple\n          explode: false\n          schema:\n            type: string\n  securitySchemes:\n    nonceTokenAuth:\n      type: http\n      description: The standard QuantConnect API authentication scheme is used. This requires the current unixtime and your api key to be hashed together with SHA256 and sent as the B64 password in a basic authentication. The username for the basic authentication is the UID on your QuantConnect account.\n      scheme: basic\n",
			"canonicalURL": "/github.com/QuantConnect/Documentation@adfdb13e53b96291f0e58480a651e18351a33b6f/-/blob/QuantConnect-Platform-2.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/QuantConnect/Documentation/blob/adfdb13e53b96291f0e58480a651e18351a33b6f/QuantConnect-Platform-2.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/backtests/create\": post: responses: code 200: contents: application/json: generate schema: save schema types: save referenced type: reference \"#/components/schemas/OrderStatus\" type name conflict: \"OrderStatus\""
}