{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gooddata/gooddata-ui-sdk"
		},
		"file": {
			"name": "openapi-spec.json",
			"size": 0,
			"path": "libs/api-client-tiger/src/generated/metadata-json-api/openapi-spec.json",
			"byteSize": 603510,
			"content": "{\n    \"openapi\": \"3.0.1\",\n    \"info\": {\n        \"title\": \"OpenAPI definition\",\n        \"version\": \"v0\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"/\",\n            \"description\": \"GoodData.CN endpoint\"\n        }\n    ],\n    \"tags\": [\n        {\n            \"name\": \"entities\",\n            \"description\": \"| interconnected resources representing application state (JSON:API)\"\n        },\n        {\n            \"name\": \"layout\",\n            \"description\": \"| all-in-one declarative interface (set [PUT] \u0026 read [GET] over JSON)\"\n        },\n        {\n            \"name\": \"actions\",\n            \"description\": \"| execution of some form of computation (RPC over JSON)\"\n        }\n    ],\n    \"paths\": {\n        \"/api/v1/entities/admin/cookieSecurityConfigurations/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@CookieSecurityConfigurations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"lastRotation\": \"InstantValue\",\n                            \"rotationInterval\": \"DurationValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=lastRotation==InstantValue;rotationInterval==DurationValue\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@CookieSecurityConfigurations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"lastRotation\": \"InstantValue\",\n                            \"rotationInterval\": \"DurationValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=lastRotation==InstantValue;rotationInterval==DurationValue\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@CookieSecurityConfigurations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"lastRotation\": \"InstantValue\",\n                            \"rotationInterval\": \"DurationValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=lastRotation==InstantValue;rotationInterval==DurationValue\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/admin/organizations/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Organizations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"hostname\": \"someString\",\n                            \"bootstrapUser.id\": 321,\n                            \"bootstrapUserGroup.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"users\", \"userGroups\", \"bootstrapUser\", \"bootstrapUserGroup\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=bootstrapUser,bootstrapUserGroup\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiOrganizationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains permissions required to manipulate the Organization.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@Organizations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"hostname\": \"someString\",\n                            \"bootstrapUser.id\": 321,\n                            \"bootstrapUserGroup.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"users\", \"userGroups\", \"bootstrapUser\", \"bootstrapUserGroup\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=bootstrapUser,bootstrapUserGroup\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiOrganizationInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiOrganizationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains permissions required to manipulate the Organization.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@Organizations\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"hostname\": \"someString\",\n                            \"bootstrapUser.id\": 321,\n                            \"bootstrapUserGroup.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"users\", \"userGroups\", \"bootstrapUser\", \"bootstrapUserGroup\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=bootstrapUser,bootstrapUserGroup\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiOrganizationPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiOrganizationOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains permissions required to manipulate the Organization.\"\n                }\n            }\n        },\n        \"/api/v1/entities/dataSourceIdentifiers\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@DataSourceIdentifiers\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"schema\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;schema==someString\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceIdentifierOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"USE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/dataSourceIdentifiers/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@DataSourceIdentifiers\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"schema\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;schema==someString\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceIdentifierOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"USE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/dataSources\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@DataSources\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"type\": \"DatabaseTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;type==DatabaseTypeValue\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@DataSources\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDataSourceInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@DataSourceTables\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"path\": \"v1,v2,v3\",\n                            \"type\": \"DataSourceTableTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=path==v1,v2,v3;type==DataSourceTableTypeValue\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceTableOutList\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@DataSourceTables\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"path\": \"v1,v2,v3\",\n                            \"type\": \"DataSourceTableTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=path==v1,v2,v3;type==DataSourceTableTypeValue\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceTableOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/dataSources/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@DataSources\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"type\": \"DatabaseTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;type==DatabaseTypeValue\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@DataSources\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"type\": \"DatabaseTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;type==DatabaseTypeValue\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDataSourceInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@DataSources\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"type\": \"DatabaseTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;type==DatabaseTypeValue\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@DataSources\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"type\": \"DatabaseTypeValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;type==DatabaseTypeValue\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDataSourcePatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDataSourceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/entitlements\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Entitlements\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"value\": \"someString\",\n                            \"expiry\": \"LocalDateValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=value==someString;expiry==LocalDateValue\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiEntitlementOutList\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/entitlements/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Entitlements\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"value\": \"someString\",\n                            \"expiry\": \"LocalDateValue\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=value==someString;expiry==LocalDateValue\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiEntitlementOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/userGroups\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {}\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"parents\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parents\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserGroupOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"parents\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parents\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserGroupInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserGroupOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/userGroups/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {}\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"parents\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parents\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserGroupOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {}\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"parents\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parents\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserGroupInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserGroupOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {}\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@UserGroups\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {}\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"parents\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parents\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserGroupPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserGroupOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/users\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Users\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"authenticationId\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=authenticationId==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=userGroups\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@Users\",\n                \"parameters\": [\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=userGroups\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/users/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Users\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"authenticationId\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=authenticationId==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=userGroups\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@Users\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"authenticationId\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=authenticationId==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=userGroups\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@Users\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"authenticationId\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=authenticationId==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@Users\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"authenticationId\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=authenticationId==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"userGroups\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=userGroups\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiUserPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiUserOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/users/{userId}/apiTokens\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@ApiTokens\",\n                \"parameters\": [\n                    {\n                        \"name\": \"userId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"bearerToken\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=bearerToken==someString\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiApiTokenOutList\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@ApiTokens\",\n                \"parameters\": [\n                    {\n                        \"name\": \"userId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiApiTokenInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiApiTokenOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/users/{userId}/apiTokens/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@ApiTokens\",\n                \"parameters\": [\n                    {\n                        \"name\": \"userId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"bearerToken\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=bearerToken==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiApiTokenOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@ApiTokens\",\n                \"parameters\": [\n                    {\n                        \"name\": \"userId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"bearerToken\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=bearerToken==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"earlyAccess\": \"someString\",\n                            \"parent.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;earlyAccess==someString;parent.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaces\", \"parent\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parent\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"config\", \"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=config,permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaces\", \"parent\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parent\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspaceInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{id}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"earlyAccess\": \"someString\",\n                            \"parent.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;earlyAccess==someString;parent.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaces\", \"parent\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parent\"\n                    },\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Include Meta objects.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"description\": \"Included meta objects\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"config\", \"permissions\", \"all\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=config,permissions,all\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"earlyAccess\": \"someString\",\n                            \"parent.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;earlyAccess==someString;parent.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaces\", \"parent\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parent\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspaceInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"earlyAccess\": \"someString\",\n                            \"parent.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;earlyAccess==someString;parent.id==321\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@Workspaces\",\n                \"parameters\": [\n                    {\n                        \"$ref\": \"#/components/parameters/idPathParameter\"\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"name\": \"someString\",\n                            \"earlyAccess\": \"someString\",\n                            \"parent.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=name==someString;earlyAccess==someString;parent.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaces\", \"parent\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=parent\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspacePatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"visualizationObjects\",\n                                    \"analyticalDashboards\",\n                                    \"labels\",\n                                    \"metrics\",\n                                    \"datasets\",\n                                    \"filterContexts\",\n                                    \"dashboardPlugins\",\n                                    \"ALL\"\n                                ]\n                            }\n                        },\n                        \"example\": \"include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"visualizationObjects\",\n                                    \"analyticalDashboards\",\n                                    \"labels\",\n                                    \"metrics\",\n                                    \"datasets\",\n                                    \"filterContexts\",\n                                    \"dashboardPlugins\",\n                                    \"ALL\"\n                                ]\n                            }\n                        },\n                        \"example\": \"include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"visualizationObjects\",\n                                    \"analyticalDashboards\",\n                                    \"labels\",\n                                    \"metrics\",\n                                    \"datasets\",\n                                    \"filterContexts\",\n                                    \"dashboardPlugins\",\n                                    \"ALL\"\n                                ]\n                            }\n                        },\n                        \"example\": \"include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"visualizationObjects\",\n                                    \"analyticalDashboards\",\n                                    \"labels\",\n                                    \"metrics\",\n                                    \"datasets\",\n                                    \"filterContexts\",\n                                    \"dashboardPlugins\",\n                                    \"ALL\"\n                                ]\n                            }\n                        },\n                        \"example\": \"include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@AnalyticalDashboards\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"visualizationObjects\",\n                                    \"analyticalDashboards\",\n                                    \"labels\",\n                                    \"metrics\",\n                                    \"datasets\",\n                                    \"filterContexts\",\n                                    \"dashboardPlugins\",\n                                    \"ALL\"\n                                ]\n                            }\n                        },\n                        \"example\": \"include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/attributes\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Attributes\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"dataset.id\": 321,\n                            \"defaultView.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;dataset.id==321;defaultView.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"datasets\", \"labels\", \"dataset\", \"defaultView\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=dataset,defaultView,labels\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAttributeOutList\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Attributes\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"dataset.id\": 321,\n                            \"defaultView.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;dataset.id==321;defaultView.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"datasets\", \"labels\", \"dataset\", \"defaultView\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=dataset,defaultView,labels\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiAttributeOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDashboardPluginInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDashboardPluginInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@DashboardPlugins\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiDashboardPluginPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/datasets\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Datasets\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"facts\", \"datasets\", \"references\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,facts,references\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDatasetOutList\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Datasets\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"facts\", \"datasets\", \"references\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,facts,references\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiDatasetOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/facts\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Facts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"dataset.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;dataset.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"datasets\", \"dataset\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=dataset\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFactOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Facts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"dataset.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;dataset.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"datasets\", \"dataset\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=dataset\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFactOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/filterContexts\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"datasets\", \"labels\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,datasets,labels\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFilterContextOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"datasets\", \"labels\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,datasets,labels\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiFilterContextInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFilterContextOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"datasets\", \"labels\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,datasets,labels\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFilterContextOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"datasets\", \"labels\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,datasets,labels\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiFilterContextInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFilterContextOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@FilterContexts\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"datasets\", \"labels\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attributes,datasets,labels\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiFilterContextPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiFilterContextOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/labels\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Labels\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"attribute.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;attribute.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"attribute\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attribute\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiLabelOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Labels\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"attribute.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;attribute.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"attributes\", \"attribute\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=attribute\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiLabelOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/metrics\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiMetricOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiMetricInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiMetricOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiMetricOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiMetricInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiMetricOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@Metrics\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiMetricPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiMetricOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/visualizationObjects\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"datasets\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics,datasets\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"datasets\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics,datasets\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"datasets\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics,datasets\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"datasets\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics,datasets\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@VisualizationObjects\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"facts\", \"attributes\", \"labels\", \"metrics\", \"datasets\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=facts,attributes,labels,metrics,datasets\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@WorkspaceDataFilterSettings\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"workspaceDataFilter.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;workspaceDataFilter.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilters\", \"workspaceDataFilter\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=workspaceDataFilter\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@WorkspaceDataFilterSettings\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\",\n                            \"workspaceDataFilter.id\": 321\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString;workspaceDataFilter.id==321\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilters\", \"workspaceDataFilter\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=workspaceDataFilter\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getAllEntities@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilterSettings\", \"filterSettings\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=filterSettings\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/page\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/size\"\n                    },\n                    {\n                        \"$ref\": \"#/components/parameters/sort\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutList\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"post\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"createEntity@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilterSettings\", \"filterSettings\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=filterSettings\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"getEntity@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilterSettings\", \"filterSettings\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=filterSettings\"\n                    },\n                    {\n                        \"name\": \"X-GDC-VALIDATE-RELATIONS\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"VIEW\"],\n                    \"description\": \"Contains minimal permission level required to view this object type.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"updateEntity@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilterSettings\", \"filterSettings\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=filterSettings\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterInDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"delete\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"deleteEntity@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"$ref\": \"#/components/responses/Deleted\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            },\n            \"patch\": {\n                \"tags\": [\"entities\"],\n                \"operationId\": \"patchEntity@WorkspaceDataFilters\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"objectId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"predicate\",\n                        \"in\": \"query\",\n                        \"description\": \"Composed query parameters used for filtering. 'id' parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name=John\u0026language=english,czech\u0026address.city=London\u0026father.id=123).\",\n                        \"deprecated\": true,\n                        \"style\": \"form\",\n                        \"explode\": true,\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": true\n                        },\n                        \"example\": {\n                            \"title\": \"someString\",\n                            \"description\": \"someString\"\n                        }\n                    },\n                    {\n                        \"name\": \"filter\",\n                        \"in\": \"query\",\n                        \"description\": \"Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"example\": \"filter=title==someString;description==someString\"\n                    },\n                    {\n                        \"name\": \"include\",\n                        \"in\": \"query\",\n                        \"description\": \"Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \\\"ALL\\\" is present, all possible includes are used (include=ALL).\\n\\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.\",\n                        \"required\": false,\n                        \"style\": \"form\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"workspaceDataFilterSettings\", \"filterSettings\", \"ALL\"]\n                            }\n                        },\n                        \"example\": \"include=filterSettings\"\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/vnd.gooddata.api+json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterPatchDocument\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Request successfully processed\",\n                        \"content\": {\n                            \"application/vnd.gooddata.api+json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutDocument\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Contains minimal permission level required to manage this object type.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaces\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get all workspaces layout\",\n                \"description\": \"Gets complete layout of workspaces, their hierarchy, models.\",\n                \"operationId\": \"getWorkspacesLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved layout of all workspaces.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeWorkspaces\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get workspaces layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set all workspaces layout\",\n                \"description\": \"Sets complete layout of workspaces, their hierarchy, models.\",\n                \"operationId\": \"setWorkspacesLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeWorkspaces\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"All workspaces layout set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set workspaces layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaces/{workspaceId}\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get workspace layout\",\n                \"description\": \"Retrieve current model of the workspace in declarative form.\",\n                \"operationId\": \"getWorkspaceLayout\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved the workspace model.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeWorkspaceModel\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Permissions required to read the layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set workspace layout\",\n                \"description\": \"Set complete layout of workspace, like model, authorization, etc.\",\n                \"operationId\": \"putWorkspaceLayout\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeWorkspaceModel\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"The model of the workspace was set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permissions required to modify the layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaces/{workspaceId}/permissions\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get permissions for the workspace\",\n                \"description\": \"Retrieve current set of permissions of the workspace in a declarative form.\",\n                \"operationId\": \"getWorkspacePermissions_1\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved current set of permissions.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeWorkspacePermissions\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permissions required to manipulate permissions.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set permissions for the workspace\",\n                \"description\": \"Set effective permissions for the workspace\",\n                \"operationId\": \"getWorkspacePermissions\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeWorkspacePermissions\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Workspace permissions successfully set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permissions required to manipulate permissions.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaces/{workspaceId}/logicalModel\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get logical model\",\n                \"description\": \"Retrieve current logical model of the workspace in declarative form.\",\n                \"operationId\": \"getLogicalModel\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    {\n                        \"name\": \"includeParents\",\n                        \"in\": \"query\",\n                        \"required\": false,\n                        \"schema\": {\n                            \"type\": \"boolean\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved current logical model.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeModel\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Permissions required to read the logical model.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set logical model\",\n                \"description\": \"Set effective logical model of the workspace.\",\n                \"operationId\": \"setLogicalModel\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeModel\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Logical model successfully set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permissions required to alter the logical model.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaces/{workspaceId}/analyticsModel\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get analytics model\",\n                \"description\": \"Retrieve current analytics model of the workspace.\",\n                \"operationId\": \"getAnalyticsModel\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved current analytics model.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeAnalytics\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Permissions to read the analytics layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set analytics model\",\n                \"description\": \"Set effective analytics model of the workspace.\",\n                \"operationId\": \"setAnalyticsModel\",\n                \"parameters\": [\n                    {\n                        \"name\": \"workspaceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeAnalytics\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Analytics model successfully set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"ANALYZE\"],\n                    \"description\": \"Permissions to modify the analytics layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/workspaceDataFilters\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get workspace data filters for all workspaces\",\n                \"description\": \"Retrieve all workspaces and related workspace data filters (and their settings / values).\",\n                \"operationId\": \"getWorkspaceDataFiltersLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all workspace data filters.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilters\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get data filters layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set all workspace data filters\",\n                \"description\": \"Sets workspace data filters in all workspaces in entire organization.\",\n                \"operationId\": \"setWorkspaceDataFiltersLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilters\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"All workspace data filters set.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set data filters layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/users\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get all users\",\n                \"description\": \"Retrieve all users including authentication properties.\",\n                \"operationId\": \"getUsersLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all users.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeUsers\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get users layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Put all users\",\n                \"description\": \"Set all users and their authentication properties.\",\n                \"operationId\": \"putUsersLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeUsers\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Defined all users.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set users layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/usersAndUserGroups\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get all users and user groups\",\n                \"description\": \"Retrieve all users and user groups with theirs properties.\",\n                \"operationId\": \"getUsersUserGroupsLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all users and user groups.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeUsersUserGroups\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get user/groups layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Put all users and user groups\",\n                \"description\": \"Define all users and user groups with theirs properties.\",\n                \"operationId\": \"putUsersUserGroupsLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeUsersUserGroups\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Defined all users and user groups.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set user/groups layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/userGroups\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get all user groups\",\n                \"description\": \"Retrieve all user-groups eventually with parent group.\",\n                \"operationId\": \"getUserGroupsLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all user groups.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeUserGroups\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get groups layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Put all user groups\",\n                \"description\": \"Define all user groups with their parents eventually.\",\n                \"operationId\": \"putUserGroupsLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeUserGroups\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Defined all user groups.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set groups layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/organization\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get organization layout\",\n                \"description\": \"Retrieve complete layout of organization, workspaces, user-groups, etc.\",\n                \"operationId\": \"getOrganizationLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all parts of an organization.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeOrganization\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get organization layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set organization layout\",\n                \"description\": \"Sets complete layout of organization, like workspaces, user-groups, etc.\",\n                \"operationId\": \"setOrganizationLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeOrganization\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Defined all parts of an organization.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set organization layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/dataSources\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get all data sources\",\n                \"description\": \"Retrieve all data sources including related physical model.\",\n                \"operationId\": \"getDataSourcesLayout\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved all data sources.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeDataSources\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to get data sources layout.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Put all data sources\",\n                \"description\": \"Set all data sources including related physical model.\",\n                \"operationId\": \"putDataSourcesLayout\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativeDataSources\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Defined all data sources.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Permission required to set data sources layout.\"\n                }\n            }\n        },\n        \"/api/v1/layout/dataSources/{dataSourceId}/physicalModel\": {\n            \"get\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Get data source physical model layout\",\n                \"description\": \"Retrieve complete layout of tables with their columns\",\n                \"operationId\": \"getPdmLayout\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retrieved data source physical mode layout.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativePdm\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"USE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            },\n            \"put\": {\n                \"tags\": [\"layout\"],\n                \"summary\": \"Set data source physical model layout\",\n                \"description\": \"Sets complete layout of tables with their columns under corresponding Data Source.\",\n                \"operationId\": \"setPdmLayout\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeclarativePdm\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Data source physical mode layout set successfully.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            }\n        },\n        \"/api/v1/actions/dataSources/{dataSourceId}/uploadNotification\": {\n            \"post\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Register an upload notification\",\n                \"description\": \"Notification sets up all reports to be computed again with new data.\",\n                \"operationId\": \"registerUploadNotification\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"An upload notification has been successfully registered.\"\n                    },\n                    \"404\": {\n                        \"description\": \"Data source with given name does not exist.\"\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            }\n        },\n        \"/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel\": {\n            \"post\": {\n                \"tags\": [\"actions\"],\n                \"summary\": \"Generate logical data model (LDM) from physical data model (PDM)\",\n                \"description\": \"Generate logical data model (LDM) from physical data model (PDM) stored in data source.\",\n                \"operationId\": \"generateLogicalModel\",\n                \"parameters\": [\n                    {\n                        \"name\": \"dataSourceId\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/GenerateLdmRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"LDM generated successfully.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeModel\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Data source with given name does not exist.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeclarativeModel\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-gdc-security-info\": {\n                    \"permissions\": [\"MANAGE\"],\n                    \"description\": \"Minimal permission required to use this endpoint.\"\n                }\n            }\n        },\n        \"/api/v1/options\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"summary\": \"Links for all configuration options\",\n                \"description\": \"Retrieves links for all options for different configurations.\",\n                \"operationId\": \"getAllOptions\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Links for all configuration options.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"examples\": {\n                                    \"All options\": {\n                                        \"description\": \"All options\",\n                                        \"value\": {\n                                            \"options\": {\n                                                \"description\": \"Options resources\",\n                                                \"links\": {\n                                                    \"availableDrivers\": \"/api/v1/options/availableDrivers\"\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/options/availableDrivers\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"summary\": \"Get all available data source drivers\",\n                \"description\": \"Retrieves a list of all supported data sources along with information about the used drivers.\",\n                \"operationId\": \"getDataSourceDrivers\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"A list of all available data source drivers.\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"examples\": {\n                                    \"All available drivers\": {\n                                        \"description\": \"All available drivers\",\n                                        \"value\": {\n                                            \"POSTGRESQL\": \"org.postgresql.Driver\",\n                                            \"REDSHIFT\": \"com.amazon.redshift.jdbc42.Driver\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/entities/organization\": {\n            \"get\": {\n                \"tags\": [\"entities\"],\n                \"summary\": \"Get current organization info\",\n                \"description\": \"Gets a basic information about organization.\",\n                \"operationId\": \"getOrganization\",\n                \"parameters\": [\n                    {\n                        \"name\": \"metaInclude\",\n                        \"in\": \"query\",\n                        \"description\": \"Return list of permissions available to logged user.\",\n                        \"explode\": false,\n                        \"schema\": {\n                            \"uniqueItems\": true,\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"description\": \"Available meta objects to include.\",\n                                \"enum\": [\"permissions\", \"all\"]\n                            }\n                        },\n                        \"example\": \"metaInclude=permissions\"\n                    }\n                ],\n                \"responses\": {\n                    \"302\": {\n                        \"description\": \"Redirect to entity URI.\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"ObjectLinks\": {\n                \"required\": [\"self\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"self\": {\n                        \"type\": \"string\",\n                        \"description\": \"A string containing the link's URL.\",\n                        \"format\": \"uri\"\n                    }\n                }\n            },\n            \"ObjectLinksContainer\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"ListLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"next\": {\n                                \"type\": \"string\",\n                                \"description\": \"A string containing the link's URL for the next page of data.\",\n                                \"format\": \"uri\"\n                            }\n                        }\n                    }\n                ]\n            },\n            \"JsonApiDataSourceInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceIn\"\n                    }\n                }\n            },\n            \"JsonApiDataSourceIn\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataSource\",\n                        \"enum\": [\"dataSource\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"required\": [\"name\", \"schema\", \"type\", \"url\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"POSTGRESQL\",\n                                    \"REDSHIFT\",\n                                    \"VERTICA\",\n                                    \"SNOWFLAKE\",\n                                    \"ADS\",\n                                    \"BIGQUERY\",\n                                    \"MSSQL\",\n                                    \"PRESTO\",\n                                    \"DREMIO\",\n                                    \"DRILL\"\n                                ]\n                            },\n                            \"url\": {\n                                \"type\": \"string\"\n                            },\n                            \"schema\": {\n                                \"type\": \"string\"\n                            },\n                            \"username\": {\n                                \"type\": \"string\"\n                            },\n                            \"password\": {\n                                \"type\": \"string\"\n                            },\n                            \"token\": {\n                                \"type\": \"string\"\n                            },\n                            \"enableCaching\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"cachePath\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dataSource entity.\"\n            },\n            \"JsonApiDataSourceOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiDataSourceOut\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataSource\",\n                        \"enum\": [\"dataSource\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"meta\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"permissions\": {\n                                \"type\": \"array\",\n                                \"description\": \"List of valid permissions for a logged user.\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"enum\": [\"MANAGE\", \"USE\"]\n                                }\n                            }\n                        }\n                    },\n                    \"attributes\": {\n                        \"required\": [\"name\", \"schema\", \"type\", \"url\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"POSTGRESQL\",\n                                    \"REDSHIFT\",\n                                    \"VERTICA\",\n                                    \"SNOWFLAKE\",\n                                    \"ADS\",\n                                    \"BIGQUERY\",\n                                    \"MSSQL\",\n                                    \"PRESTO\",\n                                    \"DREMIO\",\n                                    \"DRILL\"\n                                ]\n                            },\n                            \"url\": {\n                                \"type\": \"string\"\n                            },\n                            \"schema\": {\n                                \"type\": \"string\"\n                            },\n                            \"username\": {\n                                \"type\": \"string\"\n                            },\n                            \"enableCaching\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"cachePath\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dataSource entity.\"\n            },\n            \"JsonApiUserGroupInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupIn\"\n                    }\n                }\n            },\n            \"JsonApiUserGroupIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"userGroup\",\n                        \"enum\": [\"userGroup\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parents\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of userGroup entity.\"\n            },\n            \"JsonApiUserGroupLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"userGroup\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiUserGroupToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiUserGroupLinkage\"\n                }\n            },\n            \"JsonApiUserGroupOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiUserGroupOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"userGroup\",\n                        \"enum\": [\"userGroup\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parents\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of userGroup entity.\"\n            },\n            \"JsonApiUserInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserIn\"\n                    }\n                }\n            },\n            \"JsonApiUserIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"user\",\n                        \"enum\": [\"user\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"authenticationId\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"userGroups\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of user entity.\"\n            },\n            \"JsonApiUserOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiUserOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"user\",\n                        \"enum\": [\"user\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"authenticationId\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"userGroups\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of user entity.\"\n            },\n            \"JsonApiWorkspaceInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceIn\"\n                    }\n                }\n            },\n            \"JsonApiWorkspaceIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspace\",\n                        \"enum\": [\"workspace\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parent\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of workspace entity.\"\n            },\n            \"JsonApiWorkspaceLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"workspace\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiWorkspaceToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiWorkspaceOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiWorkspaceOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspace\",\n                        \"enum\": [\"workspace\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"meta\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"config\": {\n                                \"required\": [\"approximateCountAvailable\", \"dataSamplingAvailable\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"dataSamplingAvailable\": {\n                                        \"type\": \"boolean\",\n                                        \"description\": \"is sampling enabled - based on type of data-source connected to this workspace\",\n                                        \"default\": false\n                                    },\n                                    \"approximateCountAvailable\": {\n                                        \"type\": \"boolean\",\n                                        \"description\": \"is approximate count enabled - based on type of data-source connected to this workspace\",\n                                        \"default\": false\n                                    }\n                                }\n                            },\n                            \"permissions\": {\n                                \"type\": \"array\",\n                                \"description\": \"List of valid permissions for a logged user.\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"enum\": [\"MANAGE\", \"ANALYZE\", \"VIEW\"]\n                                }\n                            }\n                        }\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parent\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of workspace entity.\"\n            },\n            \"JsonApiApiTokenOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiApiTokenOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiApiTokenOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"apiToken\",\n                        \"enum\": [\"apiToken\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"bearerToken\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of apiToken entity.\"\n            },\n            \"JsonApiDataSourceTableOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceTableOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiDataSourceTableOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDataSourceTableOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiDataSourceTableOut\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataSourceTable\",\n                        \"enum\": [\"dataSourceTable\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"required\": [\"columns\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"path\": {\n                                \"type\": \"array\",\n                                \"description\": \"Path to table.\",\n                                \"example\": [\"table_schema\", \"table_name\"],\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"table_name\"\n                                }\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"TABLE\", \"VIEW\"]\n                            },\n                            \"namePrefix\": {\n                                \"type\": \"string\"\n                            },\n                            \"columns\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"required\": [\"dataType\", \"name\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"dataType\": {\n                                            \"type\": \"string\",\n                                            \"enum\": [\n                                                \"INT\",\n                                                \"STRING\",\n                                                \"DATE\",\n                                                \"NUMERIC\",\n                                                \"TIMESTAMP\",\n                                                \"BOOLEAN\"\n                                            ]\n                                        },\n                                        \"isPrimaryKey\": {\n                                            \"type\": \"boolean\"\n                                        },\n                                        \"referencedTableId\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"referencedTableColumn\": {\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"description\": \"Table columns in data source\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"Tables in data source\"\n            },\n            \"JsonApiAnalyticalDashboardOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFilterContextOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiAnalyticalDashboardOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiAnalyticalDashboardOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"analyticalDashboard\",\n                        \"enum\": [\"analyticalDashboard\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"visualizationObjects\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"analyticalDashboards\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"labels\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"metrics\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiMetricToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"datasets\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"filterContexts\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiFilterContextToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"dashboardPlugins\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of analyticalDashboard entity.\"\n            },\n            \"JsonApiAnalyticalDashboardLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"analyticalDashboard\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiAnalyticalDashboardToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardLinkage\"\n                }\n            },\n            \"JsonApiDashboardPluginLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"dashboardPlugin\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiDashboardPluginToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiDashboardPluginLinkage\"\n                }\n            },\n            \"JsonApiDatasetLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"dataset\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiDatasetToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiDatasetLinkage\"\n                }\n            },\n            \"JsonApiFilterContextLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"filterContext\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiFilterContextToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiFilterContextLinkage\"\n                }\n            },\n            \"JsonApiLabelLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"label\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiLabelToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiLabelLinkage\"\n                }\n            },\n            \"JsonApiMetricLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"metric\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiMetricToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiMetricLinkage\"\n                }\n            },\n            \"JsonApiVisualizationObjectLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"visualizationObject\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiVisualizationObjectToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectLinkage\"\n                }\n            },\n            \"JsonApiAttributeOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiAttributeOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAttributeOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiAttributeOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"attribute\",\n                        \"enum\": [\"attribute\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"granularity\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"MINUTE\",\n                                    \"HOUR\",\n                                    \"DAY\",\n                                    \"WEEK\",\n                                    \"MONTH\",\n                                    \"QUARTER\",\n                                    \"YEAR\",\n                                    \"MINUTE_OF_HOUR\",\n                                    \"HOUR_OF_DAY\",\n                                    \"DAY_OF_WEEK\",\n                                    \"DAY_OF_MONTH\",\n                                    \"DAY_OF_YEAR\",\n                                    \"WEEK_OF_YEAR\",\n                                    \"MONTH_OF_YEAR\",\n                                    \"QUARTER_OF_YEAR\"\n                                ]\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"sortColumn\": {\n                                \"type\": \"string\"\n                            },\n                            \"sortDirection\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"ASC\", \"DESC\"]\n                            },\n                            \"sourceColumn\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"dataset\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToOneLinkage\"\n                                    }\n                                }\n                            },\n                            \"defaultView\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToOneLinkage\"\n                                    }\n                                }\n                            },\n                            \"labels\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of attribute entity.\"\n            },\n            \"JsonApiDatasetToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiLabelToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiDashboardPluginOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiDashboardPluginOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dashboardPlugin\",\n                        \"enum\": [\"dashboardPlugin\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"url\": \"\u003cplugin-url\u003e\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dashboardPlugin entity.\"\n            },\n            \"JsonApiDatasetOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFactOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiDatasetOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDatasetOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiDatasetOut\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataset\",\n                        \"enum\": [\"dataset\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"required\": [\"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"NORMAL\", \"DATE\"]\n                            },\n                            \"grain\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"required\": [\"id\", \"type\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"id\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"type\": {\n                                            \"type\": \"string\",\n                                            \"enum\": [\"attribute\", \"dataset\"]\n                                        }\n                                    }\n                                }\n                            },\n                            \"referenceProperties\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"required\": [\"identifier\", \"multivalue\", \"sourceColumns\"],\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"identifier\": {\n                                            \"$ref\": \"#/components/schemas/DatasetReferenceIdentifier\"\n                                        },\n                                        \"multivalue\": {\n                                            \"type\": \"boolean\"\n                                        },\n                                        \"sourceColumns\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"string\"\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            \"dataSourceTableId\": {\n                                \"type\": \"string\"\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"attributes\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAttributeToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"facts\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiFactToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"references\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dataset entity.\"\n            },\n            \"DatasetReferenceIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"dataset\"]\n                    }\n                }\n            },\n            \"JsonApiAttributeLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"attribute\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiAttributeToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiAttributeLinkage\"\n                }\n            },\n            \"JsonApiFactLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"fact\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiFactToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiFactLinkage\"\n                }\n            },\n            \"JsonApiFactOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiFactOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiFactOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"fact\",\n                        \"enum\": [\"fact\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"sourceColumn\": {\n                                \"type\": \"string\"\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"dataset\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of fact entity.\"\n            },\n            \"JsonApiFilterContextOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiFilterContextOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiFilterContextOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiFilterContextOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiFilterContextOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"filterContext\",\n                        \"enum\": [\"filterContext\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"attributes\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAttributeToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"datasets\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"labels\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of filterContext entity.\"\n            },\n            \"JsonApiLabelOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiLabelOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"label\",\n                        \"enum\": [\"label\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"primary\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"sourceColumn\": {\n                                \"type\": \"string\"\n                            },\n                            \"valueType\": {\n                                \"type\": \"string\",\n                                \"enum\": [\"TEXT\", \"HYPERLINK\", \"GEO\"]\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"attribute\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAttributeToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of label entity.\"\n            },\n            \"JsonApiAttributeToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiMetricOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFactOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiMetricOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiMetricOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiMetricOut\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"metric\",\n                        \"enum\": [\"metric\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"required\": [\"content\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"required\": [\"maql\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"format\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"maql\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"facts\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiFactToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"attributes\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAttributeToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"labels\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"metrics\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiMetricToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of metric entity.\"\n            },\n            \"JsonApiVisualizationObjectOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFactOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiVisualizationObjectOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiVisualizationObjectOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"visualizationObject\",\n                        \"enum\": [\"visualizationObject\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"facts\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiFactToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"attributes\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiAttributeToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"labels\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiLabelToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"metrics\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiMetricToManyLinkage\"\n                                    }\n                                }\n                            },\n                            \"datasets\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiDatasetToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of visualizationObject entity.\"\n            },\n            \"JsonApiWorkspaceDataFilterSettingOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiWorkspaceDataFilterSettingOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspaceDataFilterSetting\",\n                        \"enum\": [\"workspaceDataFilterSetting\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"filterValues\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"workspaceDataFilter\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of workspaceDataFilterSetting entity.\"\n            },\n            \"JsonApiWorkspaceDataFilterLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"workspaceDataFilter\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiWorkspaceDataFilterToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiWorkspaceDataFilterOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiWorkspaceDataFilterOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspaceDataFilter\",\n                        \"enum\": [\"workspaceDataFilter\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"columnName\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"filterSettings\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of workspaceDataFilter entity.\"\n            },\n            \"JsonApiWorkspaceDataFilterSettingLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"workspaceDataFilterSetting\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiWorkspaceDataFilterSettingToManyLinkage\": {\n                \"type\": \"array\",\n                \"description\": \"References to other resource objects in a to-many (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingLinkage\"\n                }\n            },\n            \"JsonApiApiTokenInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiApiTokenIn\"\n                    }\n                }\n            },\n            \"JsonApiApiTokenIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"apiToken\",\n                        \"enum\": [\"apiToken\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    }\n                },\n                \"description\": \"JSON:API representation of apiToken entity.\"\n            },\n            \"JsonApiAnalyticalDashboardInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardIn\"\n                    }\n                }\n            },\n            \"JsonApiAnalyticalDashboardIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"analyticalDashboard\",\n                        \"enum\": [\"analyticalDashboard\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of analyticalDashboard entity.\"\n            },\n            \"JsonApiDashboardPluginInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginIn\"\n                    }\n                }\n            },\n            \"JsonApiDashboardPluginIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dashboardPlugin\",\n                        \"enum\": [\"dashboardPlugin\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"url\": \"\u003cplugin-url\u003e\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dashboardPlugin entity.\"\n            },\n            \"JsonApiFilterContextInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiFilterContextIn\"\n                    }\n                }\n            },\n            \"JsonApiFilterContextIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"filterContext\",\n                        \"enum\": [\"filterContext\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of filterContext entity.\"\n            },\n            \"JsonApiMetricInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricIn\"\n                    }\n                }\n            },\n            \"JsonApiMetricIn\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"metric\",\n                        \"enum\": [\"metric\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"required\": [\"content\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"required\": [\"maql\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"format\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"maql\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of metric entity.\"\n            },\n            \"JsonApiVisualizationObjectInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectIn\"\n                    }\n                }\n            },\n            \"JsonApiVisualizationObjectIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"visualizationObject\",\n                        \"enum\": [\"visualizationObject\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of visualizationObject entity.\"\n            },\n            \"JsonApiWorkspaceDataFilterInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterIn\"\n                    }\n                }\n            },\n            \"JsonApiWorkspaceDataFilterIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspaceDataFilter\",\n                        \"enum\": [\"workspaceDataFilter\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"columnName\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"filterSettings\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of workspaceDataFilter entity.\"\n            },\n            \"JsonApiDataSourceTableOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceTableOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiCookieSecurityConfigurationOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiCookieSecurityConfigurationOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"cookieSecurityConfiguration\",\n                        \"enum\": [\"cookieSecurityConfiguration\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"lastRotation\": {\n                                \"type\": \"string\",\n                                \"format\": \"date-time\"\n                            },\n                            \"rotationInterval\": {\n                                \"type\": \"string\",\n                                \"description\": \"Length of interval between automatic rotations expressed in format of ISO 8601 duration\",\n                                \"example\": \"P30D\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of cookieSecurityConfiguration entity.\"\n            },\n            \"JsonApiOrganizationOutIncludes\": {\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserOutWithLinks\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                    }\n                ]\n            },\n            \"JsonApiOrganizationOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiOrganizationOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiOrganizationOutIncludes\"\n                        }\n                    }\n                }\n            },\n            \"JsonApiOrganizationOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"organization\",\n                        \"enum\": [\"organization\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"meta\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"permissions\": {\n                                \"type\": \"array\",\n                                \"description\": \"List of valid permissions for a logged user.\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"enum\": [\"MANAGE\"]\n                                }\n                            }\n                        }\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"hostname\": {\n                                \"type\": \"string\"\n                            },\n                            \"allowedOrigins\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"oauthIssuerLocation\": {\n                                \"type\": \"string\"\n                            },\n                            \"oauthClientId\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"bootstrapUser\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserToOneLinkage\"\n                                    }\n                                }\n                            },\n                            \"bootstrapUserGroup\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of organization entity.\"\n            },\n            \"JsonApiUserGroupToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiUserLinkage\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"user\"]\n                    }\n                },\n                \"description\": \"The \\\\\\\"type\\\\\\\" and \\\\\\\"id\\\\\\\" to non-empty members.\"\n            },\n            \"JsonApiUserToOneLinkage\": {\n                \"description\": \"References to other resource objects in a to-one (\\\\\\\"relationship\\\\\\\"). Relationships can be specified by including a member in a resource's links object.\",\n                \"nullable\": true,\n                \"oneOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserLinkage\"\n                    }\n                ]\n            },\n            \"JsonApiAnalyticalDashboardOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiAnalyticalDashboardOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiAttributeOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiAttributeOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiAttributeOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAttributeOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiDashboardPluginOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiDashboardPluginOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDashboardPluginOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiDatasetOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDatasetOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiDatasetOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDatasetOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiFactOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFactOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiFactOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiFactOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDatasetOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiFilterContextOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiFilterContextOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiFilterContextOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiFilterContextOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiFilterContextOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiLabelOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiLabelOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiLabelOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiLabelOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiAttributeOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiMetricOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiMetricOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiMetricOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiMetricOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiVisualizationObjectOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiVisualizationObjectOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectOutIncludes\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiWorkspaceDataFilterSettingOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiWorkspaceDataFilterSettingOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiWorkspaceDataFilterOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiWorkspaceDataFilterOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiCookieSecurityConfigurationInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationIn\"\n                    }\n                }\n            },\n            \"JsonApiCookieSecurityConfigurationIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"cookieSecurityConfiguration\",\n                        \"enum\": [\"cookieSecurityConfiguration\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"lastRotation\": {\n                                \"type\": \"string\",\n                                \"format\": \"date-time\"\n                            },\n                            \"rotationInterval\": {\n                                \"type\": \"string\",\n                                \"description\": \"Length of interval between automatic rotations expressed in format of ISO 8601 duration\",\n                                \"example\": \"P30D\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of cookieSecurityConfiguration entity.\"\n            },\n            \"JsonApiOrganizationInDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiOrganizationIn\"\n                    }\n                }\n            },\n            \"JsonApiOrganizationIn\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"organization\",\n                        \"enum\": [\"organization\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"hostname\": {\n                                \"type\": \"string\"\n                            },\n                            \"allowedOrigins\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"oauthIssuerLocation\": {\n                                \"type\": \"string\"\n                            },\n                            \"oauthClientId\": {\n                                \"type\": \"string\"\n                            },\n                            \"oauthClientSecret\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of organization entity.\"\n            },\n            \"JsonApiAnalyticalDashboardPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiAnalyticalDashboardPatch\"\n                    }\n                }\n            },\n            \"JsonApiAnalyticalDashboardPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"analyticalDashboard\",\n                        \"enum\": [\"analyticalDashboard\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching analyticalDashboard entity.\"\n            },\n            \"JsonApiDashboardPluginPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDashboardPluginPatch\"\n                    }\n                }\n            },\n            \"JsonApiDashboardPluginPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dashboardPlugin\",\n                        \"enum\": [\"dashboardPlugin\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"url\": \"\u003cplugin-url\u003e\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching dashboardPlugin entity.\"\n            },\n            \"JsonApiFilterContextPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiFilterContextPatch\"\n                    }\n                }\n            },\n            \"JsonApiFilterContextPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"filterContext\",\n                        \"enum\": [\"filterContext\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching filterContext entity.\"\n            },\n            \"JsonApiMetricPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiMetricPatch\"\n                    }\n                }\n            },\n            \"JsonApiMetricPatch\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"metric\",\n                        \"enum\": [\"metric\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"required\": [\"maql\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"format\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"maql\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching metric entity.\"\n            },\n            \"JsonApiVisualizationObjectPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiVisualizationObjectPatch\"\n                    }\n                }\n            },\n            \"JsonApiVisualizationObjectPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"visualizationObject\",\n                        \"enum\": [\"visualizationObject\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"areRelationsValid\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"content\": {\n                                \"type\": \"object\",\n                                \"description\": \"Free-form JSON content.\",\n                                \"example\": {\n                                    \"identifier\": {\n                                        \"id\": \"label.leaf\",\n                                        \"type\": \"label\"\n                                    },\n                                    \"someBoolProp\": false\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching visualizationObject entity.\"\n            },\n            \"JsonApiWorkspaceDataFilterPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterPatch\"\n                    }\n                }\n            },\n            \"JsonApiWorkspaceDataFilterPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspaceDataFilter\",\n                        \"enum\": [\"workspaceDataFilter\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^((?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"title\": {\n                                \"type\": \"string\"\n                            },\n                            \"description\": {\n                                \"type\": \"string\"\n                            },\n                            \"columnName\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"filterSettings\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching workspaceDataFilter entity.\"\n            },\n            \"JsonApiApiTokenOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiApiTokenOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiApiTokenOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiApiTokenOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiDataSourceIdentifierOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceIdentifierOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiDataSourceIdentifierOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDataSourceIdentifierOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiDataSourceIdentifierOut\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataSourceIdentifier\",\n                        \"enum\": [\"dataSourceIdentifier\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"meta\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"permissions\": {\n                                \"type\": \"array\",\n                                \"description\": \"List of valid permissions for a logged user.\",\n                                \"items\": {\n                                    \"type\": \"string\",\n                                    \"enum\": [\"MANAGE\", \"USE\"]\n                                }\n                            }\n                        }\n                    },\n                    \"attributes\": {\n                        \"required\": [\"name\", \"schema\", \"type\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"schema\": {\n                                \"type\": \"string\"\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"POSTGRESQL\",\n                                    \"REDSHIFT\",\n                                    \"VERTICA\",\n                                    \"SNOWFLAKE\",\n                                    \"ADS\",\n                                    \"BIGQUERY\",\n                                    \"MSSQL\",\n                                    \"PRESTO\",\n                                    \"DREMIO\",\n                                    \"DRILL\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of dataSourceIdentifier entity.\"\n            },\n            \"JsonApiDataSourceOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiDataSourceOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiDataSourceOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiEntitlementOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiEntitlementOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiEntitlementOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiEntitlementOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiEntitlementOut\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"entitlement\",\n                        \"enum\": [\"entitlement\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"value\": {\n                                \"type\": \"string\"\n                            },\n                            \"expiry\": {\n                                \"type\": \"string\",\n                                \"format\": \"date\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of entitlement entity.\"\n            },\n            \"JsonApiUserGroupOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiUserGroupOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiUserOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiUserOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiUserOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiUserGroupOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiWorkspaceOutWithLinks\": {\n                \"allOf\": [\n                    {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceOut\"\n                    },\n                    {\n                        \"$ref\": \"#/components/schemas/ObjectLinksContainer\"\n                    }\n                ]\n            },\n            \"JsonApiWorkspaceOutList\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutWithLinks\"\n                        }\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ListLinks\"\n                    },\n                    \"included\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"Included resources\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JsonApiWorkspaceOutWithLinks\"\n                        }\n                    }\n                },\n                \"description\": \"A JSON:API document with a list of resources\"\n            },\n            \"JsonApiCookieSecurityConfigurationPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiCookieSecurityConfigurationPatch\"\n                    }\n                }\n            },\n            \"JsonApiCookieSecurityConfigurationPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"cookieSecurityConfiguration\",\n                        \"enum\": [\"cookieSecurityConfiguration\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"lastRotation\": {\n                                \"type\": \"string\",\n                                \"format\": \"date-time\"\n                            },\n                            \"rotationInterval\": {\n                                \"type\": \"string\",\n                                \"description\": \"Length of interval between automatic rotations expressed in format of ISO 8601 duration\",\n                                \"example\": \"P30D\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching cookieSecurityConfiguration entity.\"\n            },\n            \"JsonApiOrganizationPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiOrganizationPatch\"\n                    }\n                }\n            },\n            \"JsonApiOrganizationPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"organization\",\n                        \"enum\": [\"organization\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"hostname\": {\n                                \"type\": \"string\"\n                            },\n                            \"allowedOrigins\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"oauthIssuerLocation\": {\n                                \"type\": \"string\"\n                            },\n                            \"oauthClientId\": {\n                                \"type\": \"string\"\n                            },\n                            \"oauthClientSecret\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching organization entity.\"\n            },\n            \"JsonApiDataSourcePatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourcePatch\"\n                    }\n                }\n            },\n            \"JsonApiDataSourcePatch\": {\n                \"required\": [\"attributes\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"dataSource\",\n                        \"enum\": [\"dataSource\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"type\": {\n                                \"type\": \"string\",\n                                \"enum\": [\n                                    \"POSTGRESQL\",\n                                    \"REDSHIFT\",\n                                    \"VERTICA\",\n                                    \"SNOWFLAKE\",\n                                    \"ADS\",\n                                    \"BIGQUERY\",\n                                    \"MSSQL\",\n                                    \"PRESTO\",\n                                    \"DREMIO\",\n                                    \"DRILL\"\n                                ]\n                            },\n                            \"url\": {\n                                \"type\": \"string\"\n                            },\n                            \"schema\": {\n                                \"type\": \"string\"\n                            },\n                            \"username\": {\n                                \"type\": \"string\"\n                            },\n                            \"password\": {\n                                \"type\": \"string\"\n                            },\n                            \"token\": {\n                                \"type\": \"string\"\n                            },\n                            \"enableCaching\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"cachePath\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching dataSource entity.\"\n            },\n            \"JsonApiUserGroupPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserGroupPatch\"\n                    }\n                }\n            },\n            \"JsonApiUserGroupPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"userGroup\",\n                        \"enum\": [\"userGroup\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parents\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching userGroup entity.\"\n            },\n            \"JsonApiUserPatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiUserPatch\"\n                    }\n                }\n            },\n            \"JsonApiUserPatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"user\",\n                        \"enum\": [\"user\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"authenticationId\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"userGroups\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiUserGroupToManyLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching user entity.\"\n            },\n            \"JsonApiWorkspacePatchDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiWorkspacePatch\"\n                    }\n                }\n            },\n            \"JsonApiWorkspacePatch\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Object type\",\n                        \"example\": \"workspace\",\n                        \"enum\": [\"workspace\"]\n                    },\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"API identifier of an object\",\n                        \"example\": \"id1\"\n                    },\n                    \"attributes\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"earlyAccess\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    },\n                    \"relationships\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"parent\": {\n                                \"required\": [\"data\"],\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"data\": {\n                                        \"$ref\": \"#/components/schemas/JsonApiWorkspaceToOneLinkage\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"description\": \"JSON:API representation of patching workspace entity.\"\n            },\n            \"JsonApiDataSourceIdentifierOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiDataSourceIdentifierOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"JsonApiEntitlementOutDocument\": {\n                \"required\": [\"data\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"data\": {\n                        \"$ref\": \"#/components/schemas/JsonApiEntitlementOut\"\n                    },\n                    \"links\": {\n                        \"$ref\": \"#/components/schemas/ObjectLinks\"\n                    }\n                }\n            },\n            \"AssigneeIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"user\", \"userGroup\"]\n                    }\n                },\n                \"description\": \"Identifier of a user or user-group.\"\n            },\n            \"DataSourceTableIdentifier\": {\n                \"required\": [\"dataSourceId\", \"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"ID of table.\",\n                        \"example\": \"customers\"\n                    },\n                    \"dataSourceId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Data source ID.\",\n                        \"example\": \"my-postgres\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Data source entity type.\",\n                        \"example\": \"dataSource\",\n                        \"enum\": [\"dataSource\"]\n                    }\n                },\n                \"description\": \"An id of the table from PDM mapped to this dataset. Including ID of data source.\",\n                \"example\": {\n                    \"id\": \"customers\",\n                    \"dataSourceId\": \"my-postgres\",\n                    \"type\": \"DATA_SOURCE\"\n                }\n            },\n            \"DeclarativeAnalyticalDashboard\": {\n                \"required\": [\"content\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Analytical dashboard ID.\",\n                        \"example\": \"revenues-analysis\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Analytical dashboard title.\",\n                        \"example\": \"Revenues analysis\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Analytical dashboard description.\",\n                        \"example\": \"Period to period comparison of revenues in main sectors.\"\n                    },\n                    \"content\": {\n                        \"$ref\": \"#/components/schemas/JsonNode\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Revenues\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Revenues\\\"]\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeAnalyticsLayer\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"analyticalDashboards\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of analytical dashboards available in the model.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeAnalyticalDashboard\"\n                        }\n                    },\n                    \"filterContexts\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of filter contexts available in the model.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeFilterContext\"\n                        }\n                    },\n                    \"metrics\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of metrics available in the model.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeMetric\"\n                        }\n                    },\n                    \"visualizationObjects\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of visualization objects available in the model.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeVisualizationObject\"\n                        }\n                    },\n                    \"dashboardPlugins\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of dashboard plugins available in the model.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDashboardPlugin\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeAttribute\": {\n                \"required\": [\"id\", \"labels\", \"sourceColumn\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Attribute ID.\",\n                        \"example\": \"attr.customers.customer_name\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Attribute title.\",\n                        \"example\": \"Customer Name\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Attribute description.\",\n                        \"example\": \"Customer name including first and last name.\"\n                    },\n                    \"labels\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of attribute labels.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeLabel\"\n                        }\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Customers\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Customers\\\"]\"\n                        }\n                    },\n                    \"sortColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"Attribute sort column.\",\n                        \"example\": \"customer_name\"\n                    },\n                    \"sortDirection\": {\n                        \"type\": \"string\",\n                        \"description\": \"Attribute sort direction.\",\n                        \"example\": \"\\\"ASC\\\" | \\\"DESC\\\"\",\n                        \"enum\": [\"ASC\", \"DESC\"]\n                    },\n                    \"defaultView\": {\n                        \"$ref\": \"#/components/schemas/LabelIdentifier\"\n                    },\n                    \"sourceColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"A name of the source column that is the primary label\",\n                        \"example\": \"customer_name\"\n                    }\n                },\n                \"description\": \"A dataset attribute.\"\n            },\n            \"DeclarativeDashboardPlugin\": {\n                \"required\": [\"content\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Dashboard plugin object ID.\",\n                        \"example\": \"dashboard-plugin-1\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Dashboard plugin object title.\",\n                        \"example\": \"3D map renderer\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Dashboard plugin description.\",\n                        \"example\": \"Three dimensional view of data.\"\n                    },\n                    \"content\": {\n                        \"$ref\": \"#/components/schemas/JsonNode\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Revenues\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Revenues\\\"]\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeDataset\": {\n                \"required\": [\"grain\", \"id\", \"references\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"The Dataset ID. This ID is further used to refer to this instance of dataset.\",\n                        \"example\": \"customers\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"A dataset title.\",\n                        \"example\": \"Customers\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"A dataset description.\",\n                        \"example\": \"The customers of ours.\"\n                    },\n                    \"grain\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of grain identifiers.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/GrainIdentifier\"\n                        }\n                    },\n                    \"attributes\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of attributes.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeAttribute\"\n                        }\n                    },\n                    \"facts\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of facts.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeFact\"\n                        }\n                    },\n                    \"references\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of references.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeReference\"\n                        }\n                    },\n                    \"dataSourceTableId\": {\n                        \"$ref\": \"#/components/schemas/DataSourceTableIdentifier\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Customers\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Customers\\\"]\"\n                        }\n                    }\n                },\n                \"description\": \"A dataset defined by its properties.\"\n            },\n            \"DeclarativeDateDataset\": {\n                \"required\": [\"granularities\", \"granularitiesFormatting\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Date dataset ID.\",\n                        \"example\": \"date\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Date dataset title.\",\n                        \"example\": \"Date\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Date dataset description.\",\n                        \"example\": \"A customer order date\"\n                    },\n                    \"granularitiesFormatting\": {\n                        \"$ref\": \"#/components/schemas/GranularitiesFormatting\"\n                    },\n                    \"granularities\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of date granularities. All listed granularities will be available for date dataset.\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"MINUTE\",\n                                \"HOUR\",\n                                \"DAY\",\n                                \"WEEK\",\n                                \"MONTH\",\n                                \"QUARTER\",\n                                \"YEAR\",\n                                \"MINUTE_OF_HOUR\",\n                                \"HOUR_OF_DAY\",\n                                \"DAY_OF_WEEK\",\n                                \"DAY_OF_MONTH\",\n                                \"DAY_OF_YEAR\",\n                                \"WEEK_OF_YEAR\",\n                                \"MONTH_OF_YEAR\",\n                                \"QUARTER_OF_YEAR\"\n                            ]\n                        }\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Customer dates\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Customer dates\\\"]\"\n                        }\n                    }\n                },\n                \"description\": \"A date dataset.\"\n            },\n            \"DeclarativeFact\": {\n                \"required\": [\"id\", \"sourceColumn\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Fact ID.\",\n                        \"example\": \"fact.customer_order_count\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Fact title.\",\n                        \"example\": \"Customer order count\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Fact description.\",\n                        \"example\": \"A number of orders created by the customer - including all orders, even the non-delivered ones.\"\n                    },\n                    \"sourceColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"A name of the source column in the table.\",\n                        \"example\": \"customer_order_count\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Customers\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Customers\\\"]\"\n                        }\n                    }\n                },\n                \"description\": \"A dataset fact.\"\n            },\n            \"DeclarativeFilterContext\": {\n                \"required\": [\"content\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Filter Context ID.\",\n                        \"example\": \"filter-sales\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Filter Context title.\",\n                        \"example\": \"Filter Context for Sales team\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Filter Context description.\",\n                        \"example\": \"Filter Context for Sales team.\"\n                    },\n                    \"content\": {\n                        \"$ref\": \"#/components/schemas/JsonNode\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Revenues\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Revenues\\\"]\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeLabel\": {\n                \"required\": [\"id\", \"sourceColumn\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Label ID.\",\n                        \"example\": \"label.customer_name\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Label title.\",\n                        \"example\": \"Customer name\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Label description.\",\n                        \"example\": \"Customer name\"\n                    },\n                    \"sourceColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"A name of the source column in the table.\",\n                        \"example\": \"customer_name\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Customers\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Customers\\\"]\"\n                        }\n                    },\n                    \"valueType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specific type of label\",\n                        \"example\": \"\\\"TEXT\\\" | \\\"HYPERLINK\\\" | \\\"GEO\\\"\",\n                        \"enum\": [\"TEXT\", \"HYPERLINK\", \"GEO\"]\n                    }\n                },\n                \"description\": \"A attribute label.\"\n            },\n            \"DeclarativeLdm\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"datasets\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array containing datasets.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDataset\"\n                        }\n                    },\n                    \"dateInstances\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array containing date-related datasets.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDateDataset\"\n                        }\n                    }\n                },\n                \"description\": \"A logical data model (LDM) representation.\"\n            },\n            \"DeclarativeMetric\": {\n                \"required\": [\"content\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Metric ID.\",\n                        \"example\": \"total-sales\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Metric title.\",\n                        \"example\": \"Total sales\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Metric description.\",\n                        \"example\": \"Sales for all the data available.\"\n                    },\n                    \"content\": {\n                        \"$ref\": \"#/components/schemas/JsonNode\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Revenues\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Revenues\\\"]\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeReference\": {\n                \"required\": [\"identifier\", \"multivalue\", \"sourceColumns\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"identifier\": {\n                        \"$ref\": \"#/components/schemas/ReferenceIdentifier\"\n                    },\n                    \"multivalue\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"The multi-value flag enables many-to-many cardinality for references.\",\n                        \"example\": false\n                    },\n                    \"sourceColumns\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of source column names for a given reference.\",\n                        \"example\": [\"customer_id\"],\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"description\": \"A dataset reference.\"\n            },\n            \"DeclarativeSingleWorkspacePermission\": {\n                \"required\": [\"assignee\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Permission name.\",\n                        \"enum\": [\"MANAGE\", \"ANALYZE\", \"VIEW\"]\n                    },\n                    \"assignee\": {\n                        \"$ref\": \"#/components/schemas/AssigneeIdentifier\"\n                    }\n                }\n            },\n            \"DeclarativeVisualizationObject\": {\n                \"required\": [\"content\", \"id\", \"title\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Visualization object ID.\",\n                        \"example\": \"visualization-1\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Visualization object title.\",\n                        \"example\": \"Count of goods\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Visualization object description.\",\n                        \"example\": \"Simple number for total goods in current production.\"\n                    },\n                    \"content\": {\n                        \"$ref\": \"#/components/schemas/JsonNode\"\n                    },\n                    \"tags\": {\n                        \"uniqueItems\": true,\n                        \"type\": \"array\",\n                        \"description\": \"A list of tags.\",\n                        \"example\": [\"Revenues\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"A list of tags.\",\n                            \"example\": \"[\\\"Revenues\\\"]\"\n                        }\n                    }\n                }\n            },\n            \"DeclarativeWorkspace\": {\n                \"required\": [\"id\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Identifier of a workspace\",\n                        \"example\": \"alpha.sales\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Name of a workspace to view.\",\n                        \"example\": \"Alpha Sales\"\n                    },\n                    \"model\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeWorkspaceModel\"\n                    },\n                    \"parent\": {\n                        \"$ref\": \"#/components/schemas/WorkspaceIdentifier\"\n                    },\n                    \"permissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeSingleWorkspacePermission\"\n                        }\n                    },\n                    \"hierarchyPermissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceHierarchyPermission\"\n                        }\n                    },\n                    \"earlyAccess\": {\n                        \"type\": \"string\",\n                        \"description\": \"Early access defined on level Workspace\"\n                    }\n                },\n                \"description\": \"A declarative form of a particular workspace.\"\n            },\n            \"DeclarativeWorkspaceDataFilter\": {\n                \"required\": [\"columnName\", \"id\", \"title\", \"workspaceDataFilterSettings\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters ID. This ID is further used to refer to this instance.\",\n                        \"example\": \"country_id\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters title.\",\n                        \"example\": \"Country ID\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters description.\",\n                        \"example\": \"ID of country\"\n                    },\n                    \"columnName\": {\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters column name. Data are filtered using this physical column.\",\n                        \"example\": \"country_id\"\n                    },\n                    \"workspaceDataFilterSettings\": {\n                        \"type\": \"array\",\n                        \"description\": \"Filter settings specifying values of filters valid for the workspace.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilterSetting\"\n                        }\n                    },\n                    \"workspace\": {\n                        \"$ref\": \"#/components/schemas/WorkspaceIdentifier\"\n                    }\n                },\n                \"description\": \"Workspace Data Filters serving the filtering of what data users can see in workspaces.\"\n            },\n            \"DeclarativeWorkspaceDataFilterSetting\": {\n                \"required\": [\"filterValues\", \"id\", \"title\", \"workspace\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters ID. This ID is further used to refer to this instance.\",\n                        \"example\": \"country_id_setting\"\n                    },\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters setting title.\",\n                        \"example\": \"Country ID setting\"\n                    },\n                    \"description\": {\n                        \"type\": \"string\",\n                        \"description\": \"Workspace Data Filters setting description.\",\n                        \"example\": \"ID of country setting\"\n                    },\n                    \"filterValues\": {\n                        \"type\": \"array\",\n                        \"description\": \"Only those rows are returned, where columnName from filter matches those values.\",\n                        \"example\": [\"US\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"description\": \"Only those rows are returned, where columnName from filter matches those values.\",\n                            \"example\": \"[\\\"US\\\"]\"\n                        }\n                    },\n                    \"workspace\": {\n                        \"$ref\": \"#/components/schemas/WorkspaceIdentifier\"\n                    }\n                },\n                \"description\": \"Workspace Data Filters serving the filtering of what data users can see in workspaces.\"\n            },\n            \"DeclarativeWorkspaceHierarchyPermission\": {\n                \"required\": [\"assignee\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Permission name.\",\n                        \"enum\": [\"MANAGE\", \"ANALYZE\", \"VIEW\"]\n                    },\n                    \"assignee\": {\n                        \"$ref\": \"#/components/schemas/AssigneeIdentifier\"\n                    }\n                }\n            },\n            \"DeclarativeWorkspaceModel\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"ldm\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeLdm\"\n                    },\n                    \"analytics\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeAnalyticsLayer\"\n                    }\n                },\n                \"description\": \"A declarative form of a model and analytics for a workspace.\"\n            },\n            \"DeclarativeWorkspaces\": {\n                \"required\": [\"workspaceDataFilters\", \"workspaces\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"workspaces\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspace\"\n                        }\n                    },\n                    \"workspaceDataFilters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilter\"\n                        }\n                    }\n                },\n                \"description\": \"A declarative form of a all workspace layout.\"\n            },\n            \"GrainIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Grain ID.\",\n                        \"example\": \"attr.customers.customer_name\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A type of the grain.\",\n                        \"example\": \"ATTRIBUTE\",\n                        \"enum\": [\"attribute\", \"dataset\"]\n                    }\n                },\n                \"description\": \"A grain identifier.\"\n            },\n            \"GranularitiesFormatting\": {\n                \"required\": [\"titleBase\", \"titlePattern\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"titleBase\": {\n                        \"type\": \"string\",\n                        \"description\": \"Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.\"\n                    },\n                    \"titlePattern\": {\n                        \"type\": \"string\",\n                        \"description\": \"This pattern is used to generate the title of attributes and labels that result from the granularities.\\nThere are two tokens available: \\n* `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty\\n* `%granularityTitle` - represents `DateGranularity` built-in title\",\n                        \"example\": \"%titleBase - %granularityTitle\"\n                    }\n                },\n                \"description\": \"A date dataset granularities title formatting rules.\"\n            },\n            \"JsonNode\": {\n                \"type\": \"object\",\n                \"description\": \"A server agnostic definition of the dashboard plugin in JSON format.\",\n                \"example\": {}\n            },\n            \"LabelIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Label ID.\",\n                        \"example\": \"label_id\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A type of the label.\",\n                        \"example\": \"label\",\n                        \"enum\": [\"label\"]\n                    }\n                },\n                \"description\": \"A label identifier.\"\n            },\n            \"ReferenceIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?:(?!\\\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Reference ID.\",\n                        \"example\": \"customers\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A type of the reference.\",\n                        \"example\": \"DATASET\",\n                        \"enum\": [\"dataset\"]\n                    }\n                },\n                \"description\": \"A reference identifier.\"\n            },\n            \"WorkspaceIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Identifier of the workspace.\",\n                        \"example\": \"alpha.sales\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A type.\",\n                        \"example\": \"workspace\",\n                        \"enum\": [\"workspace\"]\n                    }\n                },\n                \"description\": \"A workspace identifier.\",\n                \"example\": \"{ id: demo, type: workspace }\"\n            },\n            \"DeclarativeWorkspacePermissions\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"permissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeSingleWorkspacePermission\"\n                        }\n                    },\n                    \"hierarchyPermissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceHierarchyPermission\"\n                        }\n                    }\n                },\n                \"description\": \"Definition of permissions associated with a workspace.\"\n            },\n            \"DeclarativeModel\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"ldm\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeLdm\"\n                    }\n                },\n                \"description\": \"A data model structured as a set of its attributes.\"\n            },\n            \"DeclarativeAnalytics\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"analytics\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeAnalyticsLayer\"\n                    }\n                },\n                \"description\": \"Entities describing users' view on data.\"\n            },\n            \"DeclarativeWorkspaceDataFilters\": {\n                \"required\": [\"workspaceDataFilters\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"workspaceDataFilters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilter\"\n                        }\n                    }\n                },\n                \"description\": \"Declarative form of data filters.\"\n            },\n            \"DeclarativeUser\": {\n                \"required\": [\"id\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"User identifier.\",\n                        \"example\": \"employee123\"\n                    },\n                    \"authId\": {\n                        \"type\": \"string\",\n                        \"description\": \"User identification in the authentication manager.\"\n                    },\n                    \"userGroups\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/UserGroupIdentifier\"\n                        }\n                    }\n                },\n                \"description\": \"A user and its properties\"\n            },\n            \"DeclarativeUsers\": {\n                \"required\": [\"users\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"users\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUser\"\n                        }\n                    }\n                },\n                \"description\": \"Declarative form of users and its properties.\"\n            },\n            \"UserGroupIdentifier\": {\n                \"required\": [\"id\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Identifier of the user group.\",\n                        \"example\": \"group.admins\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A type.\",\n                        \"example\": \"userGroup\",\n                        \"enum\": [\"userGroup\"]\n                    }\n                },\n                \"description\": \"A user group identifier.\"\n            },\n            \"DeclarativeUserGroup\": {\n                \"required\": [\"id\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"UserGroup identifier.\",\n                        \"example\": \"employees.all\"\n                    },\n                    \"parents\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/UserGroupIdentifier\"\n                        }\n                    }\n                },\n                \"description\": \"A user-group and its properties\"\n            },\n            \"DeclarativeUsersUserGroups\": {\n                \"required\": [\"userGroups\", \"users\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"users\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUser\"\n                        }\n                    },\n                    \"userGroups\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUserGroup\"\n                        }\n                    }\n                },\n                \"description\": \"Declarative form of both users and user groups and theirs properties.\"\n            },\n            \"DeclarativeUserGroups\": {\n                \"required\": [\"userGroups\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"userGroups\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUserGroup\"\n                        }\n                    }\n                },\n                \"description\": \"Declarative form of userGroups and its properties.\"\n            },\n            \"DeclarativeColumn\": {\n                \"required\": [\"dataType\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column name\",\n                        \"example\": \"customer_id\"\n                    },\n                    \"dataType\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column type\",\n                        \"example\": \"INT\",\n                        \"enum\": [\"INT\", \"STRING\", \"DATE\", \"NUMERIC\", \"TIMESTAMP\", \"BOOLEAN\"]\n                    },\n                    \"isPrimaryKey\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is column part of primary key?\"\n                    },\n                    \"referencedTableId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Referenced table (Foreign key)\",\n                        \"example\": \"customers\"\n                    },\n                    \"referencedTableColumn\": {\n                        \"type\": \"string\",\n                        \"description\": \"Referenced table (Foreign key)\",\n                        \"example\": \"customer_id\"\n                    }\n                },\n                \"description\": \"A table column.\"\n            },\n            \"DeclarativeDataSource\": {\n                \"required\": [\"id\", \"name\", \"schema\", \"type\", \"url\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Data source ID.\",\n                        \"example\": \"pg_local_docker-demo\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Name of the data source.\",\n                        \"example\": \"postgres demo\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Type of database.\",\n                        \"example\": \"POSTGRESQL\",\n                        \"enum\": [\n                            \"POSTGRESQL\",\n                            \"REDSHIFT\",\n                            \"VERTICA\",\n                            \"SNOWFLAKE\",\n                            \"ADS\",\n                            \"BIGQUERY\",\n                            \"MSSQL\",\n                            \"PRESTO\",\n                            \"DREMIO\",\n                            \"DRILL\"\n                        ]\n                    },\n                    \"url\": {\n                        \"type\": \"string\",\n                        \"description\": \"An connection string relevant to type of database.\",\n                        \"example\": \"jdbc:postgresql://postgres:5432/gooddata\"\n                    },\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"description\": \"A scheme/database with the data.\",\n                        \"example\": \"demo\"\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"description\": \"User with permission connect the data source/database.\",\n                        \"example\": \"demo\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"description\": \"Password for the data-source user, property is never returned back.\",\n                        \"example\": \"*****\"\n                    },\n                    \"token\": {\n                        \"type\": \"string\",\n                        \"description\": \"Token as an alternative to username and password.\",\n                        \"example\": \"Bigquery service account JSON. Encode it using base64!\"\n                    },\n                    \"enableCaching\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Enable caching of intermediate results.\",\n                        \"example\": false\n                    },\n                    \"cachePath\": {\n                        \"type\": \"array\",\n                        \"description\": \"Path to schema, where intermediate caches are stored.\",\n                        \"example\": \"[ \\\"dfs\\\", \\\"data\\\" ]. Example used in Apache Drill.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"pdm\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeTables\"\n                    },\n                    \"permissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDataSourcePermission\"\n                        }\n                    }\n                },\n                \"description\": \"A data source and its properties.\"\n            },\n            \"DeclarativeDataSourcePermission\": {\n                \"required\": [\"assignee\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Permission name.\",\n                        \"enum\": [\"MANAGE\", \"USE\"]\n                    },\n                    \"assignee\": {\n                        \"$ref\": \"#/components/schemas/AssigneeIdentifier\"\n                    }\n                }\n            },\n            \"DeclarativeOrganization\": {\n                \"required\": [\"organization\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"organization\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeOrganizationInfo\"\n                    },\n                    \"users\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUser\"\n                        }\n                    },\n                    \"userGroups\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeUserGroup\"\n                        }\n                    },\n                    \"dataSources\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDataSource\"\n                        }\n                    },\n                    \"workspaces\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspace\"\n                        }\n                    },\n                    \"workspaceDataFilters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeWorkspaceDataFilter\"\n                        }\n                    }\n                },\n                \"description\": \"Complete definition of an organization in a declarative form.\"\n            },\n            \"DeclarativeOrganizationInfo\": {\n                \"required\": [\"hostname\", \"id\", \"name\", \"permissions\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Identifier of the organization.\",\n                        \"example\": \"Alpha corporation\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Formal name of the organization.\",\n                        \"example\": \"Alpha corporation\"\n                    },\n                    \"hostname\": {\n                        \"type\": \"string\",\n                        \"description\": \"Formal hostname used in deployment.\",\n                        \"example\": \"alpha.com\"\n                    },\n                    \"oauthIssuerLocation\": {\n                        \"type\": \"string\",\n                        \"description\": \"URI of the authentication provider.\"\n                    },\n                    \"oauthClientId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Identifier of the authentication provider\"\n                    },\n                    \"oauthClientSecret\": {\n                        \"type\": \"string\",\n                        \"description\": \"Communication secret of the authentication provider (never returned back).\"\n                    },\n                    \"permissions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeOrganizationPermission\"\n                        }\n                    },\n                    \"earlyAccess\": {\n                        \"type\": \"string\",\n                        \"description\": \"Early access defined on level Organization\"\n                    }\n                },\n                \"description\": \"Information available about an organization.\"\n            },\n            \"DeclarativeOrganizationPermission\": {\n                \"required\": [\"assignee\", \"name\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"Permission name.\",\n                        \"enum\": [\"MANAGE\"]\n                    },\n                    \"assignee\": {\n                        \"$ref\": \"#/components/schemas/AssigneeIdentifier\"\n                    }\n                },\n                \"description\": \"Definition of a permission assigned to a user/user-group.\"\n            },\n            \"DeclarativeTable\": {\n                \"required\": [\"columns\", \"id\", \"path\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                        \"type\": \"string\",\n                        \"description\": \"Table id.\",\n                        \"example\": \"customers\"\n                    },\n                    \"path\": {\n                        \"type\": \"array\",\n                        \"description\": \"Path to table.\",\n                        \"example\": [\"table_schema\", \"table_name\"],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"example\": \"table_name\"\n                        }\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Table type: TABLE or VIEW.\",\n                        \"example\": \"VIEW\"\n                    },\n                    \"namePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Table or view name prefix used in scan. Will be stripped when generating LDM.\",\n                        \"example\": \"out_gooddata\"\n                    },\n                    \"columns\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of physical columns\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeColumn\"\n                        }\n                    }\n                },\n                \"description\": \"A database table.\"\n            },\n            \"DeclarativeTables\": {\n                \"required\": [\"tables\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"tables\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of physical database tables.\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeTable\"\n                        }\n                    }\n                },\n                \"description\": \"A physical data model (PDM) tables.\"\n            },\n            \"DeclarativeDataSources\": {\n                \"required\": [\"dataSources\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"dataSources\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DeclarativeDataSource\"\n                        }\n                    }\n                },\n                \"description\": \"A data source and its properties.\"\n            },\n            \"DeclarativePdm\": {\n                \"required\": [\"pdm\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"pdm\": {\n                        \"$ref\": \"#/components/schemas/DeclarativeTables\"\n                    }\n                },\n                \"description\": \"A physical data model (PDM) representation for single data source.\"\n            },\n            \"GenerateLdmRequest\": {\n                \"required\": [\"separator\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"generateLongIds\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `\u003ctable\u003e.\u003ccolumn\u003e` is used. If the flag is set to true, then all ids will be generated in the long form.\"\n                    },\n                    \"separator\": {\n                        \"type\": \"string\",\n                        \"description\": \"A separator between prefixes and the names. Default is \\\"__\\\".\",\n                        \"example\": \"__\"\n                    },\n                    \"tablePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.\",\n                        \"example\": \"out_table\"\n                    },\n                    \"viewPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.\",\n                        \"example\": \"out_view\"\n                    },\n                    \"primaryLabelPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.\",\n                        \"example\": \"pl\"\n                    },\n                    \"secondaryLabelPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.\",\n                        \"example\": \"sl\"\n                    },\n                    \"factPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.\",\n                        \"example\": \"f\"\n                    },\n                    \"dateGranularities\": {\n                        \"type\": \"string\",\n                        \"description\": \"Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).\",\n                        \"example\": \"all\"\n                    },\n                    \"grainPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.\",\n                        \"example\": \"g\"\n                    },\n                    \"referencePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.\",\n                        \"example\": \"r\"\n                    },\n                    \"grainReferencePrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.\",\n                        \"example\": \"gr\"\n                    },\n                    \"denormPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.\",\n                        \"example\": \"dr\"\n                    },\n                    \"wdfPrefix\": {\n                        \"type\": \"string\",\n                        \"description\": \"Column serving as workspace data filter. No labels are auto generated for such columns.\",\n                        \"example\": \"wdf\"\n                    }\n                },\n                \"description\": \"A request containing all information needed for generation of logical model.\"\n            }\n        },\n        \"responses\": {\n            \"Deleted\": {\n                \"description\": \"Successfully deleted\"\n            }\n        },\n        \"parameters\": {\n            \"idPathParameter\": {\n                \"name\": \"id\",\n                \"in\": \"path\",\n                \"required\": true,\n                \"schema\": {\n                    \"pattern\": \"^(?!\\\\.)[.A-Za-z0-9_-]{1,255}$\",\n                    \"type\": \"string\"\n                }\n            },\n            \"page\": {\n                \"name\": \"page\",\n                \"in\": \"query\",\n                \"description\": \"Zero-based page index (0..N)\",\n                \"schema\": {\n                    \"type\": \"integer\",\n                    \"default\": 0\n                }\n            },\n            \"size\": {\n                \"name\": \"size\",\n                \"in\": \"query\",\n                \"description\": \"The size of the page to be returned\",\n                \"schema\": {\n                    \"type\": \"integer\",\n                    \"default\": 20\n                }\n            },\n            \"sort\": {\n                \"name\": \"sort\",\n                \"in\": \"query\",\n                \"description\": \"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.\",\n                \"schema\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}\n"
		}
	},
	"Error": "buildIR: make ir: path \"/api/v1/entities/users/{userId}/apiTokens/{id}\": get: parameters: fail: \"id\": string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?!`"
}