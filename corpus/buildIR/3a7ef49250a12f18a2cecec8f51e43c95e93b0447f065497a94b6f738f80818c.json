{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mailbadger/app"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api/swagger.yaml",
			"byteSize": 44311,
			"content": "openapi: \"3.0.3\"\ninfo:\n  title: Mailbadger API\n  version: \"1.0\"\n  contact:\n    name: Mailbadger support team\n    email: support@mailbadger.io\n  description: |\n    The Mailbadger [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API.\n  license:\n    name: “Commons Clause” License Condition v1.0\n    url: https://github.com/mailbadger/app/blob/master/LICENSE\nservers:\n  - url: https://app.mailbadger.io/api\ntags:\n  - name: templates\n    description: Template operations\n  - name: campaigns\n    description: Campaign operations\n  - name: subscribers\n    description: Subscriber operations\n  - name: groups\n    description: Subscriber groups operations\npaths:\n  /templates:\n    get:\n      tags:\n        - templates\n      operationId: getTemplates\n      summary: List templates\n      description: |\n        Returns a list of templates in a paginated manner. Each object in the `collection` represents a Template.\n        This endpoint should always return a result even if there are zero templates in the collection.\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/endingBefore\"\n        - $ref: \"#/components/parameters/startingAfter\"\n        - $ref: \"#/components/parameters/scopes\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PaginationMeta\"\n                  - type: object\n                    properties:\n                      collection:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/BaseTemplate\"\n                        example:\n                          - id: 111\n                            name: HelloWorld\n                            subject_part: Hello World!\n                            created_at: \"2021-05-19T20:48:50.378Z\"\n                            updated_at: \"2021-05-19T20:48:50.378Z\"\n                          - id: 222\n                            name: Welcome\n                            subject_part: Welcome to Mailbadger {{name}}!\n                            created_at: \"2021-05-19T20:48:50.378Z\"\n                            updated_at: \"2021-05-19T20:48:50.378Z\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - templates\n      operationId: addTemplate\n      summary: Add a new template\n      description: |\n        Add a new template to be used in the e-mail campaigns. The template's parts (subject, html and text) can\n        contain tags which are used to personalize the campaign's content. The tag names are defined between two curly brackets e.g. `{{name}}`.\n      requestBody:\n        $ref: \"#/components/requestBodies/TemplateParams\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Template\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: Template name is required and must not be empty.\n                      html_part: Content must be html.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Template could not be created, please try again.\n\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Template name is not unique.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /templates/{id}:\n    get:\n      tags:\n        - templates\n      operationId: getTemplate\n      summary: Get template by ID\n      description: Returns a single template object\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Template\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Template not found.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - templates\n      operationId: updateTemplate\n      summary: Update an existing template\n      description: Update an existing template\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        $ref: \"#/components/requestBodies/TemplateParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Template\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Template not found.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: Template name is required and must not be empty.\n                      html_part: Content must be html.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Template could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Template name is not unique.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - templates\n      operationId: deleteTemplate\n      summary: Delete a template\n      description: Delete a template.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"204\":\n          description: The template was deleted successfully.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /campaigns:\n    get:\n      tags:\n        - campaigns\n      operationId: getCampaigns\n      summary: List campaigns\n      description: |\n        Returns a list of campaigns in a paginated manner. Each object in the `collection` represents a Campaign.\n        This endpoint should always return a result even if there are zero campaigns in the collection.\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/endingBefore\"\n        - $ref: \"#/components/parameters/startingAfter\"\n        - $ref: \"#/components/parameters/scopes\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PaginationMeta\"\n                  - type: object\n                    properties:\n                      collection:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Campaign\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - campaigns\n      operationId: addCampaign\n      summary: Add a new campaign\n      description: |\n        Add a new campaign. When the campaign is firstly created, it has a `draft` status. \n        After a campaign has been created it can either be sent, scheduled or deleted. In order to send a campaign you will need to connect your AWS account.\n      requestBody:\n        $ref: \"#/components/requestBodies/CampaignParams\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Campaign\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: Campaign name is required and must not be empty.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Campaign could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Campaign name is not unique.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /campaigns/{id}:\n    get:\n      tags:\n        - campaigns\n      operationId: getCampaign\n      summary: Get campaign by ID\n      description: Returns a single campaign object\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Campaign\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Campaign not found.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - campaigns\n      operationId: updateCampaign\n      summary: Update an existing campaign\n      description: Update an existing campaign\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        $ref: \"#/components/requestBodies/CampaignParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Campaign\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Campaign not found.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: Campaign name is required and must not be empty.\n                      template_name: Template name is required and must not be empty.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Campaign could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Campaign with that name already exist.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - campaigns\n      operationId: deleteCampaign\n      summary: Delete a campaign\n      description: Delete a campaign.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"204\":\n          description: The campaign was deleted successfully.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /campaigns/{id}/start:\n    post:\n      tags:\n        - campaigns\n      operationId: startCampaign\n      summary: Start a campaign\n      description: Start a campaign. This action will begin sending the e-mails to subscribers immediately.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        $ref: \"#/components/requestBodies/StartCampaignParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: The campaign has started. You can track the progress in the campaign details page.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /campaigns/{id}/schedule:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    patch:\n      tags:\n        - campaigns\n      operationId: scheduleCampaign\n      summary: Schedule a campaign\n      description: Schedule a campaign.\n      requestBody:\n        $ref: \"#/components/requestBodies/ScheduleCampaignParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: The campaign was successfully scheduled.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - campaigns\n      operationId: deleteCampaignSchedule\n      summary: Delete a campaign's schedule\n      description: Delete a campaign's schedule.\n      responses:\n        \"204\":\n          description: The campaign's schedule was deleted successfully.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /subscribers:\n    get:\n      tags:\n        - subscribers\n      operationId: getSubscribers\n      summary: List subscribers\n      description: |\n        Returns a list of subscribers in a paginated manner. Each object in the `collection` represents a Subscriber.\n        This endpoint should always return a result even if there are zero subscribers in the collection.\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/endingBefore\"\n        - $ref: \"#/components/parameters/startingAfter\"\n        - $ref: \"#/components/parameters/scopes\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PaginationMeta\"\n                  - type: object\n                    properties:\n                      collection:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/BaseSubscriber\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - subscribers\n      operationId: addSubscriber\n      summary: Add a new subscriber\n      description: Add a new subscriber to the list.\n      requestBody:\n        $ref: \"#/components/requestBodies/SubscriberParams\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscriber\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      email: The email has an invalid format.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Subscriber could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: A subscriber with that email already exists.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /subscribers/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      tags:\n        - subscribers\n      operationId: getSubscriber\n      summary: Get subscriber by ID\n      description: Returns a single subscriber object\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscriber\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Subscriber not found.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - subscribers\n      operationId: updateSubscriber\n      summary: Update an existing subscriber\n      description: Update an existing subscriber.\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateSubscriberParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscriber\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Subscriber not found.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: The subscriber name is too long.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Subscriber could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Subscriber with that email already exist.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - subscribers\n      operationId: deleteSubscriber\n      summary: Delete a subscriber\n      description: Delete a subscriber.\n      responses:\n        \"204\":\n          description: The subscriber was deleted successfully.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /segments:\n    get:\n      tags:\n        - groups\n      operationId: getGroups\n      summary: List groups\n      description: |\n        Returns a list of groups in a paginated manner. Each object in the `collection` represents a Group.\n        This endpoint should always return a result even if there are zero groups in the collection.\n      parameters:\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/endingBefore\"\n        - $ref: \"#/components/parameters/startingAfter\"\n        - $ref: \"#/components/parameters/scopes\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/PaginationMeta\"\n                  - type: object\n                    properties:\n                      collection:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Group\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - groups\n      operationId: addGroup\n      summary: Add a new group\n      description: Add a new group.\n      requestBody:\n        $ref: \"#/components/requestBodies/GroupParams\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BaseGroup\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: The name is required and should not be empty.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Group could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: A group with that name already exists.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n  /segments/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/id\"\n    get:\n      tags:\n        - groups\n      operationId: getGroup\n      summary: Get group by ID\n      description: Returns a single group object\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExtendedGroupWithTotalSubs\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Group not found.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - groups\n      operationId: updateGroup\n      summary: Update an existing group\n      description: Update an existing group.\n      requestBody:\n        $ref: \"#/components/requestBodies/GroupParams\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BaseGroup\"\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Group not found.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Message\"\n                  - $ref: \"#/components/schemas/ValidationErrors\"\n              examples:\n                validationErrors:\n                  summary: Invalid parameters\n                  value:\n                    message: Invalid parameters, please try again\n                    errors:\n                      name: The group name is too long.\n                message:\n                  summary: Bad request\n                  value:\n                    message: Group could not be created, please try again.\n        \"422\":\n          description: Unprocessable entity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Group with that name already exist.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - groups\n      operationId: deleteGroup\n      summary: Delete a group\n      description: Delete a group.\n      responses:\n        \"204\":\n          description: The group was deleted successfully.\n        \"401\":\n          $ref: \"#/components/responses/Unauthorized\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n              example:\n                message: Invalid ID supplied.\n        default:\n          $ref: \"#/components/responses/UnexpectedError\"\nsecurity:\n  - api_key: []\ncomponents:\n  requestBodies:\n    TemplateParams:\n      description: Template parameters for the form\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - subject_part\n              - html_part\n              - text_part\n            properties:\n              name:\n                type: string\n                example: HelloWorld\n                description: The name of the new template, must be unique.\n                maxLength: 191\n              subject_part:\n                type: string\n                example: Welcome {{name}} to mailbadger.io!\n                description: The subject part\n                maxLength: 191\n              html_part:\n                description: The HTML content used in the e-mail campaign.\n                type: string\n                example: \u003cdiv\u003eHello {{name}}, welcome to mailbadger.io\u003c/div\u003e\n              text_part:\n                description: The text content used in the e-mail campaign.\n                type: string\n                example: Hello {{name}}, welcome to mailbadger.io\n    CampaignParams:\n      description: Campaign parameters for the form\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - template_name\n            properties:\n              name:\n                type: string\n                example: January Newsletter\n                description: The name of the new campaign, must be unique.\n                maxLength: 191\n              template_name:\n                type: string\n                example: HelloWorld\n                description: The name of the template to be used for the campaign content.\n                maxLength: 191\n    StartCampaignParams:\n      description: Parameters for starting a campaign\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - source\n              - from_name\n              - segment_ids\n              - default_template_data\n            properties:\n              source:\n                type: string\n                example: news@example.com\n                description: The source email address that is sending the e-mail campaign.\n                maxLength: 191\n              from_name:\n                type: string\n                example: Mailbadger News\n                description: The name of the sender.\n                maxLength: 191\n              segment_ids:\n                type: array\n                description: Groups of subscribers that we'll send the campaign to. You can choose to send the campaign to multiple groups.\n                items:\n                  type: integer\n              default_template_data:\n                type: object\n                additionalProperties: true\n                example: \u003e\n                  {\n                    \"field1\": \"value1\",\n                    \"field2\": \"value2\"\n                  }\n    ScheduleCampaignParams:\n      description: Parameters for scheduling a campaign\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - scheduled_at\n              - source\n              - from_name\n              - segment_ids\n              - default_template_data\n            properties:\n              scheduled_at:\n                type: string\n                format: date-time\n                description: The date and time of the start of the campaign.\n              source:\n                type: string\n                example: news@example.com\n                description: The source email address that is sending the e-mail campaign.\n                maxLength: 191\n              from_name:\n                type: string\n                example: Mailbadger News\n                description: The name of the sender.\n                maxLength: 191\n              segment_ids:\n                type: array\n                description: Groups of subscribers that we'll send the campaign to. You can choose to send the campaign to multiple groups.\n                items:\n                  type: integer\n              default_template_data:\n                type: object\n                additionalProperties: true\n                example: \u003e\n                  {\n                    \"field1\": \"value1\",\n                    \"field2\": \"value2\"\n                  }\n    SubscriberParams:\n      description: Parameters for the subscriber form\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n            properties:\n              email:\n                type: string\n                example: john@example.com\n                description: The subscriber's email address.\n                maxLength: 191\n              name:\n                type: string\n                example: John Doe\n                description: The subscriber's name.\n                maxLength: 191\n              segments:\n                type: array\n                description: Groups to place the subscriber in.\n                items:\n                  type: integer\n              metadata:\n                description: |\n                  Metadata (key=value pairs) for the subscriber. These values can be used in the campaign templates to \n                  personalize the e-mail, used in a form of tags e.g. {{phone_number}}\n                type: object\n                additionalProperties: true\n                example: \u003e\n                  {\n                    \"phone_number\": \"123456\",\n                    \"favorite_animal\": \"honeybadger\"\n                  }\n    UpdateSubscriberParams:\n      description: Parameters for the update subscriber form\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                example: John Doe\n                description: The subscriber's name.\n                maxLength: 191\n              segments:\n                type: array\n                description: Groups to place the subscriber in.\n                items:\n                  type: integer\n              metadata:\n                description: |\n                  Metadata (key=value pairs) for the subscriber. These values can be used in the campaign templates to \n                  personalize the e-mail, used in a form of tags e.g. {{phone_number}}\n                type: object\n                additionalProperties: true\n                example: \u003e\n                  {\n                    \"phone_number\": \"123456\",\n                    \"favorite_animal\": \"honeybadger\"\n                  }\n    GroupParams:\n      description: Parameters for the group form.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                example: Foo Group\n                description: The group's name.\n                maxLength: 191\n  parameters:\n    perPage:\n      name: per_page\n      in: query\n      description: Number of objects to be returned, per page.\n      schema:\n        type: integer\n        format: int64\n        maximum: 100\n        default: 15\n    endingBefore:\n      name: ending_before\n      in: query\n      description: |\n        `ending_before` is the ID of the object that should be included in order to fetch the \n        previous page of the list, which ends before this object's place in the collection.\n      schema:\n        type: string\n    startingAfter:\n      name: starting_after\n      in: query\n      description: |\n        `starting_after` is the ID of the object that should be included in order to fetch the \n        next page of the list, which begins after this object's place in the collection.\n      schema:\n        type: string\n    scopes:\n      name: scopes\n      in: query\n      description: |\n        Scopes can be used to search through and filter a collection of results.\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n      style: deepObject\n    id:\n      name: id\n      in: path\n      description: ID of the object\n      required: true\n      schema:\n        type: integer\n        format: int64\n  responses:\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n          example:\n            message: \"You are not authorized to perform this request.\"\n    UnexpectedError:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Message\"\n          example:\n            message: \"Something unexpected happened. Please try again.\"\n  schemas:\n    Message:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Response message.\n    ValidationErrors:\n      allOf:\n        - $ref: \"#/components/schemas/Message\"\n        - type: object\n          description: Validation errors\n          additionalProperties:\n            type: string\n    PaginationMeta:\n      type: object\n      properties:\n        per_page:\n          description: Number of objects that are present in the collection.\n          type: integer\n          format: int64\n          example: 15\n        total:\n          description: Total number of objects.\n          type: integer\n          format: int64\n          example: 100\n        links:\n          type: object\n          properties:\n            previous:\n              description: Link to the previous set of results.\n              type: string\n              nullable: true\n            next:\n              description: Link to the next set of results.\n              type: string\n              nullable: true\n    BaseModel:\n      type: object\n      properties:\n        id:\n          description: The ID of the resource.\n          type: integer\n          format: int64\n          example: 111\n        created_at:\n          description: The date and time when the resource was created.\n          type: string\n          format: date-time\n        updated_at:\n          description: The date and time when the resource was last updated.\n          type: string\n          format: date-time\n    BaseTemplate:\n      allOf:\n        - $ref: \"#/components/schemas/BaseModel\"\n        - type: object\n          properties:\n            name:\n              description: The name of the template.\n              type: string\n              example: Welcome\n            subject_part:\n              description: The subject part.\n              type: string\n              example: Welcome to Mailbadger {{name}}!\n    Template:\n      allOf:\n        - $ref: \"#/components/schemas/BaseTemplate\"\n        - type: object\n          properties:\n            html_part:\n              description: The HTML content used in the e-mail campaign.\n              type: string\n              example: \u003cdiv\u003eHello {{name}}, welcome to mailbadger.io\u003c/div\u003e\n            text_part:\n              description: The text content used in the e-mail campaign.\n              type: string\n              example: Hello {{name}}, welcome to mailbadger.io\n    Campaign:\n      allOf:\n        - $ref: \"#/components/schemas/BaseModel\"\n        - type: object\n          properties:\n            name:\n              description: The name of the campaign.\n              type: string\n              example: January Newsletter\n            status:\n              description: The campaign's status.\n              type: string\n              enum:\n                - draft\n                - scheduled\n                - sending\n                - sent\n              example: draft\n            template:\n              description: The associated template content for the e-mail campaign.\n              nullable: true\n              anyOf:\n                - $ref: \"#/components/schemas/BaseTemplate\"\n            schedule:\n              description: |\n                The campaign schedule (optional). If a schedule is set, we will send the campaign in that particular time.\n              nullable: true\n              anyOf:\n                - $ref: \"#/components/schemas/CampaignSchedule\"\n            started_at:\n              description: The date and time when the campaign was started.\n              type: string\n              format: date-time\n            completed_at:\n              description: The date and time when the campaign was completed (the e-mail has been sent to all of the subscribers).\n              type: string\n              format: date-time\n    CampaignSchedule:\n      type: object\n      properties:\n        id:\n          description: The ID of the resource.\n          type: string\n        scheduled_at:\n          description: The date and time when the campaign is scheduled to be sent.\n          type: string\n          format: date-time\n        created_at:\n          description: The date and time when the resource was created.\n          type: string\n          format: date-time\n        updated_at:\n          description: The date and time when the resource was last updated.\n          type: string\n          format: date-time\n    BaseSubscriber:\n      allOf:\n        - $ref: \"#/components/schemas/BaseModel\"\n        - type: object\n          properties:\n            name:\n              description: The name of the subscriber.\n              type: string\n              example: John Doe\n            email:\n              description: The email of the subscriber.\n              type: string\n              example: john@example.com\n            metadata:\n              description: Metadata associated with the subscriber.\n              type: object\n              additionalProperties:\n                type: string\n              example: \u003e\n                {\n                  \"phone_number\": \"123456789\",\n                  \"favorite_animal\": \"honeybadger\"\n                }\n            blacklisted:\n              description: Flag that indicates if the subscriber has been blacklisted (unsubscribed, marked email as spam, bounced).\n              type: boolean\n            active:\n              description: Flag that indicates if the subscriber is active or not (we send e-mails only to active subscribers).\n              type: boolean\n    Subscriber:\n      allOf:\n        - $ref: \"#/components/schemas/BaseSubscriber\"\n        - type: object\n          properties:\n            segments:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Group\"\n    BaseGroup:\n      allOf:\n        - $ref: \"#/components/schemas/BaseModel\"\n        - type: object\n          properties:\n            name:\n              description: The name of the group.\n              type: string\n              example: Foo Group\n    Group:\n      allOf:\n        - $ref: \"#/components/schemas/BaseGroup\"\n        - type: object\n          properties:\n            subscribers_in_segment:\n              description: Number of subscribers inside the group.\n              type: integer\n              format: int64\n              example: 123\n    ExtendedGroupWithTotalSubs:\n      allOf:\n        - $ref: \"#/components/schemas/Group\"\n        - type: object\n          properties:\n            total_subscribers:\n              description: The total number of subscribers.\n              type: integer\n              format: int64\n              example: 10231\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: X-API-Key\n      in: header\n",
			"canonicalURL": "/github.com/mailbadger/app@48afb6a42227b5059f580032262a14ae1fbd9102/-/blob/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mailbadger/app/blob/48afb6a42227b5059f580032262a14ae1fbd9102/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/subscribers/{id}\": get: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object"
}