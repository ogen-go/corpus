{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jdemaeyer/brightsky"
		},
		"file": {
			"name": "brightsky.yml",
			"size": 0,
			"path": "docs/brightsky.yml",
			"byteSize": 33639,
			"content": "openapi: 3.0.3\ninfo:\n  title: Bright Sky\n  version: 1.0.18\n  description: |\n    \u003ch2\u003eJSON API for DWD's open weather data.\u003c/h2\u003e\n\n    Bright Sky's main API server is located at `https://api.brightsky.dev/`. The following paragraphs provide some background information on data sources, performance considerations, and internal structure. If you just want to get started, head straight to the [`weather` endpoint](#get-/weather) (for historical and forecasted weather) or the [`current_weather` endpoint](#get-/current_weather).\n\n    The documentation you are looking at is generated from an OpenAPI specification. The current version is available from https://brightsky.dev/brightsky.yml.\n\n    ## Data Origin\n\n    Data with the observation types `current` and `historical` is published by [DWD's extensive network of observation stations](https://www.dwd.de/DE/leistungen/klimadatendeutschland/stationsliste.html). The difference between these two types lies only in the level of quality assurance that the DWD has provided (see the [DWD's Climate Data Center README](https://opendata.dwd.de/climate_environment/CDC/Readme_intro_CDC_ftp.txt)). Data with observation type `forecast` comes from [MOSMIX](https://www.dwd.de/EN/research/weatherforecasting/met_applications/nwp_applications/mosmix_application.html).\n\n    All source files can be found on DWD's [Open Data Server](https://www.dwd.de/EN/ourservices/opendata/opendata.html):\n    \u003ctable\u003e\n      \u003ctr\u003e\u003cth\u003eObservation Type\u003c/th\u003e\u003cth\u003eLocation\u003c/th\u003e\u003c/tr\u003e\n      \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ehistorical\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/hourly/\"\u003ehttps://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/hourly/\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n      \u003ctr\u003e\u003ctd\u003e\u003ccode\u003ecurrent\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://opendata.dwd.de/weather/weather_reports/poi/\"\u003ehttps://opendata.dwd.de/weather/weather_reports/poi/\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n      \u003ctr\u003e\u003ctd\u003e\u003ccode\u003eforecast\u003c/code\u003e\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_S/all_stations/kml/\"\u003ehttps://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_S/all_stations/kml/\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n    \u003c/table\u003e\n\n    ## Good to Know\n\n    ### Geographical Data Coverage\n\n      Due to its nature as German meteorological service, the observations published by the DWD have a strong focus on Germany. While there is data for some locations outside of Germany, mainly in the rest of Europe, it is currently not a priority for us. Your mileage may vary.\n\n    ### Historical Data Coverage\n\n      Bright Sky currently only serves data going back to January 1st, 2010. We plan to extend this to the whole set of historical data published by the DWD in the future.\n\n    ## On Stations and Sources...\n\n    The DWD provides data from an extensive network of own and third-party meteorological observation stations, located mainly but not exclusively in Germany. Each of these is identified by a station ID. In an ideal world, these stations would provide an endless stream of one record of \"historical weather\" and one record of \"forecasted weather\" per hour. Sadly (and I am sure to much nuisance for the DWD), in the real world, stations have outages and measurement errors, and sometimes even move. Moreover, the weather forecasts come from a model that is not tied to any physical observation station locations, and predicts the meteorological parameters at a whole bunch of additional locations (which each get their own station ID).\n\n    To accomodate these real-world complications, Bright Sky internally uses a concept of _sources_. Each source is a unique combination of location and observation type. Hence, each physical observation station (with a single station ID) will typically correspond to four sources in Bright Sky: one for each of the four observation types `forecast`, `synop`, `current`, and `historical`. If the station has moved during its lifetime, you may even find more than one source for the same station ID and observation type.\n\n    Bright Sky's _source IDs_ have no meaning in the real world. They should be treated as the technical artifact they are, and not even relied on to stay constant (although they likely will within each major release of Bright Sky).\n\n    ## Useful Links\n      - [Bright Sky source code](https://github.com/jdemaeyer/brightsky/)\n      - [Bright Sky infrastructure configuration](https://github.com/jdemaeyer/brightsky-infrastructure/)\n      - [DWD Open Data landing page](https://www.dwd.de/EN/ourservices/opendata/opendata.html)\n      - [Additional explanation files for DWD Open Data](https://www.dwd.de/DE/leistungen/opendata/hilfe.html?nn=495490\u0026lsbId=627548), including:\n          - [List of main observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/ha_messnetz.xls?__blob=publicationFile\u0026v=1)\n          - [List of additional observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/na_messnetz.xlsx?__blob=publicationFile\u0026v=10)\n          - [List of MOSMIX stations](https://www.dwd.de/DE/leistungen/met_verfahren_mosmix/mosmix_stationskatalog.cfg?view=nasPublication\u0026nn=495490)\n          - [List of meteorological parameters](https://www.dwd.de/DE/leistungen/opendata/help/schluessel_datenformate/kml/mosmix_elemente_pdf.pdf?__blob=publicationFile\u0026v=2)\n      - [DWD Open Data FAQ (German)](https://www.dwd.de/DE/leistungen/opendata/faqs_opendata.html)\n      - [DWD Copyright information](https://www.dwd.de/EN/service/copyright/copyright_artikel.html)\n\n  contact:\n    email: jakob@naboa.de\n    name: Jakob de Maeyer\n    url: 'https://brightsky.dev/'\n  license:\n    name: MIT License\n    url: 'https://raw.githubusercontent.com/jdemaeyer/brightsky/master/LICENSE'\nservers:\n  - url: 'https://api.brightsky.dev/'\npaths:\n  /weather:\n    get:\n      summary: Get observed and/or forecasted weather\n      tags:\n        - weather\n      description: |\n        Get a list of hourly weather records (and/or forecasts) for the time range given by `date` and `last_date`.\n\n        To set the location for which to retrieve records (and/or forecasts), you must supply both `lat` and `lon` _or_ one of `dwd_station_id`, `wmo_station_id`, or `source_id`.\n      operationId: getWeather\n      parameters:\n        - $ref: '#/components/parameters/date'\n        - $ref: '#/components/parameters/last_date'\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lon'\n        - $ref: '#/components/parameters/dwd_station_id'\n        - $ref: '#/components/parameters/wmo_station_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/max_dist'\n        - $ref: '#/components/parameters/tz'\n        - $ref: '#/components/parameters/units'\n      responses:\n        '200':\n          description: Hourly weather records/forecasts and meta information on their sources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  weather:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/WeatherRecord'\n                  sources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n                example:\n                  weather:\n                    - timestamp: '2020-04-21T00:00:00+00:00'\n                      source_id: 6007\n                      cloud_cover: 0\n                      condition: 'dry'\n                      dew_point: -2.5\n                      icon: 'clear-night'\n                      precipitation: 0\n                      pressure_msl: 1015.1\n                      relative_humidity: 40\n                      sunshine: 0\n                      temperature: 10.6\n                      visibility: 50000\n                      wind_direction: 70\n                      wind_speed: 12.6\n                      wind_gust_direction: 50\n                      wind_gust_speed: 33.5\n                  sources:\n                    - id: 6007\n                      dwd_station_id: '01766'\n                      wmo_station_id: '10315'\n                      station_name: Münster/Osnabrück\n                      observation_type: historical\n                      lat: 52.1344\n                      lon: 7.6969\n                      height: 47.8\n                      distance: 16365\n        '400':\n          $ref: '#/components/responses/InvalidRequest'\n        '404':\n          $ref: '#/components/responses/NoSources'\n  /current_weather:\n    get:\n      summary: Get current weather\n      tags:\n        - weather\n      description: |\n        Get current weather for a given location.\n\n        This endpoint is different from the other weather endpoints in that it does not directly correspond to any of the data available from the DWD Open Data server. Instead, it is a best-effort solution to reflect current weather conditions by compiling SYNOP observations from the past one and a half hours.\n\n        To set the location for which to retrieve weather, you must supply both `lat` and `lon` _or_ one of `dwd_station_id`, `wmo_station_id`, or `source_id`.\n      operationId: getCurrentWeather\n      parameters:\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lon'\n        - $ref: '#/components/parameters/dwd_station_id'\n        - $ref: '#/components/parameters/wmo_station_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/max_dist'\n        - $ref: '#/components/parameters/tz'\n        - $ref: '#/components/parameters/units'\n      responses:\n        '200':\n          description: Current weather and meta information on its sources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  weather:\n                    allOf:\n                      - $ref: '#/components/schemas/SynopRecord'\n                      - type: object\n                        properties:\n                          fallback_source_ids:\n                            description: Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source\n                            type: object\n                  sources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n                example:\n                  weather:\n                    source_id: 9296\n                    timestamp: '2020-06-26T10:30:00+00:00'\n                    cloud_cover: 0\n                    condition: 'dry'\n                    dew_point: 10.89\n                    icon: 'clear-day'\n                    precipitation_10: 0\n                    precipitation_30: 0\n                    precipitation_60: 0\n                    pressure_msl: 1013.3\n                    relative_humidity: 38\n                    visibility: 34399\n                    wind_direction_10: 110\n                    wind_direction_30: 125\n                    wind_direction_60: 132\n                    wind_speed_10: 17.3\n                    wind_speed_30: 15.5\n                    wind_speed_60: 16.2\n                    wind_gust_direction_10: 110\n                    wind_gust_direction_30: 110\n                    wind_gust_direction_60: 110\n                    wind_gust_speed_10: 31.3\n                    wind_gust_speed_30: 31.3\n                    wind_gust_speed_60: 31.3\n                    sunshine_30: 30\n                    sunshine_60: 60\n                    temperature: 26.3\n                    fallback_source_ids:\n                      visibility: 9358\n                  sources:\n                    - id: 9296\n                      dwd_station_id: '01766'\n                      observation_type: synop\n                      lat: 52.1344\n                      lon: 7.69685\n                      height: 47.8\n                      station_name: Muenster/Osnabrueck\n                      wmo_station_id: '10315'\n                      distance: 16363.614888635135\n                    - id: 9358\n                      dwd_station_id: '07374'\n                      observation_type: synop\n                      lat: 52.0814\n                      lon: 6.94096\n                      height: 45.5\n                      station_name: Ahaus\n                      wmo_station_id: '10309'\n                      distance: 46027.181977953594\n        '400':\n          $ref: '#/components/responses/InvalidRequest'\n        '404':\n          $ref: '#/components/responses/NoSources'\n  /synop:\n    get:\n      summary: Get SYNOP observations\n      tags:\n        - weather\n      description: |\n        Get a list of ten-minutely SYNOP observations for the time range given by `date` and `last_date`. Note that Bright Sky only stores SYNOP observations from the past 30 hours.\n\n        To set the weather station for which to retrieve records, you must supply one of `dwd_station_id`, `wmo_station_id`, or `source_id`. The `synop` endpoint does not support `lat` and `lon`; use the `sources` endpoint if you need to retrieve a SYNOP station ID close to a given location.\n\n        SYNOP observations are stored as they were reported, which in particular implies that many parameters are only available at certain timestamps. For example, most stations report `sunshine_60` only on the full hour, and `sunshine_30` only at 30 minutes past the full hour (i.e. also not on the full hour). Check out the [`current_weather` endpoint](#get-/current_weather) for an opinionated compilation of recent SYNOP records into a single \"current weather\" record.\n      operationId: getSynop\n      parameters:\n        - $ref: '#/components/parameters/date'\n        - $ref: '#/components/parameters/last_date'\n        - $ref: '#/components/parameters/dwd_station_id'\n        - $ref: '#/components/parameters/wmo_station_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/tz'\n        - $ref: '#/components/parameters/units'\n      responses:\n        '200':\n          description: Ten-minutely SYNOP records and meta information on the source.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  weather:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SynopRecord'\n                  sources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n                example:\n                  weather:\n                    - timestamp: '2020-06-25T13:00:00+00:00'\n                      source_id: 9296\n                      cloud_cover: 25\n                      condition: 'dry'\n                      dew_point: 14.81\n                      icon: 'partly-cloudy-day'\n                      precipitation_10:\n                      precipitation_30:\n                      precipitation_60: 0\n                      pressure_msl: 1018.7\n                      relative_humidity: 46\n                      sunshine_10:\n                      sunshine_30:\n                      sunshine_60: 53\n                      temperature: 27.5\n                      visibility:\n                      wind_direction_10: 80\n                      wind_direction_30:\n                      wind_direction_60:\n                      wind_speed_10: 15.8\n                      wind_speed_30:\n                      wind_speed_60:\n                      wind_gust_direction_10: 60\n                      wind_gust_direction_30: 60\n                      wind_gust_direction_60: 60\n                      wind_gust_speed_10: 33.8\n                      wind_gust_speed_30: 33.8\n                      wind_gust_speed_60: 33.8\n                  sources:\n                    - id: 9296\n                      dwd_station_id: '01766'\n                      observation_type: synop\n                      lat: 52.1344\n                      lon: 7.69685\n                      height: 47.8\n                      station_name: Muenster/Osnabrueck\n                      wmo_station_id: '10315'\n        '400':\n          $ref: '#/components/responses/InvalidRequest'\n        '404':\n          $ref: '#/components/responses/NoSources'\n  /sources:\n    get:\n      summary: Get available sources\n      tags:\n        - sources\n      description: Get a list of all Bright Sky sources matching the given location criteria, ordered by distance.\n      operationId: getSources\n      parameters:\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lon'\n        - $ref: '#/components/parameters/dwd_station_id'\n        - $ref: '#/components/parameters/wmo_station_id'\n        - $ref: '#/components/parameters/source_id'\n        - $ref: '#/components/parameters/max_dist'\n      responses:\n        '200':\n          description: Hourly weather records/forecasts and meta information on their sources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  sources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Source'\n                example:\n                  sources:\n                    - id: 6007\n                      dwd_station_id: '01766'\n                      wmo_station_id: '10315'\n                      station_name: Münster/Osnabrück\n                      observation_type: historical\n                      lat: 52.1344\n                      lon: 7.6969\n                      height: 47.8\n                      distance: 16365\n        '400':\n          $ref: '#/components/responses/InvalidRequest'\n        '404':\n          $ref: '#/components/responses/NoSources'\ncomponents:\n  schemas:\n    Timestamp:\n      type: string\n      format: timestamp\n      example: \"2020-04-21\"\n    WeatherRecord:\n      type: object\n      properties:\n        timestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: ISO 8601-formatted timestamp of this weather record/forecast\n        source_id:\n          description: Main Bright Sky source ID for this record\n          type: integer\n          example: 6007\n        cloud_cover:\n          description: Total cloud cover at timestamp\n          type: number\n          nullable: true\n          example: 12.1\n        condition:\n          description: |\n            Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.\n          type: string\n          nullable: true\n          enum: ['dry', 'fog', 'rain', 'sleet', 'snow', 'hail', 'thunderstorm', null]\n          example: 'rain'\n        dew_point:\n          description: Dew point at timestamp, 2 m above ground\n          type: number\n          nullable: true\n          example: -2.5\n        icon:\n          description: |\n            Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.\n          type: string\n          nullable: true\n          enum: ['clear-day', 'clear-night', 'partly-cloudy-day', 'partly-cloudy-night', 'cloudy', 'fog', 'wind', 'rain', 'sleet', 'snow', 'hail', 'thunderstorm', null]\n          example: 'partly-cloudy-day'\n        precipitation:\n          description: Total precipitation during previous 60 minutes\n          type: number\n          nullable: true\n          example: 1.8\n        pressure_msl:\n          description: Atmospheric pressure at timestamp, reduced to mean sea level\n          type: number\n          nullable: true\n          example: 1015.1\n        relative_humidity:\n          description: Relative humidity at timestamp\n          type: number\n          nullable: true\n          example: 40\n        sunshine:\n          description: Sunshine duration during previous 60 minutes\n          type: number\n          nullable: true\n          example: 2100\n        temperature:\n          description: Air temperature at timestamp, 2 m above the ground\n          type: number\n          nullable: true\n          example: 10.6\n        visibility:\n          description: Visibility at timestamp\n          type: number\n          nullable: true\n          example: 50000\n        wind_direction:\n          description: Mean wind direction during previous hour, 10 m above the ground\n          type: number\n          nullable: true\n          example: 70\n        wind_speed:\n          description: Mean wind speed during previous hour, 10 m above the ground\n          type: number\n          nullable: true\n          example: 12.6\n        wind_gust_direction:\n          description: Direction of maximum wind gust during previous hour, 10 m above the ground\n          type: number\n          nullable: true\n          example: 50\n        wind_gust_speed:\n          description: Speed of maximum wind gust during previous hour, 10 m above the ground\n          type: number\n          nullable: true\n          example: 33.5\n        fallback_source_ids:\n          description: Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source\n          type: object\n    SynopRecord:\n      type: object\n      properties:\n        timestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: ISO 8601-formatted timestamp of this weather record/forecast\n        source_id:\n          description: Bright Sky source ID for this record\n          type: integer\n          example: 6007\n        cloud_cover:\n          description: Total cloud cover at timestamp\n          type: number\n          nullable: true\n          example: 12.1\n        condition:\n          description: |\n            Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.\n          type: string\n          nullable: true\n          enum: ['dry', 'fog', 'rain', 'sleet', 'snow', 'hail', 'thunderstorm', null]\n          example: 'rain'\n        dew_point:\n          description: Dew point at timestamp, 2 m above ground\n          type: number\n          nullable: true\n          example: -2.5\n        icon:\n          description: |\n            Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types.\n          type: string\n          nullable: true\n          enum: ['clear-day', 'clear-night', 'partly-cloudy-day', 'partly-cloudy-night', 'cloudy', 'fog', 'wind', 'rain', 'sleet', 'snow', 'hail', 'thunderstorm', null]\n          example: 'partly-cloudy-day'\n        precipitation_10:\n          description: Total precipitation during previous 10 minutes\n          type: number\n          nullable: true\n          example: 0.8\n        precipitation_30:\n          description: Total precipitation during previous 30 minutes\n          type: number\n          nullable: true\n          example: 1.2\n        precipitation_60:\n          description: Total precipitation during previous 60 minutes\n          type: number\n          nullable: true\n          example: 1.8\n        pressure_msl:\n          description: Atmospheric pressure at timestamp, reduced to mean sea level\n          type: number\n          nullable: true\n          example: 1015.1\n        relative_humidity:\n          description: Relative humidity at timestamp\n          type: number\n          nullable: true\n          example: 40\n        sunshine_30:\n          description: Sunshine duration during previous 30 minutes\n          type: number\n          nullable: true\n          example: 1080\n        sunshine_60:\n          description: Sunshine duration during previous 60 minutes\n          type: number\n          nullable: true\n          example: 2100\n        temperature:\n          description: Air temperature at timestamp, 2 m above the ground\n          type: number\n          nullable: true\n          example: 10.6\n        visibility:\n          description: Visibility at timestamp\n          type: number\n          nullable: true\n          example: 50000\n        wind_direction_10:\n          description: Mean wind direction during previous 10 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 70\n        wind_direction_30:\n          description: Mean wind direction during previous 30 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 70\n        wind_direction_60:\n          description: Mean wind direction during previous 60 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 70\n        wind_speed_10:\n          description: Mean wind speed during previous previous 10 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 12.6\n        wind_speed_30:\n          description: Mean wind speed during previous previous 30 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 12.6\n        wind_speed_60:\n          description: Mean wind speed during previous previous 60 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 12.6\n        wind_gust_direction_10:\n          description: Direction of maximum wind gust during previous 10 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 50\n        wind_gust_direction_30:\n          description: Direction of maximum wind gust during previous 30 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 50\n        wind_gust_direction_60:\n          description: Direction of maximum wind gust during previous 60 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 50\n        wind_gust_speed_10:\n          description: Speed of maximum wind gust during previous 10 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 33.5\n        wind_gust_speed_30:\n          description: Speed of maximum wind gust during previous 30 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 33.5\n        wind_gust_speed_60:\n          description: Speed of maximum wind gust during previous 60 minutes, 10 m above the ground\n          type: number\n          nullable: true\n          example: 33.5\n    Source:\n      type: object\n      properties:\n        id:\n          description: Bright Sky source ID\n          type: integer\n          example: 6007\n        dwd_station_id:\n          description: DWD weather station ID\n          type: string\n          nullable: true\n          example: '01766'\n        wmo_station_id:\n          description: WMO weather station ID\n          type: string\n          nullable: true\n          example: '10315'\n        station_name:\n          description: DWD weather station name\n          type: string\n          nullable: true\n          example: 'Münster/Osnabrück'\n        observation_type:\n          description: Source type\n          type: string\n          example: 'historical'\n          enum: ['forecast', 'synop', 'current', 'historical']\n        first_record:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: Timestamp of first available record for this source\n        last_record:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: Timestamp of latest available record for this source\n        lat:\n          description: Station latitude, in decimal degrees\n          type: number\n          example: 52.1344\n        lon:\n          description:   Station longitude, in decimal degrees\n          type: number\n          example: 7.6969\n        height:\n          description: Station height, in meters\n          type: number\n          example: 47.8\n        distance:\n          description: Distance of weather station to the requested `lat` and `lon`, in meters\n          type: number\n          example: 16365\n  parameters:\n    date:\n      name: date\n      in: query\n      description: Timestamp of first weather record (or forecast) to retrieve, in ISO 8601 format, e.g. `2020-04-21` or `2020-04-24T12:00+02:00`. May contain time and/or UTC offset. If you do not supply a time, midnight will be assumed.\n      example: '2020-04-21'\n      required: true\n      schema:\n        $ref: '#/components/schemas/Timestamp'\n    last_date:\n      name: last_date\n      in: query\n      description: Timestamp of last weather record (or forecast) to retrieve, in ISO 8601 format. Will default to `date + 1 day`. (Also see explanation for `date`.)\n      schema:\n        $ref: '#/components/schemas/Timestamp'\n    lat:\n      name: lat\n      in: query\n      description: Latitude in decimal degrees, e.g. `51.58`.\n      example: 51.58\n      schema:\n        type: number\n    lon:\n      name: lon\n      in: query\n      description: Longitude in decimal degrees, e.g. `7.38`.\n      example: 7.38\n      schema:\n        type: number\n    dwd_station_id:\n      name: dwd_station_id\n      in: query\n      description: DWD station ID, typically five alphanumeric characters, e.g. `P0036`. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority.\n      schema:\n        type: string\n    wmo_station_id:\n      name: wmo_station_id\n      in: query\n      description: WMO station ID, typically five digits, e.g. `10315`. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority.\n      schema:\n        type: string\n    source_id:\n      name: source_id\n      in: query\n      description: Bright Sky source ID, as retrieved from the `sources` endpoint, e.g. `1234`. You can supply multiple source IDs separated by commas, ordered from highest to lowest priority.\n      schema:\n        type: integer\n    max_dist:\n      name: max_dist\n      in: query\n      description: Maximum distance of record location from the location given by `lat` and `lon`, in meters, e.g. `10000`. Only has an effect when using `lat` and `lon`. Defaults to `50000`.\n      schema:\n        type: integer\n    tz:\n      name: tz\n      in: query\n      description: Timezone in which record timestamps will be presented, as \u003ca href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\"\u003etz database name\u003c/a\u003e, e.g. `Europe/Berlin`. Will also be used as timezone when parsing `date` and `last_date`, unless these have explicit UTC offsets. If omitted but `date` has an explicit UTC offset, that offset will be used as timezone. Otherwise will default to UTC.\n      schema:\n        type: string\n    units:\n      name: units\n      in: query\n      description: |\n        Physical units in which meteorological parameters will be returned. Set to `si` to use \u003ca href=\"https://en.wikipedia.org/wiki/International_System_of_Units\"\u003eSI units\u003c/a\u003e. The default `dwd` option uses a set of units that is more common in meteorological applications and civil use:\n        \u003ctable\u003e\n          \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003eDWD\u003c/td\u003e\u003ctd\u003eSI\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eCloud cover\u003c/td\u003e\u003ctd\u003e%\u003c/td\u003e\u003ctd\u003e%\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eDew point\u003c/td\u003e\u003ctd\u003e°C\u003c/td\u003e\u003ctd\u003eK\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003ePrecipitation\u003c/td\u003e\u003ctd\u003emm\u003c/td\u003e\u003ctd\u003ekg / m²\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003ePressure\u003c/td\u003e\u003ctd\u003ehPa\u003c/td\u003e\u003ctd\u003ePa\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eRelative humidity\u003c/td\u003e\u003ctd\u003e%\u003c/td\u003e\u003ctd\u003e%\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eSunshine\u003c/td\u003e\u003ctd\u003emin\u003c/td\u003e\u003ctd\u003es\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eTemperature\u003c/td\u003e\u003ctd\u003e°C\u003c/td\u003e\u003ctd\u003eK\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eVisibility\u003c/td\u003e\u003ctd\u003em\u003c/td\u003e\u003ctd\u003em\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eWind direction\u003c/td\u003e\u003ctd\u003e°\u003c/td\u003e\u003ctd\u003e°\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eWind speed\u003c/td\u003e\u003ctd\u003ekm / h\u003c/td\u003e\u003ctd\u003em / s\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eWind gust direction\u003c/td\u003e\u003ctd\u003e°\u003c/td\u003e\u003ctd\u003e°\u003c/td\u003e\u003c/tr\u003e\n          \u003ctr\u003e\u003ctd\u003eWind gust speed\u003c/td\u003e\u003ctd\u003ekm / h\u003c/td\u003e\u003ctd\u003em / s\u003c/td\u003e\u003c/tr\u003e\n        \u003c/table\u003e\n      schema:\n        type: string\n        enum: ['dwd', 'si']\n  responses:\n    InvalidRequest:\n      description: Request has missing or invalid parameters.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n              description:\n                type: string\n            example:\n              title: 400 Bad Request\n              description: Please supply lat/lon or dwd_station_id or wmo_station_id or source_id\n    NoSources:\n      description: No weather sources match the given location criteria.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n              description:\n                type: string\n            example:\n              title: 404 Not Found\n              description: No sources match your criteria\n",
			"canonicalURL": "/github.com/jdemaeyer/brightsky@fe6b29f63f462b44031c8aefd186872d5ea0d02e/-/blob/docs/brightsky.yml",
			"externalURLs": [
				{
					"url": "https://github.com/jdemaeyer/brightsky/blob/fe6b29f63f462b44031c8aefd186872d5ea0d02e/docs/brightsky.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/current_weather\": get: responses: code 200: contents: media: \"application/json\": generate schema: field sources: item: field first_record: allOf: schema type mismatch: string and "
}