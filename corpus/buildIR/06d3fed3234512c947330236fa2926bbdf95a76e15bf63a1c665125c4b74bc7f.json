{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/urykhy/stuff"
		},
		"file": {
			"name": "tutorial.v1.yaml",
			"size": 0,
			"path": "swagger/api/tutorial.v1.yaml",
			"byteSize": 4481,
			"content": "openapi: 3.0.0\ninfo:\n  title: tutorial\n  version: '1.0'\n  contact:\n    name: urykhy\n    email: urykhy@gmail.com\n  x-sentry: true\n  x-queue: true\n  x-jaeger: true\nservers:\n  - url: 'http://localhost:3000/api/v1'\npaths:\n  /test_1/complex_body_response:\n    get:\n      summary: Test method\n      tags:\n        - Tutorial\n      operationId: get-complex-body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                task_id:\n                  type: string\n                cookies:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      key:\n                        type: string\n                      value:\n                        type: array\n                        items:\n                          type: string\n                operation:\n                  type: string\n            examples: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: array\n                  items:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        idx:\n                          type: string\n      description: test 1\n    parameters: []\n  '/test_2/parameters/{id}.json':\n    get:\n      summary: Your GET endpoint\n      x-jaeger-base-id: 256\n      tags:\n        - Tutorial\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: object\n                properties: {}\n          headers:\n            response-header-string:\n              schema:\n                type: string\n            response-header-bool:\n              schema:\n                type: boolean\n            response-header-int:\n              schema:\n                type: integer\n      operationId: get-parameters\n      parameters:\n        - schema:\n            type: integer\n            minimum: 1\n            maximum: 50\n            exclusiveMinimum: true\n            exclusiveMaximum: true\n            multipleOf: 2\n          in: header\n          name: x-header-int\n        - schema:\n            type: string\n            default: two\n            enum:\n              - one\n              - two\n              - three\n          in: header\n          name: x-header-str-required-enum\n          required: true\n        - schema:\n            type: number\n          in: header\n          name: x-header-number\n        - schema:\n            type: boolean\n          in: header\n          name: x-header-boolean\n        - schema:\n            type: array\n            items:\n              type: string\n            minItems: 5\n            maxItems: 10\n            uniqueItems: true\n          in: query\n          name: idx-array-string\n          style: form\n          explode: false\n        - schema:\n            type: string\n            minLength: 5\n            maxLength: 10\n            pattern: '^[a-z]+$'\n          in: query\n          name: string-required\n          required: true\n        - $ref: '#/components/parameters/xRefHeader'\n      description: test 2\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n  /test_3/response/ref:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Tutorial\n      responses:\n        '200':\n          $ref: '#/components/responses/xRefResponse'\n      operationId: get-ref-to-response\n      parameters: []\n      description: test 3\n    parameters: []\n  /test_4/image_in_body:\n    get:\n      summary: Accept svg in body\n      tags: []\n      responses:\n        '200':\n          description: OK\n      operationId: get-test_4-image_in_body\n      requestBody:\n        content:\n          image/svg+xml:\n            schema:\n              type: string\ncomponents:\n  schemas: {}\n  parameters:\n    xRefHeader:\n      name: x-ref-header\n      in: header\n      required: false\n      schema:\n        type: string\n  responses:\n    xRefResponse:\n      description: Example response\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: array\n              items:\n                type: number\n  securitySchemes: {}\ntags:\n  - name: Tutorial\nsecurity: []\n",
			"canonicalURL": "/github.com/urykhy/stuff@fb601f9505fb493c26b835663cd1e96d15c1aa5c/-/blob/swagger/api/tutorial.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/urykhy/stuff/blob/fb601f9505fb493c26b835663cd1e96d15c1aa5c/swagger/api/tutorial.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/test_2/parameters/{id}.json\": get: responses: 200: contents: application/octet-stream: octet stream with \"object\" schema not supported"
}