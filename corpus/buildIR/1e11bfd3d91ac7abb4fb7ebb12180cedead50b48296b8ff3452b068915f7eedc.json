{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/prodpad/openapi.yaml",
			"byteSize": 136650,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: ProdPad\n  description: \u003e\n    This is a generated connector for [ProdPad API v1.0](https://www.prodpad.com/) OpenAPI specification. \n\n    ProdPad is product management software that helps product managers develop product strategy. Easily manage teams, customers and roadmaps.  \n  x-ballerina-init-description: \u003e \n    The connector initialization requires setting the API credentials.\n\n    Create a [ProdPad account](https://www.prodpad.com/) and obtain tokens by following [this guide](https://help.prodpad.com/article/763-generating-an-api-key).\n  x-ballerina-display:\n    label: ProdPad \n    iconPath: \"icon.png\"\n  termsOfService: https://www.prodpad.com/terms\n  contact: \n    name: Support\n    url: https://help.prodpad.com\n    email: hello@prodpad.com\n  version: '1.0'\n\nservers:\n- url: https://api.prodpad.com/v1\n\npaths:\n  /feedbacks:\n    get:\n      tags:\n      - Feedback\n      summary: Get list of feedbacks\n      description: \u003e \n        Returns a list of feedback which can be a straight list or grouped by contact using the group_by parameter. \n        \n        The list can also be filtered by state query parameter for active, archived, unsorted or all. \n        \n        Default active feedback is returned.\n      operationId: GetFeedbacks\n      parameters:\n        - in: query\n          name: group_by\n          schema:\n            type: string\n            enum: [contact]\n          description: Setting to customer will group the feedback by customer\n          required: false\n        - in: query\n          name: state\n          schema:\n            type: string\n            enum: [active, unsorted, archived, all]\n          description: Set to value of active for active, archived for archived feedback, unsorted for unsorted feedback and all for all feedback. Default is active.\n          required: false\n        - in: query\n          name: page\n          schema:\n            type: integer\n            minimum: 1\n          description: Set to page through the results. Default is 1.\n          required: false\n        - in: query\n          name: size\n          schema:\n            type: integer\n            maximum: 500\n          description: For setting the number of results per page. Default is 100.\n          required: false\n        - in: query\n          name: company\n          schema:\n            type: string\n          description: Set to filter the feedback results based on whether the feedback was entered for a contact linked to the company.\n          required: false\n        - in: query\n          name: company_country\n          schema:\n            type: string\n          description: Set to filter the feedback results based on the country set for the associated company.\n          required: false\n        - in: query\n          name: company_size\n          schema:\n            type: string\n            enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n          description: Set to filter the feedback results based on the size of the company for the associated company.\n          required: false\n        - in: query\n          name: company_value\n          schema:\n            type: string\n            enum: [high, medium, low]\n          description: Set to filter the feedback results based on the value of the company for the company assocaited to the feedback.\n          required: false\n        - in: query\n          name: customer\n          schema:\n            type: string\n          description: Can be either numeric ID, UUID of a contac or contact email.\n          required: false\n        - in: query\n          name: product\n          schema:\n            type: string\n          description: Filter results by the product associated to feedback. Can either be the product UUID or product ID.\n          required: false\n        - in: query\n          name: persona\n          schema:\n            type: string\n          description: Filter results by the persona associated to feedback. Can either be the persona UUID or persona ID.\n          required: false\n        - in: query\n          name: job_role\n          schema:\n            type: string\n            format: uuid\n          description: Filter results by the job role of the contact associated to the feedback. Use the JobRole UUID.\n          required: false\n        - in: query\n          name: tags\n          schema:\n            type: array\n            items:\n              type: string\n          description: Filter feedback results by the tags associated to the feedback. Mulitple tags can be specified and acts as an OR. Use the tag ID or UUID.\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: has_ideas\n          schema:\n            type: boolean\n          description: Whether the feedback is associated to one or more ideas. Default is either.\n          required: false\n        - in: query\n          name: external_id\n          schema:\n            type: string\n          description: Filter feedback to return the feedback associated with a specific External ID. An example of an external ID is the ID of a record in a CRM or ID of a ticket in a customer support application.\n        - in: query\n          name: external_url\n          schema:\n            type: string\n          description: Filter feedback to return the feedback associated with a specific external url. An example of an external url is that of a record in a CRM or a ticket in a customer support application\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackList'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n      deprecated: false\n    post:\n      tags:\n      - Feedback\n      summary: Create a new feedback.\n      description: \u003e \n        Create a new feedback in the account. The feedback has to have either a name or an email and the actual feedback. The email is used to add the feedback to an existing contact.\n      operationId: PostFeedbacks\n      requestBody:\n        description: Post body for the feedback.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeedbackPost'\n        required: true\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/ContactLinkWithFeedback'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n      deprecated: false\n  /feedbacks/{id}:\n    get:\n      tags:\n        - Feedback\n      summary: Get a piece of feedback.\n      description: \u003e\n        Return an individual piece of feedback. The feedback is returned with the details of the contact that provided the piece of feedback.\n      operationId: GetFeedback\n      parameters:\n        - name: id\n          in: path\n          description: Feedback ID.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200': \n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactLinkWithFeedback'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Feedback not found.\n\n    put:\n      tags:\n        - Feedback\n      summary: Edit an existing piece of feedback.\n      description: \u003e\n        Use this endpoint to edit the details of an existing piece of feedback including the feedback, the status and external links to add (for example link to a record in the CRM, other 3rd party application or video of the customer interview).\n      operationId: PutFeedback\n      parameters:\n        - name: id\n          in: path\n          description: Feedback ID\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Edits of the feedback.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeedbackPut'\n      responses:\n        '204':\n          description: Success response.\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Feedback not found.\n\n  # /feedbacks/{id}/attachments:\n  #   post:\n  #     tags:\n  #     - Feedback\n  #     summary: Add attachments to existing feedback.\n  #     description: \u003e\n  #       Upload an attachment (movie, file, image etc.) to a piece of feedback. This can be used to attach customer interviews, screenshots etc to the feedback to provide more context. The size is limited to 20MB.\n  #     operationId: PostFeedbackAttachments\n  #     parameters:\n  #     - name: id\n  #       in: path\n  #       description: Feedback ID\n  #       required: true\n  #       schema:\n  #         type: integer\n  #     requestBody:\n  #       description: Attachment as a binary payload\n  #       content:\n  #         multipart/form-data:\n  #           schema:\n  #             type: object\n  #             properties:\n  #               file:\n  #                 type: string\n  #                 format: binary\n  #     responses:\n  #       '201':\n  #         description: Success response.\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/FeedbackAttachment'\n  #       '400':\n  #         $ref: '#/components/responses/Malformed'\n  #       '401':\n  #         $ref: '#/components/responses/NotAuthenticated'\n  #       '403':\n  #         $ref: '#/components/responses/Forbidden'\n  #       '404':\n  #         description: Feedback not found.\n  #     deprecated: false\n\n  /feedbacks/{id}/ideas:\n    get:\n      tags:\n        - Feedback\n      summary: Get all ideas associated with a feedback\n      description: \u003e\n        Return all the ideas linked to this piece of feedback. This allows you see how the feedback is being incorporated into various stages of Product Management. For example, fetching the assocaited ideas would then show the workflow stage of the idea allowing you to notify the contact when the something related to their feedback has been released.\n      operationId: GetFeedbackIdeas\n      parameters:\n        - name: id\n          in: path\n          description: Feedback ID\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200': \n          description: Success response\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \n                  $ref: '#/components/schemas/Idea'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Feedback not found.\n  /contacts:\n    get:\n      tags:\n        - Feedback\n      summary: Get a list of contacts\n      description: \u003e\n        Get a list of all the contacts in the account. This can be used to sync contacts between ProdPad and CRMs.\n      operationId: GetContacts\n      parameters:\n        - in: query\n          name: company\n          schema:\n            type: string\n            format: uuid\n          description: UUID of a company to filter contacts by.\n          required: false\n        - in: query\n          name: persona\n          schema:\n            type: string\n          description: ID of a persona to filter contacts by.\n          required: false\n        - in: query\n          name: job_role\n          schema:\n            type: string\n            format: uuid\n          description: UUID of a job role to filter contacts by.\n          required: false\n        - in: query\n          name: tags\n          schema:\n            type: array\n            items:\n              type: string\n          description: ID, UUID or name of one or more tags to filter the contacts by.\n          style: form\n          explode: false\n          required: false\n        - in: query\n          name: name\n          schema:\n            type: string\n          description: Name of contact or partial name of contacts to filter the list by\n          required: false\n        - in: query\n          name: external_id\n          schema:\n            type: string\n          description: Filter the contacts by an ID from another application such as a CRM\n        - in: query\n          name: external_url\n          schema:\n            type: string\n          description: Filter the contacts by a URL from another application such as a CRM\n        - in: query\n          name: email\n          schema:\n            type: string\n          description: Filter the contacts by an email.\n        - in: query\n          name: feedbacks\n          schema:\n            type: boolean\n            default: false\n          description: Wheter to include the feedback for each contact in the results. Default is false.\n          required: false      \n        - in: query\n          name: page\n          schema:\n            type: integer\n            minimum: 1\n          description: Page number of results to return.\n          required: false\n        - in: query\n          name: size\n          schema:\n            type: integer\n            maximum: 500\n          description: Number of results per page.\n          required: false\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Feedback\n      summary: Create a new contact\n      description: \u003e\n        Create a new contact in the account. Each contact needs a name and email at the very least. \n      operationId: PostContacts\n      requestBody:\n        description: New contact details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContactPost'\n        required: true\n      responses:\n        '200':\n          description: Success response\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/Contact'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false    \n\n  /contacts/{id}:\n    get:\n      tags:\n      - Feedback\n      summary: Get a contact\n      description: \u003e\n        Returns the details of a contact. This will include a contacts PII (such as name and email) so be aware of the privacy of the individual when using this endpoint. \n        \n        You can choose to include the feedback provided by the contact or not.\n      operationId: GetContact\n      parameters:\n        - name: id\n          in: path\n          description: Contact ID to fetch.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: feedbacks\n          in: query\n          description: Whether to include the feedback provided by the contact in the response or not.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Contact'\n                  - $ref: '#/components/schemas/ContactWithFeedback'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Contact not found.\n      deprecated: false\n\n    put:\n      tags:\n        - Feedback\n      summary: Edit a contact.\n      description: \u003e\n        Edit the details of the contact such as name, company, about etc. Remember you are adding PII details for the contact os make sure you really need it in ProdPad before you add it.\n      operationId: PutContact\n      parameters:\n        - name: id\n          in: path\n          description: Contact ID to edit.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Edits to the contact.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContactPost'\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Contact'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Contact not found\n\n  /companies:\n    get:\n      summary: Get a list of companies.\n      description: \u003e\n        Return a list of companies. Companies are a collection of contacts that are providing feedback. Using companies allows you to group feedback from the same organisational source. \n        \n        While very useful for business to busines,s companies can be used to create a any sort grouping of contacts for example by a conference or a cohort. \n        \n        Using parameters allows you to also select whether to return feedback associated to the company via the contacts connected to the company. This is only available to accounts with an Advanced+ subscription.\n      operationId: GetCompanies\n      tags:\n        - Feedback\n      parameters:\n        - in: query\n          name: country\n          schema:\n            type: string\n          description: Set to filter the companies based on the country. Use ISO Alpha-2 country codes. Only one country can be filtered at a time.\n          required: false\n        - in: query\n          name: size\n          schema:\n            type: string\n            enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n          description: Set to filter the companies based on their size.\n          required: false\n        - in: query\n          name: value\n          schema:\n            type: string\n            enum: [high, medium, low]\n          description: Set to filter the companies based on their value.\n          required: false\n        - in: query\n          name: city\n          schema:\n            type: string\n          description: Set to filter the companies based on city.\n          required: false\n        - in: query\n          name: tags\n          schema:\n            type: array\n            items:\n              type: string\n          description: Filter companies by the tags associated to the feedback. Mulitple tags can be specified and acts as an OR. Use the tag ID or UUID.\n          style: form\n          explode: false\n          required: false \n        - in: query\n          name: name\n          schema:\n            type: string\n          description: Filter the companies by the name or partial name of the companies.\n        - in: query\n          name: external_id\n          schema:\n            type: string\n          description: Filter the companies by an ID from a 3rd party application associated to the companies in Prodpad\n        - in: query\n          name: external_url\n          schema:\n            type: string\n          description: Filter the companies by a URL that is associated to a company.\n        - in: query\n          name: contacts\n          schema:\n            type: boolean\n            default: true\n          description: Whether to include contacts associated with each company in the results. Default is true.\n          required: false\n        - in: query\n          name: feedbacks\n          schema:\n            type: boolean\n            default: true\n          description: Whether to include the feedback for each contact associated to a company in the results. Default is true. Note if this is set to true then contacts will be returned whether or not contacts is set to true or false.\n          required: false\n        - in: query\n          name: page\n          schema:\n            type: integer\n            minimum: 1\n          description: The page of results to return (size is always 100).\n          required: false\n      responses: \n        '200': \n          description: Success response.\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/CompanyList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Feedback\n      summary: Create a new company\n      description: \u003e\n        Create a new company in the account. This is only available to accounts with an Advanced or higher subscription. If you try on an account without an advanced or higher subscription package it will return a 403.\n      operationId: PostCompanies\n      requestBody:\n        description: Post body request with the company details used to create a new company.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompanyPost'\n      responses: \n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Company'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /companies/{id}:\n    get:\n      tags:\n        - Feedback\n      summary: Get a company\n      description: \u003e\n        Fetch a company's details. This is only available to accounts with an Advanced or higher subscription.\n      operationId: GetCompany\n      parameters:\n        - name: id\n          in: path\n          description: UUID of the company to fetch.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses: \n        '200': \n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Company'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n    put: \n      tags:\n        - Feedback\n      summary: Edit a company.\n      description: \u003e\n        Update the details of a company. This is only available to Advanced or higher subscriptions.\n      operationId: PutCompany\n      parameters:\n        - name: id\n          in: path\n          description: UUID of the company to edit.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Changes to be made to a company.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompanyPost'\n      responses: \n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Company'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Company not found.\n\n  /jobroles:\n    get:\n      tags:\n        - Feedback\n      summary: Get the job roles for the account.\n      description: \u003e\n        Get the job roles that can be assigned to contacts. Job roles are used to filter contacts and feedback from contacts with certain job roles.\n      operationId: GetJobRoles\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobRoleList'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /ideas:\n    get: \n      tags:\n        - Ideas\n      summary: Get a list of ideas.\n      description: \u003e\n        Return a list of ideas that match any supplied filter criteria.\n      operationId: GetIdeas\n      parameters:\n        - name: tags\n          in: query\n          description: One or more tag names to filter the ideas by. These act as an OR not AND.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n          explode: false\n        - name: product\n          in: query\n          description: Name of a product to filter the ideas by.\n          required: false\n          schema:\n            type: string\n        - name: persona\n          in: query\n          description: Name of a persona to filter the ideas by.\n          required: false\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Name of a workflow status to filter the ideas by.\n          required: false\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: Filters the returned ideas based on their state. Active Public is same as portal in the UI. If not included then the endpoint returns all active and active_public the same as the UI.\n          required: false\n          schema:\n            type: string\n            enum: [active, active_public, archived]\n        - name: external_id\n          in: query\n          description: Return ideas or idea with a specific external_id.\n          required: false\n          schema:\n            type: string\n        - name: external_url\n          in: query\n          description: Return ideas or idea with a specific URL to an external resource\n          required: false\n          schema:\n            type: string\n        - name: withfeedback\n          in: query\n          description: Return the associated feedback to the ideas\n          schema:\n            type: boolean\n          required: false\n        - name: page\n          in: query\n          description: Page of results to return\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - name: size\n          in: query\n          description: The number of results per page\n          required: false\n          schema:\n            type: integer\n            maximum: 500\n            default: 20\n      responses: \n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdeaList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Ideas\n      summary: Create a new idea.\n      description: \u003e\n        Add a new idea to the account. An idea must have either a title or a description.\n      operationId: PostIdeas\n      requestBody:\n        description: Idea to add to the account\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdeaPost'\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Idea'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false   \n\n  /ideas/{id}:\n    get:\n      summary: Get an idea.\n      description: \u003e\n        Use the numeric ID to return an idea. You can get a simple version of the idea or an expanded one using the expanded parameter which returns the business case, functional specs, notes, user stories, comments and other linked data.\n        \n        If you have the project_id (the numerical number from the ProdPad UI in the idea canvas url) you can use that to fetch the idea by using the query parameter by_project_id, otherwise you need to use the global numerical ID.\n      tags:\n      - Ideas\n      operationId: GetIdeaByID\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea unless using the by_project_id then it is the numeric project ID (the Idea number seen in the UI).\n          required: true\n          schema:\n            type: integer\n        - name: expand\n          in: query\n          description: Whether to return the expanded version of the idea ojbect. This adds in business case, user stories, comments, etc.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: by_project_id\n          in: query\n          description: Whether the ID represents the project_id instead of the numeric ID.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Idea'\n                  - $ref: '#/components/schemas/IdeaExpanded'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea with the id not found.\n      deprecated: false\n\n    put:\n      tags:\n        - Ideas\n      summary: Edit an existing idea.\n      description: \u003e\n        Update the fields of an existing idea.\n      operationId: PutIdea\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea (not the project id).\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Edits to an idea\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdeaPut'\n      responses:\n        '204':\n          description: Success response.\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n\n  /ideas/{id}/votes:\n    get:\n      tags:\n        - Ideas\n      summary: Get thoughts on an idea\n      description: \u003e\n        Return the number of thoughts split by type (yay, nay, maybe) and who made them on the idea.\n      operationId: GetIdeaVotes\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdeaThoughts'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n    post:\n      tags:\n        - Ideas\n      summary: Add a new thought to ideas. This is an alias for POST /votes.\n      description: \u003e\n        Add a new thought to an idea. A thought is either a yay, nay or maybe and who provided it. The thoughts can only be provided for users who have a role in the ProdPad account. \n        \n        A use for this endpoint is to allow users to quickly provide yay, nay or maybe on a list of ideas without having to go into ProdPad.\n      operationId: PostIdeaVotes\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: New vote to be added.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ThoughtPost'\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThoughtPostResponse'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n  /ideas/{id}/statuses:\n    post:\n      tags:\n        - Ideas\n      summary: Update workflow status of idea.\n      description: \u003e\n        Update the workflow stage of an idea. This allows you to move the idea through the workflow based on the flow of the related data in other applications. An example would be to update ProdPad workflow stage for an idea when a related ticket is moved between columns in Clubhouse.io\n        \n        The ID of the workflow stages can be obtained from GET /statuses\n      operationId: PostIdeaStatus\n      parameters:\n      - name: id\n        in: path\n        description: Numeric ID of the idea.\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: New workflow status of the idea.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdeaStatusChangePost'\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdeaStatusChangeResponse'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea is not found.    \n  /ideas/{id}/userstories:\n    get:\n      tags:\n        - Ideas\n      summary: Get a list of user stories associated to the idea.\n      description: \u003e\n        Returns a list of all the user stories associated to an idea. This can be useful for importing into other applications for development.\n        \n        You could also use this endpoint to see if an user story has been added to an idea and if so add it to a 3rd party application.\n      operationId: GetIdeaUserstories\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStories'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n  /ideas/{id}/comments:\n    get:\n      tags:\n        - Ideas\n      summary: Get comments for an idea.\n      description: \u003e\n        Return all the discussion that an idea has had. This can be useful for showing the discussion in other applications. \n      operationId: GetIdeaComments\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n               $ref: '#/components/schemas/CommentList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n  /ideas/{id}/comments/{commentId}:\n    get:\n      tags:\n        - Ideas\n      summary: Get a specific comment on an idea.\n      description: \u003e\n        Returns a specific comment on the idea along with the replies to that comment if there are any. A use case for this endpoint is displaying a particular thread in another application or for syncing conversations between ProdPad and another application.\n        \n        Comments can only be left by users with a role in the ProdPad account.\n      operationId: PutIdeaComment\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n        - name: commentId\n          in: path\n          description: Numeric ID of the comment.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Comment'\n                  - $ref: '#/components/schemas/CommentWithDesign'\n                  - $ref: '#/components/schemas/CommentWithThought'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea or comment not found\n  /ideas/{id}/feedback: \n    get:\n      tags:\n        - Ideas\n      summary: Get feedback associated to an idea.\n      description: \u003e\n        This endpoint returns a list of all the feedback that is associated to the idea. This allows you to display the feedback in other apps for a particular idea or sync feedback between ProdPad and other applications.\n      operationId: GetIdeaFeedback\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeedbackList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n  /ideas/{id}/ideas:\n    get:\n      tags:\n        - Ideas\n      summary: Get ideas linked to an idea.\n      description: \u003e\n        This endpoint returns all the ideas that have been marked as related or duplicate to the primary idea. \n        \n        This endpoint can be used to showcase related ideas in 3rd party applications.\n      operationId: GetIdeaRelatedIdeas\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the idea.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/RelatedIdeas'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Idea not found.\n  /userstories:\n    get:\n      tags:\n        - Ideas\n      summary: Get the user stories in an account.\n      description: \u003e\n        This endpoint returns a list of user stories in the account along with the idea they are part of. One use of this endpoint is to spot when new user stories have been added and add them to a 3rd party application.\n      operationId: GetUserStories\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoryList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /votes:\n    get:\n      tags:\n        - Ideas\n      summary: Get the thoughts.\n      description: \u003e\n        This endpoint returns a list of all thoughts (yay, nay and maybe) along with the comment made at the time the thought was added and the idea the thought belongs to. This endpoint can be used to spot when new thoughts have been added and which idea they have been added to.\n      operationId: GetThoughts\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThoughtList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Ideas\n      summary: Create a new thought on an idea.\n      description: \u003e \n        Add a yay, nay or maybe thought on an idea in ProdPad along with a comment. This endpoint can be used to allow users with a role in ProdPad to add a thought to an idea from a 3rd party application.\n      operationId: PostThoughts\n      requestBody:\n        description: New thought to be added\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ThoughtPost'\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThoughtPostResponse'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /personas:\n    get:\n      tags:\n        - Personas\n      summary: Get a list of Personas\n      description: \u003e\n        Returns a list of personas in the account. This only includes basic details. For full details of the persona use GET /persona/{id}\n        \n        The endpoint is useful for getting the persona IDs to be used in other endpoints to link an idea or feedback to a persona.\n      operationId: GetPersonas\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonaList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /personas/{id}:\n    get:\n      tags:\n        - Personas\n      summary: Get a persona.\n      description: \u003e\n        Returns the details on the persona. This inculdes the behavior, goals, constraints and description of the persona.\n        \n        This endpoint can be used to showcase the personas in 3rd party applications.\n      operationId: GetPersona\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the persona.\n          required: true\n          schema:\n            type: integer      \n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Persona'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Persona not found.\n  \n  /products:\n    get:\n      tags:\n      - Products\n      summary: List products.\n      description: \u003e\n        This endpoints returns a list of the products in the account. The products can be returned grouped via product lines by using the group parameter.\n      operationId: GetProducts\n      parameters:\n        - name: group\n          in: query\n          description: Whether the returned list is grouped by product lines or not.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/ProductList'\n                  - $ref: '#/components/schemas/ProductListGroup'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false\n\n  /products/{id}:\n    get:\n      tags:\n        - Products\n      summary: Get a product.\n      description: \u003e\n        Returns an individual product. Note this doesn't return the current updated canvas style.\n      operationId: GetProduct\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the product.\n          required: true\n          schema:\n            type: integer  \n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Product not found.\n\n  /products/{id}/roadmap:\n    get:\n      tags:\n        - Products\n      summary: Get a product roadmap\n      description: \u003e\n        This endpoint returns the roadmap for the specific product. This only includes the roadmap cards that are active and not in the completed or candidate columns.\n      operationId: GetProductRoadmap\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the product.\n          required: true\n          schema:\n            type: integer  \n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Roadmap'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Product not found. \n\n  /roadmaps:\n    get: \n      tags:\n        - Products\n      summary: Get a list of the roadmaps.\n      description: \u003e\n        This endpoint returns a list of all the roadmaps that are in the account along with the product they are related to. This does not return product line roadmaps or the portfolio roadmap.\n      operationId: GetRoadmaps\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoadmapList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /roadmaps/{id}:\n    get:\n      tags:\n        - Products\n      summary: Get an individual roadmap.\n      description: \u003e\n        This endpoint returns an individual roadmap. This includes the roadmap cards. It does not return the cards that are either completed or in candidates.\n      operationId: GetRoadmap\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the roadmap. \n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Roadmap'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Roadmap not found.\n      deprecated: false\n\n  /roadmaps/{id}/cards:\n    post:\n      tags:\n      - Products\n      summary: Create roadmap card.\n      description: \u003e\n        This endpoint is for creating a new roadmap card on the specified roadmap.\n      operationId: PostRoadmapCard\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the roadmap.\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Details of roadmap card.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoadmapCardPost'\n        required: true\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoadmapCardPostResponse'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Roadmap not found.\n      deprecated: false\n\n  /roadmaps/{id}/cards/{cardid}:\n    get:\n      tags:\n        - Products\n      summary: Get a roadmap card.\n      description: \u003e\n        This endpoint returns the details of the specified card on the roadmap. \n      operationId: GetRoadmapCard\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the roadmap.\n          required: true\n          schema:\n            type: integer\n        - name: cardid\n          in: path\n          description: Numeric ID of the card.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoadmapCardColumn'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false    \n    put:\n      tags:\n        - Products\n      summary: Edit a roadmap card.\n      description: \u003e\n        This endpoint allows you to edit the details of the roadmap card including title, description, tags and objectives.\n      operationId: PutRoadmapCard\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the roadmap.\n          required: true\n          schema:\n            type: integer\n        - name: cardid\n          in: path\n          description: Numeric ID of the roadmap card.\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: The card details to change.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoadmapCardPost'\n        required: true\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoadmapCardColumn'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false\n\n  /objectives:\n    get:\n      tags:\n        - Products\n      summary: Get list of objectives.\n      description: \u003e\n        Get a list of objectives in the account. The list indicates whether they are associated to a product or not. Use this list to update the objectives associated with a card. Note if you use a an objective that is associated to one product to add to a card on another product roadmap it will error.\n      operationId: GetObjectives\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectiveList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Products\n      summary: Create a new objective.\n      description: \u003e\n        Create a new objective in the account. This can be linked to a specific product. This endpoint can be used to sync objectives between a 3rd party tool and ProdPad.\n      operationId: PostObjectives\n      requestBody:\n        description: Objective details.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectivePost'\n        required: true\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objective'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /objectives/{id}:\n    get:\n      tags:\n        - Products\n      summary: Get an objective.\n      description: \u003e\n        This endpoint returns the details of an objective. This is primarily for listing objectives in a 3rd party application.\n      operationId: GetObjective\n      parameters:\n        - name: id\n          in: path\n          description: UUID of the objective.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objective'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Objective not found.\n\n    put:\n      tags:\n        - Products\n      summary: Edit an objective.\n      description: \u003e\n        This endpoints allows you to edit the objective to change its name, the associated product and its status.\n      operationId: PutObjective\n      parameters:\n        - name: id\n          in: path\n          description: UUID of the objective.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Details of objective to be changed.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectivePost'\n        required: true\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objective'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Objective not found.\n  /tags:\n    get:\n      tags:\n      - Misc\n      summary: Get a list of tags.\n      description: \u003e\n        Get a list of tags used in the account. Use this endpoint to find the IDs of tags when you want to add a tag to another object such as an Idea, feedback or roadmap card.\n      operationId: GetTags\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false \n\n  /tags/{id}:\n    get:\n      tags:\n        - Misc\n      summary: Get a tag.\n      description: \u003e\n        Get the details of an individual tag.\n      operationId: GetTag\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the tag.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false    \n\n\n  /statuses:\n    get:\n      tags:\n        - Misc\n      summary: Get a list of workflow statuses.\n      description: \u003e \n        Get a list of the workflow statuses/stages used in the account. This can be used when changing the workflow stage of an idea. \n      operationId: GetStatuses\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/StatusList'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n   \n  /statuses/{id}:\n    get:\n      tags:\n        - Misc\n      summary: Get a workflow status.\n      description: \u003e\n        Get the details of an individual workflow status.\n      operationId: GetStatus\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the workflow status.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/Status'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          description: Status not found.\n\n  /search:\n    get:\n      tags:\n      - Misc\n      summary: Search across ideas, products, personas and feedback.\n      description: \u003e\n        Search across ideas, products, personas and feedback for the specific query. \n      operationId: GetSearch\n      parameters:\n        - name: q\n          in: query\n          description: Query to search for.\n          required: true\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: snow gum      \n        - name: page\n          in: query\n          description: Page of results.\n          required: false\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Number of entries per page of results.\n          required: false\n          schema:\n            type: integer\n        - name: type\n          in: query\n          required: false\n          description: Limit the search results to ideas, products, personas or feedback. Default is all.\n          schema:\n            type: string\n            enum: [ideas,products,personas,feedback]\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResults'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n      deprecated: false\n\n  /users:\n    get:\n      tags:\n        - Misc\n      summary: Get a list of users.\n      description: \u003e\n        This endpoint returns a list of users with roles in the account. \n      operationId: GetUsers\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserList'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n    post:\n      tags:\n        - Misc\n      summary: Create a new user.\n      description: \u003e\n        Creates a new user with the specified role in the account. If the account doesn't have spare slots for editors or admins then the user will be created as a reviewer.\n      operationId: PostUsers\n      requestBody:\n        description: User details.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserPost'\n        required: true\n      responses:\n        '201':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/Malformed'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n\n  /user/{id}:\n    get:\n      tags:\n        - Misc\n      summary: Get a user.\n      description: \u003e\n        Return the details on the user and their role.\n      operationId: GetUser\n      parameters:\n        - name: id\n          in: path\n          description: Numeric ID of the user.\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/NotAuthenticated'\n        '403':\n          $ref: '#/components/responses/Forbidden'    \n        '404':\n          description: User not found.\n\n\ncomponents:\n  responses:\n    NotAuthenticated:\n      description: The call was not authenticated.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_4XX'\n    Forbidden:\n      description: The API or account doesn't have permissions for that operation.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_4XX'\n    Malformed:\n      description: The API call was not correct.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error_4XX'\n  schemas:\n    UserLink:\n      type: object\n      description: User link information.\n      nullable: true\n      properties:\n        id:\n          type: integer\n          description: Numeric ID of the user.\n        username:\n          type: string\n          description: User name of the user.\n        display_name:\n          type: string\n          description: Name of the user that can be shown in an UI.\n      example:\n        id: 74702\n        username: sam897\n        display_name: Dot Dotty\n    Tag:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the tag.\n        tag:\n          type: string\n          description: Tag name.\n        created_at:\n          type: string\n          format: date-time\n          description: When the tag was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the tag was last updated.\n    TagList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tag'\n    TagLink:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the tag.\n        tag:\n          type: string\n          description: Tag name.\n        added:\n          type: string\n          format: date-time\n          description: Date time when the tag was added to the object.\n    StatusLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the status.\n        status:\n          type: string\n          description: Status name.\n    Status:\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: integer\n          description: ID of the status.\n        status:\n          type: string\n          description: The status name.\n        state:\n          type: string\n          description: Whether the status is active or archived.\n        created_at:\n          type: string\n          format: date-time\n          description: When the status was added.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the status was updated.\n    StatusListing:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the status.\n        status:\n          type: string\n          description: The status name.\n        created_at:\n          type: string\n          format: date-time\n          description: When the status was added.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the status was updated.\n    StatusList:\n      type: array\n      items:\n        $ref: '#/components/schemas/StatusListing'\n    AccountLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the account.\n        slug:\n          type: string\n          description: Slug for the account (not used).\n        name:\n          type: string\n          description: The name of the account.\n    IdeaLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the idea.\n    IdeaLinkWithAdded:\n      allOf:\n        - $ref: '#/components/schemas/IdeaLink'\n        - type: object\n          properties:\n            added:\n              type: string\n              format: date-time\n              description: When the idea was associated to the object.\n    PersonaLink:\n      type: object\n      properties:\n        id: \n          type: integer\n          description: ID of the persona.\n        persona:\n          type: string\n          description: name of the persona.\n        added:\n          type: string\n          format: date-time\n          description: When the presona was linked to the object.\n    ProductLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the product.\n        product:\n          type: string\n          description: Name of the product.\n        added:\n          type: string\n          format: date-time\n          description: When the product was linked to the other object\n    Attachment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the file attachment.\n        name:\n          type: string\n          description: Name of the file attachment.\n        url:\n          type: string\n          description: Url to the file attachment.\n        added:\n          type: string\n          format: date-time\n          description: When the attachment was added to another object.\n    ExternalLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the external link.\n        name:\n          type: string\n          description: Name of the external link.\n        url:\n          type: string\n          description: The URL of the external link.\n        external_id:\n          type: string\n          description: An ID from another 3rd party application\n        added:\n          type: string\n          format: date-time\n          description: When the external link was added to another object.\n    CompanyLink:\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: UUID of the company.\n        name:\n          type: string\n          description: Name of the company.\n        city:\n          type: string\n          description: City the company is in.\n        country:\n          type: string\n          description: The ISO Alpha-2 country code.\n        size:\n          type: string\n          enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n          description: The relative size of the company.\n        value:\n          type: string\n          enum: [high, medium, low]\n          description: The value of the company as a client.\n        image:\n          type: string\n          description: URL to the company logo.\n        created_at:\n          type: string\n          format: date-time\n          description: When when the company was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When when the company details were last updated.\n    ContactLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: ID of the contact.\n        name:\n          type: string\n          description: Name of the contact.\n        email:\n          type: string\n          description: Email of the contact.\n        about:\n          type: string\n          description: Details about the contact.\n        company:\n          $ref: '#/components/schemas/CompanyLink'\n        job_role:\n          $ref: '#/components/schemas/JobRoleLink'\n        created_at:\n          type: string\n          format: date-time\n          description: When the contact was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the contact was last updated.\n      example:\n        id: 180807\n        name: biggles\n        email: example@example.com\n        about: An example contact.\n        company: ''\n        job_role: ''\n        created_at: 2018-08-28 16:18:06\n        updated_at: 2018-08-28 16:18:29 \n    UserStory:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the user story.\n        title:\n          type: string\n          description: Title of the user story.\n        story:\n          type: string\n          description: The details of the user story. This field can contain HTML markup and UTF-8 character codes.\n        acceptance_criteria:\n          type: string\n          description: The acceptance criteria that indicate the user story has been achieved. This field can contain HTML markup and UTF-8 character codes.\n        created_at:\n          type: string\n          format: date-time\n          description: When the user story was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the user story was last updated.\n    UserStoryWithIdea:\n      allOf:\n        - $ref: '#/components/schemas/UserStory'\n        - type: object\n          properties:\n            ideas:\n              $ref: '#/components/schemas/IdeaLink'\n    UserStories:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserStory'\n    UserStoryList:\n      type: array\n      items:\n        $ref: '#/components/schemas/UserStoryWithIdea'\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the comment.\n        comment:\n          type: string\n          description: The comment. This field can contain HTML markup and UTF-8 character codes.\n        created_by:\n          $ref: '#/components/schemas/UserLink'\n        created_at:\n          type: string\n          format: date-time\n          description: When the comment was created.\n        replies:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n          description: Replies to the original comment.\n    CommentWithDesign:\n      allOf:\n        - $ref: '#/components/schemas/Comment'\n        - type: object\n          properties:\n            mockup:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  description: ID of the mockup.\n                name:\n                  type: string\n                  description: Name of the mockup.\n    CommentWithThought:\n      allOf:\n        - $ref: '#/components/schemas/Comment'\n        - type: object\n          properties:\n            vote:\n              type: object\n              properties:\n                id: \n                  type: string\n                  description: ID of the thought.\n                vote:\n                  type: string\n                  enum: [yea, nay, maybe]\n                  description: The thought associated to the comment.\n                added_at:\n                  type: string\n                  format: date-time\n                  description: When the vote was added.\n    CommentList:\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/Comment'\n          - $ref: '#/components/schemas/CommentWithThought'\n          - $ref: '#/components/schemas/CommentWithDesign'\n    RoadmapCard:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the Roamdap card.\n        title:\n          type: string\n          description: Title of the roadmap card.\n        description:\n          type: string\n          description: Roadmap card description. This field can contain HTML markup and UTF-8 character codes.\n        column:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: ID of the column.\n            title:\n              type: string\n              description: Title of the roadmap column.\n            column_number:\n              type: string\n              description: Number of the column on the roadmap.\n        roadmap:\n          type: object\n          properties:\n            id:\n              type: string\n              description: ID of the roadmap.\n    Thought:\n      type: object\n      description: Quick yay, nay or maybe on an idea.\n      properties:\n        id:\n          type: integer\n          description: ID of the thought.\n        voter:\n          $ref: '#/components/schemas/UserLink'\n        comments: \n          type: object\n          description: Comment\n          properties:\n            id: \n              type: integer\n              description: ID of the comment associated to the thought.\n            comment:\n              type: string\n              description: The comment with the though. This field can contain HTML markup and UTF-8 character codes.\n        created_at:\n          type: string\n          format: date-time\n          description: When the thought was added.\n    ThoughtWithIdea:\n      allOf:\n        - $ref: '#/components/schemas/Thought'\n        - type: object\n          required:\n            - ideas\n          description: ''\n          properties:\n            ideas: \n              $ref: '#/components/schemas/IdeaLink'\n    ThoughtList:\n      type: object\n      description: List of all thoughts made in an account.\n      properties:\n        total_votes:\n          type: string\n          description: Total number of votes.\n        yea:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThoughtWithIdea'\n          description: All the users who indicated yea on the idea.\n        nay:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThoughtWithIdea'\n          description: All the users who indicated nay on the idea.\n        maybe:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThoughtWithIdea'\n          description: All the users who indicated maybe on the idea.   \n    IdeaThoughts:\n      type: object\n      description: List of thoughts on an idea.\n      properties:\n        yea:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thought'\n          description: All the users who indicated yea on the idea.\n        nay:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thought'\n          description: All the users who indicated nay on the idea.\n        maybe:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thought'\n          description: All the users who indicated maybe on the idea.    \n    DesignVersion:\n      type: object\n      description: Previous version of a design.\n      properties:\n        id:\n          type: integer\n          description: ID of the design version.\n        name:\n          type: string\n          description: Name of the design version.\n        version:\n          type: string\n          description: Version of the design.\n    Design:\n      type: object\n      description: A design or mockup.\n      properties:\n        id:\n          type: integer\n          description: ID of the design.\n        name:\n          type: string\n          description: Name of the design.\n        previous_versions:\n          type: array\n          items:\n            $ref: '#/components/schemas/DesignVersion'\n          description: List of previous versions of the design.\n    File:\n      type: object\n      description: A file.\n      properties:\n        id:\n          type: integer\n          description: ID of the file.\n        name:\n          type: string\n          description: Name of the file.\n    JobRole:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: UUID of the job role.\n        name:\n          type: string\n          description: Name of the job role.\n        created_at:\n          type: string\n          format: date-time\n          description: When the job role was added.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the job role was last updated.\n    JobRoleList:\n      type: array\n      items:\n        $ref: '#/components/schemas/JobRole'\n    JobRoleLink:\n      type: object\n      nullable: true\n      properties:\n        id: \n          type: string\n          format: uuid\n          description: UUID of the job role.\n        name:\n          type: string\n          description: Name of job role.\n    Objective:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: UUID of objective.\n        name:\n          type: string\n          description: Objective name.\n        state:\n          type: string\n          description: Whether the objective is active or archived.\n        product:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: The ID of the product the objective belongs too.\n        created_at:\n          type: string\n          format: date-time\n          description: When the objective was added.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the objective was last updated.\n    ObjectiveLink:\n      type: object\n      nullable: true\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: UUID of objective.\n        name:\n          type: string\n          description: Name of objective.\n        state:\n          type: string\n          description: State of objective (active or archived).\n        added:\n          type: string\n          format: date-time\n          description: When the objective was linked.\n    ObjectiveIdLink:\n      type: object\n      properties:\n        id: \n          type: string\n          format: uuid\n          description: The UUID of the objective.\n    ObjectiveList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Objective'\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of user.\n        username:\n          type: string\n          description: Username of user. (depreciated and not used)\n        display_name:\n          type: string\n          description: Displayable name for the user.\n        email:\n          type: string\n          description: Email of user.\n        role_id:\n          type: string\n          description: Role ID.\n        role_type:\n          type: string\n          enum: [admin, editor, reviewer]\n          description: The role type of the user.\n        image: \n          type: object\n          nullable: true\n          properties:\n            original:\n              type: string\n              format: uri\n              description: URL to user image.\n    UserList:\n      type: array\n      items:\n        $ref: '#/components/schemas/User'\n    FeedbackLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Feedback id.\n        feedback:\n          type: string\n          description: The feedback. This field can contain HTML markup and UTF-8 character codes.\n        source:\n          type: string\n          description: The source or channel that the feedback was received by.\n        state:\n          type: string\n          enum: [unsorted, active, archived]\n          description: Whether the feedback is unsorted, active or archived.\n        created_at:\n          type: string\n          format: date-time\n          description: When the feedback was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the feedback was last updated.\n    Feedback:\n      type: object\n      properties: \n        id:\n          type: integer\n          description: Feedback id.\n        feedback:\n          type: string\n          description: The feedback. This field can contain HTML markup and UTF-8 character codes.\n        source:\n          type: string\n          enum: [api,email,conference,in_person_conversation,sales_team,social_media,telephone_conversation,user_test,website_contact_form,customer_feedback_portal,customer_feedback_widget]\n          description: The source or channel that the feedback was received through.\n        created_at:\n          type: string\n          format: date-time\n          description: When the feedback was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the feedback was last updated.\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagLink'\n          description: List of associated tags.\n        ideas:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdeaLinkWithAdded'\n          description: List of associated ideas.\n        products:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProductLink'\n          description: List of associated products.\n        personas:\n          type: array\n          items:\n            $ref: '#/components/schemas/PersonaLink'\n          description: List of associated personas.\n        attachments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Attachment'\n          description: List of attachments.\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalLink'\n          description: List of external links.\n    FeedbackListing:\n      allOf:\n        - $ref: '#/components/schemas/Feedback'\n        - type: object\n          properties:\n            state:\n              type: string\n              enum: [unsorted, active, archived]\n              description: State of the feedback\n            customer:\n              $ref: '#/components/schemas/ContactLink'\n            added_by:\n              $ref: '#/components/schemas/UserLink'\n    ContactLinkWithFeedback:\n      allOf:\n        - $ref: '#/components/schemas/ContactLink'\n        - type: object\n          properties:\n            feedbacks:\n              type: array\n              items:\n                $ref: '#/components/schemas/Feedback'\n    ContactIdPostLink:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the contact\n    FeedbackList:\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/ContactLinkWithFeedback'\n          - $ref: '#/components/schemas/FeedbackListing'\n      description: List of feedback.\n    FeedbackAttachment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Numeric id of the file attachment.\n        file_id:\n          type: string\n          format: uuid\n          description: UUID of the file attachment.\n        url:\n          type: string\n          format: uri\n          description: URL to the file.\n        filename:\n          type: string\n          description: Name of the file attachment.\n        extension:\n          type: string\n          description: The file attachment extension.\n        created_at:\n          type: string\n          format: date-time\n          description: When the attachment was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the attachment was last updated.\n    Idea:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Data store ID of the idea.\n        project_id:\n          type: string\n          description: The displayed ID for the idea in the UI.\n        account:\n          $ref: '#/components/schemas/AccountLink'\n        web_url:\n          type: string\n          format: uri\n          description: The URL to the idea in the ProdPad UI. Useful for providing a link to the original source in other applications. \n        impact:\n          type: string\n          description: The raw impact value.\n          minimum: 0\n          maximum: 11\n        impact_scaled:\n          type: string\n          description: The impact value in the scale.\n          nullable: true\n        effort:\n          type: string\n          description: the raw effort value.\n          minimum: 0\n          maximum: 11\n        effort_scaled:\n          type: string\n          description: The effort value in the scale.\n          nullable: true\n        popularity: \n          type: integer\n          description: The raw popularity value.\n          minimum: 0\n          maximum: 11\n        engagement: \n          type: integer\n          description: The raw engagement value.\n          minimum: 0\n          maximum: 11\n        created_at:\n          type: string\n          format: date-time\n          description: When the idea was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the idea was last updated.\n        title:\n          type: string\n          description: Title for the idea.\n        description:\n          type: string\n          description: The details of the idea. This field can contain HTML markup and UTF-8 character codes.\n        state:\n          type: string\n          description: State of the idea.\n        creator:\n          $ref: '#/components/schemas/UserLink'\n    IdeaExpanded:\n      allOf:\n        - $ref: '#/components/schemas/Idea'\n        - type: object\n          properties:\n            business_case:\n              type: object\n              properties:\n                problem:\n                  type: string\n                  description: What problem is this idea solving. This field can contain HTML markup and UTF-8 character codes.\n                value:\n                  type: string\n                  description: What is the value of solving this problem. This field can contain HTML markup and UTF-8 character codes.\n            functional_spec:\n              type: string\n              description: The functional specs for this idea. It is a free text field. This field can contain HTML markup and UTF-8 character codes.\n            notes:\n              type: string\n              description: Notes on the idea. It is a free text field. This field can contain HTML markup and UTF-8 character codes.\n            status:\n              $ref: '#/components/schemas/Status'\n            owner:\n              $ref: '#/components/schemas/UserLink'\n            author:\n              $ref: '#/components/schemas/UserLink'\n            tags:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagLink'\n              description: List of associated tags.\n            products:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProductLink'\n              description: List of associated products.\n            personas:\n              type: array\n              items:\n                $ref: '#/components/schemas/PersonaLink'\n              description: List of associated personas.\n            comments:\n              type: array\n              items:\n                $ref: '#/components/schemas/Comment'\n              description: List of comments made on the idea.\n            userstories:\n              type: array\n              items:\n                $ref: '#/components/schemas/UserStory'\n              description: List of associated user stories.\n            external_links:\n              type: array\n              items:\n                $ref: '#/components/schemas/ExternalLink'\n              description: List of associated external links.\n            roadmap_cards:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoadmapCard'\n              description: List of roadmap cards the idea is associated to.\n            votes:\n              $ref: '#/components/schemas/IdeaThoughts'\n            mockups:\n              type: array\n              items:\n                $ref: '#/components/schemas/Design'\n              description: List of all the associated mockups and designs.\n            files:\n              type: array\n              items:\n                $ref: '#/components/schemas/File'\n              description: List of files associated to the idea.\n    IdeaList:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: Whether the call worked or not.\n          default: true\n        idea_count:\n          type: integer\n          description: The number of ideas that match the filters.\n        page:\n          type: integer\n          description: Page number of the results.\n        size: \n          type: integer\n          description: The number of results per page.\n        ideas:\n          type: array\n          items:\n            $ref: '#/components/schemas/Idea'\n    RelatedIdeas:\n      type: object\n      properties:\n        related:\n          type: array\n          items:\n            $ref: '#/components/schemas/Idea'\n        duplicate:\n          type: array\n          items:\n            $ref: '#/components/schemas/Idea'\n    Contact:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the contact.\n        name:\n          type: string\n          description: Name of the contact.\n        email:\n          type: string\n          description: Email of the contact.\n        about:\n          type: string\n          description: Details about the contact. This field can contain HTML markup and UTF-8 character codes.\n          nullable: true\n        phone:\n          type: string\n          description: Contact's phone number.\n          nullable: true\n        twitter_url:\n          type: string\n          description: Contact's twitter handle.\n          nullable: true\n        image:\n          type: object\n          properties:\n            original:\n              type: string\n              description: URL to the original image of contact.\n            large:\n              type: string\n              description: Resized image of the contact.\n          description: Photo or image of contact\n          nullable: true\n        job_role:\n          $ref: '#/components/schemas/JobRoleLink'\n        company:\n          $ref: '#/components/schemas/CompanyLink'\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagLink'\n        personas:\n          type: array\n          items:\n            $ref: '#/components/schemas/PersonaLink'\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalLink'\n        created_at:\n          type: string\n          format: date-time\n          description: When the contact was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the contact was last updated\n    ContactWithFeedback:\n      allOf:\n        - $ref: '#/components/schemas/Contact'\n        - type: object\n          required:\n            - feedbacks\n          properties:\n            feedbacks:\n              type: array\n              items:\n                $ref: '#/components/schemas/FeedbackLink'\n    ContactList:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: Whether the fetch worked.\n        contact_count:\n          type: string\n          description: Number of contacts found.\n        page:\n          type: integer\n          description: Which page of results.\n        size:\n          type: integer\n          description: Number of results on each page.\n        filters:\n          type: object\n          properties:\n            tags:\n              type: string\n              description: Comma separate list of tags filtered on.\n              nullable: true\n            persona:\n              type: string\n              description: Comma separated list of personas filtered on.\n              nullable: true\n            company:\n              type: string\n              description: ID of the company filtered on.\n              nullable: true\n            job_role:\n              type: string\n              description: ID of the job role filtered on.\n              nullable: true\n        includes:\n          type: object\n          properties:\n            feedbacks:\n              type: boolean\n              description: Whether to return the feedbacks for each contact.\n              default: false\n            numeric_id:\n              type: boolean\n              description: Depreciated\n              default: false\n        contacts:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/Contact'\n              - $ref: '#/components/schemas/ContactWithFeedback'\n    CompanyContact:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the contact.\n        name:\n          type: string\n          description: Name of the contact.\n        email:\n          type: string\n          description: Email of the contact.\n        about:\n          type: string\n          description: Details about the contact. This field can contain HTML markup and UTF-8 character codes.\n        phone:\n          type: string\n          description: Contact's phone number.\n        twitter_url:\n          type: string\n          description: Contact's twitter handle\n        image:\n          type: object\n          properties:\n            original:\n              type: string\n              description: URL to the original image of contact.\n            large:\n              type: string\n              description: Resized image of the contact.\n          description: Photo or image of contact.\n        created_at:\n          type: string\n          format: date-time\n          description: When the contact was added to the account.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the contact was last updated.\n    CompanyContactWithFeedback:\n      allOf:\n        - $ref: '#/components/schemas/CompanyContact'\n        - type: object\n          required:\n            - feedbacks\n          properties:\n            feedbacks:\n              type: array\n              items:\n                $ref: '#/components/schemas/FeedbackLink'\n    Company:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: UUID of the company.\n        name:\n          type: string\n          description: Name of the company.\n        city:\n          type: string\n          description: The city of the company.\n          nullable: true \n        country:\n          type: string\n          description: ISO Alpha-2 two letter country code.\n          nullable: true\n        size:\n          type: string\n          enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n          description: The number of employees.\n          nullable: true\n        value:\n          type: string\n          enum: [high, medium, low]\n          description: The value of the company.\n          nullable: true\n        image:\n          type: string\n          format: uri\n          description: The URL to the logo/image that represents the company in the UI.\n          nullable: true\n        tags: \n          type: array\n          items:\n            $ref: '#/components/schemas/TagLink'\n        external_links: \n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalLink'\n        created_at:\n          type: string\n          format: date-time\n          description: When the company was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the company details were last updated.\n    CompanyWithContacts:\n      allOf:\n        - $ref: '#/components/schemas/Company'\n        - type: object\n          required:\n           - contacts\n          properties:\n            contacts:\n              type: array\n              items: \n                $ref: '#/components/schemas/CompanyContact'\n    CompanyWithContactsFeedback:\n      allOf:\n        - $ref: '#/components/schemas/Company'\n        - type: object\n          required:\n           - contacts\n          properties:\n            contacts:\n              type: array\n              items: \n                $ref: '#/components/schemas/CompanyContactWithFeedback'\n    CompanyList:\n      type: object\n      properties:\n        success:\n          type: string\n          description: Whether the API call worked.\n        company_count:\n          type: integer\n          description: Number of companies that match the filters.\n        page:\n          type: integer\n          description: Page number of results.\n        size:\n          type: integer\n          description: Number of items per page. Default is 100\n        filters:\n          type: object\n          properties:\n            tags: \n              type: string\n              description: Comma separate list of tags filtered on.\n              nullable: true\n            size: \n              type: string\n              enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n              description: the size of the company filtered on.\n              nullable: true\n            value:\n              type: string\n              enum: [high, medium, low]\n              description: the value of the company filtered on.\n              nullable: true\n            country: \n              type: string\n              description: ISO Alpha-2 two letter country code filtered on.\n              nullable: true\n            city: \n              type: string\n              description: City filtered on.\n              nullable: true\n        include:\n          type: object\n          properties:\n            feedbacks: \n              type: boolean\n              default: false\n              description: Whether the feedback associated to the company via the contacts associated to the company are included in the results.\n            contacts:\n              type: boolean\n              default: false\n              description: Whether the company contacts are included in the results.\n        companies:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/Company'\n              - $ref: '#/components/schemas/CompanyWithContacts'\n              - $ref: '#/components/schemas/CompanyWithContactsFeedback'\n    IdeaLinkPipeline:\n      type: object\n      properties:\n        id: \n          type: string\n          description: ID of idea.\n        title:\n          type: string\n          description: Title of the idea.\n        description:\n          type: string\n          description: Description of the idea. This field can contain HTML markup and UTF-8 character codes.\n        state:\n          type: string\n          description: State of the idea.\n        status:\n          $ref: '#/components/schemas/StatusLink'\n        added:\n          type: string\n          format: date-time\n          description: When the idea was added to roadmap card.\n        order:\n          type: integer\n          description: Order of idea on the card.\n    SpecLinkPipeline:\n      type: object\n      properties: \n        id:\n          type: string\n          description: ID of the user story.\n        story:\n          type: string\n          description: The user story. This field can contain HTML markup and UTF-8 character codes.\n        acceptance_critiera:\n          type: string\n          description: Acceptance criteria for the story. This field can contain HTML markup and UTF-8 character codes.\n        added:\n          type: string\n          format: date-time\n          description: When the user story was added to the roadmap card.\n        order:\n          type: integer\n          description: Order of the user story on the card.\n    RoadmapCardColumn:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of roadmap card.\n        numeric_product_id:\n          type: string\n          description: ID of product.\n        title:\n          type: string\n          description: Title of roadmap card.\n        description:\n          type: string\n          description: Description of roadmap card. This field can contain HTML markup and UTF-8 character codes.\n        public:\n          type: string\n          description: Whether the roadmap card is visible on embedded roadmaps.\n        position:\n          type: string\n          description: Position in the roadmap colum. 0 is top.\n        effort:\n          type: integer\n          description: Raw effort score.\n          minimum: 0\n          maximum: 11          \n        effort_scaled:\n          type: string\n          description: Effort value on the scale.\n          nullable: true\n        impact:\n          type: integer\n          description: Raw impact score.\n          minimum: 0\n          maximum: 11          \n        impact_scaled:\n          type: string\n          description: Impact value on the scale.\n          nullable: true\n        status:\n          type: string\n          description: Current status.\n        status_raw:\n          type: integer\n          description: Raw status value.\n        state:\n          type: string\n          description: Current state of roadmap card.\n        state_raw:\n          type: integer\n          description: Raw state value.\n        created_at:\n          type: string\n          format: date-time\n          description: When the card was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the card was last updated.\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagLink'\n        objectives:\n          type: array\n          items:\n            $ref: '#/components/schemas/ObjectiveLink'\n        owners:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserLink'\n        pipeline:\n          type: object\n          properties:\n            ideas:\n              type: array\n              items:\n                $ref: '#/components/schemas/IdeaLinkPipeline'\n            specs:\n              type: array\n              items:\n                $ref: '#/components/schemas/SpecLinkPipeline'\n    RoadmapColumn:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the roadmap column.\n        title:\n          type: string\n          description: Column title.\n        cards:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoadmapCardColumn'\n        column_number:\n          type: integer\n          description: Column position on the roadmap.\n        products:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: Product ID.\n        created_at:\n          type: string\n          format: date-time\n          description: When the column was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the column details were last updated.\n    Roadmap:\n      type: array\n      items:\n        $ref: '#/components/schemas/RoadmapColumn'\n    RoadmapLink:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of roadmap.\n        name:\n          type: string\n          description: Name of roadmap.\n        products:\n          type: object\n          properties:\n            id: \n              type: integer\n              description: ID of the associated product.\n        created_at:\n          type: string\n          format: date-time\n          description: When the roadmap was created.\n    ProductlineLink:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of productline.\n        name:\n          type: string\n          description: Name of productline.\n        roadmaps:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoadmapLink'\n        created_at:\n          type: string\n          description: When the product line was created.\n    RoadmapList:\n      type: object\n      properties:\n        roadmap_count:\n          type: integer\n          description: Number of roadmaps.\n        productline_roadmaps:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProductlineLink'\n        roadmaps:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoadmapLink'\n    Product:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of product.\n        name:\n          type: string\n          description: Name of product.\n        description:\n          type: string\n          description: Description of the product. This field can contain HTML markup and UTF-8 character codes.\n        vision:\n          type: string\n          description: Vision for the product. This field can contain HTML markup and UTF-8 character codes.\n        kpis:\n          type: string\n          description: KPIs for the product. This field can contain HTML markup and UTF-8 character codes.\n        value:\n          type: string\n          description: Value of the product to end users and the business. This field can contain HTML markup and UTF-8 character codes.\n        documentation:\n          type: string\n          description: Documentation related to the product. This field can contain HTML markup and UTF-8 character codes.\n        image:\n          type: object\n          nullable: true\n          properties:\n            original: \n              type: string\n              format: uri\n              description: URL of the product image.\n        roadmaps:\n          type: object\n          properties:\n            id:\n              type: string\n              description: ID of the product roadmap.\n        created_at:\n          type: string\n          format: date-time\n          description: When the product was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the product details were last updatd.\n    ProductListing:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Numeric product ID.\n        product_id:\n          type: string\n          format: uuid\n          description: UUID of the product.\n        name:\n          type: string\n          description: Name of the product.\n        description:\n          type: string\n          description: Description of the product. This field can contain HTML markup and UTF-8 character codes.\n        image:\n          type: object\n          nullable: true\n          properties:\n            original:\n              type: string\n              format: uri\n              description: URL of the product image.\n        roadmaps:\n          type: object\n          properties:\n            id: \n              type: integer\n              description: ID of the product roadmap.\n        productlines:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: ID of productline a product is in.\n            name:\n              type: string\n              description: Name of product line.\n            order:\n              type: string\n              description: Order of the product in the product line.\n        order:\n          type: string\n          description: Order of product in portfolio .\n        created_at:\n          type: string\n          format: date-time\n          description: When the product was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the product details were last updated.\n    ProductList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ProductListing'\n    Productline:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the product line.\n        name:\n          type: string\n          description: Name of the product line.\n        created_at:\n          type: string\n          format: date-time\n          description: When the product line was created.\n        products:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProductListing'\n    ProductListGroup:\n      type: object\n      properties:\n        productlines:\n          type: array\n          items:\n            $ref: '#/components/schemas/Productline'\n        products:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProductListing'\n        product_count:\n          type: string\n          description: Count of products.\n    Persona:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the persona.\n        persona_id:\n          type: string\n          format: uuid\n          description: UUID of the persona.\n        name:\n          type: string\n          description: Persona name.\n        description:\n          type: string\n          description: Description of the persona. This field can contain HTML markup and UTF-8 character codes.\n        image:\n          type: object\n          nullable: true\n          properties:\n            original:\n              type: string\n              format: uri\n              description: URL to persona image.\n        created_at:\n          type: string\n          description: When the persona was created.\n        updated_at:\n          type: string\n          description: When the persona details were last updated.\n        behaviours:\n          type: string\n          description: Key behaviours of the persona. This field can contain HTML markup and UTF-8 character codes.\n        goals:\n          type: string\n          description: Key goals of the persona. This field can contain HTML markup and UTF-8 character codes.\n        constraints:\n          type: string\n          description: Key constraints of the persona. This field can contain HTML markup and UTF-8 character codes.\n    PersonaListing:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the persona.\n        persona_id:\n          type: string\n          format: uuid\n          description: UUID of the persona.\n        name:\n          type: string\n          description: Persona name.\n        description:\n          type: string\n          description: Description of the persona. This field can contain HTML markup and UTF-8 character codes.\n        image:\n          type: object\n          nullable: true\n          properties:\n            original:\n              type: string\n              format: uri\n              description: URL of the persona image.\n        created_at:\n          type: string\n          format: date-time\n          description: When the persona was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: When the persona details were last updated.\n    PersonaList:\n      type: array\n      items:\n        $ref: '#/components/schemas/PersonaListing'\n    SearchIdea:\n      type: object\n      description: Search idea\n      properties:\n        id:\n          type: integer\n          description: ID of the idea.\n        project_id:\n          type: integer\n          description: The displayed ID of the idea.\n        title:\n          type: string\n          description: Title of the idea.\n        summary:\n          type: string\n          description: The description of the idea. This field can contain HTML markup and UTF-8 character codes.\n    SearchProduct:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the product.\n        name:\n          type: string\n          description: Name of the product.\n    SearchPersona:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the persona.\n        name:\n          type: string\n          description: Name of the persona.\n    SearchFeedback:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the feedback.\n        feedback:\n          type: string\n          description: The feedback. This field can contain HTML markup and UTF-8 character codes.\n        customer:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: The contact ID.\n            name:\n              type: string\n              description: The contact Name.\n    SearchResults:\n      type: object\n      properties:\n        query:\n          type: string\n          description: The query that was searched on.\n        filter:\n          type: object\n          description: The filters applied.\n        page:\n          type: integer\n          description: The page number of results.\n        size:\n          type: integer\n          description: The number of results per page.\n        ideas:\n          type: object\n          description: The list of ideas that match the query and filters.\n          properties:\n            count:\n              type: integer\n              description: Count of ideas that match the query and filters.\n            results:\n              description: An array of search ideas.\n              type: array\n              items:\n                $ref: '#/components/schemas/SearchIdea'\n        products:\n          type: object\n          description: The list of products that match the query and filters.\n          properties:\n            count:\n              type: integer\n              description: Count of products that match the query and filters.\n            results:\n              description: Searched product result.\n              type: array\n              items:\n                $ref: '#/components/schemas/SearchProduct'\n        personas:\n          type: object\n          description: The list of personas of that match the query and filters.\n          properties:\n            count:\n              type: integer\n              description: The count of personas that match the query and filters.\n            results:\n              description: Search persona result.\n              type: array\n              items:\n                $ref: '#/components/schemas/SearchPersona'\n        feedback:\n          type: object\n          description: The feedback that matches the query and filters.\n          properties:\n            count:\n              type: integer\n              description: The count of pieces of feedback that match the query and filters.\n            results:\n              description: Search feedback\n              type: array\n              items:\n                $ref: '#/components/schemas/SearchFeedback'\n    FeedbackPostLink:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: Numeric id of the feedback to link to an object when creating.\n    IdeaPostLink:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: Numeric id of the idea to link to an object when creating.\n    TagIdPostLink:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          description: Numeric id of the tag to link to an object when creating.\n    TagNamePostLink:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: Name of the tag to link to an object when creating.\n    ProductIdPostLink:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          description: Numeric ID of the product to link to an object when creating.\n    ProductNamePostLink:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: Name of the product to link to an object when creating. It must match exactly.\n    PersonaIdPostLink:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          description: Numeric ID of the persona to link to an object when creating.\n    PersonaNamePostLink:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: Name of the persona to link to an object when creating. It must match exactly.\n    ExternalUrlPost:\n      type: object\n      required:\n        - name\n        - url\n      properties:\n        name:\n          type: string\n          description: Name/title of the URL.\n        url:\n          type: string\n          format: uri\n          description: The URL of the external link.\n        external_id:\n          type: string\n          description: The ID for the object in a 3rd party application\n    ExternalUrlIdeaPost:\n      type: object\n      required:\n        - title\n        - url\n      properties:\n        title:\n          type: string\n          description: Name/title of the URL.\n        url:\n          type: string\n          format: uri\n          description: The URL of the external link.     \n    FeedbackPost:\n      type: object\n      description: \u003e\n        Fields to create a feedback. Note either the contact ID or contact name is required. Otherwise a 400 error will be returned. If a name and email field are used, the value in the email field will be used to see if the contact already exists and if it does the feedback will be automatically added to the existing contact.\n      required:\n        - feedback\n      properties: \n        contact_id:\n          type: string\n          format: uuid\n          description: ID of the contact providing the feedback. Either Contact ID or Contact name is required.\n        name: \n          type: string\n          description: Name of the contact providing the feedback. Either Contact ID or Contact name is required.\n        company_id:\n          type: string\n          format: uuid\n          description: UUID of the company to link the contact to. The UUID can be determined using /GET companies endpoint.\n        feedback: \n          type: string\n          description: The feedback. This field accepts HTML and is stored as UTF-8.\n        email: \n          type: string\n          description: The email of the contact. This is used to avoid duplication of contacts. This can be any unique ID for each contact. \n        about: \n          type: string\n          description: Text field about the contact. This will overright the existing about if the contact already exists. This field accepts HTML and is stored as UTF-8.\n        ideas:\n          description: Ihe one or more ideas  associated to the feedback.\n          type: array\n          items: \n              $ref: '#/components/schemas/IdeaPostLink'\n        tags: \n          description: The tags associated to the feedback. Mulitple tags can be specified and acts as an OR. Use the tag ID or UUID.\n          type: array\n          items: \n            anyOf:\n              - $ref: '#/components/schemas/TagIdPostLink'\n              - $ref: '#/components/schemas/TagNamePostLink'\n        personas: \n          description: The persona associated to feedback. Can either be the persona UUID or persona ID.\n          type: array\n          items: \n            anyOf:\n              - $ref: '#/components/schemas/PersonaIdPostLink'\n              - $ref: '#/components/schemas/PersonaNamePostLink'\n        products: \n          description: The product associated to feedback. Can either be the product UUID or product ID.\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/ProductIdPostLink'\n              - $ref: '#/components/schemas/ProductNamePostLink'\n        source: \n          type: string\n          description: The source from where the feedback was gathered. If none is supplied the default is API.\n          enum: [api,email,conference,in_person_conversation,sales_team,social_media,telephone_conversation,user_test,website_contact_form,customer_feedback_portal,customer_feedback_widget]\n        external_links: \n          description: The external url associated with the feedback. An example of an external url is that of a record in a CRM or a ticket in a customer support application\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalUrlPost'\n    ContactPost:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the contact.\n        email:\n          type: string\n          description: Can be email or other unique identifier. This is used to de-duplicate contacts.\n        about:\n          type: string\n          description: Details on the contact. This field accepts HTML and is stored as UTF-8.\n        phone:\n          type: string\n          description: Phone number of the contact.\n        twitter_url:\n          type: string\n          description: Twitter handle of the contact.\n        tags:\n          type: array\n          items: \n            anyOf:\n              - $ref: '#/components/schemas/TagIdPostLink'\n              - $ref: '#/components/schemas/TagNamePostLink'\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalUrlPost'\n        personas:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/PersonaIdPostLink'\n              - $ref: '#/components/schemas/PersonaNamePostLink'\n        company:\n          type: string\n          format: uuid\n          description: UUID of the company to link the contact to. The UUID can be determined using /GET companies endpoint. Only used in the creation of a new contact.\n        job_role:\n          type: string\n          format: uuid\n          description: The UUID of the job role. The UUID can be /GET job_roles endpoint\n    CompanyPost:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the company.\n        city:\n          type: string\n          description: City the company is located in or you want to tag with.\n        country:\n          type: string\n          description: ISO Alpha-2 two letter country code.\n        size:\n          type: string\n          enum: [1-10,11-50,50-250,250-500,500-1000,1000-5000,5000-10000,10000+]\n          description: The size of the company by employees \n        value:\n          type: string\n          enum: [high, medium, low]\n          description: The value of the company.\n        tags:\n          type: array\n          items: \n            anyOf:\n              - $ref: '#/components/schemas/TagIdPostLink'\n              - $ref: '#/components/schemas/TagNamePostLink'\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalUrlPost'\n        contacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactIdPostLink'\n    IdeaStoryPost:\n      type: object\n      properties:\n        story:\n          type: string\n          description: The main body of a user story. This field accepts HTML and is stored as UTF-8.\n        acceptance_criteria:\n          type: string\n          description: The acceptance criteria for passing tests. This field accepts HTML and is stored as UTF-8.\n    IdeaCommentPost:\n      type: object\n      properties:\n        comment:\n          type: string\n          description: The comment someone has made on the idea. This field accepts HTML and is stored as UTF-8.\n        user_id:\n          type: integer\n          description: Numeric ID of the user in ProdPad who is making the comment.\n    IdeaStatusChangePost:\n      type: object\n      properties:\n        idea_id:\n          type: integer\n          description: Numeric ID of the idea to change the status on.\n        user_id:\n          type: integer\n          description: Numeric ID of the user changing the workflow status of an idea.\n        status_id:\n          type: integer\n          description: Numeric ID of the status to change the idea to. Can be found using GET /statuses.\n    IdeaStatusChangeResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Numeric ID of the idea\n        statuses:\n          type: object\n          properties:\n            id:\n              type: integer\n              description: Numeric ID of the status.\n            added:\n              type: string\n              description: When the idea was switched to the workflow status.\n        comments:\n          type: object\n          description: Any comment added when changing the status.\n          properties:\n            id:\n              type: integer\n              description: ID of the comment.\n            comment:\n              type: string\n              description: The comment. This field may contain HTML and UTF-8 characters.\n            created_at:\n              type: string\n              format: date-time\n              description: When the comment was created.\n    IdeaPost:\n      type: object\n      properties:\n        title: \n          type: string\n          description: The title of the idea. Either the title or description is required.\n        description: \n          type: string\n          description: The description of the idea. This field accepts HTML and is stored as UTF-8.\n        creator: \n          type: integer\n          description: Numeric ID of a user that has a role in the account.\n        business_case: \n          type: object\n          properties:\n            problem:\n              type: string\n              description: The problem or hypothesis this idea is aiming to address. This field accepts HTML and is stored as UTF-8.\n            value:\n              type: string\n              description: The value of solving this problem or hypothesis to the user and the company. This field accepts HTML and is stored as UTF-8.\n        functional: \n          type: string\n          description: The functional specs of how this idea could be implemented. This field accepts HTML and is stored as UTF-8.\n        notes: \n          type: string\n          description: Free text field for notes on the idea. This field accepts HTML and is stored as UTF-8.\n        user_stories: \n          type: array\n          items:\n            $ref: '#/components/schemas/IdeaStoryPost'\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdeaCommentPost'\n        Feedbacks:\n          type: array\n          items:\n            $ref: '#/components/schemas/FeedbackPostLink'\n        products: \n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/ProductIdPostLink'\n              - $ref: '#/components/schemas/ProductNamePostLink'\n        personas:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/PersonaIdPostLink'\n              - $ref: '#/components/schemas/PersonaNamePostLink'\n        tags: \n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/TagIdPostLink'\n              - $ref: '#/components/schemas/TagNamePostLink'\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalUrlIdeaPost'\n        status: \n          type: object\n          properties:\n            id: \n              type: integer\n              description: ID of the workflow status. This can be retrieved from GET /statuses.\n        state: \n          type: string\n          enum: [active, active_public, archived, unsorted]\n          description: Set the state of the idea to active, archived or unsorted. \n    ObjectivePost:\n      type: object\n      properties: \n        name: \n          type: string\n          description: Name of the objective\n        state:\n          type: string\n          enum: [active, archived]\n          description: The state of the objective\n        product: \n         type: object\n         properties:\n          id: \n            type: integer\n            description: Numeric poduct ID to link the objective too.\n    RoadmapCardPost:\n      type: object\n      properties: \n        title:\n          type: string\n          description: The title of the roadmap card.\n        roadmap_id: \n          type: integer\n          description: Numeric roadmap ID.\n        column_id: \n          type: integer\n          description: Numeric column ID. This can be found using GET /roadmaps/{id}.\n        description: \n          type: string\n          description: The description of the problem(s) and/or hypothesis this card is about. This field accepts HTML and is stored as UTF-8.\n        tags: \n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/TagIdPostLink'\n              - $ref: '#/components/schemas/TagNamePostLink'\n        objectives: \n          type: array\n          items:\n            type: object\n            properties:\n              id: \n                type: string\n                format: uuid\n                description: UUID of the objective to link to the roadmap card.\n    RoadmapCardPostResponse:\n      allOf:\n        - $ref: '#/components/schemas/RoadmapCard'\n        - type: object\n          description: ''\n          properties:\n            account:\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: Account ID for the roadmap card.\n            product:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  description: ID of the product that the roadmap belongs to.\n            # column:\n            #   type: object\n            #   properties:\n            #     id: \n            #       type: string\n            #       description: ID of the roadmap column the card is on.\n            tags:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagLink'\n            ojectives:\n              type: array\n              items:\n                $ref: '#/components/schemas/ObjectiveIdLink'\n    ThoughtPost:\n      type: object\n      properties:\n        vote: \n          type: string\n          enum: [Yea, Nay, Maybe]\n          description: The thought type.\n        idea_id: \n          type: integer\n          description: Numeric ID of the idea to associate the vote too. This can be retrieved from GET /ideas\n        user_id: \n          type: integer\n          description: Numeric ID of the user with a role in the account who is making the thought. \n        comment:\n          type: string\n          description: Comment made when adding the thought. This field accepts HTML and is stored as UTF-8.\n    ThoughtPostResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Numeric ID of the thought\n        vote: \n          type: string\n          enum: [Yea, Nay, Maybe]\n          description: The thought type\n        ideas: \n          $ref: '#/components/schemas/IdeaLink'\n        comments: \n          type: object\n          properties:\n            id: \n              type: integer\n              description: ID of the comment associated to the thought.\n            ideas:\n              $ref: '#/components/schemas/IdeaLink'\n            comment:\n              type: string\n              description: The comment with the though. May include HTML and UTF-8 characters.\n            created_at:\n              type: string\n              format: date-time\n              description: When the comment was created.\n        created_at:\n          type: string\n          format: date-time\n          description: When the thought was created\n        updated_at:\n          type: string\n          format: date-time\n          description: When the thought was last updated.\n    UserPost:\n      type: object\n      properties: \n        email: \n          type: string\n          format: email\n          description: The email of the user.\n        role_type: \n          type: string\n          enum: [Admin, Editor, Reviewer]\n          description: Role of the user in the account.\n        name:\n          type: string\n          description: The name to display for the user in the UI.\n        timezone: \n          type: string\n          description: Timezone of the user using the format like Europe/London.\n    IdeaPut:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title of the idea.\n        description:\n          type: string\n          description: The description of the idea. This field accepts HTML and is stored as UTF-8.\n        business_case:\n          type: object\n          properties:\n            problem:\n              type: string\n              description: The problem or hypothesis this idea focuses on. This field accepts HTML and is stored as UTF-8.\n            value:\n              type: string\n              description: The value to user and company to address the problem. This field accepts HTML and is stored as UTF-8.\n        functional:\n          type: string\n          description: Functional specs for the idea. This field accepts HTML and is stored as UTF-8.\n        notes:\n          type: string\n          description: General notes on the idea. This field accepts HTML and is stored as UTF-8.\n        state:\n          type: string\n          enum: [active, active_public, archived, unsorted]\n          description: The state of the idea.\n    FeedbackPut:\n      type: object\n      properties:\n        feedback: \n          type: string\n          description: Update to the actual feedback. This field accepts HTML and is stored as UTF-8.\n        state:\n          type: string\n          enum: [active, archived, unsorted]\n          description: The state of the feedback.\n        external_links:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExternalUrlPost'\n    error_4XX:\n      type: object\n      properties:\n        success:\n          type: boolean\n          default: false\n        developer_message:\n          type: string\n          description: Error message for developers.\n        user_message:\n          type: string\n          description: Error message that can be displayed to users.\n          \n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n\nsecurity:\n- bearerAuth: []\n\ntags:\n- name: Misc\n  description: Miscellaneous endpoints.\n- name: Ideas\n  description: Endpoints for Ideas and associated items like user stories and comments.\n- name: Feedback\n  description: Endpoints for Feedback, Contacts and Companies.\n- name: Products\n  description: Endpoints for Products and Roadmaps.",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/prodpad/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/prodpad/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/RoadmapCardColumn\" name conflict: \"RoadmapCardColumn\"",
	"NotImplemented": [
		"complex anyOf"
	]
}