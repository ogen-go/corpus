{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apivideo/api.video-android-uploader"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 51990,
			"content": "openapi: 3.0.0\ninfo:\n  description: api.video is an API that encodes on the go to facilitate immediate\n    playback, enhancing viewer streaming experiences across multiple devices and platforms.\n    You can stream live or on-demand online videos within minutes.\n  title: api.video\n  version: \"1\"\nservers:\n- description: Production server\n  url: https://ws.api.video\n- description: Test server `all videos are watermarked, and deleted after 24 hours.\n  url: https://sandbox.api.video\npaths:\n  /auth/api-key:\n    post:\n      description: |-\n        To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.\n        All tutorials using the [authentication endpoint](https://api.video/blog/endpoints/authenticate)\n      operationId: POST_auth-api-key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/authenticate-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token_type: Bearer\n                    expires_in: 3600\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n              schema:\n                $ref: '#/components/schemas/access-token'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n                    title: The user credentials were incorrect.\n                    name: \"\"\n                    status: 400\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      summary: Authenticate\n      tags:\n      - Authentication\n      x-client-action: authenticate\n      x-client-hidden: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: node\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: php\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: python\n          code: |\n            #With the api.video API clients, authentication is taken care of with each client created.\n            # You get to skip this step!\n        - language: java\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: csharp\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: swift\n          code: |\n            // With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/refresh:\n    post:\n      description: \"Use the refresh endpoint with the refresh token you received when\\\n        \\ you first authenticated using the api-key endpoint. Send the refresh token\\\n        \\ in the body of your request. The api.video API returns a new access token\\\n        \\ that is valid for one hour (3600 seconds) and a new refresh token. \\n\"\n      operationId: POST_auth-refresh\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/refresh-token-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token_type: Bearer\n                    expires_in: 3600\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n              schema:\n                $ref: '#/components/schemas/access-token'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n                    title: The user credentials were incorrect.\n                    name: \"\"\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      summary: Refresh token\n      tags:\n      - Authentication\n      x-client-action: refresh\n      x-client-hidden: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: node\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: php\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: python\n          code: |\n            #With the api.video API clients, authentication is taken care of with each client created.\n            # You get to skip this step!\n        - language: java\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: csharp\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: swift\n          code: |\n            // With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n      x-contentType: application/json\n      x-accepts: application/json\n  /videos/{videoId}/source:\n    post:\n      description: \"To upload a video to the videoId you created. Replace {videoId}\\\n        \\ with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4\\\n        \\ with the path to the video you'd like to upload. You can only upload your\\\n        \\ video to the videoId once.\\nWe offer 2 types of upload: \\n* Regular upload\\\n        \\ \\n* Progressive upload\\nThe latter allows you to split a video source into\\\n        \\ X chunks and send those chunks independently (concurrently or sequentially).\\\n        \\ The 2 main goals for our users are to\\n  * allow the upload of video sources\\\n        \\ \u003e 200 MiB (200 MiB = the max. allowed file size for regular upload)\\n  *\\\n        \\ allow to send a video source \\\"progressively\\\", i.e., before before knowing\\\n        \\ the total size of the video.\\n  Once all chunks have been sent, they are\\\n        \\ reaggregated to one source file. The video source is considered as \\\"completely\\\n        \\ sent\\\" when the \\\"last\\\" chunk is sent (i.e., the chunk that \\\"completes\\\"\\\n        \\ the upload).\\n```bash\\ncurl https://ws.api.video/videos/{videoId}/source\\\n        \\ \\\\\\n  -H 'Authorization: Bearer {access_token}' \\\\\\n  -F file=@/path/to/video.mp4\\n\\\n        \\n  ```\\nTutorials using [video upload](https://api.video/blog/endpoints/video-upload).\"\n      operationId: POST_videos-videoId-source\n      parameters:\n      - description: Enter the videoId you want to use to upload your video.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: \"Content-Range can be used if you want to split your file. You\\\n          \\ can do this by parts, or by chunk.\\n* If you split your file by parts\\\n          \\ (recommended option), the `Content-Range` header value must match the\\\n          \\ following pattern: `part \u003cpart\u003e/\u003ctotal_parts\u003e`:\\n  * `\u003cpart\u003e` is a positive\\\n          \\ integer representing the part number. The first sequential part number\\\n          \\ is always 1.\\n  * `\u003ctotal_parts\u003e` is a positive integer representing the\\\n          \\ total parts of the video source. It can also be `*` if or as long as it\\\n          \\ is unknown. Technically, this value is required only one time and cannot\\\n          \\ differ in several requests.\\n* If you split your file by bytes, bear in\\\n          \\ mind byte ranges are inclusive, meaning that bytes 0-5242879 represents\\\n          \\ the first 5,242,880 bytes in a file or object. Also, the Content-Range\\\n          \\ header value must match the following pattern: `bytes \u003cfrom_byte\u003e-\u003cto_byte\u003e/\u003ctotal_bytes\u003e`:\\n\\\n          \\  * `\u003cfrom_byte\u003e` is a positive integer or 0. It represents the range start\\\n          \\ (aka lower bound), i.e., the first byte of the chunk compared to the total\\\n          \\ bytes composing the full video source. The first sequential range always\\\n          \\ starts at 0.\\n  * `\u003cto_byte\u003e` is a positive integer representing the range\\\n          \\ end (aka upper bound), i.e., the last byte of the chunk compared to the\\\n          \\ total bytes composing the full video source.\\n  * `\u003ctotal_bytes\u003e` is a\\\n          \\ positive integer representing the total bytes composing the full video\\\n          \\ source. It can also be `*` if or as long as it is unknown. Technically,\\\n          \\ this value is required only one time and cannot differ in several requests.\\n\\\n          * Ordering and chunk or part size\\n  * The order in which the chunks are\\\n          \\ received on our side does not matter. \\n    * Example: `part 3/*` then\\\n          \\ `part 2/*` then `part 1/3` works.\\n  * The chunks can be sent concurrently.\\\n          \\ We have a lock mechanism to ensure they are still technically processed\\\n          \\ one by one to ensure the \\\"completion\\\" check behaves as expected.\\n \\\n          \\ * The only chunk that can be smaller than our minimum allowed chunk size\\\n          \\ (5 MiB) is the last sequential one (i.e., the last sequential range for\\\n          \\ the \\\"byte-range\\\" system and the last part for the \\\"part\\\" system.\\n\\\n          \\    * For instance, if your video is 10.5 MiB big, your last chunk would\\\n          \\ be 500 KiB, and that would work. \\n    * Another example is if your video\\\n          \\ is 2 MiB big, then your first and last chunk will be 2MiB and that will\\\n          \\ work as well.\\n\"\n        example: bytes 209715200-419430399/524288000 OR part 2/3\n        explode: false\n        in: header\n        name: Content-Range\n        required: false\n        schema:\n          pattern: /(?:bytes (?\u003cfrom\u003e\\d+)-(?\u003cto\u003e\\d+)|part (?\u003cpart\u003e\\d+))\\/(?\u003ctotal\u003e\\d+|\\*)/\n          type: string\n        style: simple\n        x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/video-upload-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    title: Maths video\n                    description: An amazing video explaining the string theory.\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    playerId: pl45KFKdlddgk654dspkze\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/filealreadyuploaded\n                    title: The source of the video is already uploaded.\n                    name: file\n                    status: 400\n                    problems:\n                    - type: https://docs.api.video/docs/filealreadyuploaded\n                      title: The source of the video is already uploaded.\n                      name: file\n                    - type: https://docs.api.video/docs/filealreadyuploaded\n                      title: The video xxxx has already been uploaded.\n                      name: video\n                    - type: https://docs.api.video/docs/filemissing\n                      title: There is no uploaded file in the request.\n                      name: file\n                    - type: https://docs.api.video/docs/multiplefilesuploaded\n                      title: There is more than one uploaded file in the request.\n                      name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - apiKey: []\n      summary: Upload a video\n      tags:\n      - Videos\n      x-client-description:\n        default: \"To upload a video to the videoId you created. You can only upload\\\n          \\ your video to the videoId once.\\n\\nWe offer 2 types of upload: \\n* Regular\\\n          \\ upload \\n* Progressive upload\\nThe latter allows you to split a video\\\n          \\ source into X chunks and send those chunks independently (concurrently\\\n          \\ or sequentially). The 2 main goals for our users are to\\n  * allow the\\\n          \\ upload of video sources \u003e 200 MiB (200 MiB = the max. allowed file size\\\n          \\ for regular upload)\\n  * allow to send a video source \\\"progressively\\\"\\\n          , i.e., before before knowing the total size of the video.\\n  Once all chunks\\\n          \\ have been sent, they are reaggregated to one source file. The video source\\\n          \\ is considered as \\\"completely sent\\\" when the \\\"last\\\" chunk is sent (i.e.,\\\n          \\ the chunk that \\\"completes\\\" the upload).\\n\"\n      x-client-action: upload\n      x-client-chunk-upload: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"// First install the go client with \\\"go get github.com/apivideo/api.video-go-client\\\"\\\n            \\n// Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#upload\\n\\\n            \\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_KEY\\\").Build()\\n\\\n            \\    // if you rather like to use the sandbox environment:\\n    // client\\\n            \\ := apivideosdk.SandboxClientBuilder(\\\"YOUR_SANDBOX_API_KEY\\\").Build()\\n\\\n            \\n      videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" \\n    // string | Enter\\\n            \\ the videoId you want to use to upload your video.\\n      file := os.NewFile(1234,\\\n            \\ \\\"some_file\\\") \\n    // *os.File | The path to the video you would like\\\n            \\ to upload. The path must be local. If you want to use a video from an\\\n            \\ online source, you must use the \\\"/videos\\\" endpoint and add the \\\"\\\n            source\\\" parameter when you create a new video.\\n    \\n    \\n      res,\\\n            \\ err := client.Videos.UploadFile(videoId, file)\\n    \\n      // you can\\\n            \\ also use a Reader instead of a File:\\n      // client.Videos.Upload(videoId,\\\n            \\ fileName, fileReader, fileSize)\\n    \\n      if err != nil {\\n     \\\n            \\     fmt.Fprintf(os.Stderr, \\\"Error when calling `Videos.Upload``: %v\\\\\\\n            \\n\\\", err)\\n      }\\n      // response from `Upload`: Video\\n      fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.Upload`: %v\\\\\\n\\\", res)\\n    }\\n      }\\n\"\n        - language: node\n          code: \"// First install the \\\"@api.video/nodejs-client\\\" npm package\\n//\\\n            \\ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#upload\\n\\\n            \\nconst client = new ApiVideoClient({ apiKey: \\\"YOUR_API_KEY\\\" });\\n\\n\\\n            const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Enter the videoId you want\\\n            \\ to use to upload your video.\\nconst file = './my-video.mp4'; // The\\\n            \\ path to the video you would like to upload. The path must be local.\\\n            \\ If you want to use a video from an online source, you must use the \\\"\\\n            /videos\\\" endpoint and add the \\\"source\\\" parameter when you create a\\\n            \\ new video.\\n      \\nconst video = await client.videos.upload(videoId,\\\n            \\ file);\\n\\n// if needed you can define an upload progress listener:\\n\\\n            const video2 = await client.videos.upload(videoId, file, (event) =\u003e {\\n\\\n            \\  console.log(\\\"uploadedBytes: \\\" + event.uploadedBytes);\\n  console.log(\\\"\\\n            totalBytes: \\\" + event.totalBytes);\\n  console.log(\\\"chunksCount: \\\" +\\\n            \\ event.chunksCount);\\n  console.log(\\\"currentChunk: \\\" + event.currentChunk);\\n\\\n            \\  console.log(\\\"currentChunkTotalBytes: \\\" + event.currentChunkTotalBytes);\\n\\\n            \\  console.log(\\\"currentChunkUploadedBytes: \\\" + event.currentChunkUploadedBytes);\\n\\\n            });\"\n        - language: php\n          code: \"\u003c?php\\n// First install the api client: \\\"composer require api-video/php-api-client\\\"\\\n            \\n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#upload\\n\\\n            \\nrequire __DIR__ . '/vendor/autoload.php';\\n\\n$client = new \\\\ApiVideo\\\\\\\n            Client\\\\Client(\\n    'https://ws.api.video',\\n    'YOUR_API_KEY',\\n  \\\n            \\  new \\\\Symfony\\\\Component\\\\HttpClient\\\\Psr18Client()\\n);\\n\\n// create\\\n            \\ a new video \u0026 upload a video file\\n$myVideo = $client-\u003evideos()-\u003ecreate((new\\\n            \\ \\\\ApiVideo\\\\Client\\\\Model\\\\VideoCreationPayload())-\u003esetTitle('Uploaded\\\n            \\ video'));\\n$client-\u003evideos()-\u003eupload($myVideo-\u003egetVideoId(), new SplFileObject(__DIR__\\\n            \\ . '/558k.mp4'));\\n\\n// create a new video \u0026 upload a video file using\\\n            \\ progressive upload (the file is uploaded by parts)\\n$myVideo2 = $client-\u003evideos()-\u003ecreate((new\\\n            \\ \\\\ApiVideo\\\\Client\\\\Model\\\\VideoCreationPayload())-\u003esetTitle('Uploaded\\\n            \\ video (progressive upload)'));\\n\\n$progressiveSession = $client-\u003evideos()-\u003ecreateUploadProgressiveSession($myVideo2-\u003egetVideoId());\\n\\\n            \\n$progressiveSession-\u003euploadPart(new SplFileObject(__DIR__ . '/10m.mp4.part.a'));\\n\\\n            $progressiveSession-\u003euploadPart(new SplFileObject(__DIR__ . '/10m.mp4.part.b'));\\n\\\n            \\n$progressiveSession-\u003euploadLastPart(new SplFileObject(__DIR__ . '/10m.mp4.part.c')); \"\n        - language: python\n          code: |\n            # First install the api client with \"pip install api.video\"\n            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#upload\n\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.video import Video\n            from apivideo.configuration import Configuration\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            # When uploading a file you can change the chunk size (in octet)\n            configuration = Configuration(chunk_size=10 * 1024 * 1024)\n            with apivideo.AuthenticatedApiClient(__API_KEY__, configuration=configuration) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | Enter the videoId you want to use to upload your video.\n                file = open('/path/to/file', 'rb') # file_type | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \"/videos\" endpoint and add the \"source\" parameter when you create a new video.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a video\n                    api_response = api_instance.upload(video_id, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003eupload: %s\\n\" % e)\n        - language: java\n          code: |\n            // First add the \"video.api:java-api-client\" maven dependency to your project\n            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#upload\n\n            import video.api.client.ApiVideoClient;\n            import video.api.client.api.ApiException;\n            import video.api.client.api.models.*;\n            import video.api.client.api.clients.VideosApi;\n            import java.util.*;\n\n            public class Example {\n              public static void main(String[] args) {\n                ApiVideoClient client = new ApiVideoClient(\"YOUR_API_KEY\");\n                // if you rather like to use the sandbox environment:\n                // ApiVideoClient client = new ApiVideoClient(\"YOUR_SANDBOX_API_KEY\", ApiVideoClient.Environment.SANDBOX);\n\n                VideosApi apiInstance = client.videos();\n\n                String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"; // Enter the videoId you want to use to upload your video.\n                File file = new File(\"/path/to/file\"); // The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \"/videos\" endpoint and add the \"source\" parameter when you create a new video.\n\n                try {\n                  Video result = apiInstance.upload(videoId, file);\n                  System.out.println(result);\n                } catch (ApiException e) {\n                  System.err.println(\"Exception when calling VideosApi#upload\");\n                  System.err.println(\"Status code: \" + e.getCode());\n                  System.err.println(\"Reason: \" + e.getMessage());\n                  System.err.println(\"Response headers: \" + e.getResponseHeaders());\n                  e.printStackTrace();\n                }\n              }\n            }\n        - language: csharp\n          code: |\n            // First add the \"ApiVideo\" NuGet package to your project\n            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#upload\n\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class uploadExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | Enter the videoId you want to use to upload your video.\n                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \"/videos\" endpoint and add the \"source\" parameter when you create a new video.\n                        var apiVideosInstance = apiInstance.Videos();\n                        try\n                        {\n                            // Upload a video\n                            Video result = apiVideosInstance.upload(videoId, file);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling VideosApi.upload: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n        - language: swift\n          code: |+\n            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started\n            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#upload\n\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /upload:\n    post:\n      description: \"When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=\u003ctokenId\u003e`.\\n\\\n        \\nExample with cURL:\\n\\n```curl\\n$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'\\n\\\n        \\ --header 'content-type: multipart/form-data'\\n -F file=@video.mp4\\n```\\n\\\n        \\nOr in an HTML form, with a little JavaScript to convert the form into JSON:\\n\\\n        ```html\\n\u003c!--form for user interaction--\u003e\\n\u003cform name=\\\"videoUploadForm\\\"\\\n        \\ \u003e\\n  \u003clabel for=video\u003eVideo:\u003c/label\u003e\\n  \u003cinput type=file name=source/\u003e\u003cbr/\u003e\\n\\\n        \\  \u003cinput value=\\\"Submit\\\" type=\\\"submit\\\"\u003e\\n\u003c/form\u003e\\n\u003cdiv\u003e\u003c/div\u003e\\n\u003c!--JS\\\n        \\ takes the form data \\n    uses FormData to turn the response into JSON.\\n\\\n        \\    then uses POST to upload the video file.\\n    Update the token parameter\\\n        \\ in the url to your upload token.\\n    --\u003e\\n\u003cscript\u003e\\n   var form = document.forms.namedItem(\\\"\\\n        videoUploadForm\\\");\\t\\n   form.addEventListener('submit', function(ev) {\\n\\\n        \\t ev.preventDefault();\\n     var oOutput = document.querySelector(\\\"div\\\"\\\n        ),\\n         oData = new FormData(form);\\n     var oReq = new XMLHttpRequest();\\n\\\n        \\t \\n     oReq.open(\\\"POST\\\", \\\"https://ws.api.video/upload?token=toXXX\\\"\\\n        , true);\\n     oReq.send(oData);\\n\\t oReq.onload = function(oEvent) {\\n  \\\n        \\     if (oReq.status ==201) {\\n         oOutput.innerHTML = \\\"Your video\\\n        \\ is uploaded!\u003cbr/\u003e\\\"  + oReq.response;\\n       } else {\\n         oOutput.innerHTML\\\n        \\ = \\\"Error \\\" + oReq.status + \\\" occurred when trying to upload your file.\u003cbr\\\n        \\ \\\\/\u003e\\\";\\n       }\\n     };\\n   }, false);\\t\\n\u003c/script\u003e\\n```\\n\\n\\n### Dealing\\\n        \\ with large files\\n\\nYou can upload large files on api.video with \u003ca href='https://docs.api.video/reference/post_videos-videoid-source'\u003eProgressive\\\n        \\ Upload\u003c/a\u003e. Alternatively, if you want to use regular upload, we have created\\\n        \\ a \u003ca href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'\u003etutorial\u003c/a\u003e\\\n        \\ to walk through the steps required.\"\n      operationId: POST_upload\n      parameters:\n      - description: The unique identifier for the token you want to use to upload\n          a video.\n        example: to1tcmSFHeYY5KzyhOqVKMKb\n        explode: true\n        in: query\n        name: token\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: Content-Range represents the range of bytes that will be returned\n          as a result of the request. Byte ranges are inclusive, meaning that bytes\n          0-999 represents the first 1000 bytes in a file or object.\n        example: 'Content-Range: bytes 200-100/5000'\n        explode: false\n        in: header\n        name: Content-Range\n        required: false\n        schema:\n          pattern: ^bytes [0-9]*-[0-9]*\\/[0-9]*$\n          type: string\n        style: simple\n        x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/token-upload-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining the string theory\n                    public: false\n                    panoramic: false\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security: []\n      summary: Upload with an upload token\n      tags:\n      - Videos\n      x-client-description:\n        default: This method allows you to send a video using an upload token. Upload\n          tokens are especially useful when the upload is done from the client side.\n          If you want to upload a video from your server-side application, you'd better\n          use the [standard upload method](#upload).\n      x-client-action: uploadWithUploadToken\n      x-client-chunk-upload: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: |+\n            // First install the go client with \"go get github.com/apivideo/api.video-go-client\"\n            // Documentation: https://github.com/apivideo/api.video-go-client/blob/main/docs/VideosApi.md#uploadWithUploadToken\n\n        - language: node\n          code: \"// First install the \\\"@api.video/nodejs-client\\\" npm package\\n//\\\n            \\ Documentation: https://github.com/apivideo/api.video-nodejs-client/blob/main/doc/api/VideosApi.md#uploadWithUploadToken\\n\\\n            \\nconst client = new ApiVideoClient({ apiKey: \\\"YOUR_API_KEY\\\" });\\n\\n\\\n            const token = 'to4k0jvEUuaTdRAEjQ4Jfrgz'; // Enter the unique identifier\\\n            \\ for the token you want to use to upload a video.\\nconst file = './my-video.mp4';\\\n            \\ // The path to the video you would like to upload. The path must be\\\n            \\ local. If you want to use a video from an online source, you must use\\\n            \\ the \\\"/videos\\\" endpoint and add the \\\"source\\\" parameter when you create\\\n            \\ a new video.\\n      \\nconst video = await client.videos.uploadWithUploadToken(token,\\\n            \\ file);\\n\"\n        - language: python\n          code: |+\n            # First install the api client with \"pip install api.video\"\n            # Documentation: https://github.com/apivideo/api.video-python-client/blob/main/docs/VideosApi.md#uploadWithUploadToken\n\n        - language: java\n          code: |+\n            // First add the \"video.api:java-api-client\" maven dependency to your project\n            // Documentation: https://github.com/apivideo/api.video-java-client/blob/main/docs/VideosApi.md#uploadWithUploadToken\n\n        - language: csharp\n          code: |+\n            // First add the \"ApiVideo\" NuGet package to your project\n            // Documentation: https://github.com/apivideo/api.video-csharp-client/blob/main/docs/VideosApi.md#uploadWithUploadToken\n\n        - language: php\n          code: \"\u003c?php\\n// First install the api client: \\\"composer require api-video/php-api-client\\\"\\\n            \\n// Documentation: https://github.com/apivideo/api.video-php-client/blob/main/docs/Api/VideosApi.md#pickThumbnail\\n\\\n            \\nrequire __DIR__ . '/vendor/autoload.php';\\n\\n$client = new \\\\ApiVideo\\\\\\\n            Client\\\\Client(\\n    'https://ws.api.video',\\n    'YOUR_API_KEY',\\n  \\\n            \\  new \\\\Symfony\\\\Component\\\\HttpClient\\\\Psr18Client()\\n);\\n \\n$videoId\\\n            \\ = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier of the video you\\\n            \\ want to add a thumbnail to, where you use a section of your video as\\\n            \\ the thumbnail.\\n\\n$video = $client-\u003evideos()-\u003epickThumbnail($videoId,\\\n            \\ (new \\\\ApiVideo\\\\Client\\\\Model\\\\VideoThumbnailPickPayload())\\n    -\u003esetTimecode(\\\"\\\n            00:01:00.000\\\")); // Frame in video to be used as a placeholder before\\\n            \\ the video plays. \"\n        - language: swift\n          code: |+\n            // First install the api client: https://github.com/apivideo/api.video-ios-client#getting-started\n            // Documentation: https://github.com/apivideo/api.video-ios-client/blob/main/docs/VideosAPI.md#uploadWithUploadToken\n\n      x-contentType: multipart/form-data\n      x-accepts: application/json\ncomponents:\n  parameters:\n    current-page:\n      description: 'Choose the number of search results to return per page. Minimum\n        value: 1'\n      example: 2\n      explode: true\n      in: query\n      name: currentPage\n      required: false\n      schema:\n        default: 1\n        type: integer\n      style: form\n    page-size:\n      description: Results per page. Allowed values 1-100, default is 25.\n      example: 30\n      explode: true\n      in: query\n      name: pageSize\n      required: false\n      schema:\n        default: 25\n        type: integer\n      style: form\n  schemas:\n    access-token:\n      example:\n        access_token: est\n        token_type: qui nulla l\n        refresh_token: cillum\n        expires_in: 3600\n      properties:\n        access_token:\n          description: The access token containing security credentials allowing you\n            to acccess the API. The token lasts for one hour.\n          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n          type: string\n        token_type:\n          default: bearer\n          description: The type of token you have.\n          type: string\n        refresh_token:\n          description: A token you can use to get the next access token when your\n            current access token expires.\n          example: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n          type: string\n        expires_in:\n          description: Lists the time in seconds when your access token expires. It\n            lasts for one hour.\n          type: integer\n      title: AccessToken\n      type: object\n    bad-request:\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n        problems:\n          items:\n            $ref: '#/components/schemas/bad-request'\n          type: array\n          uniqueItems: true\n      title: BadRequest\n      type: object\n    not-found:\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n      title: NotFound\n      type: object\n    video:\n      example:\n        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        title: Maths video\n        description: An amazing video explaining the string theory\n        tags:\n        - maths\n        - string theory\n        - video\n        metadata:\n        - key: Author\n          value: John Doe\n        - key: Format\n          value: Tutorial\n        createdAt: 4251-03-03T12:52:03.085Z\n        publishedAt: 4665-07-14T23:36:18.598Z\n        actions:\n        - video_delete\n        - video_download\n        - video_update\n      properties:\n        videoId:\n          description: The unique identifier of the video object.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          type: string\n        createdAt:\n          description: When a video was created, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        title:\n          description: |\n            The title of the video content.\n          example: Maths video\n          type: string\n        description:\n          description: |\n            A description for the video content.\n          example: An amazing video explaining string theory.\n          type: string\n        publishedAt:\n          description: The date and time the API created the video. Date and time\n            are provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:25:51Z\n          format: date-time\n          type: string\n        updatedAt:\n          description: The date and time the video was updated. Date and time are\n            provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:15:51Z\n          format: date-time\n          type: string\n        tags:\n          description: \"One array of tags (each tag is a string) in order to categorize\\\n            \\ a video. Tags may include spaces. \\n\"\n          example: '\"tags\": [\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        metadata:\n          description: |\n            Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n          example: '[{\"key\":\"Author\", \"value\":\"John Doe\"}, {\"key\":\"Format\", \"value\":\"Tutorial\"}]'\n          items:\n            $ref: '#/components/schemas/metadata'\n          type: array\n        source:\n          $ref: '#/components/schemas/video-source'\n        assets:\n          $ref: '#/components/schemas/video-assets'\n        playerId:\n          description: |\n            The id of the player that will be applied on the video.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        public:\n          description: |\n            Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: false\n          type: boolean\n        panoramic:\n          description: |\n            Defines if video is panoramic.\n          example: false\n          type: boolean\n        mp4Support:\n          description: |\n            This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.\n          example: true\n          type: boolean\n      required:\n      - videoId\n      title: Video\n      type: object\n    authenticate-payload:\n      example:\n        apiKey: 9VxMaPgsaFg7EBqmuspSzF7\n      properties:\n        apiKey:\n          description: Your account API key. You can use your sandbox API key, or\n            you can use your production API key.\n          type: string\n      required:\n      - apiKey\n      title: ApiKey\n      type: object\n    refresh-token-payload:\n      example:\n        refreshToken: def502005346d9cc2bd79a7793ab5bdabfefcaabfbb8c253f14733f1262077e1a3f38c4751d6d20f590c3784e531a82adc11f05fc1949aa46d5575aaa99cb84b9334ba66ac773576b5d7a418937ae337de62811d086dd42ad1164b12f87d67be6ffea18f2d50be9b95697b21c4d3c4372849bdb2287259cb80541570e913691a08b2fa33c85885930de15cebea627fc09f0255562ab3d39d87d4ff8fc02b00e252afcd480421dec7de9d1411176bcf669c527762e22294b453bc9ea06e9fa8ba5b873feb2ee14ce0a6a6ddd4b78c580631e210e9b9387265dc2bec9478a66a09dcdce1c40d2f856689e9d81742c9628a0b87b359e0b218ea1f07427eef89f999e47af89792f598e05847bd008fddc32ee63f4a601ffb4cd2ad08977f1c854ec358238322c918f05aa5a41f8a171dee497218408abc8283473f6112aeed7310815416a0fa36c63667e0ed014fa40b8992891bf58bae400d901c01450101c88f4978938ad138adc19cfe5698d60fd82cb27c586f6a8f70f4393c7c9e579df8739d46d249fb76d7\n      properties:\n        refreshToken:\n          description: |\n            The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.\n          type: string\n      required:\n      - refreshToken\n      title: RefreshToken\n      type: object\n    metadata:\n      properties:\n        key:\n          description: The constant that defines the data set.\n          example: Color\n          type: string\n        value:\n          description: A variable which belongs to the data set.\n          example: Green\n          type: string\n      title: Metadata\n      type: object\n      x-client-all-args-constructor: true\n    video-upload-payload:\n      properties:\n        file:\n          description: The path to the video you would like to upload. The path must\n            be local. If you want to use a video from an online source, you must use\n            the \"/videos\" endpoint and add the \"source\" parameter when you create\n            a new video.\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n      required:\n      - file\n      type: object\n    token-upload-payload:\n      properties:\n        file:\n          description: The path to the video you want to upload.\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n        videoId:\n          description: The video id returned by the first call to this endpoint in\n            a large video upload scenario.\n          type: string\n          x-client-ignore: true\n          x-client-copy-from-response: true\n      required:\n      - file\n      title: tokenUploadPayload\n      type: object\n    video-source-live-stream-link:\n      properties:\n        rel:\n          type: string\n        uri:\n          type: string\n      type: object\n    video-source-live-stream:\n      description: This appears if the video is from a Live Record.\n      properties:\n        liveStreamId:\n          description: The unique identifier for the live stream.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          type: string\n        links:\n          items:\n            $ref: '#/components/schemas/video-source-live-stream-link'\n          type: array\n      type: object\n    video-source:\n      description: Source information about the video.\n      properties:\n        uri:\n          description: The URL where the video is stored.\n          example: /videos/vi4k0jvEUuaTdRAEjQ4Prklg/source\n          type: string\n        type:\n          type: string\n        liveStream:\n          $ref: '#/components/schemas/video-source-live-stream'\n      title: VideoSource\n      type: object\n    video-assets:\n      description: Collection of details about the video object that you can use to\n        work with the video object.\n      properties:\n        hls:\n          description: This is the manifest URL. For HTTP Live Streaming (HLS), when\n            a HLS video stream is initiated, the first file to download is the manifest.\n            This file has the extension M3U8, and provides the video player with information\n            about the various bitrates available for streaming.\n          format: uri\n          type: string\n        iframe:\n          description: Code to use video from a third party website\n          example: \u003ciframe src=\"//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\"\n            width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n          type: string\n        player:\n          description: Raw url of the player.\n          example: https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n          format: uri\n          type: string\n        thumbnail:\n          description: Poster of the video.\n          example: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n          format: uri\n          type: string\n        mp4:\n          description: Available only if mp4Support is enabled. Raw mp4 url.\n          example: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/source.mp4\n          format: uri\n          type: string\n      title: VideoAssets\n      type: object\n  securitySchemes:\n    bearerAuth:\n      scheme: bearer\n      type: http\n    apiKey:\n      scheme: basic\n      type: http\nx-client-base-paths:\n  production: https://ws.api.video\n  sandbox: https://sandbox.api.video\nx-readme:\n  explorer-enabled: true\n  proxy-enabled: true\n  samples-enabled: true\n  samples-languages:\n  - curl\n  - go\n  - node\n  - php\n  - python\n\n",
			"canonicalURL": "/github.com/apivideo/api.video-android-uploader@c885b50b40d445581e404538c669181220dd7ae8/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/apivideo/api.video-android-uploader/blob/c885b50b40d445581e404538c669181220dd7ae8/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/videos/{videoId}/source\": post: parameters: fail: \"Content-Range\": string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?\u003c`"
}