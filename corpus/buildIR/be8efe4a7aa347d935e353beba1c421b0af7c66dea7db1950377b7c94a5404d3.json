{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apiaddicts/openapi2postman"
		},
		"file": {
			"name": "petstore.yaml",
			"size": 0,
			"path": "example/petstore.yaml",
			"byteSize": 12289,
			"content": "openapi: \"3.0.0\"\ninfo:\n  contact:\n    name: John Doe\n    url: http://some.url.info\n    email: some.email@some.provider.net\n  version: 1.0.0 # mandatory\n  title: Swagger Petstore # mandatory\n  description: |\n    This is a sample API with educational purposes. \n    It's intended to show the right way to define an API using OAS3.\n    Here you can see how to define endpoints, parameters, responses, etc. \n    You can also see usage examples to leverage all OpenApi posibilities. \n    Hope it profits you and your company.\n    Enjoy.\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\nservers:\n  # At least one is mandatory. You can define a server by environment\n# Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/CloudAppi/swagger-petstore/1.0.0\n  - url: http://swagger.io-sandbox/petstore-api/1.0.0 # URL is mandatory\n    description: Sandbox server # It's absolutely recommended to describe the server \n  - url: http://swagger.io/petstore-api/1.0.0\n    description: Production server\n# All endpoints are defined here. The same path can include different operations. \n# Each path-operation pair is an endpoint\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      # Some common use cases for operationId are:\n      #     Some code generators use this value to name the corresponding methods in code.\n      #     Links can refer to the linked operations by operationId.\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: offset\n          in: query\n          description: Starting item index in collection.\n          schema: \n            type: integer\n            format: int32\n            minimum: 0\n            default: 0\n            # Maximum value cannot be defined as the total number of pets is unknown.\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 100\n            default: 10\n      security:\n        - OauthClientCredentials: []\n        - OauthPassword:\n          - reader\n          - admin\n      responses:\n        '206':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:    \n              schema:\n                $ref: \"#/components/schemas/PetListResponse\"\n        '400': \n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: '#/components/responses/DefaultError'\n          \n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      requestBody:\n        $ref: '#/components/requestBodies/CreatePetRequestBody'\n      security:\n        - OauthPassword:\n          - admin\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreatePetResponse\"\n        '400': \n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        default:\n          $ref: '#/components/responses/DefaultError'\n          \n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - $ref: '#/components/parameters/petId'\n      security:\n        - OauthClientCredentials: []\n        - OauthPassword:\n          - reader\n          - admin\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetPetResponse\"\n        '400': \n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: '#/components/responses/DefaultError'\n    put:\n      summary: Update an specific pet\n      operationId: updatePetById\n      tags:\n        - pets\n      requestBody:\n        $ref: '#/components/requestBodies/UpdatePetRequestBody'\n      parameters:\n        - $ref: '#/components/parameters/petId'\n      security:\n        - OauthPassword:\n          - admin\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreatePetResponse\"\n        '400': \n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: '#/components/responses/DefaultError'\n    delete:\n      summary: Delete an specific pet\n      operationId: deletePetById\n      tags:\n        - pets\n      parameters:\n        - $ref: '#/components/parameters/petId'\n      security:\n        - OauthPassword:\n          - admin\n      responses:\n        '204':\n          $ref: \"#/components/responses/NoContent\"\n        '400': \n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: '#/components/responses/DefaultError'\n# Here is where all reusable models, parameters, responses, request bodies, etc are defined          \ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Toby\n        tag:\n          type: string\n          example: dog\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          description: Internal error code\n          type: integer\n          format: int32\n        message:\n          description: Error message\n          type: string\n    Errors:\n      type: array\n      items: \n        $ref: \"#/components/schemas/Error\"\n          \n    StandardResponse:\n      type: object\n      properties:\n        result:\n          type: boolean\n          description: \u003e \n            Operation result. _true_ if http code is 2xx, _false_ otherwise\n          example: true\n        http_code:\n          type: integer\n          format: int32\n          description: Response http code.\n          example: 200\n        info:\n          type: string\n          description: Brief description of operation's result\n          example: OK\n      required:\n        - result\n        - http_code\n        - info\n        \n    ErrorResponse:\n      allOf: \n        - $ref: \"#/components/schemas/StandardResponse\"\n      properties:\n        errors:\n          $ref: \"#/components/schemas/Errors\"\n      required:\n        - errors\n          \n    PetListResponse:\n      allOf:\n        - $ref: \"#/components/schemas/StandardResponse\"\n      properties:\n        data:\n          type: object\n          properties:\n            pets:\n              $ref: \"#/components/schemas/Pets\"\n    \n    CreatePetResponse:\n      allOf:\n        - $ref: \"#/components/schemas/StandardResponse\"\n      properties:\n        data:\n          $ref: '#/components/schemas/Pet'\n          \n    GetPetResponse:\n      allOf:\n        - $ref: \"#/components/schemas/StandardResponse\"\n      properties:\n        data:\n          $ref: '#/components/schemas/Pet'\n  \n  requestBodies:\n    CreatePetRequestBody:\n      description: A JSON object containing pet information\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                minLength: 1\n                maxLength: 50\n                example: Kitty\n              tag:\n                type: string\n                minLength: 1\n                maxLength: 50\n                example: cat\n            required:\n              - name\n              \n    UpdatePetRequestBody:\n      description: A JSON object containing pet information\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                minLength: 1\n                maxLength: 50\n                example: Kitty\n              tag:\n                type: string\n                minLength: 1\n                maxLength: 50\n                example: cat\n\n  parameters:\n    petId:\n      name: petId\n      in: path\n      required: true\n      description: The id of the pet to retrieve\n      schema:\n        type: string\n        minLength: 1\n        maxLength: 25\n        pattern: '[A-Za-z0-9]{1,25}'\n              \n  responses:\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            allOf: \n              - $ref: \"#/components/schemas/ErrorResponse\"\n          example:\n            result: false\n            http_code: 400\n            info: parameter error\n            errors:\n              - code: 1\n                message: Error on parameter x\n                \n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            allOf: \n              - $ref: \"#/components/schemas/ErrorResponse\"\n          example:\n            result: false\n            http_code: 404\n            info: Not Found\n            errors:\n              - code: 4\n                message: Requested resource was not found\n\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            allOf: \n              - $ref: \"#/components/schemas/ErrorResponse\"\n          example:\n            result: false\n            http_code: 401\n            info: Unauthorized\n            errors:\n              - code: 11\n                message: User has not been authenticated\n\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            allOf: \n              - $ref: \"#/components/schemas/ErrorResponse\"\n          example:\n            result: false\n            http_code: 403\n            info: Forbidden\n            errors:\n              - code: 12\n                message: User has no permissions to access the resource \n                \n    DefaultError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            allOf: \n              - $ref: \"#/components/schemas/ErrorResponse\"\n          example:\n            result: false\n            http_code: 500\n            info: Internal Server Error\n            errors:\n              - code: 10\n                message: Unexpected server error\n                \n    NoContent:\n      description: No content\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: '#/components/schemas/StandardResponse'\n          example:\n            result: true\n            http_code: 204\n            info: No content\n            \n  securitySchemes:\n      \n    OauthClientCredentials:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://token.server/token\n          refreshUrl: https://token.server/token\n          scopes:\n            reader: grants pet reading access\n            admin: grants pet creation access\n      \n    OauthPassword:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: https://token.server/token\n          refreshUrl: https://token.server/token\n          scopes:\n            reader: grants pet reading access\n            admin: grants pet creation access"
		}
	},
	"Error": "buildIR: make ir: reduce default: default: contents: application/json: schema: allOf not implemented"
}