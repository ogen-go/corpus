{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/microcks/microcks"
		},
		"file": {
			"name": "microcks-openapi-v1.2.yaml",
			"size": 0,
			"path": "api/microcks-openapi-v1.2.yaml",
			"byteSize": 46207,
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: Microcks API v1.2\n  version: 1.2.0\n  description: \"API offered by Microcks, the mock and testing platform for API and\\\n    \\ microservices (microcks.github.io)\"\n  contact:\n    name: Laurent Broudoux\n    url: https://github.com/lbroudoux\n    email: laurent.broudoux@gmail.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\nservers:\n- url: http://microcks.example.com/api\n  description: \"\"\npaths:\n  /services:\n    summary: This path operations deal with Services\n    get:\n      tags:\n      - mock\n      parameters:\n      - name: page\n        description: Page of Services to retrieve (starts at and defaults to 0)\n        schema:\n          type: integer\n        in: query\n      - name: size\n        description: Size of a page. Maximum number of Services to include in a response\n          (defaults to 20)\n        schema:\n          type: integer\n        in: query\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n          description: List of found Services\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetServices\n      summary: Get Services and APIs\n  /tests:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestRequest'\n        required: true\n      tags:\n      - test\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestResult'\n          description: Created TestResult (empty shell cause tests are executed asynchronously)\n      security:\n      - jwt-bearer:\n        - user\n      operationId: CreateTest\n      summary: Create a new Test\n  /services/count:\n    get:\n      tags:\n      - mock\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Counter'\n          description: Number of Services in datastore\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetServicesCounter\n      summary: Get the Services counter\n  /jobs:\n    summary: This path operations deal with ImportJobs\n    get:\n      tags:\n      - job\n      parameters:\n      - name: page\n        description: Page of ImportJobs to retrieve (starts at and defaults to 0)\n        schema:\n          type: integer\n        in: query\n      - name: size\n        description: Size of a page. Maximum number of ImportJobs to include in a\n          response (defaults to 20)\n        schema:\n          type: integer\n        in: query\n      - name: name\n        description: Name like criterion for query\n        schema:\n          type: string\n        in: query\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImportJob'\n          description: List of found ImportJobs\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetImportJobs\n      summary: Get ImportJobs\n      description: Retrieve a list of ImportJobs\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImportJob'\n        required: true\n      tags:\n      - job\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: Created ImportJob\n      security:\n      - jwt-bearer:\n        - user\n      operationId: CreateImportJob\n      summary: Create ImportJob\n      description: Create a new ImportJob\n  /jobs/{id}:\n    summary: This path or subpaths operations deal with specific ImportJob having\n      given id\n    get:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: Found ImportJob\n      security:\n      - jwt-bearer:\n        - user\n      summary: Get ImportJob\n      description: Retrieve an ImportJob using its identifier\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImportJob'\n        required: true\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: Updated ImportJob\n      summary: Update ImportJob\n      description: Update an ImportJob\n    delete:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json: {}\n          description: ImportJob deleted\n      security:\n      - jwt-bearer:\n        - user:identity\n        - admin\n      operationId: DeleteImportJob\n      summary: Delete ImportJob\n      description: Delete an ImportJob\n    parameters:\n    - name: id\n      description: Unique identifier of ImportJob to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /jobs/{id}/activate:\n    put:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: ImportJob is activated\n      security:\n      - jwt-bearer:\n        - user\n      operationId: ActivateImportJob\n      summary: Activate an ImportJob\n      description: \"Make an ImportJob active, so that it is executed\"\n    parameters:\n    - name: id\n      description: Unique identifier of ImportJob to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /jobs/{id}/start:\n    put:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: Started ImportJob\n      security:\n      - jwt-bearer:\n        - user\n      operationId: StartImportJob\n      summary: Start an ImportJob\n      description: Starting an ImportJob forces it to immediatly import mock definitions\n    parameters:\n    - name: id\n      description: Unique identifier of ImportJob to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /jobs/{id}/stop:\n    put:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportJob'\n          description: Stopped ImportJob\n      security:\n      - jwt-bearer:\n        - user\n      operationId: StopImportJob\n      summary: Stop an ImportJob\n      description: \"Stopping an ImportJob desactivate it, so that it won't execute\\\n        \\ at next schedule\"\n    parameters:\n    - name: id\n      description: Unique identifier of ImportJob to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /services/{id}:\n    get:\n      tags:\n      - mock\n      parameters:\n      - name: messages\n        description: Whether to include details on services messages into result.\n          Default is false\n        schema:\n          type: boolean\n        in: query\n      responses:\n        \"200\":\n          $ref: '#/components/responses/ServiceResponse'\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetService\n      summary: Get Service\n    delete:\n      tags:\n      - mock\n      responses:\n        \"200\":\n          description: Service has been deleted\n      security:\n      - jwt-bearer:\n        - admin\n        - manager\n      operationId: DeleteService\n      summary: Delete Service\n      description: Delete a Service\n    parameters:\n    - name: id\n      description: Unique identifier of Service to managed\n      schema:\n        type: string\n      in: path\n      required: true\n  /artifact/upload:\n    summary: \"Deals with artifacts (SOAP UI project, Postman collection or OpenAPI\\\n      \\ Specification) to be imported by Microcks.\"\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ArtifactUpload'\n            examples:\n              Artifact upload:\n                value: \"POST /api/artifact/upload HTTP/1.1\\nHost: microcks\\nUser-Agent:\\\n                  \\ curl/7.54.0\\nAccept: */*\\nAuthorization: Bearer \u003cREDACTED\u003e\\nContent-Length:\\\n                  \\ 2743\\nExpect: 100-continue\\nContent-Type: multipart/form-data;\\\n                  \\ boundary=------------------------8af8cbb56dd4bde0\\n\\n--------------------------8af8cbb56dd4bde0\\n\\\n                  Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"github.json\\\"\\\n                  \\nContent-Type: application/octet-stream\\n\\nTHE ARTIFACT HERE\\n\\n\\\n                  --------------------------8af8cbb56dd4bde0--\\n\"\n        required: true\n      tags:\n      - job\n      responses:\n        \"201\":\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: Artifact was imported and Service found\n        \"204\":\n          description: No file attribute found in uploaded data\n        \"400\":\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: Artifact content is invalid and not understood\n      operationId: uploadArtifact\n      summary: Upload an artifact\n      description: \"Uploads an artifact (SOAP UI project, Postman collection or OpenAPI\\\n        \\ Specification) to be imported by Microcks.\"\n  /jobs/count:\n    summary: Count ImportJobs\n    get:\n      tags:\n      - job\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Counter'\n          description: Number of ImportJobs in datastore\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetImportJobCounter\n      summary: Get the ImportJobs counter\n  /secrets:\n    summary: This path operations deal with Secrets\n    get:\n      tags:\n      - config\n      parameters:\n      - name: page\n        description: Page of Secrets to retrieve (starts at and defaults to 0)\n        schema:\n          type: integer\n        in: query\n        required: false\n      - name: size\n        description: Size of a page. Maximum number of Secrets to include in a response\n          (defaults to 20)\n        schema:\n          type: integer\n        in: query\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Secret'\n          description: List of found Secrets\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetSecrets\n      summary: Get Secrets\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Secret'\n      tags:\n      - config\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Secret'\n          description: Created Secret\n      security:\n      - jwt-bearer:\n        - admin\n      operationId: CreateSecret\n      summary: Create a new Secret\n  /secrets/{id}:\n    get:\n      tags:\n      - config\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Secret'\n          description: Found Secret\n      security:\n      - jwt-bearer:\n        - admin\n      operationId: GetSecret\n      summary: Get Secret\n      description: Retrieve a Secret\n    put:\n      tags:\n      - config\n      responses:\n        \"200\":\n          description: Updated Secret\n      security:\n      - jwt-bearer:\n        - admin\n      operationId: UpdateSecret\n      summary: Update Secret\n      description: Update a Secret\n    delete:\n      tags:\n      - config\n      responses:\n        \"200\":\n          description: Secret has been deleted\n      security:\n      - jwt-bearer:\n        - admin\n      operationId: DeleteSecret\n      summary: Delete Secret\n      description: Delete a Secret\n    parameters:\n    - name: id\n      description: Unique identifier of Secret to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /secrets/count:\n    get:\n      tags:\n      - config\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Counter'\n          description: Number of Secrets in datastore\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetSecretsCounter\n      summary: Get the Secrets counter\n  /tests/service/{serviceId}:\n    get:\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TestResult'\n          description: List of TestResults for the Service having the requested id\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetTestResultsByService\n      summary: Get TestResults by Service\n    parameters:\n    - name: serviceId\n      description: Unique identifier of Service to manage TestResults for\n      schema:\n        type: string\n      in: path\n      required: true\n  /tests/service/{serviceId}/count:\n    get:\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Counter'\n          description: Number of TestResults for this Service in datastore\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetTestResultsByServiceCounter\n      summary: Get the TestResults for Service counter\n    parameters:\n    - name: serviceId\n      description: Unique identifier of Service to manage TestResults for\n      schema:\n        type: string\n      in: path\n      required: true\n  /tests/{id}:\n    get:\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestResult'\n          description: Requested TestResult\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetTestResult\n      summary: Get TestResult\n      description: \"\"\n    parameters:\n    - name: id\n      description: Unique identifier of TestResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /tests/{id}/messages/{testCaseId}:\n    get:\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RequestResponsePair'\n          description: List of request and response messages for this TestCase\n      security:\n      - jwt-bearer:\n        - user\n      operationId: GetMessagesByTestCase\n      summary: Get messages for TestCase\n    parameters:\n    - name: id\n      description: Unique identifier of TestResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\n    - name: testCaseId\n      description: Unique identifier of TetsCaseResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /tests/{id}/testCaseResult:\n    post:\n      requestBody:\n        description: TestCase return wrapper object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestCaseReturnDTO'\n        required: true\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TestCaseResult'\n          description: TestCaseResult is reported\n      operationId: ReportTestCaseResult\n      summary: Report and create a new TestCaseResult\n      description: Report a TestCaseResult (typically used by a Test runner)\n    parameters:\n    - name: id\n      description: Unique identifier of TestResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\n  /keycloak/config:\n    summary: Keycloak Authentification configuration\n    get:\n      tags:\n      - config\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeycloakConfig'\n          description: Get current configuration\n      operationId: GetKeycloakConfig\n      summary: Get authentification configuration\n  /services/{id}/operation:\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OperationOverrideDTO'\n        required: true\n      tags:\n      - mock\n      parameters:\n      - name: operationName\n        description: Name of operation to update\n        schema:\n          type: string\n        in: query\n        required: true\n      responses:\n        \"200\":\n          description: Operation has been updated\n        \"500\":\n          description: Operation cannot be updated\n      security:\n      - jwt-bearer:\n        - admin\n        - manager\n      operationId: OverrideServiceOperation\n      summary: Override Service Operation\n    parameters:\n    - name: id\n      description: Unique identifier of Service to managed\n      schema:\n        type: string\n      in: path\n      required: true\n  /services/{id}/metadata:\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n        required: true\n      tags:\n      - mock\n      responses:\n        \"200\":\n          description: Service metadata has been updated\n        \"500\":\n          description: Update of metadata failed\n      security:\n      - jwt-bearer:\n        - admin\n        - manager\n      operationId: UpdateServiceMetadata\n      summary: Update Service Metadata\n    parameters:\n    - name: id\n      description: Unique identifier of Service to managed\n      schema:\n        type: string\n      in: path\n      required: true\n  /services/labels:\n    get:\n      tags:\n      - mock\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LabelsMap'\n          description: \"Already used labels: keys are label Keys, values are array\\\n            \\ of label Values\"\n      security:\n      - jwt-bearer:\n        - admin\n      operationId: GetServicesLabels\n      summary: Get the already used labels for Services\n  /services/search:\n    get:\n      tags:\n      - mock\n      parameters:\n      - name: queryMap\n        description: Map of criterion. Key can be simply 'name' with value as the\n          searched string. You can also search by label using keys like 'labels.x'\n          where 'x' is the label and value the label value\n        schema:\n          type: object\n          additionalProperties:\n            type: string\n        in: query\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n          description: List of found Services (filtered according search criteria)\n      security:\n      - jwt-bearer:\n        - user\n      operationId: SearchServices\n      summary: Search for Services and APIs\n  /tests/{id}/events/{testCaseId}:\n    get:\n      tags:\n      - test\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UnidirectionalEvent'\n          description: List of event messages for this TestCase\n      operationId: GetEventsByTestCase\n      summary: Get events for TestCase\n    parameters:\n    - name: id\n      description: Unique identifier of TestResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\n    - name: testCaseId\n      description: Unique identifier of TetsCaseResult to manage\n      schema:\n        type: string\n      in: path\n      required: true\ncomponents:\n  schemas:\n    TestCaseResult:\n      description: Companion objects for TestResult. Each TestCaseResult correspond\n        to a particuliar service operation / action reference by the operationName\n        field. TestCaseResults owns a collection of TestStepResults (one for every\n        request associated to service operation / action).\n      required:\n      - success\n      - elapsedTime\n      - operationName\n      properties:\n        success:\n          description: Flag telling if test case is a success\n          type: boolean\n        elapsedTime:\n          description: Elapsed time in milliseconds since the test case beginning\n          type: number\n        operationName:\n          description: Name of operation this test case is bound to\n          type: string\n        testStepResults:\n          description: Test steps associated to this test case\n          type: array\n          items:\n            $ref: '#/components/schemas/TestStepResult'\n    Service:\n      description: Represents a Service or API definition as registred into Microcks\n        repository\n      required:\n      - name\n      - version\n      - type\n      properties:\n        id:\n          description: Unique identifier for this Service or API\n          type: string\n        name:\n          description: Distinct name for this Service or API (maybe shared among many\n            versions)\n          type: string\n        version:\n          description: Distinct version for a named Service or API\n          type: string\n        type:\n          description: Service or API Type\n          enum:\n          - REST\n          - SOAP_HTTP\n          - GENERIC_REST\n          - EVENT\n          type: string\n        operations:\n          description: Set of Operations for Service or API\n          type: array\n          items:\n            $ref: '#/components/schemas/Operation'\n        xmlNS:\n          description: Associated Xml Namespace in case of Xml based Service\n          type: string\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n          description: Metadata of Service\n    ImportJob:\n      description: An ImportJob allow defining a repository artifact to poll for discovering\n        Services and APIs mocks and tests\n      required:\n      - name\n      - repositoryUrl\n      properties:\n        id:\n          description: Unique identifier of ImportJob\n          type: string\n        name:\n          description: Unique distinct name of this ImportJob\n          type: string\n        repositoryUrl:\n          description: URL of mocks and tests repository artifact\n          type: string\n        repositoryDisableSSLValidation:\n          description: Wether to disable SSL certificate verification when checking\n            repository\n          type: boolean\n        frequency:\n          description: Reserved for future usage\n          type: string\n        createdDate:\n          format: date-time\n          description: Creation date for this ImportJob\n          type: string\n        lastImportDate:\n          format: date-time\n          description: Date last import was done\n          type: string\n        lastImportError:\n          description: Error message of last import (if any)\n          type: string\n        active:\n          description: Wether this ImportJob is active (ie. scheduled for execution)\n          type: boolean\n        etag:\n          description: Etag of repository URL during previous import. Is used for\n            not re-importing if no recent changes\n          type: string\n        serviceRefs:\n          description: References of Services discovered when checking repository\n          type: array\n          items:\n            $ref: '#/components/schemas/ServiceRef'\n        secretRef:\n          $ref: '#/components/schemas/SecretRef'\n          description: Reference of a Secret to used when checking repository\n    ServiceRef:\n      description: Lightweight reference of an existing Service\n      required:\n      - serviceId\n      - name\n      - version\n      properties:\n        serviceId:\n          description: Unique reference of a Service\n          type: string\n        name:\n          description: The Service name\n          type: string\n        version:\n          description: The Service version\n          type: string\n    SecretRef:\n      description: Lightweight reference for an existing Secret\n      required:\n      - secretId\n      - name\n      properties:\n        secretId:\n          description: Unique identifier or referenced Secret\n          type: string\n        name:\n          description: Distinct name of the referenced Secret\n          type: string\n      example: \"{\\n    \\\"secretId\\\": \\\"5be58fb51ed744d1b87481bd\\\",\\n    \\\"name\\\":\\\n        \\ \\\"Gogs internal\\\"\\n}\"\n    Secret:\n      description: A Secret allows grouping informations on how to access a restricted\n        resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs.\n      required:\n      - name\n      - description\n      properties:\n        id:\n          description: Unique identifier of Secret\n          type: string\n        name:\n          description: Unique distinct name of Secret\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        token:\n          type: string\n        tokenHeader:\n          type: string\n        caCertPem:\n          type: string\n        description:\n          description: Description of this Secret\n          type: string\n      example: \"{\\n    \\\"id\\\": \\\"5be58fb51ed744d1b87481bd\\\",\\n    \\\"name\\\": \\\"Gogs\\\n        \\ internal\\\",\\n    \\\"description\\\": \\\"Gogs internal corporate repository\\\"\\\n        ,\\n    \\\"username\\\": \\\"team\\\",\\n    \\\"password\\\": \\\"team\\\",\\n    \\\"caCertPem\\\"\\\n        : \\\"-----BEGIN CERTIFICATE-----\\\\nMIIC6jCCAdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\\\\\\\n        nc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIwHhcNMTgwNzE4MTA0ODIyWhcNMjMwNzE3\\\\nMTA0ODIzWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIw\\\\\\\n        nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyaP1jlpnm8WpfCSnUa8Qt\\\\nhdUynOLLgElUtpWoW25wB9tO2ZmEj+fVsTyzEsW8+nfXXfRsBEzPm2ze9uEMTPTB\\\\\\\n        nAY0k7DbLZfjmF1lCckUvvh1rR/8hoPuXETjXUuOdtm7gRHTOxLQyH2Qi/q0DYJAn\\\\nprKyRCLa35pRnykL6v4bHkqFnqDEho63i29XHhm2703moh4YCl1iYa2Rh6D44cjn\\\\\\\n        n8lBCq6o7zoZSmc/aBamRkQrfZYcolR8OUtDS4oEB0zMftmea2ycashsLEMB+Cq4r\\\\n64NI2QM7qOxdTuXsDivHfLl7RTuWEOozGaJXoiPaGU/3d/KnY0gKJ2TC1KXt6Xjn\\\\\\\n        nAgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\\\\nSIb3DQEBCwUAA4IBAQCeUmxfUzw0VAFG6HvVYIsfvumiIvsSWmclGIZqNJyfMHFD\\\\\\\n        nMy6xzPRNNfWe5aumGTJsuIzuXfDRcdO7KmH1d2/5brkvWpxp6svVrYPvcoXjl4VN\\\\nQR2mv5Di4KHfiiwvP3eeewjUZj+uREGqX2fcbJPHTPy32Kpb0H8Uy09BklhjC7QP\\\\\\\n        ngRAGexPhU1oBL/CoOwbHKcQ6dxs/y1SxzI8gXEtec4z62CroI13iT7U0UjSqFBE4\\\\nKfrJombfz0d68781Z40ll+8my251ZNfbLBhQ3UHW0JnkBEQkE1aBorUoj2iakYvx\\\\\\\n        nA2qZh+8q2b8MwMb2YsQ0dlxKd6c4tN3lmMnO4bnd\\\\n-----END CERTIFICATE-----\\\"\\n}\"\n    ArtifactUpload:\n      title: Root Type for ArtifactUpload\n      description: \"Artifact (SOAP UI project, Postman collection or OpenAPI Specification)\\\n        \\ to be imported by Microcks.\\nThis structure represents a mime-multipart\\\n        \\ file upload (as specified here: https://swagger.io/docs/specification/describing-request-body/file-upload/)\"\n      required:\n      - file\n      type: object\n      properties:\n        file:\n          format: binary\n          description: The artifact to upload\n          type: string\n    Counter:\n      title: Root Type for Counter\n      description: The root of the Counter type's schema.\n      type: object\n      properties:\n        counter:\n          format: int32\n          description: Number of items in a resource collection\n          type: integer\n      example: \"{\\n    \\\"counter\\\": 12\\n}\"\n    TestCaseReturnDTO:\n      required:\n      - operationName\n      properties:\n        operationName:\n          description: Name of related operation for this TestCase\n          type: string\n    TestReturn:\n      description: TestReturn is used for wrapping the return code of a test step\n        execution\n      required:\n      - code\n      - elapsedTime\n      properties:\n        code:\n          description: \"Return code for test (0 means Success, 1 means Failure)\"\n          type: integer\n        elapsedTime:\n          format: int64\n          description: Elapsed time in milliseconds\n          type: integer\n        message:\n          description: Error message if any\n          type: string\n        request:\n          $ref: '#/components/schemas/Request'\n          description: Request sent for this test\n        response:\n          $ref: '#/components/schemas/Response'\n          description: Response returned for this test\n        eventMessage:\n          $ref: '#/components/schemas/EventMessage'\n          description: Event Message received for this test\n    Request:\n      description: A mock invocation or test request\n      required:\n      - name\n      - operationId\n      properties:\n        id:\n          description: Unique identifier of Request\n          type: string\n        name:\n          description: Unique distinct name of this Request\n          type: string\n        content:\n          description: Body content for this request\n          type: string\n        operationId:\n          description: Identifier of Operation this Request is associated to\n          type: string\n        testCaseId:\n          description: Unique identifier of TestCase this Request is attached (in\n            case of a test)\n          type: string\n        headers:\n          description: Headers for this Request\n          type: array\n          items:\n            $ref: '#/components/schemas/Header'\n    Response:\n      description: A mock invocation or test response\n      required:\n      - operationId\n      - name\n      properties:\n        operationId:\n          description: Identifier of Operation this Response is associated to\n          type: string\n        content:\n          description: Body content of this Response\n          type: string\n        id:\n          description: Unique identifier of Response\n          type: string\n        name:\n          description: Unique distinct name of this Response\n          type: string\n        testCaseId:\n          description: Unique identifier of TestCase this Response is attached (in\n            case of a test)\n          type: string\n        headers:\n          description: Headers for this Response\n          type: array\n          items:\n            $ref: '#/components/schemas/Header'\n    Header:\n      description: Transport headers for both Requests and Responses\n      required:\n      - name\n      - values\n      type: object\n      properties:\n        name:\n          description: Unique distinct name of this Header\n          type: string\n        values:\n          description: Values for this Header\n          type: array\n          items:\n            type: string\n    TestStepResult:\n      description: TestStepResult is an entity embedded within TestCaseResult. They\n        are created for each request associated with an operation / action of a microservice.\n      required:\n      - success\n      - elapsedTome\n      properties:\n        success:\n          description: Flag telling if test case is a success\n          type: boolean\n        elapsedTime:\n          description: Elapsed time in milliseconds since the test step beginning\n          type: number\n        requestName:\n          description: Name of request this test step is bound to\n          type: string\n        message:\n          description: Error message that may be associated to this test step\n          type: string\n        eventMessageName:\n          description: Name of event this test step is bound to\n          type: string\n    KeycloakConfig:\n      description: Representation of Keycloak / SSO configuration used by Microcks\n        server\n      required:\n      - realm\n      - auth-server-url\n      - public-client\n      - ssl-required\n      - resource\n      type: object\n      properties:\n        realm:\n          description: Authentication realm name\n          type: string\n        auth-server-url:\n          description: SSO Server authentication url\n          type: string\n        public-client:\n          description: Name of public-client that can be used for requesting OAuth\n            token\n          type: string\n        ssl-required:\n          description: SSL certificates requirements\n          enum:\n          - none\n          - external\n        resource:\n          description: Name of Keycloak resource/application used on client side\n          type: string\n    RequestResponsePair:\n      description: Request associated with corresponding Response\n      type: object\n      allOf:\n      - required:\n        - request\n        - response\n        type: object\n        properties:\n          request:\n            $ref: '#/components/schemas/Request'\n            description: The request part of the pair\n          response:\n            $ref: '#/components/schemas/Response'\n            description: The Response part of the pair\n      - $ref: '#/components/schemas/AbstractExchange'\n    OperationOverrideDTO:\n      description: Data Transfer object for grouping the mutable properties of an\n        Operation\n      type: object\n      properties:\n        dispatcher:\n          description: Type of dispatcher to apply for this operation\n          type: string\n        dispatcherRules:\n          description: Rules of dispatcher for this operation\n          type: string\n        defaultDelay:\n          description: Default delay in milliseconds to apply to mock responses on\n            this operation\n          type: integer\n        parameterConstraints:\n          description: Constraints that may apply to incoming parameters on this operation\n          type: array\n          items:\n            $ref: '#/components/schemas/ParameterConstraint'\n    ParameterConstraint:\n      description: Companion object for Operation that may be used to express constraints\n        on request parameters\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          description: Parameter name\n          type: string\n        required:\n          description: Whether it's a required constraint\n          type: boolean\n        recopy:\n          description: Whether it's a recopy constraint\n          type: boolean\n        mustMatchRegexp:\n          description: Whether it's a regular expression matching constraint\n          type: string\n        in:\n          description: Parameter location\n          enum:\n          - path\n          - query\n          - header\n          type: string\n    Metadata:\n      description: Commodity object for holding metadata on any entity. This object\n        is inspired by Kubernetes metadata.\n      required:\n      - createdOn\n      - lastUpdate\n      type: object\n      properties:\n        createdOn:\n          description: Creation date of attached object\n          type: integer\n        lastUpdate:\n          description: Last update of attached object\n          type: integer\n        annotations:\n          description: Annotations of attached object\n          type: object\n          additionalProperties:\n            type: string\n        labels:\n          description: Labels put on attached object\n          type: object\n          additionalProperties:\n            type: string\n    Binding:\n      description: Protocol binding details for asynchronous operations\n      required:\n      - type\n      - destinationName\n      type: object\n      properties:\n        type:\n          description: Protocol binding identifier\n          enum:\n          - KAFKA\n          - MQTT\n          type: string\n        keyType:\n          description: Type of key for Kafka messages\n          type: string\n        destinationType:\n          description: Type of destination for asynchronous messages of this operation\n          type: string\n        destinationName:\n          description: Name of destination for asynchronous messages of this operation\n          type: string\n    Operation:\n      description: An Operation of a Service or API\n      required:\n      - name\n      - method\n      type: object\n      properties:\n        name:\n          description: Unique name of this Operation within Service scope\n          type: string\n        method:\n          description: Represents transport method\n          type: string\n        inputName:\n          description: Name of input parameters in case of Xml based Service\n          type: string\n        outputName:\n          description: Name of output parameters in case of Xml based Service\n          type: string\n        dispatcher:\n          description: Dispatcher strategy used for mocks\n          type: string\n        dispatcherRules:\n          description: DispactherRules used for mocks\n          type: string\n        defaultDelay:\n          description: Default response time delay for mocks\n          type: number\n        resourcePaths:\n          description: Paths the mocks endpoints are mapped on\n          type: array\n          items:\n            type: string\n        parameterContraints:\n          description: Contraints that may apply to mock invocatino on this operation\n          type: array\n          items:\n            $ref: '#/components/schemas/ParameterConstraint'\n        bindings:\n          description: Map of protocol binding details for this operation\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Binding'\n    LabelsMap:\n      description: A map which keys are already used labels keys and values are already\n        used values for this key\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/StringArray'\n        type: object\n    UnidirectionalEvent:\n      description: Representation of an unidirectional exchange as an event message\n      type: object\n      allOf:\n      - required:\n        - eventMessage\n        type: object\n        properties:\n          eventMessage:\n            $ref: '#/components/schemas/EventMessage'\n            description: Asynchronous message for this unidirectional event\n      - $ref: '#/components/schemas/AbstractExchange'\n    EventMessage:\n      description: \"\"\n      required:\n      - id\n      - mediaType\n      type: object\n      properties:\n        id:\n          description: Unique identifier of this message\n          type: string\n        mediaType:\n          description: Content type of message\n          type: string\n        name:\n          description: Unique distinct name of this message\n          type: string\n        content:\n          description: Body content for this message\n          type: string\n        operationId:\n          description: Identifier of Operation this message is associated to\n          type: string\n        testCaseId:\n          description: Unique identifier of TestCase this message is attached (in\n            case of a test)\n          type: string\n        headers:\n          description: Headers for this message\n          type: array\n          items:\n            $ref: '#/components/schemas/Header'\n    StringArray:\n      description: A simple array of String\n      type: array\n      items:\n        type: string\n    MessageArray:\n      description: Array of Message for Service operations\n      type: array\n      items:\n        $ref: '#/components/schemas/Exchange'\n    Exchange:\n      oneOf:\n      - $ref: '#/components/schemas/RequestResponsePair'\n      - $ref: '#/components/schemas/UnidirectionalEvent'\n      discriminator:\n        propertyName: type\n        mapping:\n          reqRespPair: '#/components/schemas/RequestResponsePair'\n          unidirEvent: '#/components/schemas/UnidirectionalEvent'\n    AbstractExchange:\n      description: Abstract bean representing a Service or API Exchange.\n      required:\n      - type\n      type: object\n      properties:\n        type:\n          description: Discriminant type for identifying kind of exchange\n          enum:\n          - reqRespPair\n          - unidirEvent\n          type: string\n    ServiceView:\n      description: Aggregate bean for grouping a Service an its messages pairs\n      required:\n      - service\n      - messagesMap\n      type: object\n      properties:\n        service:\n          $ref: '#/components/schemas/Service'\n          description: Wrapped service description\n        messagesMap:\n          description: \"Map of messages for this Service. Keys are operation name,\\\n            \\ values are array of messages for this operation\"\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/MessageArray'\n    TestRunnerType:\n      description: Type of test strategy (different strategies are implemented by\n        different runners)\n      type: array\n      items:\n        enum:\n        - HTTP\n        - SOAP_HTTP\n        - SOAP_UI\n        - POSTMAN\n        - OPEN_API_SCHEMA\n        - ASYNC_API_SCHEMA\n        type: string\n    OperationHeaders:\n      description: \"Specification of additional headers for a Service/API operations.\\\n        \\ Keys are operation name or \\\"globals\\\" (if header applies to all), values\\\n        \\ are Header objects.\"\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          $ref: '#/components/schemas/Header'\n    TestResult:\n      description: \"Represents the result of a Service or API test run by Microcks.\\\n        \\ Tests are related to a service and made of multiple test cases corresponding\\\n        \\ to each operations / actions composing service. Tests are run against a\\\n        \\ specific endpoint named testedEndpoint. It holds global markers telling\\\n        \\ if test still ran, is a success, how many times is has taken and so on ...\"\n      required:\n      - id\n      - version\n      - testNumber\n      - testedEndpoint\n      - serviceId\n      - success\n      - inProgress\n      - runnerType\n      properties:\n        id:\n          description: Unique identifier of TestResult\n          type: string\n        version:\n          description: Revision number of this test\n          type: number\n        testNumber:\n          description: Incremental number for tracking number of tests of a service\n          type: number\n        testedEndpoint:\n          description: Endpoint used during test\n          type: string\n        serviceId:\n          description: Unique identifier of service tested\n          type: string\n        elapsedTime:\n          description: Elapsed time in milliseconds since test beginning\n          type: number\n        success:\n          description: Flag telling if test is a success\n          type: boolean\n        inProgress:\n          description: Flag telling is test is still in progress\n          type: boolean\n        runnerType:\n          $ref: '#/components/schemas/TestRunnerType'\n          description: Runner used for this test\n        testCaseResults:\n          description: TestCase results associated to this test\n          type: array\n          items:\n            $ref: '#/components/schemas/TestCaseResult'\n        secretRef:\n          $ref: '#/components/schemas/SecretRef'\n          description: The referrence of the Secret used for connecting to test endpoint\n        operationHeaders:\n          $ref: '#/components/schemas/OperationHeaders'\n          description: This test operations headers override\n        timeout:\n          description: The maximum time (in milliseconds) to wait for this test ends\n          type: integer\n    TestRequest:\n      description: Test request is a minimalist wrapper for requesting the launch\n        of a new test\n      required:\n      - serviceId\n      - testEndpoint\n      - runnerType\n      - timeout\n      properties:\n        serviceId:\n          description: Unique identifier of service to test\n          type: string\n        testEndpoint:\n          description: Endpoint to test for this service\n          type: string\n        runnerType:\n          $ref: '#/components/schemas/TestRunnerType'\n          description: Runner used for this test\n        timeout:\n          description: The maximum time (in milliseconds) to wait for this test ends\n          type: integer\n        filteredOperations:\n          description: A restriction on service operations to test\n          type: array\n          items:\n            type: string\n        operationHeaders:\n          $ref: '#/components/schemas/OperationHeaders'\n          description: This test operations headers override\n        secretName:\n          description: The name of Secret to use for connecting the test endpoint\n          type: string\n  responses:\n    ServiceResponse:\n      content:\n        application/json:\n          schema:\n            oneOf:\n            - $ref: '#/components/schemas/Service'\n            - $ref: '#/components/schemas/ServiceView'\n      description: \"\"\n  securitySchemes:\n    jwt-bearer:\n      flows:\n        clientCredentials:\n          tokenUrl: https://keycloak.example.com/auth/realms/microcks/protocol/openid-connect/token\n          refreshUrl: https://keycloak.example.com/auth/realms/microcks/protocol/openid-connect/token\n          scopes:\n            user: \"\"\n            manager: \"\"\n            admin: \"\"\n      type: oauth2\n      description: JWT Bearer acquired using OAuth 2 Authentication flow or Direct\n        Access Grant\nsecurity:\n- jwt-bearer: []\ntags:\n- name: mock\n  description: Operations related to API and Services mocks\n- name: test\n  description: Operations related to API and Services tests\n- name: job\n  description: Operations related to Jobs for discovering mocks and tests\n- name: config\n  description: Operations related to configuration\n",
			"canonicalURL": "/github.com/microcks/microcks@4b688011f5f8c685f89b74fc6746d5596208b590/-/blob/api/microcks-openapi-v1.2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/microcks/microcks/blob/4b688011f5f8c685f89b74fc6746d5596208b590/api/microcks-openapi-v1.2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/services/{id}\": get: responses: code 200: contents: media: \"application/json\": generate schema: oneOf: collect variants: oneOf[1]: field messagesMap: item: item: oneOf: discriminator: unable to map \"reqRespPair\" to \"https://raw.githubusercontent.com/microcks/microcks/4b688011f5f8c685f89b74fc6746d5596208b590/api/microcks-openapi-v1.2.yaml#/components/schemas/RequestResponsePair\"",
	"NotImplemented": [
		"empty schema",
		"oauth2 security",
		"object with additionalProperties"
	]
}