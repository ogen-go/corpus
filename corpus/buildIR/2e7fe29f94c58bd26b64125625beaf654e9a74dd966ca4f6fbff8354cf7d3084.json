{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amazonaws.com/kinesis-video-media/2017-09-30/openapi.yaml",
			"byteSize": 19905,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2017-09-30'\n  x-release: v4\n  title: Amazon Kinesis Video Streams Media\n  description: \u003cp/\u003e\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: kinesis-video-media\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-media-2017-09-30.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/kinesisvideo/'\nservers:\n  - url: 'http://kinesisvideo.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Kinesis Video Media multi-region endpoint\n  - url: 'https://kinesisvideo.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Kinesis Video Media multi-region endpoint\n  - url: 'http://kinesisvideo.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Kinesis Video Media endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://kinesisvideo.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Kinesis Video Media endpoint for China (Beijing) and China (Ningxia)\npaths:\n  /getMedia:\n    post:\n      operationId: GetMedia\n      description: '\u003cp\u003e Use this API to retrieve media content from a Kinesis video stream. In the request, you identify the stream name or stream Amazon Resource Name (ARN), and the starting chunk. Kinesis Video Streams then returns a stream of chunks in order by fragment number.\u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou must first call the \u003ccode\u003eGetDataEndpoint\u003c/code\u003e API to get an endpoint. Then send the \u003ccode\u003eGetMedia\u003c/code\u003e requests to this endpoint using the \u003ca href=\"https://docs.aws.amazon.com/cli/latest/reference/\"\u003e--endpoint-url parameter\u003c/a\u003e. \u003c/p\u003e \u003c/note\u003e \u003cp\u003eWhen you put media data (fragments) on a stream, Kinesis Video Streams stores each incoming fragment and related metadata in what is called a \"chunk.\" For more information, see \u003ca href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html\"\u003ePutMedia\u003c/a\u003e. The \u003ccode\u003eGetMedia\u003c/code\u003e API returns a stream of these chunks starting from the chunk that you specify in the request. \u003c/p\u003e \u003cp\u003eThe following limits apply when using the \u003ccode\u003eGetMedia\u003c/code\u003e API:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eA client can call \u003ccode\u003eGetMedia\u003c/code\u003e up to five times per second per stream. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eKinesis Video Streams sends media data at a rate of up to 25 megabytes per second (or 200 megabits per second) during a \u003ccode\u003eGetMedia\u003c/code\u003e session. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eIf an error is thrown after invoking a Kinesis Video Streams media API, in addition to the HTTP status code and the response body, it includes the following pieces of information: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-ErrorType\u003c/code\u003e HTTP header – contains a more specific error type in addition to what the HTTP status code provides. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-RequestId\u003c/code\u003e HTTP header – if you want to report an issue to AWS, the support team can better diagnose the problem if given the Request Id.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eBoth the HTTP status code and the ErrorType header can be utilized to make programmatic decisions about whether errors are retry-able and under what conditions, as well as provide information on what actions the client programmer might need to take in order to successfully try again.\u003c/p\u003e \u003cp\u003eFor more information, see the \u003cb\u003eErrors\u003c/b\u003e section at the bottom of this topic, as well as \u003ca href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html\"\u003eCommon Errors\u003c/a\u003e. \u003c/p\u003e \u003c/note\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetMediaOutput'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: NotAuthorizedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotAuthorizedException'\n        '482':\n          description: InvalidEndpointException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidEndpointException'\n        '483':\n          description: ClientLimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientLimitExceededException'\n        '484':\n          description: ConnectionLimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionLimitExceededException'\n        '485':\n          description: InvalidArgumentException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArgumentException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - StartSelector\n              properties:\n                StreamName:\n                  description: 'The Kinesis video stream name from where you want to get the media content. If you don''t specify the \u003ccode\u003estreamName\u003c/code\u003e, you must specify the \u003ccode\u003estreamARN\u003c/code\u003e.'\n                  type: string\n                  pattern: '[a-zA-Z0-9_.-]+'\n                  minLength: 1\n                  maxLength: 256\n                StreamARN:\n                  description: 'The ARN of the stream from where you want to get the media content. If you don''t specify the \u003ccode\u003estreamARN\u003c/code\u003e, you must specify the \u003ccode\u003estreamName\u003c/code\u003e.'\n                  type: string\n                  pattern: 'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+'\n                  minLength: 1\n                  maxLength: 1024\n                StartSelector:\n                  description: '\u003cp\u003eIdentifies the chunk on the Kinesis video stream where you want the \u003ccode\u003eGetMedia\u003c/code\u003e API to start returning media data. You have the following options to identify the starting chunk: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eChoose the latest (or oldest) chunk.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIdentify a specific chunk. You can identify a specific chunk either by providing a fragment number or timestamp (server or producer). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eEach chunk''s metadata includes a continuation token as a Matroska (MKV) tag (\u003ccode\u003eAWS_KINESISVIDEO_CONTINUATION_TOKEN\u003c/code\u003e). If your previous \u003ccode\u003eGetMedia\u003c/code\u003e request terminated, you can use this tag value in your next \u003ccode\u003eGetMedia\u003c/code\u003e request. The API then starts returning chunks starting where the last API ended.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n                  type: object\n                  properties:\n                    StartSelectorType:\n                      allOf:\n                        - $ref: '#/components/schemas/StartSelectorType'\n                        - description: '\u003cp\u003eIdentifies the fragment on the Kinesis video stream where you want to start getting the data from.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eNOW - Start with the latest chunk on the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eEARLIEST - Start with earliest available chunk on the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eFRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the \u003ccode\u003eAfterFragmentNumber\u003c/code\u003e parameter.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding \u003ccode\u003eStartTimestamp\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e CONTINUATION_TOKEN - Read using the specified continuation token. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eIf you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the \u003ccode\u003estartSelectorType\u003c/code\u003e, you don''t provide any additional information in the \u003ccode\u003estartSelector\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e'\n                    AfterFragmentNumber:\n                      allOf:\n                        - $ref: '#/components/schemas/FragmentNumberString'\n                        - description: 'Specifies the fragment number from where you want the \u003ccode\u003eGetMedia\u003c/code\u003e API to start returning the fragments. '\n                    StartTimestamp:\n                      allOf:\n                        - $ref: '#/components/schemas/Timestamp'\n                        - description: A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the \u003ccode\u003estartSelectorType\u003c/code\u003e. The \u003ccode\u003eGetMedia\u003c/code\u003e API then starts with the chunk containing the fragment that has the specified timestamp.\n                    ContinuationToken:\n                      allOf:\n                        - $ref: '#/components/schemas/ContinuationToken'\n                        - description: Continuation token that Kinesis Video Streams returned in the previous \u003ccode\u003eGetMedia\u003c/code\u003e response. The \u003ccode\u003eGetMedia\u003c/code\u003e API then starts with the chunk identified by the continuation token.\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    GetMediaOutput:\n      type: object\n      properties:\n        Payload:\n          allOf:\n            - $ref: '#/components/schemas/Payload'\n            - description: '\u003cp\u003e The payload Kinesis Video Streams returns is a sequence of chunks from the specified stream. For information about the chunks, see . The chunks that Kinesis Video Streams returns in the \u003ccode\u003eGetMedia\u003c/code\u003e call also include the following additional Matroska (MKV) tags: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event your \u003ccode\u003eGetMedia\u003c/code\u003e call terminates, you can use this continuation token in your next request to get the next chunk where the last request terminated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client applications can use this tag value to determine how far behind the chunk returned in the response is from the latest chunk on the stream. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the chunk.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the fragment.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the fragment.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe following tags will be present if an error occurs:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_ERROR_CODE - String description of an error that caused GetMedia to stop.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAWS_KINESISVIDEO_ERROR_ID: Integer code of the error.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe error codes are as follows:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e3002 - Error writing to the stream\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4000 - Requested fragment is not found\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4500 - Access denied for the stream''s KMS key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4501 - Stream''s KMS key is disabled\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4502 - Validation error on the stream''s KMS key\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4503 - KMS key specified in the stream is unavailable\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4504 - Invalid usage of the KMS key specified in the stream\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4505 - Invalid state of the KMS key specified in the stream\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e4506 - Unable to find the KMS key specified in the stream\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e5000 - Internal error\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n    StartSelectorType:\n      type: string\n      enum:\n        - FRAGMENT_NUMBER\n        - SERVER_TIMESTAMP\n        - PRODUCER_TIMESTAMP\n        - NOW\n        - EARLIEST\n        - CONTINUATION_TOKEN\n    FragmentNumberString:\n      type: string\n      pattern: '^[0-9]+$'\n      minLength: 1\n      maxLength: 128\n    Timestamp:\n      type: string\n      format: date-time\n    ContinuationToken:\n      type: string\n      pattern: '^[a-zA-Z0-9_\\.\\-]+$'\n      minLength: 1\n      maxLength: 128\n    ResourceNotFoundException: {}\n    NotAuthorizedException: {}\n    InvalidEndpointException: {}\n    ClientLimitExceededException: {}\n    ConnectionLimitExceededException: {}\n    InvalidArgumentException: {}\n    ContentType:\n      type: string\n      pattern: '^[a-zA-Z0-9_\\.\\-]+$'\n      minLength: 1\n      maxLength: 128\n    StreamName:\n      type: string\n      pattern: '[a-zA-Z0-9_.-]+'\n      minLength: 1\n      maxLength: 256\n    ResourceARN:\n      type: string\n      pattern: 'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+'\n      minLength: 1\n      maxLength: 1024\n    StartSelector:\n      type: object\n      required:\n        - StartSelectorType\n      properties:\n        StartSelectorType:\n          allOf:\n            - $ref: '#/components/schemas/StartSelectorType'\n            - description: '\u003cp\u003eIdentifies the fragment on the Kinesis video stream where you want to start getting the data from.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eNOW - Start with the latest chunk on the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eEARLIEST - Start with earliest available chunk on the stream.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eFRAGMENT_NUMBER - Start with the chunk after a specific fragment. You must also specify the \u003ccode\u003eAfterFragmentNumber\u003c/code\u003e parameter.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk containing a fragment with the specified producer or server timestamp. You specify the timestamp by adding \u003ccode\u003eStartTimestamp\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e CONTINUATION_TOKEN - Read using the specified continuation token. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003eIf you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the \u003ccode\u003estartSelectorType\u003c/code\u003e, you don''t provide any additional information in the \u003ccode\u003estartSelector\u003c/code\u003e.\u003c/p\u003e \u003c/note\u003e'\n        AfterFragmentNumber:\n          allOf:\n            - $ref: '#/components/schemas/FragmentNumberString'\n            - description: 'Specifies the fragment number from where you want the \u003ccode\u003eGetMedia\u003c/code\u003e API to start returning the fragments. '\n        StartTimestamp:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: A timestamp value. This value is required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the \u003ccode\u003estartSelectorType\u003c/code\u003e. The \u003ccode\u003eGetMedia\u003c/code\u003e API then starts with the chunk containing the fragment that has the specified timestamp.\n        ContinuationToken:\n          allOf:\n            - $ref: '#/components/schemas/ContinuationToken'\n            - description: Continuation token that Kinesis Video Streams returned in the previous \u003ccode\u003eGetMedia\u003c/code\u003e response. The \u003ccode\u003eGetMedia\u003c/code\u003e API then starts with the chunk identified by the continuation token.\n      description: '\u003cp\u003eIdentifies the chunk on the Kinesis video stream where you want the \u003ccode\u003eGetMedia\u003c/code\u003e API to start returning media data. You have the following options to identify the starting chunk: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eChoose the latest (or oldest) chunk.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIdentify a specific chunk. You can identify a specific chunk either by providing a fragment number or timestamp (server or producer). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eEach chunk''s metadata includes a continuation token as a Matroska (MKV) tag (\u003ccode\u003eAWS_KINESISVIDEO_CONTINUATION_TOKEN\u003c/code\u003e). If your previous \u003ccode\u003eGetMedia\u003c/code\u003e request terminated, you can use this tag value in your next \u003ccode\u003eGetMedia\u003c/code\u003e request. The API then starts returning chunks starting where the last API ended.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n    GetMediaInput:\n      type: object\n      required:\n        - StartSelector\n      title: GetMediaInput\n      properties:\n        StreamName:\n          allOf:\n            - $ref: '#/components/schemas/StreamName'\n            - description: 'The Kinesis video stream name from where you want to get the media content. If you don''t specify the \u003ccode\u003estreamName\u003c/code\u003e, you must specify the \u003ccode\u003estreamARN\u003c/code\u003e.'\n        StreamARN:\n          allOf:\n            - $ref: '#/components/schemas/ResourceARN'\n            - description: 'The ARN of the stream from where you want to get the media content. If you don''t specify the \u003ccode\u003estreamARN\u003c/code\u003e, you must specify the \u003ccode\u003estreamName\u003c/code\u003e.'\n        StartSelector:\n          allOf:\n            - $ref: '#/components/schemas/StartSelector'\n            - description: 'Identifies the starting chunk to get from the specified stream. '\n    Payload:\n      type: string\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@297a6aabc26a26ce6a88a81c8a82120430c15265/-/blob/APIs/amazonaws.com/kinesis-video-media/2017-09-30/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/297a6aabc26a26ce6a88a81c8a82120430c15265/APIs/amazonaws.com/kinesis-video-media/2017-09-30/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/getMedia\": post: requestBody: contents: application/json: generate schema: field StartSelector: field AfterFragmentNumber: allOf: schema type mismatch: string and "
}