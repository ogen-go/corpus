{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "gitea.io-1.1.1-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/gitea.io-1.1.1-swagger.yaml",
			"byteSize": 215285,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: giteaio\n  description: This documentation describes the Gitea API.\n  license:\n    name: MIT\n    url: http://opensource.org/licenses/MIT\n  title: Gitea API.\n  version: 1.1.1\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://twitter.com/giteaio/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://try.gitea.io/swagger.v1.json\n      version: \"2.0\"\n  x-providerName: gitea.io\nsecurity:\n  - BasicAuth: []\n  - Token: []\n  - AccessToken: []\n  - AuthorizationHeaderToken: []\n  - SudoParam: []\n  - SudoHeader: []\npaths:\n  /admin/orgs:\n    get:\n      operationId: adminGetAllOrgs\n      parameters:\n        - description: page number of results to return (1-based)\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: page size of results, maximum page size is 50\n          in: query\n          name: limit\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OrganizationList\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n      summary: List all organizations\n      tags:\n        - admin\n  /admin/users:\n    get:\n      operationId: adminGetAllUsers\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n      summary: List all users\n      tags:\n        - admin\n    post:\n      operationId: adminCreateUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateUserOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/User\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a user\n      tags:\n        - admin\n  \"/admin/users/{username}\":\n    delete:\n      operationId: adminDeleteUser\n      parameters:\n        - description: username of user to delete\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Delete a user\n      tags:\n        - admin\n    patch:\n      operationId: adminEditUser\n      parameters:\n        - description: username of user to edit\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditUserOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/User\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Edit an existing user\n      tags:\n        - admin\n  \"/admin/users/{username}/keys\":\n    post:\n      operationId: adminCreatePublicKey\n      parameters:\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateKeyOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/PublicKey\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Add a public key on behalf of a user\n      tags:\n        - admin\n  \"/admin/users/{username}/keys/{id}\":\n    delete:\n      operationId: adminDeleteUserPublicKey\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n        - description: id of the key to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Delete a user's public key\n      tags:\n        - admin\n  \"/admin/users/{username}/orgs\":\n    post:\n      operationId: adminCreateOrg\n      parameters:\n        - description: username of the user that will own the created organization\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateOrgOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Organization\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create an organization\n      tags:\n        - admin\n  \"/admin/users/{username}/repos\":\n    post:\n      operationId: adminCreateRepo\n      parameters:\n        - description: username of the user. This user will own the created repository\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateRepoOption\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Repository\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a repository on behalf a user\n      tags:\n        - admin\n  /markdown:\n    post:\n      operationId: renderMarkdown\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MarkdownOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/MarkdownRender\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Render a markdown document as HTML\n      tags:\n        - miscellaneous\n  /markdown/raw:\n    post:\n      operationId: renderMarkdownRaw\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: Request body to render\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/MarkdownRender\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Render raw markdown as HTML\n      tags:\n        - miscellaneous\n  \"/org/{org}/repos\":\n    post:\n      operationId: createOrgRepo\n      parameters:\n        - description: name of organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateRepoOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Repository\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a repository in an organization\n      tags:\n        - organization\n  /orgs:\n    post:\n      operationId: orgCreate\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateOrgOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Organization\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create an organization\n      tags:\n        - organization\n  \"/orgs/{org}\":\n    delete:\n      operationId: orgDelete\n      parameters:\n        - description: organization that is to be deleted\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete an organization\n      tags:\n        - organization\n    get:\n      operationId: orgGet\n      parameters:\n        - description: name of the organization to get\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Organization\"\n      summary: Get an organization\n      tags:\n        - organization\n    patch:\n      operationId: orgEdit\n      parameters:\n        - description: name of the organization to edit\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditOrgOption\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Organization\"\n      summary: Edit an organization\n      tags:\n        - organization\n  \"/orgs/{org}/hooks\":\n    get:\n      operationId: orgListHooks\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/HookList\"\n      summary: List an organization's webhooks\n      tags:\n        - organization\n  \"/orgs/{org}/hooks/\":\n    post:\n      operationId: orgCreateHook\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateHookOption\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Create a hook\n      tags:\n        - organization\n  \"/orgs/{org}/hooks/{id}\":\n    delete:\n      operationId: orgDeleteHook\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a hook\n      tags:\n        - organization\n    get:\n      operationId: orgGetHook\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Get a hook\n      tags:\n        - organization\n    patch:\n      operationId: orgEditHook\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to update\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditHookOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Update a hook\n      tags:\n        - organization\n  \"/orgs/{org}/members\":\n    get:\n      operationId: orgListMembers\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List an organization's members\n      tags:\n        - organization\n  \"/orgs/{org}/members/{username}\":\n    delete:\n      operationId: orgDeleteMember\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: member removed\n      summary: Remove a member from an organization\n      tags:\n        - organization\n    get:\n      operationId: orgIsMember\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: user is a member\n        \"404\":\n          description: user is not a member\n      summary: Check if a user is a member of an organization\n      tags:\n        - organization\n  \"/orgs/{org}/public_members\":\n    get:\n      operationId: orgListPublicMembers\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List an organization's public members\n      tags:\n        - organization\n  \"/orgs/{org}/public_members/{username}\":\n    delete:\n      operationId: orgConcealMember\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Conceal a user's membership\n      tags:\n        - organization\n    get:\n      operationId: orgIsPublicMember\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: user is a public member\n        \"404\":\n          description: user is not a public member\n      summary: Check if a user is a public member of an organization\n      tags:\n        - organization\n    put:\n      operationId: orgPublicizeMember\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: membership publicized\n      summary: Publicize a user's membership\n      tags:\n        - organization\n  \"/orgs/{org}/repos\":\n    get:\n      operationId: orgListRepos\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List an organization's repos\n      tags:\n        - organization\n  \"/orgs/{org}/teams\":\n    get:\n      operationId: orgListTeams\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TeamList\"\n      summary: List an organization's teams\n      tags:\n        - organization\n    post:\n      operationId: orgCreateTeam\n      parameters:\n        - description: name of the organization\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateTeamOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Team\"\n      summary: Create a team\n      tags:\n        - organization\n  /repos/migrate:\n    post:\n      operationId: repoMigrate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MigrateRepoForm\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Repository\"\n      summary: Migrate a remote git repository\n      tags:\n        - repository\n  /repos/search:\n    get:\n      operationId: repoSearch\n      parameters:\n        - description: keyword\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: Limit search to repositories with keyword as topic\n          in: query\n          name: topic\n          schema:\n            type: boolean\n        - description: include search of keyword within repository description\n          in: query\n          name: includeDesc\n          schema:\n            type: boolean\n        - description: search only for repos that the user with the given id owns or\n            contributes to\n          in: query\n          name: uid\n          schema:\n            type: integer\n            format: int64\n        - description: search only for repos that the user with the given id has starred\n          in: query\n          name: starredBy\n          schema:\n            type: integer\n            format: int64\n        - description: include private repositories this user has access to (defaults to\n            true)\n          in: query\n          name: private\n          schema:\n            type: boolean\n        - description: page number of results to return (1-based)\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: page size of results, maximum page size is 50\n          in: query\n          name: limit\n          schema:\n            type: integer\n        - description: type of repository to search for. Supported values are \"fork\",\n            \"source\", \"mirror\" and \"collaborative\"\n          in: query\n          name: mode\n          schema:\n            type: string\n        - description: if `uid` is given, search only for repos that the user owns\n          in: query\n          name: exclusive\n          schema:\n            type: boolean\n        - description: sort repos by attribute. Supported values are \"alpha\", \"created\",\n            \"updated\", \"size\", and \"id\". Default is \"alpha\"\n          in: query\n          name: sort\n          schema:\n            type: string\n        - description: sort order, either \"asc\" (ascending) or \"desc\" (descending). Default\n            is \"asc\", ignored if \"sort\" is not specified.\n          in: query\n          name: order\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SearchResults\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Search for repositories\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}\":\n    delete:\n      operationId: repoDelete\n      parameters:\n        - description: owner of the repo to delete\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to delete\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n      summary: Delete a repository\n      tags:\n        - repository\n    get:\n      operationId: repoGet\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Repository\"\n      summary: Get a repository\n      tags:\n        - repository\n    patch:\n      operationId: repoEdit\n      parameters:\n        - description: owner of the repo to edit\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to edit\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditRepoOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/EditRepoOption\"\n        description: Properties of a repo that you can edit\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Repository\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Edit a repository's properties. Only fields that are set will be changed.\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/archive/{archive}\":\n    get:\n      operationId: repoGetArchive\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: archive to download, consisting of a git reference and archive\n          in: path\n          name: archive\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n      summary: Get an archive of a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/branches\":\n    get:\n      operationId: repoListBranches\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/BranchList\"\n      summary: List a repository's branches\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/branches/{branch}\":\n    get:\n      operationId: repoGetBranch\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: branch to get\n          in: path\n          name: branch\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Branch\"\n      summary: Retrieve a specific branch from a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/collaborators\":\n    get:\n      operationId: repoListCollaborators\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List a repository's collaborators\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/collaborators/{collaborator}\":\n    delete:\n      operationId: repoDeleteCollaborator\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: username of the collaborator to delete\n          in: path\n          name: collaborator\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a collaborator from a repository\n      tags:\n        - repository\n    get:\n      operationId: repoCheckCollaborator\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: username of the collaborator\n          in: path\n          name: collaborator\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/empty\"\n      summary: Check if a user is a collaborator of a repository\n      tags:\n        - repository\n    put:\n      operationId: repoAddCollaborator\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: username of the collaborator to add\n          in: path\n          name: collaborator\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddCollaboratorOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/AddCollaboratorOption\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Add a collaborator to a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/commits\":\n    get:\n      operationId: repoGetAllCommits\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: SHA or branch to start listing commits from (usually 'master')\n          in: query\n          name: sha\n          schema:\n            type: string\n        - description: page number of requested commits\n          in: query\n          name: page\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CommitList\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n        \"409\":\n          $ref: \"#/components/responses/EmptyRepository\"\n      summary: Get a list of all commits from a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/commits/{ref}/statuses\":\n    get:\n      operationId: repoGetCombinedStatusByRef\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: name of branch/tag/commit\n          in: path\n          name: ref\n          required: true\n          schema:\n            type: string\n        - description: page number of results\n          in: query\n          name: page\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Status\"\n      summary: Get a commit's combined status, by branch/tag/commit reference\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/contents\":\n    get:\n      operationId: repoGetContentsList\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: The name of the commit/branch/tag. Default the repository’s default\n            branch (usually master)\n          in: query\n          name: ref\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ContentsListResponse\"\n      summary: Gets the metadata of all the entries of the root dir\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/contents/{filepath}\":\n    delete:\n      operationId: repoDeleteFile\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: path of the file to delete\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteFileOptions\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/FileDeleteResponse\"\n      summary: Delete a file in a repository\n      tags:\n        - repository\n    get:\n      operationId: repoGetContents\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: path of the dir, file, symlink or submodule in the repo\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n        - description: The name of the commit/branch/tag. Default the repository’s default\n            branch (usually master)\n          in: query\n          name: ref\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ContentsResponse\"\n      summary: Gets the metadata and contents (if a file) of an entry in a repository,\n        or a list of entries if a dir\n      tags:\n        - repository\n    post:\n      operationId: repoCreateFile\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: path of the file to create\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateFileOptions\"\n        required: true\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/FileResponse\"\n      summary: Create a file in a repository\n      tags:\n        - repository\n    put:\n      operationId: repoUpdateFile\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: path of the file to update\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateFileOptions\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/FileResponse\"\n      summary: Update a file in a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/editorconfig/{filepath}\":\n    get:\n      operationId: repoGetEditorConfig\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: filepath of file to get\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n      summary: Get the EditorConfig definitions of a file in a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/forks\":\n    get:\n      operationId: listForks\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List a repository's forks\n      tags:\n        - repository\n    post:\n      operationId: createFork\n      parameters:\n        - description: owner of the repo to fork\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to fork\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateForkOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/CreateForkOption\"\n      responses:\n        \"202\":\n          $ref: \"#/components/responses/Repository\"\n      summary: Fork a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/blobs/{sha}\":\n    get:\n      operationId: GetBlob\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: sha of the commit\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GitBlobResponse\"\n      summary: Gets the blob of a repository.\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/commits/{sha}\":\n    get:\n      operationId: repoGetSingleCommit\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: the commit hash\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Commit\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a single commit from a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/refs\":\n    get:\n      operationId: repoListAllGitRefs\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReferenceList\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get specified ref or filtered repository's refs\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/refs/{ref}\":\n    get:\n      operationId: repoListGitRefs\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: part or full name of the ref\n          in: path\n          name: ref\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReferenceList\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get specified ref or filtered repository's refs\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/tags/{sha}\":\n    get:\n      operationId: GetTag\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: sha of the tag. The Git tags API only supports annotated tag\n            objects, not lightweight tags.\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/AnnotatedTag\"\n      summary: Gets the tag object of an annotated tag (not lightweight tags)\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/git/trees/{sha}\":\n    get:\n      operationId: GetTree\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: sha of the commit\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n        - description: show all directories and files\n          in: query\n          name: recursive\n          schema:\n            type: boolean\n        - description: page number; the 'truncated' field in the response will be true if\n            there are still more items after this page, false if the last page\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: number of items per page; default is 1000 or what is set in app.ini\n            as DEFAULT_GIT_TREES_PER_PAGE\n          in: query\n          name: per_page\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GitTreeResponse\"\n      summary: Gets the tree of a repository.\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/hooks\":\n    get:\n      operationId: repoListHooks\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/HookList\"\n      summary: List the hooks in a repository\n      tags:\n        - repository\n    post:\n      operationId: repoCreateHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateHookOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Create a hook\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/hooks/git\":\n    get:\n      operationId: repoListGitHooks\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GitHookList\"\n      summary: List the Git hooks in a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/hooks/git/{id}\":\n    delete:\n      operationId: repoDeleteGitHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Delete a Git hook in a repository\n      tags:\n        - repository\n    get:\n      operationId: repoGetGitHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GitHook\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a Git hook\n      tags:\n        - repository\n    patch:\n      operationId: repoEditGitHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditGitHookOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/EditGitHookOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GitHook\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Edit a Git hook in a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/hooks/{id}\":\n    delete:\n      operationId: repoDeleteHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Delete a hook in a repository\n      tags:\n        - repository\n    get:\n      operationId: repoGetHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Get a hook\n      tags:\n        - repository\n    patch:\n      operationId: repoEditHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the hook\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditHookOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/EditHookOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Hook\"\n      summary: Edit a hook in a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/hooks/{id}/tests\":\n    post:\n      operationId: repoTestHook\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the hook to test\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Test a push webhook\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/issues\":\n    get:\n      operationId: issueListIssues\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: whether issue is open or closed\n          in: query\n          name: state\n          schema:\n            type: string\n        - description: comma separated list of labels. Fetch only issues that have any of\n            this labels. Non existent labels are discarded\n          in: query\n          name: labels\n          schema:\n            type: string\n        - description: page number of requested issues\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: search string\n          in: query\n          name: q\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/IssueList\"\n      summary: List a repository's issues\n      tags:\n        - issue\n    post:\n      operationId: issueCreateIssue\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateIssueOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Issue\"\n      summary: Create an issue. If using deadline only the date will be taken into\n        account, and time of day ignored.\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/comments\":\n    get:\n      operationId: issueGetRepoComments\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: if provided, only comments updated since the provided time are\n            returned.\n          in: query\n          name: since\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CommentList\"\n      summary: List all comments in a repository\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/comments/{id}\":\n    delete:\n      operationId: issueDeleteComment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of comment to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a comment\n      tags:\n        - issue\n    patch:\n      operationId: issueEditComment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the comment to edit\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: \"#/components/requestBodies/EditIssueCommentOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Comment\"\n      summary: Edit a comment\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{id}/times\":\n    get:\n      operationId: issueTrackedTimes\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TrackedTimeList\"\n      summary: List an issue's tracked times\n      tags:\n        - issue\n    post:\n      operationId: issueAddTime\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to add tracked time to\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddTimeOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TrackedTime\"\n        \"400\":\n          $ref: \"#/components/responses/error\"\n        \"403\":\n          $ref: \"#/components/responses/error\"\n      summary: Add a tracked time to a issue\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}\":\n    get:\n      operationId: issueGetIssue\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to get\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Issue\"\n      summary: Get an issue\n      tags:\n        - issue\n    patch:\n      operationId: issueEditIssue\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to edit\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditIssueOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Issue\"\n      summary: Edit an issue. If using deadline only the date will be taken into\n        account, and time of day ignored.\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/comments\":\n    get:\n      operationId: issueGetComments\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: if provided, only comments updated since the specified time are\n            returned.\n          in: query\n          name: since\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/CommentList\"\n      summary: List all comments on an issue\n      tags:\n        - issue\n    post:\n      operationId: issueCreateComment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateIssueCommentOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Comment\"\n      summary: Add a comment to an issue\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/comments/{id}\":\n    delete:\n      deprecated: true\n      operationId: issueDeleteCommentDeprecated\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: this parameter is ignored\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n        - description: id of comment to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a comment\n      tags:\n        - issue\n    patch:\n      deprecated: true\n      operationId: issueEditCommentDeprecated\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: this parameter is ignored\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n        - description: id of the comment to edit\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: \"#/components/requestBodies/EditIssueCommentOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Comment\"\n      summary: Edit a comment\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/deadline\":\n    post:\n      operationId: issueEditIssueDeadline\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to create or update a deadline on\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditDeadlineOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/IssueDeadline\"\n        \"403\":\n          description: Not repo writer\n        \"404\":\n          description: Issue not found\n      summary: Set an issue deadline. If set to null, the deadline is deleted. If using\n        deadline only the date will be taken into account, and time of day\n        ignored.\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/labels\":\n    delete:\n      operationId: issueClearLabels\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Remove all labels from an issue\n      tags:\n        - issue\n    get:\n      operationId: issueGetLabels\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/LabelList\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get an issue's labels\n      tags:\n        - issue\n    post:\n      operationId: issueAddLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: \"#/components/requestBodies/IssueLabelsOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/LabelList\"\n      summary: Add a label to an issue\n      tags:\n        - issue\n    put:\n      operationId: issueReplaceLabels\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: \"#/components/requestBodies/IssueLabelsOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/LabelList\"\n      summary: Replace an issue's labels\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/labels/{id}\":\n    delete:\n      operationId: issueRemoveLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: id of the label to remove\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Remove a label from an issue\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/stopwatch/start\":\n    post:\n      operationId: issueStartStopWatch\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to create the stopwatch on\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          description: Not repo writer, user does not have rights to toggle stopwatch\n        \"404\":\n          description: Issue not found\n        \"409\":\n          description: Cannot start a stopwatch again if it already exists\n      summary: Start stopwatch on an issue.\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/issues/{index}/stopwatch/stop\":\n    post:\n      operationId: issueStopWatch\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the issue to stop the stopwatch on\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          description: Not repo writer, user does not have rights to toggle stopwatch\n        \"404\":\n          description: Issue not found\n        \"409\":\n          description: Cannot stop a non existent stopwatch\n      summary: Stop an issue's existing stopwatch.\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/keys\":\n    get:\n      operationId: repoListKeys\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: the key_id to search for\n          in: query\n          name: key_id\n          schema:\n            type: integer\n        - description: fingerprint of the key\n          in: query\n          name: fingerprint\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeployKeyList\"\n      summary: List a repository's keys\n      tags:\n        - repository\n    post:\n      operationId: repoCreateKey\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateKeyOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/DeployKey\"\n      summary: Add a key to a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/keys/{id}\":\n    delete:\n      operationId: repoDeleteKey\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the key to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a key from a repository\n      tags:\n        - repository\n    get:\n      operationId: repoGetKey\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the key to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/DeployKey\"\n      summary: Get a repository's key by id\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/labels\":\n    get:\n      operationId: issueListLabels\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/LabelList\"\n      summary: Get all of a repository's labels\n      tags:\n        - issue\n    post:\n      operationId: issueCreateLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateLabelOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Label\"\n      summary: Create a label\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/labels/{id}\":\n    delete:\n      operationId: issueDeleteLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the label to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a label\n      tags:\n        - issue\n    get:\n      operationId: issueGetLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the label to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Label\"\n      summary: Get a single label\n      tags:\n        - issue\n    patch:\n      operationId: issueEditLabel\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the label to edit\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditLabelOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Label\"\n      summary: Update a label\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/milestones\":\n    get:\n      operationId: issueGetMilestonesList\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: Milestone state, Recognised values are open, closed and all.\n            Defaults to \"open\"\n          in: query\n          name: state\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/MilestoneList\"\n      summary: Get all of a repository's opened milestones\n      tags:\n        - issue\n    post:\n      operationId: issueCreateMilestone\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateMilestoneOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Milestone\"\n      summary: Create a milestone\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/milestones/{id}\":\n    delete:\n      operationId: issueDeleteMilestone\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the milestone to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a milestone\n      tags:\n        - issue\n    get:\n      operationId: issueGetMilestone\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the milestone\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Milestone\"\n      summary: Get a milestone\n      tags:\n        - issue\n    patch:\n      operationId: issueEditMilestone\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the milestone\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditMilestoneOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Milestone\"\n      summary: Update a milestone\n      tags:\n        - issue\n  \"/repos/{owner}/{repo}/mirror-sync\":\n    post:\n      operationId: repoMirrorSync\n      parameters:\n        - description: owner of the repo to sync\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to sync\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/empty\"\n      summary: Sync a mirrored repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/pulls\":\n    get:\n      operationId: repoListPullRequests\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: \"State of pull request: open or closed (optional)\"\n          in: query\n          name: state\n          schema:\n            type: string\n            enum:\n              - closed\n              - open\n              - all\n        - description: Type of sort\n          in: query\n          name: sort\n          schema:\n            type: string\n            enum:\n              - oldest\n              - recentupdate\n              - leastupdate\n              - mostcomment\n              - leastcomment\n              - priority\n        - description: ID of the milestone\n          in: query\n          name: milestone\n          schema:\n            type: integer\n            format: int64\n        - description: Label IDs\n          in: query\n          name: labels\n          explode: true\n          schema:\n            type: array\n            items:\n              format: int64\n              type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PullRequestList\"\n      summary: List a repo's pull requests\n      tags:\n        - repository\n    post:\n      operationId: repoCreatePullRequest\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePullRequestOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/PullRequest\"\n      summary: Create a pull request\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/pulls/{index}\":\n    get:\n      operationId: repoGetPullRequest\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the pull request to get\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PullRequest\"\n      summary: Get a pull request\n      tags:\n        - repository\n    patch:\n      operationId: repoEditPullRequest\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the pull request to edit\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditPullRequestOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/PullRequest\"\n      summary: Update a pull request\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/pulls/{index}/merge\":\n    get:\n      operationId: repoPullRequestIsMerged\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the pull request\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          description: pull request has been merged\n        \"404\":\n          description: pull request has not been merged\n      summary: Check if a pull request has been merged\n      tags:\n        - repository\n    post:\n      operationId: repoMergePullRequest\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: index of the pull request to merge\n          in: path\n          name: index\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MergePullRequestOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/MergePullRequestOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/empty\"\n        \"405\":\n          $ref: \"#/components/responses/empty\"\n      summary: Merge a pull request\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/raw/{filepath}\":\n    get:\n      operationId: repoGetRawFile\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: filepath of the file to get\n          in: path\n          name: filepath\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n      summary: Get a file from a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/releases\":\n    get:\n      operationId: repoListReleases\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: page wants to load\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: items count every page wants to load\n          in: query\n          name: per_page\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReleaseList\"\n      summary: List a repo's releases\n      tags:\n        - repository\n    post:\n      operationId: repoCreateRelease\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateReleaseOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Release\"\n      summary: Create a release\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/releases/{id}\":\n    delete:\n      operationId: repoDeleteRelease\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a release\n      tags:\n        - repository\n    get:\n      operationId: repoGetRelease\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Release\"\n      summary: Get a release\n      tags:\n        - repository\n    patch:\n      operationId: repoEditRelease\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release to edit\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditReleaseOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Release\"\n      summary: Update a release\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/releases/{id}/assets\":\n    get:\n      operationId: repoListReleaseAttachments\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/AttachmentList\"\n      summary: List release's attachments\n      tags:\n        - repository\n    post:\n      operationId: repoCreateReleaseAttachment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: name of the attachment\n          in: query\n          name: name\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                attachment:\n                  description: attachment to upload\n                  type: string\n                  format: binary\n              required:\n                - attachment\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Attachment\"\n      summary: Create a release attachment\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}\":\n    delete:\n      operationId: repoDeleteReleaseAttachment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: id of the attachment to delete\n          in: path\n          name: attachment_id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a release attachment\n      tags:\n        - repository\n    get:\n      operationId: repoGetReleaseAttachment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: id of the attachment to get\n          in: path\n          name: attachment_id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Attachment\"\n      summary: Get a release attachment\n      tags:\n        - repository\n    patch:\n      operationId: repoEditReleaseAttachment\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: id of the release\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: id of the attachment to edit\n          in: path\n          name: attachment_id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditAttachmentOptions\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Attachment\"\n      summary: Edit a release attachment\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/stargazers\":\n    get:\n      operationId: repoListStargazers\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List a repo's stargazers\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/statuses/{sha}\":\n    get:\n      operationId: repoListStatuses\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: sha of the commit\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n        - description: page number of results\n          in: query\n          name: page\n          schema:\n            type: integer\n        - description: type of sort\n          in: query\n          name: sort\n          schema:\n            type: string\n            enum:\n              - oldest\n              - recentupdate\n              - leastupdate\n              - leastindex\n              - highestindex\n        - description: type of state\n          in: query\n          name: state\n          schema:\n            type: string\n            enum:\n              - pending\n              - success\n              - error\n              - failure\n              - warning\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/StatusList\"\n      summary: Get a commit's statuses\n      tags:\n        - repository\n    post:\n      operationId: repoCreateStatus\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: sha of the commit\n          in: path\n          name: sha\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateStatusOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/CreateStatusOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/StatusList\"\n      summary: Create a commit status\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/subscribers\":\n    get:\n      operationId: repoListSubscribers\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List a repo's watchers\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/subscription\":\n    delete:\n      operationId: userCurrentDeleteSubscription\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Unwatch a repo\n      tags:\n        - repository\n    get:\n      operationId: userCurrentCheckSubscription\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/WatchInfo\"\n      summary: Check if the current user is watching a repo\n      tags:\n        - repository\n    put:\n      operationId: userCurrentPutSubscription\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/WatchInfo\"\n      summary: Watch a repo\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/tags\":\n    get:\n      operationId: repoListTags\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TagList\"\n      summary: List a repository's tags\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/times\":\n    get:\n      operationId: repoTrackedTimes\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TrackedTimeList\"\n      summary: List a repo's tracked times\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/times/{user}\":\n    get:\n      operationId: userTrackedTimes\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: username of user\n          in: path\n          name: user\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TrackedTimeList\"\n      summary: List a user's tracked times in a repo\n      tags:\n        - user\n  \"/repos/{owner}/{repo}/topics\":\n    get:\n      operationId: repoListTopics\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TopicNames\"\n      summary: Get list of topics that a repository has\n      tags:\n        - repository\n    put:\n      operationId: repoUpdateTopics\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RepoTopicOptions\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/RepoTopicOptions\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Replace list of topics for a repository\n      tags:\n        - repository\n  \"/repos/{owner}/{repo}/topics/{topic}\":\n    delete:\n      operationId: repoDeleteTopic\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: name of the topic to delete\n          in: path\n          name: topic\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete a topic from a repository\n      tags:\n        - repository\n    put:\n      operationId: repoAddTopíc\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n        - description: name of the topic to add\n          in: path\n          name: topic\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Add a topic to a repository\n      tags:\n        - repository\n  \"/repositories/{id}\":\n    get:\n      operationId: repoGetByID\n      parameters:\n        - description: id of the repo to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Repository\"\n      summary: Get a repository by id\n      tags:\n        - repository\n  \"/teams/{id}\":\n    delete:\n      operationId: orgDeleteTeam\n      parameters:\n        - description: id of the team to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          description: team deleted\n      summary: Delete a team\n      tags:\n        - organization\n    get:\n      operationId: orgGetTeam\n      parameters:\n        - description: id of the team to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Team\"\n      summary: Get a team\n      tags:\n        - organization\n    patch:\n      operationId: orgEditTeam\n      parameters:\n        - description: id of the team to edit\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditTeamOption\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Team\"\n      summary: Edit a team\n      tags:\n        - organization\n  \"/teams/{id}/members\":\n    get:\n      operationId: orgListTeamMembers\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List a team's members\n      tags:\n        - organization\n  \"/teams/{id}/members/{username}\":\n    delete:\n      operationId: orgRemoveTeamMember\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: username of the user to remove\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Remove a team member\n      tags:\n        - organization\n    get:\n      operationId: orgListTeamMember\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: username of the member to list\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/User\"\n      summary: List a particular member of team\n      tags:\n        - organization\n    put:\n      operationId: orgAddTeamMember\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: username of the user to add\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Add a team member\n      tags:\n        - organization\n  \"/teams/{id}/repos\":\n    get:\n      operationId: orgListTeamRepos\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List a team's repos\n      tags:\n        - organization\n  \"/teams/{id}/repos/{org}/{repo}\":\n    delete:\n      description: This does not delete the repository, it only removes the repository from\n        the team.\n      operationId: orgRemoveTeamRepository\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: organization that owns the repo to remove\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to remove\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Remove a repository from a team\n      tags:\n        - organization\n    put:\n      operationId: orgAddTeamRepository\n      parameters:\n        - description: id of the team\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: organization that owns the repo to add\n          in: path\n          name: org\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to add\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Add a repository to a team\n      tags:\n        - organization\n  /topics/search:\n    get:\n      operationId: topicSearch\n      parameters:\n        - description: keywords to search\n          in: query\n          name: q\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TopicListResponse\"\n      summary: search topics via keyword\n      tags:\n        - repository\n  /user:\n    get:\n      operationId: userGetCurrent\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/User\"\n      summary: Get the authenticated user\n      tags:\n        - user\n  /user/emails:\n    delete:\n      operationId: userDeleteEmail\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DeleteEmailOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/DeleteEmailOption\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Delete email addresses\n      tags:\n        - user\n    get:\n      operationId: userListEmails\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/EmailList\"\n      summary: List the authenticated user's email addresses\n      tags:\n        - user\n    post:\n      operationId: userAddEmail\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateEmailOption\"\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/CreateEmailOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/EmailList\"\n      summary: Add email addresses\n      tags:\n        - user\n  /user/followers:\n    get:\n      operationId: userCurrentListFollowers\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List the authenticated user's followers\n      tags:\n        - user\n  /user/following:\n    get:\n      operationId: userCurrentListFollowing\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List the users that the authenticated user is following\n      tags:\n        - user\n  \"/user/following/{username}\":\n    delete:\n      operationId: userCurrentDeleteFollow\n      parameters:\n        - description: username of user to unfollow\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Unfollow a user\n      tags:\n        - user\n    get:\n      operationId: userCurrentCheckFollowing\n      parameters:\n        - description: username of followed user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Check whether a user is followed by the authenticated user\n      tags:\n        - user\n    put:\n      operationId: userCurrentPutFollow\n      parameters:\n        - description: username of user to follow\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Follow a user\n      tags:\n        - user\n  /user/gpg_keys:\n    get:\n      operationId: userCurrentListGPGKeys\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GPGKeyList\"\n      summary: List the authenticated user's GPG keys\n      tags:\n        - user\n    post:\n      operationId: userCurrentPostGPGKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateGPGKeyOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/GPGKey\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a GPG key\n      tags:\n        - user\n  \"/user/gpg_keys/{id}\":\n    delete:\n      operationId: userCurrentDeleteGPGKey\n      parameters:\n        - description: id of key to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n      summary: Remove a GPG key\n      tags:\n        - user\n    get:\n      operationId: userCurrentGetGPGKey\n      parameters:\n        - description: id of key to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GPGKey\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a GPG key\n      tags:\n        - user\n  /user/keys:\n    get:\n      operationId: userCurrentListKeys\n      parameters:\n        - description: fingerprint of the key\n          in: query\n          name: fingerprint\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PublicKeyList\"\n      summary: List the authenticated user's public keys\n      tags:\n        - user\n    post:\n      operationId: userCurrentPostKey\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateKeyOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/PublicKey\"\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a public key\n      tags:\n        - user\n  \"/user/keys/{id}\":\n    delete:\n      operationId: userCurrentDeleteKey\n      parameters:\n        - description: id of key to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Delete a public key\n      tags:\n        - user\n    get:\n      operationId: userCurrentGetKey\n      parameters:\n        - description: id of key to get\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PublicKey\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a public key\n      tags:\n        - user\n  /user/orgs:\n    get:\n      operationId: orgListCurrentUserOrgs\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OrganizationList\"\n      summary: List the current user's organizations\n      tags:\n        - organization\n  /user/repos:\n    get:\n      operationId: userCurrentListRepos\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List the repos that the authenticated user owns or has access to\n      tags:\n        - user\n    post:\n      operationId: createCurrentUserRepo\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateRepoOption\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Repository\"\n        \"409\":\n          description: The repository with the same name already exists.\n        \"422\":\n          $ref: \"#/components/responses/validationError\"\n      summary: Create a repository\n      tags:\n        - repository\n        - user\n  /user/starred:\n    get:\n      operationId: userCurrentListStarred\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: The repos that the authenticated user has starred\n      tags:\n        - user\n  \"/user/starred/{owner}/{repo}\":\n    delete:\n      operationId: userCurrentDeleteStar\n      parameters:\n        - description: owner of the repo to unstar\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to unstar\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Unstar the given repo\n      tags:\n        - user\n    get:\n      operationId: userCurrentCheckStarring\n      parameters:\n        - description: owner of the repo\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Whether the authenticated is starring the repo\n      tags:\n        - user\n    put:\n      operationId: userCurrentPutStar\n      parameters:\n        - description: owner of the repo to star\n          in: path\n          name: owner\n          required: true\n          schema:\n            type: string\n        - description: name of the repo to star\n          in: path\n          name: repo\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: Star the given repo\n      tags:\n        - user\n  /user/subscriptions:\n    get:\n      operationId: userCurrentListSubscriptions\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List repositories watched by the authenticated user\n      tags:\n        - user\n  /user/teams:\n    get:\n      operationId: userListTeams\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TeamList\"\n      summary: List all the teams a user belongs to\n      tags:\n        - user\n  /user/times:\n    get:\n      operationId: userCurrentTrackedTimes\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/TrackedTimeList\"\n      summary: List the current user's tracked times\n      tags:\n        - user\n  /users/search:\n    get:\n      operationId: userSearch\n      parameters:\n        - description: keyword\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: ID of the user to search for\n          in: query\n          name: uid\n          schema:\n            type: integer\n            format: int64\n        - description: maximum number of users to return\n          in: query\n          name: limit\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: SearchResults of a successful search\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/User\"\n                    type: array\n                  ok:\n                    type: boolean\n                type: object\n      summary: Search for users\n      tags:\n        - user\n  \"/users/{follower}/following/{followee}\":\n    get:\n      operationId: userCheckFollowing\n      parameters:\n        - description: username of following user\n          in: path\n          name: follower\n          required: true\n          schema:\n            type: string\n        - description: username of followed user\n          in: path\n          name: followee\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Check if one user is following another user\n      tags:\n        - user\n  \"/users/{username}\":\n    get:\n      operationId: userGet\n      parameters:\n        - description: username of user to get\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/User\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a user\n      tags:\n        - user\n  \"/users/{username}/followers\":\n    get:\n      operationId: userListFollowers\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List the given user's followers\n      tags:\n        - user\n  \"/users/{username}/following\":\n    get:\n      operationId: userListFollowing\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserList\"\n      summary: List the users that the given user is following\n      tags:\n        - user\n  \"/users/{username}/gpg_keys\":\n    get:\n      operationId: userListGPGKeys\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/GPGKeyList\"\n      summary: List the given user's GPG keys\n      tags:\n        - user\n  \"/users/{username}/heatmap\":\n    get:\n      operationId: userGetHeatmapData\n      parameters:\n        - description: username of user to get\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/UserHeatmapData\"\n        \"404\":\n          $ref: \"#/components/responses/notFound\"\n      summary: Get a user's heatmap\n      tags:\n        - user\n  \"/users/{username}/keys\":\n    get:\n      operationId: userListKeys\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n        - description: fingerprint of the key\n          in: query\n          name: fingerprint\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/PublicKeyList\"\n      summary: List the given user's public keys\n      tags:\n        - user\n  \"/users/{username}/orgs\":\n    get:\n      operationId: orgListUserOrgs\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OrganizationList\"\n      summary: List a user's organizations\n      tags:\n        - organization\n  \"/users/{username}/repos\":\n    get:\n      operationId: userListRepos\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List the repos owned by the given user\n      tags:\n        - user\n  \"/users/{username}/starred\":\n    get:\n      operationId: userListStarred\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: The repos that the given user has starred\n      tags:\n        - user\n  \"/users/{username}/subscriptions\":\n    get:\n      operationId: userListSubscriptions\n      parameters:\n        - description: username of the user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/RepositoryList\"\n      summary: List the repositories watched by a user\n      tags:\n        - user\n  \"/users/{username}/tokens\":\n    get:\n      operationId: userGetTokens\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/AccessTokenList\"\n      summary: List the authenticated user's access tokens\n      tags:\n        - user\n    post:\n      operationId: userCreateToken\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          x-go-name: Name\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n              required:\n                - name\n              type: object\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/AccessToken\"\n      summary: Create an access token\n      tags:\n        - user\n  \"/users/{username}/tokens/{token}\":\n    delete:\n      operationId: userDeleteAccessToken\n      parameters:\n        - description: username of user\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n        - description: token to be deleted\n          in: path\n          name: token\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/empty\"\n      summary: delete an access token\n      tags:\n        - user\n  /version:\n    get:\n      operationId: getVersion\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ServerVersion\"\n      summary: Returns the version of the Gitea application\n      tags:\n        - miscellaneous\nservers:\n  - url: http://try.gitea.io/api/v1\n  - url: https://try.gitea.io/api/v1\ncomponents:\n  responses:\n    AccessToken:\n      description: AccessToken represents an API access token.\n      headers:\n        id:\n          schema:\n            type: integer\n            format: int64\n        name:\n          schema:\n            type: string\n        sha1:\n          schema:\n            type: string\n        token_last_eight:\n          schema:\n            type: string\n    AccessTokenList:\n      description: AccessTokenList represents a list of API access token.\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/AccessToken\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/AccessToken\"\n            type: array\n    AnnotatedTag:\n      description: AnnotatedTag\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AnnotatedTag\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/AnnotatedTag\"\n    Attachment:\n      description: Attachment\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Attachment\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Attachment\"\n    AttachmentList:\n      description: AttachmentList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Attachment\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Attachment\"\n            type: array\n    Branch:\n      description: Branch\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Branch\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Branch\"\n    BranchList:\n      description: BranchList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Branch\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Branch\"\n            type: array\n    Comment:\n      description: Comment\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Comment\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Comment\"\n    CommentList:\n      description: CommentList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Comment\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Comment\"\n            type: array\n    Commit:\n      description: Commit\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Commit\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Commit\"\n    CommitList:\n      description: CommitList\n      headers:\n        X-HasMore:\n          description: True if there is another page\n          schema:\n            type: boolean\n        X-Page:\n          description: The current page\n          schema:\n            type: integer\n            format: int64\n        X-PageCount:\n          description: Total number of pages\n          schema:\n            type: integer\n            format: int64\n        X-PerPage:\n          description: Commits per page\n          schema:\n            type: integer\n            format: int64\n        X-Total:\n          description: Total commit count\n          schema:\n            type: integer\n            format: int64\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Commit\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Commit\"\n            type: array\n    ContentsListResponse:\n      description: ContentsListResponse\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/ContentsResponse\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/ContentsResponse\"\n            type: array\n    ContentsResponse:\n      description: ContentsResponse\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ContentsResponse\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/ContentsResponse\"\n    DeployKey:\n      description: DeployKey\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/DeployKey\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/DeployKey\"\n    DeployKeyList:\n      description: DeployKeyList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/DeployKey\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/DeployKey\"\n            type: array\n    EmailList:\n      description: EmailList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Email\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Email\"\n            type: array\n    EmptyRepository:\n      description: EmptyRepository\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/APIError\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/APIError\"\n    FileDeleteResponse:\n      description: FileDeleteResponse\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/FileDeleteResponse\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/FileDeleteResponse\"\n    FileResponse:\n      description: FileResponse\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/FileResponse\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/FileResponse\"\n    GPGKey:\n      description: GPGKey\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GPGKey\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/GPGKey\"\n    GPGKeyList:\n      description: GPGKeyList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/GPGKey\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/GPGKey\"\n            type: array\n    GitBlobResponse:\n      description: GitBlobResponse\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GitBlobResponse\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/GitBlobResponse\"\n    GitHook:\n      description: GitHook\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GitHook\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/GitHook\"\n    GitHookList:\n      description: GitHookList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/GitHook\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/GitHook\"\n            type: array\n    GitTreeResponse:\n      description: GitTreeResponse\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GitTreeResponse\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/GitTreeResponse\"\n    Hook:\n      description: Hook\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Hook\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Hook\"\n    HookList:\n      description: HookList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Hook\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Hook\"\n            type: array\n    Issue:\n      description: Issue\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Issue\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Issue\"\n    IssueDeadline:\n      description: IssueDeadline\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/IssueDeadline\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/IssueDeadline\"\n    IssueList:\n      description: IssueList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Issue\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Issue\"\n            type: array\n    Label:\n      description: Label\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Label\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Label\"\n    LabelList:\n      description: LabelList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Label\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Label\"\n            type: array\n    MarkdownRender:\n      description: MarkdownRender is a rendered markdown document\n      content:\n        application/json:\n          schema:\n            type: string\n        text/html:\n          schema:\n            type: string\n    Milestone:\n      description: Milestone\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Milestone\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Milestone\"\n    MilestoneList:\n      description: MilestoneList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Milestone\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Milestone\"\n            type: array\n    Organization:\n      description: Organization\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Organization\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Organization\"\n    OrganizationList:\n      description: OrganizationList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Organization\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Organization\"\n            type: array\n    PublicKey:\n      description: PublicKey\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PublicKey\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/PublicKey\"\n    PublicKeyList:\n      description: PublicKeyList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/PublicKey\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/PublicKey\"\n            type: array\n    PullRequest:\n      description: PullRequest\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PullRequest\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/PullRequest\"\n    PullRequestList:\n      description: PullRequestList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/PullRequest\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/PullRequest\"\n            type: array\n    Reference:\n      description: Reference\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Reference\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Reference\"\n    ReferenceList:\n      description: ReferenceList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Reference\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Reference\"\n            type: array\n    Release:\n      description: Release\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Release\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Release\"\n    ReleaseList:\n      description: ReleaseList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Release\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Release\"\n            type: array\n    Repository:\n      description: Repository\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Repository\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Repository\"\n    RepositoryList:\n      description: RepositoryList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Repository\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Repository\"\n            type: array\n    SearchResults:\n      description: SearchResults\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SearchResults\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/SearchResults\"\n    ServerVersion:\n      description: ServerVersion\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ServerVersion\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/ServerVersion\"\n    Status:\n      description: Status\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Status\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Status\"\n    StatusList:\n      description: StatusList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Status\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Status\"\n            type: array\n    Tag:\n      description: Tag\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Tag\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Tag\"\n    TagList:\n      description: TagList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Tag\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Tag\"\n            type: array\n    Team:\n      description: Team\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Team\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/Team\"\n    TeamList:\n      description: TeamList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Team\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/Team\"\n            type: array\n    TopicListResponse:\n      description: TopicListResponse\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/TopicResponse\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/TopicResponse\"\n            type: array\n    TopicNames:\n      description: TopicNames\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/TopicName\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/TopicName\"\n    TrackedTime:\n      description: TrackedTime\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/TrackedTime\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/TrackedTime\"\n    TrackedTimeList:\n      description: TrackedTimeList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/TrackedTime\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/TrackedTime\"\n            type: array\n    User:\n      description: User\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/User\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/User\"\n    UserHeatmapData:\n      description: UserHeatmapData\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/UserHeatmapData\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/UserHeatmapData\"\n            type: array\n    UserList:\n      description: UserList\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/User\"\n            type: array\n        text/html:\n          schema:\n            items:\n              $ref: \"#/components/schemas/User\"\n            type: array\n    WatchInfo:\n      description: WatchInfo\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/WatchInfo\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/WatchInfo\"\n    empty:\n      description: APIEmpty is an empty response\n    error:\n      description: APIError is error format response\n      headers:\n        message:\n          schema:\n            type: string\n        url:\n          schema:\n            type: string\n    forbidden:\n      description: APIForbiddenError is a forbidden error response\n      headers:\n        message:\n          schema:\n            type: string\n        url:\n          schema:\n            type: string\n    notFound:\n      description: APINotFound is a not found empty response\n    parameterBodies:\n      description: parameterBodies\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/RepoTopicOptions\"\n        text/html:\n          schema:\n            $ref: \"#/components/schemas/RepoTopicOptions\"\n    redirect:\n      description: APIRedirect is a redirect response\n    validationError:\n      description: APIValidationError is error format response related to input validation\n      headers:\n        message:\n          schema:\n            type: string\n        url:\n          schema:\n            type: string\n  requestBodies:\n    CreateKeyOption:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateKeyOption\"\n    CreateOrgOption:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateOrgOption\"\n      required: true\n    IssueLabelsOption:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/IssueLabelsOption\"\n    CreateRepoOption:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CreateRepoOption\"\n    EditIssueCommentOption:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/EditIssueCommentOption\"\n  securitySchemes:\n    AccessToken:\n      in: query\n      name: access_token\n      type: apiKey\n    AuthorizationHeaderToken:\n      description: API tokens must be prepended with \"token\" followed by a space.\n      in: header\n      name: Authorization\n      type: apiKey\n    BasicAuth:\n      type: http\n      scheme: basic\n    SudoHeader:\n      description: Sudo API request as the user provided as the key. Admin privileges are\n        required.\n      in: header\n      name: Sudo\n      type: apiKey\n    SudoParam:\n      description: Sudo API request as the user provided as the key. Admin privileges are\n        required.\n      in: query\n      name: sudo\n      type: apiKey\n    Token:\n      in: query\n      name: token\n      type: apiKey\n  schemas:\n    APIError:\n      description: APIError is an api error with a message\n      properties:\n        message:\n          type: string\n          x-go-name: Message\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    AccessToken:\n      properties:\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        sha1:\n          type: string\n          x-go-name: Token\n        token_last_eight:\n          type: string\n          x-go-name: TokenLastEight\n      title: AccessToken represents an API access token.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    AddCollaboratorOption:\n      description: AddCollaboratorOption options when adding a user as a collaborator of a\n        repository\n      properties:\n        permission:\n          type: string\n          x-go-name: Permission\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    AddTimeOption:\n      description: AddTimeOption options for adding time to an issue\n      properties:\n        time:\n          description: time in seconds\n          format: int64\n          type: integer\n          x-go-name: Time\n      required:\n        - time\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    AnnotatedTag:\n      description: AnnotatedTag represents an annotated tag\n      properties:\n        message:\n          type: string\n          x-go-name: Message\n        object:\n          $ref: \"#/components/schemas/AnnotatedTagObject\"\n        sha:\n          type: string\n          x-go-name: SHA\n        tag:\n          type: string\n          x-go-name: Tag\n        tagger:\n          $ref: \"#/components/schemas/CommitUser\"\n        url:\n          type: string\n          x-go-name: URL\n        verification:\n          $ref: \"#/components/schemas/PayloadCommitVerification\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    AnnotatedTagObject:\n      description: AnnotatedTagObject contains meta information of the tag object\n      properties:\n        sha:\n          type: string\n          x-go-name: SHA\n        type:\n          type: string\n          x-go-name: Type\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Attachment:\n      description: Attachment a generic attachment\n      properties:\n        browser_download_url:\n          type: string\n          x-go-name: DownloadURL\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        download_count:\n          format: int64\n          type: integer\n          x-go-name: DownloadCount\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        size:\n          format: int64\n          type: integer\n          x-go-name: Size\n        uuid:\n          type: string\n          x-go-name: UUID\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Branch:\n      description: Branch represents a repository branch\n      properties:\n        commit:\n          $ref: \"#/components/schemas/PayloadCommit\"\n        name:\n          type: string\n          x-go-name: Name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Comment:\n      description: Comment represents a comment on a commit or issue\n      properties:\n        body:\n          type: string\n          x-go-name: Body\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        issue_url:\n          type: string\n          x-go-name: IssueURL\n        original_author:\n          type: string\n          x-go-name: OriginalAuthor\n        original_author_id:\n          format: int64\n          type: integer\n          x-go-name: OriginalAuthorID\n        pull_request_url:\n          type: string\n          x-go-name: PRURL\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Commit:\n      properties:\n        author:\n          $ref: \"#/components/schemas/User\"\n        commit:\n          $ref: \"#/components/schemas/RepoCommit\"\n        committer:\n          $ref: \"#/components/schemas/User\"\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        parents:\n          items:\n            $ref: \"#/components/schemas/CommitMeta\"\n          type: array\n          x-go-name: Parents\n        sha:\n          type: string\n          x-go-name: SHA\n        url:\n          type: string\n          x-go-name: URL\n      title: Commit contains information generated from a Git commit.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CommitMeta:\n      properties:\n        sha:\n          type: string\n          x-go-name: SHA\n        url:\n          type: string\n          x-go-name: URL\n      title: CommitMeta contains meta information of a commit in terms of API.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CommitUser:\n      properties:\n        date:\n          type: string\n          x-go-name: Date\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        name:\n          type: string\n          x-go-name: Name\n      title: CommitUser contains information of a user in the context of a commit.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    ContentsResponse:\n      description: ContentsResponse contains information about a repo's entry's (dir, file,\n        symlink, submodule) metadata and content\n      properties:\n        _links:\n          $ref: \"#/components/schemas/FileLinksResponse\"\n        content:\n          description: \"`content` is populated when `type` is `file`, otherwise null\"\n          type: string\n          x-go-name: Content\n        download_url:\n          type: string\n          x-go-name: DownloadURL\n        encoding:\n          description: \"`encoding` is populated when `type` is `file`, otherwise null\"\n          type: string\n          x-go-name: Encoding\n        git_url:\n          type: string\n          x-go-name: GitURL\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        name:\n          type: string\n          x-go-name: Name\n        path:\n          type: string\n          x-go-name: Path\n        sha:\n          type: string\n          x-go-name: SHA\n        size:\n          format: int64\n          type: integer\n          x-go-name: Size\n        submodule_git_url:\n          description: \"`submodule_git_url` is populated when `type` is `submodule`,\n            otherwise null\"\n          type: string\n          x-go-name: SubmoduleGitURL\n        target:\n          description: \"`target` is populated when `type` is `symlink`, otherwise null\"\n          type: string\n          x-go-name: Target\n        type:\n          description: \"`type` will be `file`, `dir`, `symlink`, or `submodule`\"\n          type: string\n          x-go-name: Type\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateEmailOption:\n      description: CreateEmailOption options when creating email addresses\n      properties:\n        emails:\n          description: email addresses to add\n          items:\n            type: string\n          type: array\n          x-go-name: Emails\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateFileOptions:\n      description: >-\n        CreateFileOptions options for creating files\n\n        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)\n      properties:\n        author:\n          $ref: \"#/components/schemas/Identity\"\n        branch:\n          description: branch (optional) to base this file from. if not given, the default\n            branch is used\n          type: string\n          x-go-name: BranchName\n        committer:\n          $ref: \"#/components/schemas/Identity\"\n        content:\n          description: content must be base64 encoded\n          type: string\n          x-go-name: Content\n        message:\n          description: message (optional) for the commit of this file. if not supplied, a\n            default message will be used\n          type: string\n          x-go-name: Message\n        new_branch:\n          description: new_branch (optional) will make a new branch from `branch` before\n            creating the file\n          type: string\n          x-go-name: NewBranchName\n      required:\n        - content\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateForkOption:\n      description: CreateForkOption options for creating a fork\n      properties:\n        organization:\n          description: organization name, if forking into an organization\n          type: string\n          x-go-name: Organization\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateGPGKeyOption:\n      description: CreateGPGKeyOption options create user GPG key\n      properties:\n        armored_public_key:\n          description: An armored GPG key to add\n          type: string\n          uniqueItems: true\n          x-go-name: ArmoredKey\n      required:\n        - armored_public_key\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateHookOption:\n      description: CreateHookOption options when create a hook\n      properties:\n        active:\n          default: false\n          type: boolean\n          x-go-name: Active\n        branch_filter:\n          type: string\n          x-go-name: BranchFilter\n        config:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: Config\n        events:\n          items:\n            type: string\n          type: array\n          x-go-name: Events\n        type:\n          enum:\n            - gitea\n            - gogs\n            - slack\n            - discord\n          type: string\n          x-go-name: Type\n      required:\n        - type\n        - config\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateIssueCommentOption:\n      description: CreateIssueCommentOption options for creating a comment on an issue\n      properties:\n        body:\n          type: string\n          x-go-name: Body\n      required:\n        - body\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateIssueOption:\n      description: CreateIssueOption options to create one issue\n      properties:\n        assignee:\n          description: username of assignee\n          type: string\n          x-go-name: Assignee\n        assignees:\n          items:\n            type: string\n          type: array\n          x-go-name: Assignees\n        body:\n          type: string\n          x-go-name: Body\n        closed:\n          type: boolean\n          x-go-name: Closed\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        labels:\n          description: list of label ids\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: Labels\n        milestone:\n          description: milestone id\n          format: int64\n          type: integer\n          x-go-name: Milestone\n        title:\n          type: string\n          x-go-name: Title\n      required:\n        - title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateKeyOption:\n      description: CreateKeyOption options when creating a key\n      properties:\n        key:\n          description: An armored SSH key to add\n          type: string\n          uniqueItems: true\n          x-go-name: Key\n        read_only:\n          description: Describe if the key has only read access or read/write\n          type: boolean\n          x-go-name: ReadOnly\n        title:\n          description: Title of the key to add\n          type: string\n          uniqueItems: true\n          x-go-name: Title\n      required:\n        - title\n        - key\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateLabelOption:\n      description: CreateLabelOption options for creating a label\n      properties:\n        color:\n          example: \"#00aabb\"\n          type: string\n          x-go-name: Color\n        description:\n          type: string\n          x-go-name: Description\n        name:\n          type: string\n          x-go-name: Name\n      required:\n        - name\n        - color\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateMilestoneOption:\n      description: CreateMilestoneOption options for creating a milestone\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        due_on:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateOrgOption:\n      description: CreateOrgOption options for creating an organization\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        full_name:\n          type: string\n          x-go-name: FullName\n        location:\n          type: string\n          x-go-name: Location\n        repo_admin_change_team_access:\n          type: boolean\n          x-go-name: RepoAdminChangeTeamAccess\n        username:\n          type: string\n          x-go-name: UserName\n        visibility:\n          description: possible values are `public` (default), `limited` or `private`\n          enum:\n            - public\n            - limited\n            - private\n          type: string\n          x-go-name: Visibility\n        website:\n          type: string\n          x-go-name: Website\n      required:\n        - username\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreatePullRequestOption:\n      description: CreatePullRequestOption options when creating a pull request\n      properties:\n        assignee:\n          type: string\n          x-go-name: Assignee\n        assignees:\n          items:\n            type: string\n          type: array\n          x-go-name: Assignees\n        base:\n          type: string\n          x-go-name: Base\n        body:\n          type: string\n          x-go-name: Body\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        head:\n          type: string\n          x-go-name: Head\n        labels:\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: Labels\n        milestone:\n          format: int64\n          type: integer\n          x-go-name: Milestone\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateReleaseOption:\n      description: CreateReleaseOption options when creating a release\n      properties:\n        body:\n          type: string\n          x-go-name: Note\n        draft:\n          type: boolean\n          x-go-name: IsDraft\n        name:\n          type: string\n          x-go-name: Title\n        prerelease:\n          type: boolean\n          x-go-name: IsPrerelease\n        tag_name:\n          type: string\n          x-go-name: TagName\n        target_commitish:\n          type: string\n          x-go-name: Target\n      required:\n        - tag_name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateRepoOption:\n      description: CreateRepoOption options when creating repository\n      properties:\n        auto_init:\n          description: Whether the repository should be auto-intialized?\n          type: boolean\n          x-go-name: AutoInit\n        description:\n          description: Description of the repository to create\n          type: string\n          x-go-name: Description\n        gitignores:\n          description: Gitignores to use\n          type: string\n          x-go-name: Gitignores\n        issue_labels:\n          description: Issue Label set to use\n          type: string\n          x-go-name: IssueLabels\n        license:\n          description: License to use\n          type: string\n          x-go-name: License\n        name:\n          description: Name of the repository to create\n          type: string\n          uniqueItems: true\n          x-go-name: Name\n        private:\n          description: Whether the repository is private\n          type: boolean\n          x-go-name: Private\n        readme:\n          description: Readme of the repository to create\n          type: string\n          x-go-name: Readme\n      required:\n        - name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateStatusOption:\n      description: CreateStatusOption holds the information needed to create a new Status\n        for a Commit\n      properties:\n        context:\n          type: string\n          x-go-name: Context\n        description:\n          type: string\n          x-go-name: Description\n        state:\n          $ref: \"#/components/schemas/StatusState\"\n        target_url:\n          type: string\n          x-go-name: TargetURL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateTeamOption:\n      description: CreateTeamOption options for creating a team\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        name:\n          type: string\n          x-go-name: Name\n        permission:\n          enum:\n            - read\n            - write\n            - admin\n          type: string\n          x-go-name: Permission\n        units:\n          example:\n            - repo.code\n            - repo.issues\n            - repo.ext_issues\n            - repo.wiki\n            - repo.pulls\n            - repo.releases\n            - repo.ext_wiki\n          items:\n            type: string\n          type: array\n          x-go-name: Units\n      required:\n        - name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    CreateUserOption:\n      description: CreateUserOption create user options\n      properties:\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        full_name:\n          type: string\n          x-go-name: FullName\n        login_name:\n          type: string\n          x-go-name: LoginName\n        must_change_password:\n          type: boolean\n          x-go-name: MustChangePassword\n        password:\n          type: string\n          x-go-name: Password\n        send_notify:\n          type: boolean\n          x-go-name: SendNotify\n        source_id:\n          format: int64\n          type: integer\n          x-go-name: SourceID\n        username:\n          type: string\n          x-go-name: Username\n      required:\n        - username\n        - email\n        - password\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    DeleteEmailOption:\n      description: DeleteEmailOption options when deleting email addresses\n      properties:\n        emails:\n          description: email addresses to delete\n          items:\n            type: string\n          type: array\n          x-go-name: Emails\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    DeleteFileOptions:\n      description: >-\n        DeleteFileOptions options for deleting files (used for other File\n        structs below)\n\n        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)\n      properties:\n        author:\n          $ref: \"#/components/schemas/Identity\"\n        branch:\n          description: branch (optional) to base this file from. if not given, the default\n            branch is used\n          type: string\n          x-go-name: BranchName\n        committer:\n          $ref: \"#/components/schemas/Identity\"\n        message:\n          description: message (optional) for the commit of this file. if not supplied, a\n            default message will be used\n          type: string\n          x-go-name: Message\n        new_branch:\n          description: new_branch (optional) will make a new branch from `branch` before\n            creating the file\n          type: string\n          x-go-name: NewBranchName\n        sha:\n          description: sha is the SHA for the file that already exists\n          type: string\n          x-go-name: SHA\n      required:\n        - sha\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    DeployKey:\n      description: DeployKey a deploy key\n      properties:\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        fingerprint:\n          type: string\n          x-go-name: Fingerprint\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        key:\n          type: string\n          x-go-name: Key\n        key_id:\n          format: int64\n          type: integer\n          x-go-name: KeyID\n        read_only:\n          type: boolean\n          x-go-name: ReadOnly\n        repository:\n          $ref: \"#/components/schemas/Repository\"\n        title:\n          type: string\n          x-go-name: Title\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditAttachmentOptions:\n      description: EditAttachmentOptions options for editing attachments\n      properties:\n        name:\n          type: string\n          x-go-name: Name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditDeadlineOption:\n      description: EditDeadlineOption options for creating a deadline\n      properties:\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n      required:\n        - due_date\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditGitHookOption:\n      description: EditGitHookOption options when modifying one Git hook\n      properties:\n        content:\n          type: string\n          x-go-name: Content\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditHookOption:\n      description: EditHookOption options when modify one hook\n      properties:\n        active:\n          type: boolean\n          x-go-name: Active\n        branch_filter:\n          type: string\n          x-go-name: BranchFilter\n        config:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: Config\n        events:\n          items:\n            type: string\n          type: array\n          x-go-name: Events\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditIssueCommentOption:\n      description: EditIssueCommentOption options for editing a comment\n      properties:\n        body:\n          type: string\n          x-go-name: Body\n      required:\n        - body\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditIssueOption:\n      description: EditIssueOption options for editing an issue\n      properties:\n        assignee:\n          type: string\n          x-go-name: Assignee\n        assignees:\n          items:\n            type: string\n          type: array\n          x-go-name: Assignees\n        body:\n          type: string\n          x-go-name: Body\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        milestone:\n          format: int64\n          type: integer\n          x-go-name: Milestone\n        state:\n          type: string\n          x-go-name: State\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditLabelOption:\n      description: EditLabelOption options for editing a label\n      properties:\n        color:\n          type: string\n          x-go-name: Color\n        description:\n          type: string\n          x-go-name: Description\n        name:\n          type: string\n          x-go-name: Name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditMilestoneOption:\n      description: EditMilestoneOption options for editing a milestone\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        due_on:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        state:\n          type: string\n          x-go-name: State\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditOrgOption:\n      description: EditOrgOption options for editing an organization\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        full_name:\n          type: string\n          x-go-name: FullName\n        location:\n          type: string\n          x-go-name: Location\n        repo_admin_change_team_access:\n          type: boolean\n          x-go-name: RepoAdminChangeTeamAccess\n        visibility:\n          description: possible values are `public`, `limited` or `private`\n          enum:\n            - public\n            - limited\n            - private\n          type: string\n          x-go-name: Visibility\n        website:\n          type: string\n          x-go-name: Website\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditPullRequestOption:\n      description: EditPullRequestOption options when modify pull request\n      properties:\n        assignee:\n          type: string\n          x-go-name: Assignee\n        assignees:\n          items:\n            type: string\n          type: array\n          x-go-name: Assignees\n        body:\n          type: string\n          x-go-name: Body\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        labels:\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: Labels\n        milestone:\n          format: int64\n          type: integer\n          x-go-name: Milestone\n        state:\n          type: string\n          x-go-name: State\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditReleaseOption:\n      description: EditReleaseOption options when editing a release\n      properties:\n        body:\n          type: string\n          x-go-name: Note\n        draft:\n          type: boolean\n          x-go-name: IsDraft\n        name:\n          type: string\n          x-go-name: Title\n        prerelease:\n          type: boolean\n          x-go-name: IsPrerelease\n        tag_name:\n          type: string\n          x-go-name: TagName\n        target_commitish:\n          type: string\n          x-go-name: Target\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditRepoOption:\n      description: EditRepoOption options when editing a repository's properties\n      properties:\n        allow_merge_commits:\n          description: either `true` to allow merging pull requests with a merge commit, or\n            `false` to prevent merging pull requests with merge commits.\n            `has_pull_requests` must be `true`.\n          type: boolean\n          x-go-name: AllowMerge\n        allow_rebase:\n          description: either `true` to allow rebase-merging pull requests, or `false` to\n            prevent rebase-merging. `has_pull_requests` must be `true`.\n          type: boolean\n          x-go-name: AllowRebase\n        allow_rebase_explicit:\n          description: either `true` to allow rebase with explicit merge commits (--no-ff),\n            or `false` to prevent rebase with explicit merge commits.\n            `has_pull_requests` must be `true`.\n          type: boolean\n          x-go-name: AllowRebaseMerge\n        allow_squash_merge:\n          description: either `true` to allow squash-merging pull requests, or `false` to\n            prevent squash-merging. `has_pull_requests` must be `true`.\n          type: boolean\n          x-go-name: AllowSquash\n        archived:\n          description: set to `true` to archive this repository.\n          type: boolean\n          x-go-name: Archived\n        default_branch:\n          description: sets the default branch for this repository.\n          type: string\n          x-go-name: DefaultBranch\n        description:\n          description: a short description of the repository.\n          type: string\n          x-go-name: Description\n        has_issues:\n          description: either `true` to enable issues for this repository or `false` to\n            disable them.\n          type: boolean\n          x-go-name: HasIssues\n        has_pull_requests:\n          description: either `true` to allow pull requests, or `false` to prevent pull\n            request.\n          type: boolean\n          x-go-name: HasPullRequests\n        has_wiki:\n          description: either `true` to enable the wiki for this repository or `false` to\n            disable it.\n          type: boolean\n          x-go-name: HasWiki\n        ignore_whitespace_conflicts:\n          description: either `true` to ignore whitespace for conflicts, or `false` to not\n            ignore whitespace. `has_pull_requests` must be `true`.\n          type: boolean\n          x-go-name: IgnoreWhitespaceConflicts\n        name:\n          description: name of the repository\n          type: string\n          uniqueItems: true\n          x-go-name: Name\n        private:\n          description: >-\n            either `true` to make the repository private or `false` to make it\n            public.\n\n            Note: you will get a 422 error if the organization restricts changing repository visibility to organization\n\n            owners and a non-owner tries to change the value of private.\n          type: boolean\n          x-go-name: Private\n        website:\n          description: a URL with more information about the repository.\n          type: string\n          x-go-name: Website\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditTeamOption:\n      description: EditTeamOption options for editing a team\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        name:\n          type: string\n          x-go-name: Name\n        permission:\n          enum:\n            - read\n            - write\n            - admin\n          type: string\n          x-go-name: Permission\n        units:\n          example:\n            - repo.code\n            - repo.issues\n            - repo.ext_issues\n            - repo.wiki\n            - repo.pulls\n            - repo.releases\n            - repo.ext_wiki\n          items:\n            type: string\n          type: array\n          x-go-name: Units\n      required:\n        - name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    EditUserOption:\n      description: EditUserOption edit user options\n      properties:\n        active:\n          type: boolean\n          x-go-name: Active\n        admin:\n          type: boolean\n          x-go-name: Admin\n        allow_create_organization:\n          type: boolean\n          x-go-name: AllowCreateOrganization\n        allow_git_hook:\n          type: boolean\n          x-go-name: AllowGitHook\n        allow_import_local:\n          type: boolean\n          x-go-name: AllowImportLocal\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        full_name:\n          type: string\n          x-go-name: FullName\n        location:\n          type: string\n          x-go-name: Location\n        login_name:\n          type: string\n          x-go-name: LoginName\n        max_repo_creation:\n          format: int64\n          type: integer\n          x-go-name: MaxRepoCreation\n        must_change_password:\n          type: boolean\n          x-go-name: MustChangePassword\n        password:\n          type: string\n          x-go-name: Password\n        prohibit_login:\n          type: boolean\n          x-go-name: ProhibitLogin\n        source_id:\n          format: int64\n          type: integer\n          x-go-name: SourceID\n        website:\n          type: string\n          x-go-name: Website\n      required:\n        - email\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Email:\n      description: Email an email address belonging to a user\n      properties:\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        primary:\n          type: boolean\n          x-go-name: Primary\n        verified:\n          type: boolean\n          x-go-name: Verified\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    FileCommitResponse:\n      properties:\n        author:\n          $ref: \"#/components/schemas/CommitUser\"\n        committer:\n          $ref: \"#/components/schemas/CommitUser\"\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        message:\n          type: string\n          x-go-name: Message\n        parents:\n          items:\n            $ref: \"#/components/schemas/CommitMeta\"\n          type: array\n          x-go-name: Parents\n        sha:\n          type: string\n          x-go-name: SHA\n        tree:\n          $ref: \"#/components/schemas/CommitMeta\"\n        url:\n          type: string\n          x-go-name: URL\n      title: FileCommitResponse contains information generated from a Git commit for\n        a repo's file.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    FileDeleteResponse:\n      description: FileDeleteResponse contains information about a repo's file that was\n        deleted\n      properties:\n        commit:\n          $ref: \"#/components/schemas/FileCommitResponse\"\n        content:\n          type: object\n          x-go-name: Content\n        verification:\n          $ref: \"#/components/schemas/PayloadCommitVerification\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    FileLinksResponse:\n      description: FileLinksResponse contains the links for a repo's file\n      properties:\n        git:\n          type: string\n          x-go-name: GitURL\n        html:\n          type: string\n          x-go-name: HTMLURL\n        self:\n          type: string\n          x-go-name: Self\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    FileResponse:\n      description: FileResponse contains information about a repo's file\n      properties:\n        commit:\n          $ref: \"#/components/schemas/FileCommitResponse\"\n        content:\n          $ref: \"#/components/schemas/ContentsResponse\"\n        verification:\n          $ref: \"#/components/schemas/PayloadCommitVerification\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GPGKey:\n      description: GPGKey a user GPG key to sign commit and tag in repository\n      properties:\n        can_certify:\n          type: boolean\n          x-go-name: CanCertify\n        can_encrypt_comms:\n          type: boolean\n          x-go-name: CanEncryptComms\n        can_encrypt_storage:\n          type: boolean\n          x-go-name: CanEncryptStorage\n        can_sign:\n          type: boolean\n          x-go-name: CanSign\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        emails:\n          items:\n            $ref: \"#/components/schemas/GPGKeyEmail\"\n          type: array\n          x-go-name: Emails\n        expires_at:\n          format: date-time\n          type: string\n          x-go-name: Expires\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        key_id:\n          type: string\n          x-go-name: KeyID\n        primary_key_id:\n          type: string\n          x-go-name: PrimaryKeyID\n        public_key:\n          type: string\n          x-go-name: PublicKey\n        subkeys:\n          items:\n            $ref: \"#/components/schemas/GPGKey\"\n          type: array\n          x-go-name: SubsKey\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GPGKeyEmail:\n      description: GPGKeyEmail an email attached to a GPGKey\n      properties:\n        email:\n          type: string\n          x-go-name: Email\n        verified:\n          type: boolean\n          x-go-name: Verified\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GitBlobResponse:\n      description: GitBlobResponse represents a git blob\n      properties:\n        content:\n          type: string\n          x-go-name: Content\n        encoding:\n          type: string\n          x-go-name: Encoding\n        sha:\n          type: string\n          x-go-name: SHA\n        size:\n          format: int64\n          type: integer\n          x-go-name: Size\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GitEntry:\n      description: GitEntry represents a git tree\n      properties:\n        mode:\n          type: string\n          x-go-name: Mode\n        path:\n          type: string\n          x-go-name: Path\n        sha:\n          type: string\n          x-go-name: SHA\n        size:\n          format: int64\n          type: integer\n          x-go-name: Size\n        type:\n          type: string\n          x-go-name: Type\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GitHook:\n      description: GitHook represents a Git repository hook\n      properties:\n        content:\n          type: string\n          x-go-name: Content\n        is_active:\n          type: boolean\n          x-go-name: IsActive\n        name:\n          type: string\n          x-go-name: Name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GitObject:\n      properties:\n        sha:\n          type: string\n          x-go-name: SHA\n        type:\n          type: string\n          x-go-name: Type\n        url:\n          type: string\n          x-go-name: URL\n      title: GitObject represents a Git object.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    GitTreeResponse:\n      description: GitTreeResponse returns a git tree\n      properties:\n        page:\n          format: int64\n          type: integer\n          x-go-name: Page\n        sha:\n          type: string\n          x-go-name: SHA\n        total_count:\n          format: int64\n          type: integer\n          x-go-name: TotalCount\n        tree:\n          items:\n            $ref: \"#/components/schemas/GitEntry\"\n          type: array\n          x-go-name: Entries\n        truncated:\n          type: boolean\n          x-go-name: Truncated\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Hook:\n      description: Hook a hook is a web hook when one repository changed\n      properties:\n        active:\n          type: boolean\n          x-go-name: Active\n        config:\n          additionalProperties:\n            type: string\n          type: object\n          x-go-name: Config\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        events:\n          items:\n            type: string\n          type: array\n          x-go-name: Events\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        type:\n          type: string\n          x-go-name: Type\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Identity:\n      description: Identity for a person's identity like an author or committer\n      properties:\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        name:\n          type: string\n          x-go-name: Name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Issue:\n      description: Issue represents an issue in a repository\n      properties:\n        assignee:\n          $ref: \"#/components/schemas/User\"\n        assignees:\n          items:\n            $ref: \"#/components/schemas/User\"\n          type: array\n          x-go-name: Assignees\n        body:\n          type: string\n          x-go-name: Body\n        closed_at:\n          format: date-time\n          type: string\n          x-go-name: Closed\n        comments:\n          format: int64\n          type: integer\n          x-go-name: Comments\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        labels:\n          items:\n            $ref: \"#/components/schemas/Label\"\n          type: array\n          x-go-name: Labels\n        milestone:\n          $ref: \"#/components/schemas/Milestone\"\n        number:\n          format: int64\n          type: integer\n          x-go-name: Index\n        original_author:\n          type: string\n          x-go-name: OriginalAuthor\n        original_author_id:\n          format: int64\n          type: integer\n          x-go-name: OriginalAuthorID\n        pull_request:\n          $ref: \"#/components/schemas/PullRequestMeta\"\n        state:\n          $ref: \"#/components/schemas/StateType\"\n        title:\n          type: string\n          x-go-name: Title\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n        url:\n          type: string\n          x-go-name: URL\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    IssueDeadline:\n      description: IssueDeadline represents an issue deadline\n      properties:\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    IssueLabelsOption:\n      description: IssueLabelsOption a collection of labels\n      properties:\n        labels:\n          description: list of label IDs\n          items:\n            format: int64\n            type: integer\n          type: array\n          x-go-name: Labels\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Label:\n      description: Label a label to an issue or a pr\n      properties:\n        color:\n          example: 00aabb\n          type: string\n          x-go-name: Color\n        description:\n          type: string\n          x-go-name: Description\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    MarkdownOption:\n      description: MarkdownOption markdown options\n      properties:\n        Context:\n          description: |-\n            Context to render\n\n            in: body\n          type: string\n        Mode:\n          description: |-\n            Mode to render\n\n            in: body\n          type: string\n        Text:\n          description: |-\n            Text markdown to render\n\n            in: body\n          type: string\n        Wiki:\n          description: |-\n            Is it a wiki page ?\n\n            in: body\n          type: boolean\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    MergePullRequestOption:\n      description: MergePullRequestForm form for merging Pull Request\n      properties:\n        Do:\n          enum:\n            - merge\n            - rebase\n            - rebase-merge\n            - squash\n          type: string\n        MergeMessageField:\n          type: string\n        MergeTitleField:\n          type: string\n      required:\n        - Do\n      type: object\n      x-go-name: MergePullRequestForm\n      x-go-package: code.gitea.io/gitea/modules/auth\n    MigrateRepoForm:\n      description: MigrateRepoForm form for migrating repository\n      properties:\n        auth_password:\n          type: string\n          x-go-name: AuthPassword\n        auth_username:\n          type: string\n          x-go-name: AuthUsername\n        clone_addr:\n          type: string\n          x-go-name: CloneAddr\n        description:\n          type: string\n          x-go-name: Description\n        issues:\n          type: boolean\n          x-go-name: Issues\n        labels:\n          type: boolean\n          x-go-name: Labels\n        milestones:\n          type: boolean\n          x-go-name: Milestones\n        mirror:\n          type: boolean\n          x-go-name: Mirror\n        private:\n          type: boolean\n          x-go-name: Private\n        pull_requests:\n          type: boolean\n          x-go-name: PullRequests\n        releases:\n          type: boolean\n          x-go-name: Releases\n        repo_name:\n          type: string\n          x-go-name: RepoName\n        uid:\n          format: int64\n          type: integer\n          x-go-name: UID\n        wiki:\n          type: boolean\n          x-go-name: Wiki\n      required:\n        - clone_addr\n        - uid\n        - repo_name\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/auth\n    Milestone:\n      description: Milestone milestone is a collection of issues on one repository\n      properties:\n        closed_at:\n          format: date-time\n          type: string\n          x-go-name: Closed\n        closed_issues:\n          format: int64\n          type: integer\n          x-go-name: ClosedIssues\n        description:\n          type: string\n          x-go-name: Description\n        due_on:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        open_issues:\n          format: int64\n          type: integer\n          x-go-name: OpenIssues\n        state:\n          $ref: \"#/components/schemas/StateType\"\n        title:\n          type: string\n          x-go-name: Title\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Organization:\n      description: Organization represents an organization\n      properties:\n        avatar_url:\n          type: string\n          x-go-name: AvatarURL\n        description:\n          type: string\n          x-go-name: Description\n        full_name:\n          type: string\n          x-go-name: FullName\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        location:\n          type: string\n          x-go-name: Location\n        repo_admin_change_team_access:\n          type: boolean\n          x-go-name: RepoAdminChangeTeamAccess\n        username:\n          type: string\n          x-go-name: UserName\n        visibility:\n          type: string\n          x-go-name: Visibility\n        website:\n          type: string\n          x-go-name: Website\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PRBranchInfo:\n      description: PRBranchInfo information about a branch\n      properties:\n        label:\n          type: string\n          x-go-name: Name\n        ref:\n          type: string\n          x-go-name: Ref\n        repo:\n          $ref: \"#/components/schemas/Repository\"\n        repo_id:\n          format: int64\n          type: integer\n          x-go-name: RepoID\n        sha:\n          type: string\n          x-go-name: Sha\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PayloadCommit:\n      description: PayloadCommit represents a commit\n      properties:\n        added:\n          items:\n            type: string\n          type: array\n          x-go-name: Added\n        author:\n          $ref: \"#/components/schemas/PayloadUser\"\n        committer:\n          $ref: \"#/components/schemas/PayloadUser\"\n        id:\n          description: sha1 hash of the commit\n          type: string\n          x-go-name: ID\n        message:\n          type: string\n          x-go-name: Message\n        modified:\n          items:\n            type: string\n          type: array\n          x-go-name: Modified\n        removed:\n          items:\n            type: string\n          type: array\n          x-go-name: Removed\n        timestamp:\n          format: date-time\n          type: string\n          x-go-name: Timestamp\n        url:\n          type: string\n          x-go-name: URL\n        verification:\n          $ref: \"#/components/schemas/PayloadCommitVerification\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PayloadCommitVerification:\n      description: PayloadCommitVerification represents the GPG verification of a commit\n      properties:\n        payload:\n          type: string\n          x-go-name: Payload\n        reason:\n          type: string\n          x-go-name: Reason\n        signature:\n          type: string\n          x-go-name: Signature\n        verified:\n          type: boolean\n          x-go-name: Verified\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PayloadUser:\n      description: PayloadUser represents the author or committer of a commit\n      properties:\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        name:\n          description: Full name of the commit author\n          type: string\n          x-go-name: Name\n        username:\n          type: string\n          x-go-name: UserName\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Permission:\n      description: Permission represents a set of permissions\n      properties:\n        admin:\n          type: boolean\n          x-go-name: Admin\n        pull:\n          type: boolean\n          x-go-name: Pull\n        push:\n          type: boolean\n          x-go-name: Push\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PublicKey:\n      description: PublicKey publickey is a user key to push code to repository\n      properties:\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        fingerprint:\n          type: string\n          x-go-name: Fingerprint\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        key:\n          type: string\n          x-go-name: Key\n        key_type:\n          type: string\n          x-go-name: KeyType\n        read_only:\n          type: boolean\n          x-go-name: ReadOnly\n        title:\n          type: string\n          x-go-name: Title\n        url:\n          type: string\n          x-go-name: URL\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PullRequest:\n      description: PullRequest represents a pull request\n      properties:\n        assignee:\n          $ref: \"#/components/schemas/User\"\n        assignees:\n          items:\n            $ref: \"#/components/schemas/User\"\n          type: array\n          x-go-name: Assignees\n        base:\n          $ref: \"#/components/schemas/PRBranchInfo\"\n        body:\n          type: string\n          x-go-name: Body\n        closed_at:\n          format: date-time\n          type: string\n          x-go-name: Closed\n        comments:\n          format: int64\n          type: integer\n          x-go-name: Comments\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        diff_url:\n          type: string\n          x-go-name: DiffURL\n        due_date:\n          format: date-time\n          type: string\n          x-go-name: Deadline\n        head:\n          $ref: \"#/components/schemas/PRBranchInfo\"\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        labels:\n          items:\n            $ref: \"#/components/schemas/Label\"\n          type: array\n          x-go-name: Labels\n        merge_base:\n          type: string\n          x-go-name: MergeBase\n        merge_commit_sha:\n          type: string\n          x-go-name: MergedCommitID\n        mergeable:\n          type: boolean\n          x-go-name: Mergeable\n        merged:\n          type: boolean\n          x-go-name: HasMerged\n        merged_at:\n          format: date-time\n          type: string\n          x-go-name: Merged\n        merged_by:\n          $ref: \"#/components/schemas/User\"\n        milestone:\n          $ref: \"#/components/schemas/Milestone\"\n        number:\n          format: int64\n          type: integer\n          x-go-name: Index\n        patch_url:\n          type: string\n          x-go-name: PatchURL\n        state:\n          $ref: \"#/components/schemas/StateType\"\n        title:\n          type: string\n          x-go-name: Title\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n        url:\n          type: string\n          x-go-name: URL\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    PullRequestMeta:\n      description: PullRequestMeta PR info if an issue is a PR\n      properties:\n        merged:\n          type: boolean\n          x-go-name: HasMerged\n        merged_at:\n          format: date-time\n          type: string\n          x-go-name: Merged\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Reference:\n      properties:\n        object:\n          $ref: \"#/components/schemas/GitObject\"\n        ref:\n          type: string\n          x-go-name: Ref\n        url:\n          type: string\n          x-go-name: URL\n      title: Reference represents a Git reference.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Release:\n      description: Release represents a repository release\n      properties:\n        assets:\n          items:\n            $ref: \"#/components/schemas/Attachment\"\n          type: array\n          x-go-name: Attachments\n        author:\n          $ref: \"#/components/schemas/User\"\n        body:\n          type: string\n          x-go-name: Note\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: CreatedAt\n        draft:\n          type: boolean\n          x-go-name: IsDraft\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Title\n        prerelease:\n          type: boolean\n          x-go-name: IsPrerelease\n        published_at:\n          format: date-time\n          type: string\n          x-go-name: PublishedAt\n        tag_name:\n          type: string\n          x-go-name: TagName\n        tarball_url:\n          type: string\n          x-go-name: TarURL\n        target_commitish:\n          type: string\n          x-go-name: Target\n        url:\n          type: string\n          x-go-name: URL\n        zipball_url:\n          type: string\n          x-go-name: ZipURL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    RepoCommit:\n      properties:\n        author:\n          $ref: \"#/components/schemas/CommitUser\"\n        committer:\n          $ref: \"#/components/schemas/CommitUser\"\n        message:\n          type: string\n          x-go-name: Message\n        tree:\n          $ref: \"#/components/schemas/CommitMeta\"\n        url:\n          type: string\n          x-go-name: URL\n      title: RepoCommit contains information of a commit in the context of a\n        repository.\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    RepoTopicOptions:\n      description: RepoTopicOptions a collection of repo topic names\n      properties:\n        topics:\n          description: list of topic names\n          items:\n            type: string\n          type: array\n          x-go-name: Topics\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Repository:\n      description: Repository represents a repository\n      properties:\n        allow_merge_commits:\n          type: boolean\n          x-go-name: AllowMerge\n        allow_rebase:\n          type: boolean\n          x-go-name: AllowRebase\n        allow_rebase_explicit:\n          type: boolean\n          x-go-name: AllowRebaseMerge\n        allow_squash_merge:\n          type: boolean\n          x-go-name: AllowSquash\n        archived:\n          type: boolean\n          x-go-name: Archived\n        avatar_url:\n          type: string\n          x-go-name: AvatarURL\n        clone_url:\n          type: string\n          x-go-name: CloneURL\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        default_branch:\n          type: string\n          x-go-name: DefaultBranch\n        description:\n          type: string\n          x-go-name: Description\n        empty:\n          type: boolean\n          x-go-name: Empty\n        fork:\n          type: boolean\n          x-go-name: Fork\n        forks_count:\n          format: int64\n          type: integer\n          x-go-name: Forks\n        full_name:\n          type: string\n          x-go-name: FullName\n        has_issues:\n          type: boolean\n          x-go-name: HasIssues\n        has_pull_requests:\n          type: boolean\n          x-go-name: HasPullRequests\n        has_wiki:\n          type: boolean\n          x-go-name: HasWiki\n        html_url:\n          type: string\n          x-go-name: HTMLURL\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        ignore_whitespace_conflicts:\n          type: boolean\n          x-go-name: IgnoreWhitespaceConflicts\n        mirror:\n          type: boolean\n          x-go-name: Mirror\n        name:\n          type: string\n          x-go-name: Name\n        open_issues_count:\n          format: int64\n          type: integer\n          x-go-name: OpenIssues\n        original_url:\n          type: string\n          x-go-name: OriginalURL\n        owner:\n          $ref: \"#/components/schemas/User\"\n        parent:\n          $ref: \"#/components/schemas/Repository\"\n        permissions:\n          $ref: \"#/components/schemas/Permission\"\n        private:\n          type: boolean\n          x-go-name: Private\n        size:\n          format: int64\n          type: integer\n          x-go-name: Size\n        ssh_url:\n          type: string\n          x-go-name: SSHURL\n        stars_count:\n          format: int64\n          type: integer\n          x-go-name: Stars\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n        watchers_count:\n          format: int64\n          type: integer\n          x-go-name: Watchers\n        website:\n          type: string\n          x-go-name: Website\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    SearchResults:\n      description: SearchResults results of a successful search\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Repository\"\n          type: array\n          x-go-name: Data\n        ok:\n          type: boolean\n          x-go-name: OK\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    ServerVersion:\n      description: ServerVersion wraps the version of the server\n      properties:\n        version:\n          type: string\n          x-go-name: Version\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    StateType:\n      description: StateType issue state type\n      type: string\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Status:\n      description: Status holds a single Status of a single Commit\n      properties:\n        context:\n          type: string\n          x-go-name: Context\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: Created\n        creator:\n          $ref: \"#/components/schemas/User\"\n        description:\n          type: string\n          x-go-name: Description\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        status:\n          $ref: \"#/components/schemas/StatusState\"\n        target_url:\n          type: string\n          x-go-name: TargetURL\n        updated_at:\n          format: date-time\n          type: string\n          x-go-name: Updated\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    StatusState:\n      description: |-\n        StatusState holds the state of a Status\n        It can be \"pending\", \"success\", \"error\", \"failure\", and \"warning\"\n      type: string\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Tag:\n      description: Tag represents a repository tag\n      properties:\n        commit:\n          $ref: \"#/components/schemas/CommitMeta\"\n        id:\n          type: string\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        tarball_url:\n          type: string\n          x-go-name: TarballURL\n        zipball_url:\n          type: string\n          x-go-name: ZipballURL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    Team:\n      description: Team represents a team in an organization\n      properties:\n        description:\n          type: string\n          x-go-name: Description\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        name:\n          type: string\n          x-go-name: Name\n        organization:\n          $ref: \"#/components/schemas/Organization\"\n        permission:\n          enum:\n            - none\n            - read\n            - write\n            - admin\n            - owner\n          type: string\n          x-go-name: Permission\n        units:\n          example:\n            - repo.code\n            - repo.issues\n            - repo.ext_issues\n            - repo.wiki\n            - repo.pulls\n            - repo.releases\n            - repo.ext_wiki\n          items:\n            type: string\n          type: array\n          x-go-name: Units\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    TimeStamp:\n      description: TimeStamp defines a timestamp\n      format: int64\n      type: integer\n      x-go-package: code.gitea.io/gitea/modules/timeutil\n    TopicName:\n      description: TopicName a list of repo topic names\n      properties:\n        topics:\n          items:\n            type: string\n          type: array\n          x-go-name: TopicNames\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    TopicResponse:\n      description: TopicResponse for returning topics\n      properties:\n        created:\n          format: date-time\n          type: string\n          x-go-name: Created\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        repo_count:\n          format: int64\n          type: integer\n          x-go-name: RepoCount\n        topic_name:\n          type: string\n          x-go-name: Name\n        updated:\n          format: date-time\n          type: string\n          x-go-name: Updated\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    TrackedTime:\n      description: TrackedTime worked time for an issue / pr\n      properties:\n        created:\n          format: date-time\n          type: string\n          x-go-name: Created\n        id:\n          format: int64\n          type: integer\n          x-go-name: ID\n        issue_id:\n          format: int64\n          type: integer\n          x-go-name: IssueID\n        time:\n          description: Time in seconds\n          format: int64\n          type: integer\n          x-go-name: Time\n        user_id:\n          format: int64\n          type: integer\n          x-go-name: UserID\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    UpdateFileOptions:\n      description: >-\n        UpdateFileOptions options for updating files\n\n        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)\n      properties:\n        author:\n          $ref: \"#/components/schemas/Identity\"\n        branch:\n          description: branch (optional) to base this file from. if not given, the default\n            branch is used\n          type: string\n          x-go-name: BranchName\n        committer:\n          $ref: \"#/components/schemas/Identity\"\n        content:\n          description: content must be base64 encoded\n          type: string\n          x-go-name: Content\n        from_path:\n          description: from_path (optional) is the path of the original file which will be\n            moved/renamed to the path in the URL\n          type: string\n          x-go-name: FromPath\n        message:\n          description: message (optional) for the commit of this file. if not supplied, a\n            default message will be used\n          type: string\n          x-go-name: Message\n        new_branch:\n          description: new_branch (optional) will make a new branch from `branch` before\n            creating the file\n          type: string\n          x-go-name: NewBranchName\n        sha:\n          description: sha is the SHA for the file that already exists\n          type: string\n          x-go-name: SHA\n      required:\n        - sha\n        - content\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    User:\n      description: User represents a user\n      properties:\n        avatar_url:\n          description: URL to the user's avatar\n          type: string\n          x-go-name: AvatarURL\n        created:\n          format: date-time\n          type: string\n          x-go-name: Created\n        email:\n          format: email\n          type: string\n          x-go-name: Email\n        full_name:\n          description: the user's full name\n          type: string\n          x-go-name: FullName\n        id:\n          description: the user's id\n          format: int64\n          type: integer\n          x-go-name: ID\n        is_admin:\n          description: Is the user an administrator\n          type: boolean\n          x-go-name: IsAdmin\n        language:\n          description: User locale\n          type: string\n          x-go-name: Language\n        last_login:\n          format: date-time\n          type: string\n          x-go-name: LastLogin\n        login:\n          description: the user's username\n          type: string\n          x-go-name: UserName\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n    UserHeatmapData:\n      description: UserHeatmapData represents the data needed to create a heatmap\n      properties:\n        contributions:\n          format: int64\n          type: integer\n          x-go-name: Contributions\n        timestamp:\n          $ref: \"#/components/schemas/TimeStamp\"\n      type: object\n      x-go-package: code.gitea.io/gitea/models\n    WatchInfo:\n      description: WatchInfo represents an API watch status of one repository\n      properties:\n        created_at:\n          format: date-time\n          type: string\n          x-go-name: CreatedAt\n        ignored:\n          type: boolean\n          x-go-name: Ignored\n        reason:\n          type: object\n          x-go-name: Reason\n        repository_url:\n          type: string\n          x-go-name: RepositoryURL\n        subscribed:\n          type: boolean\n          x-go-name: Subscribed\n        url:\n          type: string\n          x-go-name: URL\n      type: object\n      x-go-package: code.gitea.io/gitea/modules/structs\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/gitea.io-1.1.1-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/gitea.io-1.1.1-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/AccessToken\" name conflict: \"AccessToken\"",
	"NotImplemented": [
		"complex text/plain"
	]
}