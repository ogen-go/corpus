{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/asana/openapi.yaml",
			"byteSize": 374817,
			"content": "openapi: 3.0.0\r\nservers:\r\n  - description: Asana API endpoint.\r\n    url: https://app.asana.com/api/1.0\r\ninfo:\r\n  x-ballerina-display:\r\n    label: Asana\r\n    iconPath: \"icon.png\"\r\n  contact:\r\n    name: Asana Support\r\n    url: https://asana.com/support\r\n  description: \u003e-\r\n    This is a generated connector for [Asana API v1.0](https://developers.asana.com/docs) OpenAPI specification.\r\n\r\n    This API enables you to help teams organize, track and manage their work.\r\n\r\n    For additional help getting started with the API, visit [Asana API](https://developers.asana.com).\r\n  x-ballerina-init-description: \u003e\r\n    The connector initialization requires setting the API credentials.\r\n\r\n    Create an [Asana API Account](https://asana.com/create-account) and obtain tokens following [this guide](https://developers.asana.com/docs/authentication).\r\n  license:\r\n    name: Apache 2.0\r\n    url: https://www.apache.org/licenses/LICENSE-2.0\r\n  termsOfService: https://asana.com/terms\r\n  title: Asana\r\n  version: \"1.0\"\r\n  x-apisguru-categories:\r\n    - developer_tools\r\n  x-docs-schema-whitelist:\r\n    - AsanaResource\r\n    - AsanaNamedResource\r\n    - AttachmentResponse\r\n    - AttachmentCompact\r\n    - BatchResponse\r\n    - CustomFieldSettingResponse\r\n    - CustomFieldSettingCompact\r\n    - CustomFieldResponse\r\n    - CustomFieldCompact\r\n    - EnumOption\r\n    - EventResponse\r\n    - ErrorResponse\r\n    - GoalResponse\r\n    - GoalCompact\r\n    - JobResponse\r\n    - JobCompact\r\n    - OrganiztaionExportResponse\r\n    - OrganiztaionExportCompact\r\n    - PortfolioMembershipResponse\r\n    - PortfolioMembershipCompact\r\n    - PortfolioResponse\r\n    - PortfolioCompact\r\n    - ProjectMembershipResponse\r\n    - ProjectMembershipCompact\r\n    - ProjectResponse\r\n    - ProjectCompact\r\n    - ProjectStatusResponse\r\n    - ProjectStatusCompact\r\n    - SectionResponse\r\n    - SectionCompact\r\n    - StoryResponse\r\n    - StoryCompact\r\n    - TagResponse\r\n    - TagCompact\r\n    - TaskResponse\r\n    - TaskCompact\r\n    - TeamMembershipResponse\r\n    - TeamMembershipCompact\r\n    - TeamResponse\r\n    - TeamCompact\r\n    - UserTaskListResponse\r\n    - UserTaskListCompact\r\n    - UserResponse\r\n    - UserCompact\r\n    - WebhookFilter\r\n    - WebhookResponse\r\n    - WebhookCompact\r\n    - WorkspaceMembershipResponse\r\n    - WorkspaceMembershipCompact\r\n    - WorkspaceResponse\r\n    - WorkspaceCompact\r\n  x-logo:\r\n    url: https://d1gwm4cf8hecp4.cloudfront.net/images/favicons/apple-touch-icon-57x57.png\r\n  x-origin:\r\n    - format: openapi\r\n      url: https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml\r\n      version: \"3.0\"\r\n  x-providerName: asana.com\r\n  x-public-description: This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).\r\nsecurity:\r\n  - personalAccessToken: []\r\n  - oauth2: []\r\ntags:\r\n  - description: An *attachment* object represents any file attached to a task in Asana, whether it’s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive.\r\n    name: Attachments\r\n  - description: |-\r\n      There are many cases where you want to accomplish a variety of work in the Asana API but want to minimize the number of HTTP requests you make. For example:\r\n\r\n      * Modern browsers limit the number of requests that a single web page can\r\n        make at once.\r\n      * Mobile apps will use more battery life to keep the cellular radio on\r\n        when making a series of requests.\r\n      * There is an overhead cost to developing software that can make multiple\r\n        requests in parallel.\r\n      * Some cloud platforms handle parallelism poorly, or disallow it\r\n        entirely.\r\n\r\n\r\n      To make development easier in these use cases, Asana provides a **batch API** that enables developers to perform multiple “actions” by making only a single HTTP request.\r\n\r\n      #### Making a Batch Request\r\n\r\n      To make a batch request, send a `POST` request to `/batch`. Like other `POST` endpoints, the body should contain a `data` envelope. Inside this envelope should be a single `actions` field, containing a list of “action” objects.  Each action represents a standard request to an existing endpoint in the Asana API.\r\n\r\n      **The maximum number of actions allowed in a single batch request is 10**. Making a batch request with no actions in it will result in a `400 Bad Request`.\r\n\r\n      When the batch API receives the list of actions to execute, it will dispatch those actions to the already-implemented endpoints specified by the `relative_path` and `method` for each action. This happens in parallel, so all actions in the request will be processed simultaneously. There is no guarantee of the execution order for these actions, nor is there a way to use the output of one action as the input of another action (such as creating a task and then commenting on it).\r\n\r\n      The response to the batch request will contain (within the `data` envelope) a list of result objects, one for each action. The results are guaranteed to be in the same order as the actions in the request, e.g., the first result in the response corresponds to the first action in the request.\r\n\r\n      The batch API will always attempt to return a `200 Success` response with individual result objects for each individual action in the request. Only in certain cases (such as missing authorization or malformed JSON in the body) will the entire request fail with another status code. Even if every individual action in the request fails, the batch API will still return a `200 Success` response, and each result object in the response will contain the errors encountered with each action.\r\n\r\n      #### Rate Limiting\r\n\r\n      The batch API fully respects all of our rate limiting. This means that a batch request counts against *both* the standard rate limiter and the concurrent request limiter as though you had made a separate HTTP request for every individual action. For example, a batch request with five actions counts as five separate requests in the standard rate limiter, and counts as five concurrent requests in the concurrent request limiter. The batch request itself incurs no cost.\r\n\r\n      If any of the actions in a batch request would exceed any of the enforced limits, the *entire* request will fail with a `429 Too Many Requests` error. This is to prevent the unpredictability of which actions might succeed if not all of them could succeed.\r\n\r\n      #### Restrictions\r\n\r\n      Not every endpoint can be accessed through the batch API. Specifically, the following actions cannot be taken and will result in a `400 Bad Request` for that action:\r\n\r\n      * Uploading attachments\r\n      * Creating, getting, or deleting organization exports\r\n      * Any SCIM operations\r\n      * Nested calls to the batch API\r\n    name: Batch API\r\n  - description: |-\r\n      In the Asana application, Tasks, Projects, and Portfolios can hold user-specified Custom Fields which provide extra information; for example, a priority value or a number representing the time required to complete a Task. This lets a user define the type of information that each Item within a Project or Portfolio can contain in addition to the built-in fields that Asana provides.\r\n\r\n      **Note:** Custom Fields are a premium feature. Integrations which work with Custom Fields need to handle an assortment of use cases for free and premium users in context of free and premium organizations. For a detailed examination of to what data users will have access in different circumstances, read the section below on access control.\r\n\r\n      `display_value` is a read-only field that will always be a string. For apps that use custom fields, this is a great way to safely display/export the value of a custom field, regardless of its type. We suggest apps use this field in order to future-proof for changes to Custom Fields.\r\n\r\n      The characteristics of Custom Fields are:\r\n\r\n      * There is metadata that defines the Custom Field. This metadata can be shared across an entire workspace, or be specific to a Project or Portfolio.\r\n      * Creating a Custom Field Setting on a Project or Portfolio means each direct child will have the custom field. This is conceptually akin to adding columns in a database or a spreadsheet: every Task (row) in the Project (table) can contain information for that field, including \"blank\" values, i.e. `null` data. For Portfolio custom fields, every Project (row) in the Portfolio (table) will contain information for the custom field.\r\n      * Custom Field Settings only go one child deep. Meaning a custom field setting on a portfolio will give each project the custom field, but not each task within those projects.\r\n      * Tasks have Custom Field _values_ assigned to them.\r\n\r\n      A brief example: let's imagine that an organization has defined a Custom Field for \"Priority\". This field is of `enum` type and can have user-defined values of `Low`, `Medium`, or `High`. This is the field metadata, and it is visible within, and shared across, the entire organization.\r\n\r\n      A Project is then created in the organization, called \"Bugs\", and the \"Priority\" Custom Field is associated with that Project. This will allow all Tasks within the \"Bugs\" Project to have an associated \"Priority\".\r\n\r\n      A new Task is created within \"Bugs\". This Task, then, has a field named \"Priority\" which can take on the Custom Field value of one of `[null]`, `Low`, `Medium`, and `High`.\r\n\r\n      These Custom Fields are accessible via the API through a number of endpoints at the top level (e.g. `/custom_fields` and `/custom_field_settings`) and through calls on Workspaces, Portfolios, Projects, and Tasks resources. The API also provides a way to fetch both the metadata and data which define each particular Custom Field, so that a client application may render proper UI to display or edit the values.\r\n\r\n      Custom Field aware integrations need to be aware of the basic types that Custom Fields can adopt. These types are:\r\n\r\n      * `text` - an arbitrary, relatively short string of text\r\n      * `number` - a number with a defined level of precision\r\n      * `enum` - a selection from a defined list of options\r\n\r\n      Text fields are currently limited to 1024 characters. On Tasks, their Custom Field value will have a `text_value` property to represent this field.\r\n\r\n      Number fields can have an arbitrary `precision` associated with them; for example, a precision of `2` would round its value to the second (hundredths) place, i.e. 1.2345 would round to 1.23. On Tasks, the Custom Field value will have a `number_value` property to represent this field.\r\n\r\n      Enum fields represent a selection from a list of options. On the metadata, they will contain all of the options in an array. Each option has 4 properties:\r\n\r\n      * `gid` - the gid of this enum option. Note that this is the gid of the _option_ - the Custom Field itself has a separate `gid`.\r\n      * `name` - the name of the option, e.g. \"Choice #1\"\r\n      * `enabled` - whether this field is enabled. Disabled fields are not available to choose from when disabled, and are visually hidden in the Asana application, but they remain in the metadata for Custom Field values which were set to the option before the option was disabled.\r\n      * `color` - a color associated with this choice.\r\n\r\n      On the Task's Custom Field value, the enum will have an `enum_value` property which will be the same as one of the choices from the list defined in the Custom Field metadata.\r\n\r\n      #### Querying an organization for its Custom Fields\r\n\r\n      For Custom Fields shared across the workspace or organization, the Workspace [can be queried](/docs/get-a-workspace-39-s-custom-fields) for its list of defined Custom Fields. Like other collection queries, the fields will be returned as a compact record; slightly different from most other compact records is the fact that the compact record for Custom Fields includes `type` as well as `gid` and `name`.\r\n\r\n      #### Accessing Custom Field definitions\r\n\r\n      The [Custom Fields](/docs/get-a-custom-field) reference describes how the metadata which defines a Custom Field is accessed. A GET request with a `gid` can be issued on the `/custom_fields` endpoint to fetch the full definition of a single Custom Field given its `gid` from (for instance) listing all Custom Fields on a Workspace, or getting the `gid` from a Custom Field Settings object or a Task.\r\n\r\n      #### Associating Custom Fields with a Project or Portfolio\r\n\r\n      A mapping between a Custom Field and a Project or Portfolio is handled with a [Custom Field Settings](/docs/asana-custom-field-settings) object. This object contains a reference for each of the Custom Field and the Project or Porfolio, as well as additional information about the status of that particular Custom Field. For instance, `is_important`, which defines whether or not the custom field will appear in the list/grid on the Asana application.\r\n\r\n      #### Accessing Custom Field values on Tasks or Projects\r\n\r\n      The [Tasks](/docs/get-a-task) reference has information on how Custom Fields look on Tasks. Custom Fields will return as an array on the property `custom_fields`, and each entry will contain, side-by-side, the compact representation of the Custom Field metadata and a `{typename}_value` property that stores the value set for the Custom Field.\r\n\r\n      Of particular note is that the top-level `gid` of each entry in the `custom_fields` array is the `gid` of the Custom Field metadata, as it is the compact representation of this metadata. This can be used to refer to the full metadata by making a request to the `/custom_fields/{custom_fields_id}` endpoint as described above.\r\n\r\n      Custom Fields can be set just as in the Asana-defined fields on a task via POST or PUT requests. You can see an example on the [update a task](/docs/update-a-task) endpoint.\r\n\r\n      Custom Fields on projects follow this same pattern.\r\n\r\n      #### Warning: Program defensively with regards to Custom Field definitions\r\n\r\n      Asana application users have the ability to change the definitions of Custom Field metadata. This means that as you write scripts or applications to work with them, it's possible for the definitions to change at any time, which may cause an application using them to break or malfunction if it makes assumptions about the metadata for a particular Custom Field. When using Custom Fields, it is a good idea to program *defensively*, meaning you your application should double-check that the Custom Field metadata is what it expects.\r\n\r\n      Storing the state of the Custom Field metadata for too long if you dynamically create a model for it can cause your model to become unsynchronized with the model stored in Asana. If you encounter (for example) an `enum` value on a Task that does not match any option in your metadata model, your metadata model has become out of date with the Custom Field metadata.\r\n\r\n      **Note:** We are currently studying proposals for future implementations to more elegantly handle the modification of Custom Field metadata for application integrations.\r\n\r\n      #### Enabled and Disabled Values\r\n\r\n      When information that is contained in a Custom Field value loses a logical association with its metadata definition, the value becomes disabled. This can happen in a couple of simple ways, for example, if you remove the Custom Field metadata from a Project, or move a Task with a Custom Field to a different Project which does not have the Custom Field metadata associated with it. The value remains on the Task, and the Custom Field metadata can still be found and examined, but as the context in which the Custom Field makes sense is gone, the Custom Field cannot change its value; it can only be cleared.\r\n\r\n      Note: Tasks that are associated with multiple Projects do not become disabled, so long as at least one of the Projects is still associated with the Custom Field metadata. In other words, Tasks with multiple Projects will retain logically associated to the set of Custom Field metadata represented by all of their Projects.\r\n\r\n      Moving the Task back under a Project with that Custom Field applied to it or applying the Custom Field metadata to the current Project will return the Custom Field value to an enabled state. In this scenario, the Custom Field will be re-enabled and editable again.\r\n\r\n      In the Asana application, disabled fields are grayed out and not allowed to change, other than to be discarded. In the API, we return a property `enabled: false` to inform the external application that the value has been disabled.\r\n\r\n      Note that the API enforces the same operations on disabled Custom Field values as hold in the Asana application: they may not have their values changed, since the lack of context for the values of a custom field in general doesn't provide enough information to know what new values should be. Setting the Custom Field value to `null` will clear and remove the Custom Field value from the Task.\r\n\r\n      #### Custom Field access control\r\n\r\n      Custom Fields are a complex feature of the Asana platform, and their access in the Asana application and in the API vary based on the status of the user and project. When building your application, it's best to be defensive and not assume the given user will have read or write access to a custom field, and fail gracefully when this occurs.\r\n    name: Custom Fields\r\n  - description: Custom fields are attached to a particular project with the Custom Field Settings resource. This resource both represents the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing; for instance, the `is_important` property determines some possible application-specific handling of that custom field.\r\n    name: Custom Field Settings\r\n  - description: |-\r\n      An *event* is an object representing a change to a resource that was observed by an event subscription.\r\n\r\n      In general, requesting events on a resource is faster and subject to higher rate limits than requesting the resource itself. Additionally, change events bubble up - listening to events on a project would include when stories are added to tasks in the project, even on subtasks.\r\n\r\n      Establish an initial sync token by making a request with no sync token. The response will be a `412` error - the same as if the sync token had expired.\r\n\r\n      Subsequent requests should always provide the sync token from the immediately preceding call.\r\n\r\n      Sync tokens may not be valid if you attempt to go ‘backward’ in the history by requesting previous tokens, though re-requesting the current sync token is generally safe, and will always return the same results.\r\n\r\n      When you receive a `412 Precondition Failed` error, it means that the sync token is either invalid or expired. If you are attempting to keep a set of data in sync, this signals you may need to re-crawl the data.\r\n\r\n      Sync tokens always expire after 24 hours, but may expire sooner, depending on load on the service.\r\n    name: Events\r\n  - description: |-\r\n      Jobs represent processes that handle asynchronous work.\r\n      Jobs are created when an endpoint requests an action that will be handled asynchronously. Such as project or task duplication.\r\n      Only the creator of the duplication process can access the duplication status of the new object.\r\n    name: Jobs\r\n  - description: |-\r\n      An *organization_export* object represents a request to export the complete data of an Organization in JSON format.\r\n\r\n      To export an Organization using this API:\r\n\r\n      * Create an `organization_export`\r\n        [request](/docs/create-an-organization-export-request)\r\n        and store the id that is returned.\r\n      * Request the `organization_export` every few minutes, until the\r\n        `state` field contains ‘finished’.\r\n      * Download the file located at the URL in the `download_url` field. * Exports can take a long time, from several minutes to a few hours\r\n        for large Organizations.\r\n\r\n\r\n      *Note: These endpoints are only available to [Service Accounts](https://asana.com/guide/help/premium/service-accounts) of an [Enterprise](https://asana.com/enterprise) Organization.*\r\n    name: Organization Exports\r\n  - description: |-\r\n      A `portfolio` gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/docs/asana-project-statuses) update.\r\n      Portfolios have some restrictions on size. Each portfolio has a max of 250 items and, like projects, a max of 20 custom fields.\r\n    name: Portfolios\r\n  - description: This object determines if a user is a member of a portfolio.\r\n    name: Portfolio Memberships\r\n  - description: |-\r\n      A `project` represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.\r\n\r\n      Projects in organizations are shared with a single team. You cannot currently change the team of a project via the API. Non-organization workspaces do not have teams and so you should not specify the team of project in a regular workspace.\r\n\r\n      Followers of a project are a subset of the members of that project. Followers of a project will receive all updates including tasks created, added and removed from that project. Members of the project have access to and will receive status updates of the project. Adding followers to a project will add them as members if they are not already, removing followers from a project will not affect membership.\r\n    name: Projects\r\n  - description: With the introduction of “comment-only” projects in Asana, a user’s membership in a project comes with associated permissions. These permissions (whether a user has full access to the project or comment-only access) are accessible through the project memberships endpoints described here.\r\n    name: Project Memberships\r\n  - description: |-\r\n      A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: \"green\" for projects that are on track, \"yellow\" for projects at risk, \"red\" for projects that are behind, and \"blue\" for projects on hold.\r\n\r\n      Project statuses can be created and deleted, but not modified.\r\n    name: Project Statuses\r\n  - description: |-\r\n      A *section* is a subdivision of a project that groups tasks together. It can either be a header above a list of tasks in a list view or a column in a board view of a project.\r\n\r\n      Sections are largely a shared idiom in Asana’s API for both list and board views of a project regardless of the project’s layout.\r\n\r\n      The ‘memberships’ property when [getting a task](/docs/get-a-task) will return the information for the section or the column under ‘section’ in the response.\r\n    name: Sections\r\n  - description: |-\r\n      *See [our forum post](https://forum.asana.com/t/no-more-parsing-story-text-new-fields-on-stories/42924) for more info on when conditional fields are returned.*\r\n\r\n      A *story* represents an activity associated with an object in the Asana system. Stories are generated by the system whenever users take actions such as creating or assigning tasks, or moving tasks between projects. *Comments* are also a form of user-generated story.\r\n    name: Stories\r\n  - description: |-\r\n      A tag is a label that can be attached to any task in Asana. It exists in a single workspace or organization.\r\n\r\n      Tags have some metadata associated with them, but it is possible that we will simplify them in the future so it is not encouraged to rely too heavily on it. Unlike projects, tags do not provide any ordering on the tasks they are associated with.\r\n    name: Tags\r\n  - description: |-\r\n      The task is the basic object around which many operations in Asana are centered. In the Asana application, multiple tasks populate the middle pane according to some view parameters, and the set of selected tasks determines the more detailed information presented in the details pane.\r\n\r\n      Sections are unique in that they will be included in the *memberships* field of task objects returned in the API when the task is within a section. They can also be used to manipulate the ordering of a task within a project.\r\n\r\n      [Queries](/docs/get-a-set-of-tasks) return a compact representation of each object which is typically the id and name fields. Interested in a specific set of fields or all of the fields? Use [field selectors](/docs/input-output-options) to manipulate what data is included in a response.\r\n    name: Tasks\r\n  - description: A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.\r\n    name: Teams\r\n  - description: This object determines if a user is a member of a team.\r\n    name: Team Memberships\r\n  - description: The typeahead search API provides search for objects from a single workspace.\r\n    name: Typeahead\r\n  - description: |-\r\n      A user object represents an account in Asana that can be given access to various workspaces, projects, and tasks.\r\n\r\n      Like other objects in the system, users are referred to by numerical IDs. However, the special string identifier `me` can be used anywhere a user ID is accepted, to refer to the current authenticated user.\r\n    name: Users\r\n  - description: A user task list represents the tasks assigned to a particular user.\r\n    name: User Task Lists\r\n  - description: |-\r\n      *Note: Recently, some users have seen intermittent delays with webhook event distributions. We are in the process of transferring the webhooks system to a more reliable infrastructure while also iteratively improving the current system. As such, for the time being we advise against using webhooks for functionality beyond logging (e.g., syncing state with real-time notification data).*\r\n      *If you experience latency issues, we recommend using webhooks in conjunction with fetching the resource periodically (e.g. [GET a task](https://developers.asana.com/docs/get-a-task)).  More details and ongoing updates can be found in [this post](https://forum.asana.com/t/an-update-on-our-webhooks/119684) in the developer forum.*\r\n      Webhooks allow an application to be notified of changes in Asana.\r\n\r\n      This is similar to our [Events](/docs/asana-events) resource, but webhooks \"push\" events via HTTP `POST` rather than expecting integrations to repeatedly \"poll\" for them. For services that are already accessible on the Internet this is often more convenient and efficient.\r\n\r\n      However, webhooks _require_ a server to be accessible over the internet at all times to receive the event. For most simple integrations, Events provide much of the same benefits while using a significantly simpler implementation which does not require maintaining an internet-accessible server.\r\n\r\n      #### The webhook \"handshake\"\r\n      In order to ensure that the receiving server is available to receive incoming events from a webhook Asana will `POST` to the requested target endpoint during the webhook creation request. In other words, the outgoing webhook creation request will wait to return until another full `POST` request from Asana's servers to the target has been completed, *then* the webhook creation request can return with a successful response.\r\n\r\n      *Note: this means that your server must be able to handle being blocked on the outgoing create request while still being able to receive and handle an incoming request. A common reason that webhook handshakes fail is that servers are not able to asynchronously handle the handshake request.*\r\n\r\n      Included in the webhook handshake is a HTTP header called `X-Hook-Secret`.  To successfully complete the handshake the receiving server should echo back the same header with the same value and a `200 OK` or `204 No Content` response code.\r\n\r\n      The purpose of this header is to provide a shared secret that both Asana and the receiving server both store--this is the only time it will be transmitted. In future webhook events Asana will use this key to compute a signature over the webhook callback request's body which can be used to verify that the incoming request was genuine (details below). We strongly recommend that you take advantage of this security feature and reject webhooks that have an invalid signature.\r\n\r\n      #### Receiving Events\r\n\r\n      Because multiple events often happen in short succession, a webhook payload is designed to be able to transmit multiple events at once. The schema of these events is described in [Event](/docs/tocS_Event).\r\n\r\n      The HTTP POST that the target receives contains:\r\n\r\n\r\n       * An `X-Hook-Signature` header, which allows verifying that the payload\r\n       is genuine.  The signature is a SHA256 HMAC signature computed on the\r\n       request body using the shared secret transmitted during the handshake.\r\n       Verification is **strongly recommended**, as it would otherwise be\r\n       possible for an attacker to POST a malicious payload to the same\r\n       endpoint.\r\n       * A JSON body with a single key, `events`, containing an array of the\r\n       events that have occurred since the last webhook delivery. (Note that this\r\n       list may be empty, as periodically we send a \"heartbeat\" webhook to\r\n       verify that the endpoint is still available.)\r\n\r\n\r\n      Note that events are \"skinny\" and contain only some basic details of the change, not the whole resource. We expect integrations to make additional calls to the API to retrieve the latest state from Asana.\r\n\r\n      #### Filtering\r\n      Webhook events will \"propagate up\" from contained objects through to parent objects--for instance, changes to comments will be sent to webhooks on the parent task and to ones on the task's projects. In this way a webhook on a project will be notified of all changes that occur in all of its tasks, subtasks of those tasks, and comments on those tasks and subtasks.\r\n\r\n      This can be a lot of data, some of which might not be relevant to a particular integration, so Asana's webhooks have a filtering feature which allows integrations to specify only the types of changes that they care about. By specifying the list of [WebhookFilter](/docs/tocS_WebhookFilter)s on webhook creation an integration can select just the subset of events it wants to receive.  When filters are specified on the webhook events will only be delivered if they pass any of the filters specified when creating the webhook.\r\n\r\n      To reduce the volume of data to transfer, webhooks created on teams, portfolios, and workspaces *must* specify filters. In addition, the set of event filters that can be placed on a team-level or workspace-level webhook is more limited than filters for webhooks that are created on lower-level resources:\r\n\r\n\r\n       * Webhook events from tasks, subtasks, and stories won't be propagated\r\n       to these higher-level webhooks, so all changes on these resources are\r\n       automatically filtered out.\r\n       * Webhook events from `project` resources can be filtered for these\r\n       `action`s: `added`, `removed`, `deleted`, `undeleted`, and `changed`.\r\n       * Webhook events from `team_membership` resources can be filtered to\r\n       `action`s `added` and `removed`.\r\n       * Webhook events from `workspace_membership` resources can be filtered\r\n       to `added` and `removed`.\r\n\r\n\r\n      #### Error Handling and Retry\r\n\r\n      If we attempt to send a webhook payload and we receive an error status code, or the request times out, we will retry delivery with exponential backoff. In general, if your servers are not available for an hour, you can expect it to take no longer than approximately an hour after they come back before the paused delivery resumes. However, if we are unable to deliver a message for 24 hours the webhook will be deactivated.\r\n      #### Resources and Actions\r\n      This is not an exhaustive list, but should cover the most common use cases.\r\n\r\n\r\n       * Attachment - deleted, undeleted\r\n       * Portfolio - added, deleted, removed\r\n       * Project - added, changed, deleted, removed, undeleted\r\n       * Project Membership - added, removed\r\n       * Section - added, changed, deleted, undeleted\r\n       * Story - added, removed, undeleted\r\n       * Tag - added, changed, deleted, undeleted\r\n       * Task - added, changed, deleted, removed, undeleted\r\n       * Team - added, changed, deleted\r\n       * Team Membership - added, removed\r\n       * Workspace - added, removed, changed\r\n       * Workspace Memberships - added, removed\r\n\r\n\r\n      #### Webhook Limits\r\n\r\n      Webhooks have two different limits\r\n\r\n       * 1k limit per resource in Asana. (If 10 apps each have 100 webhooks\r\n         watching the same resource, no more webhooks can be placed on the\r\n         webhook. `/events` streams count towards this limit)\r\n       * 10k per user-app (An app can have 10k webhooks for EACH user)\r\n\r\n      #### Example Integration: Webhook Inspector\r\n      The [Webhook Inspector](https://github.com/Asana/devrel-examples/tree/master/python/webhooks) is a Python script that demonstrates the features of Asana webhooks, including how to both properly set them up and receive them. By using this script, you can create a webhook and log the contents of incoming notifications to your console.\r\n      To use this demo, be sure to generate a new [personal access token](https://developers.asana.com/docs/personal-access-token), then follow the instructions in README.\r\n    name: Webhooks\r\n  - description: |-\r\n      A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.\r\n\r\n      An *organization* is a special kind of workspace that represents a company. In an organization, you can group your projects into teams. You can read more about how organizations work on the Asana Guide. To tell if your workspace is an organization or not, check its `is_organization` property.\r\n\r\n      Over time, we intend to migrate most workspaces into organizations and to release more organization-specific functionality. We may eventually deprecate using workspace-based APIs for organizations. Currently, and until after some reasonable grace period following any further announcements, you can still reference organizations in any `workspace` parameter.\r\n    name: Workspaces\r\n  - description: This object determines if a user is a member of a workspace.\r\n    name: Workspace Memberships\r\npaths:\r\n  \"/attachments/{attachment_gid}\":\r\n    delete:\r\n      description: |-\r\n        Deletes a specific, existing attachment.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteAttachment\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified attachment.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete an attachment\r\n      tags:\r\n        - Attachments\r\n    get:\r\n      description: Get the full record for a single attachment.\r\n      operationId: getAttachment\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/AttachmentResponse\"\r\n                type: object\r\n          description: Successfully retrieved the record for a single attachment.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"424\":\r\n          $ref: \"#/components/responses/TooManyRequests\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n        \"501\":\r\n          $ref: \"#/components/responses/BadGateway\"\r\n        \"503\":\r\n          $ref: \"#/components/responses/ServiceUnavailable\"\r\n        \"504\":\r\n          $ref: \"#/components/responses/GatewayTimeout\"\r\n      summary: Get an attachment\r\n      tags:\r\n        - Attachments\r\n    parameters:\r\n      - $ref: \"#/components/parameters/attachment_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /batch:\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Make multiple requests in parallel to Asana's API.\r\n      operationId: createBatchRequest\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/BatchRequest\"\r\n              type: object\r\n        description: The requests to batch together via the Batch API.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/BatchResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully completed the requested batch API operations.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Submit parallel requests\r\n      tags:\r\n        - Batch API\r\n  /custom_fields:\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    post:\r\n      description: |-\r\n        Creates a new custom field in a workspace. Every custom field is required\r\n        to be created in a specific workspace, and this workspace cannot be\r\n        changed once set.\r\n\r\n        A custom field’s name must be unique within a workspace and not conflict\r\n        with names of existing task properties such as ‘Due Date’ or ‘Assignee’.\r\n        A custom field’s type must be one of ‘text’, ‘enum’, or ‘number’.\r\n\r\n        Returns the full record of the newly created custom field.\r\n      operationId: createCustomField\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/CustomFieldRequest\"\r\n              type: object\r\n        description: The custom field object to create.\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/CustomFieldResponse\"\r\n                type: object\r\n          description: Custom field successfully created.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a custom field\r\n      tags:\r\n        - Custom Fields\r\n  \"/custom_fields/{custom_field_gid}\":\r\n    delete:\r\n      description: |-\r\n        A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.\r\n        Locked custom fields can only be deleted by the user who locked the field.\r\n        Returns an empty data record.\r\n      operationId: deleteCustomField\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: The custom field was successfully deleted.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a custom field\r\n      tags:\r\n        - Custom Fields\r\n    get:\r\n      description: |-\r\n        Get the complete definition of a custom field’s metadata.\r\n\r\n        Since custom fields can be defined for one of a number of types, and\r\n        these types have different data and behaviors, there are fields that are\r\n        relevant to a particular type. For instance, as noted above, enum_options\r\n        is only relevant for the enum type and defines the set of choices that\r\n        the enum could represent. The examples below show some of these\r\n        type-specific custom field definitions.\r\n      operationId: getCustomField\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/CustomFieldResponse\"\r\n                type: object\r\n          description: Successfully retrieved the complete definition of a custom field’s metadata.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a custom field\r\n      tags:\r\n        - Custom Fields\r\n    parameters:\r\n      - $ref: \"#/components/parameters/custom_field_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged\r\n        When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.\r\n        A custom field’s `type` cannot be updated.\r\n        An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.\r\n        Locked custom fields can only be updated by the user who locked the field.\r\n        Returns the complete updated custom field record.\r\n      operationId: updateCustomField\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/CustomFieldRequest\"\r\n              type: object\r\n        description: The custom field object with all updated properties.\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/CustomFieldResponse\"\r\n                type: object\r\n          description: The custom field was successfully updated.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a custom field\r\n      tags:\r\n        - Custom Fields\r\n  \"/custom_fields/{custom_field_gid}/enum_options\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/custom_field_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    post:\r\n      description: |-\r\n        Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.\r\n        Locked custom fields can only have enum options added by the user who locked the field.\r\n        Returns the full record of the newly created enum option.\r\n      operationId: createEnumOptionForCustomField\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/EnumOptionRequest\"\r\n              type: object\r\n        description: The enum option object to create.\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EnumOption\"\r\n                type: object\r\n          description: Custom field enum option successfully created.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create an enum option\r\n      tags:\r\n        - Custom Fields\r\n  \"/custom_fields/{custom_field_gid}/enum_options/insert\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/custom_field_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Moves a particular enum option to be either before or after another specified enum option in the custom field.\r\n        Locked custom fields can only be reordered by the user who locked the field.\r\n      operationId: insertEnumOptionForCustomField\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/EnumOptionInsertRequest\"\r\n              type: object\r\n        description: The enum option object to create.\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EnumOption\"\r\n                type: object\r\n          description: Custom field enum option successfully reordered.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Reorder a custom field's enum\r\n      tags:\r\n        - Custom Fields\r\n  \"/enum_options/{enum_option_gid}\":\r\n    parameters:\r\n      - description: Globally unique identifier for the enum option.\r\n        example: \"124578\"\r\n        in: path\r\n        name: enum_option_gid\r\n        required: true\r\n        schema:\r\n          type: string\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        Updates an existing enum option. Enum custom fields require at least one enabled enum option.\r\n        Locked custom fields can only be updated by the user who locked the field.\r\n        Returns the full record of the updated enum option.\r\n      operationId: updateEnumOption\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/EnumOptionRequest\"\r\n              type: object\r\n        description: The enum option object to update\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EnumOption\"\r\n                type: object\r\n          description: Successfully updated the specified custom field enum.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update an enum option\r\n      tags:\r\n        - Custom Fields\r\n  /events:\r\n    get:\r\n      description: |-\r\n        Returns the full record for all events that have occurred since the sync\r\n        token was created.\r\n\r\n        A GET request to the endpoint /[path_to_resource]/events can be made in\r\n        lieu of including the resource ID in the data for the request.\r\n\r\n        *Note: The resource returned will be the resource that triggered the\r\n        event. This may be different from the one that the events were requested\r\n        for. For example, a subscription to a project will contain events for\r\n        tasks contained within the project.*\r\n      operationId: getEvents\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                description: The full record for all events that have occurred since the sync token was created.\r\n                properties:\r\n                  data:\r\n                    description: An organization_export object represents a request to export the complete data of an organization.\r\n                    items:\r\n                      $ref: \"#/components/schemas/EventResponse\"\r\n                    type: array\r\n                  sync:\r\n                    description: A sync token to be used with the next call to the events endpoint.\r\n                    example: de4774f6915eae04714ca93bb2f5ee81\r\n                    type: string\r\n                type: object\r\n          description: Successfully retrieved events.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get events on a resource\r\n      tags:\r\n        - Events\r\n    parameters:\r\n      - description: A resource ID to subscribe to. The resource can be a task or project.\r\n        example: \"12345\"\r\n        in: query\r\n        name: resource\r\n        required: true\r\n        schema:\r\n          type: string\r\n      - description: |-\r\n          A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.\r\n          *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*\r\n        example: de4774f6915eae04714ca93bb2f5ee81\r\n        in: query\r\n        name: sync\r\n        required: false\r\n        schema:\r\n          type: string\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/jobs/{job_gid}\":\r\n    get:\r\n      description: Returns the full record for a job.\r\n      operationId: getJob\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/JobResponse\"\r\n                type: object\r\n          description: Successfully retrieved Job.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a job by id\r\n      tags:\r\n        - Jobs\r\n    parameters:\r\n      - $ref: \"#/components/parameters/job_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /organization_exports:\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    post:\r\n      description: This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.\r\n      operationId: createOrganizationExport\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/OrganizationExportRequest\"\r\n              type: object\r\n        description: The organization to export.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/OrganizationExportResponse\"\r\n                type: object\r\n          description: Successfully created organization export request.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create an organization export request\r\n      tags:\r\n        - Organization Exports\r\n  \"/organization_exports/{organization_export_gid}\":\r\n    get:\r\n      description: Returns details of a previously-requested Organization export.\r\n      operationId: getOrganizationExport\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/OrganizationExportResponse\"\r\n                type: object\r\n          description: Successfully retrieved organization export object.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get details on an org export request\r\n      tags:\r\n        - Organization Exports\r\n    parameters:\r\n      - $ref: \"#/components/parameters/organization_export_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/organizations/{workspace_gid}/teams\":\r\n    get:\r\n      description: Returns the compact records for all teams in the organization visible to the authorized user.\r\n      operationId: getTeamsForOrganization\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TeamCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Returns the team records for all teams in the organization or workspace accessible to the authenticated user.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get teams in an organization\r\n      tags:\r\n        - Teams\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  /portfolio_memberships:\r\n    get:\r\n      description: Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.\r\n      operationId: getPortfolioMemberships\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/PortfolioMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved portfolio memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple portfolio memberships\r\n      tags:\r\n        - Portfolio Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_query_param\"\r\n      - $ref: \"#/components/parameters/workspace_query_param\"\r\n      - $ref: \"#/components/parameters/user_query_param\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/portfolio_memberships/{portfolio_membership_gid}\":\r\n    get:\r\n      description: Returns the complete portfolio record for a single portfolio membership.\r\n      operationId: getPortfolioMembership\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/PortfolioMembershipResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested portfolio membership.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a portfolio membership\r\n      tags:\r\n        - Portfolio Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_membership_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /portfolios:\r\n    get:\r\n      description: Returns a list of the portfolios in compact representation that are owned by the current API user.\r\n      operationId: getPortfolios\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - description: The workspace or organization to filter portfolios on.\r\n          example: \"1331\"\r\n          in: query\r\n          name: workspace\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - description: The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own.\r\n          example: \"14916\"\r\n          in: query\r\n          name: owner\r\n          required: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/PortfolioCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved portfolios.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple portfolios\r\n      tags:\r\n        - Portfolios\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a new portfolio in the given workspace with the supplied name.\r\n\r\n        Note that portfolios created in the Asana UI may have some state\r\n        (like the “Priority” custom field) which is automatically added\r\n        to the portfolio when it is created. Portfolios created via our\r\n        API will *not* be created with the same initial state to allow\r\n        integrations to create their own starting state on a portfolio.\r\n      operationId: createPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/PortfolioRequest\"\r\n              type: object\r\n        description: The portfolio to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/PortfolioResponse\"\r\n                type: object\r\n          description: Successfully created portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}\":\r\n    delete:\r\n      description: |-\r\n        An existing portfolio can be deleted by making a DELETE request on\r\n        the URL for that portfolio.\r\n\r\n        Returns an empty data record.\r\n      operationId: deletePortfolio\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a portfolio\r\n      tags:\r\n        - Portfolios\r\n    get:\r\n      description: Returns the complete portfolio record for a single portfolio.\r\n      operationId: getPortfolio\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/PortfolioResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a portfolio\r\n      tags:\r\n        - Portfolios\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        An existing portfolio can be updated by making a PUT request on the URL for\r\n        that portfolio. Only the fields provided in the `data` block will be updated;\r\n        any unspecified fields will remain unchanged.\r\n\r\n        Returns the complete updated portfolio record.\r\n      operationId: updatePortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/PortfolioRequest\"\r\n              type: object\r\n        description: The updated fields for the portfolio.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/PortfolioResponse\"\r\n                type: object\r\n          description: Successfully updated the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/addCustomFieldSetting\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n    post:\r\n      description: Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.\r\n      operationId: addCustomFieldSettingForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/AddCustomFieldSettingRequest\"\r\n              type: object\r\n        description: Information about the custom field setting.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the custom field to the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a custom field to a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/addItem\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Add an item to a portfolio.\r\n        Returns an empty data block.\r\n      operationId: addItemForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/PortfolioAddItemRequest\"\r\n              type: object\r\n        description: Information about the item being inserted.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the item to the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a portfolio item\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/addMembers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds the specified list of users as members of the portfolio.\r\n        Returns the updated portfolio record.\r\n      operationId: addMembersForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/AddMembersRequest\"\r\n              type: object\r\n        description: Information about the members being added.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added members to the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add users to a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/custom_field_settings\":\r\n    get:\r\n      description: Returns a list of all of the custom fields settings on a portfolio, in compact form.\r\n      operationId: getCustomFieldSettingsForPortfolio\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/CustomFieldSettingResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved custom field settings objects for a portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a portfolio's custom fields\r\n      tags:\r\n        - Custom Field Settings\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/portfolios/{portfolio_gid}/items\":\r\n    get:\r\n      description: Get a list of the items in compact form in a portfolio.\r\n      operationId: getItemsForPortfolio\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested portfolio's items.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get portfolio items\r\n      tags:\r\n        - Portfolios\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/portfolios/{portfolio_gid}/portfolio_memberships\":\r\n    get:\r\n      description: Returns the compact portfolio membership records for the portfolio.\r\n      operationId: getPortfolioMembershipsForPortfolio\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/PortfolioMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested portfolio's memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get memberships from a portfolio\r\n      tags:\r\n        - Portfolio Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/user_query_param\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/portfolios/{portfolio_gid}/removeCustomFieldSetting\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n    post:\r\n      description: Removes a custom field setting from a portfolio.\r\n      operationId: removeCustomFieldSettingForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/RemoveCustomFieldSettingRequest\"\r\n              type: object\r\n        description: Information about the custom field setting being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the custom field from the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a custom field from a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/removeItem\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Remove an item from a portfolio.\r\n        Returns an empty data block.\r\n      operationId: removeItemForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/PortfolioRemoveItemRequest\"\r\n              type: object\r\n        description: Information about the item being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the item from the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a portfolio item\r\n      tags:\r\n        - Portfolios\r\n  \"/portfolios/{portfolio_gid}/removeMembers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/portfolio_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Removes the specified list of users from members of the portfolio.\r\n        Returns the updated portfolio record.\r\n      operationId: removeMembersForPortfolio\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/RemoveMembersRequest\"\r\n              type: object\r\n        description: Information about the members being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the members from the portfolio.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove users from a portfolio\r\n      tags:\r\n        - Portfolios\r\n  \"/project_memberships/{project_membership_gid}\":\r\n    get:\r\n      description: Returns the complete project record for a single project membership.\r\n      operationId: getProjectMembership\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectMembershipResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested project membership.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a project membership\r\n      tags:\r\n        - Project Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_membership_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/project_statuses/{project_status_gid}\":\r\n    delete:\r\n      description: |-\r\n        Deletes a specific, existing project status update.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteProjectStatus\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified project status.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a project status\r\n      tags:\r\n        - Project Statuses\r\n    get:\r\n      description: Returns the complete record for a single status update.\r\n      operationId: getProjectStatus\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectStatusResponse\"\r\n                type: object\r\n          description: Successfully retrieved the specified project's status updates.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a project status\r\n      tags:\r\n        - Project Statuses\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_status_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /projects:\r\n    get:\r\n      description: |-\r\n        Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.\r\n        *Note: This endpoint may timeout for large domains. Try filtering by team!*\r\n      operationId: getProjects\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - description: The workspace or organization to filter projects on.\r\n          example: \"1331\"\r\n          in: query\r\n          name: workspace\r\n          schema:\r\n            type: string\r\n        - description: The team to filter projects on.\r\n          example: \"14916\"\r\n          in: query\r\n          name: team\r\n          schema:\r\n            type: string\r\n        - $ref: \"#/components/parameters/archived_query_param\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved projects.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple projects\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Create a new project in a workspace or team.\r\n\r\n        Every project is required to be created in a specific workspace or\r\n        organization, and this cannot be changed once set. Note that you can use\r\n        the `workspace` parameter regardless of whether or not it is an\r\n        organization.\r\n\r\n        If the workspace for your project is an organization, you must also\r\n        supply a `team` to share the project with.\r\n\r\n        Returns the full record of the newly created project.\r\n      operationId: createProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectRequest\"\r\n              type: object\r\n        description: The project to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectResponse\"\r\n                type: object\r\n          description: Successfully retrieved projects.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}\":\r\n    delete:\r\n      description: |-\r\n        A specific, existing project can be deleted by making a DELETE request on\r\n        the URL for that project.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a project\r\n      tags:\r\n        - Projects\r\n    get:\r\n      description: Returns the complete project record for a single project.\r\n      operationId: getProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a project\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        A specific, existing project can be updated by making a PUT request on\r\n        the URL for that project. Only the fields provided in the `data` block\r\n        will be updated; any unspecified fields will remain unchanged.\r\n\r\n        When using this method, it is best to specify only those fields you wish\r\n        to change, or else you may overwrite changes made by another user since\r\n        you last retrieved the task.\r\n\r\n        Returns the complete updated project record.\r\n      operationId: updateProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectRequest\"\r\n              type: object\r\n        description: The updated fields for the project.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectResponse\"\r\n                type: object\r\n          description: Successfully updated the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/addCustomFieldSetting\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n    post:\r\n      description: Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.\r\n      operationId: addCustomFieldSettingForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/AddCustomFieldSettingRequest\"\r\n              type: object\r\n        description: Information about the custom field setting.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/CustomFieldSettingResponse\"\r\n                type: object\r\n          description: Successfully added the custom field to the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a custom field to a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/addFollowers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds the specified list of users as followers to the project. Followers are a subset of members, therefore if the users are not already members of the project they will also become members as a result of this operation.\r\n        Returns the updated project record.\r\n      operationId: addFollowersForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/AddFollowersRequest\"\r\n              type: object\r\n        description: Information about the followers being added.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added followers to the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add followers to a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/addMembers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds the specified list of users as members of the project.\r\n        Returns the updated project record.\r\n      operationId: addMembersForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/AddMembersRequest\"\r\n              type: object\r\n        description: Information about the members being added.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added members to the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add users to a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/custom_field_settings\":\r\n    get:\r\n      description: Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://developers.asana.com/docs/#input-output-options) for more information.\r\n      operationId: getCustomFieldSettingsForProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/CustomFieldSettingResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved custom field settings objects for a project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a project's custom fields\r\n      tags:\r\n        - Custom Field Settings\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/projects/{project_gid}/duplicate\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Creates and returns a job that will asynchronously handle the duplication.\r\n      operationId: duplicateProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectDuplicateRequest\"\r\n              type: object\r\n        description: Describes the duplicate's name and the elements that will be duplicated.\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/JobResponse\"\r\n                type: object\r\n          description: Successfully created the job to handle duplication.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Duplicate a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/project_memberships\":\r\n    get:\r\n      description: Returns the compact project membership records for the project.\r\n      operationId: getProjectMembershipsForProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested project's memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get memberships from a project\r\n      tags:\r\n        - Project Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/user_query_param\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/projects/{project_gid}/project_statuses\":\r\n    get:\r\n      description: Returns the compact project status update records for all updates on the project.\r\n      operationId: getProjectStatusesForProject\r\n      parameters:\r\n        - $ref: \"#/components/parameters/project_path_gid\"\r\n        - $ref: \"#/components/parameters/pretty\"\r\n        - $ref: \"#/components/parameters/fields\"\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectStatusCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified project's status updates.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get statuses from a project\r\n      tags:\r\n        - Project Statuses\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a new status update on the project.\r\n        Returns the full record of the newly created project status update.\r\n      operationId: createProjectStatusForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectStatusRequest\"\r\n              type: object\r\n        description: The project status to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectStatusResponse\"\r\n                type: object\r\n          description: Successfully created a new story.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a project status\r\n      tags:\r\n        - Project Statuses\r\n  \"/projects/{project_gid}/removeCustomFieldSetting\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n    post:\r\n      description: Removes a custom field setting from a project.\r\n      operationId: removeCustomFieldSettingForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/RemoveCustomFieldSettingRequest\"\r\n              type: object\r\n        description: Information about the custom field setting being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the custom field from the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a custom field from a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/removeFollowers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Removes the specified list of users from following the project, this will not affect project membership status.\r\n        Returns the updated project record.\r\n      operationId: removeFollowersForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/RemoveFollowersRequest\"\r\n              type: object\r\n        description: Information about the followers being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed followers from the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove followers from a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/removeMembers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Removes the specified list of users from members of the project.\r\n        Returns the updated project record.\r\n      operationId: removeMembersForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/RemoveMembersRequest\"\r\n              type: object\r\n        description: Information about the members being removed.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the members from the project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove users from a project\r\n      tags:\r\n        - Projects\r\n  \"/projects/{project_gid}/sections\":\r\n    get:\r\n      description: Returns the compact records for all sections in the specified project.\r\n      operationId: getSectionsForProject\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/SectionCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved sections in project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get sections in a project\r\n      tags:\r\n        - Sections\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a new section in a project.\r\n        Returns the full record of the newly created section.\r\n      operationId: createSectionForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/SectionRequest\"\r\n              type: object\r\n        description: The section to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/SectionResponse\"\r\n                type: object\r\n          description: Successfully created the specified section.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a section in a project\r\n      tags:\r\n        - Sections\r\n  \"/projects/{project_gid}/sections/insert\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Move sections relative to each other. One of\r\n        `before_section` or `after_section` is required.\r\n\r\n        Sections cannot be moved between projects.\r\n\r\n        Returns an empty data block.\r\n      operationId: insertSectionForProject\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectSectionInsertRequest\"\r\n              type: object\r\n        description: The section's move action.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully moved the specified section.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Move or Insert sections\r\n      tags:\r\n        - Sections\r\n  \"/projects/{project_gid}/task_counts\":\r\n    get:\r\n      description: |-\r\n        Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/input-output-options) using `opt_fields` to get any information from this endpoint.\r\n\r\n        This endpoint has an additional [rate limit](/docs/standard-rate-limits) and each field counts especially high against our [cost limits](/docs/cost-limits).\r\n\r\n        Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.\r\n      operationId: getTaskCountsForProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskCountResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested project's task counts.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get task count of a project\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/projects/{project_gid}/tasks\":\r\n    get:\r\n      description: Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.\r\n      operationId: getTasksForProject\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested project's tasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get tasks from a project\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/project_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/sections/{section_gid}\":\r\n    delete:\r\n      description: |-\r\n        A specific, existing section can be deleted by making a DELETE request on\r\n        the URL for that section.\r\n\r\n        Note that sections must be empty to be deleted.\r\n\r\n        The last remaining section cannot be deleted.\r\n\r\n        Returns an empty data block.\r\n      operationId: deleteSection\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified section.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a section\r\n      tags:\r\n        - Sections\r\n    get:\r\n      description: Returns the complete record for a single section.\r\n      operationId: getSection\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/SectionResponse\"\r\n                type: object\r\n          description: Successfully retrieved section.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a section\r\n      tags:\r\n        - Sections\r\n    parameters:\r\n      - $ref: \"#/components/parameters/section_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        A specific, existing section can be updated by making a PUT request on\r\n        the URL for that project. Only the fields provided in the `data` block\r\n        will be updated; any unspecified fields will remain unchanged. (note that\r\n        at this time, the only field that can be updated is the `name` field.)\r\n\r\n        When using this method, it is best to specify only those fields you wish\r\n        to change, or else you may overwrite changes made by another user since\r\n        you last retrieved the task.\r\n\r\n        Returns the complete updated section record.\r\n      operationId: updateSection\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/SectionRequest\"\r\n              type: object\r\n        description: The section to create.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/SectionResponse\"\r\n                type: object\r\n          description: Successfully updated the specified section.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a section\r\n      tags:\r\n        - Sections\r\n  \"/sections/{section_gid}/addTask\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/section_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Add a task to a specific, existing section. This will remove the task from other sections of the project.\r\n\r\n        The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.\r\n\r\n        This does not work for separators (tasks with the resource_subtype of section).\r\n      operationId: addTaskForSection\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/SectionTaskInsertRequest\"\r\n              type: object\r\n        description: The task and optionally the insert location.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add task to section\r\n      tags:\r\n        - Sections\r\n  \"/sections/{section_gid}/tasks\":\r\n    get:\r\n      description: \"*Board view only*: Returns the compact section records for all tasks within the given section.\"\r\n      operationId: getTasksForSection\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the section's tasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get tasks from a section\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/section_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/stories/{story_gid}\":\r\n    delete:\r\n      description: |-\r\n        Deletes a story. A user can only delete stories they have created.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteStory\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified story.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a story\r\n      tags:\r\n        - Stories\r\n    get:\r\n      description: Returns the full record for a single story.\r\n      operationId: getStory\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/StoryResponse\"\r\n                type: object\r\n          description: Successfully retrieved the specified story.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a story\r\n      tags:\r\n        - Stories\r\n    parameters:\r\n      - $ref: \"#/components/parameters/story_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.\r\n      operationId: updateStory\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/StoryRequest\"\r\n              type: object\r\n        description: The comment story to update.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/StoryResponse\"\r\n                type: object\r\n          description: Successfully retrieved the specified story.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a story\r\n      tags:\r\n        - Stories\r\n  /tags:\r\n    get:\r\n      description: Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.\r\n      operationId: getTags\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - description: The workspace to filter tags on.\r\n          example: \"1331\"\r\n          in: query\r\n          name: workspace\r\n          schema:\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TagCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified set of tags.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple tags\r\n      tags:\r\n        - Tags\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a new tag in a workspace or organization.\r\n\r\n        Every tag is required to be created in a specific workspace or\r\n        organization, and this cannot be changed once set. Note that you can use\r\n        the workspace parameter regardless of whether or not it is an\r\n        organization.\r\n\r\n        Returns the full record of the newly created tag.\r\n      operationId: createTag\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TagRequest\"\r\n              type: object\r\n        description: The tag to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TagResponse\"\r\n                type: object\r\n          description: Successfully created the newly specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a tag\r\n      tags:\r\n        - Tags\r\n  \"/tags/{tag_gid}\":\r\n    delete:\r\n      description: |-\r\n        A specific, existing tag can be deleted by making a DELETE request on\r\n        the URL for that tag.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteTag\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a tag\r\n      tags:\r\n        - Tags\r\n    get:\r\n      description: Returns the complete tag record for a single tag.\r\n      operationId: getTag\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TagResponse\"\r\n                type: object\r\n          description: Successfully retrieved the specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a tag\r\n      tags:\r\n        - Tags\r\n    parameters:\r\n      - $ref: \"#/components/parameters/tag_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    put:\r\n      description: |-\r\n        Updates the properties of a tag. Only the fields provided in the `data`\r\n        block will be updated; any unspecified fields will remain unchanged.\r\n\r\n        When using this method, it is best to specify only those fields you wish\r\n        to change, or else you may overwrite changes made by another user since\r\n        you last retrieved the tag.\r\n\r\n        Returns the complete updated tag record.\r\n      operationId: updateTag\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TagResponse\"\r\n                type: object\r\n          description: Successfully updated the specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a tag\r\n      tags:\r\n        - Tags\r\n  \"/tags/{tag_gid}/tasks\":\r\n    get:\r\n      description: Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.\r\n      operationId: getTasksForTag\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the tasks associated with the specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get tasks from a tag\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/tag_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  /tasks:\r\n    get:\r\n      description: |-\r\n        Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.\r\n        For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).\r\n      operationId: getTasks\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - description: |-\r\n            The assignee to filter tasks on.\r\n            *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*\r\n          example: \"14641\"\r\n          in: query\r\n          name: assignee\r\n          schema:\r\n            type: string\r\n          x-env-variable: assignee\r\n        - description: The project to filter tasks on.\r\n          example: \"321654\"\r\n          in: query\r\n          name: project\r\n          schema:\r\n            type: string\r\n          x-env-variable: project\r\n        - description: |-\r\n            The section to filter tasks on.\r\n            *Note: Currently, this is only supported in board views.*\r\n          example: \"321654\"\r\n          in: query\r\n          name: section\r\n          schema:\r\n            type: string\r\n          x-env-variable: section\r\n        - description: |-\r\n            The workspace to filter tasks on.\r\n            *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*\r\n          example: \"321654\"\r\n          in: query\r\n          name: workspace\r\n          schema:\r\n            type: string\r\n          x-env-variable: workspace\r\n        - description: Only return tasks that are either incomplete or that have been completed since this time.\r\n          in: query\r\n          name: completed_since\r\n          schema:\r\n            example: 2012-02-22T02:06:58.158Z\r\n            format: date-time\r\n            type: string\r\n        - description: |-\r\n            Only return tasks that have been modified since the given time.\r\n\r\n            *Note: A task is considered “modified” if any of its properties\r\n            change, or associations between it and other objects are modified\r\n            (e.g.  a task being added to a project). A task is not considered\r\n            modified just because another object it is associated with (e.g. a\r\n            subtask) is modified. Actions that count as modifying the task\r\n            include assigning, renaming, completing, and adding stories.*\r\n          example: 2012-02-22T02:06:58.158Z\r\n          in: query\r\n          name: modified_since\r\n          schema:\r\n            format: date-time\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved requested tasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple tasks\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creating a new task is as easy as POSTing to the `/tasks` endpoint with a\r\n        data block containing the fields you’d like to set on the task. Any\r\n        unspecified fields will take on default values.\r\n\r\n        Every task is required to be created in a specific workspace, and this\r\n        workspace cannot be changed once set. The workspace need not be set\r\n        explicitly if you specify `projects` or a `parent` task instead.\r\n      operationId: createTask\r\n      requestBody:\r\n        description: Create Task Request\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRequest\"\r\n              type: object\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskResponse\"\r\n                type: object\r\n          description: Successfully created a new task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}\":\r\n    delete:\r\n      description: |-\r\n        A specific, existing task can be deleted by making a DELETE request on\r\n        the URL for that task. Deleted tasks go into the “trash” of the user\r\n        making the delete request. Tasks can be recovered from the trash within a\r\n        period of 30 days; afterward they are completely removed from the system.\r\n\r\n        Returns an empty data record.\r\n      operationId: deleteTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully deleted the specified task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a task\r\n      tags:\r\n        - Tasks\r\n    get:\r\n      description: Returns the complete task record for a single task.\r\n      operationId: getTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskResponse\"\r\n                type: object\r\n          description: Successfully retrieved the specified task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a task\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        A specific, existing task can be updated by making a PUT request on the\r\n        URL for that task. Only the fields provided in the `data` block will be\r\n        updated; any unspecified fields will remain unchanged.\r\n\r\n        When using this method, it is best to specify only those fields you wish\r\n        to change, or else you may overwrite changes made by another user since\r\n        you last retrieved the task.\r\n\r\n        Returns the complete updated task record.\r\n      operationId: updateTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRequest\"\r\n              type: object\r\n        description: The task to update.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskResponse\"\r\n                type: object\r\n          description: Successfully updated the specified task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/addDependencies\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*.\r\n      operationId: addDependenciesForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ModifyDependenciesRequest\"\r\n              type: object\r\n        description: The list of tasks to set as dependencies.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully set the specified dependencies on the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Set dependencies for a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/addDependents\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*.\r\n      operationId: addDependentsForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ModifyDependentsRequest\"\r\n              type: object\r\n        description: The list of tasks to add as dependents.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully set the specified dependents on the given task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Set dependents for a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/addFollowers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds followers to a task. Returns an empty data block.\r\n        Each task can be associated with zero or more followers in the system.\r\n        Requests to add/remove followers, if successful, will return the complete updated task record, described above.\r\n      operationId: addFollowersForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskAddFollowersRequest\"\r\n              type: object\r\n        description: The followers to add to the task.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the specified followers to the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add followers to a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/addProject\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds the task to the specified project, in the optional location\r\n        specified. If no location arguments are given, the task will be added to\r\n        the end of the project.\r\n\r\n        `addProject` can also be used to reorder a task within a project or\r\n        section that already contains it.\r\n\r\n        At most one of `insert_before`, `insert_after`, or `section` should be\r\n        specified. Inserting into a section in an non-order-dependent way can be\r\n        done by specifying section, otherwise, to insert within a section in a\r\n        particular place, specify `insert_before` or `insert_after` and a task\r\n        within the section to anchor the position of this task.\r\n\r\n        Returns an empty data block.\r\n      operationId: addProjectForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskAddProjectRequest\"\r\n              type: object\r\n        description: The project to add the task to.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the specified project to the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a project to a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/addTag\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Adds a tag to a task. Returns an empty data block.\r\n      operationId: addTagForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskAddTagRequest\"\r\n              type: object\r\n        description: The tag to add to the task.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully added the specified tag to the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a tag to a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/attachments\":\r\n    get:\r\n      description: Returns the compact records for all attachments on the task.\r\n      operationId: getAttachmentsForTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/AttachmentCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the compact records for all attachments on the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get attachments for a task\r\n      tags:\r\n        - Attachments\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    post:\r\n      description: |-\r\n        Upload an attachment.\r\n\r\n        This method uploads an attachment to a task and returns the compact\r\n        record for the created attachment object. It is not possible to attach\r\n        files from third party services such as Dropbox, Box \u0026 Google Drive via\r\n        the API. You must download the file content first and then upload it as\r\n        any other attachment.\r\n\r\n        The 100MB size limit on attachments in Asana is enforced on this endpoint.\r\n\r\n        This endpoint expects a multipart/form-data encoded request containing\r\n        the full contents of the file to be uploaded.\r\n\r\n        Requests made should follow the HTTP/1.1 specification that line\r\n        terminators are of the form `CRLF` or `\\r\\n` outlined\r\n        [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)\r\n        in order for the server to reliably and properly handle the request.\r\n      operationId: createAttachmentForTask\r\n      requestBody:\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              $ref: \"#/components/schemas/AttachmentRequest\"\r\n        description: |-\r\n          The file you want to upload.\r\n\r\n          *Note when using curl:*\r\n\r\n          Be sure to add an `‘@’` before the file path, and use the `--form`\r\n          option instead of the `-d` option.\r\n\r\n          When uploading PDFs with curl, force the content-type to be pdf by\r\n          appending the content type to the file path: `--form\r\n          \"file=@file.pdf;type=application/pdf\"`.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/AttachmentResponse\"\r\n                type: object\r\n          description: Successfully uploaded the attachment to the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Upload an attachment\r\n      tags:\r\n        - Attachments\r\n  \"/tasks/{task_gid}/dependencies\":\r\n    get:\r\n      description: Returns the compact representations of all of the dependencies of a task.\r\n      operationId: getDependenciesForTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified task's dependencies.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get dependencies from a task\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/tasks/{task_gid}/dependents\":\r\n    get:\r\n      description: Returns the compact representations of all of the dependents of a task.\r\n      operationId: getDependentsForTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified dependents of the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get dependents from a task\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/tasks/{task_gid}/duplicate\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Creates and returns a job that will asynchronously handle the duplication.\r\n      operationId: duplicateTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskDuplicateRequest\"\r\n              type: object\r\n        description: Describes the duplicate's name and the fields that will be duplicated.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/JobResponse\"\r\n                type: object\r\n          description: Successfully created the job to handle duplication.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Duplicate a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/projects\":\r\n    get:\r\n      description: Returns a compact representation of all of the projects the task is in.\r\n      operationId: getProjectsForTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the projects for the given task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get projects a task is in\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/tasks/{task_gid}/removeDependencies\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Unlinks a set of dependencies from this task.\r\n      operationId: removeDependenciesForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ModifyDependenciesRequest\"\r\n              type: object\r\n        description: The list of tasks to unlink as dependencies.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/EmptyResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully unlinked the dependencies from the specified task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Unlink dependencies from a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/removeDependents\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Unlinks a set of dependents from this task.\r\n      operationId: removeDependentsForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ModifyDependentsRequest\"\r\n              type: object\r\n        description: The list of tasks to remove as dependents.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/EmptyResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully unlinked the specified tasks as dependents.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"402\":\r\n          $ref: \"#/components/responses/PaymentRequired\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Unlink dependents from a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/removeFollowers\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.\r\n      operationId: removeFollowerForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRemoveFollowersRequest\"\r\n              type: object\r\n        description: The followers to remove from the task.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the specified followers from the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove followers from a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/removeProject\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Removes the task from the specified project. The task will still exist in\r\n        the system, but it will not be in the project anymore.\r\n\r\n        Returns an empty data block.\r\n      operationId: removeProjectForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRemoveProjectRequest\"\r\n              type: object\r\n        description: The project to remove the task from.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the specified project from the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a project from a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/removeTag\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Removes a tag from a task. Returns an empty data block.\r\n      operationId: removeTagForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRemoveTagRequest\"\r\n              type: object\r\n        description: The tag to remove from the task.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully removed the specified tag from the task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a tag from a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/setParent\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.\r\n      operationId: setParentForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskSetParentRequest\"\r\n              type: object\r\n        description: The new parent of the subtask.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskResponse\"\r\n                type: object\r\n          description: Successfully changed the parent of the specified subtask.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Set the parent of a task\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/stories\":\r\n    get:\r\n      description: Returns the compact records for all stories on the task.\r\n      operationId: getStoriesForTask\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/StoryCompact\"\r\n                type: object\r\n          description: Successfully retrieved the specified task's stories.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get stories from a task\r\n      tags:\r\n        - Stories\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Adds a story to a task. This endpoint currently only allows for comment\r\n        stories to be created. The comment will be authored by the currently\r\n        authenticated user, and timestamped when the server receives the request.\r\n\r\n        Returns the full record for the new story added to the task.\r\n      operationId: createStoryForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/StoryRequest\"\r\n              type: object\r\n        description: The story to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/StoryResponse\"\r\n                type: object\r\n          description: Successfully created a new story.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a story on a task\r\n      tags:\r\n        - Stories\r\n  \"/tasks/{task_gid}/subtasks\":\r\n    get:\r\n      description: Returns a compact representation of all of the subtasks of a task.\r\n      operationId: getSubtasksForTask\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified task's subtasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get subtasks from a task\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.\r\n      operationId: createSubtaskForTask\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TaskRequest\"\r\n              type: object\r\n        description: The new subtask to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TaskResponse\"\r\n                type: object\r\n          description: Successfully created the specified subtask.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a subtask\r\n      tags:\r\n        - Tasks\r\n  \"/tasks/{task_gid}/tags\":\r\n    get:\r\n      description: Get a compact representation of all of the tags the task has.\r\n      operationId: getTagsForTask\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TagCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the tags for the given task.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a task's tags\r\n      tags:\r\n        - Tags\r\n    parameters:\r\n      - $ref: \"#/components/parameters/task_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  /team_memberships:\r\n    get:\r\n      description: Returns compact team membership records.\r\n      operationId: getTeamMemberships\r\n      parameters:\r\n        - description: Globally unique identifier for the team.\r\n          example: \"159874\"\r\n          in: query\r\n          name: team\r\n          schema:\r\n            type: string\r\n        - description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user. This parameter must be used with the workspace parameter.\r\n          example: \"512241\"\r\n          in: query\r\n          name: user\r\n          schema:\r\n            type: string\r\n        - description: Globally unique identifier for the workspace. This parameter must be used with the user parameter.\r\n          example: \"31326\"\r\n          in: query\r\n          name: workspace\r\n          schema:\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TeamMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested team memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get team memberships\r\n      tags:\r\n        - Team Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/team_memberships/{team_membership_gid}\":\r\n    get:\r\n      description: Returns the complete team membership record for a single team membership.\r\n      operationId: getTeamMembership\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TeamMembershipResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested team membership.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a team membership\r\n      tags:\r\n        - Team Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_membership_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /teams:\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n    post:\r\n      description: Creates a team within the current workspace.\r\n      operationId: createTeam\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TeamRequest\"\r\n              type: object\r\n        description: The team to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TeamResponse\"\r\n                type: object\r\n          description: Successfully created a new team.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a team\r\n      tags:\r\n        - Teams\r\n  \"/teams/{team_gid}\":\r\n    get:\r\n      description: Returns the full record for a single team.\r\n      operationId: getTeam\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TeamResponse\"\r\n                type: object\r\n          description: Successsfully retrieved the record for a single team.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a team\r\n      tags:\r\n        - Teams\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/teams/{team_gid}/addUser\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.\r\n      operationId: addUserForTeam\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TeamAddUserRequest\"\r\n              type: object\r\n        description: The user to add to the team.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/UserResponse\"\r\n                type: object\r\n          description: Returns the full user record for the added user.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a user to a team\r\n      tags:\r\n        - Teams\r\n  \"/teams/{team_gid}/projects\":\r\n    get:\r\n      description: Returns the compact project records for all projects in the team.\r\n      operationId: getProjectsForTeam\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - $ref: \"#/components/parameters/archived_query_param\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested team's projects.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a team's projects\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a project shared with the given team.\r\n\r\n        Returns the full record of the newly created project.\r\n      operationId: createProjectForTeam\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectRequest\"\r\n              type: object\r\n        description: The new project to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectResponse\"\r\n                type: object\r\n          description: Successfully created the specified project.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a project in a team\r\n      tags:\r\n        - Projects\r\n  \"/teams/{team_gid}/removeUser\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: The user making this call must be a member of the team in order to remove themselves or others.\r\n      operationId: removeUserForTeam\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TeamRemoveUserRequest\"\r\n              type: object\r\n        description: The user to remove from the team.\r\n        required: true\r\n      responses:\r\n        \"204\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Returns an empty data record\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a user from a team\r\n      tags:\r\n        - Teams\r\n  \"/teams/{team_gid}/team_memberships\":\r\n    get:\r\n      description: Returns the compact team memberships for the team.\r\n      operationId: getTeamMembershipsForTeam\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TeamMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested team's memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get memberships from a team\r\n      tags:\r\n        - Team Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/teams/{team_gid}/users\":\r\n    get:\r\n      description: |-\r\n        Returns the compact records for all users that are members of the team.\r\n        Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.\r\n      operationId: getUsersForTeam\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/UserCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Returns the user records for all the members of the team, including guests and limited access users\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get users in a team\r\n      tags:\r\n        - Users\r\n    parameters:\r\n      - $ref: \"#/components/parameters/team_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/user_task_lists/{user_task_list_gid}\":\r\n    get:\r\n      description: Returns the full record for a user task list.\r\n      operationId: getUserTaskList\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/UserTaskListResponse\"\r\n                type: object\r\n          description: Successfully retrieved the user task list.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a user task list\r\n      tags:\r\n        - User Task Lists\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_task_list_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/user_task_lists/{user_task_list_gid}/tasks\":\r\n    get:\r\n      description: |-\r\n        Returns the compact list of tasks in a user’s My Tasks list.\r\n        *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.*\r\n        *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*\r\n      operationId: getTasksForUserTaskList\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the user task list's tasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get tasks from a user task list\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - description: |\r\n          Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.\r\n        example: 2012-02-22T02:06:58.158Z\r\n        in: query\r\n        name: completed_since\r\n        required: false\r\n        schema:\r\n          type: string\r\n      - $ref: \"#/components/parameters/user_task_list_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  /users:\r\n    get:\r\n      description: |-\r\n        Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.\r\n        Results are sorted by user ID.\r\n      operationId: getUsers\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/UserCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested user records.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple users\r\n      tags:\r\n        - Users\r\n    parameters:\r\n      - description: The workspace or organization ID to filter users on.\r\n        example: \"1331\"\r\n        in: query\r\n        name: workspace\r\n        schema:\r\n          type: string\r\n      - description: The team ID to filter users on.\r\n        example: \"15627\"\r\n        in: query\r\n        name: team\r\n        schema:\r\n          type: string\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/users/{user_gid}\":\r\n    get:\r\n      description: Returns the full user record for the single user with the provided ID.\r\n      operationId: getUser\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/UserResponse\"\r\n                type: object\r\n          description: Returns the user specified.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a user\r\n      tags:\r\n        - Users\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/users/{user_gid}/favorites\":\r\n    get:\r\n      description: |-\r\n        Returns all of a user's favorites in the given workspace, of the given type.\r\n        Results are given in order (The same order as Asana's sidebar).\r\n      operationId: getFavoritesForUser\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/AsanaNamedResource\"\r\n                    type: array\r\n                type: object\r\n          description: Returns the specified user's favorites.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a user's favorites\r\n      tags:\r\n        - Users\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - description: The resource type of favorites to be returned.\r\n        in: query\r\n        name: resource_type\r\n        required: true\r\n        schema:\r\n          default: project\r\n          enum:\r\n            - portfolio\r\n            - project\r\n            - tag\r\n            - task\r\n            - user\r\n          type: string\r\n      - description: The workspace in which to get favorites.\r\n        example: \"1234\"\r\n        in: query\r\n        name: workspace\r\n        required: true\r\n        schema:\r\n          type: string\r\n  \"/users/{user_gid}/team_memberships\":\r\n    get:\r\n      description: Returns the compact team membership records for the user.\r\n      operationId: getTeamMembershipsForUser\r\n      parameters:\r\n        - description: Globally unique identifier for the workspace.\r\n          example: \"31326\"\r\n          in: query\r\n          name: workspace\r\n          required: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TeamMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested users's memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get memberships from a user\r\n      tags:\r\n        - Team Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/users/{user_gid}/teams\":\r\n    get:\r\n      description: Returns the compact records for all teams to which the given user is assigned.\r\n      operationId: getTeamsForUser\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TeamCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Returns the team records for all teams in the organization or workspace to which the given user is assigned.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get teams for a user\r\n      tags:\r\n        - Teams\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n      - description: The workspace or organization to filter teams on.\r\n        example: \"1331\"\r\n        in: query\r\n        name: organization\r\n        required: true\r\n        schema:\r\n          type: string\r\n  \"/users/{user_gid}/user_task_list\":\r\n    get:\r\n      description: Returns the full record for a user's task list.\r\n      operationId: getUserTaskListForUser\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/UserTaskListResponse\"\r\n                type: object\r\n          description: Successfully retrieved the user's task list.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a user's task list\r\n      tags:\r\n        - User Task Lists\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - description: The workspace in which to get the user task list.\r\n        example: \"1234\"\r\n        in: query\r\n        name: workspace\r\n        required: true\r\n        schema:\r\n          type: string\r\n  \"/users/{user_gid}/workspace_memberships\":\r\n    get:\r\n      description: Returns the compact workspace membership records for the user.\r\n      operationId: getWorkspaceMembershipsForUser\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/WorkspaceMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested user's workspace memberships.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get workspace memberships for a user\r\n      tags:\r\n        - Workspace Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/user_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  /webhooks:\r\n    get:\r\n      description: Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.\r\n      operationId: getWebhooks\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - description: The workspace to query for webhooks in.\r\n          example: \"1331\"\r\n          in: query\r\n          name: workspace\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - description: Only return webhooks for the given resource.\r\n          example: \"51648\"\r\n          in: query\r\n          name: resource\r\n          schema:\r\n            type: string\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/WebhookResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested webhooks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple webhooks\r\n      tags:\r\n        - Webhooks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Establishing a webhook is a two-part process. First, a simple HTTP POST\r\n        request initiates the creation similar to creating any other resource.\r\n\r\n        Next, in the middle of this request comes the confirmation handshake.\r\n        When a webhook is created, we will send a test POST to the target with an\r\n        `X-Hook-Secret` header. The target must respond with a `200 OK` or `204\r\n        No Content` and a matching `X-Hook-Secret` header to confirm that this\r\n        webhook subscription is indeed expected. We strongly recommend storing\r\n        this secret to be used to verify future webhook event signatures.\r\n\r\n        The POST request to create the webhook will then return with the status\r\n        of the request. If you do not acknowledge the webhook’s confirmation\r\n        handshake it will fail to setup, and you will receive an error in\r\n        response to your attempt to create it. This means you need to be able to\r\n        receive and complete the webhook *while* the POST request is in-flight\r\n        (in other words, have a server that can handle requests asynchronously).\r\n\r\n        Invalid hostnames like localhost will recieve a 403 Forbidden status code.\r\n\r\n        ```\r\n        # Request\r\n        curl -H \"Authorization: Bearer \u003cpersonal_access_token\u003e\" \\\r\n        -X POST https://app.asana.com/api/1.0/webhooks \\\r\n        -d \"resource=8675309\" \\\r\n        -d \"target=https://example.com/receive-webhook/7654\"\r\n        ```\r\n\r\n        ```\r\n        # Handshake sent to https://example.com/\r\n        POST /receive-webhook/7654\r\n        X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\r\n        ```\r\n\r\n        ```\r\n        # Handshake response sent by example.com\r\n        HTTP/1.1 200\r\n        X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\r\n        ```\r\n\r\n        ```\r\n        # Response\r\n        HTTP/1.1 201\r\n        {\r\n          \"data\": {\r\n            \"gid\": \"43214\",\r\n            \"resource\": {\r\n              \"gid\": \"8675309\",\r\n              \"name\": \"Bugs\"\r\n            },\r\n            \"target\": \"https://example.com/receive-webhook/7654\",\r\n            \"active\": false,\r\n            \"last_success_at\": null,\r\n            \"last_failure_at\": null,\r\n            \"last_failure_content\": null\r\n          }\r\n        }\r\n        ```\r\n      operationId: createWebhook\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/WebhookRequest\"\r\n              type: object\r\n        description: The webhook workspace and target.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/WebhookResponse\"\r\n                type: object\r\n          description: Successfully created the requested webhook.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Establish a webhook\r\n      tags:\r\n        - Webhooks\r\n  \"/webhooks/{webhook_gid}\":\r\n    delete:\r\n      description: This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.\r\n      operationId: deleteWebhook\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested webhook.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Delete a webhook\r\n      tags:\r\n        - Webhooks\r\n    get:\r\n      description: Returns the full record for the given webhook.\r\n      operationId: getWebhook\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/WebhookResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested webhook.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a webhook\r\n      tags:\r\n        - Webhooks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/webhook_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/workspace_memberships/{workspace_membership_gid}\":\r\n    get:\r\n      description: Returns the complete workspace record for a single workspace membership.\r\n      operationId: getWorkspaceMembership\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/WorkspaceMembershipResponse\"\r\n                type: object\r\n          description: Successfully retrieved the requested workspace membership.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a workspace membership\r\n      tags:\r\n        - Workspace Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_membership_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  /workspaces:\r\n    get:\r\n      description: Returns the compact records for all workspaces visible to the authorized user.\r\n      operationId: getWorkspaces\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/WorkspaceCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Return all workspaces visible to the authorized user.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get multiple workspaces\r\n      tags:\r\n        - Workspaces\r\n    parameters:\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/workspaces/{workspace_gid}\":\r\n    get:\r\n      description: Returns the full workspace record for a single workspace.\r\n      operationId: getWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/WorkspaceResponse\"\r\n                type: object\r\n          description: Return the full workspace record.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a workspace\r\n      tags:\r\n        - Workspaces\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    put:\r\n      description: |-\r\n        A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.\r\n        Currently the only field that can be modified for a workspace is its name.\r\n        Returns the complete, updated workspace record.\r\n      operationId: updateWorkspace\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/WorkspaceRequest\"\r\n              type: object\r\n        description: The workspace object with all updated properties.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/WorkspaceResponse\"\r\n                type: object\r\n          description: Update for the workspace was successful.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Update a workspace\r\n      tags:\r\n        - Workspaces\r\n  \"/workspaces/{workspace_gid}/addUser\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Add a user to a workspace or organization.\r\n        The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.\r\n      operationId: addUserForWorkspace\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/WorkspaceAddUserRequest\"\r\n              type: object\r\n        description: The user to add to the workspace.\r\n        required: true\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/UserResponse\"\r\n                type: object\r\n          description: The user was added successfully to the workspace or organization.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Add a user to a workspace or organization\r\n      tags:\r\n        - Workspaces\r\n  \"/workspaces/{workspace_gid}/custom_fields\":\r\n    get:\r\n      description: Returns a list of the compact representation of all of the custom fields in a workspace.\r\n      operationId: getCustomFieldsForWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/CustomFieldResponse\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved all custom fields for the given workspace.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get a workspace's custom fields\r\n      tags:\r\n        - Custom Fields\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/workspaces/{workspace_gid}/projects\":\r\n    get:\r\n      description: |-\r\n        Returns the compact project records for all projects in the workspace.\r\n        *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*\r\n      operationId: getProjectsForWorkspace\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n        - $ref: \"#/components/parameters/archived_query_param\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/ProjectCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested workspace's projects.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get all projects in a workspace\r\n      tags:\r\n        - Projects\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Returns the compact project records for all projects in the workspace.\r\n\r\n        If the workspace for your project is an organization, you must also\r\n        supply a team to share the project with.\r\n\r\n        Returns the full record of the newly created project.\r\n      operationId: createProjectForWorkspace\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/ProjectRequest\"\r\n              type: object\r\n        description: The new project to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/ProjectResponse\"\r\n                type: object\r\n          description: Successfully created a new project in the specified workspace.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a project in a workspace\r\n      tags:\r\n        - Projects\r\n  \"/workspaces/{workspace_gid}/removeUser\":\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Remove a user from a workspace or organization.\r\n        The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.\r\n        Returns an empty data record.\r\n      operationId: removeUserForWorkspace\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/WorkspaceRemoveUserRequest\"\r\n              type: object\r\n        description: The user to remove from the workspace.\r\n        required: true\r\n      responses:\r\n        \"204\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/EmptyResponse\"\r\n                type: object\r\n          description: The user was removed successfully to the workspace or organization.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Remove a user from a workspace or organization\r\n      tags:\r\n        - Workspaces\r\n  \"/workspaces/{workspace_gid}/tags\":\r\n    get:\r\n      description: Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.\r\n      operationId: getTagsForWorkspace\r\n      parameters:\r\n        - $ref: \"#/components/parameters/limit\"\r\n        - $ref: \"#/components/parameters/offset\"\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TagCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the specified set of tags.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get tags in a workspace\r\n      tags:\r\n        - Tags\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n    post:\r\n      description: |-\r\n        Creates a new tag in a workspace or organization.\r\n\r\n        Every tag is required to be created in a specific workspace or\r\n        organization, and this cannot be changed once set. Note that you can use\r\n        the workspace parameter regardless of whether or not it is an\r\n        organization.\r\n\r\n        Returns the full record of the newly created tag.\r\n      operationId: createTagForWorkspace\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              properties:\r\n                data:\r\n                  $ref: \"#/components/schemas/TagResponse\"\r\n              type: object\r\n        description: The tag to create.\r\n        required: true\r\n      responses:\r\n        \"201\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    $ref: \"#/components/schemas/TagResponse\"\r\n                type: object\r\n          description: Successfully created the newly specified tag.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Create a tag in a workspace\r\n      tags:\r\n        - Tags\r\n  \"/workspaces/{workspace_gid}/tasks/search\":\r\n    get:\r\n      description: |-\r\n        To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need.\r\n        #### Premium access\r\n        Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:\r\n\r\n        - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace\r\n\r\n        Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error.\r\n        #### Pagination\r\n        Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter.\r\n        #### Eventual consistency\r\n        Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product.\r\n        #### Rate limits\r\n        You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits).\r\n        #### Custom field parameters\r\n        | Parameter name | Custom field type | Accepted type |\r\n        |---|---|---|\r\n        | custom_fields.{gid}.is_set | All | Boolean |\r\n        | custom_fields.{gid}.value | Text | String |\r\n        | custom_fields.{gid}.value | Number | Number |\r\n        | custom_fields.{gid}.value | Enum | Enum option ID |\r\n        | custom_fields.{gid}.starts_with | Text only | String |\r\n        | custom_fields.{gid}.ends_with | Text only | String |\r\n        | custom_fields.{gid}.contains | Text only | String |\r\n        | custom_fields.{gid}.less_than | Number only | Number |\r\n        | custom_fields.{gid}.greater_than | Number only | Number |\r\n\r\n\r\n        For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.\r\n\r\n        Searching for multiple exact matches of a custom field is not supported.\r\n\r\n        *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*\r\n      operationId: searchTasksForWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/TaskCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the section's tasks.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Search tasks in a workspace\r\n      tags:\r\n        - Tasks\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - description: Performs full-text search on both task name and description\r\n        example: Bug\r\n        in: query\r\n        name: text\r\n        schema:\r\n          type: string\r\n      - description: Filters results by the task's resource_subtype\r\n        in: query\r\n        name: resource_subtype\r\n        schema:\r\n          default: milestone\r\n          enum:\r\n            - default_task\r\n            - milestone\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: assignee.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: assignee.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of portfolio IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: portfolios.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of project IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: projects.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of project IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: projects.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of project IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: projects.all\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of section or column IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: sections.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of section or column IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: sections.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of section or column IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: sections.all\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of tag IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: tags.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of tag IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: tags.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of tag IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: tags.all\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of team IDs\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: teams.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: followers.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: followers.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: created_by.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: created_by.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: assigned_by.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: assigned_by.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: liked_by.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: liked_by.not\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: commented_on_by.any\r\n        schema:\r\n          type: string\r\n      - description: Comma-separated list of user identifiers\r\n        example: 12345,23456,34567\r\n        in: query\r\n        name: commented_on_by.not\r\n        schema:\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: due_on.before\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: due_on.after\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string or `null`\r\n        example: 2019-09-15\r\n        in: query\r\n        name: due_on\r\n        schema:\r\n          format: date\r\n          nullable: true\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: due_at.before\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: due_at.after\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: start_on.before\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: start_on.after\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string or `null`\r\n        example: 2019-09-15\r\n        in: query\r\n        name: start_on\r\n        schema:\r\n          format: date\r\n          nullable: true\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: created_on.before\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: created_on.after\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string or `null`\r\n        example: 2019-09-15\r\n        in: query\r\n        name: created_on\r\n        schema:\r\n          format: date\r\n          nullable: true\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: created_at.before\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: created_at.after\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: completed_on.before\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: completed_on.after\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string or `null`\r\n        example: 2019-09-15\r\n        in: query\r\n        name: completed_on\r\n        schema:\r\n          format: date\r\n          nullable: true\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: completed_at.before\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: completed_at.after\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: modified_on.before\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string\r\n        example: 2019-09-15\r\n        in: query\r\n        name: modified_on.after\r\n        schema:\r\n          format: date\r\n          type: string\r\n      - description: ISO 8601 date string or `null`\r\n        example: 2019-09-15\r\n        in: query\r\n        name: modified_on\r\n        schema:\r\n          format: date\r\n          nullable: true\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: modified_at.before\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: ISO 8601 datetime string\r\n        example: 2019-04-15T01:01:46.055Z\r\n        in: query\r\n        name: modified_at.after\r\n        schema:\r\n          format: date-time\r\n          type: string\r\n      - description: Filter to incomplete tasks with dependents\r\n        example: false\r\n        in: query\r\n        name: is_blocking\r\n        schema:\r\n          type: boolean\r\n      - description: Filter to tasks with incomplete dependencies\r\n        example: false\r\n        in: query\r\n        name: is_blocked\r\n        schema:\r\n          type: boolean\r\n      - description: Filter to tasks with attachments\r\n        example: false\r\n        in: query\r\n        name: has_attachment\r\n        schema:\r\n          type: boolean\r\n      - description: Filter to completed tasks\r\n        example: false\r\n        in: query\r\n        name: completed\r\n        schema:\r\n          type: boolean\r\n      - description: Filter to subtasks\r\n        example: false\r\n        in: query\r\n        name: is_subtask\r\n        schema:\r\n          type: boolean\r\n      - description: One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`\r\n        example: likes\r\n        in: query\r\n        name: sort_by\r\n        schema:\r\n          default: modified_at\r\n          enum:\r\n            - due_date\r\n            - created_at\r\n            - completed_at\r\n            - likes\r\n            - modified_at\r\n          type: string\r\n      - description: Default `false`\r\n        example: true\r\n        in: query\r\n        name: sort_ascending\r\n        schema:\r\n          default: false\r\n          type: boolean\r\n  \"/workspaces/{workspace_gid}/typeahead\":\r\n    get:\r\n      description: |-\r\n        Retrieves objects in the workspace based via an auto-completion/typeahead\r\n        search algorithm. This feature is meant to provide results quickly, so do\r\n        not rely on this API to provide extremely accurate search results. The\r\n        result set is limited to a single page of results with a maximum size, so\r\n        you won’t be able to fetch large numbers of results.\r\n\r\n        The typeahead search API provides search for objects from a single\r\n        workspace. This endpoint should be used to query for objects when\r\n        creating an auto-completion/typeahead search feature. This API is meant\r\n        to provide results quickly and should not be relied upon for accurate or\r\n        exhaustive search results. The results sets are limited in size and\r\n        cannot be paginated.\r\n\r\n        Queries return a compact representation of each object which is typically\r\n        the gid and name fields. Interested in a specific set of fields or all of\r\n        the fields?! Of course you are. Use field selectors to manipulate what\r\n        data is included in a response.\r\n\r\n        Resources with type `user` are returned in order of most contacted to\r\n        least contacted. This is determined by task assignments, adding the user\r\n        to projects, and adding the user as a follower to tasks, messages,\r\n        etc.\r\n\r\n        Resources with type `project` are returned in order of recency. This is\r\n        determined when the user visits the project, is added to the project, and\r\n        completes tasks in the project.\r\n\r\n        Resources with type `task` are returned with priority placed on tasks\r\n        the user is following, but no guarantee on the order of those tasks.\r\n\r\n        Leaving the `query` string empty or omitted will give you results, still\r\n        following the resource ordering above. This could be used to list users or\r\n        projects that are relevant for the requesting user's api token.\r\n      operationId: typeaheadForWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    description: The data containing generic Asana Resource, containing a globally unique identifier.\r\n                    items:\r\n                      $ref: \"#/components/schemas/AsanaNamedResource\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved objects via a typeahead search algorithm.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get objects via typeahead\r\n      tags:\r\n        - Typeahead\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - description: \"The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.\"\r\n        in: query\r\n        name: resource_type\r\n        required: true\r\n        schema:\r\n          default: user\r\n          enum:\r\n            - custom_field\r\n            - portfolio\r\n            - project\r\n            - tag\r\n            - task\r\n            - user\r\n          type: string\r\n      - description: \"*Deprecated: new integrations should prefer the resource_type field.*\"\r\n        in: query\r\n        name: type\r\n        required: false\r\n        schema:\r\n          default: user\r\n          enum:\r\n            - custom_field\r\n            - portfolio\r\n            - project\r\n            - tag\r\n            - task\r\n            - user\r\n          type: string\r\n      - description: The string that will be used to search for relevant objects. If an empty string is passed in, the API will currently return an empty result set.\r\n        example: Greg\r\n        in: query\r\n        name: query\r\n        schema:\r\n          type: string\r\n      - description: The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.\r\n        example: 20\r\n        in: query\r\n        name: count\r\n        schema:\r\n          type: integer\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n  \"/workspaces/{workspace_gid}/users\":\r\n    get:\r\n      description: |-\r\n        Returns the compact records for all users in the specified workspace or organization.\r\n        Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.\r\n      operationId: getUsersForWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/UserCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Return the users in the specified workspace or org.\r\n        \"400\":\r\n          $ref: \"#/components/responses/BadRequest\"\r\n        \"401\":\r\n          $ref: \"#/components/responses/Unauthorized\"\r\n        \"403\":\r\n          $ref: \"#/components/responses/Forbidden\"\r\n        \"404\":\r\n          $ref: \"#/components/responses/NotFound\"\r\n        \"500\":\r\n          $ref: \"#/components/responses/InternalServerError\"\r\n      summary: Get users in a workspace or organization\r\n      tags:\r\n        - Users\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/offset\"\r\n  \"/workspaces/{workspace_gid}/workspace_memberships\":\r\n    get:\r\n      description: Returns the compact workspace membership records for the workspace.\r\n      operationId: getWorkspaceMembershipsForWorkspace\r\n      responses:\r\n        \"200\":\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  data:\r\n                    items:\r\n                      $ref: \"#/components/schemas/WorkspaceMembershipCompact\"\r\n                    type: array\r\n                type: object\r\n          description: Successfully retrieved the requested workspace's memberships.\r\n      summary: Get the workspace memberships for a workspace\r\n      tags:\r\n        - Workspace Memberships\r\n    parameters:\r\n      - $ref: \"#/components/parameters/workspace_path_gid\"\r\n      - $ref: \"#/components/parameters/user_query_param\"\r\n      - $ref: \"#/components/parameters/pretty\"\r\n      - $ref: \"#/components/parameters/fields\"\r\n      - $ref: \"#/components/parameters/limit\"\r\n      - $ref: \"#/components/parameters/offset\"\r\ncomponents:\r\n  parameters:\r\n    archived_query_param:\r\n      description: Only return projects whose `archived` field takes on the value of this parameter.\r\n      example: false\r\n      in: query\r\n      name: archived\r\n      schema:\r\n        type: boolean\r\n    attachment_path_gid:\r\n      description: Globally unique identifier for the attachment.\r\n      example: \"12345\"\r\n      in: path\r\n      name: attachment_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: attachment\r\n    custom_field_path_gid:\r\n      description: Globally unique identifier for the custom field.\r\n      example: \"12345\"\r\n      in: path\r\n      name: custom_field_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: custom_field\r\n    fields:\r\n      description: |-\r\n        Defines fields to return.\r\n        Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.\r\n        The id of included objects will always be returned, regardless of the field options.\r\n      example:\r\n        - followers\r\n        - assignee\r\n      explode: false\r\n      in: query\r\n      name: opt_fields\r\n      required: false\r\n      schema:\r\n        items:\r\n          type: string\r\n        type: array\r\n      style: form\r\n    job_path_gid:\r\n      description: Globally unique identifier for the job.\r\n      example: \"12345\"\r\n      in: path\r\n      name: job_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: job\r\n    limit:\r\n      description: |-\r\n        Results per page.\r\n        The number of objects to return per page. The value must be between 1 and 100.\r\n      example: 50\r\n      in: query\r\n      name: limit\r\n      schema:\r\n        type: integer\r\n    offset:\r\n      description: |-\r\n        Offset token.\r\n        An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.\r\n        'Note: You can only pass in an offset that was returned to you via a previously paginated request.'\r\n      example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9\r\n      in: query\r\n      name: offset\r\n      schema:\r\n        type: string\r\n    organization_export_path_gid:\r\n      description: Globally unique identifier for the organization export.\r\n      example: \"12345\"\r\n      in: path\r\n      name: organization_export_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: organization_export\r\n    portfolio_membership_path_gid:\r\n      description: Globally unique identifier for the portfolio membership\r\n      example: \"1331\"\r\n      in: path\r\n      name: portfolio_membership_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: portfolio_membership\r\n    portfolio_path_gid:\r\n      description: Globally unique identifier for the portfolio.\r\n      example: \"12345\"\r\n      in: path\r\n      name: portfolio_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: portfolio\r\n    portfolio_query_param:\r\n      description: The portfolio to filter results on.\r\n      example: \"12345\"\r\n      in: query\r\n      name: portfolio\r\n      schema:\r\n        type: string\r\n      x-env-variable: portfolio\r\n    pretty:\r\n      allowEmptyValue: true\r\n      description: |-\r\n          Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.\r\n      example: true\r\n      in: query\r\n      name: opt_pretty\r\n      required: false\r\n      schema:\r\n        type: boolean\r\n      style: form\r\n    project_membership_path_gid:\r\n      description: Globally unique identifier for the project membership.\r\n      example: \"1331\"\r\n      in: path\r\n      name: project_membership_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: project_membership\r\n    project_path_gid:\r\n      description: Globally unique identifier for the project.\r\n      example: \"1331\"\r\n      in: path\r\n      name: project_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: project\r\n    project_status_path_gid:\r\n      description: The project status update to get.\r\n      example: \"321654\"\r\n      in: path\r\n      name: project_status_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: project_status\r\n    section_path_gid:\r\n      description: The globally unique identifier for the section.\r\n      example: \"321654\"\r\n      in: path\r\n      name: section_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: section\r\n    story_path_gid:\r\n      description: Globally unique identifier for the story.\r\n      example: \"35678\"\r\n      in: path\r\n      name: story_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: story\r\n    tag_path_gid:\r\n      description: Globally unique identifier for the tag.\r\n      example: \"11235\"\r\n      in: path\r\n      name: tag_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: tag\r\n    task_path_gid:\r\n      description: Globally unique identifier for the task.\r\n      example: \"321654\"\r\n      in: path\r\n      name: task_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: task\r\n    team_membership_path_gid:\r\n      description: Globally unique identifier for the team membership.\r\n      example: \"724362\"\r\n      in: path\r\n      name: team_membership_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: team_membership\r\n    team_path_gid:\r\n      description: Globally unique identifier for the team.\r\n      example: \"159874\"\r\n      in: path\r\n      name: team_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: team\r\n    user_path_gid:\r\n      description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n      example: me\r\n      in: path\r\n      name: user_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: user\r\n    user_query_param:\r\n      description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n      example: me\r\n      in: query\r\n      name: user\r\n      schema:\r\n        type: string\r\n      x-env-variable: user\r\n    user_task_list_path_gid:\r\n      description: Globally unique identifier for the user task list.\r\n      example: \"12345\"\r\n      in: path\r\n      name: user_task_list_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: user_task_list\r\n    webhook_path_gid:\r\n      description: Globally unique identifier for the webhook.\r\n      example: \"12345\"\r\n      in: path\r\n      name: webhook_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: webhook\r\n    workspace_membership_path_gid:\r\n      description: Globally unique identifier for the workspace membership\r\n      example: \"12345\"\r\n      in: path\r\n      name: workspace_membership_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: workspace_membership\r\n    workspace_path_gid:\r\n      description: Globally unique identifier for the workspace or organization.\r\n      example: \"12345\"\r\n      in: path\r\n      name: workspace_gid\r\n      required: true\r\n      schema:\r\n        type: string\r\n      x-env-variable: workspace\r\n    workspace_query_param:\r\n      description: The workspace to filter results on.\r\n      example: \"12345\"\r\n      in: query\r\n      name: workspace\r\n      schema:\r\n        type: string\r\n      x-env-variable: workspace\r\n  responses:\r\n    BadGateway:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: There is an issue between the load balancers and Asana's API.\r\n    BadRequest:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again.\r\n    Forbidden:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to.\r\n    GatewayTimeout:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: This request took too long to complete.\r\n    GenericErrorResponse:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API should return an HTTP Status Code that indicates the nature of the failure, with a response body in JSON format containing additional information. In the event of a server error the response body will contain an error phrase. These phrases are automatically generated using the [node-asana-phrase library](https://github.com/Asana/node-asana-phrase) and can be used by Asana support to quickly look up the incident that caused the server error.\r\n    InternalServerError:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase.\r\n    NotFound:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist.\r\n    PaymentRequired:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: The request was valid, but the queried object or object mutation specified in the request is above your current premium level.\r\n    ServiceUnavailable:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: Either the upstream service is unavailable to the API, or he API has been intentionally shut off.\r\n    TooManyRequests:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: You have exceeded one of the enforced rate limits in the API. See the [documentation on rate limiting](https://developers.asana.com/docs/#rate-limits) for more information.\r\n    Unauthorized:\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: \"#/components/schemas/ErrorResponse\"\r\n      description: A valid authentication token was not provided with the request, so the API could not associate a user with the request.\r\n  schemas:\r\n    AddCustomFieldSettingRequest:\r\n      properties:\r\n        custom_field:\r\n          description: The custom field to associate with this container.\r\n          example: \"14916\"\r\n          type: string\r\n        insert_after:\r\n          description: A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.\r\n          example: \"1331\"\r\n          type: string\r\n        insert_before:\r\n          description: A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.\r\n          example: \"1331\"\r\n          type: string\r\n        is_important:\r\n          description: Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).\r\n          example: true\r\n          type: boolean\r\n      required:\r\n        - custom_field\r\n      type: object\r\n    AddFollowersRequest:\r\n      properties:\r\n        followers:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example: 521621,621373\r\n          type: string\r\n      required:\r\n        - followers\r\n      type: object\r\n    AddMembersRequest:\r\n      properties:\r\n        members:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example: 521621,621373\r\n          type: string\r\n      required:\r\n        - members\r\n      type: object\r\n    AsanaNamedResource:\r\n      description: A generic Asana Resource, containing a globally unique identifier.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - properties:\r\n            name:\r\n              description: The name of the object.\r\n              example: Bug Task\r\n              type: string\r\n          type: object\r\n    AsanaResource:\r\n      description: A generic Asana Resource, containing a globally unique identifier.\r\n      properties:\r\n        gid:\r\n          description: Globally unique identifier of the resource, as a string.\r\n          example: \"12345\"\r\n          readOnly: true\r\n          type: string\r\n          x-insert-after: false\r\n        resource_type:\r\n          description: The base type of this resource.\r\n          example: task\r\n          readOnly: true\r\n          type: string\r\n          x-insert-after: gid\r\n      type: object\r\n    AttachmentBase:\r\n      $ref: \"#/components/schemas/AttachmentCompact\"\r\n    AttachmentCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: An *attachment* object represents any file attached to a task in Asana, whether it’s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive.\r\n          properties:\r\n            name:\r\n              description: The name of the file.\r\n              example: Screenshot.png\r\n              readOnly: true\r\n              type: string\r\n            resource_subtype:\r\n              description: |-\r\n                The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, and `external`.\r\n                `external` attachments are a beta feature currently limited to specific integrations.\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: attachment\r\n    AttachmentRequest:\r\n      properties:\r\n        file:\r\n          format: binary\r\n          type: string\r\n      type: object\r\n    AttachmentResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AttachmentBase\"\r\n        - properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            download_url:\r\n              description: |-\r\n                The URL containing the content of the attachment.\r\n                *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.\r\n              example: https://s3.amazonaws.com/assets/123/Screenshot.png\r\n              format: uri\r\n              nullable: true\r\n              readOnly: true\r\n              type: string\r\n            host:\r\n              description: The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive` and `box`.\r\n              example: dropbox\r\n              readOnly: true\r\n              type: string\r\n            parent:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: The task this attachment is attached to.\r\n              readOnly: true\r\n            view_url:\r\n              description: The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.\r\n              example: https://www.dropbox.com/s/123/Screenshot.png\r\n              format: uri\r\n              nullable: true\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n    BatchRequest:\r\n      description: A request object for use in a batch request.\r\n      properties:\r\n        actions:\r\n          description: Batch request actions\r\n          items:\r\n            $ref: \"#/components/schemas/BatchRequestAction\"\r\n          type: array\r\n      type: object\r\n    BatchRequestAction:\r\n      description: An action object for use in a batch request.\r\n      properties:\r\n        data:\r\n          description: For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.\r\n          example:\r\n            assignee: me\r\n            workspace: \"1337\"\r\n          type: object\r\n        method:\r\n          description: The HTTP method you wish to emulate for the action.\r\n          enum:\r\n            - get\r\n            - post\r\n            - put\r\n            - delete\r\n            - patch\r\n            - head\r\n          example: get\r\n          type: string\r\n        options:\r\n          description: Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.\r\n          example:\r\n            fields:\r\n              - name\r\n              - notes\r\n              - completed\r\n            limit: 3\r\n          properties:\r\n            fields:\r\n              description: The fields to retrieve in the request.\r\n              example:\r\n                - name\r\n                - gid\r\n                - notes\r\n                - completed\r\n              items:\r\n                type: string\r\n              type: array\r\n            limit:\r\n              description: Pagination limit for the request.\r\n              example: 50\r\n              type: integer\r\n            offset:\r\n              description: Pagination offset for the request.\r\n              example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9\r\n              type: integer\r\n          type: object\r\n        relative_path:\r\n          description: The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.\r\n          example: /tasks/123\r\n          type: string\r\n      required:\r\n        - relative_path\r\n        - method\r\n      type: object\r\n    BatchResponse:\r\n      description: A response object returned from a batch request.\r\n      properties:\r\n        body:\r\n          description: The JSON body that the invoked endpoint returned.\r\n          example:\r\n            data:\r\n              completed: false\r\n              gid: \"1967\"\r\n              name: Hello, world!\r\n              notes: How are you today?\r\n          type: object\r\n        headers:\r\n          description: A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.\r\n          example:\r\n            location: /tasks/1234\r\n          type: object\r\n        status_code:\r\n          description: The HTTP status code that the invoked endpoint returned.\r\n          example: 200\r\n          type: integer\r\n      type: object\r\n    CustomFieldBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/CustomFieldCompact\"\r\n        - properties:\r\n            currency_code:\r\n              description: ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.\r\n              example: EUR\r\n              nullable: true\r\n              type: string\r\n            custom_label:\r\n              description: This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.\r\n              example: gold pieces\r\n              nullable: true\r\n              type: string\r\n            custom_label_position:\r\n              description: Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.\r\n              enum:\r\n                - prefix\r\n                - suffix\r\n              example: suffix\r\n              type: string\r\n            description:\r\n              description: \"[Opt In](/docs/input-output-options). The description of the custom field.\"\r\n              example: Development team priority\r\n              type: string\r\n            enum_options:\r\n              description: \"*Conditional*. Only relevant for custom fields of type enum. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).\"\r\n              items:\r\n                $ref: \"#/components/schemas/EnumOption\"\r\n              type: array\r\n            format:\r\n              description: The format of this custom field.\r\n              enum:\r\n                - currency\r\n                - identifier\r\n                - percentage\r\n                - custom\r\n                - none\r\n              example: custom\r\n              type: string\r\n            has_notifications_enabled:\r\n              description: \"*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.\"\r\n              example: true\r\n              type: boolean\r\n            is_global_to_workspace:\r\n              description: This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.\r\n              example: true\r\n              readOnly: true\r\n              type: boolean\r\n            precision:\r\n              description: |-\r\n                Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.\r\n                For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.\r\n                The identifier format will always have a precision of 0.\r\n              example: 2\r\n              type: integer\r\n          type: object\r\n    CustomFieldCompact:\r\n      description: Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [Custom Fields](/docs/asana-custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: |-\r\n            Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [Custom Fields](/docs/asana-custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.\r\n\r\n            Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`.\r\n          properties:\r\n            display_value:\r\n              description: A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.\r\n              example: blue\r\n              readOnly: true\r\n              type: string\r\n            enabled:\r\n              description: \"*Conditional*. Determines if the custom field is enabled or not.\"\r\n              example: true\r\n              type: boolean\r\n            enum_options:\r\n              description: \"*Conditional*. Only relevant for custom fields of type enum. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).\"\r\n              items:\r\n                $ref: \"#/components/schemas/EnumOption\"\r\n              type: array\r\n            name:\r\n              description: The name of the custom field.\r\n              example: Status\r\n              type: string\r\n            number_value:\r\n              description: \"*Conditional*. This number is the value of a number custom field.\"\r\n              example: 5.2\r\n              type: number\r\n            resource_subtype:\r\n              description: |\r\n                The type of the custom field. Must be one of the given values.\r\n              enum:\r\n                - text\r\n                - enum\r\n                - number\r\n              example: text\r\n              type: string\r\n            text_value:\r\n              description: \"*Conditional*. This string is the value of a text custom field.\"\r\n              example: Some Value\r\n              type: string\r\n            type:\r\n              description: |\r\n                *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.\r\n              enum:\r\n                - text\r\n                - enum\r\n                - number\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: custom_field\r\n    CustomFieldRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/CustomFieldBase\"\r\n        - properties:\r\n            workspace:\r\n              description: \"*Create-Only* The workspace to create a custom field in.\"\r\n              example: \"1331\"\r\n              type: string\r\n          required:\r\n            - workspace\r\n          type: object\r\n    CustomFieldResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/CustomFieldBase\"\r\n        - properties:\r\n            created_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            enum_value:\r\n              $ref: \"#/components/schemas/EnumOption\"\r\n              description: \"*Conditional*. Only relevant for custom fields of type `enum`. This object is the chosen value of an enum custom field.\"\r\n          type: object\r\n    CustomFieldSettingBase:\r\n      $ref: \"#/components/schemas/CustomFieldSettingCompact\"\r\n    CustomFieldSettingCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: Custom Fields Settings objects represent the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing.\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: custom_field_setting\r\n    CustomFieldSettingResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/CustomFieldSettingBase\"\r\n        - properties:\r\n            custom_field:\r\n              $ref: \"#/components/schemas/CustomFieldResponse\"\r\n              description: The custom field that is applied to the `parent`.\r\n              readOnly: true\r\n            is_important:\r\n              description: \"`is_important` is used in the Asana web application to determine if this custom field is displayed in the list/grid view of a project or portfolio.\"\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            parent:\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n              description: The parent to which the custom field is applied. This can be a project or portfolio and indicates that the tasks or projects that the parent contains may be given custom field values for this custom field.\r\n              readOnly: true\r\n            project:\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n              description: \"*Deprecated: new integrations should prefer the `parent` field.* The id of the project that this custom field settings refers to.\"\r\n              readOnly: true\r\n          type: object\r\n    EmptyResponse:\r\n      description: An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.\r\n      type: object\r\n    EnumOption:\r\n      description: Enum options are the possible values which an enum custom field can adopt.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: |-\r\n            Enum options are the possible values which an enum custom field can adopt. An enum custom field must contain at least 1 enum option but no more than 50.\r\n\r\n            You can add enum options to a custom field by using the `POST /custom_fields/custom_field_gid/enum_options` endpoint.\r\n\r\n            **It is not possible to remove or delete an enum option**. Instead, enum options can be disabled by updating the `enabled` field to false with the `PUT /enum_options/enum_option_gid` endpoint. Other attributes can be updated similarly.\r\n\r\n            On creation of an enum option, `enabled` is always set to `true`, meaning the enum option is a selectable value for the custom field. Setting `enabled=false` is equivalent to “trashing” the enum option in the Asana web app within the “Edit Fields” dialog. The enum option will no longer be selectable but, if the enum option value was previously set within a task, the task will retain the value.\r\n\r\n            Enum options are an ordered list and by default new enum options are inserted at the end. Ordering in relation to existing enum options can be specified on creation by using `insert_before` or `insert_after` to reference an existing enum option. Only one of `insert_before` and `insert_after` can be provided when creating a new enum option.\r\n\r\n            An enum options list can be reordered with the `POST /custom_fields/custom_field_gid/enum_options/insert` endpoint.\r\n          properties:\r\n            color:\r\n              description: The color of the enum option. Defaults to ‘none’.\r\n              example: blue\r\n              type: string\r\n            enabled:\r\n              description: Whether or not the enum option is a selectable value for the custom field.\r\n              example: true\r\n              type: boolean\r\n            name:\r\n              description: The name of the enum option.\r\n              example: Low\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: enum_option\r\n    EnumOptionBase:\r\n      $ref: \"#/components/schemas/EnumOption\"\r\n    EnumOptionInsertRequest:\r\n      properties:\r\n        after_enum_option:\r\n          description: An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.\r\n          example: \"12345\"\r\n          type: string\r\n        before_enum_option:\r\n          description: An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.\r\n          example: \"12345\"\r\n          type: string\r\n        enum_option:\r\n          description: The gid of the enum option to relocate.\r\n          example: \"97285\"\r\n          type: string\r\n      required:\r\n        - enum_option\r\n      type: object\r\n    EnumOptionRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/EnumOptionBase\"\r\n        - properties:\r\n            insert_after:\r\n              description: An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.\r\n              example: \"12345\"\r\n              type: string\r\n            insert_before:\r\n              description: An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.\r\n              example: \"12345\"\r\n              type: string\r\n          type: object\r\n    Error:\r\n      properties:\r\n        help:\r\n          description: Additional information directing developers to resources on how to address and fix the problem, if available.\r\n          example: \"For more information on API status codes and how to handle them, read the docs on errors: https://asana.github.io/developer-docs/#errors'\"\r\n          readOnly: true\r\n          type: string\r\n        message:\r\n          description: Message providing more detail about the error that occurred, if available.\r\n          example: \"project: Missing input\"\r\n          readOnly: true\r\n          type: string\r\n        phrase:\r\n          description: \"*500 errors only*. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana’s logs.\"\r\n          example: 6 sad squid snuggle softly\r\n          readOnly: true\r\n          type: string\r\n      type: object\r\n    ErrorResponse:\r\n      description: |-\r\n        Sadly, sometimes requests to the API are not successful. Failures can\r\n        occur for a wide range of reasons. In all cases, the API should return\r\n        an HTTP Status Code that indicates the nature of the failure,\r\n        with a response body in JSON format containing additional information.\r\n\r\n\r\n        In the event of a server error the response body will contain an error\r\n        phrase. These phrases are automatically generated using the\r\n        [node-asana-phrase\r\n        library](https://github.com/Asana/node-asana-phrase) and can be used by\r\n        Asana support to quickly look up the incident that caused the server\r\n        error.\r\n      properties:\r\n        errors: \r\n          description: Array of errors when requests to the API are not successful.\r\n          items:\r\n            $ref: \"#/components/schemas/Error\"\r\n          type: array\r\n      type: object\r\n    EventResponse:\r\n      description: |-\r\n        An *event* is an object representing a change to a resource that was\r\n        observed by an event subscription or delivered asynchronously to\r\n        the target location of an active webhook.\r\n\r\n        The event may be triggered by a different `user` than the\r\n        subscriber. For example, if user A subscribes to a task and user B\r\n        modified it, the event’s user will be user B. Note: Some events\r\n        are generated by the system, and will have `null` as the user. API\r\n        consumers should make sure to handle this case.\r\n\r\n        The `resource` that triggered the event may be different from the one\r\n        that the events were requested for or the webhook is subscribed to. For\r\n        example, a subscription to a project will contain events for tasks\r\n        contained within the project.\r\n\r\n        **Note:** pay close attention to the relationship between the fields\r\n        `Event.action` and `Event.change.action`.\r\n        `Event.action` represents the action taken on the resource\r\n        itself, and `Event.change.action` represents how the information\r\n        within the resource's fields have been modified.\r\n\r\n        For instance, consider these scenarios:\r\n\r\n\r\n        * When at task is added to a project, `Event.action` will be\r\n        `added`, `Event.parent` will be on object with the `id` and\r\n        `type` of the project, and there will be no `change` field.\r\n\r\n\r\n        * When an assignee is set on the task, `Event.parent` will be\r\n        `null`, `Event.action` will be `changed`,\r\n        `Event.change.action` will be `changed`, and `changed_value` will\r\n        be an object with the user's `id` and `type`.\r\n\r\n\r\n        * When a collaborator is added to the task, `Event.parent` will\r\n        be `null`, `Event.action` will be `changed`,\r\n        `Event.change.action` will be `added`, and `added_value` will be\r\n        an object with the user's `id` and `type`.\r\n      properties:\r\n        action:\r\n          description: The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.\r\n          example: changed\r\n          readOnly: true\r\n          type: string\r\n        change:\r\n          description: Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.\r\n          properties:\r\n            action:\r\n              description: The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.\r\n              example: changed\r\n              readOnly: true\r\n              type: string\r\n            added_value:\r\n              description: \"*Conditional.* This property is only present when the **field's** `action` is `added` and the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.\"\r\n              example:\r\n                gid: \"12345\"\r\n                resource_type: user\r\n            field:\r\n              description: The name of the field that has changed in the resource.\r\n              example: assignee\r\n              readOnly: true\r\n              type: string\r\n            new_value:\r\n              description: \"*Conditional.* This property is only present when the **field's** `action` is `changed` and the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.\"\r\n              example:\r\n                gid: \"12345\"\r\n                resource_type: user\r\n            removed_value:\r\n              description: \"*Conditional.* This property is only present when the **field's** `action` is `removed` and the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.\"\r\n              example:\r\n                gid: \"12345\"\r\n                resource_type: user\r\n          readOnly: true\r\n          type: object\r\n        created_at:\r\n          description: The timestamp when the event occurred.\r\n          example: 2012-02-22T02:06:58.147Z\r\n          format: date-time\r\n          readOnly: true\r\n          type: string\r\n        parent:\r\n          description: For added/removed events, the parent object that resource was added to or removed from.\r\n          $ref: \"#/components/schemas/AsanaNamedResource\"\r\n        resource:\r\n          $ref: \"#/components/schemas/AsanaNamedResource\"\r\n          description: The resource which has triggered the event by being modified in some way.\r\n        type:\r\n          description: \"*Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.\"\r\n          example: task\r\n          readOnly: true\r\n          type: string\r\n        user:\r\n          $ref: \"#/components/schemas/UserCompact\"\r\n          description: The user who triggered the event.\r\n      type: object\r\n    JobBase:\r\n      $ref: \"#/components/schemas/JobCompact\"\r\n    JobCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *job* is an object representing a process that handles asynchronous work.\r\n          properties:\r\n            new_project:\r\n              description: Represents prioritized list of tasks in Asana or a board with columns of tasks.\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n            new_task:\r\n              description: Represents basic object around which many operations in Asana are centered.\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n            resource_subtype:\r\n              description: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.\r\n              example: duplicate_task\r\n              readOnly: true\r\n              type: string\r\n            status:\r\n              description: Status of job.\r\n              enum:\r\n                - not_started\r\n                - in_progress\r\n                - completed\r\n                - failed\r\n              example: in_progress\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: job\r\n    JobResponse:\r\n      $ref: \"#/components/schemas/JobBase\"\r\n    Like:\r\n      description: An object to represent a user's like.\r\n      properties:\r\n        gid:\r\n          description: Globally unique identifier of the object, as a string.\r\n          example: \"12345\"\r\n          readOnly: true\r\n          type: string\r\n        user:\r\n          $ref: \"#/components/schemas/UserCompact\"\r\n      type: object\r\n    ModifyDependenciesRequest:\r\n      example:\r\n        dependencies:\r\n          - \"133713\"\r\n          - \"184253\"\r\n      properties:\r\n        dependencies:\r\n          description: An array of task gids that a task depends on.\r\n          items:\r\n            type: string\r\n          type: array\r\n      type: object\r\n    ModifyDependentsRequest:\r\n      description: A set of dependent tasks.\r\n      example:\r\n        dependents:\r\n          - \"133713\"\r\n          - \"184253\"\r\n      properties:\r\n        dependents:\r\n          description: An array of task gids that are dependents of the given task.\r\n          items:\r\n            type: string\r\n          type: array\r\n      type: object\r\n    OrganizationExportBase:\r\n      $ref: \"#/components/schemas/OrganizationExportCompact\"\r\n    OrganizationExportCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: An *organization_export* object represents a request to export the complete data of an Organization in JSON format.\r\n          properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            download_url:\r\n              description: |-\r\n                Download this URL to retreive the full export of the organization\r\n                in JSON format. It will be compressed in a gzip (.gz) container.\r\n\r\n                *Note: May be null if the export is still in progress or\r\n                failed.  If present, this URL may only be valid for 1 hour from\r\n                the time of retrieval. You should avoid persisting this URL\r\n                somewhere and rather refresh on demand to ensure you do not keep\r\n                stale URLs.*\r\n              example: https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx\r\n              format: uri\r\n              nullable: true\r\n              readOnly: true\r\n              type: string\r\n            organization:\r\n              description: Represents workspace is the highest-level organizational unit in Asana\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n            state:\r\n              description: The current state of the export.\r\n              enum:\r\n                - pending\r\n                - started\r\n                - finished\r\n                - error\r\n              example: started\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: organization_export\r\n    OrganizationExportRequest:\r\n      description: An *organization_export* request starts a job to export the complete data of the given Organization.\r\n      properties:\r\n        organization:\r\n          description: Globally unique identifier for the workspace or organization.\r\n          example: \"1331\"\r\n          type: string\r\n      type: object\r\n    OrganizationExportResponse:\r\n      $ref: \"#/components/schemas/OrganizationExportBase\"\r\n    PortfolioAddItemRequest:\r\n      properties:\r\n        insert_after:\r\n          description: An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.\r\n          example: \"1331\"\r\n          type: string\r\n        insert_before:\r\n          description: An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.\r\n          example: \"1331\"\r\n          type: string\r\n        item:\r\n          description: The item to add to the portfolio.\r\n          example: \"1331\"\r\n          type: string\r\n      required:\r\n        - item\r\n      type: object\r\n    PortfolioBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/PortfolioCompact\"\r\n        - properties:\r\n            color:\r\n              description: Color of the portfolio.\r\n              enum:\r\n                - dark-pink\r\n                - dark-green\r\n                - dark-blue\r\n                - dark-red\r\n                - dark-teal\r\n                - dark-brown\r\n                - dark-orange\r\n                - dark-purple\r\n                - dark-warm-gray\r\n                - light-pink\r\n                - light-green\r\n                - light-blue\r\n                - light-red\r\n                - light-teal\r\n                - light-brown\r\n                - light-orange\r\n                - light-purple\r\n                - light-warm-gray\r\n              example: light-green\r\n              type: string\r\n          type: object\r\n    PortfolioCompact:\r\n      description: A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: |-\r\n            A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/docs/asana-project-statuses) update.\r\n            Portfolios have some restrictions on size. Each portfolio has a max of 250 items and, like projects, a max of 20 custom fields.\r\n          properties:\r\n            name:\r\n              description: The name of the portfolio.\r\n              example: Bug Portfolio\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: portfolio\r\n    PortfolioMembershipBase:\r\n      $ref: \"#/components/schemas/PortfolioMembershipCompact\"\r\n    PortfolioMembershipCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: This object determines if a user is a member of a portfolio.\r\n          properties:\r\n            portfolio:\r\n              $ref: \"#/components/schemas/PortfolioCompact\"\r\n              description: \"[Opt In](/docs/input-output-options). The portfolio the user is a member of.\"\r\n            user:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: portfolio_membership\r\n    PortfolioMembershipResponse:\r\n      $ref: \"#/components/schemas/PortfolioMembershipBase\"\r\n    PortfolioRemoveItemRequest:\r\n      properties:\r\n        item:\r\n          description: The item to remove from the portfolio.\r\n          example: \"1331\"\r\n          type: string\r\n      required:\r\n        - item\r\n      type: object\r\n    PortfolioRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/PortfolioBase\"\r\n        - properties:\r\n            members:\r\n              description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n              example:\r\n                - \"52164\"\r\n                - \"15363\"\r\n              items:\r\n                description: Gid of an object.\r\n                type: string\r\n              type: array\r\n            workspace:\r\n              description: Gid of an object.\r\n              example: \"167589\"\r\n              type: string\r\n          type: object\r\n    PortfolioResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/PortfolioBase\"\r\n        - properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            created_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            custom_field_settings:\r\n              description: Array of custom field settings applied to the portfolio.\r\n              items:\r\n                $ref: \"#/components/schemas/CustomFieldSettingResponse\"\r\n              type: array\r\n            due_on:\r\n              description: The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.\r\n              example: 2019-09-15\r\n              format: date-time\r\n              nullable: true\r\n              type: string\r\n            members:\r\n              items:\r\n                $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n              type: array\r\n            owner:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            permalink_url:\r\n              description: A url that points directly to the object within Asana.\r\n              example: https://app.asana.com/0/resource/123456789/list\r\n              readOnly: true\r\n              type: string\r\n            start_on:\r\n              description: \"The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*\"\r\n              example: 2019-09-14\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n            workspace:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              description: \"*Create-only*. The workspace or organization that the portfolio belongs to.\"\r\n          type: object\r\n    Preview:\r\n      description: |-\r\n        A collection of rich text that will be displayed as a preview to another app.\r\n\r\n        This is read-only except for a small group of whitelisted apps.\r\n      properties:\r\n        fallback:\r\n          description: Some fallback text to display if unable to display the full preview.\r\n          example: \"Greg: Great! I like this idea.\\\\n\\\\nhttps//a_company.slack.com/archives/ABCDEFG/12345678\"\r\n          type: string\r\n        footer:\r\n          description: Text to display in the footer.\r\n          example: Mar 17, 2019 1:25 PM\r\n          type: string\r\n        header:\r\n          description: Text to display in the header.\r\n          example: Asana for Slack\r\n          type: string\r\n        header_link:\r\n          description: Where the header will link to.\r\n          example: https://asana.comn/apps/slack\r\n          type: string\r\n        html_text:\r\n          description: HTML formatted text for the body of the preview.\r\n          example: \u003cbody\u003eGreat! I like this idea.\u003c/body\u003e\r\n          type: string\r\n        text:\r\n          description: Text for the body of the preview.\r\n          example: Great! I like this idea.\r\n          type: string\r\n        title:\r\n          description: Text to display as the title.\r\n          example: Greg\r\n          type: string\r\n        title_link:\r\n          description: Where to title will link to.\r\n          example: https://asana.slack.com/archives/ABCDEFG/12345678\r\n          type: string\r\n      readOnly: true\r\n      type: object\r\n    ProjectBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectCompact\"\r\n        - properties:\r\n            archived:\r\n              description: True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.\r\n              example: false\r\n              type: boolean\r\n            color:\r\n              description: Color of the project.\r\n              enum:\r\n                - dark-pink\r\n                - dark-green\r\n                - dark-blue\r\n                - dark-red\r\n                - dark-teal\r\n                - dark-brown\r\n                - dark-orange\r\n                - dark-purple\r\n                - dark-warm-gray\r\n                - light-pink\r\n                - light-green\r\n                - light-blue\r\n                - light-red\r\n                - light-teal\r\n                - light-brown\r\n                - light-orange\r\n                - light-purple\r\n                - light-warm-gray\r\n              example: light-green\r\n              nullable: true\r\n              type: string\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            current_status:\r\n              $ref: \"#/components/schemas/ProjectStatusResponse\"\r\n            custom_field_settings:\r\n              description: Array of Custom Field Settings (in compact form).\r\n              items:\r\n                $ref: \"#/components/schemas/CustomFieldSettingCompact\"\r\n              readOnly: true\r\n              type: array\r\n            default_view:\r\n              description: The default view (list, board, calendar, or timeline) of a project.\r\n              enum:\r\n                - list\r\n                - board\r\n                - calendar\r\n                - timeline\r\n              example: calendar\r\n              type: string\r\n            due_date:\r\n              description: \"*Deprecated: new integrations should prefer the due_on field.*\"\r\n              example: 2019-09-15\r\n              format: date-time\r\n              nullable: true\r\n              type: string\r\n            due_on:\r\n              description: The day on which this project is due. This takes a date with format YYYY-MM-DD.\r\n              example: 2019-09-15\r\n              format: date-time\r\n              nullable: true\r\n              type: string\r\n            html_notes:\r\n              description: \"[Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.\"\r\n              example: \u003cbody\u003eThese are things we need to purchase.\u003c/body\u003e\r\n              type: string\r\n            is_template:\r\n              description: \"[Opt In](/docs/input-output-options). Determines if the project is a template.\"\r\n              example: false\r\n              type: boolean\r\n            members:\r\n              description: Array of users who are members of this project.\r\n              items:\r\n                $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n              type: array\r\n            modified_at:\r\n              description: |-\r\n                The time at which this project was last modified.\r\n                *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            notes:\r\n              description: More detailed, free-form textual information associated with the project.\r\n              example: These are things we need to purchase.\r\n              type: string\r\n            public:\r\n              description: True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.\r\n              example: false\r\n              type: boolean\r\n            start_on:\r\n              description: \"The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*\"\r\n              example: 2019-09-14\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n            workspace:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              description: \"*Create-only*. The workspace or organization this project is associated with. Once created, projects cannot be moved to a different workspace. This attribute can only be specified at creation time.\"\r\n              readOnly: true\r\n          type: object\r\n    ProjectCompact:\r\n      description: A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.\r\n          properties:\r\n            name:\r\n              description: Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.\r\n              example: Stuff to buy\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: project\r\n    ProjectDuplicateRequest:\r\n      properties:\r\n        include:\r\n          description: The elements that will be duplicated to the new project. Tasks are always included.\r\n          enum:\r\n            - members\r\n            - notes\r\n            - forms\r\n            - task_notes\r\n            - task_assignee\r\n            - task_subtasks\r\n            - task_attachments\r\n            - task_dates\r\n            - task_dependencies\r\n            - task_followers\r\n            - task_tags\r\n            - task_projects\r\n          example:\r\n            - members\r\n            - task_notes\r\n          type: string\r\n        name:\r\n          description: The name of the new project.\r\n          example: New Project Name\r\n          type: string\r\n        schedule_dates:\r\n          description: A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.\r\n          properties:\r\n            due_on:\r\n              description: Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.\r\n              example: 2019-05-21\r\n              type: string\r\n            should_skip_weekends:\r\n              description: Determines if the auto-shifted dates should skip weekends.\r\n              example: true\r\n              type: boolean\r\n            start_on:\r\n              description: Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.\r\n              example: 2019-05-21\r\n              type: string\r\n          required:\r\n            - should_skip_weekends\r\n          type: object\r\n        team:\r\n          description: Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.\r\n          example: \"12345\"\r\n          type: string\r\n      required:\r\n        - name\r\n      type: object\r\n    ProjectMembershipBase:\r\n      $ref: \"#/components/schemas/ProjectMembershipCompact\"\r\n    ProjectMembershipCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: With the introduction of “comment-only” projects in Asana, a user’s membership in a project comes with associated permissions. These permissions (whether a user has full access to the project or comment-only access) are accessible through the project memberships endpoints described here.\r\n          properties:\r\n            user:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: project_membership\r\n    ProjectMembershipResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectMembershipBase\"\r\n        - properties:\r\n            project:\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n              description: \"[Opt In](/docs/input-output-options). The project the user is a member of.\"\r\n            write_access:\r\n              description: Whether the user has full access to the project or has comment-only access.\r\n              enum:\r\n                - full_write\r\n                - comment_only\r\n              example: full_write\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n    ProjectRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectBase\"\r\n        - properties:\r\n            custom_fields:\r\n              additionalProperties:\r\n                description: '\"{custom_field_gid}\" =\u003e Value (Can be text, number, etc.)'\r\n                type: string\r\n              description: An object where each key is a Custom Field gid and each value is an enum gid, string, or number.\r\n              example:\r\n                \"4578152156\": Not Started\r\n                \"5678904321\": On Hold\r\n              type: object\r\n            followers:\r\n              description: \"*Create-only*. Comma separated string of users. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.\"\r\n              example: 12345,23456\r\n              type: string\r\n            owner:\r\n              description: The current owner of the project, may be null.\r\n              example: \"12345\"\r\n              nullable: true\r\n              type: string\r\n            team:\r\n              description: \"*Create-only*. The team that this project is shared with. This field only exists for projects in organizations.\"\r\n              example: \"12345\"\r\n              type: string\r\n          type: object\r\n    ProjectResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectBase\"\r\n        - properties:\r\n            custom_fields:\r\n              description: Array of Custom Fields.\r\n              items:\r\n                $ref: \"#/components/schemas/CustomFieldCompact\"\r\n              readOnly: true\r\n              type: array\r\n            followers:\r\n              description: Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.\r\n              items:\r\n                $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n              type: array\r\n            icon:\r\n              description: The icon for a project.\r\n              enum:\r\n                - list\r\n                - board\r\n                - timeline\r\n                - calendar\r\n                - rocket\r\n                - people\r\n                - graph\r\n                - star\r\n                - bug\r\n                - light_bulb\r\n                - globe\r\n                - gear\r\n                - notebook\r\n                - computer\r\n                - check\r\n                - target\r\n                - html\r\n                - megaphone\r\n                - chat_bubbles\r\n                - briefcase\r\n                - page_layout\r\n                - mountain_flag\r\n                - puzzle\r\n                - presentation\r\n                - line_and_symbols\r\n                - speed_dial\r\n                - ribbon\r\n                - shoe\r\n                - shopping_basket\r\n                - map\r\n                - ticket\r\n                - coins\r\n              example: chat_bubbles\r\n              nullable: true\r\n              type: string\r\n            owner:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n              description: The current owner of the project, may be null.\r\n              nullable: true\r\n            permalink_url:\r\n              description: A url that points directly to the object within Asana.\r\n              example: https://app.asana.com/0/resource/123456789/list\r\n              readOnly: true\r\n              type: string\r\n            team:\r\n              $ref: \"#/components/schemas/TeamCompact\"\r\n              description: \"*Create-only*. The team that this project is shared with. This field only exists for projects in organizations.\"\r\n          type: object\r\n    ProjectSectionInsertRequest:\r\n      properties:\r\n        after_section:\r\n          description: Insert the given section immediately after the section specified by this parameter.\r\n          example: \"987654\"\r\n          type: string\r\n        before_section:\r\n          description: Insert the given section immediately before the section specified by this parameter.\r\n          example: \"86420\"\r\n          type: string\r\n        project:\r\n          description: The project in which to reorder the given section.\r\n          example: \"123456\"\r\n          type: string\r\n        section:\r\n          description: The section to reorder.\r\n          example: \"321654\"\r\n          type: string\r\n      required:\r\n        - project\r\n        - section\r\n      type: object\r\n    ProjectStatusBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectStatusCompact\"\r\n        - properties:\r\n            author:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            color:\r\n              description: The color associated with the status update.\r\n              enum:\r\n                - green\r\n                - yellow\r\n                - red\r\n                - blue\r\n              type: string\r\n            html_text:\r\n              description: \"[Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.\"\r\n              example: \u003cbody\u003eThe project \u003cstrong\u003eis\u003c/strong\u003e moving forward according to plan...\u003c/body\u003e\r\n              type: string\r\n            modified_at:\r\n              description: |-\r\n                The time at which this project status was last modified.\r\n                *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*\r\n            text:\r\n              description: The text content of the status update.\r\n              example: The project is moving forward according to plan...\r\n              type: string\r\n          required:\r\n            - text\r\n            - color\r\n          type: object\r\n    ProjectStatusCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: 'A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: \"green\" for projects that are on track, \"yellow\" for projects at risk, and \"red\" for projects that are behind.'\r\n          properties:\r\n            title:\r\n              description: The title of the project status update.\r\n              example: Status Update - Jun 15\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: project_status\r\n    ProjectStatusRequest:\r\n      $ref: \"#/components/schemas/ProjectStatusBase\"\r\n    ProjectStatusResponse:\r\n      nullable: true\r\n      allOf:\r\n        - $ref: \"#/components/schemas/ProjectStatusBase\"\r\n        - properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            created_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n          type: object\r\n    RemoveCustomFieldSettingRequest:\r\n      properties:\r\n        custom_field:\r\n          description: The custom field to remove from this portfolio.\r\n          example: \"14916\"\r\n          type: string\r\n      required:\r\n        - custom_field\r\n      type: object\r\n    RemoveFollowersRequest:\r\n      properties:\r\n        followers:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example: 521621,621373\r\n          type: string\r\n      required:\r\n        - followers\r\n      type: object\r\n    RemoveMembersRequest:\r\n      properties:\r\n        members:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example: 521621,621373\r\n          type: string\r\n      required:\r\n        - members\r\n      type: object\r\n    SectionBase:\r\n      $ref: \"#/components/schemas/SectionCompact\"\r\n    SectionCompact:\r\n      description: A section is a subdivision of a project that groups tasks together.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *section* is a subdivision of a project that groups tasks together. It can either be a header above a list of tasks in a list view or a column in a board view of a project.\r\n          properties:\r\n            name:\r\n              description: The name of the section (i.e. the text displayed as the section header).\r\n              example: Next Actions\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: section\r\n    SectionRequest:\r\n      properties:\r\n        insert_after:\r\n          description: An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.\r\n          example: \"987654\"\r\n          type: string\r\n        insert_before:\r\n          description: An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.\r\n          example: \"86420\"\r\n          type: string\r\n        name:\r\n          description: The text to be displayed as the section name. This cannot be an empty string.\r\n          example: Next Actions\r\n          type: string\r\n        project:\r\n          description: \"*Create-Only* The project to create the section in\"\r\n          example: \"13579\"\r\n          type: string\r\n      required:\r\n        - project\r\n        - name\r\n      type: object\r\n    SectionResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/SectionBase\"\r\n        - properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            project:\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n            projects:\r\n              description: \"*Deprecated - please use project instead*\"\r\n              items:\r\n                $ref: \"#/components/schemas/ProjectCompact\"\r\n              readOnly: true\r\n              type: array\r\n          type: object\r\n    SectionTaskInsertRequest:\r\n      properties:\r\n        insert_after:\r\n          description: An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.\r\n          example: \"987654\"\r\n          type: string\r\n        insert_before:\r\n          description: An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.\r\n          example: \"86420\"\r\n          type: string\r\n        task:\r\n          description: The task to add to this section.\r\n          example: \"123456\"\r\n          type: string\r\n      required:\r\n        - task\r\n      type: object\r\n    StoryBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A story represents an activity associated with an object in the Asana system.\r\n          properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            html_text:\r\n              description: \"[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.\"\r\n              example: \u003cbody\u003eThis is a comment.\u003cbody\u003e\r\n              type: string\r\n            is_pinned:\r\n              description: \"*Conditional*. Whether the story should be pinned on the resource.\"\r\n              example: false\r\n              type: boolean\r\n            resource_subtype:\r\n              description: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.\r\n              example: comment_added\r\n              readOnly: true\r\n              type: string\r\n            sticker_name:\r\n              description: The name of the sticker in this story. `null` if there is no sticker.\r\n              enum:\r\n                - green_checkmark\r\n                - people_dancing\r\n                - dancing_unicorn\r\n                - heart\r\n                - party_popper\r\n                - people_waving_flags\r\n                - splashing_narwhal\r\n                - trophy\r\n                - yeti_riding_unicorn\r\n                - celebrating_people\r\n                - determined_climbers\r\n                - phoenix_spreading_love\r\n              example: dancing_unicorn\r\n              type: string\r\n            text:\r\n              description: The plain text of the comment to add. Cannot be used with html_text.\r\n              example: This is a comment.\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: story\r\n    StoryCompact:\r\n      description: A story represents an activity associated with an object in the Asana system.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A story represents an activity associated with an object in the Asana system.\r\n          properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            created_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            resource_subtype:\r\n              description: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.\r\n              example: comment_added\r\n              readOnly: true\r\n              type: string\r\n            text:\r\n              description: |-\r\n                *Create-only*. Human-readable text for the story or comment.\r\n                This will not include the name of the creator.\r\n                *Note: This is not guaranteed to be stable for a given type of story. For example, text for a reassignment may not always say “assigned to …” as the text for a story can both be edited and change based on the language settings of the user making the request.*\r\n                Use the `resource_subtype` property to discover the action that created the story.\r\n              example: marked today\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: story\r\n    StoryRequest:\r\n      $ref: \"#/components/schemas/StoryBase\"\r\n    StoryResponse:\r\n      description: Represents activity associated with an object in the Asana system\r\n      allOf:\r\n        - $ref: \"#/components/schemas/StoryBase\"\r\n        - properties:\r\n            assignee:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            created_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            custom_field:\r\n              $ref: \"#/components/schemas/CustomFieldCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            dependency:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            duplicate_of:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            duplicated_from:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            follower:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            hearted:\r\n              description: |-\r\n                *Deprecated - please use likes instead*\r\n                *Conditional*. True if the story is hearted by the authorized user, false if not.\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            hearts:\r\n              description: |-\r\n                *Deprecated - please use likes instead*\r\n\r\n                *Conditional*. Array of likes for users who have hearted this story.\r\n              items:\r\n                $ref: \"#/components/schemas/Like\"\r\n              readOnly: true\r\n              type: array\r\n            is_edited:\r\n              description: \"*Conditional*. Whether the text of the story has been edited after creation.\"\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            liked:\r\n              description: \"*Conditional*. True if the story is liked by the authorized user, false if not.\"\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            likes:\r\n              description: \"*Conditional*. Array of likes for users who have liked this story.\"\r\n              items:\r\n                $ref: \"#/components/schemas/Like\"\r\n              readOnly: true\r\n              type: array\r\n            new_approval_status:\r\n              description: \"*Conditional*\"\r\n              example: approved\r\n              readOnly: true\r\n              type: string\r\n            new_dates:\r\n              description: \"\"\r\n              $ref: \"#/components/schemas/StoryResponseDates\"\r\n            new_enum_value:\r\n              $ref: \"#/components/schemas/EnumOption\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            new_name:\r\n              description: \"*Conditional*\"\r\n              example: This is the New Name\r\n              readOnly: true\r\n              type: string\r\n            new_number_value:\r\n              description: \"*Conditional*\"\r\n              example: 2\r\n              readOnly: true\r\n              type: integer\r\n            new_resource_subtype:\r\n              description: \"*Conditional*\"\r\n              example: milestone\r\n              readOnly: true\r\n              type: string\r\n            new_section:\r\n              $ref: \"#/components/schemas/SectionCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            new_text_value:\r\n              description: \"*Conditional*\"\r\n              example: This is the New Text\r\n              readOnly: true\r\n              type: string\r\n            num_hearts:\r\n              description: |-\r\n                *Deprecated - please use likes instead*\r\n\r\n                *Conditional*. The number of users who have hearted this story.\r\n              example: 5\r\n              readOnly: true\r\n              type: integer\r\n            num_likes:\r\n              description: \"*Conditional*. The number of users who have liked this story.\"\r\n              example: 5\r\n              readOnly: true\r\n              type: integer\r\n            old_approval_status:\r\n              description: \"*Conditional*\"\r\n              example: pending\r\n              readOnly: true\r\n              type: string\r\n            old_dates:\r\n              $ref: \"#/components/schemas/StoryResponseDates\"\r\n            old_enum_value:\r\n              $ref: \"#/components/schemas/EnumOption\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            old_name:\r\n              description: \"*Conditional*'\"\r\n              example: This was the Old Name\r\n              type: string\r\n            old_number_value:\r\n              description: \"*Conditional*\"\r\n              example: 1\r\n              readOnly: true\r\n              type: integer\r\n            old_resource_subtype:\r\n              description: \"*Conditional*\"\r\n              example: default_task\r\n              readOnly: true\r\n              type: string\r\n            old_section:\r\n              $ref: \"#/components/schemas/SectionCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            old_text_value:\r\n              description: \"*Conditional*\"\r\n              example: This was the Old Text\r\n              readOnly: true\r\n              type: string\r\n            previews:\r\n              description: |-\r\n                *Conditional*. A collection of previews to be displayed in the story.\r\n\r\n                *Note: This property only exists for comment stories.*\r\n              items:\r\n                $ref: \"#/components/schemas/Preview\"\r\n              readOnly: true\r\n              type: array\r\n            project:\r\n              $ref: \"#/components/schemas/ProjectCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            source:\r\n              description: The component of the Asana product the user used to trigger the story.\r\n              enum:\r\n                - web\r\n                - email\r\n                - mobile\r\n                - api\r\n                - unknown\r\n              example: web\r\n              readOnly: true\r\n              type: string\r\n            story:\r\n              $ref: \"#/components/schemas/StoryCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            tag:\r\n              $ref: \"#/components/schemas/TagCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n            target:\r\n              description: The object this story is associated with. Currently may only be a task.\r\n              properties:\r\n                gid:\r\n                  description: The gid of the object this story is associated with. \r\n                  example: \"1234\"\r\n                  type: string\r\n                name:\r\n                  description: The name of the object this story is associated with. \r\n                  example: Bug Task\r\n                  type: string\r\n              readOnly: true\r\n            task:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: \"*Conditional*\"\r\n              readOnly: true\r\n          type: object\r\n    StoryResponseDates:\r\n      description: \"*Conditional*\"\r\n      properties:\r\n        due_at:\r\n          description: Date and time representing activity occurance \r\n          example: 2019-09-15T02:06:58.158Z\r\n          format: date-time\r\n          type: string\r\n        due_on:\r\n          description: Date representing activity occurance \r\n          example: 2019-09-15\r\n          format: date\r\n          type: string\r\n        start_on:\r\n          description: Date representing activity start\r\n          example: 2019-09-14\r\n          format: date\r\n          type: string\r\n      readOnly: true\r\n      type: object\r\n    TagBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TagCompact\"\r\n        - properties:\r\n            color:\r\n              description: Color of the tag.\r\n              enum:\r\n                - dark-pink\r\n                - dark-green\r\n                - dark-blue\r\n                - dark-red\r\n                - dark-teal\r\n                - dark-brown\r\n                - dark-orange\r\n                - dark-purple\r\n                - dark-warm-gray\r\n                - light-pink\r\n                - light-green\r\n                - light-blue\r\n                - light-red\r\n                - light-teal\r\n                - light-brown\r\n                - light-orange\r\n                - light-purple\r\n                - light-warm-gray\r\n              example: light-green\r\n              type: string\r\n          type: object\r\n    TagCompact:\r\n      description: A tag is a label that can be attached to any task in Asana.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *tag* is a label that can be attached to any task in Asana. It exists in a single workspace or organization.\r\n          properties:\r\n            name:\r\n              description: Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.\r\n              example: Stuff to buy\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: tag\r\n    TagRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TagBase\"\r\n        - properties:\r\n            followers:\r\n              description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n              example:\r\n                - \"12345\"\r\n                - \"42563\"\r\n              items:\r\n                type: string\r\n              type: array\r\n            workspace:\r\n              description: Gid of an object.\r\n              example: \"12345\"\r\n              type: string\r\n              x-env-variable: true\r\n          type: object\r\n    TagResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TagBase\"\r\n        - properties:\r\n            followers:\r\n              description: Array of users following this tag.\r\n              items:\r\n                $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n              type: array\r\n            permalink_url:\r\n              description: A url that points directly to the object within Asana.\r\n              example: https://app.asana.com/0/resource/123456789/list\r\n              readOnly: true\r\n              type: string\r\n            workspace:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n          type: object\r\n    TaskAddFollowersRequest:\r\n      properties:\r\n        followers:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example:\r\n            - \"13579\"\r\n            - \"321654\"\r\n          items:\r\n            type: string\r\n          type: array\r\n      required:\r\n        - followers\r\n      type: object\r\n    TaskAddProjectRequest:\r\n      properties:\r\n        insert_after:\r\n          description: A task in the project to insert the task after, or `null` to insert at the beginning of the list.\r\n          example: \"124816\"\r\n          nullable: true\r\n          type: string\r\n        insert_before:\r\n          description: A task in the project to insert the task before, or `null` to insert at the end of the list.\r\n          example: \"432134\"\r\n          nullable: true\r\n          type: string\r\n        project:\r\n          description: The project to add the task to.\r\n          example: \"13579\"\r\n          type: string\r\n        section:\r\n          description: A section in the project to insert the task into. The task will be inserted at the bottom of the section.\r\n          example: \"987654\"\r\n          nullable: true\r\n          type: string\r\n      required:\r\n        - project\r\n      type: object\r\n    TaskAddTagRequest:\r\n      properties:\r\n        tag:\r\n          description: The tag to add to the task.\r\n          example: \"13579\"\r\n          type: string\r\n      required:\r\n        - tag\r\n      type: object\r\n    TaskBase:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TaskCompact\"\r\n        - properties:\r\n            approval_status:\r\n              description: \"*Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.\"\r\n              enum:\r\n                - pending\r\n                - approved\r\n                - rejected\r\n                - changes_requested\r\n              example: pending\r\n              type: string\r\n            assignee_status:\r\n              description: '*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.'\r\n              enum:\r\n                - today\r\n                - upcoming\r\n                - later\r\n                - new\r\n                - inbox\r\n              example: upcoming\r\n              type: string\r\n            completed:\r\n              description: True if the task is currently marked complete, false if not.\r\n              example: false\r\n              type: boolean\r\n            completed_at:\r\n              description: The time at which this task was completed, or null if the task is incomplete.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              nullable: true\r\n              readOnly: true\r\n              type: string\r\n            completed_by:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            dependencies:\r\n              description: \"[Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.\"\r\n              items:\r\n                $ref: \"#/components/schemas/AsanaResource\"\r\n              readOnly: true\r\n              type: array\r\n            dependents:\r\n              description: \"[Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.\"\r\n              items:\r\n                $ref: \"#/components/schemas/AsanaResource\"\r\n              readOnly: true\r\n              type: array\r\n            due_at:\r\n              description: The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.\r\n              example: 2019-09-15T02:06:58.147Z\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n            due_on:\r\n              description: The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.\r\n              example: 2019-09-15\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n            external:\r\n              description: |-\r\n                *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).\r\n                The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.\r\n              example:\r\n                data: A blob of information\r\n                gid: my_gid\r\n              properties:\r\n                data:\r\n                  description: The data of external field allows you to store app-specific metadata on tasks.\r\n                  example: A blob of information.\r\n                  type: string\r\n                gid:\r\n                  description: Globally unique identifier of the resource, as a string.\r\n                  example: \"1234\"\r\n                  type: string\r\n              type: object\r\n            hearted:\r\n              description: \"*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.\"\r\n              example: true\r\n              readOnly: true\r\n              type: boolean\r\n            hearts:\r\n              description: \"*Deprecated - please use likes instead* Array of likes for users who have hearted this task.\"\r\n              items:\r\n                $ref: \"#/components/schemas/Like\"\r\n              readOnly: true\r\n              type: array\r\n            html_notes:\r\n              description: \"[Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.\"\r\n              example: \u003cbody\u003eMittens \u003cem\u003ereally\u003c/em\u003e likes the stuff from Humboldt.\u003c/body\u003e\r\n              type: string\r\n            is_rendered_as_separator:\r\n              description: \"[Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.\"\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            liked:\r\n              description: True if the task is liked by the authorized user, false if not.\r\n              example: true\r\n              type: boolean\r\n            likes:\r\n              description: Array of likes for users who have liked this task.\r\n              items:\r\n                $ref: \"#/components/schemas/Like\"\r\n              readOnly: true\r\n              type: array\r\n            memberships:\r\n              description: \"*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.\"\r\n              items:\r\n                properties:\r\n                  project:\r\n                    $ref: \"#/components/schemas/ProjectCompact\"\r\n                  section:\r\n                    $ref: \"#/components/schemas/SectionCompact\"\r\n                type: object\r\n              readOnly: true\r\n              type: array\r\n            modified_at:\r\n              description: |-\r\n                The time at which this task was last modified.\r\n\r\n                *Note: This does not currently reflect any changes in\r\n                associations such as projects or comments that may have been\r\n                added or removed from the task.*\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            name:\r\n              description: Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.\r\n              example: Buy catnip\r\n              type: string\r\n            notes:\r\n              description: More detailed, free-form textual information associated with the task.\r\n              example: Mittens really likes the stuff from Humboldt.\r\n              type: string\r\n            num_hearts:\r\n              description: \"*Deprecated - please use likes instead* The number of users who have hearted this task.\"\r\n              example: 5\r\n              readOnly: true\r\n              type: integer\r\n            num_likes:\r\n              description: The number of users who have liked this task.\r\n              example: 5\r\n              readOnly: true\r\n              type: integer\r\n            num_subtasks:\r\n              description: |\r\n                [Opt In](/docs/input-output-options). The number of subtasks on this task.\r\n              example: 3\r\n              readOnly: true\r\n              type: integer\r\n            resource_subtype:\r\n              description: |-\r\n                The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.\r\n                The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.\r\n              enum:\r\n                - default_task\r\n                - milestone\r\n                - section\r\n                - approval\r\n              example: default_task\r\n              type: string\r\n            start_at:\r\n              description: |-\r\n                Date and time on which work begins for the task, or null if the task has no start time. This takes a UTC timestamp format.\r\n                *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*\r\n              example: 2019-09-14T02:06:58.147Z\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n            start_on:\r\n              description: |-\r\n                The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format.\r\n                *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*\r\n              example: 2019-09-14\r\n              format: date\r\n              nullable: true\r\n              type: string\r\n          type: object\r\n    TaskCompact:\r\n      description: The *task* is the basic object around which many operations in Asana are centered.\r\n      nullable: true\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: The *task* is the basic object around which many operations in Asana are centered.\r\n          properties:\r\n            name:\r\n              description: The name of the task.\r\n              example: Bug Task\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: task\r\n    TaskCountResponse:\r\n      description: A response object returned from the task count endpoint.\r\n      properties:\r\n        num_completed_milestones:\r\n          description: The number of completed milestones in a project.\r\n          example: 3\r\n          type: integer\r\n        num_completed_tasks:\r\n          description: The number of completed tasks in a project.\r\n          example: 150\r\n          type: integer\r\n        num_incomplete_milestones:\r\n          description: The number of incomplete milestones in a project.\r\n          example: 7\r\n          type: integer\r\n        num_incomplete_tasks:\r\n          description: The number of incomplete tasks in a project.\r\n          example: 50\r\n          type: integer\r\n        num_milestones:\r\n          description: The number of milestones in a project.\r\n          example: 10\r\n          type: integer\r\n        num_tasks:\r\n          description: The number of tasks in a project.\r\n          example: 200\r\n          type: integer\r\n      type: object\r\n    TaskDuplicateRequest:\r\n      properties:\r\n        include:\r\n          description: The fields that will be duplicated to the new task.\r\n          enum:\r\n            - notes\r\n            - assignee\r\n            - subtasks\r\n            - attachments\r\n            - tags\r\n            - followers\r\n            - projects\r\n            - dates\r\n            - dependencies\r\n            - parent\r\n          example:\r\n            - notes\r\n            - assignee\r\n          type: string\r\n        name:\r\n          description: The name of the new task.\r\n          example: New Task Name\r\n          type: string\r\n      type: object\r\n    TaskRemoveFollowersRequest:\r\n      properties:\r\n        followers:\r\n          description: An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.\r\n          example:\r\n            - \"13579\"\r\n            - \"321654\"\r\n          items:\r\n            type: string\r\n          type: array\r\n      required:\r\n        - followers\r\n      type: object\r\n    TaskRemoveProjectRequest:\r\n      properties:\r\n        project:\r\n          description: The project to remove the task from.\r\n          example: \"13579\"\r\n          type: string\r\n      required:\r\n        - project\r\n      type: object\r\n    TaskRemoveTagRequest:\r\n      properties:\r\n        tag:\r\n          description: The tag to remove from the task.\r\n          example: \"13579\"\r\n          type: string\r\n      required:\r\n        - tag\r\n      type: object\r\n    TaskRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TaskBase\"\r\n        - properties:\r\n            assignee:\r\n              description: Gid of a user.\r\n              example: \"12345\"\r\n              nullable: true\r\n              readOnly: false\r\n              type: string\r\n              x-env-variable: true\r\n            custom_fields:\r\n              additionalProperties:\r\n                description: '\"{custom_field_gid}\" =\u003e Value (Can be text, number, etc.)'\r\n                type: string\r\n              description: An object where each key is a Custom Field gid and each value is an enum gid, string, or number.\r\n              example:\r\n                \"4578152156\": Not Started\r\n                \"5678904321\": On Hold\r\n              type: object\r\n            followers:\r\n              description: '*Create-Only* An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.'\r\n              example:\r\n                - \"12345\"\r\n              items:\r\n                description: Gid of a user.\r\n                type: string\r\n              type: array\r\n            parent:\r\n              description: Gid of a task.\r\n              example: \"12345\"\r\n              nullable: true\r\n              readOnly: false\r\n              type: string\r\n              x-env-variable: true\r\n            projects:\r\n              description: \"*Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.\"\r\n              example:\r\n                - \"12345\"\r\n              items:\r\n                description: Gid of a project.\r\n                type: string\r\n              type: array\r\n            tags:\r\n              description: \"*Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.\"\r\n              example:\r\n                - \"12345\"\r\n              items:\r\n                description: Gid of a tag.\r\n                type: string\r\n              type: array\r\n            workspace:\r\n              description: Gid of a workspace.\r\n              example: \"12345\"\r\n              readOnly: false\r\n              type: string\r\n              x-env-variable: true\r\n          type: object\r\n    TaskResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TaskBase\"\r\n        - properties:\r\n            assignee:\r\n              description: Users assigned to the task.\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            custom_fields:\r\n              description: Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type enum, a `text_value` property for custom fields of type text, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.\r\n              items:\r\n                $ref: \"#/components/schemas/CustomFieldResponse\"\r\n              readOnly: true\r\n              type: array\r\n            followers:\r\n              description: Array of users following this task.\r\n              items:\r\n                $ref: \"#/components/schemas/UserCompact\"\r\n              readOnly: true\r\n              type: array\r\n            parent:\r\n              $ref: \"#/components/schemas/TaskCompact\"\r\n              description: The parent of this task, or `null` if this is not a subtask. This property cannot be modified using a PUT request but you can change it with the `setParent` endpoint. You can create subtasks by using the subtasks endpoint.\r\n              readOnly: true\r\n            permalink_url:\r\n              description: A url that points directly to the object within Asana.\r\n              example: https://app.asana.com/0/resource/123456789/list\r\n              readOnly: true\r\n              type: string\r\n            projects:\r\n              description: \"*Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.\"\r\n              items:\r\n                $ref: \"#/components/schemas/ProjectCompact\"\r\n              readOnly: true\r\n              type: array\r\n            tags:\r\n              description: Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.\r\n              example:\r\n                - gid: \"59746\"\r\n                  name: Grade A\r\n              items:\r\n                $ref: \"#/components/schemas/TagCompact\"\r\n              readOnly: true\r\n              type: array\r\n            workspace:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              description: \"*Create-only*. The workspace this task is associated with. Once created, task cannot be moved to a different workspace. This attribute can only be specified at creation time.\"\r\n              readOnly: true\r\n          type: object\r\n    TaskSetParentRequest:\r\n      properties:\r\n        insert_after:\r\n          description: A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.\r\n          example: \"null\"\r\n          type: string\r\n        insert_before:\r\n          description: A subtask of the parent to insert the task before, or `null` to insert at the end of the list.\r\n          example: \"124816\"\r\n          type: string\r\n        parent:\r\n          description: The new parent of the task, or `null` for no parent.\r\n          example: \"987654\"\r\n          type: string\r\n      required:\r\n        - parent\r\n      type: object\r\n    TeamAddUserRequest:\r\n      description: A user identification object for specification with the addUser/removeUser endpoints.\r\n      properties:\r\n        user:\r\n          description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n          example: \"12345\"\r\n          type: string\r\n      type: object\r\n    TeamBase:\r\n      $ref: \"#/components/schemas/TeamCompact\"\r\n    TeamCompact:\r\n      description: A *team* is used to group related projects and people together within an organization.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.\r\n          properties:\r\n            name:\r\n              description: The name of the team.\r\n              example: Marketing\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: team\r\n    TeamMembershipBase:\r\n      $ref: \"#/components/schemas/TeamMembershipCompact\"\r\n    TeamMembershipCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: This object represents a user's connection to a team.\r\n          properties:\r\n            is_guest:\r\n              description: Describes if the user is a guest in the team.\r\n              example: false\r\n              type: boolean\r\n            team:\r\n              $ref: \"#/components/schemas/TeamCompact\"\r\n            user:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: team_membership\r\n    TeamMembershipResponse:\r\n      $ref: \"#/components/schemas/TeamMembershipBase\"\r\n    TeamRemoveUserRequest:\r\n      description: A user identification object for specification with the addUser/removeUser endpoints.\r\n      properties:\r\n        user:\r\n          description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n          example: \"12345\"\r\n          type: string\r\n      type: object\r\n    TeamRequest:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TeamBase\"\r\n        - properties:\r\n            description:\r\n              description: |\r\n                The description of the team.\r\n              example: All developers should be members of this team.\r\n              type: string\r\n            html_description:\r\n              description: |\r\n                The description of the team with formatting as HTML.\r\n              example: \u003cbody\u003e\u003cem\u003eAll\u003c/em\u003e developers should be members of this team.\u003c/body\u003e\r\n              type: string\r\n            organization:\r\n              description: |\r\n                The organization/workspace the team belongs to.\r\n              example: \"123456789\"\r\n              type: string\r\n          type: object\r\n    TeamResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/TeamBase\"\r\n        - properties:\r\n            description:\r\n              description: |\r\n                [Opt In](/docs/input-output-options). The description of the team.\r\n              example: All developers should be members of this team.\r\n              type: string\r\n            html_description:\r\n              description: |\r\n                [Opt In](/docs/input-output-options). The description of the team with formatting as HTML.\r\n              example: \u003cbody\u003e\u003cem\u003eAll\u003c/em\u003e developers should be members of this team.\u003c/body\u003e\r\n              type: string\r\n            organization:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              description: |\r\n                    The organization/workspace the team belongs to.\r\n            permalink_url:\r\n              description: A url that points directly to the object within Asana.\r\n              example: https://app.asana.com/0/resource/123456789/list\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n    UserCompact:\r\n      description: The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.\r\n      nullable: true\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.\r\n          properties:\r\n            name:\r\n              description: \"*Read-only except when same user as requester*. The user’s name.\"\r\n              example: Greg Sanchez\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: user\r\n    UserRequest:\r\n      $ref: \"#/components/schemas/UserCompact\"\r\n    UserResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/UserCompact\"\r\n        - properties:\r\n            email:\r\n              description: The user's email address.\r\n              example: gsanchez@example.com\r\n              format: email\r\n              readOnly: true\r\n              type: string\r\n            photo:\r\n              description: A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, and 128. Images are in PNG format.\r\n              example:\r\n                image_128x128: https://...\r\n                image_21x21: https://...\r\n                image_27x27: https://...\r\n                image_36x36: https://...\r\n                image_60x60: https://...\r\n              nullable: true\r\n              properties:\r\n                image_128x128:\r\n                  description: User profile image of size 128x128\r\n                  format: uri\r\n                  type: string\r\n                image_21x21:\r\n                  description: User profile image of size 21x21\r\n                  format: uri\r\n                  type: string\r\n                image_27x27:\r\n                  description: User profile image of size 27x27\r\n                  format: uri\r\n                  type: string\r\n                image_36x36:\r\n                  description: User profile image of size 36x36\r\n                  format: uri\r\n                  type: string\r\n                image_60x60:\r\n                  description: User profile image of size 60x60\r\n                  format: uri\r\n                  type: string\r\n              readOnly: true\r\n              type: object\r\n            workspaces:\r\n              description: |-\r\n                Workspaces and organizations this user may access.\r\n                Note\\: The API will only return workspaces and organizations that also contain the authenticated user.\r\n              items:\r\n                $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              readOnly: true\r\n              type: array\r\n          type: object\r\n    UserTaskListBase:\r\n      $ref: \"#/components/schemas/UserTaskListCompact\"\r\n    UserTaskListCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A user task list represents the tasks assigned to a particular user. It provides API access to a user’s “My Tasks” view in Asana.\r\n          properties:\r\n            name:\r\n              description: The name of the user task list.\r\n              example: My Tasks in My Workspace\r\n              type: string\r\n            owner:\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n              description: The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.\r\n              readOnly: true\r\n            workspace:\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n              description: The workspace in which the user task list is located.\r\n              readOnly: true\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: user_task_list\r\n    UserTaskListRequest:\r\n      $ref: \"#/components/schemas/UserTaskListBase\"\r\n    UserTaskListResponse:\r\n      $ref: \"#/components/schemas/UserTaskListBase\"\r\n    WebhookCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: Webhook objects represent the state of an active subscription for a server to be updated with information from Asana. This schema represents the subscription itself, not the objects that are sent to the server. For information on those please refer to the [Event](/docs/tocS_Event) schema.\r\n          properties:\r\n            active:\r\n              description: If true, the webhook will send events - if false it is considered inactive and will not generate events.\r\n              example: false\r\n              readOnly: true\r\n              type: boolean\r\n            resource:\r\n              $ref: \"#/components/schemas/AsanaNamedResource\"\r\n            target:\r\n              description: The URL to receive the HTTP POST.\r\n              example: https://example.com/receive-webhook/7654\r\n              format: uri\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: webhook\r\n    WebhookFilter:\r\n      description: A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)\r\n      properties:\r\n        action:\r\n          description: The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [Event](/docs/tocS_Event) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.\r\n          example: changed\r\n          type: string\r\n        fields:\r\n          description: \"*Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type 'changed'\"\r\n          example:\r\n            - due_at\r\n            - due_on\r\n            - dependencies\r\n          items:\r\n            type: string\r\n          type: array\r\n        resource_subtype:\r\n          description: The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.\r\n          example: milestone\r\n          type: string\r\n        resource_type:\r\n          description: The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.\r\n          example: task\r\n          type: string\r\n      type: object\r\n    WebhookRequest:\r\n      properties:\r\n        filters:\r\n          description: An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.\r\n          items:\r\n            $ref: \"#/components/schemas/WebhookFilter\"\r\n            description: A set of filters to specify a whitelist for what types of events will be delivered.\r\n          type: array\r\n        resource:\r\n          description: A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.\r\n          example: \"12345\"\r\n          type: string\r\n        target:\r\n          description: The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.\r\n          example: https://example.com/receive-webhook/7654?app_specific_param=app_specific_value\r\n          format: uri\r\n          type: string\r\n      required:\r\n        - resource\r\n        - target\r\n      type: object\r\n    WebhookResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/WebhookCompact\"\r\n        - properties:\r\n            created_at:\r\n              description: The time at which this resource was created.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            filters:\r\n              description: Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.\r\n              items:\r\n                $ref: \"#/components/schemas/WebhookFilter\"\r\n                description: A set of filters to specify a whitelist for what types of events will be delivered.\r\n              type: array\r\n            last_failure_at:\r\n              description: The timestamp when the webhook last received an error when sending an event to the target.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n            last_failure_content:\r\n              description: The contents of the last error response sent to the webhook when attempting to deliver events to the target.\r\n              example: 500 Server Error\\n\\nCould not complete the request\r\n              readOnly: true\r\n              type: string\r\n            last_success_at:\r\n              description: The timestamp when the webhook last successfully sent an event to the target.\r\n              example: 2012-02-22T02:06:58.147Z\r\n              format: date-time\r\n              readOnly: true\r\n              type: string\r\n          type: object\r\n    WorkspaceAddUserRequest:\r\n      description: A user identification object for specification with the addUser/removeUser endpoints.\r\n      properties:\r\n        user:\r\n          description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n          example: \"12345\"\r\n          type: string\r\n      type: object\r\n    WorkspaceBase:\r\n      $ref: \"#/components/schemas/WorkspaceCompact\"\r\n    WorkspaceCompact:\r\n      description: The workspace in which the user task list is located.\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.\r\n          properties:\r\n            name:\r\n              description: The name of the workspace.\r\n              example: My Company Workspace\r\n              type: string\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: workspace\r\n    WorkspaceMembershipBase:\r\n      $ref: \"#/components/schemas/WorkspaceMembershipCompact\"\r\n    WorkspaceMembershipCompact:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/AsanaResource\"\r\n        - description: This object determines if a user is a member of a workspace.\r\n          properties:\r\n            user:\r\n              description: A user object represents an account in Asana that can be given access to various workspaces, projects, and tasks.\r\n              $ref: \"#/components/schemas/UserCompact\"\r\n            workspace:\r\n              description: A workspace is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.\r\n              $ref: \"#/components/schemas/WorkspaceCompact\"\r\n          type: object\r\n          x-docs-overrides:\r\n            properties.resource_type.example: workspace_membership\r\n    WorkspaceMembershipRequest:\r\n      $ref: \"#/components/schemas/WorkspaceMembershipBase\"\r\n    WorkspaceMembershipResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/WorkspaceMembershipBase\"\r\n        - properties:\r\n            is_active:\r\n              description: Reflects if this user still a member of the workspace.\r\n              readOnly: true\r\n              type: boolean\r\n            is_admin:\r\n              description: Reflects if this user is an admin of the workspace.\r\n              readOnly: true\r\n              type: boolean\r\n            is_guest:\r\n              description: Reflects if this user is a guest of the workspace.\r\n              readOnly: true\r\n              type: boolean\r\n            user_task_list:\r\n              $ref: \"#/components/schemas/UserTaskListResponse\"\r\n              description: The user's \"My Tasks\" in the workspace.\r\n              readOnly: true\r\n          type: object\r\n    WorkspaceRemoveUserRequest:\r\n      description: A user identification object for specification with the addUser/removeUser endpoints.\r\n      properties:\r\n        user:\r\n          description: A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.\r\n          example: \"12345\"\r\n          type: string\r\n      type: object\r\n    WorkspaceRequest:\r\n      $ref: \"#/components/schemas/WorkspaceBase\"\r\n    WorkspaceResponse:\r\n      allOf:\r\n        - $ref: \"#/components/schemas/WorkspaceBase\"\r\n        - properties:\r\n            email_domains:\r\n              description: The email domains that are associated with this workspace.\r\n              example:\r\n                - asana.com\r\n              items:\r\n                format: uri\r\n                type: string\r\n              type: array\r\n            is_organization:\r\n              description: Whether the workspace is an *organization*.\r\n              example: false\r\n              type: boolean\r\n          type: object\r\n  securitySchemes:\r\n    oauth2:\r\n      description: |-\r\n        We require that applications designed to access the Asana API on behalf of multiple users implement OAuth 2.0.\r\n        Asana supports the Authorization Code Grant flow.\r\n      flows:\r\n        authorizationCode:\r\n          authorizationUrl: https://app.asana.com/-/oauth_authorize\r\n          refreshUrl: https://app.asana.com/-/oauth_token\r\n          scopes:\r\n            default: Provides access to all endpoints documented in our API reference. If no scopes are requested, this scope is assumed by default.\r\n            email: Provides access to the user’s email through the OpenID Connect user info endpoint.\r\n            openid: Provides access to OpenID Connect ID tokens and the OpenID Connect user info endpoint.\r\n            profile: Provides access to the user’s name and profile photo through the OpenID Connect user info endpoint.\r\n          tokenUrl: https://app.asana.com/-/oauth_token\r\n      type: oauth2\r\n    personalAccessToken:\r\n      description: A personal access token allows access to the api for the user who created it. This should be kept a secret and be treated like a password.\r\n      scheme: bearer\r\n      type: http",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/asana/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/asana/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/portfolios/{portfolio_gid}/custom_field_settings\": get: responses: 200: contents: application/json: generate schema: field data: item: allOf: schema type mismatch:  and object"
}