{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/decentralized-identity/sidetree"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "www/swagger/api.yml",
			"byteSize": 27581,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/sidetree/v1\ninfo:\n  description: This is an experimental Open API Specification for the Sidetree Protocol.\n  version: \"1.0.0\"\n  title: Sidetree REST API\ntags:\n  - name: Sidetree\n    description: APIs for interacting with the Sidetree Node.\n  - name: Anchor\n    description: APIs for interacting with the Anchor system.\n  - name: Content Addressed Storage\n    description: APIs for interacting with the CAS system.\npaths:\n  /operations:\n    post:\n      tags:\n        - Sidetree\n      summary: Writes an Operation to Sidetree.\n      operationId: writeSidetreeOperation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/SidetreeCreateOperation'\n                - $ref: '#/components/schemas/SidetreeUpdateOperation'\n                - $ref: '#/components/schemas/SidetreeRecoverOperation'\n                - $ref: '#/components/schemas/SidetreeDeactivateOperation'\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /identifiers/{did-with-or-without-initial-state}:\n    get:\n      tags:\n        - Sidetree\n      summary: Resolve a Sidetree DID.\n      operationId: resolveSidetreeDID\n      parameters:\n        - in: path\n          required: true\n          name: did-with-or-without-initial-state\n          schema:\n            type: string\n          description: A DID to resolve\n          example: \"did:sidetree:EiAC2jrPmjaLI4xMiHTGWaKK29HmU9USFWA22lYc6CV0Bg?-sidetree-initial-state=eyJ0eXBlIjoiY3JlYXRlIiwic3VmZml4RGF0YSI6ImV5SnZjR1Z5WVhScGIyNUVZWFJoU0dGemFDSTZJa1ZwUW13Mk9IUktSRFp3YmxadVdHWTFURUZqY1VGWWJsRkhOR2syY2xKSGVuUmZlazEzYXpkaFZWUTBlVUVpTENKeVpXTnZkbVZ5ZVV0bGVTSTZleUp3ZFdKc2FXTkxaWGxJWlhnaU9pSXdNalE0WkRWaFlUbGxZamxqWVdZNE5EWmhNalZoTkRReE1qbGlPR013TURBek9HUTFObVJsTlROaVptTTNZbUU1TkRneU1tRTFNV1ZpTUdabU1EazNNbU1pZlN3aWJtVjRkRkpsWTI5MlpYSjVUM1J3U0dGemFDSTZJa1ZwUTI5aU5YZFZkMEV5U0VObVRGUjZjbmRHZG14b2JVSm5TRnB0ZEVsZmRXVXhNa1JuWHpsVlkxOXdlR2NpZlEiLCJvcGVyYXRpb25EYXRhIjoiZXlKdVpYaDBWWEJrWVhSbFQzUndTR0Z6YUNJNklrVnBSSEZMVDJ0ZlRsZHVZMkZrT0RJelYySm9WVGwyZUVwcmQwVnVTVFZHUlVNeU0xbDViRE5rUlZnNWJtY2lMQ0prYjJOMWJXVnVkQ0k2ZXlKQVkyOXVkR1Y0ZENJNkltaDBkSEJ6T2k4dmR6TnBaQzV2Y21jdlpHbGtMM1l4SWl3aWNIVmliR2xqUzJWNUlqcGJleUpwWkNJNklpTnphV2R1YVc1blMyVjVJaXdpZEhsd1pTSTZJbE5sWTNBeU5UWnJNVlpsY21sbWFXTmhkR2x2Ymt0bGVUSXdNVGdpTENKMWMyRm5aU0k2SW5OcFoyNXBibWNpTENKd2RXSnNhV05MWlhsSVpYZ2lPaUl3TTJKa01HVTBOREF3TlRKaU9UUXlaVE13T0dJNVptUXdPR1JpTWpsaFltTTRaRFl6TmpZNE5ESXpNMkZsT0Raa09Ea3lZVEk1WmpCak5qRTJabVV3TldVaWZWMHNJbk5sY25acFkyVWlPbHQ3SW1sa0lqb2lTV1JsYm5ScGRIbElkV0lpTENKMGVYQmxJam9pU1dSbGJuUnBkSGxJZFdJaUxDSnpaWEoyYVdObFJXNWtjRzlwYm5RaU9uc2lRR052Ym5SbGVIUWlPaUp6WTJobGJXRXVhV1JsYm5ScGRIa3VabTkxYm1SaGRHbHZiaTlvZFdJaUxDSkFkSGx3WlNJNklsVnpaWEpUWlhKMmFXTmxSVzVrY0c5cGJuUWlMQ0pwYm5OMFlXNWpaWE1pT2xzaVpHbGtPbk5wWkdWMGNtVmxPblpoYkhWbE1DSmRmWDFkZlgwIn0\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '410':\n          description: DID is deactivated\n        '500':\n          description: Server Error\n  /version:\n    get:\n      tags:\n        - Sidetree\n      operationId: getVersion\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error        \n\n  /anchor/time:\n    get:\n      tags:\n        - Anchor\n      summary: Gets the latest logical anchor time. This API allows the Observer and Batch Writer to determine protocol version to be used.\n      operationId: getTime\n      description: A anchor time hash must not be predictable/pre-computable, a canonical implementation would be to use the block number as the time and the block hash as the time hash. It is intentional that the concepts related to anchor blocks are hidden from the layers above.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorTimeResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /anchor/time/{time-hash}:\n    get:\n      tags:\n        - Anchor\n      summary: Gets the latest logical anchor time. This API allows the Observer and Batch Writer to determine protocol version to be used.\n      operationId: getTimeByHash\n      description: A anchor time hash must not be predictable/pre-computable, a canonical implementation would be to use the block number as the time and the block hash as the time hash. It is intentional that the concepts related to anchor blocks are hidden from the layers above.\n      parameters:\n        - in: path\n          required: true\n          name: time-hash\n          schema:\n            type: string\n          description: The hash associated with the anchor time\n          example: \"0000000000000000001bfd6c48a6c3e81902cac688e12c2d87ca3aca50e03fb5\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorTimeResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /anchor/transactions:\n    get:\n      tags:\n        - Anchor\n      summary: Fetches Sidetree transactions in chronological order.\n      operationId: getTransactions\n      description: \"Note: The call may not return all Sidetree transactions in one batch, in which case the caller can use the transaction number of the last transaction in the returned batch to fetch subsequent transactions.\"\n      parameters:\n        - in: query\n          required: false\n          name: since\n          schema:\n            type: string\n          description: A transaction number. When not given, all Sidetree transactions since inception will be returned. When given, only Sidetree transactions after the specified transaction will be returned.\n          example: \"170\"\n        - in: query\n          required: false\n          name: transaction-time-hash\n          schema:\n            type: string\n          description: MUST BE given if since parameter is specified. This is the hash associated with the time the transaction specified by the since parameter is anchored on anchor. Multiple transactions can have the same transaction time and thus the same transaction time hash. The transaction time hash helps the anchor layer detect block reorganizations (temporary forks); HTTP 400 Bad Request with invalid_transaction_number_or_time_hash as the code parameter value in a JSON body is returned on such events.\n          example: \"00000000000000000000100158f474719e5a319933856f7f464fcc65a3cb2253\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorTransactions'\n        '400':\n          description: \u003e\n            Bad Request\n              * `invalid_transaction_number_or_time_hash`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n                example: {\n                  \"code\": \"invalid_transaction_number_or_time_hash\"\n                }\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n    post:\n      tags:\n        - Anchor\n      summary: Writes a Sidetree transaction to the underlying anchor.\n      operationId: writeAnchorTransaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnchorWriteRequest'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorTransaction'\n        '400':\n          description: \u003e\n            Bad Request\n              * `spending_cap_per_period_reached` - If with the given fee (derived from minimumFee) this node will exceed the spending limit as configured in the parameters.\n              * `not_enough_balace_for_write` - If the wallet configured in the parameters does not have enough balance to complete the write operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: \u003e\n            Server Error\n              * `normalized_fee_cannot_be_computed` - Error while computing the normalized fee.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /anchor/transactions/first-valid:\n    post:\n      tags:\n        - Anchor\n      summary: Get first valid Sidetree transaction\n      operationId: getFirstValidTransactions\n      description: Given a list of Sidetree transactions, returns the first transaction in the list that is valid. Returns 404 NOT FOUND if none of the given transactions are valid. This API is primarily used by the Sidetree core library to determine a transaction that can be used as a marker in time to reprocess transactions in the event of a block reorganization (temporary fork).\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AnchorTransaction'\n              example: [\n                {\n                  \"transaction_number\": 19,\n                  \"transaction_time\": 545236,\n                  \"transaction_time_hash\": \"0000000000000000002352597f8ec45c56ad19994808e982f5868c5ff6cfef2e\",\n                  \"anchor_string\": \"Qm28BKV9iiM1ZNzMsi3HbDRHDPK5U2DEhKpCYhKk83UPEg\",\n                  \"transaction_fee_paid\": 5000,\n                  \"normalized_transaction_fee\": 100,\n                  \"writer\": \"0af7eccefa3aaa37421914923b4a2034ed5a0ad0\"\n                },\n                {\n                  \"transaction_number\": 18,\n                  \"transaction_time\": 545236,\n                  \"transaction_time_hash\": \"0000000000000000000054f9719ef6ca646e2503a9c5caac1c6ea95ffb4af587\",\n                  \"anchor_string\": \"Qmb2wxUwvEpspKXU4QNxwYQLGS2gfsAuAE9LPcn5LprS1nb\",\n                  \"transaction_fee_paid\": 30,\n                  \"normalized_transaction_fee\": 10,\n                  \"writer\": \"0af7eccefa3aaa37421782523b4a2034ed5a0ad0\"\n                },\n                {\n                  \"transaction_number\": 16,\n                  \"transaction_time\": 545200,\n                  \"transaction_time_hash\": \"0000000000000000000f32c84291a3305ad9e5e162d8cc363420831ecd0e2800\",\n                  \"anchor_string\": \"QmbBPdjWSdJoQGHbZDvPqHxWqqeKUdzBwMTMjJGeWyUkEzK\",\n                  \"transaction_fee_paid\": 50000,\n                  \"normalized_transaction_fee\": 150,\n                  \"writer\": \"0af7eccefa3aaa87421782523b4a2034ed5a0ad0\"\n                }\n              ]\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorTransaction'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /anchor/fee:\n    get:\n      tags:\n        - Anchor\n      summary: Fetches the normalized transaction fee used for proof-of-fee calculation, given the anchor time.\n      operationId: getFee\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorFeeResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /anchor/locks/{lock-identifier}:\n    get:\n      tags:\n        - Anchor\n      summary: Fetches the lock object used for value-time-lock calculation, given the lock identifier.\n      operationId: getLock\n      parameters:\n        - in: path\n          required: true\n          name: lock-identifier\n          schema:\n            type: string\n          example: \"gHasdfasodf23230o0jlk23323\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorLock'\n        '400':\n          description: \u003e\n            Bad Request\n              * `anchor_time_out_of_range` - Anchor time given is out of computable range.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n        '404':\n          description: \u003e\n            Not Found\n              * `value_time_lock_not_found` - Lock not found.\n              * `value_time_lock_in_pending_state` - If there is a lock but is not confirmed on the anchor yet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            Server Error\n              * `normalized_fee_cannot_be_computed` - Error while computing the normalized fee.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /anchor/writer-lock:\n    get:\n      tags:\n        - Anchor\n      operationId: getWriterLock\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnchorLock'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: \u003e\n            Not Found\n              * `value_time_lock_not_found` - Lock not found.\n              * `value_time_lock_in_pending_state` - If there is a lock but is not confirmed on the anchor yet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Server Error\n  /anchor/version:\n    get:\n      tags:\n        - Anchor\n      operationId: getAnchorVersion\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n\n  /cas/version:\n      get:\n        tags:\n          - Content Addressed Storage\n        operationId: getCASVersion\n        responses:\n          '200':\n            description: Success\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/Version'\n          '400':\n            description: Bad Request\n          '401':\n            description: Unauthorized\n          '404':\n            description: Not Found\n          '500':\n            description: Server Error\n  /cas/{hash}:\n    get:\n      tags:\n        - Content Addressed Storage\n      operationId: readContent\n      parameters:\n        - in: path\n          required: true\n          name: hash\n          schema:\n            type: string\n          example: \"QmWd5PH6vyRH5kMdzZRPBnf952dbR4av3Bd7B2wBqMaAcf\"\n        - in: query\n          required: true\n          name: max-size\n          schema:\n            type: string\n          description: If the content exceeds the specified maximum allowed size, HTTP 400 Bad Request with content_exceeds_maximum_allowed_size as the value for the code parameter in a JSON body is returned.\n          example: \"170\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n          \n        '400':\n          description: \u003e\n            Bad Request\n              * `content_exceeds_maximum_allowed_size` - Content exceeds maximum allowed size\n              * `content_not_a_file` - Content not a file\n              * `content_hash_invalid` - Content hash is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n  /cas:\n    post:\n      tags:\n        - Content Addressed Storage\n      operationId: writeContent\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CASWriteResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '500':\n          description: Server Error\n          \ncomponents:\n  schemas:\n    Version:\n      type: object\n      properties:\n        name: \n          type: string\n          description: A string representing the name of the service.\n        version: \n          type: string\n          description: A string representing the version of currently running service.\n      example: {\n        \"name\": \"bitcoin\",\n        \"version\": \"1.0.0\"\n      }\n    SidetreeCreateOperation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [create]\n          example: \"create\"\n        suffix_data:\n          type: string\n          description: The Base64URL encoded Suffix Data Object.\n        delta:\n          type: string\n          description: The Base64URL encoded Create Operation Data Object.\n      description: Create operation.\n    SidetreeUpdateOperation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [update]\n          example: \"update\"\n        did_suffix:\n          type: string\n          description: The unique identifier string within a DID URI.\n        update_reveal_value:\n          type: string\n          description: The last update commitment value.\n        delta:\n          type: string\n          description: The Base64URL encoded Update Operation Data Object.\n        signed_data:\n          type: string\n          description: The JWS object as defined in Map File for Update operations.\n      description: Update operation.\n    SidetreeRecoverOperation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [recover]\n          description: Recover operation.\n          example: \"recover\"\n        did_suffix:\n          type: string\n          description: The unique identifier string within a DID URI.\n        recovery_reveal_value:\n          type: string\n          description: The last recovery commitment value.\n        delta:\n          type: string\n          description: The Base64URL encoded Recover Operation Data Object.\n        signed_data:\n          type: string\n          description: The JWS object as defined in Anchor File for Recovery operations.\n      description: Recover operation.\n    SidetreeDeactivateOperation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [deactivate]\n          example: \"deactivate\"\n        did_suffix:\n          type: string\n          description: The unique identifier string within a DID URI.\n        recovery_reveal_value:\n          type: string\n          description: The last recovery commitment value.\n        signed_data:\n          type: string\n          description: The JWS object as defined in Anchor File for Deactivate operations.\n      description: Deactivate operation.\n    AnchorTransaction:\n      type: object\n      properties:\n        transaction_number:\n          type: number\n          description: A monotonically increasing number (need NOT be by 1) that identifies a Sidtree transaction.\n        transaction_time:\n          type: number\n          description: The logical anchor time this transaction is anchored. Used for protocol version selection.\n        transaction_time_hash:\n          type: string\n          description: The hash associated with the transaction time.\n        anchor_string:\n          type: string\n          description: The string written to the anchor for this transaction.\n        transaction_fee_paid:\n          type: string\n          description: A number representing the fee paid for this transaction.\n        normalized_transaction_fee:\n          type: string\n          description: A number representing the normalized transaction fee used for proof-of-fee calculation.\n        writer:\n          type: string\n          description: A string representing the writer of the transaction. Used in the value time lock calculations.\n      example: {\n        \"transaction_number\": 89,\n        \"transaction_time\": 545236,\n        \"transaction_time_hash\": \"0000000000000000002352597f8ec45c56ad19994808e982f5868c5ff6cfef2e\",\n        \"anchor_string\": \"QmWd5PH6vyRH5kMdzZRPBnf952dbR4av3Bd7B2wBqMaAcf\",\n        \"transaction_fee_paid\": 40000,\n        \"normalized_transaction_fee\": 100,\n        \"writer\": \"0af7eccefa3aaa37421914923b4a2034ed5a0ad0\"\n      }\n    CASWriteResponse:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: Hash of data written to CAS\n          example: \"QmWd5PH6vyRH5kMdzZRPBnf952dbR4av3Bd7B2wBqMaAcf\"\n    AnchorTimeResponse:\n      type: object\n      properties:\n        time:\n          type: string\n          description: The logical anchor time.\n          example: \"545236\"\n        hash:\n          type: string\n          description: The hash associated with the anchor time.\n          example: \"0000000000000000002443210198839565f8d40a6b897beac8669cf7ba629051\"\n        previous_hash:\n          type: string\n          description: The hash associated with the previous anchor time.\n          example: \"0000000000000000002443210198839565f8d40a6b897beac8669cf7ba629051\"\n    AnchorTransactions:\n      type: object\n      properties:\n        more_transactions:\n          type: boolean\n          description: True if there are more transactions beyond the returned batch. False otherwise.\n          example: false\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AnchorTransaction'\n          description: The transactions array must always end with a complete block of data, but can start in the middle of a block if since query parameter is provided.\n      example: {\n        \"more_transactions\": false,\n        \"transactions\": [\n          {\n            \"transaction_number\": 89,\n            \"transaction_time\": 545236,\n            \"transaction_time_hash\": \"0000000000000000002352597f8ec45c56ad19994808e982f5868c5ff6cfef2e\",\n            \"anchor_string\": \"QmWd5PH6vyRH5kMdzZRPBnf952dbR4av3Bd7B2wBqMaAcf\",\n            \"transaction_fee_paid\": 40000,\n            \"normalized_transaction_fee\": 100,\n            \"writer\": \"0af7eccefa3aaa37421914923b4a2034ed5a0ad0\"\n          },\n          {\n            \"transaction_number\": 100,\n            \"transaction_time\": 545236,\n            \"transaction_time_hash\": \"00000000000000000000100158f474719e5a319933856f7f464fcc65a3cb2253\",\n            \"anchor_string\": \"QmbJGU4wNti6vNMGMosXaHbeMHGu9PkAUZtVBb2s2Vyq5d\",\n            \"transaction_fee_paid\": 600000,\n            \"normalized_transaction_fee\": 400,\n            \"writer\": \"0af7eccefa3aaa37421782523b4a2034ed5a0ad0\"\n          }\n        ]\n      }\n    AnchorWriteRequest:\n      type: object\n      description: if with the given fee (derived from minimumFee) this node will exceed the spending limit as configured in the parameters.\n      properties:\n        anchor_string:\n          type: string\n          description: The string to be written to the anchor for this transaction.\n        minimum_fee:\n          type: string\n          description: A number representing the minimum transaction fee to be paid to write this transaction to the anchor. The actual fee is dynamically calculated and can be higher than this amount (but not lower).\n      example: {\n        \"minimum_fee\": 200000,\n        \"anchor_string\": \"QmbJGU4wNti6vNMGMosXaHbeMHGu9PkAUZtVBb2s2Vyq5d\"\n      }\n    AnchorFeeResponse:\n      type: object\n      properties:\n        normalized_transaction_fee:\n          type: string\n          description: A number representing the normalized transaction fee used for proof-of-fee calculation.\n      example: {\n        \"normalized_transaction_fee\": 200000\n      }\n    AnchorLock:\n      type: object\n      properties:\n        amount_locked:\n          type: number\n          description: A number representing the amount that was locked.\n        identifier:\n          type: number\n          description: The string representing the identifier of the lock. This is the same value which is passed in the request path.\n        lock_transaction_time:\n          type: number\n          description: A number representing the transaction time at which the lock became active.\n        owner:\n          type: string\n          description: A string reprsenting the owner of the lock.\n        unlock_transaction_time:\n          type: string\n          description: A number representing the transaction time at which the lock became inactive.\n      example: {\n        \"amount_locked\": 1235696,\n        \"identifier\": \"gHasdfasodf23230o0jlk23323\",\n        \"lock_transaction_time\": 167520,\n        \"owner\": \"Hhdofkeio209aanoiyyoiknadfsedsed652\",\n        \"unlock_transaction_time\": 167530\n      }\n    ErrorResponse:\n      type: object\n      properties:\n        code:\n          type: string\n          enum: \n          - content_exceeds_maximum_allowed_size\n          - content_not_a_file\n          - content_hash_invalid\n          - value_time_lock_not_found\n          - value_time_lock_in_pending_state\n          - normalized_fee_cannot_be_computed\n          - anchor_time_out_of_range\n          - spending_cap_per_period_reached\n          - not_enough_balace_for_write\n          - invalid_transaction_number_or_time_hash\n         "
		}
	},
	"Error": "buildIR: make ir: path \"/cas/{hash}\": get: responses: 200: contents: application/octet-stream: octet stream with \"\" schema not supported"
}