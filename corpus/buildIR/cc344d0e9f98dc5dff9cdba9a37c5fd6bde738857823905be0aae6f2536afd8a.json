{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mrin9/RapiPdf"
		},
		"file": {
			"name": "petstore_complex_request.yaml",
			"size": 0,
			"path": "docs/specs/test-specs/petstore_complex_request.yaml",
			"byteSize": 8805,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a sample server Petstore containing a complex request body\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    name: API Support\n    email: apiteam@swagger.io\n    url: https://github.com/Redocly/redoc\ntags:\n  - name: pet\n    description: Everything about your Pets\npaths:\n  /pet:\n    parameters:\n      - name: cookieParam\n        in: cookie\n        description: Some cookie\n        required: true\n        schema:\n          type: integer\n          format: int64\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add new pet to the store inventory.\n      operationId: addPet\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\ncomponents:\n  schemas:\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Cat:\n      description: A representation of a cat\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            huntingSkill:\n              type: string\n              description: The measured skill for hunting\n              default: lazy\n              enum:\n                - clueless\n                - lazy\n                - adventurous\n                - aggressive\n          required:\n            - huntingSkill\n    Category:\n      type: object\n      properties:\n        id:\n          description: Category ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Category name\n          type: string\n          minLength: 1\n        sub:\n          description: Test Sub Category\n          type: object\n          properties:\n            prop1:\n              type: string\n              description: Dumb Property\n      xml:\n        name: Category\n    Dog:\n      description: A representation of a dog\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            packSize:\n              type: integer\n              format: int32\n              description: The size of the pack the dog is from\n              default: 1\n              minimum: 1\n          required:\n            - packSize\n    HoneyBee:\n      description: A representation of a honey bee\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            honeyPerDay:\n              type: number\n              description: Average amount of honey produced per day in ounces\n              example: 3.14\n          required:\n            - honeyPerDay\n    Id:\n      type: integer\n      format: int64\n      readOnly: true\n    Order:\n      type: object\n      properties:\n        id:\n          description: Order ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        petId:\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        quantity:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 1\n        shipDate:\n          description: Estimated ship date\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          description: Indicates whenever order was completed or not\n          type: boolean\n          default: false\n          readOnly: true\n        rqeuestId:\n          description: Unique Request Id\n          type: string\n          writeOnly: true\n      xml:\n        name: Order\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      discriminator:\n        propertyName: petType\n        mapping:\n          cat: '#/components/schemas/Cat'\n          dog: '#/components/schemas/Dog'\n          bee: '#/components/schemas/HoneyBee'\n      properties:\n        id:\n          externalDocs:\n            description: \"Find more info here\"\n            url: \"https://example.com\"\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        category:\n          description: Categories this pet belongs to\n          allOf:\n            - $ref: '#/components/schemas/Category'\n        name:\n          description: The name given to a pet\n          type: string\n          example: Guru\n        photoUrls:\n          description: The list of URL to a cute photos featuring pet\n          type: array\n          maxItems: 20\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n            format: url\n        friend:\n          allOf:\n            - $ref: '#/components/schemas/Pet'\n        tags:\n          description: Tags attached to the pet\n          type: array\n          minItems: 1\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: Pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n        petType:\n          description: Type of a pet\n          type: string\n      xml:\n        name: Pet\n    Tag:\n      type: object\n      properties:\n        id:\n          description: Tag ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Tag name\n          type: string\n          minLength: 1\n      xml:\n        name: Tag\n    User:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        pet:\n          oneOf:\n            - $ref: '#/components/schemas/Pet'\n            - $ref: '#/components/schemas/Tag'\n        username:\n          description: User supplied username\n          type: string\n          minLength: 4\n          example: John78\n        firstName:\n          description: User first name\n          type: string\n          minLength: 1\n          example: John\n        lastName:\n          description: User last name\n          type: string\n          minLength: 1\n          example: Smith\n        email:\n          description: User email address\n          type: string\n          format: email\n          example: john.smith@example.com\n        password:\n          type: string\n          description: \u003e-\n            User password, MUST contain a mix of upper and lower case letters,\n            as well as digits\n          format: password\n          minLength: 8\n          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'\n          example: drowssaP123\n        phone:\n          description: User phone number in international format\n          type: string\n          pattern: '/^\\+(?:[0-9]-?){6,14}[0-9]$/'\n          example: +1-202-555-0192\n          nullable: true\n        userStatus:\n          description: User status\n          type: integer\n          format: int32\n      xml:\n        name: User\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - description: My Pet\n                title: Pettie\n              - $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            type: 'object'\n            properties:\n              name:\n                type: string\n                description: hooray\n      description: Pet object that needs to be added to the store\n      required: true\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n  securitySchemes:\n    petstore_auth:\n      description: |\n        Get access to data while protecting your account credentials.\n        OAuth2 is also a safer and more secure way to give you access.\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      description: \u003e\n        For this sample, you can use the api key `special-key` to test the\n        authorization filters.\n      type: apiKey\n      name: api_key\n      in: header\n  examples:\n    Order:\n      value:\n        quantity: 1,\n        shipDate: 2018-10-19T16:46:45Z,\n        status: placed,\n        complete: false"
		}
	},
	"Error": "buildIR: make ir: path \"/pet\": post: requestBody: contents: application/json: generate schema: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"cookie params"
	]
}