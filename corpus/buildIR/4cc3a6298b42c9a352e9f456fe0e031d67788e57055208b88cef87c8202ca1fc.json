{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oas-tools/oas-generator"
		},
		"file": {
			"name": "adafruitCom-2.0.0-swagger.yaml",
			"size": 0,
			"path": "specs/adafruitCom-2.0.0-swagger.yaml",
			"byteSize": 96805,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://io.adafruit.com/api/v2'\n  - url: 'http://io.adafruit.com/api/v2'\ninfo:\n  description: \u003e+\n    ### The Internet of Things for Everyone\n\n\n    The Adafruit IO HTTP API provides access to your Adafruit IO data from any\n    programming language or hardware environment that can speak HTTP. The\n    easiest way to get started is with [an Adafruit IO learn\n    guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple\n    Internet of Things capable device like the Feather\n    Huzzah](https://www.adafruit.com/product/2821).\n\n\n    This API documentation is hosted on GitHub Pages and is available at\n    [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api).\n    For questions or comments visit the [Adafruit IO\n    Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io\n    channel on the Adafruit Discord server](https://discord.gg/adafruit).\n\n\n    #### Authentication\n\n\n    Authentication for every API request happens through the `X-AIO-Key` header\n    or query parameter and your IO API key. A simple cURL request to get all\n    available feeds for a user with the username \"io_username\" and the key\n    \"io_key_12345\" could look like this:\n\n        $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds\n\n    Or like this:\n\n        $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345\n\n    Using the node.js [request](https://github.com/request/request) library, IO\n    HTTP requests are as easy as:\n\n\n    ```js\n\n    var request = require('request');\n\n\n    var options = {\n      url: 'https://io.adafruit.com/api/v2/io_username/feeds',\n      headers: {\n        'X-AIO-Key': 'io_key_12345',\n        'Content-Type': 'application/json'\n      }\n    };\n\n\n    function callback(error, response, body) {\n      if (!error \u0026\u0026 response.statusCode == 200) {\n        var feeds = JSON.parse(body);\n        console.log(feeds.length + \" FEEDS AVAILABLE\");\n\n        feeds.forEach(function (feed) {\n          console.log(feed.name, feed.key);\n        })\n      }\n    }\n\n\n    request(options, callback);\n\n    ```\n\n\n    Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would\n    look like this (replacing `---` with your own values in the appropriate\n    locations):\n\n\n    ```arduino\n\n    /// based on\n\n    ///\n    https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino\n\n\n    #include\n\n    #include\n\n    #include\n\n    #include\n\n\n    ESP8266WiFiMulti WiFiMulti;\n\n\n    const char* ssid = \"---\";\n\n    const char* password = \"---\";\n\n\n    const char* host = \"io.adafruit.com\";\n\n\n    const char* io_key = \"---\";\n\n    const char* path_with_username = \"/api/v2/---/dashboards\";\n\n\n    // Use web browser to view and copy\n\n    // SHA1 fingerprint of the certificate\n\n    const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB\n    A5 4C 57 18\";\n\n\n    void setup() {\n      Serial.begin(115200);\n\n      for(uint8_t t = 4; t \u003e 0; t--) {\n        Serial.printf(\"[SETUP] WAIT %d...\\n\", t);\n        Serial.flush();\n        delay(1000);\n      }\n\n      WiFi.mode(WIFI_STA);\n      WiFiMulti.addAP(ssid, password);\n\n      // wait for WiFi connection\n      while(WiFiMulti.run() != WL_CONNECTED) {\n        Serial.print('.');\n        delay(1000);\n      }\n\n      Serial.println(\"[WIFI] connected!\");\n\n      HTTPClient http;\n\n      // start request with URL and TLS cert fingerprint for verification\n      http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);\n\n      // IO API authentication\n      http.addHeader(\"X-AIO-Key\", io_key);\n\n      // start connection and send HTTP header\n      int httpCode = http.GET();\n\n      // httpCode will be negative on error\n      if(httpCode \u003e 0) {\n        // HTTP header has been send and Server response header has been handled\n        Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);\n\n        // HTTP 200 OK\n        if(httpCode == HTTP_CODE_OK) {\n          String payload = http.getString();\n          Serial.println(payload);\n        }\n\n        http.end();\n      }\n    }\n\n\n    void loop() {}\n\n    ```\n\n\n    #### Client Libraries\n\n\n    We have client libraries to help you get started with your project:\n    [Python](https://github.com/adafruit/io-client-python),\n    [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino\n    C++](https://github.com/adafruit/Adafruit_IO_Arduino),\n    [Javascript](https://github.com/adafruit/adafruit-io-node), and\n    [Go](https://github.com/adafruit/io-client-go) are available. They're all\n    open source, so if they don't already do what you want, you can fork and add\n    any feature you'd like.\n\n  title: Adafruit IO\n  version: 2.0.0\n  x-apisguru-categories:\n    - iot\n  x-logo:\n    url: 'https://io.adafruit.com/api/docs/adafruit-flower-left.png'\n  x-origin:\n    - format: swagger\n      url: 'https://raw.githubusercontent.com/adafruit/io-api/gh-pages/v2.json'\n      version: '2.0'\n  x-providerName: adafruit.com\nsecurity:\n  - HeaderKey: []\n  - HeaderSignature: []\n  - QueryKey: []\npaths:\n  /user:\n    get:\n      operationId: currentUser\n      responses:\n        '200':\n          description: A User record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get information about the current user\n      tags:\n        - Users\n      x-swagger-router-action: get\n      x-swagger-router-controller: Users\n  '/{username}/activities':\n    delete:\n      description: Delete all your activities.\n      operationId: destroyActivities\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: Deleted activities successfully\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All activities for current user\n      tags:\n        - Activities\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Activities\n    get:\n      description: The Activities endpoint returns information about the user's activities.\n      operationId: allActivities\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/StartTime'\n        - $ref: '#/components/parameters/EndTime'\n        - $ref: '#/components/parameters/Limit'\n      responses:\n        '200':\n          description: An array of activities\n          headers:\n            X-Pagination-Count:\n              description: The number of records returned.\n              schema:\n                type: integer\n            X-Pagination-End:\n              description: The created_at value for the newest record returned.\n              schema:\n                type: string\n            X-Pagination-Limit:\n              description: \u003e-\n                The limit this request is using, either your given value or the\n                default (1000).\n              schema:\n                type: integer\n            X-Pagination-Start:\n              description: The created_at value for the oldest record returned.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Activity'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Activity'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All activities for current user\n      tags:\n        - Activities\n      x-swagger-router-action: all\n      x-swagger-router-controller: Activities\n  '/{username}/activities/{type}':\n    get:\n      description: The Activities endpoint returns information about the user's activities.\n      operationId: getActivity\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/ActivityTypePath'\n        - $ref: '#/components/parameters/StartTime'\n        - $ref: '#/components/parameters/EndTime'\n        - $ref: '#/components/parameters/Limit'\n      responses:\n        '200':\n          description: An array of activities\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Activity'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Activity'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get activities by type for current user\n      tags:\n        - Activities\n      x-swagger-router-action: get\n      x-swagger-router-controller: Activities\n  '/{username}/dashboards':\n    get:\n      description: |\n        The Dashboards endpoint returns information about the user's dashboards.\n      operationId: allDashboards\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of dashboards\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Dashboard'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Dashboard'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All dashboards for current user\n      tags:\n        - Dashboards\n      x-swagger-router-action: all\n      x-swagger-router-controller: Dashboards\n    post:\n      description: ''\n      operationId: createDashboard\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: New Dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Dashboard\n      tags:\n        - Dashboards\n      x-swagger-router-action: create\n      x-swagger-router-controller: Dashboards\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n  '/{username}/dashboards/{dashboard_id}/blocks':\n    get:\n      description: |\n        The Blocks endpoint returns information about the user's blocks.\n      operationId: allBlocks\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n      responses:\n        '200':\n          description: An array of blocks\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Block'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Block'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All blocks for current user\n      tags:\n        - Blocks\n      x-swagger-router-action: all\n      x-swagger-router-controller: Blocks\n    post:\n      description: ''\n      operationId: createBlock\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n      responses:\n        '200':\n          description: New Block\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Block'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Block\n      tags:\n        - Blocks\n      x-swagger-router-action: create\n      x-swagger-router-controller: Blocks\n      requestBody:\n        $ref: '#/components/requestBodies/createBlockBlock'\n  '/{username}/dashboards/{dashboard_id}/blocks/{id}':\n    delete:\n      description: ''\n      operationId: destroyBlock\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Block successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Block\n      tags:\n        - Blocks\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Blocks\n    get:\n      description: ''\n      operationId: getBlock\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Block response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Block'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Block based on ID\n      tags:\n        - Blocks\n      x-swagger-router-action: get\n      x-swagger-router-controller: Blocks\n    patch:\n      description: ''\n      operationId: updateBlock\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Block\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Block'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Block\n      tags:\n        - Blocks\n      x-swagger-router-action: update\n      x-swagger-router-controller: Blocks\n      requestBody:\n        $ref: '#/components/requestBodies/createBlockBlock'\n    put:\n      description: ''\n      operationId: replaceBlock\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/DashboardIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated block\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Block'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Block\n      tags:\n        - Blocks\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Blocks\n      requestBody:\n        $ref: '#/components/requestBodies/createBlockBlock'\n  '/{username}/dashboards/{id}':\n    delete:\n      description: ''\n      operationId: destroyDashboard\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Dashboard successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Dashboard\n      tags:\n        - Dashboards\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Dashboards\n    get:\n      description: ''\n      operationId: getDashboard\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Dashboard response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Dashboard based on ID\n      tags:\n        - Dashboards\n      x-swagger-router-action: get\n      x-swagger-router-controller: Dashboards\n    patch:\n      description: ''\n      operationId: updateDashboard\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Dashboard\n      tags:\n        - Dashboards\n      x-swagger-router-action: update\n      x-swagger-router-controller: Dashboards\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n    put:\n      description: ''\n      operationId: replaceDashboard\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated dashboard\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Dashboard'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Dashboard\n      tags:\n        - Dashboards\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Dashboards\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n  '/{username}/feeds':\n    get:\n      description: \u003e-\n        The Feeds endpoint returns information about the user's feeds. The\n        response includes the latest value of each feed, and other metadata\n        about each feed.\n      operationId: allFeeds\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of feeds\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Feed'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Feed'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All feeds for current user\n      tags:\n        - Feeds\n      x-swagger-router-action: all\n      x-swagger-router-controller: Feeds\n    post:\n      description: ''\n      operationId: createFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupParam'\n      responses:\n        '200':\n          description: New feed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Feed\n      tags:\n        - Feeds\n      x-swagger-router-action: create\n      x-swagger-router-controller: Feeds\n      requestBody:\n        $ref: '#/components/requestBodies/createFeedFeed'\n  '/{username}/feeds/{feed_key}':\n    delete:\n      description: ''\n      operationId: destroyFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: Deleted feed successfully\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Feed\n      tags:\n        - Feeds\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Feeds\n    get:\n      description: Returns feed based on the feed key\n      operationId: getFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: Feed response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get feed by feed key\n      tags:\n        - Feeds\n      x-swagger-router-action: get\n      x-swagger-router-controller: Feeds\n    patch:\n      description: ''\n      operationId: updateFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: Updated feed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Feed\n      tags:\n        - Feeds\n      x-swagger-router-action: update\n      x-swagger-router-controller: Feeds\n      requestBody:\n        $ref: '#/components/requestBodies/createFeedFeed'\n    put:\n      description: ''\n      operationId: replaceFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: Updated feed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Feed\n      tags:\n        - Feeds\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Feeds\n      requestBody:\n        $ref: '#/components/requestBodies/createFeedFeed'\n  '/{username}/feeds/{feed_key}/data':\n    get:\n      description: ''\n      operationId: allData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/StartTime'\n        - $ref: '#/components/parameters/EndTime'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: An array of data\n          headers:\n            X-Pagination-Count:\n              description: The number of records returned.\n              schema:\n                type: integer\n            X-Pagination-End:\n              description: The created_at value for the newest record returned.\n              schema:\n                type: string\n            X-Pagination-Limit:\n              description: \u003e-\n                The limit this request is using, either your given value or the\n                default (1000).\n              schema:\n                type: integer\n            X-Pagination-Start:\n              description: The created_at value for the oldest record returned.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get all data for the given feed\n      tags:\n        - Data\n      x-swagger-router-action: all\n      x-swagger-router-controller: Data\n    post:\n      operationId: createData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: New data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Data'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Data'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create new Data\n      tags:\n        - Data\n      x-code-samples:\n        - lang: curl\n          source: |-\n            curl -F 'value=65.5' -H 'X-AIO-Key: io_key_12345' \\\n              http://io.adafruit.vm/api/v2/io_username/feeds/io-feed-key/data\n      x-swagger-router-action: create\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/createDataDatum'\n  '/{username}/feeds/{feed_key}/data/batch':\n    post:\n      operationId: batchCreateData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: New data\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create multiple new Data records\n      tags:\n        - Data\n      x-swagger-router-action: batch\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/batchCreateDataData'\n  '/{username}/feeds/{feed_key}/data/chart':\n    get:\n      description: \u003e-\n        The Chart API is what we use on io.adafruit.com to populate charts over\n        varying timespans with a consistent number of data points. The maximum\n        number of points returned is 480. This API works by aggregating slices\n        of time into a single value by averaging.\n\n\n        All time-based parameters are optional, if none are given it will\n        default to 1 hour at the finest-grained resolution possible.\n      operationId: chartData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/StartTime'\n        - $ref: '#/components/parameters/EndTime'\n        - description: \u003e-\n            A resolution size in minutes. By giving a resolution value you will\n            get back grouped data points aggregated over resolution-sized\n            intervals. NOTE: time span is preferred over resolution, so if you\n            request a span of time that includes more than max limit points you\n            may get a larger resolution than you requested. Valid resolutions\n            are 1, 5, 10, 30, 60, and 120.\n          in: query\n          name: resolution\n          schema:\n            type: integer\n            format: int32\n        - description: The number of hours the chart should cover.\n          in: query\n          name: hours\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: \u003e-\n            A JSON record containing chart data and the parameters used to\n            generate it.\n          content:\n            application/json:\n              schema:\n                properties:\n                  columns:\n                    description: The names of the columns returned as data.\n                    items:\n                      type: string\n                    type: array\n                  data:\n                    description: The actual chart data.\n                    items:\n                      items:\n                        type: string\n                      type: array\n                    type: array\n                  feed:\n                    properties:\n                      id:\n                        type: integer\n                      key:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  parameters:\n                    properties: {}\n                    type: object\n                type: object\n            text/csv:\n              schema:\n                properties:\n                  columns:\n                    description: The names of the columns returned as data.\n                    items:\n                      type: string\n                    type: array\n                  data:\n                    description: The actual chart data.\n                    items:\n                      items:\n                        type: string\n                      type: array\n                    type: array\n                  feed:\n                    properties:\n                      id:\n                        type: integer\n                      key:\n                        type: string\n                      name:\n                        type: string\n                    type: object\n                  parameters:\n                    properties: {}\n                    type: object\n                type: object\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Chart data for current feed\n      tags:\n        - Data\n      x-swagger-router-action: chart\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/first':\n    get:\n      description: \u003e-\n        Get the oldest data point in the feed. This request sets the queue\n        pointer to the beginning of the feed.\n      operationId: firstData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: Data response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: First Data in Queue\n      tags:\n        - Data\n      x-swagger-router-action: last\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/last':\n    get:\n      description: \u003e-\n        Get the most recent data point in the feed. This request sets the queue\n        pointer to the end of the feed.\n      operationId: lastData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: Data response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Last Data in Queue\n      tags:\n        - Data\n      x-swagger-router-action: last\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/next':\n    get:\n      description: \u003e-\n        Get the next newest data point in the feed. If queue processing hasn't\n        been started, the first data point in the feed will be returned.\n      operationId: nextData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: Data response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Next Data in Queue\n      tags:\n        - Data\n      x-swagger-router-action: next\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/previous':\n    get:\n      description: \u003e-\n        Get the previously processed data point in the feed. NOTE: this method\n        doesn't move the processing queue pointer.\n      operationId: previousData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: Data response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Previous Data in Queue\n      tags:\n        - Data\n      x-swagger-router-action: previous\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/retain':\n    get:\n      description: \u003e-\n        Get the most recent data point in the feed in an MQTT compatible CSV\n        format: `value,lat,lon,ele`\n      operationId: retainData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: \u003e-\n            CSV string in `value,lat,lon,ele` format. The lat, lon, and ele\n            values are left blank if they are not set.\n          content:\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Last Data in MQTT CSV format\n      tags:\n        - Data\n      x-swagger-router-action: retain\n      x-swagger-router-controller: Data\n  '/{username}/feeds/{feed_key}/data/{id}':\n    delete:\n      description: ''\n      operationId: destroyData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Group successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete existing Data\n      tags:\n        - Data\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Data\n    get:\n      description: ''\n      operationId: getData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/IDPath'\n        - $ref: '#/components/parameters/DataInclude'\n      responses:\n        '200':\n          description: Data response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Returns data based on feed key\n      tags:\n        - Data\n      x-swagger-router-action: get\n      x-swagger-router-controller: Data\n    patch:\n      description: ''\n      operationId: updateData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of existing Data\n      tags:\n        - Data\n      x-swagger-router-action: update\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/createDataDatum'\n    put:\n      description: ''\n      operationId: replaceData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace existing Data\n      tags:\n        - Data\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/createDataDatum'\n  '/{username}/feeds/{feed_key}/details':\n    get:\n      description: Returns more detailed feed record based on the feed key\n      operationId: getFeedDetails\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: Feed response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get detailed feed by feed key\n      tags:\n        - Feeds\n      x-swagger-router-action: details\n      x-swagger-router-controller: Feeds\n  '/{username}/groups':\n    get:\n      description: \u003e\n        The Groups endpoint returns information about the user's groups. The\n        response includes the latest value of each feed in the group, and other\n        metadata about the group.\n      operationId: allGroups\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of groups\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Group'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Group'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All groups for current user\n      tags:\n        - Groups\n      x-swagger-router-action: all\n      x-swagger-router-controller: Groups\n    post:\n      description: ''\n      operationId: createGroup\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: New Group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Group\n      tags:\n        - Groups\n      x-swagger-router-action: create\n      x-swagger-router-controller: Groups\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n  '/{username}/groups/{group_key}':\n    delete:\n      description: ''\n      operationId: destroyGroup\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: Deleted Group successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Group\n      tags:\n        - Groups\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Groups\n    get:\n      operationId: getGroup\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: Group response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Group based on ID\n      tags:\n        - Groups\n      x-swagger-router-action: get\n      x-swagger-router-controller: Groups\n    patch:\n      description: ''\n      operationId: updateGroup\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: Updated Group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Group\n      tags:\n        - Groups\n      x-swagger-router-action: update\n      x-swagger-router-controller: Groups\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n    put:\n      description: ''\n      operationId: replaceGroup\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: Updated group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Group\n      tags:\n        - Groups\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Groups\n      requestBody:\n        $ref: '#/components/requestBodies/createDashboardDashboard'\n  '/{username}/groups/{group_key}/add':\n    post:\n      description: ''\n      operationId: addFeedToGroup\n      parameters:\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedParam'\n      responses:\n        '200':\n          description: Updated group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Add an existing Feed to a Group\n      tags:\n        - Groups\n        - Feeds\n      x-swagger-router-action: add_feed\n      x-swagger-router-controller: Groups\n  '/{username}/groups/{group_key}/data':\n    post:\n      operationId: createGroupData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: New data\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create new data for multiple feeds in a group\n      tags:\n        - Data\n      x-swagger-router-action: group_create\n      x-swagger-router-controller: Data\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                created_at:\n                  description: \u003e-\n                    Optional created_at timestamp which will be applied to all\n                    feed values created.\n                  type: string\n                feeds:\n                  description: \u003e-\n                    An array of feed data records with `key` and `value`\n                    properties.\n                  items:\n                    properties:\n                      key:\n                        type: string\n                      value:\n                        type: string\n                    required:\n                      - key\n                      - value\n                    type: object\n                  type: array\n                location:\n                  description: \u003e-\n                    A location record with `lat`, `lon`, and [optional] `ele`\n                    properties.\n                  properties:\n                    ele:\n                      type: number\n                    lat:\n                      type: number\n                    lon:\n                      type: number\n                  required:\n                    - lat\n                    - lon\n                  type: object\n              required:\n                - feeds\n              type: object\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                created_at:\n                  description: \u003e-\n                    Optional created_at timestamp which will be applied to all\n                    feed values created.\n                  type: string\n                feeds:\n                  description: \u003e-\n                    An array of feed data records with `key` and `value`\n                    properties.\n                  items:\n                    properties:\n                      key:\n                        type: string\n                      value:\n                        type: string\n                    required:\n                      - key\n                      - value\n                    type: object\n                  type: array\n                location:\n                  description: \u003e-\n                    A location record with `lat`, `lon`, and [optional] `ele`\n                    properties.\n                  properties:\n                    ele:\n                      type: number\n                    lat:\n                      type: number\n                    lon:\n                      type: number\n                  required:\n                    - lat\n                    - lon\n                  type: object\n              required:\n                - feeds\n              type: object\n        required: true\n  '/{username}/groups/{group_key}/feeds':\n    get:\n      description: \u003e-\n        The Group Feeds endpoint returns information about the user's feeds. The\n        response includes the latest value of each feed, and other metadata\n        about each feed, but only for feeds within the given group.\n      operationId: allGroupFeeds\n      parameters:\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of feeds\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Feed'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Feed'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All feeds for current user in a given group\n      tags:\n        - Groups\n        - Feeds\n      x-swagger-router-action: group_all\n      x-swagger-router-controller: GroupFeeds\n    post:\n      description: ''\n      operationId: createGroupFeed\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n      responses:\n        '200':\n          description: New feed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feed'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Feed'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Feed in a Group\n      tags:\n        - Feeds\n      x-swagger-router-action: group_create\n      x-swagger-router-controller: GroupFeeds\n      requestBody:\n        $ref: '#/components/requestBodies/createFeedFeed'\n  '/{username}/groups/{group_key}/feeds/{feed_key}/data':\n    get:\n      description: ''\n      operationId: allGroupFeedData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/FeedPath'\n        - description: \u003e-\n            Start time for filtering data. Returns data created after given\n            time.\n          in: query\n          name: start_time\n          schema:\n            type: string\n            format: date-time\n        - description: End time for filtering data. Returns data created before give time.\n          in: query\n          name: end_time\n          schema:\n            type: string\n            format: date-time\n        - description: Limit the number of records returned.\n          in: query\n          name: limit\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: An array of data\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All data for current feed in a specific group\n      tags:\n        - Data\n      x-swagger-router-action: group_all\n      x-swagger-router-controller: Data\n    post:\n      operationId: createGroupFeedData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: New data\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create new Data in a feed belonging to a particular group\n      tags:\n        - Data\n      x-swagger-router-action: group_feed_create\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/createDataDatum'\n  '/{username}/groups/{group_key}/feeds/{feed_key}/data/batch':\n    post:\n      operationId: batchCreateGroupFeedData\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/FeedPath'\n      responses:\n        '200':\n          description: New data\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/DataResponse'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: \u003e-\n        Create multiple new Data records in a feed belonging to a particular\n        group\n      tags:\n        - Data\n      x-swagger-router-action: group_feed_batch\n      x-swagger-router-controller: Data\n      requestBody:\n        $ref: '#/components/requestBodies/batchCreateDataData'\n  '/{username}/groups/{group_key}/remove':\n    post:\n      description: ''\n      operationId: removeFeedFromGroup\n      parameters:\n        - $ref: '#/components/parameters/GroupPath'\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/FeedParam'\n      responses:\n        '200':\n          description: Updated group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Group'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Remove a Feed from a Group\n      tags:\n        - Groups\n        - Feeds\n      x-swagger-router-action: remove_feed\n      x-swagger-router-controller: Groups\n  '/{username}/throttle':\n    get:\n      operationId: getCurrentUserThrottle\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: Data rate limit and current actions.\n          content:\n            application/json:\n              schema:\n                properties:\n                  active_data_rate:\n                    description: Actions taken inside the time window.\n                    type: integer\n                  data_rate_limit:\n                    description: \u003e-\n                      Max possible actions inside the time window (usually 1\n                      minute).\n                    type: integer\n                type: object\n            text/csv:\n              schema:\n                properties:\n                  active_data_rate:\n                    description: Actions taken inside the time window.\n                    type: integer\n                  data_rate_limit:\n                    description: \u003e-\n                      Max possible actions inside the time window (usually 1\n                      minute).\n                    type: integer\n                type: object\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Get the user's data rate limit and current activity level.\n      tags:\n        - Users\n      x-swagger-router-action: throttle\n      x-swagger-router-controller: Users\n  '/{username}/tokens':\n    get:\n      description: |\n        The Tokens endpoint returns information about the user's tokens.\n      operationId: allTokens\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of tokens\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Token'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Token'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All tokens for current user\n      tags:\n        - Tokens\n      x-swagger-router-action: all\n      x-swagger-router-controller: Tokens\n    post:\n      description: ''\n      operationId: createToken\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: New Token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Token\n      tags:\n        - Tokens\n      x-swagger-router-action: create\n      x-swagger-router-controller: Tokens\n      requestBody:\n        $ref: '#/components/requestBodies/createTokenToken'\n  '/{username}/tokens/{id}':\n    delete:\n      description: ''\n      operationId: destroyToken\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Token successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Token\n      tags:\n        - Tokens\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Tokens\n    get:\n      description: ''\n      operationId: getToken\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Token response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Token based on ID\n      tags:\n        - Tokens\n      x-swagger-router-action: get\n      x-swagger-router-controller: Tokens\n    patch:\n      description: ''\n      operationId: updateToken\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Token\n      tags:\n        - Tokens\n      x-swagger-router-action: update\n      x-swagger-router-controller: Tokens\n      requestBody:\n        $ref: '#/components/requestBodies/createTokenToken'\n    put:\n      description: ''\n      operationId: replaceToken\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Token\n      tags:\n        - Tokens\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Tokens\n      requestBody:\n        $ref: '#/components/requestBodies/createTokenToken'\n  '/{username}/triggers':\n    get:\n      description: |\n        The Triggers endpoint returns information about the user's triggers.\n      operationId: allTriggers\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: An array of triggers\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Trigger'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Trigger'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All triggers for current user\n      tags:\n        - Triggers\n      x-swagger-router-action: all\n      x-swagger-router-controller: Triggers\n    post:\n      description: ''\n      operationId: createTrigger\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n      responses:\n        '200':\n          description: New Trigger\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Trigger\n      tags:\n        - Triggers\n      x-swagger-router-action: create\n      x-swagger-router-controller: Triggers\n      requestBody:\n        $ref: '#/components/requestBodies/createTriggerTrigger'\n  '/{username}/triggers/{id}':\n    delete:\n      description: ''\n      operationId: destroyTrigger\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Trigger successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Trigger\n      tags:\n        - Triggers\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Triggers\n    get:\n      description: ''\n      operationId: getTrigger\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Trigger response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Trigger based on ID\n      tags:\n        - Triggers\n      x-swagger-router-action: get\n      x-swagger-router-controller: Triggers\n    patch:\n      description: ''\n      operationId: updateTrigger\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Trigger\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Trigger\n      tags:\n        - Triggers\n      x-swagger-router-action: update\n      x-swagger-router-controller: Triggers\n      requestBody:\n        $ref: '#/components/requestBodies/createTriggerTrigger'\n    put:\n      description: ''\n      operationId: replaceTrigger\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated trigger\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Trigger'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Trigger\n      tags:\n        - Triggers\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Triggers\n      requestBody:\n        $ref: '#/components/requestBodies/createTriggerTrigger'\n  '/{username}/{type}/{type_id}/acl':\n    get:\n      description: \u003e\n        The Permissions endpoint returns information about the user's\n        permissions.\n      operationId: allPermissions\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n      responses:\n        '200':\n          description: An array of permissions\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Permission'\n                type: array\n            text/csv:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Permission'\n                type: array\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: All permissions for current user and type\n      tags:\n        - Permissions\n      x-swagger-router-action: all\n      x-swagger-router-controller: Permissions\n    post:\n      description: ''\n      operationId: createPermission\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n      responses:\n        '200':\n          description: New Permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Create a new Permission\n      tags:\n        - Permissions\n      x-swagger-router-action: create\n      x-swagger-router-controller: Permissions\n      requestBody:\n        $ref: '#/components/requestBodies/createPermissionPermission'\n  '/{username}/{type}/{type_id}/acl/{id}':\n    delete:\n      description: ''\n      operationId: destroyPermission\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Deleted Permission successfully\n          content:\n            application/json:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Delete an existing Permission\n      tags:\n        - Permissions\n      x-swagger-router-action: destroy\n      x-swagger-router-controller: Permissions\n    get:\n      description: ''\n      operationId: getPermission\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Permission response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\"\n      summary: Returns Permission based on ID\n      tags:\n        - Permissions\n      x-swagger-router-action: get\n      x-swagger-router-controller: Permissions\n    patch:\n      description: ''\n      operationId: updatePermission\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated Permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Update properties of an existing Permission\n      tags:\n        - Permissions\n      x-swagger-router-action: update\n      x-swagger-router-controller: Permissions\n      requestBody:\n        $ref: '#/components/requestBodies/createPermissionPermission'\n    put:\n      description: ''\n      operationId: replacePermission\n      parameters:\n        - $ref: '#/components/parameters/UsernamePath'\n        - $ref: '#/components/parameters/PermTypePath'\n        - $ref: '#/components/parameters/PermTypeIDPath'\n        - $ref: '#/components/parameters/IDPath'\n      responses:\n        '200':\n          description: Updated permission\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Permission'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/Permission'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '500':\n          description: Server Error\n      summary: Replace an existing Permission\n      tags:\n        - Permissions\n      x-swagger-router-action: replace\n      x-swagger-router-controller: Permissions\n      requestBody:\n        $ref: '#/components/requestBodies/createPermissionPermission'\ncomponents:\n  parameters:\n    ActivityTypePath:\n      in: path\n      name: type\n      required: true\n      schema:\n        type: string\n    DashboardIDPath:\n      in: path\n      name: dashboard_id\n      required: true\n      schema:\n        type: string\n    DataInclude:\n      description: \u003e-\n        List of Data record fields to include in response as comma separated\n        list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and\n        `created_at`.\n      in: query\n      name: include\n      schema:\n        type: string\n    EndTime:\n      description: 'End time for filtering, returns records created before give time.'\n      in: query\n      name: end_time\n      schema:\n        type: string\n        format: date-time\n    FeedParam:\n      in: query\n      name: feed_key\n      schema:\n        type: string\n    FeedPath:\n      description: a valid feed key\n      in: path\n      name: feed_key\n      required: true\n      schema:\n        type: string\n    GroupParam:\n      in: query\n      name: group_key\n      schema:\n        type: string\n    GroupPath:\n      in: path\n      name: group_key\n      required: true\n      schema:\n        type: string\n    IDPath:\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    Limit:\n      description: Limit the number of records returned.\n      in: query\n      name: limit\n      schema:\n        type: integer\n    PermTypeIDPath:\n      in: path\n      name: type_id\n      required: true\n      schema:\n        type: string\n    PermTypePath:\n      in: path\n      name: type\n      required: true\n      schema:\n        type: string\n    StartTime:\n      description: 'Start time for filtering, returns records created after given time.'\n      in: query\n      name: start_time\n      schema:\n        type: string\n        format: date-time\n    UsernamePath:\n      description: a valid username string\n      in: path\n      name: username\n      required: true\n      schema:\n        type: string\n  requestBodies:\n    createTriggerTrigger:\n      content:\n        application/json:\n          schema:\n            properties:\n              name:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              name:\n                type: string\n            type: object\n      required: true\n    batchCreateDataData:\n      content:\n        application/json:\n          schema:\n            items:\n              properties:\n                created_at:\n                  format: dateTime\n                  type: string\n                ele:\n                  type: string\n                epoch:\n                  type: number\n                lat:\n                  type: string\n                lon:\n                  type: string\n                value:\n                  type: string\n              type: object\n            type: array\n        application/x-www-form-urlencoded:\n          schema:\n            items:\n              properties:\n                created_at:\n                  format: dateTime\n                  type: string\n                ele:\n                  type: string\n                epoch:\n                  type: number\n                lat:\n                  type: string\n                lon:\n                  type: string\n                value:\n                  type: string\n              type: object\n            type: array\n      description: \u003e-\n        A collection of data records including `value` (required) and optionally\n        including: `lat`, `lon`, `ele` (latitude, longitude, and elevation\n        values), and `created_at` (a date/time string).\n      required: true\n    createPermissionPermission:\n      content:\n        application/json:\n          schema:\n            properties:\n              mode:\n                default: r\n                enum:\n                  - r\n                  - w\n                  - rw\n                type: string\n              scope:\n                default: public\n                enum:\n                  - secret\n                  - public\n                  - user\n                  - organization\n                type: string\n              scope_value:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              mode:\n                default: r\n                enum:\n                  - r\n                  - w\n                  - rw\n                type: string\n              scope:\n                default: public\n                enum:\n                  - secret\n                  - public\n                  - user\n                  - organization\n                type: string\n              scope_value:\n                type: string\n            type: object\n      required: true\n    createFeedFeed:\n      content:\n        application/json:\n          schema:\n            properties:\n              description:\n                type: string\n              key:\n                type: string\n              license:\n                type: string\n              name:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              description:\n                type: string\n              key:\n                type: string\n              license:\n                type: string\n              name:\n                type: string\n            type: object\n      required: true\n    createDashboardDashboard:\n      content:\n        application/json:\n          schema:\n            properties:\n              description:\n                type: string\n              key:\n                type: string\n              name:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              description:\n                type: string\n              key:\n                type: string\n              name:\n                type: string\n            type: object\n      required: true\n    createBlockBlock:\n      content:\n        application/json:\n          schema:\n            properties:\n              block_feeds:\n                items:\n                  properties:\n                    feed_id:\n                      type: string\n                    group_id:\n                      type: string\n                  type: object\n                type: array\n              column:\n                type: number\n              dashboard_id:\n                type: number\n              description:\n                type: string\n              key:\n                type: string\n              name:\n                type: string\n              properties:\n                type: object\n              row:\n                type: number\n              size_x:\n                type: number\n              size_y:\n                type: number\n              visual_type:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              block_feeds:\n                items:\n                  properties:\n                    feed_id:\n                      type: string\n                    group_id:\n                      type: string\n                  type: object\n                type: array\n              column:\n                type: number\n              dashboard_id:\n                type: number\n              description:\n                type: string\n              key:\n                type: string\n              name:\n                type: string\n              properties:\n                type: object\n              row:\n                type: number\n              size_x:\n                type: number\n              size_y:\n                type: number\n              visual_type:\n                type: string\n            type: object\n      required: true\n    createDataDatum:\n      content:\n        application/json:\n          schema:\n            properties:\n              created_at:\n                format: dateTime\n                type: string\n              ele:\n                type: string\n              epoch:\n                type: number\n              lat:\n                type: string\n              lon:\n                type: string\n              value:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              created_at:\n                format: dateTime\n                type: string\n              ele:\n                type: string\n              epoch:\n                type: number\n              lat:\n                type: string\n              lon:\n                type: string\n              value:\n                type: string\n            type: object\n      description: \u003e-\n        Data record including a `value` field (required) and optionally\n        including: `lat`, `lon`, `ele` (latitude, longitude, and elevation\n        values), and `created_at` (a date/time string).\n      required: true\n    createTokenToken:\n      content:\n        application/json:\n          schema:\n            properties:\n              token:\n                type: string\n            type: object\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              token:\n                type: string\n            type: object\n      required: true\n  securitySchemes:\n    HeaderKey:\n      description: \u003e-\n        The AIO Key is used to restrict or grant access to your data. The key is\n        unique, and you can generate a key per feed, and control it in many\n        different ways. The easiest process is to just use your automatically\n        generated master key. You can access this key right from the right-hand\n        side of your dashboard or from an individual feed page.\n      in: header\n      name: X-AIO-Key\n      type: apiKey\n    HeaderSignature:\n      description: The AIO Signature is an AWS inspired request signature.\n      in: header\n      name: X-AIO-Signature\n      type: apiKey\n    QueryKey:\n      description: \u003e-\n        The AIO Key is used to restrict or grant access to your data. The key is\n        unique, and you can generate a key per feed, and control it in many\n        different ways. The easiest process is to just use your automatically\n        generated master key. You can access this key right from the right-hand\n        side of your dashboard or from an individual feed page.\n      in: query\n      name: X-AIO-Key\n      type: apiKey\n  schemas:\n    Activity:\n      properties:\n        action:\n          readOnly: true\n          type: string\n        created_at:\n          format: dateTime\n          readOnly: true\n          type: string\n        data:\n          readOnly: true\n          type: object\n        id:\n          readOnly: true\n          type: number\n        model:\n          readOnly: true\n          type: string\n        updated_at:\n          format: dateTime\n          readOnly: true\n          type: string\n        user_id:\n          readOnly: true\n          type: number\n      type: object\n    Block:\n      properties:\n        block_feeds:\n          items:\n            $ref: '#/components/schemas/BlockFeed'\n          readOnly: true\n          type: array\n        column:\n          type: number\n        description:\n          type: string\n        key:\n          type: string\n        name:\n          type: string\n        row:\n          type: number\n        size_x:\n          type: number\n        size_y:\n          type: number\n        visual_type:\n          type: string\n      type: object\n    BlockFeed:\n      properties:\n        feed:\n          $ref: '#/components/schemas/Feed'\n        group:\n          $ref: '#/components/schemas/Group'\n        id:\n          type: string\n      type: object\n    Dashboard:\n      properties:\n        blocks:\n          items:\n            $ref: '#/components/schemas/Block'\n          readOnly: true\n          type: array\n        description:\n          type: string\n        key:\n          type: string\n        name:\n          type: string\n      type: object\n    Data:\n      properties:\n        completed_at:\n          readOnly: true\n          type: string\n        created_at:\n          readOnly: true\n          type: string\n        created_epoch:\n          readOnly: true\n          type: number\n        ele:\n          type: number\n        expiration:\n          type: string\n        feed_id:\n          type: number\n        group_id:\n          readOnly: true\n          type: number\n        id:\n          readOnly: true\n          type: string\n        lat:\n          type: number\n        lon:\n          type: number\n        updated_at:\n          readOnly: true\n          type: string\n        value:\n          type: string\n      type: object\n    DataResponse:\n      properties:\n        completed_at:\n          type: string\n        created_at:\n          type: string\n        created_epoch:\n          type: number\n        ele:\n          type: number\n        expiration:\n          type: string\n        feed_id:\n          type: number\n        group_id:\n          type: number\n        id:\n          type: string\n        lat:\n          type: number\n        lon:\n          type: number\n        updated_at:\n          type: string\n        value:\n          type: string\n      type: object\n    Error:\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      type: object\n    Feed:\n      properties:\n        created_at:\n          readOnly: true\n          type: string\n        description:\n          type: string\n        details:\n          description: Additional details about this feed.\n          properties:\n            data:\n              properties:\n                count:\n                  description: Number of data points stored by this feed.\n                  type: integer\n                first:\n                  additionalProperties:\n                    $ref: '#/components/schemas/Data'\n                  type: object\n                last:\n                  additionalProperties:\n                    $ref: '#/components/schemas/Data'\n                  type: object\n              type: object\n            shared_with:\n              description: Access control list for this feed\n              items:\n                type: object\n              type: array\n          readOnly: true\n          type: object\n        enabled:\n          readOnly: true\n          type: boolean\n        group:\n          additionalProperties:\n            $ref: '#/components/schemas/ShallowGroup'\n          readOnly: true\n          type: object\n        groups:\n          items:\n            $ref: '#/components/schemas/ShallowGroup'\n          readOnly: true\n          type: array\n        history:\n          type: boolean\n        id:\n          readOnly: true\n          type: number\n        key:\n          type: string\n        last_value:\n          readOnly: true\n          type: string\n        license:\n          type: string\n        name:\n          type: string\n        status:\n          readOnly: true\n          type: string\n        status_notify:\n          description: Is status notification active?\n          type: boolean\n        status_timeout:\n          description: Status notification timeout in minutes.\n          type: integer\n        unit_symbol:\n          type: string\n        unit_type:\n          type: string\n        updated_at:\n          readOnly: true\n          type: string\n        visibility:\n          default: private\n          enum:\n            - private\n            - public\n          type: string\n      type: object\n    Group:\n      properties:\n        created_at:\n          readOnly: true\n          type: string\n        description:\n          type: string\n        feeds:\n          items:\n            $ref: '#/components/schemas/Feed'\n          readOnly: true\n          type: array\n        id:\n          readOnly: true\n          type: number\n        name:\n          type: string\n        updated_at:\n          readOnly: true\n          type: string\n      type: object\n    Permission:\n      properties:\n        created_at:\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: number\n        model:\n          default: feed\n          enum:\n            - feed\n            - group\n            - dashboard\n          type: string\n        object_id:\n          type: number\n        scope:\n          default: public\n          enum:\n            - secret\n            - public\n            - user\n            - organization\n          type: string\n        scope_value:\n          type: string\n        updated_at:\n          readOnly: true\n          type: string\n        user_id:\n          readOnly: true\n          type: number\n      type: object\n    ShallowGroup:\n      properties:\n        created_at:\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          readOnly: true\n          type: number\n        name:\n          type: string\n        updated_at:\n          readOnly: true\n          type: string\n      type: object\n    Token:\n      properties:\n        token:\n          type: string\n      type: object\n    Trigger:\n      properties:\n        name:\n          type: string\n      type: object\n    User:\n      properties:\n        color:\n          readOnly: true\n          type: string\n        created_at:\n          format: dateTime\n          readOnly: true\n          type: string\n        id:\n          readOnly: true\n          type: number\n        name:\n          readOnly: true\n          type: string\n        time_zone:\n          readOnly: true\n          type: string\n        updated_at:\n          format: dateTime\n          readOnly: true\n          type: string\n        username:\n          readOnly: true\n          type: string\n      type: object\n"
		}
	},
	"Error": "buildIR: make ir: path \"/{username}/dashboards/{dashboard_id}/blocks/{id}\": put: requestBody: contents: application/x-www-form-urlencoded: form parameter \"block_feeds\": nested objects not allowed",
	"NotImplemented": [
		"complex form schema"
	]
}