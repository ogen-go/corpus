{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/michaelherger/Bandcamp-API"
		},
		"file": {
			"name": "bandcamp.yaml",
			"size": 0,
			"path": "data/bandcamp.yaml",
			"byteSize": 59565,
			"content": "openapi: 3.0.0\ninfo:\n  description: bandcamp\n  version: 1.0.0\n  title: Bandcamp\nservers:\n  - url: 'https://bandcamp.com'\n    description: API endpoint. Does NOT serve any artwork.\n  - url: 'https://f0.bcbits.com'\n    description: \u003e-\n      Artwork serving \u0026 resizing. Does NOT serve the API. f0 can vary to f1, f4\n      etc.\ntags:\n  - name: To be figured out\n    description: end-points I have no clue about. Have fun!\npaths:\n  /api/band/3/search:\n    get:\n      summary: Search for bands.\n      tags:\n        - Bands\n      parameters:\n        - $ref: '#/components/parameters/DevKey'\n        - in: query\n          name: name\n          schema:\n            type: string\n          required: true\n          example: hermann\n      responses:\n        '200':\n          description: the bands\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      type: object\n                      description: a search result\n                      properties:\n                        name:\n                          $ref: '#/components/schemas/ArtistName'\n                        band_id:\n                          $ref: '#/components/schemas/ArtistID'\n                        subdomain:\n                          $ref: '#/components/schemas/SubDomain'\n                        url:\n                          $ref: '#/components/schemas/ArtistURL'\n                        offsite_url:\n                          type: string\n                          format: URI\n                          description: the artist's online presence outside bandcamp.com\n                          example: 'http://facebook.com/hermannmusik'\n  /api/band/3/discography:\n    get:\n      summary: Get a band's discography.\n      tags:\n        - Bands\n      parameters:\n        - $ref: '#/components/parameters/DevKey'\n        - in: query\n          name: band_id\n          schema:\n            type: integer\n          required: true\n          example: 2240734681\n      responses:\n        '200':\n          description: the band's discography\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      type: object\n                      description: a discography item\n                      properties:\n                        title:\n                          $ref: '#/components/schemas/AlbumTitle'\n                        artist:\n                          $ref: '#/components/schemas/ArtistName'\n                        band_id:\n                          $ref: '#/components/schemas/ArtistID'\n                        subdomain:\n                          $ref: '#/components/schemas/SubDomain'\n                        url:\n                          $ref: '#/components/schemas/AlbumURL'\n                        art_id:\n                          $ref: '#/components/schemas/ArtworkID'\n                        large_art_url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                        small_art_url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                        downloadable:\n                          $ref: '#/components/schemas/DownloadableFlag'\n                        release_date:\n                          $ref: '#/components/schemas/Timestamp'\n                        album_id:\n                          $ref: '#/components/schemas/AlbumID'\n  /api/album/2/info:\n    get:\n      summary: Get album information.\n      description: \u003e-\n        unfortunately this call would not return all playable items, even if an\n        identity cookie or the like was used.\n      tags:\n        - Albums\n      parameters:\n        - $ref: '#/components/parameters/DevKey'\n        - in: query\n          name: album_id\n          schema:\n            type: string\n          required: true\n          example: 793714377\n      responses:\n        '200':\n          description: the album\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      type: object\n                      description: a discography item\n                      properties:\n                        title:\n                          $ref: '#/components/schemas/AlbumTitle'\n                        about:\n                          type: string\n                          description: a description of the given album\n                          example: \"„Es gseht us, als wär d’Zyt still gstande, was an sich reizvoll wär, aber s’esch die falschi Zyt gsi...“ (Stillstand) \\r\\n\\r\\nHerzstück von Hermanns minimaler Mundart-Musik ist der Rhythm Ace FR-1. Mit seinen einfachen Rhythmen und dem warmen, analogen Klang liefert der 50-jährige Drumcomputer das ideale klangliche Gerüst für die drei Musiker, die auf der Suche nach einem neuen Sound waren. Das Gerät zwang ihnen die einfache Frage auf: wie füllt man die stoische Motorik mit Leben? Hermanns Antwort: Mit einfachen erzählenden Texten, die Ausflüge ins Politische, Alltagsphilosophische und Absurde unternehmen. Mit Gitarren- und Synthie-Sounds, die gleichermassen für stimmige Flächen wie für melodiöse Einfälle zuständig sind. Und mit einem Bass, der das stete Treiben des Rhythm Ace elegant mit dem musikalischen Überbau verbindet. All dies ergibt eine stimmungsvolle, punktgenaue Musik, die den Kopf gen oben öffnet, ohne dass die Füsse den Boden verlassen möchten.\"\n                        album_id:\n                          $ref: '#/components/schemas/AlbumID'\n                        band_id:\n                          $ref: '#/components/schemas/ArtistID'\n                        large_art_url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                        small_art_url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                        downloadable:\n                          $ref: '#/components/schemas/DownloadableFlag'\n                        release_date:\n                          $ref: '#/components/schemas/Timestamp'\n                        url:\n                          $ref: '#/components/schemas/AlbumURL'\n                        credits:\n                          type: string\n                          description: free text credits of the album\n                          example: \"Hermann: Hannes Herger (Bass), Dani Hug (Synths), Jonathan Winkler (Gesang, Gitarre, Rhythm Ace FR-1)\\r\\nAufnahme \u0026 Mix: Timo Keller, StudioVomDach\\r\\nMastering: Dave Hofmann, Somastudios.ch\\r\\nDesign: hugototal.ch\"\n                        tracks:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/Track'\n  /api/track/3/info:\n    get:\n      summary: Get track information.\n      tags:\n        - Tracks\n      parameters:\n        - $ref: '#/components/parameters/DevKey'\n        - in: query\n          name: track_id\n          schema:\n            type: string\n          required: true\n          example: 5020296\n      responses:\n        '200':\n          description: the track\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Track'\n  /api/fancollection/1/followers:\n    post:\n      summary: Get a user's followers\n      tags:\n        - Fan Collection\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/FanCollection'\n  /api/fancollection/1/following_bands:\n    post:\n      summary: Get the bands a user is following\n      tags:\n        - Fan Collection\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/FanCollection'\n  /api/fancollection/1/following_fans:\n    post:\n      summary: Get the fans a user is following\n      tags:\n        - Fan Collection\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/FanCollection'\n  /api/fancollection/1/collection_items:\n    post:\n      summary: Get a user's collection\n      tags:\n        - Fan Collection\n      parameters:\n        - $ref: '#/components/parameters/IdentityCookie'\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/ItemCollection'\n  /api/fancollection/1/wishlist_items:\n    post:\n      summary: Get a user's wishlist\n      tags:\n        - Fan Collection\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          $ref: '#/components/responses/ItemCollection'\n  /api/fancollection/1/fan_suggestions:\n    post:\n      summary: 'Get a user''s suggestions? Don''t know, really.'\n      tags:\n        - Fan Collection\n        - To be figured out\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          description: The suggestions\n  /api/fancollection/1/gifts_given:\n    post:\n      summary: 'Get the gifts a user has given?? Don''t know, really.'\n      tags:\n        - Fan Collection\n        - To be figured out\n      requestBody:\n        $ref: '#/components/requestBodies/FanCollectionBody'\n      responses:\n        '200':\n          description: The gifts\n  /api/fan/2/collection_summary:\n    get:\n      summary: get a rough summary of the user's collection (items bought etc.)\n      tags:\n        - Fan Collection\n      parameters:\n        - in: header\n          schema:\n            type: string\n          name: Cookie\n          example: \u003e-\n            identity=6%0909ddd7b4f6eca8250cedc5f42546bd39%09%7B%22id%22%3A1712700664%2C%22h1%22%3A%220a36b7aa8ce0b80c36b86d5bc4d0e735%22%2C%22ex%22%3A0%7D;\n      responses:\n        '200':\n          description: a summary of the user's collection\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  fan_id:\n                    $ref: '#/components/schemas/FanID'\n                  collection_summary:\n                    type: object\n                    properties:\n                      fan_id:\n                        $ref: '#/components/schemas/FanID'\n                      tralbum_lookup:\n                        type: object\n                        properties:\n                          \u003citem id\u003e:\n                            type: object\n                            description: \u003e-\n                              the key is something like 'a1234', where 'a' is\n                              for albums - see ItemType?\n                            properties:\n                              item_id:\n                                anyOf:\n                                  - $ref: '#/components/schemas/AlbumID'\n                                  - $ref: '#/components/schemas/TrackID'\n                              band_id:\n                                $ref: '#/components/schemas/ArtistID'\n                              purchased:\n                                type: string\n                                description: \u003e-\n                                  formatted timestamp of purchase, or null if\n                                  not purchased (wishlist?)\n                              item_type:\n                                $ref: '#/components/schemas/ItemType'\n                      follows:\n                        type: object\n                        properties:\n                          following:\n                            type: object\n                            properties:\n                              \u003cfan id\u003e:\n                                description: keys are the followed fans/bands' IDs\n                                type: boolean\n                      url:\n                        type: string\n                        format: URL\n                        description: the fan's home on bandcamp.com\n                        example: 'https://bandcamp.com/michaelherger'\n                      username:\n                        type: string\n                        example: michaelherger\n  /fan_feed_poll:\n    post:\n      summary: get the user's \"Music Feed\"\n      tags:\n        - To be figured out\n      parameters:\n        - in: header\n          schema:\n            type: string\n          name: Cookie\n          example: \u003e-\n            __utma=241114640.1402729518.1499081724.1519889216.1520672370.21;\n            __utmb=241114640.2.10.1520672370; __utmc=241114640;\n            __utmz=241114640.1519881502.19.8.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided);\n            __utmt=1;\n            session=1%09t%3A1520672367%09bp%3A1%09r%3A%5B%22nilZ0f0x1520672367%22%2C%2239731231s0a793714377x1519890154%22%2C%2239731231s0i2240734681x1519890153%22%5D;\n            BACKENDID=bender01-3; fan_visits=10236z4679z188671z482972;\n            identity=6%0909ddd7b4f6eca8250cedc5f42546bd39%09%7B%22id%22%3A1712700664%2C%22h1%22%3A%220a36b7aa8ce0b80c36b86d5bc4d0e735%22%2C%22ex%22%3A0%7D;\n            logout=%7B%22username%22%3A%22paypal%40herger.net%22%7D;\n            want_https=1; __qca=P0-412173266-1499081724027;\n            client_id=D38AB1D81E70CC68504277E9FE450FABC8D939D402E73A4D4A8212974965AAF4\n      requestBody:\n        description: JSON data of yet to understand data\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                since:\n                  $ref: '#/components/schemas/Timestamp'\n                crumb:\n                  type: string\n                  description: XXX\n                  example: '|fan_feed_poll|1520674192|JQgsXLOGnRKBBslOCPQXqpTCKJ0='\n      responses:\n        '200':\n          description: the feed\n  /fan_dash_feed_updates:\n    post:\n      summary: The user's \"Music Feed\" of music suggestions\n      tags:\n        - Music Feed\n      parameters:\n        - $ref: '#/components/parameters/IdentityCookie'\n      requestBody:\n        description: JSON data of yet to understand data\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                older_than:\n                  allOf:\n                    - $ref: '#/components/schemas/Timestamp'\n                    - description: the unix timestamp from when the stream should start\n                fan_id:\n                  $ref: '#/components/schemas/FanID'\n      responses:\n        '200':\n          description: the Music Feed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  stories:\n                    type: object\n                    properties:\n                      entries:\n                        description: the stream's items\n                        type: array\n                        items:\n                          description: a Music Stream item\n                          type: object\n                          properties:\n                            item_type:\n                              $ref: '#/components/schemas/ItemType'\n                      track_list:\n                        description: the list of playable items from the Music Stream?\n                        type: object\n                        properties:\n                          entries:\n                            description: the stream's items\n                            type: array\n                            items:\n                              anyOf:\n                                - $ref: '#/components/schemas/Track'\n                      query_times:\n                        description: \u003e-\n                          the times spent on the various queries required to\n                          compile the Music Stream. \"Query\":\"Time\" pairs\n                        type: object\n                      oldest_story_date:\n                        $ref: '#/components/schemas/Timestamp'\n                      feed_timestamp:\n                        $ref: '#/components/schemas/Timestamp'\n                      newest_story_date:\n                        allOf:\n                          - $ref: '#/components/schemas/Timestamp'\n                          - description: \u003e-\n                              the timestamp of the most recent story in the\n                              result list\n                  fan_info:\n                    description: information about the fans featured in the stream\n                    type: object\n                    properties:\n                      \u003cFanID\u003e:\n                        $ref: '#/components/schemas/Fan'\n                  band_info:\n                    description: information about the bands featured in the stream\n                    type: object\n                    properties:\n                      \u003cArtistID\u003e:\n                        type: object\n                        properties:\n                          name:\n                            $ref: '#/components/schemas/ArtistName'\n                          band_id:\n                            $ref: '#/components/schemas/ArtistID'\n                          image_id:\n                            $ref: '#/components/schemas/ArtworkID'\n                          genre_id:\n                            type: integer\n                          followed:\n                            type: integer\n                          no_index:\n                            $ref: '#/components/schemas/UnknownProperty'\n                          latest_art_id:\n                            $ref: '#/components/schemas/UnknownProperty'\n                  story_collectors:\n                    description: fans of one of the stream items?\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UnknownProperty'\n                  item_lookup:\n                    description: 'unknown, just empty?'\n                    type: object\n  /api/bcweekly/2/list:\n    get:\n      summary: Get a list of the Weekly shows.\n      tags:\n        - Weekly\n      responses:\n        '200':\n          description: the list of available Weekly shows\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        published_date:\n                          type: string\n                          description: a formatted timestamp\n                          example: '27 Sep 2016 00:00:00 GMT'\n                        date:\n                          type: string\n                          description: a formatted timestamp\n                          example: '27 Sep 2016 00:00:00 GMT'\n                        image_caption:\n                          $ref: '#/components/schemas/ImageCaption'\n                        subtitle:\n                          type: string\n                          example: All in the Family\n                        desc:\n                          $ref: '#/components/schemas/ShowDescription'\n                        image_id:\n                          type: integer\n                          description: smallest?\n                        v2_image_id:\n                          type: integer\n                          description: largest?\n                        screen_image_id:\n                          type: integer\n                          description: 'middle size, still 1000px?'\n                        id:\n                          type: integer\n                          example: 198\n                        button_color:\n                          type: string\n                          description: \u003e-\n                            a HTML/CSS color definition, likely matching the\n                            artwork\n                          example: f03b2b\n  /api/bcweekly/2/get:\n    get:\n      summary: Get information about a Weekly show.\n      tags:\n        - Weekly\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: integer\n          example: 270\n          required: true\n      responses:\n        '200':\n          description: the list of available Weekly shows\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  show_id:\n                    type: integer\n                    example: 198\n                  title:\n                    type: string\n                    description: always the same?\n                    example: Bandcamp Weekly\n                  subtitle:\n                    type: string\n                    example: All in the Family\n                  desc:\n                    $ref: '#/components/schemas/ShowDescription'\n                  short_desc:\n                    type: string\n                    example: Goat \u0026 Reginald Omas Mamode IV\n                  audio_title:\n                    type: string\n                    example: BC Weekly 183 September 27th 2016\n                  show_screen_image_id:\n                    type: integer\n                    example: 8380257\n                  show_v2_image_id:\n                    type: integer\n                    example: 8387090\n                  show_image_id:\n                    type: integer\n                    example: 8387090\n                  audio_track_id:\n                    type: integer\n                    description: pointing to single file for whole podcast\n                  audio_duration:\n                    type: number\n                    example: 5388.41\n                  audio_stream:\n                    type: object\n                    description: pointing to single file for whole podcast\n                    properties:\n                      mp3-128:\n                        type: string\n                        format: url\n                        example: \u003e-\n                          https://bandcamp.com/stream_redirect?enc=mp3-128\u0026track_id=1447643114\u0026ts=1521207419\u0026t=5852f1d29b7d9d8e11b62bae086245d3a65c70ef\n                      opus-lo:\n                        type: string\n                        format: url\n                        example: \u003e-\n                          https://popplers5.bandcamp.com/download/track?enc=opus-lo\u0026fsig=7e1214cff8a4c7dffef134ca8a52e880\u0026id=1447643114\u0026stream=1\u0026ts=1521207420.0\n                  audio_url_hash:\n                    $ref: '#/components/schemas/URLHints'\n                  tracks:\n                    type: array\n                    description: \u003e-\n                      list of track metadata, unfortunately without the\n                      streaming URL\n                    items:\n                      type: object\n                      properties:\n                        title:\n                          type: string\n                          example: The League of Frightened Men\n                        is_purchasable:\n                          type: boolean\n                        label:\n                          type: string\n                          example: Western Vinyl\n                        url_hints:\n                          $ref: '#/components/schemas/URLHints'\n                        album_url:\n                          $ref: '#/components/schemas/URLHints'\n                        location_text:\n                          type: string\n                          example: 'Philadelphia, Pennsylvania'\n                        album_id:\n                          $ref: '#/components/schemas/AlbumID'\n                        track_id:\n                          $ref: '#/components/schemas/TrackID'\n                        track_art_id:\n                          $ref: '#/components/schemas/ArtworkID'\n                        track_url:\n                          type: string\n                          example: \u003e-\n                            http://lushlifemedia.bandcamp.com/track/the-league-of-frightened-men\n                        artist:\n                          type: string\n                          example: Lushlife\n                        is_preorder:\n                          type: boolean\n                        price:\n                          type: number\n                        merch_ids:\n                          $ref: '#/components/schemas/MerchIDs'\n                        currency:\n                          $ref: '#/components/schemas/Currency'\n                        band_id:\n                          $ref: '#/components/schemas/ArtistID'\n                        bio_image_id:\n                          $ref: '#/components/schemas/ArtworkID'\n                        package_image_ids:\n                          type: array\n                          description: no idea\n                          items:\n                            type: string\n                        timecode:\n                          type: number\n                        is_set_price:\n                          type: boolean\n                        require_email:\n                          type: boolean\n                        url:\n                          type: string\n                          format: url\n                          example: \u003e-\n                            http://lushlifemedia.bandcamp.com/album/no-dead-languages\n                        album_title:\n                          type: string\n                          example: No Dead Languages\n                  image_caption:\n                    $ref: '#/components/schemas/ImageCaption'\n                  stream_infos:\n                    type: object\n                    properties:\n                      metadata_crc:\n                        type: string\n                      encodings_id:\n                        type: integer\n                        example: 3474371285\n                      format:\n                        type: integer\n                        example: 101\n                      file_id:\n                        type: integer\n                        example: 3596572293\n                  date:\n                    type: string\n                    description: a formatted timestamp\n                    example: '27 Sep 2016 00:00:00 GMT'\n                  published_date:\n                    type: string\n                    description: a formatted timestamp\n                    example: '27 Sep 2016 00:00:00 GMT'\n                  dark_mode:\n                    type: string\n  /api/url/1/info:\n    get:\n      summary: Get information about content on a given bandcamp.com URL.\n      tags:\n        - URLs\n      parameters:\n        - $ref: '#/components/parameters/DevKey'\n        - in: query\n          name: url\n          schema:\n            type: string\n            format: URI\n          example: 'https://hrmnn.bandcamp.com'\n          required: true\n      responses:\n        '200':\n          description: information about the given URL\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: object\n                    properties:\n                      error_message:\n                        type: string\n                        example: unknown url\n                      error:\n                        type: boolean\n                  - type: object\n                    properties:\n                      band_id:\n                        $ref: '#/components/schemas/ArtistID'\n                  - type: object\n                    properties:\n                      band_id:\n                        $ref: '#/components/schemas/ArtistID'\n                      track_id:\n                        $ref: '#/components/schemas/TrackID'\n                  - type: object\n                    properties:\n                      band_id:\n                        $ref: '#/components/schemas/ArtistID'\n                      album_id:\n                        $ref: '#/components/schemas/AlbumID'\n  '/img/{type}{id}_{format}.jpg':\n    get:\n      summary: 'Endpoint on https://f0.bcbits.com/ to get various pieces of artwork.'\n      description: \u003e-\n        Not really another endpoint, but its own server... here for\n        completeness' sake. *Make sure you use this on https://f0.bcbits.com/!*\n      tags:\n        - Artwork\n      parameters:\n        - in: path\n          name: type\n          schema:\n            type: string\n            enum:\n              - a\n              - t\n              - p\n          description: |-\n            - a: Album artwork\n            - t: Track artwork\n            - p: merchandising? Not sure about this one\n          required: true\n          example: a\n        - in: path\n          name: id\n          schema:\n            type: string\n          description: \u003e-\n            The image ID is left padded with 0 and then truncated to 10\n            characters.\n          required: true\n          example: 1386391961\n        - in: path\n          name: format\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n              - 2\n              - 3\n              - 4\n              - 5\n              - 7\n              - 8\n              - 9\n              - 20\n              - 22\n              - 41\n              - 42\n          description: |-\n            An integer defining the resulting size. One of the following:\n            - 0 =\u003e original (size \u0026 format, don't use extension)\n            - 1 =\u003e fullsize (dito, use .original?, even heavier?!?)\n            - 2 =\u003e 350x350 jpg\n            - 3 =\u003e 100x100 jpg\n            - 4 =\u003e 300x300 jpg\n            - 5 =\u003e 700x700 jpg\n            - 7 =\u003e 150x150 jpg\n            - 8 =\u003e 124x124 jpg\n            - 9 =\u003e 210x210 jpg\n            - 10 =\u003e 1200x1200 jpg\n\n            Non-artwork related, but working?\n            - 20 =\u003e 1024x1024 jpg\n            - 22 =\u003e 25x25 jpg\n            - 41 =\u003e 210x210 jpg\n            - 42 =\u003e 50x50 jpg\n          required: true\n          example: 2\n      responses:\n        '200':\n          description: the artwork\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n  /api/salesfeed/1/get:\n    get:\n      summary: get currently selling items\n      tags:\n        - Editorial\n      parameters:\n        - in: query\n          name: start_date\n          schema:\n            type: integer\n          description: timestamp of the moment you want sales data from\n      responses:\n        '200':\n          description: a list of currently selling albums\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  server_time:\n                    $ref: '#/components/schemas/Timestamp'\n                  end_date:\n                    $ref: '#/components/schemas/Timestamp'\n                  data_delay_sec:\n                    $ref: '#/components/schemas/UnknownProperty'\n                  events:\n                    type: array\n                    items:\n                      anyOf:\n                        - $ref: '#/components/schemas/SaleEvent'\n                        - $ref: '#/components/schemas/DownloadEvent'\n                  start_date:\n                    $ref: '#/components/schemas/Timestamp'\n                  home_page_values:\n                    type: object\n                    properties:\n                      sales_count_all_time:\n                        allOf:\n                          - $ref: '#/components/schemas/UnknownProperty'\n                          - example: 40981326\n                      downloads_count_all_time:\n                        allOf:\n                          - $ref: '#/components/schemas/UnknownProperty'\n                          - example: 182798723\n                      revenue_total:\n                        allOf:\n                          - $ref: '#/components/schemas/UnknownProperty'\n                          - example: 277276436\n                      revenue_30d:\n                        allOf:\n                          - $ref: '#/components/schemas/UnknownProperty'\n                          - example: 7291052\n  /api/discover/3/get_web:\n    get:\n      summary: get a list of discovery items\n      description: \u003e-\n        get a list of discovery items: `top` selling, staff `pic`ks, `new`\n        arrivals, `most` recommended\n      tags:\n        - Editorial\n      parameters:\n        - in: query\n          name: p\n          schema:\n            type: integer\n          description: Page?\n          example: 0\n        - in: query\n          name: s\n          schema:\n            $ref: '#/components/schemas/DiscoveryType'\n          example: top\n      responses:\n        '200':\n          description: the items\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total_count:\n                    type: integer\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Album'\n                  timestamp:\n                    type: string\n                    example: '05 Mar 2018 16:52:23 GMT'\n                  data_sig:\n                    $ref: '#/components/schemas/UnknownProperty'\n                  spec_id:\n                    $ref: '#/components/schemas/UnknownProperty'\n                  ui_sig:\n                    $ref: '#/components/schemas/UnknownProperty'\n                  args:\n                    type: object\n                    properties:\n                      s:\n                        $ref: '#/components/schemas/DiscoveryType'\n                      p:\n                        type: integer\n                      g:\n                        type: string\n                        example: all\n                      r:\n                        $ref: '#/components/schemas/UnknownProperty'\n                      following:\n                        type: boolean\n                        description: wheter a user is following this item or not\n                      w:\n                        type: integer\n                      f:\n                        type: string\n                        example: all\ncomponents:\n  parameters:\n    DevKey:\n      in: query\n      name: key\n      description: \u003e-\n        a dev key which was provided by bandcamp.com. Unfortunately they no\n        longer hand them out.\n      schema:\n        type: string\n      required: true\n    IdentityCookie:\n      in: header\n      description: \u003e-\n        the identity cookie can only be received by logging in to the web site.\n        Unfortunately I haven't found a way to log in programmatically yet. But\n        that identity cookie seems to be rather long-lived (several days at\n        least).\n      schema:\n        type: string\n      name: Cookie\n      example: identity=9%0909ddd7b4f6eca8250cedc5f42546bd39%09%7B%22id%22%3A1712700664%2C%22h1%22%3A%220a36b7aa8ce0b80c36b86d5bc4d0e735%22%2C%22ex%22%3A0%7D;\n  requestBodies:\n    FanCollectionBody:\n      description: JSON data of yet to understand data\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              fan_id:\n                $ref: '#/components/schemas/FanID'\n              older_than_token:\n                type: string\n                description: \u003e-\n                  The older_than_token string's structure is still unknown to\n                  me. It's being used to page through results. The first part of\n                  it seems to be some kind of timestamp. Starting with the\n                  current time you'd get the last token of the result set, which\n                  in turn could be used to fetch more results.\n                example: '1504691191:1603563167:a::'\n              count:\n                type: integer\n                example: 10\n                description: \u003e\n                  The number of items to return. There's no known limit: I've\n                  run queries with up to 5000 results. Use carefully!\n  schemas:\n    ArtistName:\n      type: string\n      description: the artist name\n      example: Hermann\n    ArtistID:\n      type: integer\n      example: 2240734681\n    ArtistURL:\n      type: string\n      format: URI\n      example: 'http://hrmnn.bandcamp.com'\n    AlbumURL:\n      type: string\n      format: URI\n      example: 'http://hrmnn.bandcamp.com/album/hermann?pk=391'\n    AlbumTitle:\n      type: string\n      description: the album title\n      example: Hermann\n    AlbumID:\n      type: integer\n      example: 793714377\n    Album:\n      type: object\n      description: an album object\n      properties:\n        primary_text:\n          allOf:\n            - $ref: '#/components/schemas/AlbumTitle'\n            - description: 'the primary text to be shown with an item, eg. its albun title'\n        secondary_text:\n          allOf:\n            - $ref: '#/components/schemas/UnknownProperty'\n            - example: TESD4Implants2\n        id:\n          $ref: '#/components/schemas/AlbumID'\n        package_title:\n          allOf:\n            - $ref: '#/components/schemas/UnknownProperty'\n            - type: string\n        genre_text:\n          type: string\n          description: 'some genre description, afaik pretty much free form'\n          example: podcasts\n        art_id:\n          $ref: '#/components/schemas/ArtworkID'\n        alt_art_image_id:\n          $ref: '#/components/schemas/ArtworkID'\n        band_id:\n          $ref: '#/components/schemas/ArtistID'\n        bio_image:\n          type: object\n          properties:\n            width:\n              type: integer\n            image_id:\n              type: integer\n            height:\n              type: integer\n        featured_track:\n          type: object\n          properties:\n            title:\n              type: string\n              example: Hermann\n            id:\n              type: integer\n              example: 3056958565\n            encodings_id:\n              $ref: '#/components/schemas/UnknownProperty'\n            duration:\n              type: number\n              example: 60.694\n            file:\n              type: object\n              properties:\n                mp3-128:\n                  $ref: '#/components/schemas/StreamURL'\n        category:\n          allOf:\n            - $ref: '#/components/schemas/UnknownProperty'\n            - example: solr_hack\n        package_art1:\n          $ref: '#/components/schemas/UnknownProperty'\n        package_art2:\n          $ref: '#/components/schemas/UnknownProperty'\n        package_art3:\n          $ref: '#/components/schemas/UnknownProperty'\n        package_art4:\n          $ref: '#/components/schemas/UnknownProperty'\n        publish_date:\n          type: string\n          example: '05 Mar 2018 04:55:34 GMT'\n        item_type_id:\n          allOf:\n            - $ref: '#/components/schemas/UnknownProperty'\n            - example: a3672525499solr_hack\n        is_preorder:\n          type: boolean\n        recommendations:\n          $ref: '#/components/schemas/UnknownProperty'\n        url_hints:\n          $ref: '#/components/schemas/URLHints'\n        location_text:\n          type: string\n          example: 'New York, New York'\n        extras:\n          $ref: '#/components/schemas/UnknownProperty'\n        score:\n          allOf:\n            - $ref: '#/components/schemas/UnknownProperty'\n            - type: number\n        type:\n          type: string\n          description: '`a` for Album'\n          example: a\n    DownloadEvent:\n      type: object\n      description: a download event\n      properties:\n        utc_date:\n          type: number\n        event_type:\n          type: string\n          enum:\n            - download\n    SaleEvent:\n      type: object\n      description: 'a sale event, can have multiple sales'\n      properties:\n        utc_date:\n          type: number\n        event_type:\n          type: string\n          enum:\n            - sale\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/SaleItem'\n    SaleItem:\n      type: object\n      description: an item sold\n      properties:\n        utc_date:\n          type: number\n        amount_paid_fmt:\n          type: string\n          description: formatted amount paid for the item\n          example: $6 CAD\n        amount_paid:\n          type: number\n          example: 6\n        currency:\n          $ref: '#/components/schemas/Currency'\n        amount_paid_usd:\n          type: number\n          description: the paid amount in USD\n          example: 4.64\n        art_id:\n          $ref: '#/components/schemas/ArtworkID'\n        package_image_id:\n          $ref: '#/components/schemas/UnknownProperty'\n        item_description:\n          type: string\n          description: Cast of Static and Smoke\n        track_album_slug_text:\n          type: string\n        artist_name:\n          type: string\n          description: Vile Creature\n        slug_type:\n          type: string\n          description: '`a` for artist etc.?'\n          example: a\n        releases:\n          $ref: '#/components/schemas/UnknownProperty'\n        country_code:\n          type: string\n          example: us\n        item_type:\n          $ref: '#/components/schemas/ItemType'\n        item_price:\n          type: number\n        country:\n          type: string\n          example: United States\n        art_url:\n          $ref: '#/components/schemas/ArtworkURL'\n        album_title:\n          type: string\n        url:\n          type: string\n          format: URL\n          description: the URL where the item can be found\n          example: //vilecreature.bandcamp.com/album/cast-of-static-and-smoke\n    Track:\n      type: object\n      properties:\n        title:\n          $ref: '#/components/schemas/TrackTitle'\n        band_id:\n          $ref: '#/components/schemas/ArtistID'\n        large_art_url:\n          $ref: '#/components/schemas/ArtworkURL'\n        small_art_url:\n          $ref: '#/components/schemas/ArtworkURL'\n        streaming_url:\n          $ref: '#/components/schemas/StreamURL'\n        downloadable:\n          $ref: '#/components/schemas/DownloadableFlag'\n        number:\n          type: integer\n        duration:\n          type: number\n        album_id:\n          $ref: '#/components/schemas/AlbumID'\n        url:\n          type: string\n          description: \u003e-\n            the track URL - despite its name not a full URL, but only it's path\n            part!\n          example: /track/kellner?pk=391\n        track_id:\n          $ref: '#/components/schemas/TrackID'\n        credits:\n          type: string\n        lyrics:\n          type: string\n        about:\n          type: string\n    TrackID:\n      type: integer\n      example: 2484061734\n    TrackTitle:\n      type: string\n      example: Kellner\n    ArtworkID:\n      type: integer\n      description: the artwork ID\n      example: 1386391961\n    ArtworkURL:\n      type: string\n      format: URI\n      example: 'https://f4.bcbits.com/img/a1386391961_3.jpg'\n    SubDomain:\n      type: string\n      description: the subdomain where the artist is at home on bandcamp.com\n      example: hrmnn\n    FollowerList:\n      type: object\n      properties:\n        more_available:\n          type: boolean\n        last_token:\n          type: string\n          description: \u003e-\n            the token of the last item returned in this response, starting point\n            for a follow up request?\n          example: '1358631543:14628'\n        followeers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Follower'\n    Follower:\n      type: object\n      properties:\n        location:\n          $ref: '#/components/schemas/Location'\n        band_id:\n          $ref: '#/components/schemas/ArtistID'\n        is_following:\n          type: boolean\n        is_subscribe:\n          type: boolean\n        name:\n          type: string\n          example: Michael Herger\n        trackpipe_url:\n          $ref: '#/components/schemas/TrackpipeURL'\n        art_id:\n          $ref: '#/components/schemas/ArtworkID'\n        image_id:\n          $ref: '#/components/schemas/ArtworkID'\n        fan_id:\n          $ref: '#/components/schemas/FanID'\n        token:\n          type: string\n          example: '1432068324:195872'\n        date_followed:\n          $ref: '#/components/schemas/Timestamp'\n        fan_url:\n          type: string\n          format: URL\n        url_hints:\n          $ref: '#/components/schemas/URLHints'\n    FanID:\n      type: integer\n      example: 10236\n    Fan:\n      type: object\n      properties:\n        location:\n          $ref: '#/components/schemas/Location'\n        bio:\n          type: string\n          example: King Crimson biographer among oher things.\n        collection_size:\n          type: integer\n        followed:\n          type: integer\n        num_items_in_common:\n          type: integer\n        fav_genre_name:\n          type: string\n          example: Alternative\n        fav_genre_id:\n          type: integer\n          example: 2\n        followed_by:\n          $ref: '#/components/schemas/FollowerList'\n        trackpipe_url:\n          $ref: '#/components/schemas/TrackpipeURL'\n        name:\n          type: string\n          example: Carlos Romeo\n        collection_art:\n          type: array\n          items:\n            type: object\n            properties:\n              \u003cindex\u003e:\n                type: object\n                properties:\n                  art_info:\n                    type: object\n                    properties:\n                      art_id:\n                        type: integer\n                        example: 1058221488\n                  tralbum_type:\n                    $ref: '#/components/schemas/TrAlbumType'\n                  tralbum_id:\n                    oneOf:\n                      - $ref: '#/components/schemas/AlbumID'\n                      - $ref: '#/components/schemas/TrackID'\n        image_id:\n          type: integer\n          example: 878604\n        fan_id:\n          allOf:\n            - $ref: '#/components/schemas/FanID'\n            - example: 4679\n        is_montage_image:\n          $ref: '#/components/schemas/UnknownProperty'\n        username:\n          type: string\n          example: ignacioc\n    TrAlbumType:\n      type: string\n      enum:\n        - a\n        - t?\n      description: whether this is an album or track?\n    TrackpipeURL:\n      type: string\n      format: URI\n      description: the user's profile URL\n      example: 'http://bandcamp.com/michaelherger'\n    ItemType:\n      type: string\n      enum:\n        - a\n      description: the type can be `a`lbum\n    DiscoveryType:\n      type: string\n      enum:\n        - top\n        - pic\n        - new\n        - most\n    Currency:\n      type: string\n      description: three character currency description\n      example: CHF\n    StreamURL:\n      type: string\n      format: URI\n      example: \u003e-\n        https://bandcamp.com/stream_redirect?enc=mp3-128\u0026track_id=2484061734\u0026ts=1520430789\u0026t=85bce9f8b951fd3eb5decdbe48a17724eadc3c83\n    URLHints:\n      type: object\n      properties:\n        custom_domain_verified:\n          $ref: '#/components/schemas/UnknownProperty'\n        custom_domain:\n          type: string\n          description: 'an artist''s own, custom domain name'\n        subdomain:\n          type: string\n          description: the artist's subdomain on bandcamp.com\n          example: hrmnn\n        item_type:\n          type: string\n          enum:\n            - a\n            - t\n          description: 'the type can be `a`lbum, `t`rack'\n        slug:\n          type: string\n          example: hermann\n    Timestamp:\n      type: integer\n      description: a timestamp in unix time\n      example: 1520400480\n    DownloadableFlag:\n      allOf:\n        - $ref: '#/components/schemas/UnknownProperty'\n        - example: 2\n    MerchIDs:\n      type: array\n      items:\n        type: number\n      example:\n        - 214158844\n        - 833475221\n    Location:\n      type: string\n      example: Switzerland\n    ShowDescription:\n      type: string\n      example: \u003e-\n        Featuring interviews with Sweden's mysterious Goat, and Reginald Omas\n        Mamode IV of London’s prolific 22a crew. \n    ImageCaption:\n      type: string\n      description: HTML formatted caption\n      example: \u003e-\n        Hosted by \u003ca href=\"http://bandcamp.com/andrewjervis\"\u003eAndrew Jervis\u003c/a\u003e.\n        Illustration of \u003ca href=\"http://goat.bandcamp.com/\"\u003eGoat\u003c/a\u003e by \u003ca\n        href=\"http:/ /elhuervo.tumblr.com\"\u003eNiklas Åkerblad\u003c/a\u003e.\n    UnknownProperty:\n      type: string\n      description: unknown?\n  responses:\n    FanCollection:\n      description: The followers\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FollowerList'\n    ItemCollection:\n      description: The collection\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              more_available:\n                type: boolean\n              purchase_infos:\n                type: object\n              last_token:\n                type: string\n                example: '1301406176:1500067389:a:2:'\n              item_lookup:\n                type: object\n              redownload_urls:\n                type: object\n              collectors:\n                type: object\n              track_list:\n                type: array\n                description: featured tracks of the \"items\"?\n                items:\n                  type: object\n                  properties:\n                    currency:\n                      $ref: '#/components/schemas/Currency'\n                    has_digital_download:\n                      type: boolean\n                    album_title:\n                      $ref: '#/components/schemas/AlbumTitle'\n                    encodings_id:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: number\n                        - example: 18647555\n                    track_id:\n                      $ref: '#/components/schemas/TrackID'\n                    merch_ids:\n                      $ref: '#/components/schemas/MerchIDs'\n                    album_id:\n                      $ref: '#/components/schemas/AlbumID'\n                    duration:\n                      type: number\n                    title:\n                      $ref: '#/components/schemas/TrackTitle'\n                    label_id:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    merch_sold_out:\n                      type: boolean\n                    price:\n                      type: number\n                    has_lyrics:\n                      type: boolean\n                    art_id:\n                      $ref: '#/components/schemas/ArtworkID'\n                    band_id:\n                      $ref: '#/components/schemas/ArtistID'\n                    label:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    track_num:\n                      type: integer\n                    is_purchasable:\n                      type: boolean\n                    is_set_price:\n                      type: boolean\n                    streaming_url:\n                      type: object\n                      properties:\n                        mp3-128:\n                          $ref: '#/components/schemas/StreamURL'\n                    require_email:\n                      type: boolean\n                    is_streamable:\n                      type: boolean\n                    band_name:\n                      $ref: '#/components/schemas/ArtistName'\n              items:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    currency:\n                      $ref: '#/components/schemas/Currency'\n                    has_digital_download:\n                      type: boolean\n                    album_title:\n                      $ref: '#/components/schemas/AlbumTitle'\n                    gift_recipient_name:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    featured_track_duration:\n                      type: number\n                    item_url:\n                      $ref: '#/components/schemas/AlbumURL'\n                    url_hints:\n                      $ref: '#/components/schemas/URLHints'\n                    tralbum_type:\n                      $ref: '#/components/schemas/TrAlbumType'\n                    fan_id:\n                      $ref: '#/components/schemas/FanID'\n                    is_subscription_item:\n                      type: boolean\n                    item_art_id:\n                      $ref: '#/components/schemas/ArtworkID'\n                    item_id:\n                      type: integer\n                    merch_ids:\n                      $ref: '#/components/schemas/MerchIDs'\n                    album_id:\n                      $ref: '#/components/schemas/AlbumID'\n                    featured_track_encodings_id:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: integer\n                    tralbum_id:\n                      oneOf:\n                        - $ref: '#/components/schemas/AlbumID'\n                        - $ref: '#/components/schemas/TrackID'\n                    sale_item_id:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: integer\n                    label_id:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: integer\n                    band_location:\n                      $ref: '#/components/schemas/Location'\n                    is_subscriber_only:\n                      type: boolean\n                    featured_track_url:\n                      $ref: '#/components/schemas/StreamURL'\n                    item_art_url:\n                      $ref: '#/components/schemas/ArtworkURL'\n                    hidden:\n                      type: boolean\n                      description: \u003e-\n                        an item which had been sold at some point, but is no\n                        longer available?\n                    merch_sold_out:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: boolean\n                    price:\n                      type: number\n                    is_preorder:\n                      type: boolean\n                    package_details:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    item_title:\n                      oneOf:\n                        - $ref: '#/components/schemas/ArtistName'\n                        - $ref: '#/components/schemas/AlbumTitle'\n                        - $ref: '#/components/schemas/TrackTitle'\n                    band_image_id:\n                      $ref: '#/components/schemas/ArtworkID'\n                    gift_id:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    is_private:\n                      type: boolean\n                      description: \u003e-\n                        an item which had been sold at some point, but is no\n                        longer available\n                    featured_track_number:\n                      type: integer\n                    band_url:\n                      $ref: '#/components/schemas/ArtistURL'\n                    item_art:\n                      type: object\n                      properties:\n                        thumb_url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                        art_id:\n                          $ref: '#/components/schemas/ArtworkID'\n                        url:\n                          $ref: '#/components/schemas/ArtworkURL'\n                    item_art_ids:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    num_streamable_tracks:\n                      type: integer\n                    sale_item_type:\n                      type: string\n                      enum:\n                        - p\n                      description: '`p`urchase?'\n                    purchased:\n                      $ref: '#/components/schemas/Timestamp'\n                    added:\n                      $ref: '#/components/schemas/Timestamp'\n                    band_id:\n                      $ref: '#/components/schemas/ArtistID'\n                    label:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    release_count:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    featured_track_title:\n                      $ref: '#/components/schemas/TrackTitle'\n                    index:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    is_set_price:\n                      type: boolean\n                    gift_sender_name:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    service_url_fragment:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    is_purchasable:\n                      type: boolean\n                    why:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    featured_track:\n                      $ref: '#/components/schemas/TrackID'\n                    updated:\n                      $ref: '#/components/schemas/Timestamp'\n                    token:\n                      type: string\n                      example: '1505295591:793714377:a::'\n                    releases:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    message_count:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    featured_track_is_custom:\n                      type: boolean\n                    genre_id:\n                      type: integer\n                    discount:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    require_email:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: boolean\n                    gift_sender_note:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    service_name:\n                      $ref: '#/components/schemas/UnknownProperty'\n                    is_giftable:\n                      type: boolean\n                    band_name:\n                      $ref: '#/components/schemas/ArtistName'\n                    also_collected_count:\n                      allOf:\n                        - $ref: '#/components/schemas/UnknownProperty'\n                        - type: integer\n                    item_type:\n                      type: string\n                      enum:\n                        - album\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\n",
			"canonicalURL": "/github.com/michaelherger/Bandcamp-API@d1e54c00c5f737109e1aa289e68dbf35f84c9c8a/-/blob/data/bandcamp.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/michaelherger/Bandcamp-API/blob/d1e54c00c5f737109e1aa289e68dbf35f84c9c8a/data/bandcamp.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/track/3/info\": get: responses: code 200: contents: application/json: generate schema: field downloadable: allOf: schema type mismatch: string and "
}