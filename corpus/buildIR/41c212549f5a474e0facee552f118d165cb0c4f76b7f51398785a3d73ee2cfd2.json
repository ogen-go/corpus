{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rapi-doc/RapiDoc"
		},
		"file": {
			"name": "many-oneof.yaml",
			"size": 0,
			"path": "docs/specs/many-oneof.yaml",
			"byteSize": 219061,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://{server}/api/public/v4\n    variables:\n      server:\n        description: the server where an OpenTripModel implementation is hosted\n        default: api.opentripmodel.org\ninfo:\n  title: Open Trip Model\n  description: |\n    # Introduction\n\n    You are viewing the **API Reference Documentation** of OpenTripModel. This reference documentation is targetted at developers that are writing\n    client or server code for an OpenTripModel implementation. For a general introduction to OpenTripModel, please refer to the\n    [main website of OpenTripModel](https://www.opentripmodel.org/). This documentation is generated from the OpenTripModel API specification, the\n    source of which can be found at [OpenTripModels GitHub repository](https://github.com/opentripmodel/opentripmodel).\n\n    \u003e ## ℹ A word on examples\n    \u003e The example requests that are shown in this documentation are automatically generated. This means the _structure_ of the examples is right,\n    according to the specification, while the _data_ in the examples is not always correct in a given context. E.g. various event types instruct\n    to have certain `involvedObjects` available in the event. The examples do not reflect these requirements, since there is (currently) no way\n    to express these in terms of an OpenAPI specification.\n\n\n    # The model\n    \u003cimg src=\"/images/otm-model.svg\" width=\"350\" style=\"border:0px;\"/\u003e\n\n    OpenTripModel defines entities, displayed yellow in the image. You can click on the boxes in the image to jump to the corresponding section in\n    this API Reference Documentation. For a more conceptual introduction to the entities, please read the\n    [Introducing the model](https://www.opentripmodel.org/docs/the-model) section of the documentation. There's also an\n    [introduction to lifecycles](https://www.opentripmodel.org/docs/lifecycles) available. (Lifecycles are displayed as green boxes in the image.)\n\n    Apart from these entities, perhaps the most important entity in OpenTripModel is the **[Event](/#tag/Event)**. All dynamic behaviour is modeled\n    as (a series of) event(s). Please refer to the sections [Important Concepts](https://www.opentripmodel.org/docs/concepts) and\n    [Event entity](https://www.opentripmodel.org/docs/event-entity) of the general documentation for an introduction.\n\n\n    # Technical notes\n\n    ## Unique identifiers\n    This section has been moved to the [Implementation guide](https://www.opentripmodel.org/docs/unique-identifiers) on the main OpenTripModel\n    website.\n\n    ## Time values\n    This section has been moved to the [Implementation guide](https://www.opentripmodel.org/docs/time-and-date-representation) on the main\n    OpenTripModel website.\n\n    ## Bundles\n    To create multiple entities and events in one request, use a **[Bundle](/#tag/Bundle)** call. This provides transactional guarantees, preventing\n    roll-back scenario's. A typical use case is when the originating system is not event based, and it has to communicate an entire \"planning\" at\n    once. The benefits of using a `Bundle` are that you can save network traffic and that all entities and events are validated at the same time.\n\n    ## Changes since 4.2.0-b4\n    - Change `sizeConstraint` in `SizeConstraint` to camelCase formatted enum, to be more consistent with other enums.\n    - Added the fields `basisType` and `basisReference` to describe the basis of a [`Constraint`](#tag/Constraint).\n    - Added the [`Constraint`](#tag/Constraint)-type `dangerousGoodsConstraint`.\n    - Added additional `Location` types.\n    - Added additional `Vehicle` types.\n    - Added the [`Constraint`](#tag/Constraint)-type `numberOfVehiclesConstraint`.\n    - All enums are now camelCase, for consistency. Some snake_case values were changed in the process.\n\n    ## Changes since 4.2.0-b3\n    - Added the `name` field to `Constraint`, `Shipment` and `Route`, so that all Entities use it in the same way.\n    - Added `externalIds` to `Constraint`, so that all Entities use it in the same way.\n    - Updated `trafficWarningEvent` to reflect the fact that it needs at least one Location or Route, it does not require both.\n    - The eventGenerationTime now may be set by the recipient if the sender does not set it.\n    - `Actor` now supports the same contactDetails field `Location` already had.\n    - `Shipment` now has a count field for shipments that are counted in units of packaging.\n    - Inline location in an `Event` is now always optional because it's also possible to use an involvedObject Location.\n    - Removed linkedTrips array from the `Trip` Entity. Trips should be linked using the `linkTripsEvent`.\n    - Removed links array from the `Vehicle` Entity. Vehicles should be linked using the `coupleVehiclesEvent`.\n\n    ## Changes since 4.2.0-b2\n    - Added the [`Constraint`](#tag/Constraint)-type `eventOrderConstraint`,  to constrain the order of event if there are no timestamps available.\n    - Updated the diagram in the section [The model](#section/The-model) to reflect recent changes.\n    - Added the possibility to add a `constraint` directly to a `Sensor` entity.\n    - Added a `placement` field to the `loadShipmentEvent`.\n    - Numeric values in `valueWithUnit` can now be any numeric type, not just `int32`.\n    - More explicit documentation on event ordering in relation to the `cancelAllEntityEvents` event.\n\n    ## Changes since 4.2.0-b1\n    - Added [top level `/events` endpoint]/paths/~1events/get)\n    - Added `involvedObject` query parameter for filtering events\n    - Added `lifecycle` query parameter for filtering events on their lifecycle. This only applies when querying for events via the general `/events`\n      endpoint.\n    - Added overview documentation about [Event endpoints](#event-endpoints)\n    - Added overview documentation about [Involved objects](#involved-objects)\n    - Updated the specification definition to [OpenAPI 3.0.0](https://swagger.io/specification/)\n\n    ## Changes since 4.1\n    - Rewrite of the [documentation on `Event`s](#tag/Event).\n    - Added `groupingId` to `Event`s.\n    - Added event types:\n        - `cancelAllEntityEvents`;\n        - `cancelGroupedEvents`;\n        - `dissociateFromActorEvent`.\n    - Fixed inconsistent query parameters for `GET` requests on event-endpoints.\n    - Sensors are now first class citizens in OpenTripModel:\n        - Added the `Sensor` entity and corresponding endpoints\n        - Added `coupleSensorEvent` and `decoupleSensorEvent`\n        - Updated `sensorValueConstraint`\n        - Added `sensorUpdateFrequencyConstraint`\n\n    ## Changes since 4.0\n    - The `administrativeReference` member of the `Location` entity is now camelCased, like all other members. In OTM 4.0 it was inconsistently\n      called ~~`administrative-reference`~~. Implementors are advised to be a [Tolerant Reader](https://martinfowler.com/bliki/TolerantReader.html),\n      that is: to accept both forms, but only write the new form.\n    - The `location` member of several types of `Event`s no longer accepts references to pre-defined `Location` entities, now only inline (_ad hoc_)\n      entities are allowed inside an event. If you want to refer to a pre-defined `Location` inside an `Event`, either publish the event on the\n      `Location`'s `event` endpoint or refer to the `Location` in the `involvedObjects` member of the `Event`.\n    - Improved the `constraintReference` documentation and removed the ambiguous `reference` field.\n    - Added the field `eventGenerationTime` to `Event`. This can be useful e.g. for events in the `projected` lifecycle phase, that typically are\n      calculated.\n    - Added speed and heading info to `locationUpdateEvents` for point locations.\n\n\n    # Licence\n    \u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\n      \u003cimg alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n    \u003cbr /\u003e\n    All OpenTripModel documentation is licensed under a\n    \u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003eCreative Commons Attribution-ShareAlike 4.0 International License\u003c/a\u003e.\n  version: \"{{VERSION}}\"\n  license:\n    name: Creative Commons Attribution-ShareAlike 4.0 International License\n    url: http://creativecommons.org/licenses/by-sa/4.0/\n\ntags:\n  - name: Location\n    description: |\n      Locations are geometric entities which can have either the shape of a point or an area. These points and areas can be used to model delivery\n      zones, store and warehouse coordinates as well as environmental zones within urban areas, areas with access restrictions, etc.\n  - name: Event\n    description: |\n      An event is something occurring at a specific time (whether in the past, present, or past alike) and (optionally) at a specific location. Events\n      are the core of this API. Events link all static objects together. There are several different event types defined in OpenTripModel. The\n      sections below document the available event types. Events are devided into categories:\n      - [Update events](#update-events)\n      - [Warning events](#warning-events)\n      - [Action events](#action-events)\n      - [Time window events](#time-window-events)\n      - [Associative events](#associative-events)\n      - [Meta events](#meta-events)\n\n      In the tables below, symbols are used to indicate which relations with other entities are possible, given an event type. The choice of symbols\n      is loosely based on the checkbox/radio button convention, as explained in the following table:\n\n      | Symbol | Meaning                                                                        |\n      | -----: | ------------------------------------------------------------------------------ |\n      | ●      | Object relation required                                                       |\n      | ○      | Exactly one of the relations marked with a ○ should be present.                |\n      | ■      | At least one of the relations marked with a ■ should be present.               |\n      | □      | Optional relation. Zero or more of the relations marked with □ may be present. |\n\n      ## Event endpoints\n\n      Since events are related to at least one other entity, events can be accessed both via the related entities as well as via a dedicated `events`\n      endpoint. The following table summarizes all available ways to access events via OpenTripModel endpoints:\n\n      | #\u0026#160;events | access          | read/write | \u0026#160;                                                   |\n      | ------------- | --------------- | ---------- | -------------------------------------------------------- |\n      | list          | directly        | read       | [**GET** `/events`](#/paths/~1events/get)                |\n      | list          | directly        | write      | [use a Bundle](#tag/Bundle)                              |\n      | list          | via\u0026#160;entity | read       | **GET** `/{entity}/{uuid}/{lifecycle}/events/`           |\n      | list          | via\u0026#160;entity | write      | [use a Bundle](#tag/Bundle)                              |\n      | single        | directly        | read       | [**GET** `/events/{uuid}`](#/paths/~1events~1{uuid}/get) |\n      | single        | directly        | write      | [**PUT** `/events`](#/paths/~1events/put)                |\n      | single        | via\u0026#160;entity | read       | N/A                                                      |\n      | single        | via\u0026#160;entity | write      | **PUT** `/{entity}/{uuid}/{lifecycle}/events/`           |\n\n      ## Involved objects\n\n      Each event has a list of `involvedObjects`. Each event should have at least one other entity in the list of `involvedObjects`, since entities\n      only exist in the context of one or more other entities. (Note that events count as entities too, so it _is_ valid to have an event that only\n      has another event as involved object. An example is a `cancelEvent`, that only has the event it cancels as involved object.) Some event types\n      impose additional requirements, such as a higher minimal number of `involvedObjects` or a specific type of entity as involved object.\n\n      Note that events can be published on the endpoint of an entity, thus creating\n      an involvement implicitly. In other words, when you `PUT` e.g. a `locationUpdateEvent` on the\n      `/vehicles/0a254672-fc1d-4639-899f-15c40cbb7c3f/actual/events` endpoint, the `Vehicle` with UUID `0a254672-fc1d-4639-899f-15c40cbb7c3f` will\n      be an involved object for the `locationUpdateEvent`, even if you don't add the `Vehicle` to the `involvedObjects` array. It is advisable for OTM\n      server implementations to add this `Vehicle` to the `involvedObjects` of the `locationUpdateEvent` as soon as possible, to make sure it is\n      returned whenever the event is retreived, e.g. via the general `/events` endpoint.\n\n      ## Update events\n\n      Update events typically send an update to the state of an entity. These kind of events are only sensible in the `actual` and `realized`\n      lifecycle phases. This makes sense, because things like location or sensor updates can't be planned nor projected. Update events typically\n      involve only one entity at a time.\n\n      _Applicable lifecycle phases for update events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      | \u0026#160;  | \u0026#160;    | ○      | ○        |\n\n      ### locationUpdateEvent\n\n      Updates the location of a `Vehicle`\n\n      _Applicable entities for `locationUpdateEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | □        | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      The Location is optional because an inline location reference can be used for this event.\n\n      ### sensorUpdateEvent\n\n      Event to send an updated value of a sensor of the `Vehicle`. Can be used e.g. to monitor temperature inside a trailer.\n\n      _Applicable entities for `sensorUpdateEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | \u0026#160;  | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | ●      | \u0026#160;|\n\n      ### startEngineEvent, stopEngineEvent\n\n      The engine of a `Vehicle` is started or stopped.\n\n      _Applicable entities for `startEngineEvent` and `stopEngineEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ## Warning events\n\n      Warning events warn about violations, possible causes for delay or other things that may have impact on an operation and may need some\n      attention. Warning events can exist in all lifecycle phases, since other events might be the cause of a warning.\n\n      _Applicable lifecycle phases for warning events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      |  ○      | ○         | ○      | ○        |\n\n      ### restrictionWarningEvent\n\n      A warning event that may be sent when a restriction is violated. This event can be used for all restrictions that are not modelled as\n      OpenTripModel `Constraints`. For violations of `Constraints`, please use the `constraintViolationEvent` instead. Restriction violations you\n      can model using this event include, but are not limited to:\n\n      - traffic rule violations\n      - exceeding of load capacity\n      - routing through environmental zones\n\n      _Applicable entities for `restrictionWarningEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | ○       | ○        | ○     | ○     | ○     | ○          | ○      | ○     |\n\n      ### constraintViolationEvent\n\n      Can be generated if a constraint is violated. This event type is meant for violations of `Constraints` that are modelled as such in\n      OpenTripModel. If there is no `Constraint`, please use the `restrictionWarningEvent` instead. A `constraintViolationEvent` should\n      always have the applicable `Constraint` in the `involvedObjects` member and one or more other entities that are involved in the\n      violation.\n\n      _Applicable entities for `constraintViolationEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | \u0026#160;  | ○        | ○     | \u0026#160;| \u0026#160;| ●          | ○      | \u0026#160;|\n\n      ### trafficWarningEvent\n\n      A warning event that may be sent to warn about a traffic condition on a `Location` or a `Route`.\n\n      _Applicable entities for `trafficWarningEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ■        | \u0026#160;  | \u0026#160;   | \u0026#160;| ■     | \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n\n      ## Action events\n\n      Action events describe actions that take place in an operation. Action events can typically be used in any lifecycle phase. This makes sense,\n      since you can say an action can be planned, projected, actually happening or be realized. Action events typically involve only one entity at\n      a time.\n\n      _Applicable lifecycle phases for Action events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      |  ○      | ○         | ○      | ○        |\n\n      ### startMovingEvent, stopMovingEvent\n\n      Marks the moment a `Vehicle` starts or stops moving after or before standing still for a while.\n\n      _Applicable entities for `startMovingEvent` and `stopMovingEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ### startWaitingEvent, stopWaitingEvent\n\n      Marks the moment a `Vehicle` starts or stops waiting.\n\n      _Applicable entities for `startWaitingEvent` and `stopWaitingEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ### startLoadingAndUnloadingEvent, stopLoadingAndUnloadingEvent\n\n      Marks the start or end of a time period meant for loading and unloading.\n\n      _Applicable entities for `startLoadingAndUnloadingEvent` and `stopLoadingAndUnloadingEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ## Time window events\n\n      Time window events are used to model a time window in a `planned` or `projected` lifecycle phase. The start and end of a time window are\n      modelled as separate events. The following time window events are available:\n\n      * `pickupTimeWindowStartEvent`: Marks the start of a time window for the pickup of a `Shipment`.\n      * `pickupTimeWindowEndEvent`: Marks the end of a time window for the pickup of a `Shipment`.\n      * `deliveryTimeWindowStartEvent`: Marks the start of a time window for the delivery of a `Shipment`.\n      * `deliveryTimeWindowEndEvent`: Marks the end of a time window for the delivery of a `Shipment`.\n\n      _Applicable lifecycle phases for time window events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      |  ○      | ○         | \u0026#160; | \u0026#160;   |\n\n      _Applicable entities for `pickupTimeWindowStartEvent`, `pickupTimeWindowEndEvent`, `deliveryTimeWindowStartEvent` and\n      `deliveryTimeWindowEndEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | \u0026#160;  | ●        | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ## Associative events\n\n      Associative events are used to create or remove associations between entities. These events can take place in all lifecycle phases.\n      Associative events typically involve two events.\n\n      _Applicable lifecycle phases for associative events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      |  ○      | ○         | ○      | ○        |\n\n      ### coupleVehiclesEvent, decoupleVehiclesEvent\n\n      Marks the moment two `Vehicle`s are coupled or decoupled. Coupling of `Vehicles` can have several meanings in the real world, including, but\n      not limited to:\n\n      - coupling a trailer to a truck\n      - coupling two or more trailer/truck combinations to form a platoon\n      - coupling a trailer to a ferry\n\n      _Applicable entities for `coupleVehiclesEvent` and `decoupleVehiclesEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●  ●    | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ### assignToTripEvent, deassignFromTripEvent\n\n      Assigns or deassings a `Vehicle` to/from a `Trip`.\n\n      _Applicable entities for `assignToTripEvent` and `deassignFromTripEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | ●     | \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n\n      ### assignDriverEvent, deassignDriverEvent\n\n      (De)assigns an `Actor` as a driver to/from a `Vehicle`.\n\n      _Applicable entities for `assignDriverEvent` and `deassignDriverEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | ●       | \u0026#160;   | \u0026#160;| \u0026#160;| ●     | \u0026#160;     | \u0026#160; | \u0026#160;|\n\n      ### associateWithActorEvent, dissociateFromActorEvent\n\n      Associate an entity with an `Actor` or dissociate an already associated actor and entity. The exact meaning of the association can vary and is\n      defined by the `role` parameter of the association event. Note that OpenTripModel implementations may choose to use `Actor` associations as a\n      source of authorization information. In that case, one can e.g. only query `Shipment`s that are associated with a certain `Actor`.\n\n      _Applicable entities for `associateWithActorEvent` and `dissociateFromActorEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | ○       | ○        | ○     | ○     | ●     | ○          | ○      | ○     |\n\n      ### Shipment loading and unloading events\n\n      There are four event types for dealing with shipment loading and unloading. `loadShipmentEvent` and `unloadShipmentEvent` describe the loading\n      and unloading of `Shipment`s to or from a `Vehicle`. `receiveShipmentEvent` and `releaseShipmentEvent` describe the reception or release of a\n      `Shipment` on or from a `Location`. Typically, a `loadShipmentEvent` could be paired to a `releaseShipmentEvent`, occuring at the same time.\n      This would mean that a `Shipment` is loaded into a `Vehicle` and at the same time released by a `Location`. In the same fashion, an\n      `unloadShipmentEvent` could be paired to a `receiveShipmentEvent`. OpenTripModel does not _require_ to model both the loading/unloading and\n      reception/release. It is up to the implementation parties to decide which level of granularity in events is desired for a specific operation.\n\n      _Applicable entites for loading and unloading events:_\n\n      | event type             | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event | description\n      | ---------------------: | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: | -----------\n      | `loadShipmentEvent`    | \u0026#160;   | ●       | ●        | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;| Load a `Shipment` in a `Vehicle`\n      | `unloadShipmentEvent`  | \u0026#160;   | ●       | ●        | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;| Unload a `Shipment` from a `Vehicle`\n      | `receiveShipmentEvent` | ●        | \u0026#160;  | ●        | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;| Receive a `Shipment` on a `Location`\n      | `releaseShipmentEvent` | ●        | \u0026#160;  | ●        | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;| Release a `Shipment` from a `Location`\n\n\n      ### linkTripsEvent\n\n      Event to be used to link two `Trip`s together. This can be used e.g. if you want to model a larger `Trip` with multiple \"legs\". While\n      OpenTripModel does not have a \"leg\" object, you can model each \"leg\" as a `Trip` and then link those `Trip`s together. A `linkTripsEvent`\n      should at least link to two trip entities in the `involvedObjects` member; it is also allowed to link more than two trips together in one\n      event.\n\n      _Applicable entities for `linkTripsEvent`:_\n\n      | Location | Vehicle | Shipment | Trip       | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :--------: | :---: | :---: | :--------: | :----: | :---: |\n      | \u0026#160;   | \u0026#160;  | \u0026#160;   | ● ● □ ...  | \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | \u0026#160;|\n\n\n      ### Sensor coupling\n\n      A `Sensor` can be coupled to another entity. It is also possible to decouple `Sensor`s, to facilitate portable sensors that are temporarily\n      used. To couple and decouple sensors, use one of the following event types:\n      - `coupleSensorEvent`\n      - `decoupleSensorEvent`\n      The entity the `Sensor` is coupled to, or decoupled from, should be in the `involvedObjects` list of the event.\n\n      The meaning of a sensor coupling event might be a bit different in different lifecycle phases:\n      - In the `planned` and `projected` phases, the event should be interpreted as \"it is planned (or projected) that this sensor will be coupled\n        to this entity. This might be useful if you want to express a planning in OpenTripModel and you want to explicitely document the action\n        of placing a portable sensor in e.g. a trailer.\n      - In the `actual` lifecycle phase, the event can represent the moment a sensor is installed. But sometimes a sensor is permanently installed,\n        and you just need a way to tell the system that a certain sensor is associated with a certain vehicle or physical location. In any case, a\n        system can use the couple events in the `actual` lifecycle phase to know that update events to the sensor also apply to the associated\n        entity.\n      - In the `realized` lifecycle phase, the couple and decouple events might be important for monitoring and auditing. E.g. once you know a\n        temperature sensor is coupled to a trailer, you can use it to create an audit trail of the temperature inside the trailer during a trip.\n\n      _Applicable entities for `coupleSensorEvent` and `decoupleSensorEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | ○       | ○        | \u0026#160;| \u0026#160;| ○     | \u0026#160;     | ●      | \u0026#160;|\n\n      ## Meta events\n\n      Meta events are events about events. There are two types of meta events: `cancelEvent` and `ignoreEvent`. As a rule of thumb, a `cancelEvent`\n      is to be used for events that you created yourself and want to cancel (or replace), while an `ignoreEvent` is meant to notify that an event\n      sent by another system or actor is to be ignored. An example of the latter might be an event to ignore a `sensorUpdateEvent`, because the\n      sensor is defective.\n\n      _Applicable lifecycle phases for meta events:_\n\n      | Planned | Projected | Actual | Realized |\n      | :-----: | :-------: | :----: | :------: |\n      |  ○      | ○         | ○      | ○        |\n\n      ### cancelEvent\n\n      Cancels one or more `Event`s. Since events can only be created and not deleted nor updated, a `cancelEvent` is needed when you need to change\n      or remove an event. To be canceled events should be set as `involvedObjects`. Note that you can only cancel events in your \"own\" lifecycle\n      phase. You can't cancel a `cancelEvent`.\n\n      In order to preserve idempotence, it is not valid to reuse the UUID of an event that has been cancelled by a CancelEvent. A new event that\n      replaces a cancelled Event should always get a new UUID.\n\n      _Applicable entities for `cancelEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event     |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :-------: |\n      | \u0026#160;   | \u0026#160;  | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | ● □ ...   |\n\n      ### cancelAllEntityEvents\n\n      This event can be used to cancel events that have been associated with a given entity. _All_ applicable events that were\n      generated before the time given in the `cancelAllEntityEvents` are cancelled.\n      This might be needed e.g. in cases where a `Trip` with lots of `planned` events is published and the planning is changed.\n      In such a case, it can be more efficient to just cancel all events and start over. You can only cancel events that are in the\n      same lifecycle phase as the `cancelAllEntityEvents` you are sending. If there are any `cancelAllEntityEvents` for the given entity, those will\n      not be cancelled.\n\n      #### How to determine which events get cancelled:\n\n      In order to preserve idempotence without making it impossible to insert new events for the given entity, this event follows\n      a specific rule about timing.\n\n      This rule is based on the different event timing orders as explained in the main OpenTripModel documentation:\n      [Ordering of events](https://www.opentripmodel.org/v4.2.0/docs/ordering-of-events).\n\n      The main rule is:\n      \u003e **A `cancelAllEntityEvents` event cancels every associated event of the given entity with an `eventGenerationTime` earlier than\n        the `time` given in the `cancelAllEntityEvents` body.**\n\n      As an example, take the two events given in the [Ordering of events](https://www.opentripmodel.org/v4.2.0/docs/ordering-of-events) page:\n      * A `planned` `stopMovingEvent` with `time` = _2018-09-05T12:00Z_ and `eventGenerationTime` = _2018-08-30T10:15Z_\n      * A `planned` `startMovingEvent` with `time` = _2018-09-05T13:00Z_ and `eventGenerationTime` = _2018-08-30T09:15Z_\n\n      Both events have the same vehicle as an `involvedObject`.\n\n      * A user inserts a `cancelAllEntityEvents` for this vehicle. This event is inserted in the `planned` lifeCycle because cancel Events\n        can only cancel events in their own lifeCycle. It is given `time` = _2018-08-30T09:45Z_ and `eventGenerationTime` = _2018-08-30T11:48Z_\n\n      This `eventGenerationTime` is the time the `cancelAllEntityEvents` object was generated and is not relevant beyond that.\n\n      \u003cimg src=\"/images/cancel-all-entity-events-timing.svg\" width=\"800\" style=\"border:0px;\"/\u003e\n\n      In this example, the 'cutoff point' for the `cancelAllEntityEvents` is _2018-08-30T09:45Z_. All events associated with the vehicle with an\n      `eventGenerationTime` earlier than that are cancelled. Events with an `eventGenerationTime` after the cutoff point are not cancelled, so the\n      `stopMovingEvent` stays active.\n\n      A few edge cases have been identified:\n      * Events with an `eventGenerationTime` exactly _equal_ to the `time` of the `cancelAllEntityEvents` are _not_ cancelled. This makes it more\n        straightforward to use a `cancelAllEntityEvents` as part of a larger update containing new events that should not be cancelled.\n      * A `cancelAllEntityEvents` with a `time` after its own `eventGenerationTime` is invalid and should not be used.\n      * Events without an explicit `eventGenerationTime` cannot be cancelled by a `cancelAllEntityEvents`. Make sure to use the `eventGenerationTime`\n        on all events if you want to make use of the `cancelAllEntityEvents`. Note that if the sender does not set the eventGenerationTime on an event,\n        the recipient may set this field to the time of reception of the event.\n\n      _Applicable entities for `cancelAllEntityEvents`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | ○       | ○        | ○     | ○     | ○     | ○          | ○      | \u0026#160;|\n\n      ### cancelGroupedEvents\n\n      This event can be used to cancel all events that share the same `groupingId`. The grouping IDs to be cancelled must be set in the\n      `cancelledGroupingIds` variable, which can contain an array of grouping IDs. _All_ applicable events that were\n      generated before the time given in the `cancelGroupedEvents` are cancelled.\n\n      For the `cancelGroupedEvents`, the timing rule works exactly the same as for the `cancelAllEntityEvents`.\n\n      _Applicable entities for `cancelGroupedEvents`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :---: |\n      | ○        | ○       | ○        | ○     | ○     | ○     | ○          | ○      | \u0026#160;|\n\n      ### ignoreEvent\n\n      Ignore one or more `Event`. To be ignored event(s) should be set as `involvedObject(s)`. Only use `ignoreEvents` to mark events from other\n      systems or actors to be ignored if there is no other way to prevent the events from being sent at all.\n\n      _Applicable entities for `ignoreEvent`:_\n\n      | Location | Vehicle | Shipment | Trip  | Route | Actor | Constraint | Sensor | Event     |\n      | :------: | :-----: | :------: | :---: | :---: | :---: | :--------: | :----: | :-------: |\n      | \u0026#160;   | \u0026#160;  | \u0026#160;   | \u0026#160;| \u0026#160;| \u0026#160;| \u0026#160;     | \u0026#160; | ● □ ...   |\n  - name: Trip\n    description: |\n      A `Trip` represents a series of events, which optionally may be linked to a route.\n  - name: Route\n    description: |\n      A `Route` describes how to move through space in between two locations.\n  - name: Vehicle\n    description: |\n      A `Vehicle` is any entity which can move through space in between locations. It can be for instance a truck, a trailer, an airplane, a drone, or\n      even something which has not been invennted yet.\n  - name: Sensor\n    description: |\n      A `Sensor` is an entity which can measure quantities, typically with a certain frequency. Examples are temperature sensors, weight sensors, etc.\n      `Sensor` entities can be coupled to other entities. E.g. to measure the temperature inside a trailer, one could couple a `Sensor` entity\n      representing a temperature sensor to a `Vehicle` entity representing a trailer.\n  - name: Shipment\n    description: |\n      A `Shipment` is one (or more) item(s) being transported between locations.\n  - name: Actor\n    description: |\n      An `Actor` represents organisations or persons that participate in a logistic process in OpenTripModel.\n  - name: Constraint\n    description: |\n      A `Constraint` can be used to model `Locations` with limited access or `Trips` or `Shipments` with conditions that have to stay within a given\n      range.\n  - name: Bundle\n    description: |\n      A `Bundle` creates multiple entities and events in one request.\nx-tagGroups:\n  - name: Operations per entity\n    tags:\n      - Location\n      - Trip\n      - Route\n      - Vehicle\n      - Shipment\n      - Actor\n      - Constraint\n      - Sensor\n  - name: Event-related operations\n    tags:\n      - Event\n  - name: Bundle operations\n    tags:\n      - Bundle\n\npaths:\n  /locations:\n    get:\n      summary: Get a list of Locations\n      description: Get a list of `Locations`, optionally filtered by query parameters.\n      tags:\n        - Location\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/roleQueryParam'\n      responses:\n        '200':\n          description: |\n            A list of all defined `Locations`, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/location'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/location'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Location\n      description: |\n        Create a `Location` object with the given data.\n      tags:\n        - Location\n      responses:\n        '201':\n          description: |\n            The `Location` object as created. The returned object will contain the UUID that can be used to refer to this object in future calls.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/location'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/location'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/location'\n  '/locations/{uuid}':\n    get:\n      summary: Get a specific Location by its UUID\n      description: Retrieves a single `Location` object by its unique identifier (UUID)\n      tags:\n        - Location\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Location` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/location'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/location'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Location\n      description: |\n        Update a `Location` object with the given data. Note that the UUID-part of the `id` in the entity in the body of the `POST`-request should\n        equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Location\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The `Location` object with updated values.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/location'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/location'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/location'\n  '/locations/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for this Location\n      description: Retrieves a list of `Events` for the `Location` with the given UUID\n      tags:\n        - Location\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Location`.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event for the given Location\n      description: Publish a new `Event` for the given `Location`\n      tags:\n        - Location\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event`. The returned object will contain the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /trips:\n    get:\n      summary: Get a list of Trips\n      description: |\n        Retrieves a list of all `Trips`, optionally filtered by query parameters.\n      tags:\n        - Trip\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n      responses:\n        '200':\n          description: 'A list of trips, optionally filtered by query parameters.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/trip'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/trip'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Trip\n      description: Create a `Trip` object with the given data.\n      tags:\n        - Trip\n      responses:\n        '201':\n          description: |\n            The `Trip` object as created. The returned object will contain the UUID that can be used to refer to this object in future calls.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trip'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/trip'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/trip'\n  '/trips/{uuid}':\n    get:\n      summary: Get a specific Trip by its UUID\n      description: Retrieves a `Trip` object by its unique identifier (UUID)\n      tags:\n        - Trip\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Trip` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trip'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/trip'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update Trip\n      description: |\n        Update a `Trip` object with the given data. Note that the UUID-part of the `id` in the entity in the body of the `POST`-request should\n        equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Trip\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated trip object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trip'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/trip'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/trip'\n  '/trips/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get Events for this Trip\n      description: Retrieves a list of `Events` for the trip with the given UUID.\n      tags:\n        - Trip\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of Events for the given trip\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event for the given trip\n      description: |\n        Publish a new `Event` for the given trip. Note that a planned `Trip` may consist of a lot of `Events`. Therefore it is possible to create a\n        `Trip` with its events at once via a `PUT` to the `trips` endpoint.\n      tags:\n        - Trip\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event`. The returned object will contain the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /routes:\n    get:\n      summary: Get a list of Routes\n      description: |\n        Retrieves a list of all `Routes`, optionally filtered by query parameters.\n      tags:\n        - Route\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n      responses:\n        '200':\n          description: |\n            A list of `Routes`, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/route'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/route'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Route\n      description: Create a new `Route` object\n      tags:\n        - Route\n      responses:\n        '201':\n          description: |\n            The created `Route` object. Containes the generated UUID that can be used to refer to this `Route` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/route'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/route'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/route'\n  '/routes/{uuid}':\n    get:\n      summary: Get a specific Route by its UUID\n      description: Retrieves a `Route` object by its unique identifier (UUID)\n      tags:\n        - Route\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Route` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/route'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/route'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Route\n      description: |\n        Updates a `Route` object with the posted data. Note that the UUID-part of the `id` in the entity in the body of the `POST`-request should\n        equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Route\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated `Route` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/route'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/route'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/route'\n  '/routes/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get Events on a Route\n      description: |\n        Retrieves a list of `Events` on the `Route`, identified by its UUID. The behaviour of this call is slightly different, depending on the\n        `lifecycle` phase:\n\n        - \"planned\" and \"projected\": The `endDateTime` query parameter is mandatory. The `startDateTime` query parameter is optional; if it is\n          ommitted, the default value is _now_. The returned list is a list of planned or projected `Events` on the `Route` in the given time window,\n          that are known at the time of the request.\n        - \"actual\": Both the `endDateTime` and `startDateTime` query parameters are mandatory. The returned list contains actual `Events` on the given\n          `Route`, within the given time window.\n        - \"realized\": The `startDateTime` query parameter is mandatory. The `endDateTime` query parameter is optional; when ommitted, the default\n          value is \"now\". The returned list is a list of actual `Events` that took place on the given `Route` in the given time window.\n      tags:\n        - Route\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: |\n            A list of `Events` for the given `Trip`, optionally filtered according to the request parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event on a Route\n      description: Publish a new `Event` for the given `Route`.\n      tags:\n        - Route\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event`. The returned object will contain the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /vehicles:\n    get:\n      summary: Get a list of Vehicles\n      description: |\n        Retrieves a list of `Vehicle` objects, optionally filtered by query parameters.\n      tags:\n        - Vehicle\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/roleQueryParam'\n      responses:\n        '200':\n          description: |\n            A list of `Vehicles`, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/vehicle'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/vehicle'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Vehicle\n      description: Create a new `Vehicle` object\n      tags:\n        - Vehicle\n      responses:\n        '201':\n          description: |\n            The created `Vehicle` object. Containes the generated UUID that can be used to refer to this `Vehicle` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n              examples:\n                response:\n                  value:\n                    id: |\n                      https://opentripmodel.org/vehicles/5b156b91-8e61-45aa-b5e7-d6d560870c29\n                    name: My first trailer\n                    type:\n                      type: trailer\n                    maxLinks: 1\n                    externalIds:\n                      - schema: 'https://opentripmodel.org/types/licensePlate/nl'\n                        value: AB-12-YZ\n                    fuelType:\n                      type: not-applicable\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/vehicle'\n  '/vehicles/{uuid}':\n    get:\n      summary: Get a Vehicle by its UUID\n      description: Retrieves a specific `Vehicle` object by its unique identifier (UUID)\n      tags:\n        - Vehicle\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Vehicle` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Vehicle\n      description: |\n        Updates the `Vehicle` identified by the UUID with the POSTed data. Note that the UUID-part of the `id` in the entity in the body of the\n        `POST`-request should equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Vehicle\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated vehicle object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/vehicle'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/vehicle'\n  '/vehicles/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for a Vehicle\n      description: Retrieves a list of `Events` for the `Vehicle` with the given UUID\n      tags:\n        - Vehicle\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Vehicle`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish an Event for a Vehicle\n      description: Publish a new `Event` for the given `Vehicle`.\n      tags:\n        - Vehicle\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event` object. Containes the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /sensors:\n    get:\n      summary: Get a list of Sensors\n      description: |\n        Retrieves a list of `Sensor` objects, optionally filtered by query parameters.\n      tags:\n        - Sensor\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/roleQueryParam'\n      responses:\n        '200':\n          description: |\n            A list of `Sensor`s, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/sensor'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/sensor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Sensor\n      description: Create a new `Sensor` object\n      tags:\n        - Sensor\n      responses:\n        '201':\n          description: |\n            The created `Sensor` object. Containes the generated UUID that can be used to refer to this `Sensor` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sensor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/sensor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/sensor'\n  '/sensors/{uuid}':\n    get:\n      summary: Get a Sensor by its UUID\n      description: Retrieves a specific `Sensor` object by its unique identifier (UUID)\n      tags:\n        - Sensor\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Sensor` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sensor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/sensor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Sensor\n      description: |\n        Updates the `Sensor` identified by the UUID with the POSTed data. Note that the UUID-part of the `id` in the entity in the body of the\n        `POST`-request should equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Sensor\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated Sensor object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sensor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/sensor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/sensor'\n  '/sensors/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for a Sensor\n      description: Retrieves a list of `Events` for the `Sensor` with the given UUID\n      tags:\n        - Sensor\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Sensor`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish an Event for a Sensor\n      description: Publish a new `Event` for the given `Sensor`.\n      tags:\n        - Sensor\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: \u003e-\n            The created `Event` object. Containes the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /shipments:\n    get:\n      summary: Get a list of Shipments\n      description: |\n        Retrieves a list of `Shipment` objects, optionally filtered by query parameters.\n      tags:\n        - Shipment\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n        - $ref: '#/components/parameters/actorQueryParam'\n        - $ref: '#/components/parameters/roleQueryParam'\n      responses:\n        '200':\n          description: 'A list of `Shipments`, optionally filtered by query parameters.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/shipment'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/shipment'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Shipment\n      description: Create a new `Shipment` object\n      tags:\n        - Shipment\n      responses:\n        '201':\n          description: |\n            The created `Shipment` object. Containes the generated UUID that can be used to refer to this `Shipment` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/shipment'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/shipment'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/shipment'\n  '/shipments/{uuid}':\n    get:\n      summary: Get Shipment by UUID\n      description: Retrieves a `Shipment` object by its unique identifier (UUID)\n      tags:\n        - Shipment\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Shipment` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/shipment'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/shipment'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Shipment\n      description: |\n        Updates the `Shipment` identified by the UUID with the POSTed data. Note that the UUID-part of the `id` in the entity in the body of the\n        `POST`-request should equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Shipment\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated `Shipment` object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/shipment'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/shipment'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/shipment'\n  '/shipments/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for a Shipment\n      description: Retrieves a list of `Events` for the `Shipment` with the given UUID\n      tags:\n        - Shipment\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Shipment`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event on a Shipment\n      description: Publish a new `Event` for the given `Shipment`\n      tags:\n        - Shipment\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event` object. Containes the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /actors:\n    get:\n      summary: Get a list of Actors\n      description: |\n        Retrieves all known `Actors`, optionally filtered by query parameters.\n      tags:\n        - Actor\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n      responses:\n        '200':\n          description: |\n            A list of `Actors`, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/actor'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/actor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Actor\n      description: Create a new `Actor` object\n      tags:\n        - Actor\n      responses:\n        '201':\n          description: |\n            The created `Actor` object. Contains the generated UUID that can be used to refer to this `Actor` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/actor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/actor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/actor'\n  '/actors/{uuid}':\n    get:\n      summary: Get a specific Actor by its UUID\n      description: Retrieves a `Actor` object by its unique identifier (UUID)\n      tags:\n        - Actor\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: An `Actor` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/actor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/actor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update an Actor\n      description: |\n        Updates the `Actor` identified by the UUID with the POSTed data. Note that the UUID-part of the `id` in the entity in the body of the\n        `POST`-request should equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Actor\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated `Actor` object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/actor'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/actor'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/actor'\n  '/actors/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for this Actor\n      description: Retrieves a list of `Events` for the `Actor` with the given UUID\n      tags:\n        - Actor\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Actor`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event for the given Actor\n      description: Publish a new `Event` for the `Actor` with the given UUID\n      tags:\n        - Actor\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event` object. Containes the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /constraints:\n    get:\n      summary: Get a list of Constraints\n      description: |\n        Retrieves all known `Constraints`, optionally filtered by query parameters.\n      tags:\n        - Constraint\n      parameters:\n        - $ref: '#/components/parameters/nameParam'\n        - $ref: '#/components/parameters/externalIdSchemaParam'\n        - $ref: '#/components/parameters/externalIdValueParam'\n      responses:\n        '200':\n          description: A list of `Constraints`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/constraint'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/constraint'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Constraint\n      description: |\n        Create a new pre-defined `Constraint` object, that can be referenced to in objects that have a `constraint` member.\n      tags:\n        - Constraint\n      responses:\n        '201':\n          description: |\n            The created `Constraint` object. Contains the generated UUID that can be used to refer to this `Constraint` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/constraint'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/constraint'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/constraint'\n  '/constraints/{uuid}':\n    get:\n      summary: Get a Constraint by its UUID\n      description: Retrieves a specific `Constraint` object by its unique identifier (UUID)\n      tags:\n        - Constraint\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: A `Constraint` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/constraint'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/constraint'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    post:\n      summary: Update a Constraint\n      description: |\n        Updates the `Constraint` identified by the UUID with the POSTed data. Note that the UUID-part of the `id` in the entity in the body of the\n        `POST`-request should equal the ID part of the endpoint where the entity is posted to, otherwise a `400` (Bad request) error will be returned.\n      tags:\n        - Constraint\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: The updated `Constraint` object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/constraint'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/constraint'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/constraint'\n  '/constraints/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events for a Constraint\n      description: Retrieves a list of `Events` for the `Constraint` with the given UUID\n      tags:\n        - Constraint\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` for the given `Constraint`\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event on a Constraint\n      description: Publish a new `Event` for the `Constraint` with the given UUID\n      tags:\n        - Constraint\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event` object. Containes the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /events:\n    get:\n      summary: Get a list of Events\n      description: |\n        Get a list of `Events`, optionally filtered by query parameters\n      tags:\n        - Event\n      parameters:\n        - $ref: '#/components/parameters/lifecycleQueryParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: |\n            A list of all defined `Events`, optionally filtered by query parameters.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Create a new Event\n      description: |\n        Create an `Event` object with the given data.\n      tags:\n        - Event\n      responses:\n        '201':\n          description: |\n            The `Event` object as created. The returned object will contain the generated UUID that can be used to refer to this `Event` in later\n            requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  '/events/{uuid}':\n    get:\n      summary: Get a specific Event by its UUID\n      description: Retrieves a single `Event` object by its unique identifier (UUID)\n      tags:\n        - Event\n      parameters:\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '200':\n          description: An `Event` object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n  '/events/{uuid}/{lifecycle}/events':\n    get:\n      summary: Get a list of Events related to this Event\n      description: Retrieves a list of `Events` related to the `Event` with the given UUID\n      tags:\n        - Event\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n        - $ref: '#/components/parameters/startDateTimeParam'\n        - $ref: '#/components/parameters/endDateTimeParam'\n        - $ref: '#/components/parameters/eventTypeParam'\n        - $ref: '#/components/parameters/groupingIdParam'\n        - $ref: '#/components/parameters/involvedObjectParam'\n      responses:\n        '200':\n          description: A list of `Events` related to the given `Event`.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n    put:\n      summary: Publish a new Event related to the given Event\n      description: Publish a new `Event` related to the given `Event`\n      tags:\n        - Event\n      parameters:\n        - $ref: '#/components/parameters/lifecycle'\n        - $ref: '#/components/parameters/uuidParam'\n      responses:\n        '201':\n          description: |\n            The created `Event`. The returned object will contain the generated UUID that can be used to refer to this `Event` in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/event'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        $ref: '#/components/requestBodies/event'\n  /bundles:\n    put:\n      summary: Create or update multiple entities\n      description: |\n        By putting a bundle on the server, a client can create or update multiple entities in one call. This can bring down the number of calls,\n        thus reducing network traffic. It also ensures all entities in the bundle are validated at the same time and no entities are created or\n        updated if there is an error in the bundle. This can be seen as a simple form of transaction. Bundles are not saved as an entity of their own.\n        This means there's no `GET` call on the bundle endpoint.\n      tags:\n        - Bundle\n      responses:\n        '201':\n          description: |\n            The original `Bundle`, with added generated UUIDs that can be used to refer to the generated Entities in later requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bundle'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/bundle'\n        '400':\n          $ref: '#/components/responses/badRequest'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '403':\n          $ref: '#/components/responses/forbidden'\n        '404':\n          $ref: '#/components/responses/notFound'\n        '409':\n          $ref: '#/components/responses/conflict'\n        '500':\n          $ref: '#/components/responses/internalServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/bundle'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/bundle'\n        description: JSON object describing a `Bundle`.\n        required: true\n\ncomponents:\n  parameters:\n    lifecycle:\n      name: lifecycle\n      in: path\n      required: true\n      description: The lifecycle phase the request applies to\n      schema:\n        type: string\n        enum:\n          - planned\n          - projected\n          - actual\n          - realized\n    lifecycleQueryParam:\n      name: lifecycle\n      in: query\n      required: false\n      description: Parameter to filter events by lifecycle phase.\n      schema:\n        type: string\n        enum:\n          - planned\n          - projected\n          - actual\n          - realized\n    uuidParam:\n      name: uuid\n      in: path\n      required: true\n      description: A uuid, identifying some pre-defined entity.\n      schema:\n        type: string\n    nameParam:\n      name: name\n      in: query\n      required: false\n      description: A name or a part of a name, to search entities by their name.\n      schema:\n        type: string\n    externalIdSchemaParam:\n      name: externalIdSchema\n      in: query\n      required: false\n      description: |\n        The schema of external ID, to search for entities by their external IDs. This would return all entities that have an external ID reference\n        with the given schema. This could still be a lot of entities. Combine with the `externalIdValue` query parameter to limit the number of\n        results further.\n      schema:\n        type: string\n    externalIdValueParam:\n      name: externalIdValue\n      in: query\n      required: false\n      description: |\n        An external ID value, or a part of it, to search for entities by their external IDs. This parameter should be combined with the\n        `externalIdSchema` parameter.\n      schema:\n        type: string\n    involvedObjectParam:\n      name: involvedObject\n      in: query\n      required: false\n      description: |\n        Query parameter to filter events by involved object. With this query parameter, you can filter a list of `Events` to only contain `Events`\n        that have a certain entity in their list of `involvedObjects`. You can filter for multiple, different involved objects by chaining the\n        parameter, as follows: `involvedObject=385afbeb-4fba-48f3-91da-b5547e8f3365\u0026involvedObject=e49064e9-abe4-404b-9d72-3093380db937`. In that\n        case, a logical `OR` will be applied, meaning that all events are returned that have any of the listed involved objects.\n\n        \u003e **NOTE**: The value used in this query parameter is the \"bare\" UUID, not the URI of an object.\n      schema:\n        type: string\n        format: uuid\n    startDateTimeParam:\n      name: startDateTime\n      in: query\n      description: |\n        The start date and time to query for. Only events on or after the `start-date-time` will be returned. All date-time values in OpenTripModel\n        are UTC times, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) notation: `YYYY-MM-DDThh:mm:ss.sssZ`. See the\n        [Time values](/#section/Technical-notes/Time-values) section for details.\n      schema:\n        type: string\n        format: date-time\n    endDateTimeParam:\n      name: endDateTime\n      in: query\n      description: |\n        The end date and time to query for. Only events before or on the `end-date-time` will be returned. All date-time values in OpenTripModel\n        are UTC times, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) notation: `YYYY-MM-DDThh:mm:ss.sssZ`. See the\n        [Time values](/#section/Technical-notes/Time-values) section for details.\n      schema:\n        type: string\n        format: date-time\n    eventTypeParam:\n      name: eventType\n      in: query\n      description: |\n        Filter events by event type. The resulting list will only have events of the given type. Multiple `eventType` parameters can be combined to\n        get a list of multiple event types, like this: `eventType=loadShipmentEvent\u0026eventType=unloadShipmentEvent`. In that case a logical `OR` will\n        be used, meaning all events with any of the given `eventTypes` will be returned.\n      required: false\n      schema:\n        type: string\n    groupingIdParam:\n      name: groupingId\n      in: query\n      description: |\n        `groupingId` to filter by. Should you want to filter on multiple `groupingId`s, you can repeat this parameter multiple times, like this:\n        `groupingId=a\u0026groupingId=b`. In that case a logical `OR` will be used, meaning all events with any of the given `groupingId`s will be\n        returned.\n      required: false\n      schema:\n        type: string\n    actorQueryParam:\n      name: actor\n      in: query\n      description: |\n        Filter the query by Actor. Only objects that are associated to the `Actor` identified by the given UUID will be shown.\n      required: false\n      schema:\n        type: string\n        format: uuid\n    roleQueryParam:\n      name: role\n      in: query\n      description: |\n        Filter the query by role and Actor. Only objects that are associated to the `Actor` identified by the given UUID and are associated by the\n        given role will be shown. This parameter is only valid in combination with the `actor` parameter.\n      required: false\n      schema:\n        type: string\n  responses:\n    badRequest:\n      description: |\n        The request was invalid or cannot be otherwise served. Possible causes are:\n          - invalid JSON objects;\n          - missing required parameters;\n          - when `POST`-ing an updated entity, the UUID-part of the `id` of the `POST` body is not equal to the UUID-part of the endpoint the body\n            is posted to.\n          - when `PUT`-ing an event, the `lifecyclePhase` field of that event does not correspond to the endpoint you are `PUT`-ing it to.\n\n        An accompanying error message will explain further.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: The body of the request could not be parsed.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: The body of the request could not be parsed.\n    unauthorized:\n      description: Authentication credentials were missing or incorrect.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: Authentication credentials were missing or incorrect.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: Authentication credentials were missing or incorrect.\n    forbidden:\n      description: |\n        The request is understood, but it has been refused or access is not allowed. An accompanying error message will explain why.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: Access to this resource is not allowed.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: Access to this resource is not allowed.\n    notFound:\n      description: |-\n        The URI requested is invalid or the resource requested does not exists. Also returned when the requested format is not supported by the\n        requested method.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: The requested resource was not found.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: The requested resource was not found.\n    conflict:\n      description: |\n        System was not able to create an object as requested, because an object with the same properties already exists.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: An object with the same properties already exists.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: An object with the same properties already exists.\n    internalServerError:\n      description: |\n        An unexpected server error has occured, which needs further investigation. Please contact support.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: error message\n            example: An unexpected error occured while processing the request.\n        application/xml:\n          schema:\n            type: string\n            description: error message\n            example: An unexpected error occured while processing the request.\n  requestBodies:\n    route:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/route'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/route'\n      description: JSON object describing a `Route`.\n      required: true\n    shipment:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/shipment'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/shipment'\n      description: JSON object describing a `Shipment`.\n      required: true\n    event:\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/locationUpdateEvent'\n              - $ref: '#/components/schemas/sensorUpdateEvent'\n              - $ref: '#/components/schemas/startEngineEvent'\n              - $ref: '#/components/schemas/stopEngineEvent'\n              - $ref: '#/components/schemas/restrictionWarningEvent'\n              - $ref: '#/components/schemas/constraintViolationEvent'\n              - $ref: '#/components/schemas/trafficWarningEvent'\n              - $ref: '#/components/schemas/startMovingEvent'\n              - $ref: '#/components/schemas/stopMovingEvent'\n              - $ref: '#/components/schemas/startWaitingEvent'\n              - $ref: '#/components/schemas/stopWaitingEvent'\n              - $ref: '#/components/schemas/startLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/stopLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowStartEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowEndEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowStartEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowEndEvent'\n              - $ref: '#/components/schemas/coupleVehiclesEvent'\n              - $ref: '#/components/schemas/decoupleVehiclesEvent'\n              - $ref: '#/components/schemas/assignToTripEvent'\n              - $ref: '#/components/schemas/deassignFromTripEvent'\n              - $ref: '#/components/schemas/assignDriverEvent'\n              - $ref: '#/components/schemas/deassignDriverEvent'\n              - $ref: '#/components/schemas/associateWithActorEvent'\n              - $ref: '#/components/schemas/dissociateFromActorEvent'\n              - $ref: '#/components/schemas/loadShipmentEvent'\n              - $ref: '#/components/schemas/unloadShipmentEvent'\n              - $ref: '#/components/schemas/receiveShipmentEvent'\n              - $ref: '#/components/schemas/releaseShipmentEvent'\n              - $ref: '#/components/schemas/linkTripsEvent'\n              - $ref: '#/components/schemas/coupleSensorEvent'\n              - $ref: '#/components/schemas/decoupleSensorEvent'\n              - $ref: '#/components/schemas/cancelEvent'\n              - $ref: '#/components/schemas/cancelAllEntityEvents'\n              - $ref: '#/components/schemas/cancelGroupedEvents'\n              - $ref: '#/components/schemas/ignoreEvent'\n            discriminator:\n              propertyName: type\n              mapping:\n                sensorUpdateEvent: '#/components/schemas/locationUpdateEvent'\n                startEngineEvent: '#/components/schemas/sensorUpdateEvent'\n                stopEngineEvent: '#/components/schemas/startEngineEvent'\n                restrictionWarningEvent: '#/components/schemas/stopEngineEvent'\n                constraintViolationEvent: '#/components/schemas/restrictionWarningEvent'\n                trafficWarningEvent: '#/components/schemas/constraintViolationEvent'\n                startMovingEvent: '#/components/schemas/trafficWarningEvent'\n                stopMovingEvent: '#/components/schemas/startMovingEvent'\n                startWaitingEvent: '#/components/schemas/stopMovingEvent'\n                stopWaitingEvent: '#/components/schemas/startWaitingEvent'\n                startLoadingAndUnloadingEvent: '#/components/schemas/stopWaitingEvent'\n                stopLoadingAndUnloadingEvent: '#/components/schemas/startLoadingAndUnloadingEvent'\n                pickupTimeWindowStartEvent: '#/components/schemas/stopLoadingAndUnloadingEvent'\n                pickupTimeWindowEndEvent: '#/components/schemas/pickupTimeWindowStartEvent'\n                deliveryTimeWindowStartEvent: '#/components/schemas/pickupTimeWindowEndEvent'\n                deliveryTimeWindowEndEvent: '#/components/schemas/deliveryTimeWindowStartEvent'\n                coupleVehiclesEvent: '#/components/schemas/deliveryTimeWindowEndEvent'\n                decoupleVehiclesEvent: '#/components/schemas/coupleVehiclesEvent'\n                assignToTripEvent: '#/components/schemas/decoupleVehiclesEvent'\n                deassignFromTripEvent: '#/components/schemas/assignToTripEvent'\n                assignDriverEvent: '#/components/schemas/deassignFromTripEvent'\n                deassignDriverEvent: '#/components/schemas/assignDriverEvent'\n                associateWithActorEvent: '#/components/schemas/deassignDriverEvent'\n                dissociateFromActorEvent: '#/components/schemas/associateWithActorEvent'\n                loadShipmentEvent: '#/components/schemas/dissociateFromActorEvent'\n                unloadShipmentEvent: '#/components/schemas/loadShipmentEvent'\n                receiveShipmentEvent: '#/components/schemas/unloadShipmentEvent'\n                releaseShipmentEvent: '#/components/schemas/receiveShipmentEvent'\n                linkTripsEvent: '#/components/schemas/releaseShipmentEvent'\n                coupleSensorEvent: '#/components/schemas/linkTripsEvent'\n                decoupleSensorEvent: '#/components/schemas/coupleSensorEvent'\n                cancelEvent: '#/components/schemas/decoupleSensorEvent'\n                cancelAllEntityEvents: '#/components/schemas/cancelEvent'\n                cancelGroupedEvents: '#/components/schemas/cancelAllEntityEvents'\n                ignoreEvent: '#/components/schemas/cancelGroupedEvents'\n        application/xml:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/locationUpdateEvent'\n              - $ref: '#/components/schemas/sensorUpdateEvent'\n              - $ref: '#/components/schemas/startEngineEvent'\n              - $ref: '#/components/schemas/stopEngineEvent'\n              - $ref: '#/components/schemas/restrictionWarningEvent'\n              - $ref: '#/components/schemas/constraintViolationEvent'\n              - $ref: '#/components/schemas/trafficWarningEvent'\n              - $ref: '#/components/schemas/startMovingEvent'\n              - $ref: '#/components/schemas/stopMovingEvent'\n              - $ref: '#/components/schemas/startWaitingEvent'\n              - $ref: '#/components/schemas/stopWaitingEvent'\n              - $ref: '#/components/schemas/startLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/stopLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowStartEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowEndEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowStartEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowEndEvent'\n              - $ref: '#/components/schemas/coupleVehiclesEvent'\n              - $ref: '#/components/schemas/decoupleVehiclesEvent'\n              - $ref: '#/components/schemas/assignToTripEvent'\n              - $ref: '#/components/schemas/deassignFromTripEvent'\n              - $ref: '#/components/schemas/assignDriverEvent'\n              - $ref: '#/components/schemas/deassignDriverEvent'\n              - $ref: '#/components/schemas/associateWithActorEvent'\n              - $ref: '#/components/schemas/dissociateFromActorEvent'\n              - $ref: '#/components/schemas/loadShipmentEvent'\n              - $ref: '#/components/schemas/unloadShipmentEvent'\n              - $ref: '#/components/schemas/receiveShipmentEvent'\n              - $ref: '#/components/schemas/releaseShipmentEvent'\n              - $ref: '#/components/schemas/linkTripsEvent'\n              - $ref: '#/components/schemas/coupleSensorEvent'\n              - $ref: '#/components/schemas/decoupleSensorEvent'\n              - $ref: '#/components/schemas/cancelEvent'\n              - $ref: '#/components/schemas/cancelAllEntityEvents'\n              - $ref: '#/components/schemas/cancelGroupedEvents'\n              - $ref: '#/components/schemas/ignoreEvent'\n            discriminator:\n              propertyName: type\n      description: JSON object describing an `Event`\n      required: true\n    sensor:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/sensor'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/sensor'\n      description: JSON object describing a `Sensor`.\n      required: true\n    location:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/location'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/location'\n      description: |\n        JSON object describing a `Location`.\n\n        \u003e **Please note:** The `geoReference` variable is the one and only part of the `Location` entity that exactly describes the geographic\n          location. The `administrativeReference` member is just what is says: an administrative reference. An administrative reference is typically\n          a street address. It _might_ be the street address corresponding to the location that is defined by the `geoReference`, but that's not\n          required. A common case is a shop where the `administrativeReference` is the street address of the main entrance, while the `geoLocation`\n          is the location of the loading bay, which is typically on the back side and so in another street.\n\n        \u003e **Please note:** In some cases, a street address is the most accurate known location. In such a case, you should set the address in the\n          `geoReference` as `addressGeoReference` type.\n      required: true\n    trip:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/trip'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/trip'\n      description: JSON object describing a `Trip`\n      required: true\n    vehicle:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/vehicle'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/vehicle'\n      description: JSON object describing a `Vehicle`.\n      required: true\n    actor:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/actor'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/actor'\n      description: JSON object describing an `Actor`.\n      required: true\n    constraint:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/constraint'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/constraint'\n      description: JSON object describing a `Constraint`.\n      required: true\n\n  schemas:\n\n    actor:\n      type: object\n      description: |\n        An `Actor` models a legal entity. A legal entity is an individual, company, or organization that has legal rights and obligations. The use of\n        `Actors` is optional, and is not necessary to use OpenTripModel. Actors can be used e.g. to group all locations that belong to an organisation,\n        or to address an OpenTripModel message to a specific person or organisation.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies this `Actor`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: |\n            https://api.opentripmodel.org/api/public/v4/actors/45db6ed0-28a7-4e4a-baba-3d5f8d171103\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the actor may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        name:\n          type: string\n          description: Name of the `Actor`. For display purposes and search only.\n          example: 'My awesome company, Ltd.'\n        contactDetails:\n          description: Contact details for this `Actor`.\n          type: array\n          items:\n            $ref: '#/components/schemas/contactDetail'\n\n    location:\n      type: object\n      description: |\n        Object describing a geographic location. A location can either be a point or an area.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies this location. A URI can be assigned by the client or will be generated by the server if the client doesn't provide\n            it. Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: https://api.opentripmodel.org/api/public/v4/locations/11c11d75-e114-4b5f-9751-b3a4afa23ecf\n        name:\n          type: string\n          description: Name of the `Location`. For display purposes and search only.\n          example: Main warehouse\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the location may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        type:\n          $ref: '#/components/schemas/locationType'\n        geoReference:\n          oneOf:\n          - $ref: '#/components/schemas/addressGeoReference'\n          - $ref: '#/components/schemas/openLRGeoReference'\n          - $ref: '#/components/schemas/tmcArrayGeoReference'\n          - $ref: '#/components/schemas/tmcLocationGeoReference'\n          - $ref: '#/components/schemas/latLongArrayGeoReference'\n          - $ref: '#/components/schemas/latLongPointGeoReference'\n          - $ref: '#/components/schemas/geoJSONLineString'\n          - $ref: '#/components/schemas/geoJSONMultiLineString'\n          - $ref: '#/components/schemas/geoJSONMultiPoint'\n          - $ref: '#/components/schemas/geoJSONMultiPolygon'\n          - $ref: '#/components/schemas/geoJSONPoint'\n          - $ref: '#/components/schemas/geoJSONPolygon'\n          discriminator:\n            propertyName: type\n            mapping:\n              addressGeoReference: '#/components/schemas/addressGeoReference'\n              openLRGeoReference: '#/components/schemas/openLRGeoReference'\n              tmcArrayGeoReference: '#/components/schemas/tmcArrayGeoReference'\n              tmcLocationGeoReference: '#/components/schemas/tmcLocationGeoReference'\n              latLongArrayGeoReference: '#/components/schemas/latLongArrayGeoReference'\n              latLongPointGeoReference: '#/components/schemas/latLongPointGeoReference'\n              geoJSONLineString: '#/components/schemas/geoJSONLineString'\n              geoJSONMultiLineString: '#/components/schemas/geoJSONMultiLineString'\n              geoJSONMultiPoint: '#/components/schemas/geoJSONMultiPoint'\n              geoJSONMultiPolygon: '#/components/schemas/geoJSONMultiPolygon'\n              geoJSONPoint: '#/components/schemas/geoJSONPoint'\n              geoJSONPolygon: '#/components/schemas/geoJSONPolygon'\n        administrativeReference:\n          allOf:\n            - description: Administrative reference\n            - $ref: '#/components/schemas/administrativeReference'\n        contactDetails:\n          description: Contact details for this `Location`.\n          type: array\n          items:\n            $ref: '#/components/schemas/contactDetail'\n        constraint:\n          description: |\n            In the context of a `Location`, access to the location is only allowed if the given constraint applies.\n\n            \u003e **ℹ Note** that constraints can be nested and combined using the `andConstraint`, `orConstraint` and `notConstraint`.\n          oneOf:\n            - $ref: '#/components/schemas/constraintReference'\n            - $ref: '#/components/schemas/andConstraint'\n            - $ref: '#/components/schemas/notConstraint'\n            - $ref: '#/components/schemas/orConstraint'\n            - $ref: '#/components/schemas/sizeConstraint'\n            - $ref: '#/components/schemas/speedConstraint'\n            - $ref: '#/components/schemas/weightConstraint'\n            - $ref: '#/components/schemas/fuelTypeConstraint'\n            - $ref: '#/components/schemas/vehicleTypeConstraint'\n            - $ref: '#/components/schemas/routeConstraint'\n            - $ref: '#/components/schemas/dangerousGoodsConstraint'\n            - $ref: '#/components/schemas/numberOfVehiclesConstraint'\n            - $ref: '#/components/schemas/eventOrderConstraint'\n            - $ref: '#/components/schemas/sensorValueConstraint'\n            - $ref: '#/components/schemas/sensorUpdateFrequencyConstraint'\n            - $ref: '#/components/schemas/startDateTimeConstraint'\n            - $ref: '#/components/schemas/endDateTimeConstraint'\n            - $ref: '#/components/schemas/timeRangeConstraint'\n          discriminator:\n            propertyName: type\n            mapping:\n              constraintReference: '#/components/schemas/constraintReference'\n              andConstraint: '#/components/schemas/andConstraint'\n              notConstraint: '#/components/schemas/notConstraint'\n              orConstraint: '#/components/schemas/orConstraint'\n              sizeConstraint: '#/components/schemas/sizeConstraint'\n              speedConstraint: '#/components/schemas/speedConstraint'\n              weightConstraint: '#/components/schemas/weightConstraint'\n              fuelTypeConstraint: '#/components/schemas/fuelTypeConstraint'\n              vehicleTypeConstraint: '#/components/schemas/vehicleTypeConstraint'\n              routeConstraint: '#/components/schemas/routeConstraint'\n              dangerousGoodsConstraint: '#/components/schemas/dangerousGoodsConstraint'\n              numberOfVehiclesConstraint: '#/components/schemas/numberOfVehiclesConstraint'\n              eventOrderConstraint: '#/components/schemas/eventOrderConstraint'\n              sensorValueConstraint: '#/components/schemas/sensorValueConstraint'\n              sensorUpdateFrequencyConstraint: '#/components/schemas/sensorUpdateFrequencyConstraint'\n              startDateTimeConstraint: '#/components/schemas/startDateTimeConstraint'\n              endDateTimeConstraint: '#/components/schemas/endDateTimeConstraint'\n              timeRangeConstraint: '#/components/schemas/timeRangeConstraint'\n        remarks:\n          type: string\n          description: |\n            Remarks about the location. Please don't misuse this field for external references, use the `externalIds` field instead.\n          example: The cafe around the corner has the best coffee in town.\n      required:\n        - geoReference\n\n    locationType:\n      type: object\n      description: The type of location\n      properties:\n        type:\n          description: The type of the location\n          type: string\n          enum:\n            - warehouse\n            - store\n            - environmentalZone\n            - restrictedArea\n            - customer\n            - parkingLot\n            - parkingGarage\n            - parkingSpot\n            - loadingUnloadingArea\n            - other\n          example: warehouse\n        other:\n          type: string\n          description: |\n            Name of the location type if `other` is chosen in the `type` field.\n          example: playground\n      example:\n        type: warehouse\n      required:\n        - type\n\n    contactDetail:\n      type: object\n      description: 'Contact details, such as phone numbers and email addresses.'\n      properties:\n        type:\n          type: string\n          enum:\n            - phone\n            - email\n            - other\n          description: Type of contact detail\n          example: email\n        value:\n          type: string\n          description: |\n            The contact detail itself. Depending on the `type`, this can be a phone number, email address or some other address to contact a location\n            or person.\n          example: info@opentripmodel.org\n        remarks:\n          type: string\n          description: Remarks about the contact detail.\n          example: Usually doesn't answer his phone the first time\n      example:\n        type: phone\n        value: '+312012345678'\n        remarks: private cellphone of the CEO\n      required:\n        - type\n        - value\n\n    geoReference:\n      type: object\n      description: |\n        Describes a geographic reference, which can be part of a location or route.\n      properties:\n        type:\n          type: string\n          description: Type of geographic reference\n          example: openLRGeoReference\n      required:\n        - type\n      example:\n        type: latLongPointGeoReference\n        lat: 52.0838333\n        lon: 5.8318803\n\n    latLongPoint:\n      description: |\n        Describes a point on the earth. See [Wikipedia](https://en.wikipedia.org/wiki/Geographic_coordinate_system#Latitude_and_longitude)\n        for an explanation.\n      properties:\n        lat:\n          description: |\n            [Latitude](https://en.wikipedia.org/wiki/Latitude)\n          type: number\n          format: double\n          example: 52.192294\n        lon:\n          description: |\n            [Longitude](https://en.wikipedia.org/wiki/Longitude)\n          type: number\n          format: double\n          example: 5.410124\n      required:\n        - lat\n        - lon\n      example:\n        lat: 52.0838333\n        lon: 5.8318803\n\n    movingInfo:\n      description: Cannot be used on its own, is part of some geoReferences.\n      properties:\n        speed:\n          allOf:\n          - description: |\n              The speed of a moving `Vehicle`.\n          - $ref: '#/components/schemas/valueWithUnit'\n        heading:\n          allOf:\n          - description: |\n              The heading of a `Vehicle`, that is: the direction the \"nose\" of the `Vehicle` is pointing to.\n          - $ref: '#/components/schemas/valueWithUnit'\n        bearing:\n          allOf:\n          - description: |\n              The bearing of a `Vehicle`, that is: the angle between the `Vehicle` and its destination. Either measured _relative_ or _absolute_. See\n              [Wikipedia](https://en.wikipedia.org/wiki/Bearing_(navigation)) for an explanation.\n          - $ref: '#/components/schemas/valueWithUnit'\n        bearingType:\n          description: |\n            Denotes how the bearing is measured. See [Wikipedia](https://en.wikipedia.org/wiki/Bearing_(navigation)) for an explanation.\n          type: string\n          enum:\n            - absolute\n            - relative\n          default: absolute\n\n    latLongPointGeoReference:\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - $ref: '#/components/schemas/latLongPoint'\n        - $ref: '#/components/schemas/movingInfo'\n      example:\n        type: latLongPointGeoReference\n        lat: 52.0838333\n        lon: 5.8318803\n        speed:\n          unit: 'km/h'\n          value: 76\n        heading:\n          unit: 'degrees'\n          value: '143'\n\n    latLongArrayGeoReference:\n      allOf:\n        - description: |\n            Georeference modelling an area or route as a series of lat/lon points.\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            points:\n              description: An array of lat/lon points.\n              type: array\n              minItems: 1\n              items:\n                $ref: '#/components/schemas/latLongPoint'\n          required:\n            - points\n      example:\n        type: latLongArrayGeoReference\n        points:\n          - lat: 52.0838333\n            lon: 5.8318803\n          - lat: 52.192294\n            lon: 5.410124\n          - lat: 52.188841\n            lon: 5.414857\n\n    point2D:\n      description: Is used as part of some GeoJson constructs, not to be used on its own.\n      type: array\n      maxItems: 2\n      minItems: 2\n      items:\n        type: number\n        format: double\n      example:\n        - 5.408910512924194\n        - 52.19404109179293\n\n    geoJSONPoint:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id2'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - $ref: '#/components/schemas/movingInfo'\n        - properties:\n            coordinates:\n              $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    geoJSONLineString:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id3'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            coordinates:\n              description: Array of lat/lon pairs.\n              type: array\n              minItems: 1\n              items:\n                $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    geoJSONPolygon:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id4'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            coordinates:\n              description: A two-dimensional array of lan/lon pairs.\n              type: array\n              items:\n                description: An array of lat/lon pairs.\n                type: array\n                items:\n                  $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    geoJSONMultiPoint:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id5'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            coordinates:\n              description: An array of lat/lon pairs.\n              type: array\n              items:\n                $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    geoJSONMultiLineString:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id6'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            coordinates:\n              description: A two-dimensional array of lat/lon pairs.\n              type: array\n              items:\n                description: An array of lat/lon pairs.\n                type: array\n                items:\n                  $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    geoJSONMultiPolygon:\n      type: object\n      description: GeoJSon geometry\n      externalDocs:\n        url: 'http://geojson.org/geojson-spec.html#id6'\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            coordinates:\n              description: A three-dimensional array of lat/lon pairs.\n              type: array\n              items:\n                description: A two-dimensional array of lat/lon pairs.\n                type: array\n                items:\n                  description: An array of lat/lon pairs.\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/point2D'\n          required:\n            - coordinates\n\n    openLRGeoReference:\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - properties:\n            openLRString:\n              type: string\n              format: openLR\n              description: |\n                A base64 encoded binary OpenLR string.\n                More information about OpenLR: http://openlr.org/documents.html\n              example: CgOkbyUN6COJAwEB/8YjGQ==\n          required:\n            - openLRString\n      example:\n        type: openLRGeoReference\n        openLRString: CgOkbyUN6COJAwEB/8YjGQ==\n\n    tmcPoint:\n      description: A geographic point, described according to the TMC spec.\n      properties:\n        locationCode:\n          description: TMC location code\n          type: string\n        direction:\n          description: TMC direction\n          type: string\n          default: positive\n          enum:\n            - positive\n            - negative\n\n    tmcLocation:\n      description: A geographic location, described according to the TMC spec.\n      properties:\n        countryCode:\n          description: TMC country code\n          type: string\n        tableId:\n          description: TMC table ID\n          type: string\n        tableVersionId:\n          description: TMC table version ID\n          type: string\n        locationCode:\n          description: TMC location code\n          type: string\n        direction:\n          description: TMC direction\n          type: string\n          default: positive\n          enum:\n            - positive\n            - negative\n        offset:\n          description: Offset from the TMC location in meters\n          type: number\n          format: integer32\n          default: 0\n      required:\n        - countryCode\n        - tableId\n        - tableVersionId\n        - locationCode\n\n    tmcLocationArray:\n      description: An array of TMC points, possibly describing a route.\n      properties:\n        countryCode:\n          description: TMC country code\n          type: string\n        tableId:\n          description: TMC table ID\n          type: string\n        tableVersionId:\n          description: TMC table version ID\n          type: string\n        points:\n          description: An array of TMC points.\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/tmcPoint'\n        startOffset:\n          description: Offset from the first TMC location in meters\n          type: number\n          format: integer32\n          default: 0\n        endOffset:\n          description: Offset from the last TMC location in meters\n          type: number\n          format: integer32\n          default: 0\n      required:\n        - countryCode\n        - tableId\n        - tableVersionId\n        - points\n\n    tmcLocationGeoReference:\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - $ref: '#/components/schemas/tmcLocation'\n        - $ref: '#/components/schemas/movingInfo'\n\n    tmcArrayGeoReference:\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - $ref: '#/components/schemas/tmcLocationArray'\n\n    addressGeoReference:\n      allOf:\n        - $ref: '#/components/schemas/geoReference'\n        - $ref: '#/components/schemas/address'\n\n    address:\n      description: An address.\n      type: object\n      properties:\n        street:\n          type: string\n          description: Street of the address.\n        houseNumber:\n          type: string\n          description: Housenumber\n        houseNumberAddition:\n          type: string\n          description: Addition to the houseNumber.\n        postalCode:\n          type: string\n          description: The postal code of the address.\n        city:\n          type: string\n          description: The city of the address\n        country:\n          type: string\n          description: |\n            [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1) country code.\n      example:\n        street: Langestraat\n        houseNumber: \"3\"\n        houseNumberAddition: a\n        postalCode: 1234AB\n        city: Amersfoort\n        country: nl\n\n    administrativeReference:\n      description: |\n        Administrative references are street addresses, only available for reference and for improved human readability. Administrative references\n        are **not** intended to be used for identifying locations; always use a geoReference for that purpose. While this is not advised, you _can_\n        use an address as georeference. To do so, add the address as `geoReference` via the `addressGeoReference` type.\n      allOf:\n        - $ref: '#/components/schemas/address'\n        - properties:\n            name:\n              type: string\n              description: |\n                The name can be sent to the mobile device of the driver, in order to properly address the client.\n              example: Sjaak Trekhaak\n      example:\n        name: Main entrance of store\n        street: Langestraat\n        houseNumber: \"3\"\n        houseNumberAddition: a\n        postalCode: 1234AB\n        city: Amersfoort\n        country: nl\n\n    constraint:\n      type: object\n      description: |\n        `Constraints` can do different things, depending on the context they're\n        used in:\n          - In the context of a `Location`, access to the location is only allowed if the given constraint applies.\n          - In the context of a `Trip`, constraints can be used to define constraints that have to be met during the trip, e.g. if the temperature in\n            a refrigerated trailer has to stay below a given maximum during the trip.\n          - In the context of a `Shipment`, constraints can be used to e.g. define minimum or maximum temperatures for shipments, or date time\n            constraints for delivery.\n\n        Note that constraints can be nested and combined using the `andConstraint`, `orConstraint` and `notConstraint`.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies this constraint. A URI can be assigned by the client or will be generated by the server if the client doesn't provide\n            it. Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n\n            \u003e **NOTE** The exact meaning of this `id` field depends on the location where it is used. If used in a top-level `Constraint`, defined via\n                       the `constraints` endpoint, it denotes the unique `id` of the `Constraint`. If used inside another entity, such as e.g.\n                       `Location`, the `id` field is only used if the `type` is `constraintReference`, to refer to a predefined `Constraint`.\n          example: 'https://api.opentripmodel.org/api/public/v4/constraints/6d4b4ac8-0122-457f-89cf-15f6d82ac2ec'\n        name:\n          type: string\n          description: Name of the `Constraint`. For display purposes and search only.\n          example: 'Constraint name'\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the constraint may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        basisType:\n          description: |\n            The basis for the `Constraint`. Legal and physical constraints can generally not be violated. But a constraint may also be based on an\n            advice or request, in which case a party may choose not to stick to the constraint.\n          type: string\n          enum:\n          - legal\n          - physical\n          - contractual\n          - advice\n          - request\n        basisReference:\n          description: |\n            Reference to the basis of the `Constraint`. In case the `basisType` is `legal`, this can e.g. be a link to a specific law. For a\n            `physical` constraint, it may be a link to a photograph or drawing of the situation, etc.\n          type: string\n          example: https://wetten.overheid.nl/BWBR0007606/2015-04-01\n        type:\n          description: |\n            The constraint type. Set the type to `constraintReference` to refer to a predefined top-level constraint. In that case, use the `id`\n            field to refer to the `id` of that predefined constraint. To define a constraint instead of referring to it, choose any of the other types\n            and fill the fields that come with that constraint type.\n          type: string\n      required:\n        - type\n\n    constraintReference:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n      example:\n        type: constraintReference\n        id: 'https://api.opentripmodel.org/api/public/v4/constraints/6d4b4ac8-0122-457f-89cf-15f6d82ac2ec'\n\n    andConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            and:\n              description: |\n                All constraints in the array are combined using a boolean AND relation. This means that the resulting constraint will only apply if\n                all constraints in the array would apply.\n              type: array\n              items:\n                $ref: '#/components/schemas/constraint'\n          example:\n            type: andConstraint\n            and:\n              - type: startDateTimeConstraint\n                startDateTime: '2017-01-01T00:00Z'\n              - type: endDateTimeConstraint\n                endDateTime: '2018-12-31T23:59:59Z'\n              - type: notConstraint\n                not:\n                  type: fuelTypeConstraint\n                  fuelTypes:\n                    - type: diesel\n                    - type: biodiesel\n                    - type: other\n                      other: liquidGas\n\n    orConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            or:\n              description: |\n                All constraints in the array are combined using a boolean OR relation. This means that the resulting constraint will apply if any of\n                the constraints in the array would apply.\n              type: array\n              items:\n                $ref: '#/components/schemas/constraint'\n          example:\n            type: orConstraint\n            or:\n            - type: fuelTypeConstraint\n              fuelTypes:\n                - type: battery\n            - type: fuelTypeConstraint\n              fuelTypes:\n                - type: biodiesel\n\n    notConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            not:\n              allOf:\n                - description: |\n                    The `notConstraint` inverts a given constraint, like a boolean NOT operation. This means the resulting constraint will apply if the\n                    underlying constraint would not.\n                - $ref: '#/components/schemas/constraint'\n          example:\n            type: notConstraint\n            not:\n              type: fuelTypeConstraint\n              fuelTypes:\n                - type: petrol\n\n    startDateTimeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            startDateTime:\n              type: string\n              format: date-time\n              description: This constraint applies from the given start date/time.\n              example: '2012-01-01T00:00Z'\n\n    endDateTimeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            endDateTime:\n              type: string\n              format: date-time\n              description: This constraint applies until the given end date/time.\n              example: '2028-12-31T23:59:59Z'\n\n    timeRangeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - $ref: '#/components/schemas/dayOfWeekTimeRange'\n\n    eventOrderConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            eventOrderConstraintType:\n              description: |\n                The type of event order constraint. Available types are:\n                  - `before`: The event this constraint is placed on should occur before the referenced event.\n                  - `after`: The event this constraint is placed on should occur after the referenced event.\n              type: string\n              enum:\n                - before\n                - after\n            eventReference:\n              description: The URI of the referenced event.\n              type: string\n              format: uri\n              example: 'https://api.opentripmodel.org/api/public/v4/events/17118916-d6bd-4d5d-8b9a-62db7dd6149d'\n\n    numberOfVehiclesConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            numberConstraintType:\n              description: |\n                The type of number contraint. Available types are:\n                  - `maximum`: the constraint is met as long as the number of vehicles in the associated `Location` stays below or on the maximum.\n                  - `minimum`: the constraint is met as long as the number of vehicles in the associated `Location` stays above or on the minimum.\n                  - `range`: the constraint is met as long as the number of vehicles in the associated `Location` stays between the minimum and\n                    maximum, including maximum and minimum values.\n              type: string\n              enum:\n                - maximum\n                - minimum\n                - range\n            maximum:\n              type: number\n              format: int64\n              description: The maximum number of vehicles, only applies if `numberConstraintType` is `maximum` or `range`.\n            minimum:\n              type: number\n              format: int64\n              description: The minimum number of vehicles, only applies if `numberConstraintType` is `minimum` or `range`.\n          example:\n            numberConstraintType: 'maximum'\n            maximum: 300\n\n    sizeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            sizeConstraintType:\n              description: |\n                The type of size constraint. Available types are:\n                  - `maximum`: All sizes below and including the maximum value are allowed.\n                  - `minimum`: All sizes above and including the minimum value are allowed.\n                  - `range`: All sizes in between and including the minimum and maximum values are allowed.\n              type: string\n              enum:\n                - maximum\n                - minimum\n                - range\n            sizeConstraint:\n              description: Which size are we contraining here?\n              type: string\n              enum:\n                - vehicleLength\n                - vehicleHeight\n                - vehicleWidth\n            maximum:\n              allOf:\n                - description: Maximum size allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n            minimum:\n              allOf:\n                - description: Minimum size allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            sizeConstraintType: range\n            sizeConstraint: vehicle-length\n            minimum:\n              value: 4\n              unit: 'm'\n            maximum:\n              value: '20'\n              unit: 'm'\n\n    weightConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            weightConstraintType:\n              description: |\n                The type of weight constraint. Available types are:\n                  - `maximum`: All weights below and including the maximum value are allowed.\n                  - `minimum`: All weights above and including the minimum value are allowed.\n                  - `range`: All weights in between and including the minimum and maximum values are allowed.\n              type: string\n              enum:\n                - maximum\n                - minimum\n                - range\n            maximum:\n              allOf:\n                - description: Maximum weight allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n            minimum:\n              allOf:\n                - description: Minimum weight allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            weightConstraintType: maximum\n            maximum:\n              value: 200\n              unit: 'kg'\n\n    speedConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            speedConstraintType:\n              description: |\n                The type of speed constraint. Available types are:\n                  - `maximum`: All speeds below and including the maximum value are allowed.\n                  - `minimum`: All speeds above and including the minimum value are allowed.\n              type: string\n              enum:\n                - maximum\n                - minimum\n            maximum:\n              allOf:\n                - description: Maximum speed allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n            minimum:\n              allOf:\n                - description: Minimum speed allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            speedConstraintType: range\n            minimum:\n              value: 30\n              unit: 'km/h'\n            maximum:\n              value: 130\n              unit: 'km/h'\n\n    sensorValueConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            sensorValueConstraintType:\n              description: |\n                The type of sensor value constraint. Available types are:\n                  - `maximum`: All sensor values below and including the maximum value are allowed.\n                  - `minimum`: All sensor values above and including the minimum value are allowed.\n              type: string\n              enum:\n                - maximum\n                - minimum\n            sensor:\n              type: string\n              format: uri\n              description: OTM URI of the sensor this constraint applies to.\n              example: 'https://api.opentripmodel.org/api/public/v4/sensors/6666f00c-1332-472c-aff9-bc11b3d53296'\n            maximum:\n              allOf:\n                - description: Maximum sensor value allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n            minimum:\n              allOf:\n                - description: Minimum sensor value allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            sensor: 'https://api.opentripmodel.org/api/public/v4/sensors/6666f00c-1332-472c-aff9-bc11b3d53296'\n            sensorValueConstraintType: maximum\n            maximum:\n              value: 0\n              unit: '°C'\n\n    sensorUpdateFrequencyConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            sensorUpdateFrequencyConstraintType:\n              description: |\n                The type of sensor value constraint. Available types are:\n                  - `maximum`: All sensor values below and including the maximum value are allowed.\n                  - `minimum`: All sensor values above and including the minimum value are allowed.\n              type: string\n              enum:\n                - maximum\n                - minimum\n            sensor:\n              type: string\n              format: uri\n              description: OTM URI of the sensor this constraint applies to.\n              example: 'https://api.opentripmodel.org/api/public/v4/sensors/6666f00c-1332-472c-aff9-bc11b3d53296'\n            maximum:\n              allOf:\n                - description: Maximum sensor value allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n            minimum:\n              allOf:\n                - description: Minimum sensor value allowed\n                - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            sensorUpdateFrequencyConstraintType: range\n            minimum:\n              value: 2\n              unit: 'Hz'\n\n    fuelTypeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            fuelTypes:\n              description: The fuel types to which this constraint apply.\n              type: array\n              items:\n                $ref: '#/components/schemas/fuelType'\n          example:\n            type: fuelTypeConstraint\n            fuelTypes:\n              - type: battery\n              - type: biodiesel\n              - type: other\n                other: wind\n\n    vehicleTypeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            vehicleTypes:\n              description: The vehicle types that this constraint apply to.\n              type: array\n              items:\n                $ref: '#/components/schemas/vehicleType'\n\n    dangerousGoodsConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            description:\n              description: The description of a dangerous good. The exact meaning of the description depends on the `descriptionType` field.\n              type: string\n            descriptionType:\n              description: The type of description of the dangerous good.\n              type: string\n              enum:\n                - chemicalIdentifier\n                - commercialName\n                - class\n                - other\n            descriptionTypeReference:\n              description: |\n                Reference to a resource where the exact meaning of the description can be found. E.g. in case of a `descriptionType` of `class`,\n                this reference can be a document where the classes are described. This can be a law, or a document from international organizations\n                like IATA, ICAO, IMO, etc. In case the `descriptionType` is `commercialName`, the reference might be a document describing the\n                specific dangerous good, with its properties. In case `descriptionType` is `chemicalIdentifier`, the reference is the standard\n                that's used to identify the good. Examples of widely used standards for chemical identifiers are:\n\n                - [InChi](https://en.wikipedia.org/wiki/International_Chemical_Identifier)\n                - [CAS Registry Number](https://en.wikipedia.org/wiki/CAS_Registry_Number)\n          example:\n            type: dangerousGoodsConstraint\n            description: 'XLYOFNOQVPJJNP-UHFFFAOYSA-N'\n            descriptionType: 'chemicalIdentifier'\n            descriptionTypeReference: 'https://en.wikipedia.org/wiki/International_Chemical_Identifier'\n\n    routeConstraint:\n      allOf:\n        - $ref: '#/components/schemas/constraint'\n        - properties:\n            route:\n              $ref: '#/components/schemas/geoReference'\n          example:\n            type: routeConstraint\n            route:\n              type: openLRGeoReference\n              openLRString: 'CwPQHiUgVAH58hJ8+cw7fg4B'\n\n    dayOfWeekTimeRange:\n      type: object\n      description: |\n        A time range for a specific day of the week, for which the constraint will be applicable.\n      properties:\n        dayOfWeek:\n          type: integer\n          format: int32\n          minimum: 1\n          maximum: 7\n          description: |\n            Day of the week, where\n            - 1 = Monday\n            - 2 = Tuesday\n            - 3 = Wednesday\n            - 4 = Thursday\n            - 5 = Friday\n            - 6 = Saturday\n            - 7 = Sunday\n          example: 1\n        ranges:\n          description: An array of time ranges\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/timeRange'\n      required:\n        - dayOfWeek\n        - ranges\n\n    timeRange:\n      type: object\n      description: Time range with start and end time.\n      properties:\n        range:\n          type: string\n          format: time-range\n          description: |\n            Time interval in the format `hh:mm:ss/hh:mm:ss`, where the value before the `/` is the start time and the value after the `/` is the end\n            time. This follows the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) time interval notation. Note that the time values are in the\n            local time zone of the `Location`. This is because it would be impractical to convert time intervals related to a location to UTC, given\n            that the intervals are linked to a weekday (as opposed to a specific date) and thus the UTC time could change in time zones where\n            [Daylight Saving Time(DST)](https://en.wikipedia.org/wiki/Daylight_saving_time) is used. See the\n            [Time values](/#section/Technical-notes/Time-values) section for details.\n          example: '09:00:00/17:00:00'\n      required:\n        - range\n\n    vehicle:\n      type: object\n      description: Vehicle\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Unique ID for this `Vehicle`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: 'https://api.opentripmodel.org/api/public/v4/vehicles/b9bb914d-845e-46f2-91ff-31fa4bac2fbe'\n        name:\n          type: string\n          description: |\n            Name of the `Vehicle`. For display and search purposes only.\n          example: Otto's truck\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the vehicle may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        vehicleType:\n          $ref: '#/components/schemas/vehicleType'\n        fuel:\n          $ref: '#/components/schemas/fuelType'\n        maxLinks:\n          type: integer\n          format: int32\n          description: |\n            Maximum number of links to other `Vehicle` s. Typical values are 0, 1 or 2.\n        loadCapacities:\n          description: |\n            The load capacities of the `Vehicle`. This can be an array of values, for several reasons:\n\n            - The `Vehicle` might be split up in multiple compartments.\n            - You might want to express the load capacities in different quantities. E.g. in square meters or litres as well as in number of pallets.\n          type: array\n          items:\n            $ref: '#/components/schemas/valueWithUnit'\n          example:\n            - value: 1000\n              unit: 'kg'\n        length:\n          allOf:\n            - description: The length of the `Vehicle`.\n            - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            value: 5200\n            unit: 'mm'\n        height:\n          allOf:\n            - description: The height of the `Vehicle`.\n            - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            value: 2500\n            unit: 'mm'\n        width:\n          allOf:\n            - description: The width of the `Vehicle`.\n            - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            value: 1800\n            unit: 'mm'\n        emptyWeight:\n          allOf:\n            - description: The weight of the `Vehicle` when empty.\n            - $ref: '#/components/schemas/valueWithUnit'\n          example:\n            value: 2000\n            unit: 'kg'\n      required:\n        - maxLinks\n\n    vehicleType:\n      type: object\n      description: The type of vehicle\n      properties:\n        type:\n          description: The type of the vehicle\n          type: string\n          enum:\n            - boxtruck\n            - truck\n            - trailer\n            - lorry\n            - tractor\n            - airplane\n            - deepSeaVessel\n            - barge\n            - passengerCar\n            - motorBike\n            - bike\n            - bus\n            - coach\n            - train\n            - tram\n            - unknown\n            - other\n        other:\n          type: string\n          description: |\n            Name of the vehcile type if `other` is chosen in the `type` field.\n          example: teletransporter\n      example:\n        type: tractor\n      required:\n        - type\n\n    fuelType:\n      type: object\n      description: |\n        The type of fuel the vehicle runs on. For vehicle without an engine of their own, such as a trailer, you may choose `not-applicable`. For\n        trailers with cooling capabilities, choose the fuel type of the cooling engine.\n      properties:\n        type:\n          description: The type of fuel.\n          type: string\n          enum:\n            - battery\n            - biodiesel\n            - diesel\n            - dieselBatteryHybrid\n            - ethanol\n            - hydrogen\n            - liquidGas\n            - lpg\n            - methane\n            - petrol\n            - petrolBatteryHybrid\n            - notApplicable\n            - unknown\n            - other\n        other:\n          type: string\n          description: |\n            Name of the fuel type if `other` is chosen in the `type` field.\n          example: nuclear-fusion\n      example:\n        type: diesel\n      required:\n        - type\n\n    sensor:\n      type: object\n      description: Sensor\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Unique ID for this `Sensor`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: https://api.opentripmodel.org/api/public/v4/sensors/6666f00c-1332-472c-aff9-bc11b3d53296\n        name:\n          type: string\n          description: |\n            Name of the `Sensor`, for display and search purposes only.\n          example: Temperature sensor in trailer x\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the sensor may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        placement:\n          type: string\n          description: |\n            Sometimes more than one sensor can be associated with a single entity. This is the case e.g. in cooled trailers that are divided into\n            compartments with different temperatures, where each compartment has its own sensor. The `placement` member can be used to identify where\n            a sensor is placed. Parties using OpenTripModel to exchange sensor data may wish to agree on a standardized naming, but this is too\n            specific to describe in the standard.\n          example: Compartment 1\n        sensorType:\n          $ref: '#/components/schemas/sensorType'\n        constraint:\n          description: |\n            In the context of a `Sensor`, only `sensorValueConstraint`s really make sense. You can use such a constraint to model a sensor of\n            which the measured value must be within certain bounds at all times.\n\n            \u003e **ℹ Note** that constraints can be nested and combined using the `andConstraint`, `orConstraint` and `notConstraint`.\n          oneOf:\n            - $ref: '#/components/schemas/constraintReference'\n            - $ref: '#/components/schemas/andConstraint'\n            - $ref: '#/components/schemas/notConstraint'\n            - $ref: '#/components/schemas/orConstraint'\n            - $ref: '#/components/schemas/sizeConstraint'\n            - $ref: '#/components/schemas/speedConstraint'\n            - $ref: '#/components/schemas/weightConstraint'\n            - $ref: '#/components/schemas/fuelTypeConstraint'\n            - $ref: '#/components/schemas/vehicleTypeConstraint'\n            - $ref: '#/components/schemas/routeConstraint'\n            - $ref: '#/components/schemas/dangerousGoodsConstraint'\n            - $ref: '#/components/schemas/numberOfVehiclesConstraint'\n            - $ref: '#/components/schemas/eventOrderConstraint'\n            - $ref: '#/components/schemas/sensorValueConstraint'\n            - $ref: '#/components/schemas/sensorUpdateFrequencyConstraint'\n            - $ref: '#/components/schemas/startDateTimeConstraint'\n            - $ref: '#/components/schemas/endDateTimeConstraint'\n            - $ref: '#/components/schemas/timeRangeConstraint'\n          discriminator:\n            propertyName: type\n            mapping:\n              constraintReference: '#/components/schemas/constraintReference'\n              andConstraint: '#/components/schemas/andConstraint'\n              notConstraint: '#/components/schemas/notConstraint'\n              orConstraint: '#/components/schemas/orConstraint'\n              sizeConstraint: '#/components/schemas/sizeConstraint'\n              speedConstraint: '#/components/schemas/speedConstraint'\n              weightConstraint: '#/components/schemas/weightConstraint'\n              fuelTypeConstraint: '#/components/schemas/fuelTypeConstraint'\n              vehicleTypeConstraint: '#/components/schemas/vehicleTypeConstraint'\n              routeConstraint: '#/components/schemas/routeConstraint'\n              dangerousGoodsConstraint: '#/components/schemas/dangerousGoodsConstraint'\n              numberOfVehiclesConstraint: '#/components/schemas/numberOfVehiclesConstraint'\n              eventOrderConstraint: '#/components/schemas/eventOrderConstraint'\n              sensorValueConstraint: '#/components/schemas/sensorValueConstraint'\n              sensorUpdateFrequencyConstraint: '#/components/schemas/sensorUpdateFrequencyConstraint'\n              startDateTimeConstraint: '#/components/schemas/startDateTimeConstraint'\n              endDateTimeConstraint: '#/components/schemas/endDateTimeConstraint'\n              timeRangeConstraint: '#/components/schemas/timeRangeConstraint'\n\n\n    sensorType:\n      type: object\n      description: The type of sensor\n      properties:\n        type:\n          description: The type of sensor\n          type: string\n          enum:\n            - temperature\n            - pressure\n            - speed\n            - humidity\n            - accelerometer\n            - current\n            - voltage\n            - weight\n            - unknown\n            - other\n        other:\n          type: string\n          description: |\n            Name of the sensor type if `other` is chosen in the `type` field.\n          example: smurf sensor\n      example:\n        type: accelerometer\n      required:\n        - type\n\n    shipment:\n      type: object\n      description: |\n        A shipment object has at lease a `physicalSender` and `physicalAddressee` location. If no `legalSender` or `legalAddressee` are given, those\n        are considered equal to their physical counterparts. All sender/addressee values can be given either as embedded location object or as URI of\n        a pre-defined location. In the latter case, you can use the field ending with `Id` instead. A `physicalSender` or `physicalSenderId` is\n        required, as is a `physicalAddressee` or `physicalAddresseeId`.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies the `Shipment`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide\n            it. Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: https://api.opentripmodel.org/api/public/v4/shipments/ddb488f2-9082-4ec9-bd88-3c4e703a103d\n        name:\n          type: string\n          description: Name of the `Shipment`. For display purposes and search only.\n          example: Special delivery for store 3\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the shipment may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        physicalSenderId:\n          type: string\n          format: uri\n          description: |\n            The URI of an already defined location for the physical location of the sender.\n          example: https://api.opentripmodel.org/api/public/v4/locations/ebf47d6b-b976-438f-bf0a-5161d04bf981\n        physicalSender:\n          $ref: '#/components/schemas/location'\n        legalSenderId:\n          type: string\n          format: uri\n          description: |\n            The URI of an already defined location for the legal location of the sender.\n          example: https://api.opentripmodel.org/api/public/v4/locations/62da797a-bc58-40c1-a9ee-5e90813144a9\n        legalSender:\n          $ref: '#/components/schemas/location'\n        physicalAddresseeId:\n          type: string\n          format: uri\n          description: |\n            The URI of an already defined location for the physical location of the addressee.\n          example: https://api.opentripmodel.org/api/public/v4/locations/a1ed8116-94c5-4f00-a17d-7b96998a0795\n        physicalAddressee:\n          $ref: '#/components/schemas/location'\n        legalAddresseeId:\n          type: string\n          format: uri\n          description: |\n            The URI of an already defined location for the legal location of the addressee.\n          example: https://api.opentripmodel.org/api/public/v4/locations/cef100b7-9867-424d-a9a7-350fa823d609\n        legalAddressee:\n          $ref: '#/components/schemas/location'\n        freightDocument:\n          type: string\n          format: uri\n          description: URI to the official freight document for this shipment.\n          example: 'https://partner.transfollow.com/api/freightdocuments/abc001'\n        dimensions:\n          allOf:\n            - description: The dimensions of the shipment.\n            - $ref: '#/components/schemas/dimensions'\n        weight:\n          allOf:\n            - description: The weight of the shipment.\n            - $ref: '#/components/schemas/valueWithUnit'\n        packaging:\n          type: string\n          description: |\n            Description of the packaging (type) of this shipment\n          example: pallet\n        type:\n          type: string\n          description: |\n            This field can be used to categorize and/or group shipments by type, depending on the needs of a specific logistic process.\n          example: fresh goods\n        count:\n          type: number\n          description: |\n            Amount of units of packaging. For instance, if this field is '2' and packaging is 'pallet', this indicates the shipment\n            contains 2 pallets.\n            \u003e Note: This field can be used alongside dimensions and weight, but dimensions and weight always apply\n            to the entire shipment, not to a single unit of packaging.\n          example: 2\n        description:\n          type: string\n          description: |\n            Free format text field that can be used to describe the contents of this shipment.\n          example: 50 boxes of bananas\n        constraint:\n          description: |\n            In the context of a `Shipment`, constraints can be used to e.g. define minimum or maximum temperatures for shipments, or date time\n            constraints for delivery.\n\n            \u003e **ℹ Note** that constraints can be nested and combined using the `andConstraint`, `orConstraint` and `notConstraint`.\n          oneOf:\n            - $ref: '#/components/schemas/constraintReference'\n            - $ref: '#/components/schemas/andConstraint'\n            - $ref: '#/components/schemas/notConstraint'\n            - $ref: '#/components/schemas/orConstraint'\n            - $ref: '#/components/schemas/sizeConstraint'\n            - $ref: '#/components/schemas/speedConstraint'\n            - $ref: '#/components/schemas/weightConstraint'\n            - $ref: '#/components/schemas/fuelTypeConstraint'\n            - $ref: '#/components/schemas/vehicleTypeConstraint'\n            - $ref: '#/components/schemas/routeConstraint'\n            - $ref: '#/components/schemas/dangerousGoodsConstraint'\n            - $ref: '#/components/schemas/numberOfVehiclesConstraint'\n            - $ref: '#/components/schemas/eventOrderConstraint'\n            - $ref: '#/components/schemas/sensorValueConstraint'\n            - $ref: '#/components/schemas/sensorUpdateFrequencyConstraint'\n            - $ref: '#/components/schemas/startDateTimeConstraint'\n            - $ref: '#/components/schemas/endDateTimeConstraint'\n            - $ref: '#/components/schemas/timeRangeConstraint'\n          discriminator:\n            propertyName: type\n            mapping:\n              constraintReference: '#/components/schemas/constraintReference'\n              andConstraint: '#/components/schemas/andConstraint'\n              notConstraint: '#/components/schemas/notConstraint'\n              orConstraint: '#/components/schemas/orConstraint'\n              sizeConstraint: '#/components/schemas/sizeConstraint'\n              speedConstraint: '#/components/schemas/speedConstraint'\n              weightConstraint: '#/components/schemas/weightConstraint'\n              fuelTypeConstraint: '#/components/schemas/fuelTypeConstraint'\n              vehicleTypeConstraint: '#/components/schemas/vehicleTypeConstraint'\n              routeConstraint: '#/components/schemas/routeConstraint'\n              dangerousGoodsConstraint: '#/components/schemas/dangerousGoodsConstraint'\n              numberOfVehiclesConstraint: '#/components/schemas/numberOfVehiclesConstraint'\n              eventOrderConstraint: '#/components/schemas/eventOrderConstraint'\n              sensorValueConstraint: '#/components/schemas/sensorValueConstraint'\n              sensorUpdateFrequencyConstraint: '#/components/schemas/sensorUpdateFrequencyConstraint'\n              startDateTimeConstraint: '#/components/schemas/startDateTimeConstraint'\n              endDateTimeConstraint: '#/components/schemas/endDateTimeConstraint'\n              timeRangeConstraint: '#/components/schemas/timeRangeConstraint'\n\n    trip:\n      type: object\n      description: |\n        `Trip` entity. A `Trip` entity consists of a list of `Events` and an optional `Route`. The sequence of `Events` defines the trip. Each `Trip`\n        has an associated `events` endpoint that can be used to get the events for this trip or to publish new events on the trip. Once defined, a\n        `Trip` entity exists in all single lifecycle phases, just like the other entities. However, the events of the `Trip` differ between the\n        different lifecycle phases.\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies the `Trip`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: https://api.opentripmodel.org/api/public/v4/trips/aa38745d-1e90-4774-bf12-05c24a6f8318\n        name:\n          type: string\n          description: |\n            Name of the `Trip`, for display and search purposes only.\n          example: Warehouse to shop\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the trip may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        route:\n          type: string\n          format: uri\n          description: |\n            URI of an endpoint that can be used to retrieve the route of this `Trip`.\n          example: https://api.opentripmodel.org/api/public/v4/routes/9df853e4-1291-40de-bfc1-4e5d7b23cc76\n        constraint:\n          description: |\n            In the context of a `Trip`, constraints can be used to define constraints that have to be met during the trip, e.g. if the temperature\n            in a refridgerated trailer has to stay below a given maximum during the trip.\n\n            \u003e **ℹ Note** that constraints can be nested and combined using the `andConstraint`, `orConstraint` and `notConstraint`.\n          oneOf:\n            - $ref: '#/components/schemas/constraintReference'\n            - $ref: '#/components/schemas/andConstraint'\n            - $ref: '#/components/schemas/notConstraint'\n            - $ref: '#/components/schemas/orConstraint'\n            - $ref: '#/components/schemas/sizeConstraint'\n            - $ref: '#/components/schemas/speedConstraint'\n            - $ref: '#/components/schemas/weightConstraint'\n            - $ref: '#/components/schemas/fuelTypeConstraint'\n            - $ref: '#/components/schemas/vehicleTypeConstraint'\n            - $ref: '#/components/schemas/routeConstraint'\n            - $ref: '#/components/schemas/dangerousGoodsConstraint'\n            - $ref: '#/components/schemas/numberOfVehiclesConstraint'\n            - $ref: '#/components/schemas/eventOrderConstraint'\n            - $ref: '#/components/schemas/sensorValueConstraint'\n            - $ref: '#/components/schemas/sensorUpdateFrequencyConstraint'\n            - $ref: '#/components/schemas/startDateTimeConstraint'\n            - $ref: '#/components/schemas/endDateTimeConstraint'\n            - $ref: '#/components/schemas/timeRangeConstraint'\n          discriminator:\n            propertyName: type\n            mapping:\n              constraintReference: '#/components/schemas/constraintReference'\n              andConstraint: '#/components/schemas/andConstraint'\n              notConstraint: '#/components/schemas/notConstraint'\n              orConstraint: '#/components/schemas/orConstraint'\n              sizeConstraint: '#/components/schemas/sizeConstraint'\n              speedConstraint: '#/components/schemas/speedConstraint'\n              weightConstraint: '#/components/schemas/weightConstraint'\n              fuelTypeConstraint: '#/components/schemas/fuelTypeConstraint'\n              vehicleTypeConstraint: '#/components/schemas/vehicleTypeConstraint'\n              routeConstraint: '#/components/schemas/routeConstraint'\n              dangerousGoodsConstraint: '#/components/schemas/dangerousGoodsConstraint'\n              numberOfVehiclesConstraint: '#/components/schemas/numberOfVehiclesConstraint'\n              eventOrderConstraint: '#/components/schemas/eventOrderConstraint'\n              sensorValueConstraint: '#/components/schemas/sensorValueConstraint'\n              sensorUpdateFrequencyConstraint: '#/components/schemas/sensorUpdateFrequencyConstraint'\n              startDateTimeConstraint: '#/components/schemas/startDateTimeConstraint'\n              endDateTimeConstraint: '#/components/schemas/endDateTimeConstraint'\n              timeRangeConstraint: '#/components/schemas/timeRangeConstraint'\n\n    route:\n      type: object\n      description: Route\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies the `Route`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: https://api.opentripmodel.org/api/public/v4/routes/fcc0828c-591f-4b3c-bc48-7dc8856e7f2a\n        name:\n          type: string\n          description: Name of the `Route`. For display purposes and search only.\n          example: Quickest from Amsterdam warehouse to Maastricht store\n        externalIds:\n          type: array\n          description: |\n            An optional array of IDs by which the route may be known in other systems.\n          items:\n            $ref: '#/components/schemas/idReference'\n        geoReferences:\n          oneOf:\n          - $ref: '#/components/schemas/openLRGeoReference'\n          - $ref: '#/components/schemas/tmcArrayGeoReference'\n          - $ref: '#/components/schemas/latLongArrayGeoReference'\n          - $ref: '#/components/schemas/geoJSONLineString'\n          - $ref: '#/components/schemas/geoJSONMultiLineString'\n          - $ref: '#/components/schemas/geoJSONMultiPoint'\n          discriminator:\n            propertyName: type\n            mapping:\n              openLRGeoReference: '#/components/schemas/openLRGeoReference'\n              tmcArrayGeoReference: '#/components/schemas/tmcArrayGeoReference'\n              latLongArrayGeoReference: '#/components/schemas/latLongArrayGeoReference'\n              geoJSONLineString: '#/components/schemas/geoJSONLineString'\n              geoJSONMultiLineString: '#/components/schemas/geoJSONMultiLineString'\n              geoJSONMultiPoint: '#/components/schemas/geoJSONMultiPoint'\n      required:\n        - geoReferences\n\n    bundle:\n      type: object\n      description: Bundle\n      properties:\n        meta:\n          $ref: '#/components/schemas/bundle_meta'\n        entities:\n          description: |\n            An array of OTM entities.\n          type: array\n          items:\n            type: object\n            oneOf:\n              - $ref: '#/components/schemas/vehicleEntity'\n              - $ref: '#/components/schemas/locationEntity'\n              - $ref: '#/components/schemas/tripEntity'\n              - $ref: '#/components/schemas/routeEntity'\n              - $ref: '#/components/schemas/shipmentEntity'\n              - $ref: '#/components/schemas/actorEntity'\n              - $ref: '#/components/schemas/constraintEntity'\n              - $ref: '#/components/schemas/sensorEntity'\n            discriminator:\n              propertyName: entityType\n              mapping:\n                vehicle: '#/components/schemas/vehicleEntity'\n                location: '#/components/schemas/locationEntity'\n                trip: '#/components/schemas/tripEntity'\n                route: '#/components/schemas/routeEntity'\n                shipment: '#/components/schemas/shipmentEntity'\n                actor: '#/components/schemas/actorEntity'\n                constraint: '#/components/schemas/constraintEntity'\n                sensor: '#/components/schemas/sensorEntity'\n        events:\n          description: |\n            An array of events. The order of events is determined by the timestamps as explained on the [Ordering of events](https://www.opentripmodel.org/v4.2.0/docs/ordering-of-events) page.\n          type: array\n          items:\n            type: object\n            oneOf:\n              - $ref: '#/components/schemas/locationUpdateEvent'\n              - $ref: '#/components/schemas/sensorUpdateEvent'\n              - $ref: '#/components/schemas/startEngineEvent'\n              - $ref: '#/components/schemas/stopEngineEvent'\n              - $ref: '#/components/schemas/restrictionWarningEvent'\n              - $ref: '#/components/schemas/constraintViolationEvent'\n              - $ref: '#/components/schemas/trafficWarningEvent'\n              - $ref: '#/components/schemas/startMovingEvent'\n              - $ref: '#/components/schemas/stopMovingEvent'\n              - $ref: '#/components/schemas/startWaitingEvent'\n              - $ref: '#/components/schemas/stopWaitingEvent'\n              - $ref: '#/components/schemas/startLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/stopLoadingAndUnloadingEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowStartEvent'\n              - $ref: '#/components/schemas/pickupTimeWindowEndEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowStartEvent'\n              - $ref: '#/components/schemas/deliveryTimeWindowEndEvent'\n              - $ref: '#/components/schemas/coupleVehiclesEvent'\n              - $ref: '#/components/schemas/decoupleVehiclesEvent'\n              - $ref: '#/components/schemas/assignToTripEvent'\n              - $ref: '#/components/schemas/deassignFromTripEvent'\n              - $ref: '#/components/schemas/assignDriverEvent'\n              - $ref: '#/components/schemas/deassignDriverEvent'\n              - $ref: '#/components/schemas/associateWithActorEvent'\n              - $ref: '#/components/schemas/dissociateFromActorEvent'\n              - $ref: '#/components/schemas/loadShipmentEvent'\n              - $ref: '#/components/schemas/unloadShipmentEvent'\n              - $ref: '#/components/schemas/receiveShipmentEvent'\n              - $ref: '#/components/schemas/releaseShipmentEvent'\n              - $ref: '#/components/schemas/linkTripsEvent'\n              - $ref: '#/components/schemas/coupleSensorEvent'\n              - $ref: '#/components/schemas/decoupleSensorEvent'\n              - $ref: '#/components/schemas/cancelEvent'\n              - $ref: '#/components/schemas/cancelAllEntityEvents'\n              - $ref: '#/components/schemas/cancelGroupedEvents'\n              - $ref: '#/components/schemas/ignoreEvent'\n            discriminator:\n              propertyName: type\n              mapping:\n                sensorUpdateEvent: '#/components/schemas/locationUpdateEvent'\n                startEngineEvent: '#/components/schemas/sensorUpdateEvent'\n                stopEngineEvent: '#/components/schemas/startEngineEvent'\n                restrictionWarningEvent: '#/components/schemas/stopEngineEvent'\n                constraintViolationEvent: '#/components/schemas/restrictionWarningEvent'\n                trafficWarningEvent: '#/components/schemas/constraintViolationEvent'\n                startMovingEvent: '#/components/schemas/trafficWarningEvent'\n                stopMovingEvent: '#/components/schemas/startMovingEvent'\n                startWaitingEvent: '#/components/schemas/stopMovingEvent'\n                stopWaitingEvent: '#/components/schemas/startWaitingEvent'\n                startLoadingAndUnloadingEvent: '#/components/schemas/stopWaitingEvent'\n                stopLoadingAndUnloadingEvent: '#/components/schemas/startLoadingAndUnloadingEvent'\n                pickupTimeWindowStartEvent: '#/components/schemas/stopLoadingAndUnloadingEvent'\n                pickupTimeWindowEndEvent: '#/components/schemas/pickupTimeWindowStartEvent'\n                deliveryTimeWindowStartEvent: '#/components/schemas/pickupTimeWindowEndEvent'\n                deliveryTimeWindowEndEvent: '#/components/schemas/deliveryTimeWindowStartEvent'\n                coupleVehiclesEvent: '#/components/schemas/deliveryTimeWindowEndEvent'\n                decoupleVehiclesEvent: '#/components/schemas/coupleVehiclesEvent'\n                assignToTripEvent: '#/components/schemas/decoupleVehiclesEvent'\n                deassignFromTripEvent: '#/components/schemas/assignToTripEvent'\n                assignDriverEvent: '#/components/schemas/deassignFromTripEvent'\n                deassignDriverEvent: '#/components/schemas/assignDriverEvent'\n                associateWithActorEvent: '#/components/schemas/deassignDriverEvent'\n                dissociateFromActorEvent: '#/components/schemas/associateWithActorEvent'\n                loadShipmentEvent: '#/components/schemas/dissociateFromActorEvent'\n                unloadShipmentEvent: '#/components/schemas/loadShipmentEvent'\n                receiveShipmentEvent: '#/components/schemas/unloadShipmentEvent'\n                releaseShipmentEvent: '#/components/schemas/receiveShipmentEvent'\n                linkTripsEvent: '#/components/schemas/releaseShipmentEvent'\n                coupleSensorEvent: '#/components/schemas/linkTripsEvent'\n                decoupleSensorEvent: '#/components/schemas/coupleSensorEvent'\n                cancelEvent: '#/components/schemas/decoupleSensorEvent'\n                cancelAllEntityEvents: '#/components/schemas/cancelEvent'\n                cancelGroupedEvents: '#/components/schemas/cancelAllEntityEvents'\n                ignoreEvent: '#/components/schemas/cancelGroupedEvents'\n    bundle_meta:\n      type: object\n      description: Meta-information about this bundle.\n      properties:\n        generator:\n          type: string\n          description: Description of the generator of this bundle\n          example: XYZ Planning software\n        creationTime:\n          type: string\n          format: date-time\n          description: Date and time this bundle was generated\n\n    bundled_entity:\n      type: object\n      description: Entity that is part of a `Bundle`.\n      properties:\n        entityType:\n          type: string\n          description: |\n            The type of entity. This is needed, since the type cannot be derived from the endpoint in a `Bundle`.\n          enum:\n            - vehicleEntity\n            - locationEntity\n            - tripEntity\n            - routeEntity\n            - shipmentEntity\n            - actorEntity\n            - constraintEntity\n            - sensorEntity\n      required:\n        - entityType\n      example:\n        entityType: vehicleEntity\n        id: 'https://api.opentripmodel.org/api/public/v4/vehicles/635f6bd2-2568-45d8-b4e0-312f563b87de'\n        externalIds:\n          - schema: 'https://opentripmodel.org/types/licensePlate/nl'\n            value: T-123-AB\n        vehicleType:\n          type: tractor\n        fuel:\n          type: diesel\n        maxLinks: 1\n\n    sensorEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/sensor'\n\n    vehicleEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/vehicle'\n\n    locationEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/location'\n\n    tripEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/trip'\n\n    routeEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/route'\n\n    shipmentEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/shipment'\n\n    actorEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/actor'\n\n    constraintEntity:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/bundled_entity'\n        - $ref: '#/components/schemas/constraint'\n\n    event:\n      type: object\n      description: Event\n      properties:\n        id:\n          type: string\n          format: uri\n          description: |\n            Uniquely identifies the `Event`. A URI can be assigned by the client or will be generated by the server if the client doesn't provide it.\n            Once assigned, the URI can't be changed. See [Unique Identifiers](/#section/Technical-notes/Unique-identifiers) for more information.\n          example: |\n            https://api.opentripmodel.org/api/public/v4/vehicles/96b65c0f-9692-4b46-bd08-cac21ecabcec/actual/events/ed592f10-a753-40d9-b015-dfeed7dc0681\n        groupingId:\n          type: string\n          description: |\n            When defining interfaces between different systems, sometimes one \"event\" in one system can lead to multiple OTM events. You might need to\n            be able to see which events originate to the same \"source\" event. Another use case for the `groupingId` is for displaying purposes. In a\n            GUI, it might be needed to visually group certain events. In these cases, the `groupingId` can be used.\n          example: 1f1aac39-437d-4098-aef7-ec720016b932\n        lifecyclePhase:\n          $ref: '#/components/schemas/lifecyclePhase'\n        involvedObjects:\n          type: array\n          description: |\n            A list of URI's, each one pointing to an endpoint representing an object that is involved in this `Event`. The maximum number of objects\n            is defined by the `Event`'s type.\n          items:\n            type: string\n            format: uri\n            example: |\n              https://api.opentripmodel.org/api/public/v4/locations/c4a788c7-d86a-4efe-95da-1e345bd73d67\n        type:\n          type: string\n          description: |\n            The type of the `Event`. Depending on this type, additional fields may be required for this object. See the main\n            [Event section](#tag/Event) for comprehensive documentation on the available event types, their meaning and their variables.\n          example: loadShipmentEvent\n        time:\n          type: string\n          format: date-time\n          description: |\n            The date and time this `Event` happens. The exact meaning depends on the `lifecyclePhase`:\n\n            - \"planned\" and \"projected\": The date and time this event is planned or projected to happen. This is always in the future.\n            - \"actual\": The date and time this event actually happens. This is always in the near past.\n            - \"realized\": The date and time this event did actually happen. This is always in the past.\n\n            All date-time values in OpenTripModel are UTC times, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) notation:\n            `YYYY-MM-DDThh:mm:ss.sssZ`. See the [Time values](/#section/Technical-notes/Time-values) section for details.\n        eventGenerationTime:\n          type: string\n          format: date-time\n          description: |\n            This field can optionally contain the date and time this event was generated. This can be useful e.g. for events in the `projected`\n            lifecycle phase, that typically are calculated. The generation (calculation) time can be an indicator for the relevance of the event.\n            The `eventGenerationTime` should always be in the past.\n\n            If the sender of an OTM event does not set the eventGenerationTime, the recipient may set it to the current time.\n\n            All date-time values in OpenTripModel are UTC times, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) notation:\n            `YYYY-MM-DDThh:mm:ss.sssZ`. See the [Time values](/#section/Technical-notes/Time-values) section for details.\n        reason:\n          type: string\n          description: |\n            Reason for or cause of this event.\n          example: There was a traffic jam.\n        remarks:\n          type: string\n          description: |\n            Remarks for this event.\n          example: The traffic lights weren't working\n        constraint:\n          description: |\n            In the context of an `Event`, a `Constraint` can be used to constrain the order of events. This can be useful if events don't have\n            any timestamp but you need to guarantee that a certain event occurs before another event. The only constraint types that are valid in\n            the context of an `Event` are:\n\n            - `eventOrderConstraint`;\n            - `andConstraint`;\n            - `orConstraint`;\n            - `constraintReference`.\n          oneOf:\n            - $ref: '#/components/schemas/constraintReference'\n            - $ref: '#/components/schemas/andConstraint'\n            - $ref: '#/components/schemas/notConstraint'\n            - $ref: '#/components/schemas/orConstraint'\n            - $ref: '#/components/schemas/sizeConstraint'\n            - $ref: '#/components/schemas/speedConstraint'\n            - $ref: '#/components/schemas/weightConstraint'\n            - $ref: '#/components/schemas/fuelTypeConstraint'\n            - $ref: '#/components/schemas/vehicleTypeConstraint'\n            - $ref: '#/components/schemas/routeConstraint'\n            - $ref: '#/components/schemas/dangerousGoodsConstraint'\n            - $ref: '#/components/schemas/numberOfVehiclesConstraint'\n            - $ref: '#/components/schemas/eventOrderConstraint'\n            - $ref: '#/components/schemas/sensorValueConstraint'\n            - $ref: '#/components/schemas/sensorUpdateFrequencyConstraint'\n            - $ref: '#/components/schemas/startDateTimeConstraint'\n            - $ref: '#/components/schemas/endDateTimeConstraint'\n            - $ref: '#/components/schemas/timeRangeConstraint'\n          discriminator:\n            propertyName: type\n            mapping:\n              constraintReference: '#/components/schemas/constraintReference'\n              andConstraint: '#/components/schemas/andConstraint'\n              notConstraint: '#/components/schemas/notConstraint'\n              orConstraint: '#/components/schemas/orConstraint'\n              sizeConstraint: '#/components/schemas/sizeConstraint'\n              speedConstraint: '#/components/schemas/speedConstraint'\n              weightConstraint: '#/components/schemas/weightConstraint'\n              fuelTypeConstraint: '#/components/schemas/fuelTypeConstraint'\n              vehicleTypeConstraint: '#/components/schemas/vehicleTypeConstraint'\n              routeConstraint: '#/components/schemas/routeConstraint'\n              dangerousGoodsConstraint: '#/components/schemas/dangerousGoodsConstraint'\n              numberOfVehiclesConstraint: '#/components/schemas/numberOfVehiclesConstraint'\n              eventOrderConstraint: '#/components/schemas/eventOrderConstraint'\n              sensorValueConstraint: '#/components/schemas/sensorValueConstraint'\n              sensorUpdateFrequencyConstraint: '#/components/schemas/sensorUpdateFrequencyConstraint'\n              startDateTimeConstraint: '#/components/schemas/startDateTimeConstraint'\n              endDateTimeConstraint: '#/components/schemas/endDateTimeConstraint'\n              timeRangeConstraint: '#/components/schemas/timeRangeConstraint'\n      required:\n        - type\n\n    updateEvent_location:\n      type: object\n      description: |\n        The location on which this event is taking place. Note that only inline (_ad hoc_) locations can be used. If you wish to refer to a predefined\n        `Location`, either publish the event on the particular `Location`'s endpoint or reference the particular `Location` in the `involvedObjects`\n        array. (This is changed since version 4.1. Before 4.1 it was possible to reference a `Location` here, but that turned out to be ambiguous.)\n\n        Note that it might seem superfluous to have a `location` inside a `location`; this structure is kept in place for backward compatibility\n        with OTM 4.0.\n      properties:\n        location:\n          $ref: '#/components/schemas/geoReference'\n\n    locationUpdateEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    sensorUpdateEvent:\n      allOf:\n      - $ref: '#/components/schemas/event'\n      - properties:\n          location:\n            $ref: '#/components/schemas/updateEvent_location'\n          sensorValue:\n            $ref: '#/components/schemas/valueWithUnit'\n        required:\n          - sensorValue\n\n    startEngineEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    stopEngineEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    restrictionWarningEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n        - properties:\n            warning:\n              type: string\n              description: Restriction warning description\n          required:\n            - warning\n\n    constraintViolationEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n            violatedConstraint:\n              $ref: '#/components/schemas/constraint'\n\n    trafficWarningEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n        - properties:\n            warning:\n              type: string\n              description: Traffic warning description\n          required:\n            - warning\n\n    startMovingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    stopMovingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    startWaitingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    stopWaitingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    startLoadingAndUnloadingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    stopLoadingAndUnloadingEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    pickupTimeWindowStartEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    pickupTimeWindowEndEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    deliveryTimeWindowStartEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    deliveryTimeWindowEndEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    coupleVehiclesEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    decoupleVehiclesEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    assignToTripEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    deassignFromTripEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    assignDriverEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    deassignDriverEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    associateWithActorEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            actor:\n              type: string\n              format: uri\n              description: |\n                Reference to the `Actor` to which the `involvedObjects` are to be associated\n              example: 'https://api.opentripmodel.org/api/public/v4/actors/45db6ed0-28a7-4e4a-baba-3d5f8d171103'\n            role:\n              type: string\n              description: |\n                The role of the `Actor` with respect to the `involvedObjects`. There are no pre-defined roles, and the role does not have any\n                special meaning in OpenTripModel.\n              example: owner\n\n    dissociateFromActorEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            actor:\n              type: string\n              format: uri\n              description: |\n                Reference to the `Actor` from which the `involvedObjects` are to be dissociated\n              example: |\n                https://api.opentripmodel.org/api/public/v4/actors/45db6ed0-28a7-4e4a-baba-3d5f8d171103\n            role:\n              type: string\n              description: |\n                The role of the `Actor` with respect to the `involvedObjects`. There are no pre-defined roles, and the role does not have any\n                special meaning in OpenTripModel.\n              example: owner\n\n    loadShipmentEvent:\n      description: |\n        This events models the loading of a `Shipment` in a `Vehicle`. This event often takes place at the same time as a `releaseShipmentEvent`.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n            placement:\n              type: string\n              description: |\n                Sometimes a `Vehicle` has multiple compartments, e.g. to have refridgerated zones with different temperatures. You can use the\n                placement value to specify if a `Shipment` should be loaded into a specific compartment of the `Vehicle`.\n              example: Compartment 1\n\n    unloadShipmentEvent:\n      description: |\n        This events models the unloading of a `Shipment` from a `Vehicle`. This event often takes place at the same time as a `receiveShipmentEvent`.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    receiveShipmentEvent:\n      description: |\n        This event models the reception of a `Shipment` at a `Location`. This event often takes place at the same time as a `unloadShipmentEvent`.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    releaseShipmentEvent:\n      description: |\n        This event models the release (for pick up) of a `Shipment` at a `Location`. This event often takes place at the same time as a\n        `loadShipmentEvent`.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            location:\n              $ref: '#/components/schemas/updateEvent_location'\n\n    linkTripsEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    coupleSensorEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    decoupleSensorEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    cancelEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    cancelAllEntityEvents:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n    cancelGroupedEvents:\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - properties:\n            cancelledGroupingIds:\n              type: array\n              description: |\n                All events with the given `groupingId`s will be cancelled.\n              items:\n                type: string\n                example: ceb70302-4379-481c-9591-2c42198a9ac7\n              example:\n                - a52680d3-18d5-4ad5-baed-ba85bd4ce8dc\n                - 6ebdb45e-d82d-41df-9554-0a1166db9a05\n\n    ignoreEvent:\n      allOf:\n        - $ref: '#/components/schemas/event'\n\n\n    lifecyclePhase:\n      type: object\n      description: |\n        Lifecycle phase, can be one of \"planned\", \"projected\", \"actual\" or \"realized\". All entities except `Event` exist in all lifecycle phases.\n        The events on an entity differ depending on the lifecycle phase. E.g. a vehicle in the \"planned\" lifecycle phase has different events compared\n        to the same vehicle in the \"actual\" phase.\n\n        \u003e Note that, when `PUT`-ing a new event, you always `PUT` to an endpoint specific to the lifecycle phase. Thus, the lifecycle phase field\n          is not required when `PUT`-ing an event. When `GET`-ing an event, the OTM-server will always add the field, so you can see the lifecycle\n          phase in the response. It is allowed to add a redundant `lifecyclePhase` field to an event when `PUT`-ing it. Make sure the contents of that\n          field correspond to the endpoint you `PUT` to, otherwise the OTM-server might respond with a `400 - Bad Request` error.\n      properties:\n        phase:\n          type: string\n          description: phase in the lifecycle\n          enum:\n            - planned\n            - projected\n            - actual\n            - realized\n      example:\n        phase: actual\n\n    valueWithUnit:\n      type: object\n      description: Value with unit\n      properties:\n        value:\n          type: number\n          description: value in the given unit\n          example: 42\n        unit:\n          type: string\n          description: measurement unit of this value\n          example: kg\n      required:\n        - unit\n        - value\n\n    dimensions:\n      type: object\n      description: Dimensions of an object.\n      properties:\n        width:\n          $ref: '#/components/schemas/valueWithUnit'\n        height:\n          $ref: '#/components/schemas/valueWithUnit'\n        length:\n          $ref: '#/components/schemas/valueWithUnit'\n      required:\n        - width\n        - height\n        - length\n\n    idReference:\n      type: object\n      description: |\n        Reference to an ID of an object in another system or according to another standard.\n      properties:\n        schema:\n          type: string\n          format: uri\n          description: |\n            URI, uniquely identifying the scheme of the identifier. Examples:\n\n            - `http://www.gs1.org/gln`, **[Global Location Number](http://en.wikipedia.org/wiki/Global_Location_Number)**: See\n              http://en.wikipedia.org/wiki/Global_Location_Number and http://www.gs1.org/gln.\n\n            - `https://opentripmodel.org/types/licensePlate/{countryCode}`, **License plate**: Licence plate identifier. Use the\n              [international vehicle registration code](https://en.wikipedia.org/wiki/List_of_international_vehicle_registration_codes) in the URI,\n\n            - `https://opentripmodel.org/types/name`, **Name**: Just a name\n\n            - `https://opentripmodel.org/types/kvknummer`, **Dutch Chamber of Commerce number**: Can be used to identify a company.\n\n            - `http://www.gs1.org/gsin`, **GSIN**, [Global Shipment Identification Number](http://www.gs1.org/gsin) - identifies a shipment, according\n              to the [GS1 standard](https://en.wikipedia.org/wiki/GS1).\n\n            - `http://www.gs1.org/sscc`, **SSCC**, [Serial Shipping Container Code](http://www.gs1.org/sscc) - identifies a container within a\n              shipment, in case a shipment consists of more than one container, according to the [GS1 standard](https://en.wikipedia.org/wiki/GS1).\n\n            - `http://www.gs1.org/gtin`, **GTIN**, [Global Trade Item Number](http://www.gs1.org/gtin), identifies an item in a container within a\n              shipment, according to the [GS1 standard](https://en.wikipedia.org/wiki/GS1).\n\n            \u003e **Note** that the list above is just a list of examples. E.g. in case of shipments, OpenTripModel doesn't define the granularity of a\n              `Shipment`, while the GS1-references might suggest otherwise. In GS1 terms, a `Shipment` in OpenTripModel can either be a _Shipment_,\n              or a _Shipping Container_ or a _Trade Item_ or neither of those. It all depends on the needs of the logistics operation that is to be\n              modeled in OpenTripModel.\n\n            Also note that uniqueness of external ID's should not be enforced by an OpenTripModel server. External ID's are for reference only.\n          example: 'https://opentripmodel.org/types/licensePlate/nl'\n        value:\n          type: string\n          description: The unique identifier (ID) in the format defined by the schema.\n          example: AB-12-CD\n        uri:\n          type: string\n          format: uri\n          description: |\n            The (optional) URI that can be used to get additional information about the referenced identifier in an external system.\n          example: 'https://www.kvk.nl/zoeken/#!zoeken\u0026q=57084173'\n      required:\n        - schema\n        - value",
			"canonicalURL": "/github.com/rapi-doc/RapiDoc@3cc2bcc742fa84f1207e9b460032750bdada228d/-/blob/docs/specs/many-oneof.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rapi-doc/RapiDoc/blob/3cc2bcc742fa84f1207e9b460032750bdada228d/docs/specs/many-oneof.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/constraints/{uuid}/{lifecycle}/events\": get: responses: 200: contents: application/json: generate schema: item: field constraint: oneOf: collect variants: oneOf[2]: allOf: field not: allOf: schema type mismatch:  and object"
}