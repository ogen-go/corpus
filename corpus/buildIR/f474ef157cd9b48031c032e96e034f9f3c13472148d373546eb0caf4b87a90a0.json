{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/r-lib/webfakes"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "inst/examples/httpbin/openapi.yaml",
			"byteSize": 30197,
			"content": "openapi: 3.0.0\ninfo:\n  title: webfakes::httpbin_app() API\n  version: 1.0.0\n  contact:\n    email: csardi.gabor@gmail.com\n  license:\n    name: The MIT License\n    url: 'https://opensource.org/licenses/MIT'\n  description: |\n    This is a webfakes web app for HTTP testing in R packages.\n    It implements the https://httpbin.org API\n\npaths:\n  /get:\n    get:\n      tags:\n      - HTTP methods\n      summary: GET request\n      description: |\n        An endpoint to make a GET request agains. It returns the request's\n        parameters and the request headers, in JSON.\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/get'\n  /delete:\n    delete:\n      tags:\n      - HTTP methods\n      summary: DELETE request\n      description: |\n        Endpoint to make DELETE requests againts.\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n  /patch:\n    patch:\n      tags:\n      - HTTP methods\n      summary: PATCH request\n      description: |\n        Endpoint to make PATCH requests against.\n      responses:\n        '200':\n          description:  Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n  /post:\n    post:\n      tags:\n      - HTTP methods\n      summary: POST request\n      description: |\n        Endpoints to make a POST request against.\n      responses:\n        '200':\n          description:  Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n  /put:\n    put:\n      tags:\n      - HTTP methods\n      summary: PUT request\n      description: |\n        Endpoints to make a PUT request against.\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n\n  '/basic-auth/:user/:password':\n    parameters:\n    - name: user\n      in: path\n      required: true\n      description: User name.\n      schema:\n        type: string\n    - name: password\n      in: path\n      required: true\n      description: Password.\n      schema:\n        type: string\n    - name: Authorization\n      in: header\n      schema:\n        type: string\n      description: |\n        Base64 encoded user name and password. See \u003chttps://en.wikipedia.org/wiki/Basic_access_authentication#Client_side\u003e for the protocol.\n    get:\n      tags:\n      - Auth\n      summary: Basic authentication.\n      description: |\n        Basic authentication with specified user and password\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authenticated:\n                    type: boolean\n                  user:\n                    type: string\n                    example: \"Aladdin\"\n        '401':\n          description: Failed authentication.\n          headers:\n            WWW-Authenticate:\n              description: Contains the authentication realm.\n              schema:\n                type: string\n                pattern: '^Basic realm=\".*\"'\n\n  '/bearer':\n    parameters:\n    - name: Authorization\n      in: header\n      schema:\n        type: string\n        pattern: '^Bearer '\n    get:\n      tags:\n      - Auth\n      summary: Bearer authentication.\n      description: |\n        Checks is that a token is supplied in the `Authorization` header.\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authenticated:\n                    type: boolean\n                  token:\n                    type: string\n        '401':\n          description: Failed authentication.\n          headers:\n            WWW-Authenticate:\n              description: Contains the authentication realm.\n              schema:\n                type: string\n                pattern: '^bearer$'\n\n  '/status/:status':\n    parameters:\n    - $ref: '#/components/parameters/status'\n    delete:\n      tags:\n      - Status codes\n      summary: Return the specified HTTP status code, works for all HTTP verbs.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`. See\n        \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes\u003e for more\n        about status codes.\n      responses:\n        '100':\n          description: Informational responses.\n        '200':\n          description: Success.\n        '300':\n          description: Redirection.\n        '400':\n          description: Client errors.\n        '500':\n          description: Server errors.\n    get:\n      tags:\n      - Status codes\n      summary: Return the specified HTTP status code, works for all HTTP verbs.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`. See\n        \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes\u003e for more\n        about status codes.\n      responses:\n        '100':\n          description: Informational responses.\n        '200':\n          description: Success.\n        '300':\n          description: Redirection.\n        '400':\n          description: Client errors.\n        '500':\n          description: Server errors.\n    patch:\n      tags:\n      - Status codes\n      summary: Return the specified HTTP status code, works for all HTTP verbs.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`. See\n        \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes\u003e for more\n        about status codes.\n      responses:\n        '100':\n          description: Informational responses.\n        '200':\n          description: Success.\n        '300':\n          description: Redirection.\n        '400':\n          description: Client errors.\n        '500':\n          description: Server errors.\n    post:\n      tags:\n      - Status codes\n      summary: Return the specified HTTP status code, works for all HTTP verbs.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`. See\n        \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes\u003e for more\n        about status codes.\n      responses:\n        '100':\n          description: Informational responses.\n        '200':\n          description: Success.\n        '300':\n          description: Redirection.\n        '400':\n          description: Client errors.\n        '500':\n          description: Server errors.\n    put:\n      tags:\n      - Status codes\n      summary: Return the specified HTTP status code, works for all HTTP verbs.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`. See\n        \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes\u003e for more\n        about status codes.\n      responses:\n        '100':\n          description: Informational responses.\n        '200':\n          description: Success.\n        '300':\n          description: Redirection.\n        '400':\n          description: Client errors.\n        '500':\n          description: Server errors.\n\n  '/headers':\n    get:\n      tags:\n      - Request inspection\n      summary: HTTP request headers.\n      responses:\n        '200':\n          description: The requests's HTTP headers.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  headers:\n                    type: object\n\n  '/ip':\n    get:\n      tags:\n      - Request inspection\n      summary: IP address of the client.\n      responses:\n        '200':\n          description: |\n            The IP address of the client, usually `127.0.0.1`, as the webfakes\n            server runs on the localhost.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  origin:\n                    type: string\n\n  '/user-agent':\n    get:\n      tags:\n      - Request inspection\n      summary: The client's user agent.\n      responses:\n        '200':\n          description: The content of the `User-Agent` HTTP request header.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  'user-agent':\n                    type: string\n\n  '/etag/:etag':\n    parameters:\n    - name: etag\n      in: path\n      required: true\n      description: Assumed ETag value.\n      schema:\n        type: string\n    get:\n      tags:\n      - Response inspection\n      summary: Work with ETags.\n      description: |\n        Assumes the specified `etag` parameter as the `ETag` header.\n        * If a matching tag is supplied in the `If-None-Match` header, then\n          it returns with HTTP status code 304.\n        * If a non-matching `If-Match` header is supplied, then it return with\n          HTTP status code 412.\n        * Otherwise it returns with a JSON body and status 200.\n\n        See \u003chttps://en.wikipedia.org/wiki/HTTP_ETag\u003e for more about `ETag`\n        headers.\n      responses:\n        '200':\n          description: |\n            Non-matching `If-Non-Match` or matching `If-Match`, or no\n            such headers at all.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/get'\n          headers:\n            ETag:\n              description: The supplied `etag` value.\n              schema:\n                type: string\n        '304':\n          description: |\n            Matching `If-Non-Match` header.\n        '412':\n          description: |\n            Non-matchinf `If-Match` header.\n\n  '/response-headers':\n    parameters:\n    - in: query\n      name: params\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n    get:\n      tags:\n      - Response inspection\n      summary: Set response headers.\n      description: |\n        Set response headers from the passed query parameters. The same\n        parameter migth be specified multiple times to create the same HTTP\n        header multiple times.\n      responses:\n        '200':\n          description: |\n            The passed query parameters are also returned as a JSON response.\n          content:\n            application/json:\n              schema:\n                type: object\n    post:\n      tags:\n      - Response inspection\n      summary: Set response headers.\n      description: |\n        Set response headers from the passed query parameters. The same\n        parameter migth be specified multiple times to create the same HTTP\n        header multiple times.\n      responses:\n        '200':\n          description: |\n            The passed query parameters are also returned as a JSON response.\n          content:\n            application/json:\n              schema:\n                type: object\n\n  '/deny':\n    get:\n      tags:\n      - Response formats\n      summary: A simple page that is denied for robots.\n      description: |\n        This exists in conjunction with `/robots.txt` which disallows this page.\n      responses:\n        '200':\n          description: A simple page.\n          content:\n            text/plain:\n              schema:\n                type:\n                  string\n                example:\n                  'Example content.'\n\n  '/gzip':\n    get:\n      tags:\n      - Response formats\n      summary: Send gzip encoded data.\n      responses:\n        '200':\n          description: Some gzipped JSON.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n          headers:\n            'Content-Encoding':\n              description: Set to `gzip`.\n              schema:\n                type: string\n                pattern: '^gzip$'\n\n  '/encoding/utf8':\n    get:\n      tags:\n      - Response formats\n      summary: Send UTF-8 enconded data.\n      responses:\n        '200':\n          description: HTML with a lot of UTF-8.\n          content:\n            text/html:\n              schema:\n                type: string\n          headers:\n            'Content-Type':\n              description: Set to `text/html; charset=utf-8`.\n              schema:\n                type: string\n\n  '/html':\n    get:\n      tags:\n      - Response formats\n      summary: Send an HTML page.\n      responses:\n        '200':\n          description: An example HTML page.\n          content:\n            text/html:\n              schema:\n                type: string\n\n  '/json':\n    get:\n      tags:\n      - Response formats\n      summary: Send a JSON document.\n      responses:\n        '200':\n          description: An example JSON document.\n          content:\n            application/json:\n              schema:\n                type: object\n\n  '/robots.txt':\n    get:\n      tags:\n      - Response formats\n      summary: Send example `robots.txt` rules.\n      description: It will not allow the `/deny` endpoint.\n      responses:\n        '200':\n          description: An example `robots.txt` file.\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  '/xml':\n    get:\n      tags:\n      - Response formats\n      summary: Send an XML document.\n      responses:\n        '200':\n          description: An example XML document.\n          content:\n            application/xml:\n              schema:\n                type: string\n\n  '/base64/:value':\n    parameters:\n    - name: value\n      in: path\n      required: true\n      description: Assumed ETag value.\n      schema:\n        type: string\n    get:\n      tags:\n      - Dynamic data\n      summary: Base64 decoder\n      description: Base64 decode the supplied value and echo it back.\n      responses:\n        '200':\n          description: Decoded base64.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n\n  '/bytes/:n':\n    parameters:\n    - name: n\n      in: path\n      required: true\n      description: Number of bytes, maximum 10000.\n      schema:\n        type: integer\n    get:\n      tags:\n      - Dynamic data\n      summary: Random bytes.\n      responses:\n        '200':\n          description: Random bytes.\n          content:\n            application/octest-stream:\n              schema:\n                type:\n                  string\n\n  '/delay/:secs':\n    parameters:\n    - name: secs\n      in: path\n      required: true\n      description: Number of seconds, fractions are supported.\n      schema:\n        type: number\n    get:\n      tags:\n      - Dynamic data\n      summary: Delayed response.\n      description: |\n        Wait for the specified number of seconds before sending the response.\n      responses:\n        '200':\n          description: JSON response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n\n  '/drip':\n    parameters:\n    - name: duration\n      in: query\n      description: Number of seconds for the whole response.\n      schema:\n        type: number\n        default: 2\n    - name: numbytes\n      in: query\n      description: Number of bytes to return.\n      schema:\n        type: integer\n        default: 10\n    - name: code\n      in: query\n      description: HTTP status code to return with.\n      schema:\n        type: integer\n        default: 200\n    - name: delay\n      in: query\n      description: Initial delay, in seconds. Zero means no delay.\n      schema:\n        type: number\n        default: 0\n    get:\n      tags:\n      - Dynamic data\n      summary: Drip bytes\n      description: |\n        Drip the specified number of bytes over the specified number of seconds,\n        potentially after some initial delay.\n      responses:\n        '200':\n          description: |\n            Data of the specified length. The status code is not neccesarily\n            200, but the one specified in the `code` query parameter.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n\n\n  '/stream-bytes':\n    parameters:\n    - name: n\n      in: path\n      required: true\n      description: Number of bytes, maximum 102400.\n      schema:\n        type: integer\n    - name: seed\n      in: query\n      description: Random seed.\n      schema:\n        type: number\n        default: 42\n    - name: chunk-size\n      in: query\n      description: |\n        Size of a chunked for the chunked encoding. The last chunk migh be\n        shorter than his.\n      schema:\n        type: integer\n        default: 10240\n    get:\n      tags:\n      - Dynamic data\n      summary: Stream in chunks.\n      description: |\n        Streams n random bytes generated with given seed, at given chunk\n        size per packet.\n      responses:\n        '200':\n          description: Random bytes.\n          content:\n            application/octest-stream:\n              schema:\n                type:\n                  string\n\n  '/uuid':\n    get:\n      tags:\n      - Dynamic data\n      summary: Random UUID.\n      description: It is pseudo-random, and not secure.\n      responses:\n        '200':\n          description: Random UUID v4 in JSON.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uuid:\n                    type: string\n                    example: \"ee4610df-3b7b-4624-8ce9-da6975b3e9f1\"\n\n  '/image':\n    parameters:\n    - name: Accept\n      in: header\n      description: Accepted image content type.\n      schema:\n        type: string\n    get:\n      tags:\n      - Images\n      summary: Return an image.\n      description: |\n        It selects the format according to the `Accept` request header.\n        Supported formats: `image/jpeg`, `image/png`, `image/svg+xml`,\n        `image/webp`, `image/*`.\n      responses:\n        '200':\n          description: Image file.\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/svg+xml:\n              schema:\n                type: string\n                format: binary\n            image/webp:\n              schema:\n                type: string\n                format: binary\n        '406':\n          description: The client did not request a supported media type.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Client did not request a supported media type.\"\n                  accept:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                    - \"image/jpeg\"\n                    - \"image/png\"\n                    - \"image/svg+xml\"\n                    - \"image/webp\"\n\n  '/image/:format':\n    parameters:\n    - name: format\n      description: Image format. May be `jpeg`, `png`, `svg` or `webp`.\n      in: path\n      schema:\n        type: string\n      required: true\n    get:\n      tags:\n      - Images\n      summary: Return an image of the specified format.\n      responses:\n        '200':\n          description: Image file.\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/svg+xml:\n              schema:\n                type: string\n                format: binary\n            image/webp:\n              schema:\n                type: string\n                format: binary\n\n  '/absolute-redirect/:n':\n    parameters:\n    - name: n\n      in: path\n      required: true\n      description: Number of times to redirect. Maximum is five.\n      schema:\n        type: integer\n    get:\n      tags:\n      - Redirects\n      summary: Redirect to an absolute URL, n times.\n      responses:\n        '302':\n          description: Redirect.\n\n  '/relative-redirect/:n':\n    parameters:\n    - name: n\n      in: path\n      description: Number of times to redirect. Maximum is five.\n      schema:\n        type: integer\n      required: true\n    get:\n      tags:\n      - Redirects\n      summary: Redirect to a relative URL, n times.\n      responses:\n        '302':\n          description: Redirect.\n\n  '/redirect-to':\n    parameters:\n    - name: url\n      in: query\n      description: URL to redirect to.\n      schema:\n        type: string\n    - name: status_code\n      in: query\n      description: HTTP status code to use for the redirection.\n      schema:\n        type: integer\n        default: 302\n    delete:\n      tags:\n      - Redirects\n      summary: Redirect to an URL.\n      description: |\n        See \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\u003e\n        for details.\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '300':\n          description: Multiple Choices.\n        '301':\n          description: Moved Permanently.\n        '302':\n          description: Found (Previously \"Moved temporarily\")\n        '303':\n          description: See Other (since HTTP/1.1)\n        '304':\n          description: Not Modified (RFC 7232)\n        '305':\n          description: Use Proxy (since HTTP/1.1)\n        '306':\n          description: Switch Proxy\n        '307':\n          description: Temporary Redirect (since HTTP/1.1)\n        '308':\n          description: Permanent Redirect (RFC 7538)\n    get:\n      tags:\n      - Redirects\n      summary: Redirect to an URL.\n      description: |\n        See \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\u003e\n        for details.\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '300':\n          description: Multiple Choices.\n        '301':\n          description: Moved Permanently.\n        '302':\n          description: Found (Previously \"Moved temporarily\")\n        '303':\n          description: See Other (since HTTP/1.1)\n        '304':\n          description: Not Modified (RFC 7232)\n        '305':\n          description: Use Proxy (since HTTP/1.1)\n        '306':\n          description: Switch Proxy\n        '307':\n          description: Temporary Redirect (since HTTP/1.1)\n        '308':\n          description: Permanent Redirect (RFC 7538)\n    patch:\n      tags:\n      - Redirects\n      summary: Redirect to an URL.\n      description: |\n        See \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\u003e\n        for details.\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '300':\n          description: Multiple Choices.\n        '301':\n          description: Moved Permanently.\n        '302':\n          description: Found (Previously \"Moved temporarily\")\n        '303':\n          description: See Other (since HTTP/1.1)\n        '304':\n          description: Not Modified (RFC 7232)\n        '305':\n          description: Use Proxy (since HTTP/1.1)\n        '306':\n          description: Switch Proxy\n        '307':\n          description: Temporary Redirect (since HTTP/1.1)\n        '308':\n          description: Permanent Redirect (RFC 7538)\n    post:\n      tags:\n      - Redirects\n      summary: Redirect to an URL.\n      description: |\n        See \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\u003e\n        for details.\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '300':\n          description: Multiple Choices.\n        '301':\n          description: Moved Permanently.\n        '302':\n          description: Found (Previously \"Moved temporarily\")\n        '303':\n          description: See Other (since HTTP/1.1)\n        '304':\n          description: Not Modified (RFC 7232)\n        '305':\n          description: Use Proxy (since HTTP/1.1)\n        '306':\n          description: Switch Proxy\n        '307':\n          description: Temporary Redirect (since HTTP/1.1)\n        '308':\n          description: Permanent Redirect (RFC 7538)\n    put:\n      tags:\n      - Redirects\n      summary: Redirect to an URL.\n      description: |\n        See \u003chttps://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\u003e\n        for details.\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '300':\n          description: Multiple Choices.\n        '301':\n          description: Moved Permanently.\n        '302':\n          description: Found (Previously \"Moved temporarily\")\n        '303':\n          description: See Other (since HTTP/1.1)\n        '304':\n          description: Not Modified (RFC 7232)\n        '305':\n          description: Use Proxy (since HTTP/1.1)\n        '306':\n          description: Switch Proxy\n        '307':\n          description: Temporary Redirect (since HTTP/1.1)\n        '308':\n          description: Permanent Redirect (RFC 7538)\n\n  '/anything':\n    delete:\n      tags:\n      - Anything\n      summary: Returns anything passed in request data.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '200':\n          description: The request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n    get:\n      tags:\n      - Anything\n      summary: Returns anything passed in request data.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '200':\n          description: The request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n    patch:\n      tags:\n      - Anything\n      summary: Returns anything passed in request data.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '200':\n          description: The request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n    post:\n      tags:\n      - Anything\n      summary: Returns anything passed in request data.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '200':\n          description: The request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n    put:\n      tags:\n      - Anything\n      summary: Returns anything passed in request data.\n      description: |\n        This endpoint works for these other HTTP verbs as well, the same\n        way as for `GET`: `CONNECT`, `DELETE`, `HEAD`, `MKCOL`, `OPTIONS`,\n        `PATCH`, `POST`, `PROPFIND`, `PUT`, `REPORT`.\n      responses:\n        '200':\n          description: The request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/common'\n\ncomponents:\n  parameters:\n    status:\n      name: status\n      in: path\n      required: true\n      description: Status code.\n      schema:\n        type: integer\n  schemas:\n    get:\n      properties:\n        args:\n          type: object\n        headers:\n          type: object\n        origin:\n          type: string\n        path:\n          type: string\n        url:\n          type: string\n      required:\n        - args\n        - headers\n        - origin\n        - path\n        - url\n\n    common:\n      properties:\n        args:\n          type: object\n        data:\n          type: object\n        files:\n          type: object\n        form:\n          type: object\n        headers:\n          type: object\n        json:\n          type: object\n        method:\n          type: string\n        path:\n          type: string\n        origin:\n          type: string\n        url:\n          type: string\n",
			"canonicalURL": "/github.com/r-lib/webfakes@5472d75328282ec48f48a816ee8b9ef5ee0a416b/-/blob/inst/examples/httpbin/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/r-lib/webfakes/blob/5472d75328282ec48f48a816ee8b9ef5ee0a416b/inst/examples/httpbin/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/etag/:etag\": get: responses: code 200: content: \"application/json\": wrap response type: reference \"#/components/schemas/get\" type name conflict: \"GetHeaders\"",
	"NotImplemented": [
		"complex application/octet-stream",
		"unsupported content types"
	]
}