{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/redhat-developer/app-services-sdk-java"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "packages/registry-management-sdk/api/openapi.yaml",
			"byteSize": 23725,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: rhosak-eval-support@redhat.com\n    name: Red Hat Hybrid Cloud Console\n    url: https://console.redhat.com/application-services/service-registry/\n  description: Service Registry Management API is a REST API for managing Service\n    Registry instances. Service Registry is a datastore for event schemas and API\n    designs, which is based on the open source Apicurio Registry project.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  title: Service Registry Management API\n  version: 0.0.6\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- name: Errors\n- name: Registries\npaths:\n  /api/serviceregistry_mgmt/v1/registries:\n    description: Manage the list of all Registry instances\n    get:\n      description: Get the list of all Registry instances\n      operationId: getRegistries\n      parameters:\n      - description: Page index.\n        examples:\n          page:\n            value: 0\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n        style: form\n      - description: Number of items in each page.\n        examples:\n          size:\n            value: 100\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          maximum: 500\n          minimum: 1\n          type: integer\n        style: form\n      - description: \"Specifies the order by criteria. The syntax of this parameter\\\n          \\ is\\nsimilar to the syntax of the _order by_ clause of an SQL statement.\\n\\\n          Each query can be ordered by any of the request fields.\\nFor example, to\\\n          \\ retrieve all Registry instances ordered by their name:\\n\\n```sql\\nname\\\n          \\ asc\\n```\\n\\nOr to retrieve all Registry instances ordered by their name\\\n          \\ _and_ created date:\\n\\n```sql\\nname asc, created_at asc\\n```\\n\\nIf the\\\n          \\ parameter isn't provided, or if the value is empty, \\nthe results are\\\n          \\ ordered by name.\"\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: \"Search criteria.\\n\\nThe syntax of this parameter is similar\\\n          \\ to the syntax of the _where_ clause of an\\nSQL statement. Allowed fields\\\n          \\ in the search are: `name`, `status`. Allowed comparators are `=` or `LIKE`.\\n\\\n          Allowed joins are `AND` and `OR`, however there is a limit of max 10 joins\\\n          \\ in the search query.\\n\\nExamples:\\n\\nTo retrieve a request with name equal\\\n          \\ `my-registry`, the value should be:\\n\\n```\\nname = my-registry \\n```\\n\\\n          \\nTo retrieve a request with its name starting with `my`, the value should\\\n          \\ be:\\n\\n```\\nname like my%25\\n```\\n\\nIf the parameter isn't provided, or\\\n          \\ if the value is empty, all the Registry instances\\nthat the user has permission\\\n          \\ to see are returned.\\n\\nNote: If the query is invalid, an error is returned.\\n\"\n        examples:\n          search:\n            value: name = my-registry and status = AVAILABLE\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistryList'\n          description: A successful response.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid.\n        \"403\":\n          content:\n            application/json:\n              examples:\n                \"403Example\":\n                  $ref: '#/components/examples/403Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorized to access the service.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred.\n      security:\n      - Bearer: []\n      tags:\n      - Registries\n      x-accepts: application/json\n    post:\n      description: Create a new Registry instance\n      operationId: createRegistry\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistryCreate'\n        description: A new `Registry` instance to be created.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registry'\n          description: A successful response. The full request to create a new `Registry`\n            instance is processed asynchronously. The user should verify the result\n            of the operation by reading the `status` property of the created `Registry`\n            instance.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid.\n        \"403\":\n          content:\n            application/json:\n              examples:\n                \"403Example\":\n                  $ref: '#/components/examples/403Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorized to access the service.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred.\n      security:\n      - Bearer: []\n      tags:\n      - Registries\n      x-contentType: application/json\n      x-accepts: application/json\n  /api/serviceregistry_mgmt/v1/registries/{id}:\n    delete:\n      description: 'Deletes an existing `Registry` instance and all of the data that\n        it stores. Important: Users should export the registry data before deleting\n        the instance, e.g., using the Service Registry web console, core REST API,\n        or `rhoas` CLI.'\n      operationId: deleteRegistry\n      parameters:\n      - description: A unique identifier for a `Registry` instance.\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: Successful response.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"403\":\n          content:\n            application/json:\n              examples:\n                \"403Example\":\n                  $ref: '#/components/examples/403Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorized to access the service.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Service Registry instance with the specified id exists\n      security:\n      - Bearer: []\n      summary: Delete a Registry instance\n      tags:\n      - Registries\n      x-accepts: application/json\n    description: Manage a specific Registry instance\n    get:\n      description: Gets the details of a single instance of a `Registry`.\n      operationId: getRegistry\n      parameters:\n      - description: A unique identifier for a `Registry` instance.\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registry'\n          description: Successful response - returns a single `Registry` instance.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid.\n        \"403\":\n          content:\n            application/json:\n              examples:\n                \"403Example\":\n                  $ref: '#/components/examples/403Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: User is not authorized to access the service.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Service Registry instance with specified id exists.\n      security:\n      - Bearer: []\n      summary: Get a Registry instance\n      tags:\n      - Registries\n      x-accepts: application/json\n  /api/serviceregistry_mgmt/v1/errors/{id}:\n    description: Get information about a specific error type. This is not an instance\n      of a specific error.\n    get:\n      description: Get information about a specific error type\n      operationId: getError\n      parameters:\n      - description: A unique identifier for an error type.\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          minimum: 1\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Successful response - returns a single `Error`.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No Service Registry with the specified id exists.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred.\n      tags:\n      - Errors\n      x-accepts: application/json\n  /api/serviceregistry_mgmt/v1/errors:\n    description: Get a list of error types that can be returned by this API. These\n      are not instances of specific errors.\n    get:\n      description: Get the list of all errors\n      operationId: getErrors\n      parameters:\n      - description: Page index.\n        examples:\n          page:\n            value: 0\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          minimum: 0\n          type: integer\n        style: form\n      - description: Number of items in each page.\n        examples:\n          size:\n            value: 100\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          maximum: 500\n          minimum: 1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorList'\n          description: A successful response.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      tags:\n      - Errors\n      x-accepts: application/json\n  /api/serviceregistry_mgmt/v1/status:\n    description: Retrieves the status of resources e.g., whether we have reached maximum\n      service capacity\n    get:\n      description: Get the service status\n      operationId: getServiceStatus\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceStatus'\n          description: Successfully returned service status.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal error retrieving service status.\n      security:\n      - Bearer: []\n      x-accepts: application/json\ncomponents:\n  examples:\n    \"404Example\":\n      value:\n        id: \"404\"\n        kind: Error\n        href: /api/managed-services-api/v1/errors/7\n        code: MGD-SERV-API-7\n        reason: The requested resource doesn't exist.\n    \"401Example\":\n      value:\n        id: \"11\"\n        kind: Error\n        href: /api/serviceregistry_mgmt/v1/errors/11\n        code: CLOUD-SERV-API-11\n        reason: 'Unable to verify JWT token: Required authorization token not found.'\n        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD\n    \"403Example\":\n      value:\n        id: \"4\"\n        kind: Error\n        href: /api/serviceregistry_mgmt/v1/errors/4\n        code: MGD-SERV-API-4\n        reason: User 'foo-bar' is not authorized to access the service.\n        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC\n    \"500Example\":\n      value:\n        id: \"9\"\n        kind: Error\n        href: /api/serviceregistry_mgmt/v1/errors/9\n        code: MGD-SERV-API-9\n        reason: Unspecified error.\n        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW\n  parameters:\n    id:\n      description: The id of record.\n      explode: false\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n      style: simple\n    page:\n      description: Page index.\n      examples:\n        page:\n          value: 0\n      explode: true\n      in: query\n      name: page\n      required: false\n      schema:\n        minimum: 0\n        type: integer\n      style: form\n    size:\n      description: Number of items in each page.\n      examples:\n        size:\n          value: 100\n      explode: true\n      in: query\n      name: size\n      required: false\n      schema:\n        maximum: 500\n        minimum: 1\n        type: integer\n      style: form\n    orderBy:\n      description: \"Specifies the order by criteria. The syntax of this parameter\\\n        \\ is\\nsimilar to the syntax of the _order by_ clause of an SQL statement.\\n\\\n        Each query can be ordered by any of the request fields.\\nFor example, to retrieve\\\n        \\ all Registry instances ordered by their name:\\n\\n```sql\\nname asc\\n```\\n\\\n        \\nOr to retrieve all Registry instances ordered by their name _and_ created\\\n        \\ date:\\n\\n```sql\\nname asc, created_at asc\\n```\\n\\nIf the parameter isn't\\\n        \\ provided, or if the value is empty, \\nthe results are ordered by name.\"\n      examples:\n        orderBy:\n          value: name asc\n      explode: true\n      in: query\n      name: orderBy\n      required: false\n      schema:\n        type: string\n      style: form\n    search:\n      description: \"Search criteria.\\n\\nThe syntax of this parameter is similar to\\\n        \\ the syntax of the _where_ clause of an\\nSQL statement. Allowed fields in\\\n        \\ the search are: `name`, `status`. Allowed comparators are `=` or `LIKE`.\\n\\\n        Allowed joins are `AND` and `OR`, however there is a limit of max 10 joins\\\n        \\ in the search query.\\n\\nExamples:\\n\\nTo retrieve a request with name equal\\\n        \\ `my-registry`, the value should be:\\n\\n```\\nname = my-registry \\n```\\n\\n\\\n        To retrieve a request with its name starting with `my`, the value should be:\\n\\\n        \\n```\\nname like my%25\\n```\\n\\nIf the parameter isn't provided, or if the\\\n        \\ value is empty, all the Registry instances\\nthat the user has permission\\\n        \\ to see are returned.\\n\\nNote: If the query is invalid, an error is returned.\\n\"\n      examples:\n        search:\n          value: name = my-registry and status = AVAILABLE\n      explode: true\n      in: query\n      name: search\n      required: false\n      schema:\n        type: string\n      style: form\n  schemas:\n    ErrorList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ErrorList_allOf'\n    List:\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n        items:\n          items:\n            $ref: '#/components/schemas/ObjectReference'\n          type: array\n      required:\n      - items\n      - kind\n      - page\n      - size\n      - total\n      type: object\n    Error:\n      example:\n        reason: reason\n        code: code\n        kind: kind\n        operation_id: operation_id\n        id: id\n        href: href\n      properties:\n        reason:\n          type: string\n        operation_id:\n          type: string\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n        code:\n          type: string\n      required:\n      - code\n      - href\n      - id\n      - kind\n      - reason\n      type: object\n    RegistryList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/RegistryList_allOf'\n    RegistryStatusValue:\n      description: |\n        \"accepted\": Registry status when accepted for processing.\n\n        \"provisioning\": Registry status when provisioning a new instance.\n\n        \"ready\": Registry status when ready for use.\n\n        \"failed\": Registry status when the provisioning failed. When removing a Registry instance in this state,\n        the status transitions directly to \"deleting\".\n\n\n        \"deprovision\": Registry status when accepted for deprovisioning.\n\n        \"deleting\": Registry status when deprovisioning.\n      enum:\n      - accepted\n      - provisioning\n      - ready\n      - failed\n      - deprovision\n      - deleting\n      type: string\n    RegistryInstanceTypeValue:\n      description: |\n        \"standard\": Standard, full-featured Registry instance\n\n        \"eval\": Evaluation (Trial) instance, provided for a limited time\n      enum:\n      - standard\n      - eval\n      type: string\n    ServiceStatus:\n      description: Schema for the service status response body\n      example:\n        max_instances_reached: true\n      properties:\n        max_instances_reached:\n          description: Boolean property indicating if the maximum number of total\n            Registry instances have been reached, therefore creation of more instances\n            should not be allowed.\n          type: boolean\n      title: Root type for ServiceStatus\n      type: object\n    RegistryCreate:\n      description: Information used to create a new Service Registry instance in a\n        multi-tenant deployment.\n      example:\n        name: my-registry\n        description: This Registry instance is for a development environment only.\n      properties:\n        name:\n          description: User-defined Registry instance name. Required. Must be unique\n            within a given organization.\n          maxLength: 32\n          minLength: 1\n          pattern: '[a-z]([a-z0-9\\-]*[a-z0-9])?'\n          type: string\n        description:\n          description: User-provided description of the new Service Registry instance.\n            Not required.\n          maxLength: 255\n          type: string\n      required:\n      - name\n      title: Root type for RegistryCreate\n      type: object\n    ObjectReference:\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n      required:\n      - href\n      - id\n      - kind\n      type: object\n    Registry:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/Root_type_for_Registry'\n    ErrorList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Error'\n          type: array\n      type: object\n    RegistryList_allOf:\n      example:\n        kind: RegistryList\n        page: \"1\"\n        size: \"1\"\n        total: \"1\"\n        items:\n        - id: llmNteR4P7waRp5nJIReG\n          kind: serviceregistry\n          href: /api/serviceregistry_mgmt/v1/registries/llmNteR4P7waRp5nJIReG\n          name: sample-registry\n          status: ready\n          owner: some_id\n          registryUrl: https://somehost:433/t/12345\n          browserUrl: https://someuihost:443/registries/12345\n          created_at: 2020-01-01T00:00:00Z\n          updated_at: 2022-01-01T00:00:00Z\n          instance_type: standard\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Registry'\n          type: array\n      required:\n      - items\n      type: object\n    Root_type_for_Registry:\n      description: Service Registry instance in a multi-tenant deployment.\n      example:\n        id: \"42\"\n        name: my-registry\n        registryUrl: https://registry.apps.example.com/t/5213600b-afc9-487e-8cc3-339f4248d706\n        browserUrl: https://registry-ui.apps.example.com/t/5213600b-afc9-487e-8cc3-339f4248d706\n        status: provisioning\n        registryDeploymentId: 1\n        owner: ownername\n        updated_at: 2022-01-01T00:00:00Z\n        created_at: 2020-01-01T00:00:00Z\n        instance_type: standard\n      properties:\n        id:\n          type: string\n        status:\n          $ref: '#/components/schemas/RegistryStatusValue'\n        registryUrl:\n          type: string\n        browserUrl:\n          type: string\n        name:\n          description: User-defined Registry instance name. Does not have to be unique.\n          type: string\n        registryDeploymentId:\n          description: Identifier of a multi-tenant deployment, where this Service\n            Registry instance resides.\n          type: integer\n        owner:\n          description: Registry instance owner.\n          type: string\n        description:\n          description: Description of the Registry instance.\n          type: string\n        created_at:\n          description: ISO 8601 UTC timestamp.\n          format: date-time\n          type: string\n        updated_at:\n          description: ISO 8601 UTC timestamp.\n          format: date-time\n          type: string\n        instance_type:\n          $ref: '#/components/schemas/RegistryInstanceTypeValue'\n      required:\n      - created_at\n      - id\n      - instance_type\n      - name\n      - owner\n      - status\n      - updated_at\n      title: Root type for Registry\n      type: object\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n\n",
			"canonicalURL": "/github.com/redhat-developer/app-services-sdk-java@02af63a3d1bb068548eb5654d6d36b1a89af5b78/-/blob/packages/registry-management-sdk/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/redhat-developer/app-services-sdk-java/blob/02af63a3d1bb068548eb5654d6d36b1a89af5b78/packages/registry-management-sdk/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/serviceregistry_mgmt/v1/registries\": get: responses: code 200: contents: application/json: generate schema: allOf: merge properties: try to merge conflicting property schemas: merge item schema: schema type mismatch:  and object"
}