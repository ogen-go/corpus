{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wisetime-io/connect-api-spec"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "spec/openapi.yaml",
			"byteSize": 46002,
			"content": "openapi: 3.0.1\ninfo:\n  title: WiseTime Connect API\n  version: \"1.3.0\"\n  description: \u003e-\n    Use the WiseTime Connect API to build connectors to your application.\n  contact:\n    name: WiseTime Connect API Support\n    email: contact@wisetime.com\n    url: https://wisetime.com/docs/connect\n  x-logo:\n    url: \"https://storage.googleapis.com/pi-gcp-resources/email_assets/pi-account/wt-connect-logo.svg\"\n    altText: WiseTime Connect\ntags:\n  - name: Team Info\n  - name: Tags\n  - name: Tag Categories\n  - name: Activity Types\n  - name: Posted Time\n  - name: Connector Management\nservers:\n  - url: https://wisetime.com/connect/api\npaths:\n  /team/info:\n    get:\n      operationId: get-team-info\n      summary: Retrieve information about the team\n      tags:\n        - Team Info\n      responses:\n        '200':\n          description: Successfully found the team info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamInfoResult'\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /tag:\n    post:\n      operationId: tag-upsert\n      summary: Create a new tag, or update the tag if it already exists\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpsertTagRequest'\n      responses:\n        '200':\n          description: Tag successfully created or updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpsertTagResponse'\n        '400':\n          description: Invalid request. Tag name is missing or path is invalid.\n        '401':\n          description: A valid API key is required to access this resource.\n        '402':\n          description: Number of tags plan limit exceeded.\n        '500':\n          description: An unexpected error occured.\n\n  /tag/batch:\n    post:\n      operationId: batch-tag-upsert\n      summary: Create new tags, or update existing in batch (up to 2000 items at once)\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchUpsertTagRequest'\n      responses:\n        '200':\n          description: Tag successfully created or updated.\n        '400':\n          description: Invalid request. Tag name is missing or path is invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchUpsertTagResponse'\n        '401':\n          description: A valid API key is required to access this resource.\n        '402':\n          description: Number of tags plan limit exceeded.\n        '500':\n          description: An unexpected error occured.\n\n  /tag/delete:\n    post:\n      operationId: tag-delete\n      summary: Delete an existing tag\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteTagRequest'\n      responses:\n        '200':\n          description: Tag successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteTagResponse'\n        '400':\n          description: Invalid request. Tag name is required.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Tag not found.\n        '500':\n          description: An unexpected error occured.\n\n  /tag/metadata/delete:\n    post:\n      operationId: tag-metadata-delete\n      summary: Permanently deletes the specified metadata from an existing tag.\n      description: \u003e\n        Provide the metadata names that you want to delete.\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagMetadataDeleteRequest'\n      responses:\n        '200':\n          description: Fulfilled when metadata was deleted, not found or already deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagMetadataDeleteResponse'\n        '400':\n          description: Invalid request. Tag name and metadata are required.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Metadata cannot be deleted since the requested tag does not exist.\n        '500':\n          description: An unexpected error occured.\n\n  /tag/keyword:\n    post:\n      operationId: tag-keywords-add\n      summary: Add one or more keywords to an existing tag\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddKeywordsRequest'\n      responses:\n        '200':\n          description: Keyword(s) successfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddKeywordsResponse'\n        '400':\n          description: Invalid request. Tag name and additional keywords are required.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Tag not found.\n        '500':\n          description: An unexpected error occured.\n\n  /tag/keyword/delete:\n    post:\n      operationId: tag-keyword-delete\n      summary: Delete an existing keyword from a tag\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteKeywordRequest'\n      responses:\n        '200':\n          description: Keyword successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteKeywordResponse'\n        '400':\n          description: Invalid request. Tag name and keyword are required.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Tag or keyword not found.\n        '500':\n          description: An unexpected error occured.\n\n  /tagcategory/batch:\n    post:\n      operationId: batch-tag-category-upsert\n      summary: \u003e\n        Create new tag categories, or update existing in batch (up to 2000 items at once).\n        If tag category is not found by external ID, it is created.\n        externalId is a required field to use the batch creation endpoint.\n        No partial update, if some of categories failed to be processed, entire batch considered faulty.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchUpsertTagCategoryRequest'\n      responses:\n        '200':\n          description: Tag categories were successfully upserted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchUpsertTagCategoryResponse'\n        '400':\n          description: Invalid request.\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n      tags:\n        - Tag Categories\n\n  /activitytype/sync/start:\n    post:\n      operationId: activity-type-sync-start\n      summary: Start activity types sync session\n      description: \u003e\n        Initiates a sync session and responds with syncSessionId that can be used for further activity types uploads within the session.\n        While activity types can be sent to WiseTime in batches without a sync session, starting a sync session for the batch uploads means that WiseTime will be able to detect activity types that are no longer in the connected system, and delete these when the sync session is completed by the connector.\n      tags:\n        - Activity Types\n      responses:\n        '200':\n          description: Sync session initiated successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SyncSession'\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /activitytype/sync/complete:\n    post:\n      operationId: activity-type-sync-complete\n      summary: Complete activity types sync session\n      description: \u003e\n        Completes a sync session so its syncSessionId can not be used anymore.\n        All the activity types that were lastly created/updated before the session start will be deleted.\n      tags:\n        - Activity Types\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SyncSession'\n      responses:\n        '200':\n          description: Sync session completed successfully.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Sync session doesn't exist or already completed/cancelled.\n        '500':\n          description: An unexpected error occured.\n\n  /activitytype/sync/cancel:\n    post:\n      operationId: activity-type-sync-cancel\n      summary: Cancel activity types sync session\n      description: \u003e\n        Cancels a sync session so its syncSessionId can not be used anymore.\n        This API call has no impact on activity types.\n      tags:\n        - Activity Types\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SyncSession'\n      responses:\n        '200':\n          description: Sync session cancelled successfully.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Sync session doesn't exist or already completed/cancelled.\n        '500':\n          description: An unexpected error occured.\n\n  /activitytype/batch:\n    post:\n      operationId: activity-type-upsert-batch\n      summary: Create new activity types, or update existing in batch (up to 2000 items at once)\n      tags:\n        - Activity Types\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SyncActivityTypesRequest'\n      responses:\n        '200':\n          description: Activity types successfully created or updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SyncActivityTypesResponse'\n        '400':\n          description: \u003e\n            Invalid request:\n              - Activity type code or label is missing.\n              - The number of activity types in request exceeded.\n              - Sync session id was provided but session doesn't exist or already completed/cancelled.\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime:\n    get:\n      operationId: fetch-posted-time\n      summary: Returns posted time with pending status.\n      description: \u003e\n        Use this endpoint to fetch posted time for processing.\n        This is a long polling call (an alternative to using the webhook mechanism).\n        The connection will be held open for a maximum of 60 seconds or until there is a new posted time event.\n        When calling this method without first calling the /postedtime/registerfetchclient endpoint, recording posted time for fetching\n        will implicitly be turned on.\n      tags:\n        - Posted Time\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          required: false\n          description: Maximum amount of posted time entries to retrieve. If not set, the API will return up to a maximum of 25 entries for each request.\n      responses:\n        '200':\n          description: List of posted time events.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TimeGroup'\n        '400':\n          description: Invalid request. Limit cannot be smaller than 1.\n        '401':\n          description: A valid API key is required to access this resource.\n        '409':\n          description: This team has a registered posted time webhook. Switching to use fetch client is required.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime/list:\n    get:\n      operationId: list-posted-time\n      summary: Returns list of posted time with pending or success status.\n      description: \u003e\n        Returns all time groups for team in descending order of submission time starting from now. This is not a long polling endpoint.\n      tags:\n        - Posted Time\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          required: false\n          description: Maximum number of items to return. Should be between 1 and 500. Default is 100.\n        - in: query\n          name: submittedBefore\n          schema:\n            type: integer\n          required: false\n          description: \u003e\n            Filter response to return only time groups submitted before requested timestamp.\n            If empty - returns latest time groups. Note that the submisisonTime may be the same for multiple time groups as\n            users may submit more than 1 time group as a single operation. Measured in milliseconds since the Epoch.\n      responses:\n        '200':\n          description: List of time groups.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TimeGroup'\n        '400':\n          description: Invalid request.\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime/registerfetchclient:\n    post:\n      operationId: register-for-fetch\n      summary: Register the intent to fetch time from the /postedtime endpoint.\n      description: WiseTime will start recording posted time events that can be fetched via the /postedtime endpoint.\n      tags:\n        - Posted Time\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterFetchClientRequest'\n      responses:\n        '200':\n          description: Fetch client successfully registered.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterFetchClientResult'\n        '400':\n          description: Invalid request. Callback URL is required.\n        '409':\n          description: This team already has a registered fetch client or webhook.\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime/unregisterfetchclient:\n    post:\n      operationId: unregister-from-fetch\n      summary: Delete existing fetch client, unsubscribing your application from posted time fetching.\n      description: WiseTime will stop recording posted time events for fetch when users post time to your team.\n      tags:\n        - Posted Time\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnregisterFetchClientRequest'\n      responses:\n        '200':\n          description: Fetch client successfully unregistered.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnregisterFetchClientResult'\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: Fetch client not found.\n        '409':\n          description: This team has a registered posted time webhook. Switching to use fetch client is required.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime/status:\n    post:\n      operationId: update-posted-time-status\n      summary: Updates the status of a received time group. Providing its success or failure to be processed.\n      description: \u003e\n        This is intended for use with the fetch mechanism only. Not to be used with webhooks.\n        If this endpoint isn't called for a time group within a certain amount of time after fetching it\n        the time group will be made available again for fetching.\n      tags:\n        - Posted Time\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimeGroupStatus'\n      responses:\n        '200':\n          description: Status of the time group was updated successfully.\n        '400':\n          description: Invalid request.\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: The time group/fetch client id pair was not found.\n        '409':\n          description: This team has a registered posted time webhook. Switching to use fetch client is required.\n        '500':\n          description: An unexpected error occured.\n\n  /postedtime/subscribe:\n    post:\n      operationId: post-subscribe\n      summary: Subscribe to be notified when a user posts time information to your team.\n      description: WiseTime will call your webhook with a payload of the posted time information. See the [posted time webhook documentation](/docs/connect/posted-time-webhook/) for details. Each team is limited to one webhook callback.\n      tags:\n        - Posted Time\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscribeRequest'\n      responses:\n        '200':\n          description: Webhook subscription successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscribeResult'\n        '400':\n          description: Invalid request. Callback URL is required.\n        '409':\n          description: This team already has a registered webhook or fetch client.\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n      callbacks: # Callback definition\n        timePostedEvent: # Event name\n          '{$request.body#/callbackUrl}': # Refers to the passed URL\n            post:\n              operationId: post-callback\n              requestBody: # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/TimeGroup'\n              responses: # Expected responses to the callback message\n                '200':\n                  description: 2XX codes indicate that the time group was processed successfully.\n                '400':\n                  description: \u003e\n                    Indicates that permanent failure has occurred, to signify that no retries should be made.\n                    Returns a user-friendly error message which describes the problem.\n                  content:\n                    text/plain:\n                      schema:\n                        type: string\n                '500':\n                  description: \u003e\n                    Indicates a transient error. The web hook post request will be retried after a delay.\n                    Returns a user-friendly error message which describes the problem.\n                  content:\n                    text/plain:\n                      schema:\n                        type: string\n\n  /postedtime/unsubscribe:\n    post:\n      operationId: delete-webhook\n      summary: Delete existing webhook for given connector (specified by api key), unsubscribing your application from posted time notifications.\n      description: WiseTime will stop calling your webhook when users post time to your team.\n      tags:\n        - Posted Time\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnsubscribeRequest'\n      responses:\n        '200':\n          description: Webhook successfully deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnsubscribeResult'\n        '401':\n          description: A valid API key is required to access this resource.\n        '404':\n          description: No Webhook found for provided api key.\n        '500':\n          description: An unexpected error occured.\n\n  /team/managed/config:\n    post:\n      operationId: team-managed-config\n      summary: Retrieve configuration particulars to suppport the managed connector service.\n      tags:\n        - Connector Management\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagedConfigRequest'\n      responses:\n        '200':\n          description: Managed config response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagedConfigResponse'\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /healthcheck/failure/notify:\n    post:\n      operationId: health-check-failure-notify\n      summary: \u003e\n        Report non-transient health check failure.\n        For unknown error codes the provided error message will be shown to users on time posting.\n        For known error codes connect-api-server will determine the appropriate message.\n      tags:\n        - Connector Management\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HealthCheckFailureNotify'\n      responses:\n        '204':\n          description: Error state has been recorded\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\n  /healthcheck/failure/rescind:\n    post:\n      operationId: health-check-failure-rescind\n      summary: Rescind (clear) a previously reported health check failure.\n      tags:\n        - Connector Management\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HealthCheckFailureRescind'\n      responses:\n        '204':\n          description: Error state has been rescinded/cleared\n        '401':\n          description: A valid API key is required to access this resource.\n        '500':\n          description: An unexpected error occured.\n\ncomponents:\n  securitySchemes:\n    ConnectApiKeyAuth:\n      description: See the [Authentication documentation page](/docs/connect/authentication/) for more details.\n      type: apiKey\n      in: header\n      name: x-api-key\n  schemas:\n    TagMetadataSet:\n      type: object\n      description: \u003e\n        You can assign metadata to a tag.  You provide this information as a name-value (key-value) pair.\n        The metadata names are case sensitive and will be displayed in reports, it is recommended the names be descriptive to clarify its meaning.\n        In the case of providing any name-value where the name is already assigned as metadata to the tag, the value will be updated with value supplied.\n        To delete/remove a name-value pair stored as metadata on a tag, you must use the `tag-metadata-delete` operation.\n      additionalProperties:\n        type: string\n      example:\n        Billing Group: billable\n    TagMetadataDeleteRequest:\n      type: object\n      properties:\n        tagName:\n          type: string\n          description: The tag from which to delete the tag metadata.\n        metadataNames:\n          description: The name(s) of the tag metadata to delete.\n          type: array\n          items:\n            type: string\n      required:\n        - tagName\n        - metadataNames\n    TagMetadataDeleteResponse:\n      type: object\n    HealthCheckFailureRescind:\n      type: object\n    UpsertTagRequest:\n      type: object\n      properties:\n        name:\n          description: \"Tag name to create. If a tag by this name already exists, the tag will be updated.\"\n          type: string\n        description:\n          description: \u003e\n            Displayed in the GUI and search functions.\n            An empty (or null) description will be ignored, the description will remain with the previous value instead of replacing it.\n          type: string\n        excludeTagNameKeyword:\n          description: \u003e\n            The default behaviour when creating a tag is for the tagName to be added as a keyword for the tag.  If\n            excludeTagNameKeyword is set to true, the tagName will not be added as a keyword, unless it is explicitly\n            defined in the additionalKeywords list of the request.\n          type: boolean\n        tagCategoryId:\n          description: \u003e\n            The ID of the category that this tag belongs to.\n            This field is empty if the tag does not belong to a category.\n          type: string\n        path:\n          description: \u003e\n            Path at which to create the tag.\n            The path must start with a / and end with a /\n            For example /myteam/inprotech/\n            Use / to create tag in root.\n          type: string\n        managedBy:\n          description: \u003e\n            Identifier of the resource that manages this tag.\n          type: string\n        externalId:\n          description: \u003e\n            Identifier of the tag in the connected system.\n            The external ID will be sent when time is posted with this tag, so that the posted time can be recorded against the\n            relevant record in the connected system.\n          type: string\n        metadata:\n          $ref: '#/components/schemas/TagMetadataSet'\n        additionalKeywords:\n          description: \u003e\n            A tag is applied to a time row if one of its keywords matches text in the time row activity description.\n            Keywords provided via this property will be added to the list of existing keywords for the tag. Existing keywords won't be removed.\n          type: array\n          items:\n            type: string\n        url:\n          description: \u003e\n            If a URL is provided, the tag will be a clickable link in the WiseTime console.\n            Clicking on the tag will open the URL.\n          type: string\n        visibility:\n          description: \u003e\n            Defines tag visibility. Default is PUBLIC. Private matters are only accessible by explicitly authorized team members.\n          type: string\n          enum:\n            - PUBLIC\n            - PRIVATE\n    BatchUpsertTagRequest:\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/UpsertTagRequest'\n    BatchUpsertTagResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorItem'\n    ErrorItem:\n      type: object\n      properties:\n        index:\n          description: Index of item in the request to which this error corresponds to.\n          type: integer\n        errorDescription:\n          description: String with error details.\n          type: string\n    UpsertTagResponse:\n      type: object\n    DeleteTagRequest:\n      oneOf:\n        - type: object\n          properties:\n            name:\n              description: \"Tag name to delete.\"\n              type: string\n        - type: object\n          properties:\n            id:\n              description: \"Tag id to delete.\"\n              type: string\n    DeleteTagResponse:\n      type: object\n    AddKeywordsRequest:\n      type: object\n      properties:\n        tagName:\n          type: string\n          description: \"The tag to which to add the keywords.\"\n        externalId:\n          description: \u003e\n            The identifier of the tag in the connected system.\n          type: string\n        additionalKeywords:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            One or more new keywords for the tag.\n            Keywords provided via this property will be added to the list of existing keywords for the tag. Existing keywords won't be removed.\n    AddKeywordsResponse:\n      type: object\n    DeleteKeywordRequest:\n      type: object\n      properties:\n        tagName:\n          type: string\n          description: \"The tag from which to delete the keywords.\"\n        keyword:\n          type: string\n          description: \"The keyword to delete.\"\n    DeleteKeywordResponse:\n      type: object\n    SyncSession:\n      type: object\n      properties:\n        syncSessionId:\n          type: string\n          description: Sync session identifier that can be used for the patch uploads or session completion/cancellation.\n    SyncActivityTypesRequest:\n      type: object\n      properties:\n        activityTypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ActivityType'\n          description: An array of activity types to be created/updated.\n        syncSessionId:\n          type: string\n          description: Optional. Identifier of the sync session.\n    SyncActivityTypesResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorItem'\n    ManagedConfigRequest:\n      type: object\n      properties:\n        environment:\n          type: object\n          description: A dictionary of client runtime environment properties.\n          additionalProperties:\n            type: string\n          example:\n            javaVmSpecificationVersion: 1.8\n            javaVmVersion: 2.8\n            javaVmName: IBM J9 VM\n            clientOs: linux\n        connectorType:\n          type: string\n          description: The paired system type that the connector supplies activity data to.\n        connectorVersion:\n          type: string\n          description: The connector version.\n        connectorLibraryVersion:\n          type: string\n          description: The WiseTime connector library version that the connector is using.\n        clientTimestamp:\n          type: integer\n          format: int64\n          description: The current system timestamp from epoch of the client environment.\n        clientTimeZoneOffset:\n          type: string\n          description: The local time offset of the environment that the client is running within.\n    ManagedConfigResponse:\n      type: object\n      properties:\n        serviceId:\n          type: string\n          description: Service ID that identifies the security credentials.\n        serviceKey:\n          type: string\n          description: Secret key for the security credentials.\n        serviceIdExpiry:\n          type: string\n          format: date-time\n          description: The date which the current credentials will expire.\n        serviceSessionToken:\n          type: string\n          description: The token that the service must pass to the API to use the security credentials.\n        groupName:\n          type: string\n          description: The name of the group for logging.\n        regionName:\n          description: Geographic area for the logging.\n          type: string\n        connectorConfiguration:\n          type: object\n          description: A dictionary of connector configuration properties.\n          additionalProperties:\n            type: string\n          example:\n            ADD_SUMMARY_TO_NARRATIVE: true\n    HealthCheckFailureNotify:\n      type: object\n      properties:\n        errorType:\n          type: string\n          description: \u003e\n            Type of non-transient health check failure that occurred.\n          enum:\n            - UNKNOWN\n            - TARGET_UNREACHABLE\n            - TARGET_AUTH_FAILURE\n            - TARGET_PERMISSIONS_FAILURE\n            - TARGET_SUBSCRIPTION_FAILURE\n        userErrorMessage:\n          type: string\n          description: \u003e\n            Error message shown to team members when trying to post time (until the failure is rescinded / cleared).\n            Optional, will overwrite the default error message of the provided errorType.\n    TimeGroup:\n      type: object\n      properties:\n        callerKey:\n          type: string\n          description: A caller key that you specified when registering your webhook. You can use this field to authenticate that the request comes from WiseTime. This field is only set if WiseTime is calling your webhook. It is not relevant when you poll WiseTime for posted time.\n        groupId:\n          type: string\n          description: A unique identifier of the TimeGroup being sent to the webhook receiver.\n        description:\n          type: string\n          description: User description for this time group. This may be blank if the user did not provide a narrative when posting their time.\n        totalDurationSecs:\n          type: integer\n          description: \u003e\n            By default this is the sum of the time log durations in seconds.\n            It may have been edited by user before posting.  To calculate the unmodified total duration, add the items from the `timeRows` array.\n        groupName:\n          type: string\n          description: \u003e\n            The default when a group name is created in the WiseTime console is to be assigned the name of the colour matching the group.  For example, `Blue Group`.\n            The user can rename the group from the gui.  This field may be blank in the case that the user has selected a group of rows and posted that time.\n            without explicitly creating a group.  It is therefore an optional field, and should not be assumed to be available and may be auto-generated in the absence\n            of the user having changed the default group name assigned to a given group of time activity information.\n        narrativeType:\n          type: string\n          enum:\n            - NARRATIVE_AND_TIME_ROW_ACTIVITY_DESCRIPTIONS\n            - NARRATIVE_ONLY\n          description: \u003e\n            The user may request that the time row activity information be ignored by the web hook receiver.\n            In the usual case, the default narrative type is `NARRATIVE_AND_TIME_ROW_ACTIVITY_DESCRIPTIONS`.\n        status:\n          type: string\n          enum:\n            - PENDING\n            - SUCCESS\n        submissionTime:\n          type: integer\n          format: int64\n          description: Time when the user posted the time group. Measured in milliseconds since the Epoch.\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n          description: \u003e\n            An array of tags that were assigned to the time group. An empty array will be sent if there were no assigned tags.\n            There will be not more than one tag in this array. This field is an array for backwards API compatibility, it will\n            be deprecated in the future and substituted by a unary field.\n        timeRows:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeRow'\n          description: Activity time rows posted with the group. There will always be at least one time row posted.\n        user:\n          $ref: '#/components/schemas/User'\n        originatingUser:\n          $ref: '#/components/schemas/User'\n        durationSplitStrategy:\n          deprecated: true\n          type: string\n          enum:\n            - DIVIDE_BETWEEN_TAGS\n            - WHOLE_DURATION_TO_EACH_TAG\n          description: \u003e\n            This field should be ignored, there can be at most one tag per group.\n    Tag:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the tag.\n        path:\n          type: string\n          description: The folder path of the tag, e.g. /path/to/tag/.\n        description:\n          type: string\n          description: \u003e\n            Optional. The text that is displayed to the user next to the name in the user interface.\n            For example, this could take the form of a matter description or a project name.\n        externalId:\n          type: string\n          description: \u003e\n            The ID of the external entity for which the tag was created.\n            The external ID is used to post time against the correct record in the connected system.\n    TagCategory:\n      type: object\n      description: \u003e\n        A tag category groups related tags together.\n        Tag categories can be automatically applied to time rows and time groups by auto-tagging. However, tag categories cannot be posted.\n        The purpose of tag categories is to give the user as much help as possible with auto-tagging if we are unable to match a specific tag but are able to match on a group of tags. The user then just needs to select one of the tags in the category, rather than having to start with a fresh tag search.\n      properties:\n        id:\n          type: string\n          description: The WiseTime resource ID of the tag category. This field is required when updating a tag category, but should not be set when creating one.\n        externalId:\n          type: string\n          description: The ID of the tag category in the connected system.\n        label:\n          type: string\n          description: \u003e\n            The display label for the tag category.\n        description:\n          type: string\n          description: A description for the tag category.\n        keywords:\n          description: The tag category will automatically be applied to time rows if one of its keywords match the row content.\n          type: array\n          items:\n            type: string\n      required:\n        - externalId\n        - label\n    BatchUpsertTagCategoryRequest:\n      type: object\n      properties:\n        tagCategories:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagCategory'\n          description: An array of tag categories to be created/updated.\n    BatchUpsertTagCategoryResponse:\n      type: object\n      properties:\n        tagCategories:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagCategory'\n          description: An array of tag categories that were created/updated.\n    ActivityType:\n      type: object\n      properties:\n        code:\n          type: string\n          description: \u003e\n            Activity type id/code from the connected system. Must be unique.\n            It's the only property used to determine if the activity type already exists.\n        label:\n          type: string\n          description: \u003e\n            Activity type short name from the connected system.\n            It will be used to populate the `WiseTime console label` column, if the activity type doesn't exist yet. Otherwise the existing value will be kept.\n        description:\n          type: string\n          description: \u003e\n            Activity type description from the connected system.\n        enableIfNew:\n          type: boolean\n          description: \u003e\n            Whether activity type should be enabled in WiseTime if it is being synced for the first time. If the activity type already exists in WiseTime, its enabled state will remain unchanged.\n            If false, the activity type will be created, but will not be available in the WiseTime console until it is enabled in team settings. Defaults to false.\n    User:\n      type: object\n      description: Information about the user who posted the time group.\n      properties:\n        userId:\n          type: string\n          description: The user id of the user.\n        name:\n          type: string\n          description: The name of the user.\n        email:\n          type: string\n          description: The user’s email address.\n        externalId:\n          type: string\n          description: The ID that the connector should use to refer to the user when talking to the system being integrated with WiseTime. This is set through the user’s team membership.\n        businessRole:\n          type: string\n          description: The user’s role, set through their team membership.\n        experienceWeightingPercent:\n          type: integer\n          description: \u003e\n            Experience rating assigned to the user. This is a percentage value, between 0 and 100.\n            You can use this value to apply a multiplier to the total posted time duration before sending it to the connected system.\n            For example, you may want to send 20 minutes instead of 40 minutes for a junior employee whose experience rating is 50%.\n    SubscribeRequest:\n      type: object\n      properties:\n        callbackUrl:\n          type: string\n          description: The webhook URL that WiseTime will call to notify you of user posted time.\n        callerKey:\n          type: string\n          description: WiseTime will send this key back to you when it calls your webhook. That way you can authenticate that the request comes from WiseTime.\n      required:\n        - callbackUrl\n    SubscribeResult:\n      type: object\n    RegisterFetchClientRequest:\n      type: object\n    RegisterFetchClientResult:\n      type: object\n    TeamInfoResult:\n      type: object\n      properties:\n        teamName:\n          type: string\n    TimeGroupStatus:\n      type: object\n      properties:\n        timeGroupId:\n          type: string\n          description: ID of the time group to be updated.\n        status:\n          type: string\n          enum:\n            - SUCCESS\n            - FAILURE\n            - RETRIABLE_FAILURE\n          description: \u003e\n            This field describes the status of the posted time group.\n            On SUCCESS the time group will be marked as successfully posted.\n            On FAILURE the time group will be marked as failed and the attached message will displayed to the user.\n            On RETRIABLE_FAILURE the time group will be marked as temporary failed and scheduled for retry. The attached message might be displayed to the user.\n        message:\n          type: string\n          description: Reason for the failure, will be displayed to the user.\n        externalId:\n          type: string\n          description: An identifier in the connected system that relates to the posted time group.\n    TimeRow:\n      type: object\n      properties:\n        activity:\n          type: string\n          description: The activity performed, e.g. “Meeting”, “Microsoft Word”.\n        description:\n          type: string\n          description: A description of the activity, e.g. the filename of a wordprocessor document being worked on.\n        activityHour:\n          type: integer\n          description: The hour of the posted time in UTC. yyyyMMddhh\n        firstObservedInHour:\n          type: integer\n          description: \u003e\n            The firstObservedInHour represents the minute in the activityHour when the activity was first observed.\n            It will be an integer value between 0 and 59.\n        durationSecs:\n          type: integer\n          description: The duration of the activity, in seconds.\n        submittedDate:\n          type: integer\n          format: int64\n          deprecated: true\n          description: Time when the activity was submitted by the user in UTC, in the format yyyyMMddHHmmSSsss.\n        modifier:\n          type: string\n          description: \u003e\n            A modifier for the time row. Modifiers can be selected by the user when posting time, and can be any string value that makes sense to the connected system when posted.\n            For example, a law firm might configure activity codes for the various activities that they have set up in their case management system, so that they can charge meetings\n            and court appearances at different rates. Effectively it's the human readable label for activityTypeCode.\n        activityTypeCode:\n          type: string\n          description: \u003e\n            Activity type of time row. It can be set by the user when posting time row. List of possible values is configured by administrators on the team settings page.\n        source:\n          type: string\n          enum:\n            - WT_DESKTOP\n            - USER_MANUAL_TIME\n          description: \u003e\n            This field describes the origin of the posted.\n            Time logs can either come from the desktop client (WT_DESKTOP) or be created manually by the user (USER_MANUAL_TIME).\n        timezone_name:\n          type: string\n          description: IANA time zone of the user when the activity was created.  For example, Europe/Berlin.\n        timezone_offset_min:\n          type: integer\n          description: Timezone offset in minutes of the recorded activity.  For example, UTC-2 will be shown as a TZ offset value of -120, or UTC+5.5 being equal to 330.\n    UnsubscribeRequest:\n      type: object\n    UnsubscribeResult:\n      type: object\n    UnregisterFetchClientRequest:\n      type: object\n    UnregisterFetchClientResult:\n      type: object\nsecurity:\n  # the API key is required for all operations\n  - ConnectApiKeyAuth: [ ]\n"
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/TimeGroupStatus\" name conflict: \"TimeGroupStatus\""
}