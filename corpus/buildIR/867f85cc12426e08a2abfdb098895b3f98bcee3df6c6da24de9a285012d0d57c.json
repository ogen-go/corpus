{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "bigoven.com-partner-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/bigoven.com-partner-swagger.yaml",
			"byteSize": 149666,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"#Documentation\\r\n\n    \\r\n\n    This is the documentation for the partner endpoint of the BigOven Recipe\n    and Grocery List API.\\r\n\n    \\r\n\n    The update brings with it Swagger-based documentation.\n    [Swagger](http://swagger.io) is an emerging standard for describing\n    REST-based APIs, and with this Swagger-compliant endpoint (above), you can\n    make ready-to-go interface libraries for your code via\n    [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For\n    instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET\n    MVC, jQuery, php and more!\\r\n\n    \\r\n\n    You can also try out the endpoint calls with your own api_key right here\n    on this page. Be sure to enter your api_key above to use the \\\"Try it out!\\\"\n    buttons on this page.\\r\n\n    \\r\n\n    ##Start Here\\r\n\n    \\r\n\n    Developers new to the BigOven API should start with this version, not\n    with the legacy API. We'll be making improvements to this API over time, and\n    doing only bug fixes on the v1 API.\\r\n\n    \\r\n\n    \\r\n\n    \\r\n\n    To pretend you're a BigOven user (for instance, to get your recently\n    viewed recipes or your grocery list), you need to pass in Basic\n    Authentication information in the header, just as with the v1 API. We do now\n    require that you make all calls via https. You need to pass your api_key in\n    with every call, though this can now be done on the header (send a request\n    header \\\"X-BigOven-API-Key\\\" set to your api_key value, e.g.,\n    Request[\\\"X-BigOven-API-Key\\\"]=\\\"your-key-here\\\".)\\r\n\n    \\r\n\n    ##Migration Notes\\r\n\n    \\r\n\n    For existing partners, we encourage you to\n    [migrate](http://api2.bigoven.com), and while at this writing we have no\n    hard-and-fast termination date for the v1 API, we strongly prefer that you\n    migrate by January 1, 2017. While the changes aren't overly complex, there\n    are several breaking changes, including refactoring of recipe search and\n    results and removal of support for XML. This is not a simply plug-and-play\n    replacement to the v1 API. With respect to an exclusive focus on JSON, the\n    world has spoken, and it prefers JSON for REST-based API's. We've taken\n    numerous steps to refactor the API to make it more REST-compliant. Note that\n    this v2 API will be the preferred API from this point onward, so we\n    encourage developers to migrate to this new format. We have put together\n    some [migration notes](/web/documentation/migration-to-v2) that we encourage\n    you to read carefully.\\r\n\n    \\r\n\n    ##Photos\\r\n\n    \\r\n\n    See our [photos\n    documentation](http://api2.bigoven.com/web/documentation/recipe-images). \\r\n\n    \\r\n\n    For more information on usage of this API, including features, pricing,\n    rate limits, terms and conditions, please visit the [BigOven API\n    website](http://api2.bigoven.com).\"\n  termsOfService: http://api2.bigoven.com/web/documentation/termsofuse\n  title: BigOven\n  version: partner\n  x-apiClientRegistration:\n    url: http://api2.bigoven.com/web/console\n  x-logo:\n    url: https://twitter.com/bigoven/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: http://api2.bigoven.com/swagger/docs/partner\n      version: \"2.0\"\n  x-providerName: bigoven.com\nexternalDocs:\n  url: http://api2.bigoven.com/web/documentation\npaths:\n  \"/article/{term}\":\n    get:\n      deprecated: false\n      operationId: Article_Get\n      parameters:\n        - description: \"\"\n          in: path\n          name: term\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Article successfully returned\n        \"404\":\n          description: Article not found\n      summary: Get a food article\n      tags:\n        - Article\n    put:\n      deprecated: false\n      operationId: Article_Put\n      parameters:\n        - description: \"\"\n          in: path\n          name: term\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.WebAPI.ArticleController\\\n                .PutArticleReq\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.WebAPI.ArticleController\\\n                .PutArticleReq\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.WebAPI.ArticleController\\\n                .PutArticleReq\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.WebAPI.ArticleController\\\n                .PutArticleReq\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.WebAPI.ArticleController\\\n                .PutArticleReq\"\n        required: true\n      responses:\n        \"200\":\n          description: Article successfully returned\n        \"404\":\n          description: Article not found\n      summary: Update the article by term\n      tags:\n        - Article\n  \"/collection/{id}\":\n    get:\n      deprecated: false\n      operationId: Collection_GetCollection\n      parameters:\n        - description: the collection identifier\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: results per page\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: page number (starting with 1)\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: test\n          required: false\n          schema:\n            type: boolean\n        - description: \"\"\n          in: query\n          name: sessionForLogging\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n      summary: Gets a recipe collection. A recipe collection is a curated set of\n        recipes.\n      tags:\n        - Collection\n  \"/collection/{id}/meta\":\n    get:\n      deprecated: false\n      operationId: Collection_GetCollectionMeta\n      parameters:\n        - description: the collection identifier\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n      summary: Gets a recipe collection metadata. A recipe collection is a curated set\n        of recipes.\n      tags:\n        - Collection\n  /collections:\n    get:\n      deprecated: false\n      operationId: Collection_Collections\n      parameters:\n        - in: query\n          name: test\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API2.CollectionInfo\"\n                type: array\n      summary: Get the list of current, seasonal recipe collections. From here, you can\n        use the /collection/{id} endpoint to retrieve the recipes in those\n        collections.\n      tags:\n        - Collection\n  \"/glossary/byterm/{term}\":\n    get:\n      deprecated: false\n      operationId: Glossary_ByTerm\n      parameters:\n        - description: Keyword used to look up article, e.g., asparagus\n          in: path\n          name: term\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.GlossaryEntry\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.GlossaryEntry\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.GlossaryEntry\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.GlossaryEntry\"\n      summary: Get food glossary article by term (e.g., asparagus). This editorial is\n        (c) BigOven and MUST carry attribution and a link back to the glossary\n        entry on BigOven.com.\n      tags:\n        - Glossary\n  \"/glossary/{id}\":\n    get:\n      deprecated: false\n      operationId: Glossary_Get\n      parameters:\n        - description: identifier of  article to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: Glossary article successfully returned\n        \"404\":\n          description: Glossary article not found\n      summary: DEPRECATED. Please use \"Article\", which is a new format for food\n        glossary articles, which separates out the images.\n      tags:\n        - Glossary\n  /grocerylist:\n    delete:\n      deprecated: false\n      operationId: GroceryList_Delete\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Delete all the items on a grocery list; faster operation than a sync\n        with deleted items.\n      tags:\n        - GroceryList\n    get:\n      deprecated: false\n      operationId: GroceryList_Get\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n      summary: Get the user's grocery list.  User is determined by Basic Authentication.\n      tags:\n        - GroceryList\n  /grocerylist/clearcheckedlines:\n    post:\n      deprecated: false\n      operationId: GroceryList_GroceryListRemoveMarkedItems\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.GroceryList\"\n      summary: Clears the checked lines.\n      tags:\n        - GroceryList\n  /grocerylist/department:\n    post:\n      deprecated: false\n      operationId: GroceryList_Department\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.De\\\n                partmentModel\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.De\\\n                partmentModel\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.De\\\n                partmentModel\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.De\\\n                partmentModel\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.De\\\n                partmentModel\"\n        description: see DepartmentModel for the request payload\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/API2.GroceryListDepartmentResult\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/API2.GroceryListDepartmentResult\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/API2.GroceryListDepartmentResult\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/API2.GroceryListDepartmentResult\"\n                type: array\n      summary: Departmentalize a list of strings -- used for ad-hoc grocery list item\n        addition\n      tags:\n        - GroceryList\n  /grocerylist/item:\n    post:\n      deprecated: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stToGroceryListRecipeRequest\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stToGroceryListRecipeRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stToGroceryListRecipeRequest\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stToGroceryListRecipeRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stToGroceryListRecipeRequest\"\n        description: name, quantity, unit, notes, department\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n      summary: Add a single line item to the grocery list\n      tags:\n        - GroceryList\n  \"/grocerylist/item/{guid}\":\n    delete:\n      deprecated: false\n      operationId: GroceryList_DeleteItemByGuid\n      parameters:\n        - description: \"\"\n          in: path\n          name: guid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: /grocerylist/item/{guid}  DELETE will delete this item assuming you own\n        it.\n      tags:\n        - GroceryList\n    put:\n      deprecated: false\n      operationId: GroceryList_GroceryListItemGuid\n      parameters:\n        - in: path\n          name: guid\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Up\\\n                dateItemByGuidRequest\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Up\\\n                dateItemByGuidRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Up\\\n                dateItemByGuidRequest\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Up\\\n                dateItemByGuidRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Up\\\n                dateItemByGuidRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Update a grocery item by GUID\n      tags:\n        - GroceryList\n  /grocerylist/line:\n    post:\n      deprecated: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListAddLineRequest\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListAddLineRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListAddLineRequest\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListAddLineRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListAddLineRequest\"\n        description: name, quantity, unit, notes, department\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.ShoppingListLine\"\n      summary: Add a single line item to the grocery list\n      tags:\n        - GroceryList\n  /grocerylist/recipe:\n    post:\n      deprecated: false\n      operationId: GroceryList_AddRecipe\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListRecipeRequest\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListRecipeRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListRecipeRequest\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListRecipeRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListRecipeRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: \"Add a Recipe to the grocery list.  In the request data, pass in\n        recipeId, scale (scale=1.0 says to keep the recipe the same size as\n        originally posted), markAsPending (true/false) to indicate that\\r\n\n        \\            the lines in the recipe should be marked in a\n        \\\"pending\\\" (unconfirmed by user) state.\"\n      tags:\n        - GroceryList\n  /grocerylist/sync:\n    post:\n      deprecated: false\n      operationId: GroceryList_PostGroceryListSync\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListSyncRequest\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListSyncRequest\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListSyncRequest\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListSyncRequest\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.GroceryListController.Po\\\n                stGroceryListSyncRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Synchronize the grocery list.  Call this with a POST to /grocerylist/sync\n      tags:\n        - GroceryList\n  /image/avatar:\n    post:\n      deprecated: false\n      operationId: Images_UploadUserAvatar\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n        \"400\":\n          description: if bad request (e.g., missing parameters)\n        \"401\":\n          description: if the user is unknown\n        \"415\":\n          description: if unsupported media type (e.g., bad JPG)\n      summary: \"POST: /image/avatar\\r\n\n        \\             \\r\n\n        \\            Testing with Postman (validated 11/20/2015):\\r\n\n        \\            1) Remove the Content-Type header; add\n        authentication information\\r\n\n        \\            2) On the request, click Body and choose\n        \\\"form-data\\\", then add a line item with \\\"key\\\" column set to \\\"file\\\"\n        and on the right,\\r\n\n        \\            change the type of the input from Text to\n        File.  Browse and choose a JPG.\"\n      tags:\n        - Images\n  /me:\n    get:\n      deprecated: false\n      operationId: Me_Index\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Indexes this instance.\n      tags:\n        - Me\n    put:\n      deprecated: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n        description: The req.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Puts me.\n      tags:\n        - Me\n  /me/personal:\n    put:\n      deprecated: false\n      operationId: Me_PutMePersonal\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Personal\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Personal\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Personal\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Personal\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Personal\"\n        description: The req.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Puts me personal.\n      tags:\n        - Me\n  /me/preferences:\n    put:\n      deprecated: false\n      operationId: Me_PutMePreferences\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Preference\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Preference\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Preference\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Preference\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Preference\"\n        description: The req.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Puts me preferences.\n      tags:\n        - Me\n  /me/preferences/options:\n    get:\n      deprecated: false\n      operationId: Me_GetOptions\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.MeController.Preferenc\\\n                  eOptions\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.MeController.Preferenc\\\n                  eOptions\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.MeController.Preferenc\\\n                  eOptions\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.MeController.Preferenc\\\n                  eOptions\"\n      summary: Gets the options.\n      tags:\n        - Me\n  /me/profile:\n    put:\n      deprecated: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Profile\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Profile\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Profile\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Profile\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Models.Profile\"\n        description: The req.\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Puts me.\n      tags:\n        - Me\n  /me/skinny:\n    get:\n      deprecated: false\n      operationId: Me_Skinny\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Models.BigOvenUser\"\n      summary: Skinnies this instance.\n      tags:\n        - Me\n  /recipe:\n    post:\n      deprecated: false\n      operationId: Recipe_Post\n      requestBody:\n        $ref: \"#/components/requestBodies/BigOven.Model.API.Recipe\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n      summary: Add a new recipe\n      tags:\n        - Recipe\n    put:\n      deprecated: false\n      operationId: Recipe_Put\n      requestBody:\n        $ref: \"#/components/requestBodies/BigOven.Model.API.Recipe\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n      summary: Update a recipe\n      tags:\n        - Recipe\n  /recipe/autocomplete:\n    get:\n      deprecated: false\n      operationId: Recipe_AutoComplete\n      parameters:\n        - description: \"\"\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n            text/json:\n              schema:\n                items:\n                  type: string\n                type: array\n            application/xml:\n              schema:\n                items:\n                  type: string\n                type: array\n            text/xml:\n              schema:\n                items:\n                  type: string\n                type: array\n      summary: Given a query, return recipe titles starting with query. Query must be\n        at least 3 chars in length.\n      tags:\n        - Recipe\n  /recipe/autocomplete/all:\n    get:\n      deprecated: false\n      operationId: Recipe_AutoCompleteAllRecipes\n      parameters:\n        - description: The query.\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: The limit.\n          in: query\n          name: limit\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n      summary: Automatics the complete all recipes.\n      tags:\n        - Recipe\n  /recipe/autocomplete/mine:\n    get:\n      deprecated: false\n      operationId: Recipe_AutoCompleteMyRecipes\n      parameters:\n        - description: The query.\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: The limit.\n          in: query\n          name: limit\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoTiny\"\n                type: array\n      summary: Automatics the complete my recipes.\n      tags:\n        - Recipe\n  /recipe/categories:\n    get:\n      deprecated: false\n      operationId: Recipe_Categories\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeCategory\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeCategory\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeCategory\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeCategory\"\n                type: array\n      summary: Get a list of recipe categories (the ID field can be used for\n        include_cat in search parameters)\n      tags:\n        - Recipe\n  /recipe/get/saved/step:\n    post:\n      deprecated: false\n      operationId: Recipe_GetStep\n      parameters:\n        - description: \"\"\n          in: query\n          name: userName\n          required: true\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: stepId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n            text/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n            text/xml:\n              schema:\n                type: string\n      summary: Gets recipe single step as text\n      tags:\n        - Recipe\n  /recipe/get/step/number:\n    post:\n      deprecated: false\n      operationId: Recipe_GetStepNumber\n      parameters:\n        - description: \"\"\n          in: query\n          name: userName\n          required: true\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n      summary: Returns stored step number and number of steps in recipe\n      tags:\n        - Recipe\n  /recipe/photos/pending:\n    get:\n      deprecated: false\n      operationId: Images_GetPendingByUser\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n      summary: Gets the pending by user.\n      tags:\n        - Images\n  /recipe/post/step:\n    post:\n      deprecated: false\n      operationId: Recipe_GetSteps\n      parameters:\n        - description: \"\"\n          in: query\n          name: userName\n          required: true\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: stepId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Web.Mvc.JsonResult\"\n      summary: Stores recipe step number\n      tags:\n        - Recipe\n  \"/recipe/review/replies/{replyId}\":\n    delete:\n      deprecated: false\n      operationId: Review_DeleteReply\n      parameters:\n        - description: \"\"\n          in: path\n          name: replyId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: DELETE a reply to a given review. Authenticated user must be the one who\n        originally posted the reply.\n      tags:\n        - Review\n    put:\n      deprecated: false\n      operationId: Review_PutReply\n      parameters:\n        - description: \"\"\n          in: path\n          name: replyId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/API2.Controllers.ReviewController.PostRep\\\n          lyReq\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n      summary: Update (PUT) a reply to a given review. Authenticated user must be the\n        original one that posted the reply.\n      tags:\n        - Review\n  \"/recipe/review/{reviewId}\":\n    get:\n      deprecated: false\n      parameters:\n        - in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      summary: \"Get a given review by string-style ID. This will return a payload with\n        FeaturedReply, ReplyCount.\\r\n\n        \\            Recommended display is to list top-level reviews\n        with one featured reply underneath. \\r\n\n        \\            Currently, the FeaturedReply is the most recent one\n        for that rating.\"\n      tags:\n        - Review\n    put:\n      deprecated: false\n      operationId: Review_Put\n      parameters:\n        - description: \"\"\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/API2.Controllers.ReviewController.ReviewR\\\n          equest\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      summary: Update a given top-level review.\n      tags:\n        - Review\n  \"/recipe/review/{reviewId}/replies\":\n    get:\n      deprecated: false\n      operationId: Review_GetReplies\n      parameters:\n        - description: \"\"\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n        - description: the page (int), starting with 1\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: results per page (int)\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n                type: array\n      summary: Get a paged list of replies for a given review.\n      tags:\n        - Review\n    post:\n      deprecated: false\n      operationId: Review_PostReply\n      parameters:\n        - description: \"\"\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/API2.Controllers.ReviewController.PostRep\\\n          lyReq\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n      summary: POST a reply to a given review. The date will be set by server. Note\n        that replies no longer have star ratings, only top-level reviews do.\n      tags:\n        - Review\n  /recipe/scan:\n    post:\n      deprecated: false\n      operationId: Recipe_Scan\n      parameters:\n        - in: query\n          name: test\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: devicetype\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: lat\n          required: false\n          schema:\n            type: number\n            format: double\n        - in: query\n          name: lng\n          required: false\n          schema:\n            type: number\n            format: double\n      responses:\n        \"401\":\n          description: Not authorized\n        \"402\":\n          description: Payment required (not enough credits)\n        \"415\":\n          description: Bad media type (bad JPG)\n        \"500\":\n          description: General error on initiating RecipeScan task; please try again or\n            contact us at support[at]bigoven.com\n      summary: \"POST an image as a new RecipeScan request\\r\n\n        \\                1)  Fetch the filename -- DONE\\r\n\n        \\                2)  Copy it to the pics/scan folder - ENSURE NO\n        NAMING COLLISIONS -- DONE\\r\n\n        \\                3)  Create 120 thumbnail size  in pics/scan/120\n        -- DONE\\r\n\n        \\                4)  Insert the CloudTasks record\\r\n\n        \\                5)  Create the HIT\\r\n\n        \\                6)  Update the CloudTasks record with the HIT\n        ID\\r\n\n        \\                7)  Email the requesing user\\r\n\n        \\                8)  Call out to www.bigoven.com to fetch the\n        image and re-create the thumbnail\"\n      tags:\n        - Recipe\n  \"/recipe/steps/{id}\":\n    get:\n      deprecated: false\n      operationId: Recipe_GetRecipeWithSteps\n      parameters:\n        - description: the Recipe ID to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: prefetch\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n      summary: Return full Recipe detail with steps. Returns 403 if the recipe is owned\n        by someone else.\n      tags:\n        - Recipe\n  \"/recipe/{id}\":\n    delete:\n      deprecated: false\n      operationId: Recipe_Delete\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Delete a Recipe (you must be authenticated as an owner of the recipe)\n      tags:\n        - Recipe\n    get:\n      deprecated: false\n      operationId: Recipe_Get\n      parameters:\n        - description: the Recipe ID to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - in: query\n          name: prefetch\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.Recipe\"\n      summary: Return full Recipe detail. Returns 403 if the recipe is owned by someone\n        else.\n      tags:\n        - Recipe\n  \"/recipe/{id}/zap\":\n    get:\n      deprecated: false\n      operationId: Recipe_ZapRecipe\n      parameters:\n        - description: The identifier.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Zaps the recipe.\n      tags:\n        - Recipe\n  \"/recipe/{recipeId}/feedback\":\n    post:\n      deprecated: false\n      operationId: Recipe_Feedback\n      parameters:\n        - description: \"\"\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.RecipeController.Feedbac\\\n                kDTO\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.RecipeController.Feedbac\\\n                kDTO\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.RecipeController.Feedbac\\\n                kDTO\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.RecipeController.Feedbac\\\n                kDTO\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.RecipeController.Feedbac\\\n                kDTO\"\n        description: The payload for feedback, which includes the field \"feedback\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Feedback on a Recipe -- for internal BigOven editors\n      tags:\n        - Recipe\n  \"/recipe/{recipeId}/image\":\n    post:\n      deprecated: false\n      operationId: Images_UploadRecipeImage\n      parameters:\n        - in: path\n          name: recipeId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: caption\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: lat\n          required: false\n          schema:\n            type: number\n            format: double\n        - in: query\n          name: lng\n          required: false\n          schema:\n            type: number\n            format: double\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n        \"400\":\n          description: if bad request (e.g., missing parameters)\n        \"401\":\n          description: if the user is unknown\n        \"415\":\n          description: if unsupported media type (e.g., bad JPG)\n      summary: \"POST:\n        /recipe/{recipeId}/image?lat=42\u0026amp;lng=21\u0026amp;caption=this%20is%20my%2\\\n        0caption\\r\n\n        \\             \\r\n\n        \\             Note that caption, lng and lat are all optional,\n        but must go on the request URI as params because this endpoint\\r\n\n        \\             needs a multipart/mime content header and will not\n        parse JSON in the body along with it.\\r\n\n        \\            \\r\n\n        \\             Testing with Postman (validated 11/20/2015):\\r\n\n        \\             1) Remove the Content-Type header; add\n        authentication information\\r\n\n        \\             2) On the request, click Body and choose\n        \\\"form-data\\\", then add a line item with \\\"key\\\" column set to \\\"file\\\"\n        and on the right,\\r\n\n        \\             change the type of the input from Text to\n        File.  Browse and choose a JPG.\"\n      tags:\n        - Images\n  \"/recipe/{recipeId}/images\":\n    get:\n      deprecated: false\n      operationId: Images_Get\n      parameters:\n        - description: Recipe ID (required)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n      summary: Get all the images for a recipe. DEPRECATED. Please use\n        /recipe/{recipeId}/photos.\n      tags:\n        - Images\n  \"/recipe/{recipeId}/note\":\n    post:\n      deprecated: false\n      operationId: Note_Post\n      parameters:\n        - description: recipeId (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n        description: \"a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string),\n          People (string), Variations (string), RecipeID (int?)\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeNote\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeNote\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeNote\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeNote\"\n      summary: HTTP POST a new note into the system.\n      tags:\n        - Note\n  \"/recipe/{recipeId}/note/{noteId}\":\n    delete:\n      deprecated: false\n      operationId: Note_Delete\n      parameters:\n        - description: recipeId (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: noteId (int)\n          in: path\n          name: noteId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: \"Delete a review\\r\n\n        \\                do a DELETE Http request of /note/{ID}\"\n      tags:\n        - Note\n    get:\n      deprecated: false\n      operationId: Note_Get\n      parameters:\n        - description: recipe identifier (integer)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: The note ID (note -- it's not the RecipeID)\n          in: path\n          name: noteId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n      summary: Get a given note. Make sure you're passing authentication information in\n        the header for the user who owns the note.\n      tags:\n        - Note\n    put:\n      deprecated: false\n      operationId: Note_Put\n      parameters:\n        - in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - in: path\n          name: noteId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.NoteController.NoteReque\\\n                st\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n      summary: HTTP PUT (update) a Recipe note (RecipeNote).\n      tags:\n        - Note\n  \"/recipe/{recipeId}/notes\":\n    get:\n      deprecated: false\n      operationId: Note_GetNotes\n      parameters:\n        - description: recipeId (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: page (int, starting from 1)\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: recipeId\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNoteList\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNoteList\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNoteList\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.RecipeNoteList\"\n      summary: recipe/100/notes\n      tags:\n        - Note\n  \"/recipe/{recipeId}/photos\":\n    get:\n      deprecated: false\n      operationId: Images_GetRecipePhotos\n      parameters:\n        - description: Recipe ID (required)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/API2.Controllers.ImagesController.Recip\\\n                  ePhotosResponse\"\n      summary: Get all the photos for a recipe\n      tags:\n        - Images\n  \"/recipe/{recipeId}/related\":\n    get:\n      deprecated: false\n      operationId: Recipe_Related\n      parameters:\n        - description: \"\"\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: pg\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: \"\"\n          in: query\n          name: rpp\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n      summary: Get recipes related to the given recipeId\n      tags:\n        - Recipe\n  \"/recipe/{recipeId}/review\":\n    get:\n      deprecated: false\n      parameters:\n        - description: \"\"\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      summary: Get *my* review for the recipe {recipeId}, where \"me\" is determined by\n        standard authentication headers\n      tags:\n        - Review\n    post:\n      deprecated: false\n      operationId: Review_Post\n      parameters:\n        - description: \"\"\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        $ref: \"#/components/requestBodies/API2.Controllers.ReviewController.ReviewR\\\n          equest\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: Add a new review. Only one review can be provided per {userId, recipeId}\n        pair. Otherwise your review will be updated.\n      tags:\n        - Review\n  \"/recipe/{recipeId}/review/{reviewId}\":\n    delete:\n      deprecated: false\n      operationId: Review_Delete\n      parameters:\n        - description: \"\"\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: recipeId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/System.Object\"\n      summary: \"Delete a review by recipeId and reviewId. DEPRECATED. Please see\n        recipe/review/{reviewId} for the preferred method.\\r\n\n        \\            (We are moving from an integer-based ID system to a\n        GUID-style string-based ID system for reviews and replies.)\"\n      tags:\n        - Review\n    get:\n      deprecated: false\n      parameters:\n        - description: int\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: int\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      summary: \"Get a given review - DEPRECATED. See recipe/review/{reviewId} for the\n        current usage.\\r\n\n        \\            Beginning in January 2017, BigOven moded from an\n        integer-based ID system to a GUID-style string-based ID system for\n        reviews and replies.\\r\n\n        \\            We are also supporting more of a \\\"Google Play\\\"\n        style model for Reviews and Replies. That is, there are top-level\n        Reviews and then\\r\n\n        \\            an unlimited list of replies (which do not carry\n        star ratings) underneath existing reviews. Also, a given user can only\n        have one review \\r\n\n        \\            per recipe. Existing legacy endpoints will continue\n        to work, but we strongly recommend you migrate to using the newer\n        endpoints listed\\r\n\n        \\            which do NOT carry the \\\"DEPRECATED\\\" flag.\"\n      tags:\n        - Review\n    put:\n      deprecated: false\n      operationId: Review_PutLegacy\n      parameters:\n        - description: reviewId (int)\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: recipeId (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewR\\\n                equestLegacy\"\n          text/json:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewR\\\n                equestLegacy\"\n          application/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewR\\\n                equestLegacy\"\n          text/xml:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewR\\\n                equestLegacy\"\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewR\\\n                equestLegacy\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      summary: \"HTTP PUT (update) a recipe review. DEPRECATED. Please see\n        recipe/review/{reviewId} PUT for the new endpoint.\\r\n\n        \\            We are moving to a string-based primary key system,\n        no longer integers, for reviews and replies.\"\n      tags:\n        - Review\n  \"/recipe/{recipeId}/reviews\":\n    get:\n      deprecated: false\n      operationId: Review_GetReviews\n      parameters:\n        - description: recipe id (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - description: the page (int), starting with 1\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: results per page (int)\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n                type: array\n      summary: Get paged list of reviews for a recipe. Each review will have at most\n        one FeaturedReply, as well as a ReplyCount.\n      tags:\n        - Review\n  \"/recipe/{recipeId}/scans\":\n    get:\n      deprecated: false\n      operationId: Images_GetScanImages\n      parameters:\n        - description: the recipe identifier (int)\n          in: path\n          name: recipeId\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.API.Image\"\n                type: array\n      summary: Gets a list of RecipeScan images for the recipe. There will be at most 3\n        per recipe.\n      tags:\n        - Images\n  /recipes:\n    get:\n      deprecated: false\n      operationId: Recipe_RecipeSearch\n      parameters:\n        - description: Search anywhere in the recipe for the keyword\n          in: query\n          name: any_kw\n          required: false\n          schema:\n            type: string\n        - description: Search in a specific folder name for the authenticated user\n          in: query\n          name: folder\n          required: false\n          schema:\n            type: string\n        - description: Limit to a collection ID number\n          in: query\n          name: coll\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to\n            filter to just the authenticated user's recipe set\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n        - description: Search just in the recipe title for the keyword\n          in: query\n          name: title_kw\n          required: false\n          schema:\n            type: string\n        - description: Set the target userid to search their public recipes\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Set the target username to search their public recipes\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: token\n          required: false\n          schema:\n            type: string\n        - description: if set to true, limit search results to photos only\n          in: query\n          name: photos\n          required: false\n          schema:\n            type: boolean\n        - description: if set to true, boost my own recipes in my folders so they show up\n            high in the list (at the expense of other sort orders)\n          in: query\n          name: boostmine\n          required: false\n          schema:\n            type: boolean\n        - description: integer of the subcategory you'd like to limit searches to (see the\n            /recipe/categories endpoint for available id numbers). For instance,\n            58 is \"Main Dish \u0026gt; Casseroles\".\n          in: query\n          name: include_cat\n          required: false\n          schema:\n            type: string\n        - description: like include_cat, set this to an integer to exclude a specific\n            category\n          in: query\n          name: exclude_cat\n          required: false\n          schema:\n            type: string\n        - description: csv indicating up to three top-level categories -- valid values are\n            [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]\n          in: query\n          name: include_primarycat\n          required: false\n          schema:\n            type: string\n        - description: csv indicating integer values for up to 3 top-level categories --\n            valid values are 1...11\n            [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]\n          in: query\n          name: exclude_primarycat\n          required: false\n          schema:\n            type: string\n        - description: A CSV representing up to 3 ingredients to include, e.g.,\n            tomatoes,corn%20%starch,chicken\n          in: query\n          name: include_ing\n          required: false\n          schema:\n            type: string\n        - description: A CSV representing up to 3 ingredients to\n            exclude  (Powersearch-capable plan required)\n          in: query\n          name: exclude_ing\n          required: false\n          schema:\n            type: string\n        - description: Limit to a specific cuisine. Cooks can enter anything free-form, but\n            the few dozen preconfigured values are\n            Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern\n            European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle\n            Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese\n          in: query\n          name: cuisine\n          required: false\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: db\n          required: false\n          schema:\n            type: string\n        - description: If set to a given username, it'll force the search to filter to just\n            that username\n          in: query\n          name: userset\n          required: false\n          schema:\n            type: string\n        - description: Limit to yield of a given number size or greater. Note that cooks\n            usually enter recipes by Servings, but sometimes they are posted by\n            \"dozen\", etc. This parameter simply specifies the minimum number for\n            that value entered in \"yield.\"\n          in: query\n          name: servingsMin\n          required: false\n          schema:\n            type: number\n            format: double\n        - description: Optional. If supplied, will restrict results to recipes that can be\n            made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75\n            before passing in.)\n          in: query\n          name: totalMins\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. If supplied, will restrict results to recipes that can be\n            made with {maxIngredients} ingredients or less\n          in: query\n          name: maxIngredients\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. If supplied, will restrict results to recipes that have at\n            least {minIngredients}\n          in: query\n          name: minIngredients\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: integer; results per page\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: \"integer: the page number\"\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to vegetarian (Powersearch-capable plan\n            required)\n          in: query\n          name: vtn\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to vegan (Powersearch-capable plan required)\n          in: query\n          name: vgn\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to contains-cheese (Powersearch-capable plan\n            required)\n          in: query\n          name: chs\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to gluten-free (Powersearch-capable plan\n            required)\n          in: query\n          name: glf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to nut-free (Powersearch-capable plan required)\n          in: query\n          name: ntf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to dairy-free (Powersearch-capable plan\n            required)\n          in: query\n          name: dyf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to seafood-free (Powersearch-capable plan\n            required)\n          in: query\n          name: sff\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to shellfish-free (Powersearch-capable plan\n            required)\n          in: query\n          name: slf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to tree-nut free (Powersearch-capable plan\n            required)\n          in: query\n          name: tnf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to white-meat free (Powersearch-capable plan\n            required)\n          in: query\n          name: wmf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to red-meat free (Powersearch-capable plan\n            required)\n          in: query\n          name: rmf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, recipe contains pasta, set to 0 means contains no\n            pasta (Powersearch-capable plan required)\n          in: query\n          name: cps\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optional. When set to 1, this will limit search results to \"best of\"\n            recipes as determined by various internal editorial and programmatic\n            algorithms. For the most comprehensive results, don't include this\n            parameter.\n          in: query\n          name: champion\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optional, default is false. When set to true, BigOven will attempt\n            to apply synonyms in search (e.g., excluding pork will also exclude\n            bacon)\n          in: query\n          name: synonyms\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n      summary: \"Search for recipes. There are many parameters that you can apply.\n        Starting with the most common, use title_kw to search within a title.\\r\n\n        \\            Use any_kw to search across the entire recipe.\\r\n\n        \\            If you'd like to limit by course, set the parameter\n        \\\"include_primarycat\\\" to one of\n        (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup\\\n        ,marinades,other).\\r\n\n        \\            If you'd like to exclude a category, set\n        exclude_cat to one or more (comma-separated) list of those categories to\n        exclude.\\r\n\n        \\            If you'd like to include a category, set\n        include_cat to one or more (comma-separated) of those categories to\n        include.\\r\n\n        \\            To explicitly include an ingredient in your search,\n        set the parameter \\\"include_ing\\\" to a CSV of up to three ingredients,\n        e.g.:include_ing=mustard,chicken,beef%20tips\\r\n\n        \\            To explicitly exclude an ingredient in your search,\n        set the parameter \\\"exclude_ing\\\" to a CSV of up to three ingredients.\\r\n\n        \\            All searches must contain the paging parameters pg\n        and rpp, which are integers, and represent the page number (1-based) and\n        results per page (rpp).\\r\n\n        \\            So, to get the third page of a result set paged\n        with 25 recipes per page, you'd pass pg=3\u0026amp;rpp=25\\r\n\n        \\            If you'd like to target searches to just a single\n        target user's recipes, set userId=the target userId (number).\\r\n\n        \\            Or, you can set username=theirusername\\r\n\n        \\            vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps\\r\n\n        \\            cuisine\\r\n\n        \\            photos\\r\n\n        \\            filter=added,try,favorites,myrecipes\\\\r\\\\n\\\\r\\\\n\\r\n\n        \\            folder=FolderNameCaseSensitive\\r\n\n        \\            coll=ID of Collection\"\n      tags:\n        - Recipe\n  /recipes/random:\n    get:\n      deprecated: false\n      operationId: Recipe_GetRandomRecipe\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n      summary: Get a random, home-page-quality Recipe.\n      tags:\n        - Recipe\n  /recipes/raves:\n    get:\n      deprecated: false\n      operationId: Recipe_Raves\n      parameters:\n        - description: page, starting with 1\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: results per page\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoReviewTuple2\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoReviewTuple2\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoReviewTuple2\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoReviewTuple2\"\n                type: array\n      summary: Get the recipe/comment tuples for those recipes with 4 or 5 star ratings\n      tags:\n        - Recipe\n  /recipes/recentviews:\n    get:\n      deprecated: false\n      operationId: Recipe_RecentViews\n      parameters:\n        - description: Page number starting with 1\n          in: query\n          name: pg\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: results per page\n          in: query\n          name: rpp\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoDateTuple2\"\n                type: array\n            text/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoDateTuple2\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoDateTuple2\"\n                type: array\n            text/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/BigOven.Model.RecipeInfoDateTuple2\"\n                type: array\n      summary: Get a list of recipes that the authenticated user has most recently\n        viewed\n      tags:\n        - Recipe\n  /recipes/top25random:\n    get:\n      deprecated: false\n      operationId: Recipe_RecipeSearchRandom\n      parameters:\n        - description: Search anywhere in the recipe for the keyword\n          in: query\n          name: any_kw\n          required: false\n          schema:\n            type: string\n        - description: Search in a specific folder name for the authenticated user\n          in: query\n          name: folder\n          required: false\n          schema:\n            type: string\n        - description: Limit to a collection ID number\n          in: query\n          name: coll\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to\n            filter to just the authenticated user's recipe set\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n        - description: Search just in the recipe title for the keyword\n          in: query\n          name: title_kw\n          required: false\n          schema:\n            type: string\n        - description: Set the target userid to search their public recipes\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Set the target username to search their public recipes\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: token\n          required: false\n          schema:\n            type: string\n        - description: if set to true, limit search results to photos only\n          in: query\n          name: photos\n          required: false\n          schema:\n            type: boolean\n        - description: if set to true, boost my own recipes in my folders so they show up\n            high in the list (at the expense of other sort orders)\n          in: query\n          name: boostmine\n          required: false\n          schema:\n            type: boolean\n        - description: integer of the subcategory you'd like to limit searches to (see the\n            /recipe/categories endpoint for available id numbers). For instance,\n            58 is \"Main Dish \u0026gt; Casseroles\".\n          in: query\n          name: include_cat\n          required: false\n          schema:\n            type: string\n        - description: like include_cat, set this to an integer to exclude a specific\n            category\n          in: query\n          name: exclude_cat\n          required: false\n          schema:\n            type: string\n        - description: csv indicating up to three top-level categories -- valid values are\n            [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]\n          in: query\n          name: include_primarycat\n          required: false\n          schema:\n            type: string\n        - description: csv indicating integer values for up to 3 top-level categories --\n            valid values are 1...11\n            [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]\n          in: query\n          name: exclude_primarycat\n          required: false\n          schema:\n            type: string\n        - description: A CSV representing up to 3 ingredients to include, e.g.,\n            tomatoes,corn%20%starch,chicken\n          in: query\n          name: include_ing\n          required: false\n          schema:\n            type: string\n        - description: A CSV representing up to 3 ingredients to\n            exclude  (Powersearch-capable plan required)\n          in: query\n          name: exclude_ing\n          required: false\n          schema:\n            type: string\n        - description: Limit to a specific cuisine. Cooks can enter anything free-form, but\n            the few dozen preconfigured values are\n            Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern\n            European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle\n            Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese\n          in: query\n          name: cuisine\n          required: false\n          schema:\n            type: string\n        - description: \"\"\n          in: query\n          name: db\n          required: false\n          schema:\n            type: string\n        - description: If set to a given username, it'll force the search to filter to just\n            that username\n          in: query\n          name: userset\n          required: false\n          schema:\n            type: string\n        - description: Limit to yield of a given number size or greater. Note that cooks\n            usually enter recipes by Servings, but sometimes they are posted by\n            \"dozen\", etc. This parameter simply specifies the minimum number for\n            that value entered in \"yield.\"\n          in: query\n          name: servingsMin\n          required: false\n          schema:\n            type: number\n            format: double\n        - description: Optional. If supplied, will restrict results to recipes that can be\n            made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75\n            before passing in.)\n          in: query\n          name: totalMins\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. If supplied, will restrict results to recipes that can be\n            made with {maxIngredients} ingredients or less\n          in: query\n          name: maxIngredients\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. If supplied, will restrict results to recipes that have at\n            least {minIngredients}\n          in: query\n          name: minIngredients\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to vegetarian (Powersearch-capable plan\n            required)\n          in: query\n          name: vtn\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to vegan (Powersearch-capable plan required)\n          in: query\n          name: vgn\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to contains-cheese (Powersearch-capable plan\n            required)\n          in: query\n          name: chs\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to gluten-free (Powersearch-capable plan\n            required)\n          in: query\n          name: glf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to nut-free (Powersearch-capable plan required)\n          in: query\n          name: ntf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to dairy-free (Powersearch-capable plan\n            required)\n          in: query\n          name: dyf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to seafood-free (Powersearch-capable plan\n            required)\n          in: query\n          name: sff\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to shellfish-free (Powersearch-capable plan\n            required)\n          in: query\n          name: slf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to tree-nut free (Powersearch-capable plan\n            required)\n          in: query\n          name: tnf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to white-meat free (Powersearch-capable plan\n            required)\n          in: query\n          name: wmf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, limit to red-meat free (Powersearch-capable plan\n            required)\n          in: query\n          name: rmf\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: when set to 1, recipe contains pasta, set to 0 means contains no\n            pasta (Powersearch-capable plan required)\n          in: query\n          name: cps\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optional. When set to 1, this will limit search results to \"best of\"\n            recipes as determined by various internal editorial and programmatic\n            algorithms. For the most comprehensive results, don't include this\n            parameter.\n          in: query\n          name: champion\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: optional, default is false. When set to true, BigOven will attempt\n            to apply synonyms in search (e.g., excluding pork will also exclude\n            bacon)\n          in: query\n          name: synonyms\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/json:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n            text/xml:\n              schema:\n                $ref: \"#/components/schemas/BigOven.Model.API2.RecipeSearchResult\"\n      summary: \"Search for recipes. There are many parameters that you can apply.\n        Starting with the most common, use title_kw to search within a title.\\r\n\n        \\            Use any_kw to search across the entire recipe.\\r\n\n        \\            If you'd like to limit by course, set the parameter\n        \\\"include_primarycat\\\" to one of\n        (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup\\\n        ,marinades,other).\\r\n\n        \\            If you'd like to exclude a category, set\n        exclude_cat to one or more (comma-separated) list of those categories to\n        exclude.\\r\n\n        \\            If you'd like to include a category, set\n        include_cat to one or more (comma-separated) of those categories to\n        include.\\r\n\n        \\            To explicitly include an ingredient in your search,\n        set the parameter \\\"include_ing\\\" to a CSV of up to three ingredients,\n        e.g.:include_ing=mustard,chicken,beef%20tips\\r\n\n        \\            To explicitly exclude an ingredient in your search,\n        set the parameter \\\"exclude_ing\\\" to a CSV of up to three ingredients.\\r\n\n        \\            All searches must contain the paging parameters pg\n        and rpp, which are integers, and represent the page number (1-based) and\n        results per page (rpp).\\r\n\n        \\            So, to get the third page of a result set paged\n        with 25 recipes per page, you'd pass pg=3\u0026amp;rpp=25\\r\n\n        \\            If you'd like to target searches to just a single\n        target user's recipes, set userId=the target userId (number).\\r\n\n        \\            Or, you can set username=theirusername\\r\n\n        \\            vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps\\r\n\n        \\            cuisine\\r\n\n        \\            photos\\r\n\n        \\            filter=added,try,favorites,myrecipes\\\\r\\\\n\\\\r\\\\n\\r\n\n        \\            folder=FolderNameCaseSensitive\\r\n\n        \\            coll=ID of Collection\"\n      tags:\n        - Recipe\nservers:\n  - url: https://api2.bigoven.com\ncomponents:\n  requestBodies:\n    API2.Controllers.ReviewController.ReviewRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewReq\\\n              uest\"\n        text/json:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewReq\\\n              uest\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewReq\\\n              uest\"\n        text/xml:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewReq\\\n              uest\"\n        application/x-www-form-urlencoded:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.ReviewReq\\\n              uest\"\n      required: true\n    BigOven.Model.API.Recipe:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n        text/json:\n          schema:\n            $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n        text/xml:\n          schema:\n            $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n        application/x-www-form-urlencoded:\n          schema:\n            $ref: \"#/components/schemas/BigOven.Model.API.Recipe\"\n      required: true\n    API2.Controllers.ReviewController.PostReplyReq:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.PostReply\\\n              Req\"\n        text/json:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.PostReply\\\n              Req\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.PostReply\\\n              Req\"\n        text/xml:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.PostReply\\\n              Req\"\n        application/x-www-form-urlencoded:\n          schema:\n            $ref: \"#/components/schemas/API2.Controllers.ReviewController.PostReply\\\n              Req\"\n      required: true\n  securitySchemes:\n    api_key:\n      description: \"Pass your api_key in the header (recommended) or as a URL parameter.\n        For the URL parameter, use api_key. For the header, send it as a header\n        value for: X-BigOven-API-Key\"\n      in: header\n      name: X-BigOven-API-Key\n      type: apiKey\n    basic:\n      description: Basic HTTP Authentication is used for those endpoint calls where you\n        want to act as a BigOven user -- e.g., to get the list of favorites of a\n        signed-in user, or add items to their grocery list.\n      type: http\n      scheme: basic\n  schemas:\n    API2.Controllers.GroceryListController.DepartmentModel:\n      description: \"\"\n      properties:\n        items:\n          description: Gets or sets the items.\n          type: string\n      type: object\n    API2.Controllers.GroceryListController.PostGroceryListAddLineRequest:\n      description: \"\"\n      properties:\n        text:\n          description: Gets or sets the text.\n          type: string\n      type: object\n    API2.Controllers.GroceryListController.PostGroceryListRecipeRequest:\n      description: \"\"\n      properties:\n        markAsPending:\n          description: Gets or sets the mark as pending.\n          type: boolean\n        recipeId:\n          description: Gets or sets the recipe identifier.\n          format: int32\n          type: integer\n        scale:\n          description: Gets or sets the scale.\n          format: double\n          type: number\n      type: object\n    API2.Controllers.GroceryListController.PostGroceryListSyncRequest:\n      description: \"\"\n      properties:\n        list:\n          $ref: \"#/components/schemas/BigOven.Model.API.Grocery.GroceryList\"\n        since:\n          description: Gets or sets the since.\n          type: string\n      type: object\n    API2.Controllers.GroceryListController.PostToGroceryListRecipeRequest:\n      description: \"\"\n      properties:\n        department:\n          description: Gets or sets the department.\n          type: string\n        name:\n          description: Gets or sets the name.\n          type: string\n        notes:\n          description: Gets or sets the notes.\n          type: string\n        quantity:\n          description: Gets or sets the quantity.\n          type: string\n        unit:\n          description: Gets or sets the unit.\n          type: string\n      type: object\n    API2.Controllers.GroceryListController.UpdateItemByGuidRequest:\n      description: \"\"\n      properties:\n        department:\n          description: Gets or sets the department.\n          type: string\n        guid:\n          description: Gets or sets the unique identifier.\n          type: string\n        ischecked:\n          description: Gets or sets the ischecked.\n          type: boolean\n        name:\n          description: Gets or sets the name.\n          type: string\n        notes:\n          description: Gets or sets the notes.\n          type: string\n        quantity:\n          description: Gets or sets the quantity.\n          type: string\n        unit:\n          description: Gets or sets the unit.\n          type: string\n      type: object\n    API2.Controllers.ImagesController.RecipePhotosResponse:\n      description: \"\"\n      properties:\n        ResultCount:\n          description: Gets or sets the result count.\n          format: int32\n          type: integer\n        Results:\n          description: Gets or sets the results.\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API2.Photo\"\n          type: array\n      type: object\n    API2.Controllers.MeController.EatingStyle:\n      description: \"\"\n      properties:\n        Options:\n          description: Gets or sets the options.\n          items:\n            $ref: \"#/components/schemas/API2.Controllers.MeController.Option\"\n          type: array\n      type: object\n    API2.Controllers.MeController.Option:\n      description: \"\"\n      properties:\n        Description:\n          description: Gets or sets the description.\n          type: string\n        Key:\n          description: Gets or sets the key.\n          type: string\n      type: object\n    API2.Controllers.MeController.PreferenceOptions:\n      description: \"\"\n      properties:\n        EatingStyle:\n          $ref: \"#/components/schemas/API2.Controllers.MeController.EatingStyle\"\n      type: object\n    API2.Controllers.NoteController.NoteRequest:\n      description: \"\"\n      properties:\n        CreationDate:\n          description: Gets or sets the creation date.\n          format: date-time\n          type: string\n        Date:\n          description: Gets or sets the date.\n          format: date-time\n          type: string\n        DateDT:\n          description: Gets or sets the date dt.\n          type: string\n        GUID:\n          description: Gets or sets the unique identifier.\n          type: string\n        ID:\n          description: Gets or sets the identifier.\n          format: int32\n          type: integer\n        Notes:\n          description: Gets or sets the notes.\n          type: string\n        People:\n          description: Gets or sets the people.\n          type: string\n        RecipeID:\n          description: Gets or sets the recipe identifier.\n          format: int32\n          type: integer\n        UserID:\n          description: Gets or sets the user identifier.\n          format: int32\n          type: integer\n        Variations:\n          description: Gets or sets the variations.\n          type: string\n      type: object\n    API2.Controllers.RecipeController.FeedbackDTO:\n      description: \"\"\n      properties:\n        feedback:\n          description: \"\"\n          type: string\n      type: object\n    API2.Controllers.ReviewController.PostReplyReq:\n      description: Reply request parameters\n      properties:\n        Comment:\n          description: The comment. If mentioning any user(s) (optional), include them as\n            @username in the text body. Do not use @ symbol for anything but\n            mentioning @usernames.\n          type: string\n      type: object\n    API2.Controllers.ReviewController.ReviewRequest:\n      description: Payload for reviews\n      properties:\n        ActiveMinutes:\n          description: \"How many minutes of ACTIVE time (i.e., actively working on the\n            recipe, not waiting for rising, baking, etc.) did it \\r\n\n            \\            demand of the cook? Optional.\"\n          format: int32\n          type: integer\n        Comment:\n          description: The notes\n          type: string\n        MakeAgain:\n          description: '\"yes\" or \"no\"'\n          type: string\n        StarRating:\n          description: 1, 2, 3, 4, or 5\n          format: int32\n          type: integer\n        TotalMinutes:\n          description: How long, start to finish, in minutes (integer) did it take?\n            Optional.\n          format: int32\n          type: integer\n      type: object\n    API2.Controllers.ReviewController.ReviewRequestLegacy:\n      description: Legacy -- This object here is deprecated. Please use the new\n        \"ReviewRequest\" structure for all future development\n      properties:\n        ActiveMinutes:\n          format: int32\n          type: integer\n        Comment:\n          type: string\n        GUID:\n          type: string\n        MakeAgain:\n          type: string\n        ParentID:\n          format: int32\n          type: integer\n        StarRating:\n          format: int32\n          type: integer\n        TotalMinutes:\n          format: int32\n          type: integer\n      type: object\n    API2.Controllers.WebAPI.ArticleController.PutArticleReq:\n      description: Update an article\n      properties:\n        definition:\n          description: the html definition\n          type: string\n      type: object\n    API2.GroceryListDepartmentResult:\n      description: \"\"\n      properties:\n        dept:\n          description: Gets or sets the dept.\n          type: string\n        item:\n          description: Gets or sets the item.\n          type: string\n      type: object\n    API2.Models.Accounting:\n      description: \"\"\n      properties:\n        CreditBalance:\n          description: \"\"\n          format: int32\n          type: integer\n        MemberSince:\n          description: \"\"\n          format: date-time\n          type: string\n        PremiumExpiryDate:\n          description: \"\"\n          format: date-time\n          type: string\n        UserLevel:\n          description: \"\"\n          type: string\n      type: object\n    API2.Models.BigOvenUser:\n      description: An API2 wrapper object for a user\n      properties:\n        Accounting:\n          $ref: \"#/components/schemas/API2.Models.Accounting\"\n        BOAuthToken:\n          description: The user-specific authentication token\n          type: string\n        LastChangeLogID:\n          description: Last change log\n          type: string\n        Personal:\n          $ref: \"#/components/schemas/API2.Models.Personal\"\n        Preferences:\n          $ref: \"#/components/schemas/API2.Models.Preference\"\n        Profile:\n          $ref: \"#/components/schemas/API2.Models.Profile\"\n      type: object\n    API2.Models.Counts:\n      description: \"\"\n      properties:\n        AddedCount:\n          description: \"\"\n          format: int64\n          type: integer\n        FollowersCount:\n          description: \"\"\n          format: int64\n          type: integer\n        FollowingCount:\n          description: \"\"\n          format: int64\n          type: integer\n        PrivateRecipeCount:\n          description: \"\"\n          format: int64\n          type: integer\n        PublicRecipeCount:\n          description: \"\"\n          format: int64\n          type: integer\n        TotalRecipes:\n          description: \"\"\n          format: int64\n          type: integer\n      type: object\n    API2.Models.Location:\n      description: \"\"\n      properties:\n        City:\n          description: \"\"\n          type: string\n        Country:\n          description: \"\"\n          type: string\n        DMA:\n          description: \"\"\n          format: int32\n          type: integer\n      type: object\n    API2.Models.Personal:\n      description: Personal level info -- email, location, etc.\n      properties:\n        Email:\n          description: \"\"\n          type: string\n        Location:\n          $ref: \"#/components/schemas/API2.Models.Location\"\n      type: object\n    API2.Models.Preference:\n      description: \"\"\n      properties:\n        EatingStyle:\n          description: \"\"\n          type: string\n      type: object\n    API2.Models.Profile:\n      description: \"\"\n      properties:\n        AboutMe:\n          description: \"\"\n          type: string\n        BackgroundUrl:\n          description: \"\"\n          type: string\n        Counts:\n          $ref: \"#/components/schemas/API2.Models.Counts\"\n        FirstName:\n          description: \"\"\n          type: string\n        FullName:\n          description: \"\"\n          type: string\n        HomeUrl:\n          description: \"\"\n          type: string\n        LastName:\n          description: \"\"\n          type: string\n        PhotoUrl:\n          description: \"\"\n          type: string\n        UserID:\n          description: \"\"\n          format: int64\n          type: integer\n        UserName:\n          description: \"\"\n          type: string\n      type: object\n    BigOven.Model.API.GlossaryEntry:\n      properties:\n        CreationDate:\n          format: date-time\n          type: string\n        Definition:\n          type: string\n        GlossaryEntryID:\n          format: int32\n          type: integer\n        LastModified:\n          format: date-time\n          type: string\n        Term:\n          type: string\n      type: object\n    BigOven.Model.API.Grocery.GroceryList:\n      properties:\n        Items:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.Grocery.Item\"\n          type: array\n        LastModified:\n          format: date-time\n          type: string\n        Recipes:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.RecipeInfo\"\n          type: array\n        VersionGuid:\n          type: string\n      type: object\n    BigOven.Model.API.Grocery.Item:\n      properties:\n        BigOvenObject:\n          type: string\n        CreationDate:\n          format: date-time\n          type: string\n        Department:\n          type: string\n        DisplayQuantity:\n          type: string\n        GUID:\n          type: string\n        IsChecked:\n          type: boolean\n        ItemID:\n          format: int64\n          type: integer\n        LastModified:\n          format: date-time\n          type: string\n        LocalStatus:\n          type: string\n        Name:\n          type: string\n        Notes:\n          type: string\n        RecipeID:\n          format: int32\n          type: integer\n        ThirdPartyURL:\n          type: string\n      type: object\n    BigOven.Model.API.Image:\n      properties:\n        Caption:\n          type: string\n        CreationDate:\n          type: string\n        ImageID:\n          format: int64\n          type: integer\n        ImageSquares:\n          items:\n            format: int32\n            type: integer\n          type: array\n        ImageURL:\n          type: string\n        ImageURL120:\n          type: string\n        ImageURL128:\n          type: string\n        ImageURL200:\n          type: string\n        ImageURL256:\n          type: string\n        ImageURL48:\n          type: string\n        ImageURL64:\n          type: string\n        IsPrimary:\n          type: boolean\n        MaxImageSquare:\n          format: int32\n          type: integer\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfo\"\n      type: object\n    BigOven.Model.API.Ingredient:\n      properties:\n        DisplayIndex:\n          format: int32\n          type: integer\n        DisplayQuantity:\n          type: string\n        HTMLName:\n          type: string\n        IngredientID:\n          format: int64\n          type: integer\n        IngredientInfo:\n          $ref: \"#/components/schemas/BigOven.Model.API.IngredientInfo\"\n        IsHeading:\n          type: boolean\n        IsLinked:\n          type: boolean\n        MetricDisplayQuantity:\n          type: string\n        MetricQuantity:\n          format: double\n          type: number\n        MetricUnit:\n          type: string\n        Name:\n          type: string\n        PreparationNotes:\n          type: string\n        Quantity:\n          format: double\n          type: number\n        Unit:\n          type: string\n      type: object\n    BigOven.Model.API.IngredientInfo:\n      properties:\n        Department:\n          type: string\n        MasterIngredientID:\n          format: int32\n          type: integer\n        Name:\n          type: string\n        UsuallyOnHand:\n          type: boolean\n      type: object\n    BigOven.Model.API.NutritionInfo:\n      properties:\n        CaloriesFromFat:\n          format: double\n          type: number\n        Cholesterol:\n          format: double\n          type: number\n        CholesterolPct:\n          format: double\n          type: number\n        DietaryFiber:\n          format: double\n          type: number\n        DietaryFiberPct:\n          format: double\n          type: number\n        MonoFat:\n          format: double\n          type: number\n        PolyFat:\n          format: double\n          type: number\n        Potassium:\n          format: double\n          type: number\n        PotassiumPct:\n          format: double\n          type: number\n        Protein:\n          format: double\n          type: number\n        ProteinPct:\n          format: double\n          type: number\n        SatFat:\n          format: double\n          type: number\n        SatFatPct:\n          format: double\n          type: number\n        SingularYieldUnit:\n          type: string\n        Sodium:\n          format: double\n          type: number\n        SodiumPct:\n          format: double\n          type: number\n        Sugar:\n          format: double\n          type: number\n        TotalCalories:\n          format: double\n          type: number\n        TotalCarbs:\n          format: double\n          type: number\n        TotalCarbsPct:\n          format: double\n          type: number\n        TotalFat:\n          format: double\n          type: number\n        TotalFatPct:\n          format: double\n          type: number\n        TransFat:\n          format: double\n          type: number\n      type: object\n    BigOven.Model.API.Recipe:\n      properties:\n        ActiveMinutes:\n          format: int32\n          type: integer\n        AdTags:\n          type: string\n        AdminBoost:\n          format: int32\n          type: integer\n        AllCategoriesText:\n          type: string\n        BookmarkImageURL:\n          type: string\n        BookmarkSiteLogo:\n          type: string\n        BookmarkURL:\n          type: string\n        Category:\n          type: string\n        Collection:\n          type: string\n        CollectionID:\n          format: int32\n          type: integer\n        CreationDate:\n          format: date-time\n          type: string\n        Cuisine:\n          type: string\n        Description:\n          type: string\n        FavoriteCount:\n          format: int32\n          type: integer\n        HeroPhotoUrl:\n          type: string\n        ImageSquares:\n          items:\n            format: int32\n            type: integer\n          type: array\n        ImageURL:\n          type: string\n        Ingredients:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.Ingredient\"\n          type: array\n        IngredientsTextBlock:\n          type: string\n        Instructions:\n          type: string\n        IsBookmark:\n          type: boolean\n        IsPrivate:\n          type: boolean\n        IsRecipeScan:\n          type: boolean\n        IsSponsored:\n          type: boolean\n        LastModified:\n          format: date-time\n          type: string\n        MaxImageSquare:\n          format: int32\n          type: integer\n        MedalCount:\n          format: int32\n          type: integer\n        MenuCount:\n          format: int32\n          type: integer\n        Microcategory:\n          type: string\n        NotesCount:\n          format: int32\n          type: integer\n        NutritionInfo:\n          $ref: \"#/components/schemas/BigOven.Model.API.NutritionInfo\"\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfo\"\n        PrimaryIngredient:\n          type: string\n        RecipeID:\n          format: int32\n          type: integer\n        ReviewCount:\n          format: int32\n          type: integer\n        StarRating:\n          format: double\n          type: number\n        Subcategory:\n          type: string\n        Title:\n          type: string\n        TotalMinutes:\n          format: int32\n          type: integer\n        VariantOfRecipeID:\n          format: int32\n          type: integer\n        VerifiedByClass:\n          type: string\n        VerifiedDateTime:\n          format: date-time\n          type: string\n        WebURL:\n          type: string\n        YieldNumber:\n          format: double\n          type: number\n        YieldUnit:\n          type: string\n      type: object\n    BigOven.Model.API.RecipeInfo:\n      properties:\n        BookmarkURL:\n          type: string\n        Category:\n          type: string\n        CreationDate:\n          format: date-time\n          type: string\n        Cuisine:\n          type: string\n        HeroPhotoUrl:\n          type: string\n        HideFromPublicSearch:\n          type: boolean\n        ImageURL:\n          type: string\n        ImageURL120:\n          type: string\n        IsBookmark:\n          type: boolean\n        IsPrivate:\n          type: boolean\n        MaxImageSquare:\n          format: int32\n          type: integer\n        Microcategory:\n          type: string\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfo\"\n        QualityScore:\n          format: double\n          type: number\n        RecipeID:\n          format: int32\n          type: integer\n        ReviewCount:\n          format: int32\n          type: integer\n        StarRating:\n          format: double\n          type: number\n        StarRatingIMG:\n          type: string\n        Subcategory:\n          type: string\n        Title:\n          type: string\n        TotalTries:\n          format: int32\n          type: integer\n        WebURL:\n          type: string\n        YieldNumber:\n          format: double\n          type: number\n      type: object\n    BigOven.Model.API.RecipeNote:\n      properties:\n        CreationDate:\n          format: date-time\n          type: string\n        Date:\n          type: string\n        DateDT:\n          format: date-time\n          type: string\n        GUID:\n          type: string\n        ID:\n          format: int32\n          type: integer\n        Notes:\n          type: string\n        People:\n          type: string\n        RecipeID:\n          format: int32\n          type: integer\n        UserID:\n          format: int32\n          type: integer\n        Variations:\n          type: string\n      type: object\n    BigOven.Model.API.RecipeNoteList:\n      properties:\n        ResultCount:\n          format: int32\n          type: integer\n        Results:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.RecipeNote\"\n          type: array\n      type: object\n    BigOven.Model.API.Reply:\n      properties:\n        Comment:\n          type: string\n        CreationDate:\n          format: date-time\n          type: string\n        ID:\n          type: string\n        LastModified:\n          format: date-time\n          type: string\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfoTiny\"\n        ReviewID:\n          type: string\n      type: object\n    BigOven.Model.API.Review:\n      properties:\n        ActiveMinutes:\n          format: int32\n          type: integer\n        Comment:\n          type: string\n        CreationDate:\n          format: date-time\n          type: string\n        FeaturedReply:\n          $ref: \"#/components/schemas/BigOven.Model.API.Reply\"\n        GUID:\n          type: string\n        ID:\n          type: string\n        LastModified:\n          format: date-time\n          type: string\n        ParentID:\n          format: int64\n          type: integer\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfo\"\n        Replies:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n          type: array\n        ReplyCount:\n          format: int32\n          type: integer\n        ReviewID:\n          format: int64\n          type: integer\n        StarRating:\n          format: double\n          type: number\n        TotalMinutes:\n          format: int32\n          type: integer\n      type: object\n    BigOven.Model.API.UserInfo:\n      properties:\n        FirstName:\n          type: string\n        ImageURL48:\n          type: string\n        IsKitchenHelper:\n          type: boolean\n        IsPremium:\n          type: boolean\n        IsUsingRecurly:\n          type: boolean\n        LastName:\n          type: string\n        MemberSince:\n          format: date-time\n          type: string\n        PhotoUrl:\n          type: string\n        PremiumExpiryDate:\n          format: date-time\n          type: string\n        UserID:\n          format: int32\n          type: integer\n        UserName:\n          type: string\n      type: object\n    BigOven.Model.API.UserInfoTiny:\n      properties:\n        FirstName:\n          type: string\n        LastName:\n          type: string\n        PhotoUrl:\n          type: string\n        UserID:\n          format: int32\n          type: integer\n        UserName:\n          type: string\n      type: object\n    BigOven.Model.API2.CollectionInfo:\n      properties:\n        Description:\n          type: string\n        ID:\n          format: int32\n          type: integer\n        IsFiltered:\n          type: boolean\n        IsSponsored:\n          type: boolean\n        MobileUrl:\n          type: string\n        PRO:\n          type: boolean\n        PhotoUrl:\n          type: string\n        Results:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API2.RecipeInfox\"\n          type: array\n        Title:\n          type: string\n        Token:\n          type: string\n        WebUrl:\n          type: string\n      type: object\n    BigOven.Model.API2.GroceryList:\n      properties:\n        Items:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.Grocery.Item\"\n          type: array\n        LastModified:\n          format: date-time\n          type: string\n        Recipes:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API2.RecipeInfox\"\n          type: array\n        VersionGuid:\n          type: string\n      type: object\n    BigOven.Model.API2.Photo:\n      properties:\n        Caption:\n          type: string\n        CreationDate:\n          type: string\n        ImageID:\n          format: int64\n          type: integer\n        IsPrimary:\n          type: boolean\n        MaxImageSquare:\n          format: int32\n          type: integer\n        PhotoUrl:\n          type: string\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API2.UserInfoTinyx\"\n      type: object\n    BigOven.Model.API2.Recipe:\n      properties:\n        ActiveMinutes:\n          format: int32\n          type: integer\n        AdTags:\n          type: string\n        AdminBoost:\n          format: int32\n          type: integer\n        AllCategoriesText:\n          type: string\n        BookmarkImageURL:\n          type: string\n        BookmarkSiteLogo:\n          type: string\n        BookmarkURL:\n          type: string\n        Category:\n          type: string\n        Collection:\n          type: string\n        CollectionID:\n          format: int32\n          type: integer\n        CreationDate:\n          format: date-time\n          type: string\n        Cuisine:\n          type: string\n        Description:\n          type: string\n        FavoriteCount:\n          format: int32\n          type: integer\n        ImageSquares:\n          items:\n            format: int32\n            type: integer\n          type: array\n        ImageURL:\n          type: string\n        Ingredients:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API.Ingredient\"\n          type: array\n        IngredientsTextBlock:\n          type: string\n        Instructions:\n          type: string\n        IsBookmark:\n          type: boolean\n        IsPrivate:\n          type: boolean\n        IsRecipeScan:\n          type: boolean\n        IsSponsored:\n          type: boolean\n        LastModified:\n          format: date-time\n          type: string\n        MaxImageSquare:\n          format: int32\n          type: integer\n        MedalCount:\n          format: int32\n          type: integer\n        MenuCount:\n          format: int32\n          type: integer\n        Microcategory:\n          type: string\n        NotesCount:\n          format: int32\n          type: integer\n        NutritionInfo:\n          $ref: \"#/components/schemas/BigOven.Model.API.NutritionInfo\"\n        PhotoUrl:\n          type: string\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API.UserInfo\"\n        PrimaryIngredient:\n          type: string\n        RecipeID:\n          format: int32\n          type: integer\n        ReviewCount:\n          format: int32\n          type: integer\n        StarRating:\n          format: double\n          type: number\n        Steps:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.InstructionStep\"\n          type: array\n        Subcategory:\n          type: string\n        Title:\n          type: string\n        TotalMinutes:\n          format: int32\n          type: integer\n        VariantOfRecipeID:\n          format: int32\n          type: integer\n        VerifiedByClass:\n          type: string\n        VerifiedDateTime:\n          format: date-time\n          type: string\n        WebURL:\n          type: string\n        YieldNumber:\n          format: double\n          type: number\n        YieldUnit:\n          type: string\n      type: object\n    BigOven.Model.API2.RecipeInfox:\n      properties:\n        Category:\n          type: string\n        CreationDate:\n          format: date-time\n          type: string\n        Cuisine:\n          type: string\n        IsBookmark:\n          type: boolean\n        IsPrivate:\n          type: boolean\n        IsRecipeScan:\n          type: boolean\n        Microcategory:\n          type: string\n        PhotoUrl:\n          type: string\n        Poster:\n          $ref: \"#/components/schemas/BigOven.Model.API2.UserInfoTinyx\"\n        RecipeID:\n          format: int32\n          type: integer\n        ReviewCount:\n          format: int32\n          type: integer\n        Servings:\n          format: double\n          type: number\n        StarRating:\n          format: double\n          type: number\n        Subcategory:\n          type: string\n        Title:\n          type: string\n        TotalTries:\n          format: int32\n          type: integer\n        WebURL:\n          type: string\n      type: object\n    BigOven.Model.API2.RecipeNote:\n      properties:\n        CreationDate:\n          format: date-time\n          type: string\n        Date:\n          type: string\n        DateDT:\n          format: date-time\n          type: string\n        GUID:\n          type: string\n        ID:\n          format: int32\n          type: integer\n        Notes:\n          type: string\n        People:\n          type: string\n        RecipeID:\n          format: int32\n          type: integer\n        UserID:\n          format: int32\n          type: integer\n        Variations:\n          type: string\n      type: object\n    BigOven.Model.API2.RecipeSearchResult:\n      properties:\n        ResultCount:\n          format: int32\n          type: integer\n        Results:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.API2.RecipeInfox\"\n          type: array\n        SpellSuggest:\n          type: string\n      type: object\n    BigOven.Model.API2.UserInfoTinyx:\n      properties:\n        FirstName:\n          type: string\n        LastName:\n          type: string\n        PhotoUrl:\n          type: string\n        UserID:\n          format: int32\n          type: integer\n        UserName:\n          type: string\n      type: object\n    BigOven.Model.Article:\n      properties:\n        AllCategoriesText:\n          type: string\n        ApprovedForDisplay:\n          type: boolean\n        ArticleId:\n          format: int32\n          type: integer\n        AssignedToUserID:\n          format: int32\n          type: integer\n        Body:\n          type: string\n        Byline:\n          type: string\n        CaptionedImages:\n          items:\n            $ref: \"#/components/schemas/BigOven.Model.CaptionedImage\"\n          type: array\n        CategoryID:\n          format: int32\n          type: integer\n        DateApproved:\n          format: date-time\n          type: string\n        DateAssigned:\n          format: date-time\n          type: string\n        DateCreated:\n          format: date-time\n          type: string\n        DeadlineDate:\n          format: date-time\n          type: string\n        Id:\n          type: string\n        InternalAbstract:\n          type: string\n        IsSeasonal:\n          type: boolean\n        LineOrder:\n          format: int32\n          type: integer\n        PrimaryImage:\n          type: string\n        ReadyForReview:\n          type: boolean\n        SeasonalEndEmphasis:\n          format: date-time\n          type: string\n        SeasonalStartEmphasis:\n          format: date-time\n          type: string\n        ShortURL:\n          type: string\n        Slug:\n          type: string\n        SubcategoryID:\n          format: int32\n          type: integer\n        Subhead:\n          type: string\n        Title:\n          type: string\n        keywordUnique:\n          type: string\n      type: object\n    BigOven.Model.CaptionedImage:\n      properties:\n        Caption:\n          type: string\n        PhotoUrl:\n          type: string\n      type: object\n    BigOven.Model.InstructionStep:\n      properties:\n        EndGantt:\n          format: int32\n          type: integer\n        StartGantt:\n          format: int32\n          type: integer\n        Text:\n          type: string\n      type: object\n    BigOven.Model.RecipeCategory:\n      properties:\n        Category:\n          type: string\n        DefaultActiveMinutes:\n          format: int32\n          type: integer\n        DefaultTotalMinutes:\n          format: int32\n          type: integer\n        ID:\n          format: int32\n          type: integer\n        ParentID:\n          format: int32\n          type: integer\n        PrimaryImage:\n          type: string\n        ShortDescription:\n          type: string\n      type: object\n    BigOven.Model.RecipeInfoDateTuple2:\n      properties:\n        date:\n          format: date-time\n          type: string\n        recipeInfo:\n          $ref: \"#/components/schemas/BigOven.Model.API2.RecipeInfox\"\n      type: object\n    BigOven.Model.RecipeInfoReviewTuple2:\n      properties:\n        RecipeInfo:\n          $ref: \"#/components/schemas/BigOven.Model.API2.RecipeInfox\"\n        Review:\n          $ref: \"#/components/schemas/BigOven.Model.API.Review\"\n      type: object\n    BigOven.Model.RecipeInfoTiny:\n      properties:\n        ImageURL:\n          type: string\n        QualityScore:\n          format: int32\n          type: integer\n        RecipeID:\n          format: int32\n          type: integer\n        Servings:\n          format: double\n          type: number\n        Title:\n          type: string\n      type: object\n    BigOven.Model.ShoppingListLine:\n      properties:\n        DateAdded:\n          format: date-time\n          type: string\n        Dept:\n          type: string\n        GUID:\n          type: string\n        HTMLItemName:\n          type: string\n        IsChecked:\n          type: boolean\n        ItemName:\n          type: string\n        LastModified:\n          format: date-time\n          type: string\n        ListID:\n          format: int64\n          type: integer\n        MealPlanID:\n          format: int32\n          type: integer\n        MealPlanObjectType:\n          format: int32\n          type: integer\n        Notes:\n          type: string\n        PendingAddition:\n          type: boolean\n        RecipeID:\n          format: int32\n          type: integer\n        ShoppingListLineID:\n          format: int64\n          type: integer\n        Store:\n          type: string\n        TextAmt:\n          type: string\n        ThirdPartyHost:\n          type: string\n        ThirdPartyTitle:\n          type: string\n        ThirdPartyURL:\n          type: string\n      type: object\n    System.Object:\n      properties: {}\n      type: object\n    System.Text.DecoderFallback:\n      properties:\n        MaxCharCount:\n          format: int32\n          readOnly: true\n          type: integer\n      type: object\n    System.Text.EncoderFallback:\n      properties:\n        MaxCharCount:\n          format: int32\n          readOnly: true\n          type: integer\n      type: object\n    System.Text.Encoding:\n      properties:\n        BodyName:\n          readOnly: true\n          type: string\n        CodePage:\n          format: int32\n          readOnly: true\n          type: integer\n        DecoderFallback:\n          $ref: \"#/components/schemas/System.Text.DecoderFallback\"\n        EncoderFallback:\n          $ref: \"#/components/schemas/System.Text.EncoderFallback\"\n        EncodingName:\n          readOnly: true\n          type: string\n        HeaderName:\n          readOnly: true\n          type: string\n        IsBrowserDisplay:\n          readOnly: true\n          type: boolean\n        IsBrowserSave:\n          readOnly: true\n          type: boolean\n        IsMailNewsDisplay:\n          readOnly: true\n          type: boolean\n        IsMailNewsSave:\n          readOnly: true\n          type: boolean\n        IsReadOnly:\n          readOnly: true\n          type: boolean\n        IsSingleByte:\n          readOnly: true\n          type: boolean\n        WebName:\n          readOnly: true\n          type: string\n        WindowsCodePage:\n          format: int32\n          readOnly: true\n          type: integer\n      type: object\n    System.Web.Mvc.JsonResult:\n      properties:\n        ContentEncoding:\n          $ref: \"#/components/schemas/System.Text.Encoding\"\n        ContentType:\n          type: string\n        Data:\n          $ref: \"#/components/schemas/System.Object\"\n        JsonRequestBehavior:\n          enum:\n            - 0\n            - 1\n          format: int32\n          type: integer\n        MaxJsonLength:\n          format: int32\n          type: integer\n        RecursionLimit:\n          format: int32\n          type: integer\n      type: object\n"
		}
	},
	"Error": "buildIR: make ir: path \"/recipe\": put: requestBody: contents: application/x-www-form-urlencoded: form parameter \"Ingredients\": nested objects not allowed"
}