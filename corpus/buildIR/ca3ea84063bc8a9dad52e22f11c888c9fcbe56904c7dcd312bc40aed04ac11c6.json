{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bigcommerce/api-specs"
		},
		"file": {
			"name": "storefront_tokens.v3.yml",
			"size": 0,
			"path": "reference/storefront_tokens.v3.yml",
			"byteSize": 12949,
			"content": "openapi: 3.0.1\ninfo:\n  title: Storefront Token\n  description: |-\n    Get and manage tokens used to authenticate cross-origin requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview).\n\n    ## Authentication\n\n    Authenticate requests by including an [OAuth](/api-docs/getting-started/authentication/rest-api-authentication) `access_token` in the request header.\n\n    ```http\n    GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/channels\n    Content-Type: application/json\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    ```\n\n    ### [OAuth scopes](/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes)\n\n    | UI Name                                      | Permission | Parameter                                     |\n    |----------------------------------------------|------------|-----------------------------------------------|\n    | Storefront API Customer Impersonation Tokens | manage     | `store_storefront_api_customer_impersonation` |\n    | Storefront API Tokens                        | manage     | `store_storefront_api`                        |\n\n    ## [API tokens](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken)\n\n    Generate tokens (JWT) for authenticating cross-origin requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview). To [create a token](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken), send a `POST` request to `/stores/{{STORE_HASH}}/v3/storefront/api-token`.\n\n    ```http\n    POST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/storefront/api-token\n    X-Auth-Token: {{ACCESS_TOKEN}}\n    Content-Type: application/json\n    Accept: application/json\n\n    {\n      \"channel_id\": 1,\n      \"expires_at\": 1602288000,\n      \"allowed_cors_origins\": \n        [\"https://store.example.com\"]\n      \n    }\n    ```\n\n    |Property|Type|Description|\n    |-|-|-|\n    |`channel_id`|int| Must be a valid channel ID on the store (required) |\n    |`expires_at`|int| Unix timestamp (required) |\n    |`allowed_cors_origins`|array[str]| Allowed origins for cross origin requests (required) |\n\n    [![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken#requestrunner)\n\n\n\n    [**Response:**](/api-reference/cart-checkout/storefront-api-token/api-token/createtoken#responses)\n\n    ```json\n    {\n      \"token\":\"...eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9...\",\n      \"meta\": {\n        // ...\n      }\n    }\n    ```\n\n\n\n    ## [Customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation)\n\n    Generate tokens for use in server-to-server requests to the [GraphQL Storefront API](/api-docs/storefront/graphql/graphql-storefront-api-overview#customer-impersonation-tokens). To [create a customer impersonation token](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation), send a `POST` request to `/v3/storefront/api-token-customer-impersonation`.\n\n    ```http\n    POST https://api.bigcommerce.com/stores/{STORE_HASH}/v3/storefront/api-token-customer-impersonation\n    x-Auth-Token: {{ACCESS_TOKEN}}\n    ```\n\n    [**Response:**](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation#responses)\n\n    ```json\n    {\n      \"data\":\n      {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\n      }\n      \"meta\": {}\n    }\n    ```\n\n    Customer impersonation token authenticated requests made to the GraphQL API receive store information from the perspective of the customer with the ID specified in the `X-Bc-Customer-Id` header sent with the GraphQL `POST` request. Pricing, product availability, customer account, and customer details will be reflected. Consider this sample request using a [customer impersonation token](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation) to run a request in the context of customer ID `123`.\n\n    ```http\n    POST https://store.example.com/graphql\n    Authorization: Bearer {{CUSTOMER_IMPERSONATION_TOKEN}}\n    X-Bc-Customer-Id: 123\n\n    {\n        \"query\": \"query CustomerInformation {\\n  customer {\\n    firstName\\n    lastName\\n    email\\n  }\\n}\"\n    }\n    ```\n\n\n    \u003c!-- theme: warning --\u003e\n    \u003e #### Note\n    \u003e * Customer impersonation tokens should **never** be exposed publicly, for example, to JavaScript or HTML. These tokens should not be used for frontend requests.\n    \u003e * Unlike normal GraphQL API tokens, they are sensitive and should be treated like secrets, just as you might treat an OAuth token.\n    \u003e * Attempts to run requests using these tokens from a web browser will be rejected.\n\n\n    ## [Revoking tokens](/api-reference/store-management/tokens/api-token/revoketoken)\n    To [revoke a token](/api-reference/store-management/tokens/api-token/revoketoken), send a `DELETE` request to `/v3/storefront/api-token`.\n\n    ```http\n    DELETE /stores/{{STORE_HASH}}/v3/storefront/api-token-customer-impersonation\n    host: api.bigcommerce.com\n    x-Auth-Token: {{ACCESS_TOKEN}}\n    Sf-Api-Token: {{CUSTOMER_ID}}\n    ```\n\n    ## Additional information\n\n    * [GraphQL API Overview](/api-docs/storefront/graphql/graphql-storefront-api-overview)\n  termsOfService: ''\n  version: ''\nservers:\n  - url: 'https://api.bigcommerce.com'\nsecurity:\n  - X-Auth-Token: []\ntags:\n  - name: API Token\n  - name: Customer Impersonation Token\npaths:\n  '/stores/{store_hash}/v3/storefront/api-token':\n    post:\n      tags:\n        - API Token\n      summary: Create a Token\n      description: |-\n        Creates a Storefront API token.\n\n        **Required Scopes**\n        * `Manage` `Storefront API Tokens`\n      operationId: createToken\n      parameters:\n        - name: store_hash\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/TokenPostSimple'\n                - $ref: '#/components/schemas/TokenPostImpersonation'\n        required: false\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_Full'\n        '401':\n          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.\n          content: {}\n        '403':\n          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.\n          content: {}\n        '422':\n          description: Invalid JSON request body - missing or invalid data.\n          content: {}\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - API Token\n      summary: Revoke a Token\n      description: Revoke access for a Storefront API token.\n      operationId: revokeToken\n      parameters:\n        - name: store_hash\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: Sf-Api-Token\n          in: header\n          description: An existing JWT token that you want to revoke.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A storefront API token revocation has been scheduled.\n          content: {}\n        '401':\n          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.\n          content: {}\n        '403':\n          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.\n          content: {}\n        '422':\n          description: Invalid JWT Token provided or missing JWT token header\n          content: {}\n  '/stores/{store_hash}/v3/storefront/api-token-customer-impersonation':\n    post:\n      tags:\n        - Customer Impersonation Token\n      summary: Create a Token\n      description: |-\n        Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation).\n\n        **Required Scopes**\n        * `Manage` `Storefront API Customer Impersonation Tokens`\n      operationId: createTokenWithCustomerImpersonation\n      parameters:\n        - name: store_hash\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenPostImpersonation'\n        required: false\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token_Full'\n        '401':\n          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.\n          content: {}\n        '403':\n          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.\n          content: {}\n        '422':\n          description: Invalid JSON request body - missing or invalid data\n          content: {}\ncomponents:\n  schemas:\n    TokenPostImpersonation:\n      type: object\n      x-internal: false\n      x-examples: {}\n      properties:\n        channel_id:\n          type: integer\n          minimum: 1\n          description: Channel ID for requested token\n          example: 1\n        expires_at:\n          type: integer\n          description: Unix timestamp (UTC time) defining when the token should expire.\n          example: 1885635176\n          minimum: 0\n      required:\n        - channel_id\n        - expires_at\n    TokenPostSimple:\n      type: object\n      properties:\n        allowed_cors_origins:\n          maxItems: 1\n          minItems: 1\n          type: array\n          description: List of allowed domains for Cross-Origin Request Sharing. Currently only accepts a single element.\n          items:\n            maxLength: 1\n            minLength: 1\n            pattern: '/^https?:\\/\\/(?=.{1,254}(?::|$))(?:(?!\\d|-)(?![a-z0-9\\-]{1,62}-(?:\\.|:|$))[a-z0-9\\-]{1,63}\\b(?!\\.$)\\.?)+(:\\d+)?$/i;'\n            type: string\n      x-internal: false\n      x-examples:\n        example-1:\n          allowed_cors_origins:\n            - 'https://www.yourstorefront.com/'\n    Token_Full:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/Token_Base'\n        meta:\n          type: object\n          properties: {}\n      x-internal: false\n    Token_Base:\n      type: object\n      properties:\n        token:\n          type: string\n          description: JWT Token for accessing the Storefront API\n      x-internal: false\n    ErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/BaseError'\n        - type: object\n          properties:\n            errors:\n              $ref: '#/components/schemas/DetailedErrors'\n      x-internal: false\n    BaseError:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: |\n            The HTTP status code.\n        title:\n          type: string\n          description: |\n            The error title describing the particular error.\n        type:\n          type: string\n      description: |\n        Error payload for the BigCommerce API.\n      x-internal: false\n    DetailedErrors:\n      type: object\n      additionalProperties:\n        type: string\n      x-internal: false\n  responses:\n    TokenResponse:\n      description: ''\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Token_Full'\n  securitySchemes:\n    X-Auth-Token:\n      type: apiKey\n      description: |-\n        |Header|Parameter|Description|\n        |-|-|-|\n        |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n        ```http\n        GET /stores/{store_hash}/v3/catalog/summary\n        host: api.bigcommerce.com\n        Accept: application/json\n        X-Auth-Token: {access_token}\n        ```\n\n        For more information on Authenticating BigCommerce APIs, see: [Authentication](/api-docs/getting-started/authentication)\n      name: X-Auth-Token\n      in: header\nx-stoplight:\n  docs:\n    includeDownloadLink: true\n    showModels: false\n",
			"canonicalURL": "/github.com/bigcommerce/api-specs@38c996d02c24d9d7b2e53b1d29c0c4607969c46a/-/blob/reference/storefront_tokens.v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/bigcommerce/api-specs/blob/38c996d02c24d9d7b2e53b1d29c0c4607969c46a/reference/storefront_tokens.v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/stores/{store_hash}/v3/storefront/api-token\": post: requestBody: contents: media: \"application/json\": generate schema: allOf: field allowed_cors_origins: item: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?=`"
}