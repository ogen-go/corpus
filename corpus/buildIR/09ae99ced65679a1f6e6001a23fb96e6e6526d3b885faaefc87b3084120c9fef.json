{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kurarion/Bangumi-for-QQ"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "bangumi_introduce/api/open-api/api.yml",
			"byteSize": 38885,
			"content": "openapi: 3.0.0\ninfo:\n  title: Bangumi API\n  # description: TODO\n  version: '2018-06-05'\nservers:\n  - url: https://api.bgm.tv\npaths:\n  /user/{username}:\n    get:\n      tags:\n        - 用户\n      summary: 用户信息\n      parameters:\n        - $ref: '#/components/parameters/username'\n      responses:\n        200:\n          description: 返回用户基础信息\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/{username}/collection:\n    get:\n      tags:\n        - 用户\n      summary: 用户收藏\n      parameters:\n        - $ref: '#/components/parameters/username'\n        - name: cat\n          in: query\n          description: 收藏类型\n            \u003cbr\u003e watching = 在看的动画与三次元条目\n            \u003cbr\u003e all_watching = 在看的动画三次元与书籍条目\n          required: true\n          schema:\n            type: string\n            enum:\n              - watching\n              - all_watching\n        - name: ids\n          in: query\n          description: 收藏条目 ID\n            \u003cbr\u003e 批量查询收藏状态，将条目 ID 以半角逗号分隔，如 1,2,4,6\n          required: false\n          schema:\n            type: string\n            example: 1,2,4,6\n        - name: responseGroup\n          in: query\n          description: medium / small\n            \u003cbr\u003e 默认为 medium。small 时不返回条目详细信息\n          required: false\n          schema:\n            type: string\n            enum:\n              - small\n              - medium\n            default: medium\n      responses:\n        200:\n          description: 获取用户收藏列表，默认为在看\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      description: 番剧标题\n                      type: string\n                    subject_id:\n                      description: 章节 ID\n                      type: integer\n                    ep_status:\n                      description: 完成话数\n                      type: integer\n                    vol_status:\n                      description: 完成卷数（书籍）\n                    lasttouch:\n                      description: 上次更新时间\n                      type: integer\n                    subject:\n                      allOf:\n                        - $ref: '#/components/schemas/SubjectBase'\n                        - type: object\n                          properties:\n                            eps:\n                              description: 话数\n                              type: integer\n                              example: 27\n                            eps_count:\n                              description: 话数\n                              type: integer\n                              example: 27\n                            collection:\n                              $ref: '#/components/schemas/SubjectCollection'\n  /user/{username}/collections/{subject_type}:\n    get:\n      tags:\n        - 用户\n      summary: 用户收藏概览\n      parameters:\n        - $ref: '#/components/parameters/username'\n        - name: subject_type\n          in: path\n          description: 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)\n          required: true\n          schema:\n            $ref: '#/components/schemas/SubjectTypeName'\n        - $ref: '#/components/parameters/app_id'\n        - name: max_results\n          in: query\n          description: 显示条数\n            \u003cbr\u003e 最多 25\n          schema:\n            type: integer\n            maximum: 25\n      responses:\n        200:\n          description: 获取用户指定类型的收藏概览，固定返回最近更新的收藏，不支持翻页\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    type:\n                      $ref: '#/components/schemas/SubjectType'\n                    name:\n                      $ref: '#/components/schemas/SubjectTypeName'\n                    name_cn:\n                      description: 条目类型中文名\n                      type: string\n                      example: 动画\n                    collects:\n                      description: 收藏列表\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          status:\n                            $ref: '#/components/schemas/CollectionStatus'\n                          count:\n                            type: integer\n                          list:\n                            type: array\n                            items:\n                              type: object\n                              properties:\n                                subject_id:\n                                  description: 条目 ID\n                                  type: string\n                                subject:\n                                  $ref: '#/components/schemas/SubjectBase'\n  /user/{username}/collections/status:\n    get:\n      tags:\n        - 用户\n      summary: 用户收藏统计\n      parameters:\n        - $ref: '#/components/parameters/username'\n        - $ref: '#/components/parameters/app_id'\n      responses:\n        200:\n          description: 获取用户所有收藏信息\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    type:\n                      $ref: '#/components/schemas/SubjectType'\n                    name:\n                      $ref: '#/components/schemas/SubjectTypeName'\n                    name_cn:\n                      description: 条目类型中文名\n                      type: string\n                      example: 动画\n                    collects:\n                      description: 收藏列表\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          status:\n                            $ref: '#/components/schemas/CollectionStatus'\n                          count:\n                            type: integer\n  /user/{username}/progress:\n    get:\n      tags:\n        - 用户\n      summary: 用户收视进度\n      parameters:\n        - $ref: '#/components/parameters/username'\n        - name: subject_id\n          in: query\n          description: 条目 ID\n            \u003cbr\u003e 获取指定条目收视进度\n          schema:\n            type: integer\n      responses:\n        200:\n          description: 返回用户收视进度\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    subject_id:\n                      description: 条目 ID\n                      type: integer\n                    eps:\n                      description: 章节列表\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          id:\n                            description: 章节 ID\n                            type: integer\n                          status:\n                            type: object\n                            properties:\n                              id:\n                                $ref: '#/components/schemas/EpStatusId'\n                              css_name:\n                                type: string\n                                example: Watched\n                              url_name:\n                                $ref: '#/components/schemas/EpStatusType'\n                              cn_name:\n                                $ref: '#/components/schemas/EpStatusName'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n           - r:user\n  /subject/{subject_id}:\n    get:\n      tags:\n        - 条目\n      summary: 条目信息\n      parameters:\n        - $ref: '#/components/parameters/subject_id'\n        - $ref: '#/components/parameters/responseGroup'\n      responses:\n        200:\n          description: 根据 responseGroup 参数，返回以下三个模型\n            \u003cbr\u003e [SubjectSmall](#model-SubjectSmall)\n            \u003cbr\u003e [SubjectMedium](#model-SubjectMedium)\n            \u003cbr\u003e [SubjectLarge](#model-SubjectLarge)\n          content:\n            application/json:\n              schema:\n                type: object\n                oneOf:\n                  - $ref: '#/components/schemas/SubjectSmall'\n                  - $ref: '#/components/schemas/SubjectMedium'\n                  - $ref: '#/components/schemas/SubjectLarge'\n  /subject/{subject_id}/ep:\n    get:\n      tags:\n        - 条目\n      summary: 章节数据\n      parameters:\n        - $ref: '#/components/parameters/subject_id'\n      responses:\n        200:\n          description: 章节数据\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/SubjectBase'\n                  - type: object\n                    properties:\n                      eps:\n                        description: 章节列表\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Episode'\n  /calendar:\n    get:\n      tags:\n        - 条目\n      summary: 每日放送\n      responses:\n        200:\n          description: 每日放送\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    weekday:\n                      type: object\n                      properties:\n                        en:\n                          type: string\n                          example: Mon\n                        cn:\n                          type: string\n                          example: 星期一\n                        ja:\n                          type: string\n                          example: 月耀日\n                        id:\n                          type: integer\n                          example: 1\n                    items:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/SubjectSmall'\n  /search/subject/{keywords}:\n    get:\n      tags:\n        - 搜索\n      summary: 条目搜索\n      parameters:\n        - name: keywords\n          in: path\n          description: 关键词\n            \u003cbr\u003e 需要 URL Encode\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: 条目类型，参考 [SubjectType](#model-SubjectType)\n          required: false\n          schema:\n            $ref: '#/components/schemas/SubjectType'\n        - $ref: '#/components/parameters/responseGroup'\n        - name: start\n          in: query\n          description: 开始条数\n          required: false\n          schema:\n            type: integer\n        - name: max_results\n          in: query\n          description: 每页条数\n            \u003cbr\u003e 最多 25\n          required: false\n          schema:\n            type: integer\n            maximum: 25\n      responses:\n        200:\n          description: 搜索结果\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    description: 总条数\n                    type: integer\n                  list:\n                    description: 结果列表\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/SubjectSmall'\n  /ep/{id}/status/{status}:\n    get:\n      tags:\n        - 进度\n      summary: 更新收视进度\n      parameters:\n        - $ref: '#/components/parameters/ep_id'\n        - $ref: '#/components/parameters/ep_status'\n      responses:\n        200:\n          description: 成功\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n          - rw:collection\n    post:\n      tags:\n        - 进度\n      summary: 更新收视进度\n      parameters:\n        - $ref: '#/components/parameters/ep_id'\n        - $ref: '#/components/parameters/ep_status'\n        - name: ep_id\n          in: query\n          description: 使用 POST 批量更新\n            \u003cbr\u003e 将章节以半角逗号分隔，如 `3697,3698,3699`。请求时 URL 中的 ep_id 为最后一个章节 ID\n          required: false\n          schema:\n            type: string\n            example: 3697,3698,3699\n      responses:\n        200:\n          description: 成功\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n          - rw:collection\n  /subject/{subject_id}/update/watched_eps:\n    post:\n      tags:\n        - 进度\n      summary: 批量更新收视进度\n      parameters:\n        - $ref: '#/components/parameters/subject_id'\n        - name: watched_eps\n          in: query\n          description: 如看到 123 话则 POST `123`\n            \u003cbr\u003e 书籍条目传 watched_eps 与 watched_vols 至少其一\n          required: true\n          schema:\n            type: string\n            example: 123\n        - name: watched_vols\n          in: query\n          description: 如看到第 3 卷则 POST `3`, 仅对书籍条目有效\n          required: false\n          schema:\n            type: string\n            example: 3\n      responses:\n        200:\n          description: 成功\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n          - rw:collection\n  /collection/{subject_id}:\n    get:\n      tags:\n        - 收藏\n      summary: 获取指定条目收藏信息\n      parameters:\n        - $ref: '#/components/parameters/subject_id'\n      responses:\n        200:\n          $ref: '#/components/responses/Collection'\n        400:\n          description: 用户未收藏该条目\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n          - rw:collection\n  /collection/{subject_id}/{action}:\n    post:\n      tags:\n        - 收藏\n      summary: 管理收藏\n      parameters:\n        - $ref: '#/components/parameters/subject_id'\n        - name: action\n          in: path\n          description: 收藏动作\n            \u003cbr\u003e create = 添加收藏\n            \u003cbr\u003e update = 更新收藏\n            \u003cbr\u003e 可以统一使用 `update`，系统会自动判断需要新建还是更新收藏\n          required: true\n          schema:\n            type: string\n            enum:\n              - create\n              - update\n        - name: status\n          in: query\n          description: 章节状态，参考 [EpStatusType](#model-EpStatusType)\n          required: true\n          schema:\n            $ref: '#/components/schemas/EpStatusType'\n        - name: comment\n          in: query\n          description: 简评\n          required: false\n          schema:\n            type: string\n        - name: tags\n          in: query\n          description: 标签\n            \u003cbr\u003e 以半角空格分割\n          required: false\n          schema:\n            type: string\n        - name: rating\n          in: query\n          description: 评分\n            \u003cbr\u003e 1-10\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 10\n            example: 7\n        - name: privacy\n          in: query\n          description: 收藏隐私\n            \u003cbr\u003e 0 = 公开\n            \u003cbr\u003e 1 = 私密\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n            default: 0\n      responses:\n        200:\n          $ref: '#/components/responses/Collection'\n        401:\n          description: 未授权\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusCode'\n      security:\n        - bangumi_auth:\n          - rw:collection\ncomponents:\n  schemas:\n    CollectionStatusId:\n      description: 收藏状态 ID\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n      example: 5\n    CollectionStatusType:\n      description: 收藏状态类型\n      type: string\n      enum:\n        - wish\n        - collect\n        - do\n        - on_hold\n        - dropped\n      example: dropped\n    CollectionStatusName:\n      description: 收藏状态名称\n      type: string\n      enum:\n        - 想做\n        - 做过\n        - 在做\n        - 搁置\n        - 抛弃\n      example: 抛弃\n    CollectionStatus:\n      description: 收藏状态\n        \u003cbr\u003e 1 = wish = 想做\n        \u003cbr\u003e 2 = collect = 做过\n        \u003cbr\u003e 3 = do = 在做\n        \u003cbr\u003e 4 = on_hold = 搁置\n        \u003cbr\u003e 5 = dropped = 抛弃\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/CollectionStatusId'\n        type:\n          $ref: '#/components/schemas/CollectionStatusType'\n        name:\n          $ref: '#/components/schemas/CollectionStatusName'\n    EpStatusId:\n      description: 章节状态 ID\n      type: integer\n      enum:\n        - 2\n        - 1\n        - 3\n    EpStatusType:\n      description: 章节状态类型\n      type: string\n      enum:\n        - watched\n        - queue\n        - drop\n        - remove\n    EpStatusName:\n      description: 章节状态名称\n      type: string\n      enum:\n        - 看过\n        - 想看\n        - 抛弃\n        - 撤销\n    EpStatus:\n      description: 章节状态\n        \u003cbr\u003e 2 = watched = 看过\n        \u003cbr\u003e 1 = queue = 想看\n        \u003cbr\u003e 3 = drop = 抛弃\n        \u003cbr\u003e ? = remove = 撤销\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/EpStatusId'\n        type:\n          $ref: '#/components/schemas/EpStatusType'\n        name:\n          $ref: '#/components/schemas/EpStatusName'\n    ResponseGroup:\n      description: 返回数据大小\n      type: string\n      enum:\n        - small\n        - medium\n        - large\n      default: small\n    MonoBase:\n      description: 人物（基础模型）\n      type: object\n      properties:\n        id:\n          description: 人物 ID\n          type: integer\n        url:\n          description: 人物地址\n          type: string\n        name:\n          description: 姓名\n          type: string\n        images:\n          description: 肖像\n          type: object\n          properties:\n            large:\n              type: string\n              example: http://lain.bgm.tv/pic/crt/l/ce/65/32_crt_XMJOj.jpg\n            medium:\n              type: string\n              example: http://lain.bgm.tv/pic/crt/m/ce/65/32_crt_XMJOj.jpg\n            small:\n              type: string\n              example: http://lain.bgm.tv/pic/crt/s/ce/65/32_crt_XMJOj.jpg\n            grid:\n              type: string\n              example: http://lain.bgm.tv/pic/crt/g/ce/65/32_crt_XMJOj.jpg\n    Mono:\n      description: 人物\n      allOf:\n        - $ref: '#/components/schemas/MonoBase'\n        - type: object\n          properties:\n            name_cn:\n              description: 简体中文名\n              type: string\n            comment:\n              description: 回复数量\n              type: integer\n            collects:\n              description: 收藏人数\n              type: integer\n    MonoInfo:\n      description: 人物信息\n      type: object\n      properties:\n        birth:\n          description: 生日\n          type: string\n          example: 4月13日\n        height:\n          description: 身高\n          type: string\n          example: 152cm\n        gender:\n          description: 性别\n          type: string\n          example: 女\n        alias:\n          description: 别名（另外添加出来的 key 为 0 开始的数字）\n          type: object\n          properties:\n            jp:\n              description: 日文名\n              type: string\n            kana:\n              description: 纯假名\n              type: string\n            nick:\n              description: 昵称\n              type: string\n            romaji:\n              description: 罗马字\n              type: string\n            zh:\n              description: 第二中文名\n              type: string\n        source:\n          description: 引用来源\n          oneOf:\n            - type: string\n              example: anidb.net\n            - type: array\n              items:\n                type: string\n                example: anidb.net\n        name_cn:\n          description: 简体中文名\n          type: string\n        cv:\n          description: 声优\n          type: string\n    Person:\n      description: 现实人物\n      allOf:\n        - $ref: '#/components/schemas/Mono'\n        - type: object\n          properties:\n            info:\n              $ref: '#/components/schemas/MonoInfo'\n    Character:\n      description: 虚拟角色\n      allOf:\n        - $ref: '#/components/schemas/Mono'\n        - type: object\n          properties:\n            info:\n              $ref: '#/components/schemas/MonoInfo'\n            actors:\n              description: 声优列表\n              type: array\n              items:\n                $ref: '#/components/schemas/MonoBase'\n    EpisodeType:\n      description: 章节类型\n        \u003cbr\u003e 0 = 本篇\n        \u003cbr\u003e 1 = 特别篇\n        \u003cbr\u003e 2 = OP\n        \u003cbr\u003e 3 = ED\n        \u003cbr\u003e 4 = 预告/宣传/广告\n        \u003cbr\u003e 5 = MAD\n        \u003cbr\u003e 6 = 其他\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n      example: 0\n    Episode:\n      description: 章节信息\n      type: object\n      properties:\n        id:\n          description: 章节 ID\n          type: integer\n          example: 1027\n        url:\n          description: 章节地址\n          type: string\n          example: http://bgm.tv/ep/1027\n        type:\n          $ref: '#/components/schemas/EpisodeType'\n        sort:\n          description: 集数\n          type: integer\n          example: 1\n        name:\n          description: 标题\n          type: string\n          example: ちぃ 目覚める\n        name_cn:\n          description: 简体中文标题\n          type: string\n          example: 叽，觉醒了\n        duration:\n          description: 时长\n          type: string\n          example: 24m\n        airdate:\n          description: 放送日期\n          type: string\n          example: '2002-04-03'\n        comment:\n          description: 回复数量\n          type: integer\n          example: 9\n        desc:\n          description: 简介\n          type: string\n        status:\n          description: 放送状态\n            \u003cbr\u003e Air = 已放送\n            \u003cbr\u003e Today = 正在放送\n            \u003cbr\u003e NA = 未放送\n          type: string\n          enum:\n            - Air\n            - Today\n            - NA\n          example: Air\n    Topic:\n      description: 讨论版\n      type: object\n      properties:\n        id:\n          description: ID\n          type: integer\n        url:\n          description: 地址\n          type: string\n        title:\n          description: 标题\n          type: string\n        main_id:\n          description: 所属对象（条目） ID\n          type: integer\n        timestamp:\n          description: 发布时间\n          type: integer\n        lastpost:\n          description: 最后回复时间\n          type: integer\n        replies:\n          description: 回复数\n          type: integer\n        user:\n          $ref: '#/components/schemas/User'\n    Blog:\n      description: 日志\n      type: object\n      properties:\n        id:\n          description: ID\n          type: integer\n        url:\n          description: 地址\n          type: string\n        title:\n          description: 标题\n          type: string\n        summary:\n          description: 概览\n          type: string\n        image:\n          description: 图片\n          type: string\n        replies:\n          description: 回复数\n          type: integer\n        timestamp:\n          description: 发布时间\n          type: integer\n          example: 1357144903\n        dateline:\n          description: 发布时间\n          type: string\n          example: 2013-1-2 16:41\n        user:\n          $ref: '#/components/schemas/User'\n    SubjectType:\n      description: 条目类型\n        \u003cbr\u003e 1 = book\n        \u003cbr\u003e 2 = anime\n        \u003cbr\u003e 3 = music\n        \u003cbr\u003e 4 = game\n        \u003cbr\u003e 6 = real\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 6\n      example: 2\n    SubjectTypeName:\n      description: 条目类型名称\n        \u003cbr\u003e book\n        \u003cbr\u003e anime\n        \u003cbr\u003e music\n        \u003cbr\u003e game\n        \u003cbr\u003e real\n      type: string\n      enum:\n        - book\n        - anime\n        - music\n        - game\n        - real\n      example: anime\n    SubjectCollection:\n      description: 收藏人数\n      type: object\n      properties:\n        wish:\n          description: 想做\n          type: integer\n          example: 608\n        collect:\n          description: 做过\n          type: integer\n          example: 3010\n        doing:\n          description: 在做\n          type: integer\n          example: 103\n        on_hold:\n          description: 搁置\n          type: integer\n          example: 284\n        dropped:\n          description: 抛弃\n          type: integer\n          example: 86\n    Subject:\n      type: object\n      properties:\n        id:\n          description: 条目 ID\n          type: integer\n          example: 12\n        url:\n          description: 条目地址\n          type: string\n          example: http://bgm.tv/subject/12\n        type:\n          $ref: '#/components/schemas/SubjectType'\n        name:\n          description: 条目名称\n          type: string\n          example: ちょびっツ\n    SubjectBase:\n      allOf:\n        - $ref: '#/components/schemas/Subject'\n        - type: object\n          properties:\n            name_cn:\n              description: 条目中文名称\n              type: string\n              example: 人形电脑天使心\n            summary:\n              description: 剧情简介\n              type: string\n              example: 在不久的将来,电子技术飞速发展,电脑成为人们生活中不可缺少的一部分.主角的名字是本须和秀树,是个19岁的少年,由于考试失败,来到东京上补习班,过着贫穷潦倒的生活……\\r\\n到达东京的第一天,他很幸运的在垃圾堆捡到一个人型电脑,一直以来秀树都非常渴望拥有个人电脑.当他抱着她带返公寓后,却不知如何开机,在意想不到的地方找到开关并开启后,故事就此展开\\r\\n本须和秀树捡到了人型计算机〔唧〕。虽然不晓得她到底是不是〔Chobits〕，但她的身上似乎藏有极大的秘密。看到秀树为了钱而烦恼，唧出去找打工，没想到却找到了危险的工作！为了让秀树开心，唧开始到色情小屋打工。但她在遭到过度激烈的强迫要求之后失控。让周遭计算机因此而强制停摆。\\r\\n另一方面，秀树发现好友新保与补习班的清水老师有着不可告人的关系……\n            air_date:\n              description: 放送开始日期\n              type: string\n              example: '2002-04-02'\n            air_weekday:\n              description: 放送星期\n              type: integer\n              example: 2\n            images:\n              description: 封面\n              type: object\n              properties:\n                large:\n                  type: string\n                  example: http://lain.bgm.tv/pic/cover/l/c2/0a/12_24O6L.jpg\n                common:\n                  type: string\n                  example: http://lain.bgm.tv/pic/cover/c/c2/0a/12_24O6L.jpg\n                medium:\n                  type: string\n                  example: http://lain.bgm.tv/pic/cover/m/c2/0a/12_24O6L.jpg\n                small:\n                  type: string\n                  example: http://lain.bgm.tv/pic/cover/s/c2/0a/12_24O6L.jpg\n                grid:\n                  type: string\n                  example: http://lain.bgm.tv/pic/cover/g/c2/0a/12_24O6L.jpg\n    SubjectSmall:\n      allOf:\n        - $ref: '#/components/schemas/SubjectBase'\n        - type: object\n          properties:\n            eps:\n              description: 话数\n              type: integer\n              example: 27\n            eps_count:\n              description: 话数\n              type: integer\n              example: 27\n            rating:\n              description: 评分\n              type: object\n              properties:\n                total:\n                  description: 总评分人数\n                  type: integer\n                  example: 2289\n                count:\n                  description: 各分值评分人数\n                  type: object\n                  properties:\n                    1:\n                      type: integer\n                      example: 5\n                    2:\n                      type: integer\n                      example: 3\n                    3:\n                      type: integer\n                      example: 4\n                    4:\n                      type: integer\n                      example: 6\n                    5:\n                      type: integer\n                      example: 46\n                    6:\n                      type: integer\n                      example: 267\n                    7:\n                      type: integer\n                      example: 659\n                    8:\n                      type: integer\n                      example: 885\n                    9:\n                      type: integer\n                      example: 284\n                    10:\n                      type: integer\n                      example: 130\n                score:\n                  description: 评分\n                  type: number\n                  example: 7.6\n            rank:\n              description: 排名\n              type: integer\n              example: 573\n            collection:\n              $ref: '#/components/schemas/SubjectCollection'\n    SubjectMedium:\n      allOf:\n        - $ref: '#/components/schemas/SubjectSmall'\n        - type: object\n          properties:\n            crt:\n              description: 角色信息\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/Character'\n                  - type: object\n                    properties:\n                      role_name:\n                        description: 角色类型\n                        type: string\n                        example: 主角\n            staff:\n              description: 制作人员信息\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/Person'\n                  - type: object\n                    properties:\n                      role_name:\n                        description: 人物类型\n                        type: string\n                        example: 主角\n                      jobs:\n                        description: 职位\n                        type: array\n                        items:\n                          type: string\n    SubjectLarge:\n      allOf:\n        - $ref: '#/components/schemas/SubjectMedium'\n        - type: object\n          properties:\n            eps:\n              description: 章节列表\n              type: array\n              items:\n                $ref: '#/components/schemas/Episode'\n            topic:\n              description: 讨论版\n              type: array\n              items:\n                $ref: '#/components/schemas/Topic'\n            blog:\n              description: 评论日志\n              type: array\n              items:\n                $ref: '#/components/schemas/Blog'\n    User:\n      description: 用户信息\n      type: object\n      properties:\n        id:\n          description: 用户 id\n          type: integer\n          example: 1\n        url:\n          description: 用户主页地址\n          type: string\n          example: http://bgm.tv/user/sai\n        username:\n          description: 用户名\n          type: string\n          example: sai\n        nickname:\n          description: 昵称\n          type: string\n          example: Sai\n        avatar:\n          description: 头像地址\n          type: object\n          properties:\n            large:\n              type: string\n              example: http://lain.bgm.tv/pic/user/l/000/00/00/1.jpg?r=1391790456\n            medium:\n              type: string\n              example: http://lain.bgm.tv/pic/user/m/000/00/00/1.jpg?r=1391790456\n            small:\n              type: string\n              example: http://lain.bgm.tv/pic/user/s/000/00/00/1.jpg?r=1391790456\n        sign:\n          description: 签名\n          type: string\n          example: Awesome!\n        usergroup:\n          $ref: '#/components/schemas/UserGroup'\n    UserGroup:\n      description: \u003e-\n        用户组\n        \u003cbr\u003e 1 = 管理员\n        \u003cbr\u003e 2 = Bangumi 管理猿\n        \u003cbr\u003e 3 = 天窗管理猿\n        \u003cbr\u003e 4 = 禁言用户\n        \u003cbr\u003e 5 = 禁止访问用户\n        \u003cbr\u003e 8 = 人物管理猿\n        \u003cbr\u003e 9 = 维基条目管理猿\n        \u003cbr\u003e 10 = 用户\n        \u003cbr\u003e 11 = 维基人\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 8\n        - 9\n        - 10\n        - 11\n      example: 11\n    StatusCode:\n      description: 响应状态（HTTP 状态码都为 200）\n      type: object\n      properties:\n        request:\n          description: 当前请求的地址\n          type: string\n        code:\n          description: \u003e-\n            状态码\n            \u003cbr\u003e 200 OK\n            \u003cbr\u003e 202 Accepted\n            \u003cbr\u003e 304 Not Modified\n            \u003cbr\u003e 30401 Not Modified: Collection already exists\n            \u003cbr\u003e 400 Bad Request\n            \u003cbr\u003e 40001 Error: Nothing found with that ID\n            \u003cbr\u003e 401 Unauthorized\n            \u003cbr\u003e 40101 Error: Auth failed over 5 times\n            \u003cbr\u003e 40102 Error: Username is not an Email address\n            \u003cbr\u003e 405 Method Not Allowed\n            \u003cbr\u003e 404 Not Found\n          type: integer\n          enum:\n            - 200\n            - 202\n            - 304\n            - 30401\n            - 400\n            - 40001\n            - 401\n            - 40101\n            - 40102\n            - 405\n            - 404\n        error:\n          description: 状态信息\n          type: string\n  responses:\n    Collection:\n      description: 条目收藏信息\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                $ref: '#/components/schemas/CollectionStatus'\n              rating:\n                description: 评分\n                type: integer\n              comment:\n                description: 评论\n                type: string\n              private:\n                description: 收藏隐私\n                type: integer\n                enum:\n                  - 0\n                  - 1\n              tag:\n                description: 标签\n                type: array\n                items:\n                  type: string\n              ep_status:\n                description: 完成话数\n                type: integer\n              lasttouch:\n                description: 上次更新时间\n                type: integer\n              user:\n                $ref: '#/components/schemas/User'\n  parameters:\n    username:\n      name: username\n      in: path\n      description: 用户名\n        \u003cbr\u003e 也可使用 UID\n      required: true\n      schema:\n        type: string\n        example: sai\n    subject_id:\n      name: subject_id\n      in: path\n      description: 条目 ID\n      required: true\n      schema:\n        type: integer\n    ep_id:\n      name: id\n      in: path\n      description: 章节 ID\n      required: true\n      schema:\n        type: integer\n    ep_status:\n      name: status\n      in: path\n      description: 收视类型，参考 [EpStatusType](#model-EpStatusType)\n      required: true\n      schema:\n        $ref: '#/components/schemas/EpStatusType'\n    responseGroup:\n      name: responseGroup\n      in: query\n      description: 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup)\n        \u003cbr\u003e 默认为 small\n      required: false\n      schema:\n        $ref: '#/components/schemas/ResponseGroup'\n    app_id:\n      name: app_id\n      in: query\n      description: \u003e-\n        [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    bangumi_auth:\n      type: oauth2\n      description: https://github.com/bangumi/api/blob/master/docs-raw/How-to-Auth.md\n      flows:\n        authorizationCode:\n          authorizationUrl: https://bgm.tv/oauth/authorize\n          tokenUrl: https://bgm.tv/oauth/access_token\n          refreshUrl: https://bgm.tv/oauth/access_token\n          scopes:\n            # TODO 未定义\n            r:user: 读取你的账户信息（尚未实现，scope 名非真实）\n            rw:collection: 读写你的收藏信息（尚未实现，scope 名非真实）\n",
			"canonicalURL": "/github.com/Kurarion/Bangumi-for-QQ@b44d493dd6f5044d6fe305292016908ae15ef933/-/blob/bangumi_introduce/api/open-api/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Kurarion/Bangumi-for-QQ/blob/b44d493dd6f5044d6fe305292016908ae15ef933/bangumi_introduce/api/open-api/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/calendar\": get: responses: 200: contents: application/json: generate schema: item: field items: item: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"oauth2 security"
	]
}