{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/louis-lau/DuckyAPI"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/openapi.yml",
			"byteSize": 71716,
			"content": "openapi: 3.0.0\ninfo:\n  title: DuckyAPI\n  description: A customer facing api for WildDuck\n  version: '1.0'\n  contact: {}\ntags:\n  - name: Authentication\n    description: ''\n  - name: Api Keys\n    description: ''\n  - name: Domains\n    description: ''\n  - name: Dkim\n    description: ''\n  - name: Email Accounts\n    description: ''\n  - name: Filters\n    description: ''\n  - name: Forwarders\n    description: ''\n  - name: Profile\n    description: ''\n  - name: Users\n    description: ''\n  - name: Packages\n    description: ''\nservers:\n  - url: 'http://localhost:3000'\ncomponents:\n  securitySchemes:\n    bearer:\n      scheme: bearer\n      bearerFormat: JWT\n      type: http\n  schemas:\n    LoginDto:\n      type: object\n      properties:\n        username:\n          type: string\n          example: johndoe\n          description: Username of the user you want to login as\n        password:\n          type: string\n          example: supersecret\n          description: Password of the user you want to login as\n        rememberMe:\n          type: boolean\n          example: false\n          description: Makes the token have a longer expiry time\n      required:\n        - username\n        - password\n    AccessToken:\n      type: object\n      properties:\n        accessToken:\n          type: string\n          example: \u003e-\n            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG5kb2UiLCJzdWIiOiI1ZDM1ZDczZmU0YTY3NzVmYjQxZmE0ZjEiLCJpYXQiOjE1NjM5MTU0OTgsImV4cCI6MTU2MzkxNTc5OH0.qYejtBl1Tcv9IWgp9Ax5FiR6uT_W0VwizHkB-3S7_r0\n          description: Access token that can be used to authenticate against the api\n        expires:\n          format: date-time\n          type: string\n          example: '2019-09-01T22:12:08.882Z'\n          description: The expiry date of the access token\n      required:\n        - accessToken\n        - expires\n    User:\n      type: object\n      properties:\n        _id:\n          type: string\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for this user\n        username:\n          type: string\n          example: johndoe\n          description: The username for this user\n        suspended:\n          type: boolean\n          example: false\n          description: \u003e-\n            A suspended user doesn't have access to most api methods, and all\n            accounts and forwarders are suspended\n        roles:\n          example:\n            - user\n          description: User roles\n          type: array\n          items:\n            type: string\n        packageId:\n          type: string\n          example: 5d49e11f600a423ffc0b1297\n          description: Package id for this user\n        quota:\n          type: number\n          example: 1073741824\n          description: 'Storage quota in bytes, 0 is unlimited'\n        maxSend:\n          type: number\n          example: 200\n          description: 'Max send quota for accounts created by this user, 0 is unlimited'\n        maxReceive:\n          type: number\n          example: 1000\n          description: 'Max recieve quota for accounts created by this user, 0 is unlimited'\n        maxForward:\n          type: number\n          example: 100\n          description: 'Max forward quota for accounts created by this user, 0 is unlimited'\n      required:\n        - _id\n        - username\n        - suspended\n        - roles\n        - packageId\n        - quota\n        - maxSend\n        - maxReceive\n        - maxForward\n    CreateUserDto:\n      type: object\n      properties:\n        username:\n          type: string\n          example: johndoe\n          description: The username for this user\n        password:\n          type: string\n          example: supersecret\n          description: The password for this user\n        packageId:\n          type: string\n          example: 5d49e11f600a423ffc0b1297\n          description: Package id to assign to this user\n      required:\n        - username\n        - password\n    UpdateUserDto:\n      type: object\n      properties:\n        username:\n          type: string\n          example: johndoe\n          description: The username for this user\n        password:\n          type: string\n          example: supersecret\n          description: The password for this user\n      required:\n        - username\n        - password\n    DeleteUserDto:\n      type: object\n      properties:\n        onlyDeleteDomainsAndSuspend:\n          type: boolean\n          description: \u003e-\n            If true will not delete the user, but delete all domains and suspend\n            the user\n          example: true\n    UpdateUserAdminDto:\n      type: object\n      properties:\n        username:\n          type: string\n          example: johndoe\n          description: The username for this user\n        password:\n          type: string\n          example: supersecret\n          description: The password for this user\n        packageId:\n          type: string\n          example: 5d49e11f600a423ffc0b1297\n          description: Package id to assign to this user\n        suspended:\n          type: boolean\n          example: false\n          description: \u003e-\n            A suspended user doesn't have access to most api methods, and all\n            accounts and forwarders are suspended\n      required:\n        - username\n        - password\n        - packageId\n        - suspended\n    Package:\n      type: object\n      properties:\n        _id:\n          type: object\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for this package\n          readOnly: true\n        name:\n          type: string\n          example: Small\n          description: Display name to use for this package\n        quota:\n          type: number\n          example: 1073741824\n          description: 'Storage quota in bytes, 0 is unlimited'\n        maxSend:\n          type: number\n          example: 200\n          description: 'Max send quota for accounts created by this user, 0 is unlimited'\n        maxReceive:\n          type: number\n          example: 1000\n          description: 'Max recieve quota for accounts created by this user, 0 is unlimited'\n        maxForward:\n          type: number\n          example: 100\n          description: 'Max forward quota for accounts created by this user, 0 is unlimited'\n      required:\n        - name\n    DomainAlias:\n      type: object\n      properties:\n        domain:\n          type: string\n          example: example.com\n          description: The domain name\n        dkim:\n          type: boolean\n          example: false\n          readOnly: true\n          description: If DKIM is active for this domain\n      required:\n        - domain\n    Domain:\n      type: object\n      properties:\n        domain:\n          type: string\n          example: example.com\n          description: The domain name\n        dkim:\n          type: boolean\n          example: false\n          readOnly: true\n          description: If DKIM is active for this domain\n        admin:\n          type: boolean\n          example: true\n          readOnly: true\n          description: 'If this user is the domain admin, this currently serves no function'\n        aliases:\n          description: Domains aliased to this domain\n          readOnly: true\n          type: array\n          items:\n            $ref: '#/components/schemas/DomainAlias'\n      required:\n        - domain\n    DnsCheckMxRecord:\n      type: object\n      properties:\n        exchange:\n          type: string\n          example: mx.example.com\n          description: MX record server\n        priority:\n          type: number\n          example: 1\n          description: MX record priority\n      required:\n        - exchange\n        - priority\n    DnsCheckDkimRecord:\n      type: object\n      properties:\n        selector:\n          type: string\n          example: default\n          description: DKIM record selector\n        value:\n          type: string\n          example: \u003e-\n            v=DKIM1;t=s;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAseRvI//jDgRsZ1BtGixcLO16/B8yEzsgVSBvCWgwf39LRAey14eZLoyyolX7wVUe71VN67cEuey7XlYGHzGntDtLh/CmI8vvDaiym0VNv8zrZok2TbYW0I4Ts9YkNtCUC5EKjyrwX7AT97ZjiXVX6JK+oEmdtgwxtrQc9+trYj3udlStEmpH0yluY3kSmUYDe3e4TEdLUX7+x/i4D8+65dIXdw52cRNka9aMpH7ZdsfPvrFd6y+ItOuX1Zsb8uFdQz21/Tf1aVczwbZgpUFfpyt55erLwfFLdlH7aRwBIJGQDMzl4SFkGgxDuSPjUePHO266PiHm2/r8A0515n3ZCwIDAQAB\n          description: DKIM record value\n      required:\n        - selector\n        - value\n    DnsCheckCurrentValues:\n      type: object\n      properties:\n        mx:\n          description: List of DNS records\n          type: array\n          items:\n            $ref: '#/components/schemas/DnsCheckMxRecord'\n        spf:\n          type: string\n          example: 'v=spf1 include:example.com -all'\n          description: Value of the SPF record\n        dkim:\n          allOf:\n            - $ref: '#/components/schemas/DnsCheckDkimRecord'\n            - description: DKIM record selector and value\n      required:\n        - mx\n        - spf\n    DnsCheckCorrectValues:\n      type: object\n      properties:\n        mx:\n          description: List of DNS records\n          type: array\n          items:\n            $ref: '#/components/schemas/DnsCheckMxRecord'\n        spf:\n          type: string\n          example: 'v=spf1 include:example.com -all'\n          description: Value of the SPF record\n        dkim:\n          allOf:\n            - $ref: '#/components/schemas/DnsCheckDkimRecord'\n            - description: DKIM record selector and value\n      required:\n        - mx\n        - spf\n    DnsCheckError:\n      type: object\n      properties:\n        type:\n          type: string\n          example: dkim\n          description: 'Type of error/warning. Can be ns, mx, spf, dkim'\n        error:\n          type: string\n          example: DkimNotFound\n          description: Machine readable error/warning string\n        message:\n          type: string\n          example: 'DKIM is enabled, but no record was found'\n          description: Human readable error/warning message\n      required:\n        - type\n        - error\n        - message\n    DnsCheck:\n      type: object\n      properties:\n        currentValues:\n          allOf:\n            - $ref: '#/components/schemas/DnsCheckCurrentValues'\n            - description: Current values of the DNS records\n        correctValues:\n          allOf:\n            - $ref: '#/components/schemas/DnsCheckCorrectValues'\n            - description: Correct values of the DNS records\n        errors:\n          description: List of errors with the DNS records\n          type: array\n          items:\n            $ref: '#/components/schemas/DnsCheckError'\n        warnings:\n          description: List of warnings with the DNS records\n          type: array\n          items:\n            $ref: '#/components/schemas/DnsCheckError'\n      required:\n        - currentValues\n        - correctValues\n        - errors\n        - warnings\n    Address:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59cb948ad80a820b68f05230\n          description: The unique id of the email account\n          readOnly: true\n        name:\n          type: string\n          example: John Doe\n          description: The name of the email account\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the email account\n      required:\n        - address\n    AccountListItemQuota:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 1073741824\n          description: How many bytes the account is allowed to use\n        used:\n          type: number\n          example: 17799833\n          description: How many bytes the account is currently using\n      required:\n        - allowed\n        - used\n    AccountListItem:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59cb948ad80a820b68f05230\n          description: The unique id of the email account\n          readOnly: true\n        name:\n          type: string\n          example: John Doe\n          description: The name of the email account\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the email account\n        disabled:\n          type: boolean\n          example: false\n          description: \u003e-\n            If true then the account can not authenticate or receive any new\n            mail\n        aliases:\n          description: List of aliases for this account\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n        quota:\n          allOf:\n            - $ref: '#/components/schemas/AccountListItemQuota'\n            - description: Account quota usage and limit\n      required:\n        - address\n        - disabled\n        - aliases\n        - quota\n    AccountDetailsLimitsQuota:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 1073741824\n          description: How many bytes the account is allowed to use\n        used:\n          type: number\n          example: 2048\n          description: How many bytes the account is currently using\n      required:\n        - allowed\n        - used\n    AccountDetailsLimitsSend:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 200\n          description: How many messages can be sent per period\n        used:\n          type: number\n          example: 231\n          description: How many messages were sent in the current period\n        ttl:\n          type: number\n          example: 3600\n          description: Seconds until the end of the current period\n      required:\n        - allowed\n        - used\n        - ttl\n    AccountDetailsLimitsReceive:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 1000\n          description: How many messages can be received per period\n        used:\n          type: number\n          example: 574\n          description: How many messages were received in the current period\n        ttl:\n          type: number\n          example: 3600\n          description: Seconds until the end of the current period\n      required:\n        - allowed\n        - used\n        - ttl\n    AccountDetailsLimitsForward:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 100\n          description: How many messages can be forwarded per period\n        used:\n          type: number\n          example: 56\n          description: How many messages were forwarded in the current period\n        ttl:\n          type: number\n          example: 3600\n          description: Seconds until the end of the current period\n      required:\n        - allowed\n        - used\n        - ttl\n    AccountDetailsLimits:\n      type: object\n      properties:\n        quota:\n          allOf:\n            - $ref: '#/components/schemas/AccountDetailsLimitsQuota'\n            - description: Storage quota limit and usage\n        send:\n          allOf:\n            - $ref: '#/components/schemas/AccountDetailsLimitsSend'\n            - description: How many emails the account can send in a period\n        receive:\n          allOf:\n            - $ref: '#/components/schemas/AccountDetailsLimitsReceive'\n            - description: How many emails the account can receive in a period\n        forward:\n          allOf:\n            - $ref: '#/components/schemas/AccountDetailsLimitsForward'\n            - description: How many emails the account can forward in a period\n      required:\n        - quota\n        - send\n        - receive\n        - forward\n    AccountDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59cb948ad80a820b68f05230\n          description: The unique id of the email account\n          readOnly: true\n        name:\n          type: string\n          example: John Doe\n          description: The name of the email account\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the email account\n        disabled:\n          type: boolean\n          example: false\n          description: \u003e-\n            If true then the account can not authenticate or receive any new\n            mail\n        aliases:\n          description: List of aliases for this account\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n        spamLevel:\n          type: number\n          example: 50\n          description: \u003e-\n            Relative scale for detecting spam. 0 means that everything is spam,\n            100 means that nothing is spam\n        disabledScopes:\n          example:\n            - imap\n            - pop3\n          description: List of scopes that are disabled for this user\n          type: array\n          items:\n            type: string\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/AccountDetailsLimits'\n            - description: Account limits\n      required:\n        - address\n        - disabled\n        - aliases\n        - spamLevel\n        - disabledScopes\n        - limits\n    CreateUpdateAccountLimits:\n      type: object\n      properties:\n        quota:\n          type: number\n          example: 1073741824\n          description: How many bytes the account is allowed to use\n        send:\n          type: number\n          example: 200\n          description: How many emails the account can send in a period\n        receive:\n          type: number\n          example: 1000\n          description: How many emails the account can receive in a period\n        forward:\n          type: number\n          example: 100\n          description: How many emails the account can forward in a period\n    CreateAccountDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: John Doe\n          description: The name of the email account\n        spamLevel:\n          type: number\n          example: 50\n          description: \u003e-\n            Relative scale for detecting spam. 0 means that everything is spam,\n            100 means that nothing is spam\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/CreateUpdateAccountLimits'\n            - description: Account limits\n        disabledScopes:\n          example: \u0026ref_0\n            - imap\n            - pop3\n          description: List of scopes that are disabled for this user\n          type: array\n          items:\n            type: string\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the email account\n        password:\n          type: string\n          example: verysecret\n          description: The new password of the email account\n      required:\n        - limits\n        - address\n        - password\n    UpdateAccountDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: John Doe\n          description: The name of the email account\n        spamLevel:\n          type: number\n          example: 50\n          description: \u003e-\n            Relative scale for detecting spam. 0 means that everything is spam,\n            100 means that nothing is spam\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/CreateUpdateAccountLimits'\n            - description: Account limits\n        disabledScopes:\n          example: *ref_0\n          description: List of scopes that are disabled for this user\n          type: array\n          items:\n            type: string\n        password:\n          type: string\n          example: verysecret\n          description: The new password of the email account\n        disabled:\n          type: boolean\n          example: false\n          description: \u003e-\n            If true then the account can not authenticate or receive any new\n            mail\n      required:\n        - limits\n    DnsTxt:\n      type: object\n      properties:\n        name:\n          type: string\n          example: ducky._domainkey.example.com\n          description: Domain name to which the TXT record should be added\n        value:\n          type: string\n          example: v=DKIM1;t=s;p=MIGfMA0...\n          description: Value of the TXT record\n      required:\n        - name\n        - value\n    DkimKey:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59ef21aef255ed1d9d790e7a\n          description: Unique id of the DKIM key\n        domain:\n          type: string\n          example: example.com\n          description: The domain this DKIM key applies to\n        selector:\n          type: string\n          example: ducky\n          description: DKIM selector\n        fingerprint:\n          type: string\n          example: '6a:aa:d7:ba:e4:99:b4:12:e0:f3:35:01:71:d4:f1:d6:b4:95:c4:f5'\n          description: Unique id of the DKIM key\n        publicKey:\n          type: string\n          example: \"-----BEGIN PUBLIC KEY-----\\r\\nMIGfMA0...\"\n          description: 'Public key in DNS format (no prefix/suffix, single line)'\n        dnsTxt:\n          allOf:\n            - $ref: '#/components/schemas/DnsTxt'\n            - description: Value for the DNS TXT record\n        created:\n          type: string\n          example: '2017-10-24T11:19:10.911Z'\n          description: Datestring of the time the DKIM key was created\n      required:\n        - id\n        - domain\n        - selector\n        - fingerprint\n        - publicKey\n        - dnsTxt\n        - created\n    AddDkimDto:\n      type: object\n      properties:\n        selector:\n          type: string\n          example: default\n          description: Selector for dkim key\n        privateKey:\n          type: string\n          example: '-----BEGIN RSA PRIVATE KEY-----...'\n          description: \u003e-\n            Pem formatted DKIM private key. If not set then a new 2048 bit RSA\n            key is generated, beware though that it can take several seconds to\n            complete\n      required:\n        - selector\n    Forwarder:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59cb948ad80a820b68f05230\n          description: The unique id of the forwarder\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the forwarder\n      required:\n        - id\n        - address\n    ForwarderDetailsForwards:\n      type: object\n      properties:\n        allowed:\n          type: number\n          example: 100\n          description: How many messages can be forwarded per period\n        used:\n          type: number\n          example: 56\n          description: How many messages were forwarded in the current period\n        ttl:\n          type: number\n          example: 3600\n          description: Seconds until the end of the current period\n      required:\n        - allowed\n        - used\n        - ttl\n    ForwarderDetailsLimits:\n      type: object\n      properties:\n        forward:\n          allOf:\n            - $ref: '#/components/schemas/ForwarderDetailsForwards'\n            - description: Forwarding quota\n      required:\n        - forward\n    ForwarderDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 59cb948ad80a820b68f05230\n          description: The unique id of the forwarder\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address of the forwarder\n        name:\n          type: string\n          example: John Doe\n          description: Identity name\n        targets:\n          example:\n            - johndoe@example.com\n            - 'smtp://mx.example.com:25'\n            - 'https://example.com'\n          description: List of forwarding targets\n          type: array\n          items:\n            type: string\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/ForwarderDetailsLimits'\n            - description: Forwarder limits and usage\n      required:\n        - id\n        - address\n        - name\n        - targets\n        - limits\n    CreateUpdateForwarderCommonDtoLimits:\n      type: object\n      properties:\n        forward:\n          type: number\n          example: 600\n          description: How many messages can be forwarded per period\n    CreateForwarderDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: John Doe\n          description: Identity name\n        targets:\n          example: \u0026ref_1\n            - johndoe@example.com\n            - 'smtp://mx.example.com:25'\n            - 'https://example.com'\n          description: \u003e-\n            An array of forwarding targets. The value could either be an email\n            address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\")\n            or an URL where mail contents are POSTed to\n          type: array\n          items:\n            type: string\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/CreateUpdateForwarderCommonDtoLimits'\n            - description: Limits for this forwarder\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address that should be forwarded\n      required:\n        - limits\n        - address\n    UpdateForwarderDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: John Doe\n          description: Identity name\n        targets:\n          example: *ref_1\n          description: \u003e-\n            An array of forwarding targets. The value could either be an email\n            address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\")\n            or an URL where mail contents are POSTed to\n          type: array\n          items:\n            type: string\n        limits:\n          allOf:\n            - $ref: '#/components/schemas/CreateUpdateForwarderCommonDtoLimits'\n            - description: Limits for this forwarder\n        address:\n          type: string\n          example: john@example.com\n          description: The E-Mail address that should be forwarded\n      required:\n        - limits\n    ApiKey:\n      type: object\n      properties:\n        _id:\n          type: string\n          example: pnx97h6p64t4gau6vbub-\n          description: Unique id for this api key\n          readOnly: true\n        name:\n          type: string\n          example: API key for my script\n          description: Name of api key\n        issuedAt:\n          format: date-time\n          type: string\n          example: '2019-09-01T22:12:08.882Z'\n          description: Date the api key was issued\n          readOnly: true\n      required:\n        - name\n    ApiKeyAccessToken:\n      type: object\n      properties:\n        accessToken:\n          type: string\n          example: \u003e-\n            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG5kb2UiLCJzdWIiOiI1ZDM1ZDczZmU0YTY3NzVmYjQxZmE0ZjEiLCJpYXQiOjE1NjM5MTU0OTgsImV4cCI6MTU2MzkxNTc5OH0.qYejtBl1Tcv9IWgp9Ax5FiR6uT_W0VwizHkB-3S7_r0\n          description: API key that can be used to authenticate against the api\n        details:\n          allOf:\n            - $ref: '#/components/schemas/ApiKey'\n            - description: API key details\n      required:\n        - accessToken\n        - details\n    FilterListItem:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Mark as seen from John\n          description: The name of the filter\n        disabled:\n          type: boolean\n          example: false\n          description: 'If true, then this filter is ignored'\n        id:\n          type: string\n          example: 5a1c0ee490a34c67e266931c\n          description: Unique id of the filter\n        query:\n          example:\n            - - from\n              - (John)\n            - - to\n              - (John)\n          description: A list of query descriptions\n          type: array\n          items:\n            type: string\n        action:\n          example:\n            - - mark it as spam\n            - - forward to\n              - 'johndoe@example.com, smtp://mx.example.com:25, example.com'\n          description: A list of action descriptions\n          type: array\n          items:\n            type: string\n        created:\n          type: string\n          example: '2019-08-14T15:14:25.176Z'\n          description: Datestring of the time the filter was created\n      required:\n        - id\n        - query\n        - action\n        - created\n    Query:\n      type: object\n      properties:\n        from:\n          type: string\n          example: John\n          description: 'Partial match for the From: header (case insensitive)'\n        to:\n          type: string\n          example: John\n          description: 'Partial match for the To:/Cc: headers (case insensitive)'\n        subject:\n          type: string\n          example: You have 1 new notification\n          description: 'Partial match for the Subject: header (case insensitive)'\n        listId:\n          type: string\n          example: John's list\n          description: 'Partial match for the List-ID: header (case insensitive)'\n        text:\n          type: string\n          example: Dedicated servers\n          description: Fulltext search against message text\n        ha:\n          type: boolean\n          example: false\n          description: Does a message have to have an attachment or not\n        size:\n          type: number\n          example: 1000\n          description: \u003e-\n            Message size in bytes. If the value is a positive number then\n            message needs to be larger, if negative then message needs to be\n            smaller than abs(size) value\n    Action:\n      type: object\n      properties:\n        seen:\n          type: boolean\n          example: true\n          description: If true then mark matching messages as Seen\n        flag:\n          type: boolean\n          example: true\n          description: If true then mark matching messages as Flagged\n        delete:\n          type: boolean\n          example: true\n          description: If true then do not store matching messages\n        spam:\n          type: boolean\n          example: true\n          description: If true then store matching messags to Junk Mail folder\n        mailbox:\n          type: string\n          example: 5a1c0ee490a34c67e266932c\n          description: Mailbox ID to store matching messages to\n        targets:\n          example:\n            - johndoe@example.com\n            - 'smtp://mx.example.com:25'\n            - 'https://example.com'\n          description: \u003e-\n            An array of forwarding targets. The value could either be an email\n            address or a relay url to next MX server (\"smtp://mx2.zone.eu:25\")\n            or an URL where mail contents are POSTed to\n          type: array\n          items:\n            type: string\n    FilterDetails:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Mark as seen from John\n          description: The name of the filter\n        disabled:\n          type: boolean\n          example: false\n          description: 'If true, then this filter is ignored'\n        query:\n          allOf:\n            - $ref: '#/components/schemas/Query'\n            - description: Rules that a message must match\n        action:\n          allOf:\n            - $ref: '#/components/schemas/Action'\n            - description: Rules that a message must match\n        id:\n          type: string\n          example: 5a1c0ee490a34c67e266931c\n          description: Unique id of the filter\n      required:\n        - query\n        - action\n        - id\n    CreateUpdateFilterDto:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Mark as seen from John\n          description: The name of the filter\n        disabled:\n          type: boolean\n          example: false\n          description: 'If true, then this filter is ignored'\n        query:\n          allOf:\n            - $ref: '#/components/schemas/Query'\n            - description: Rules that a message must match\n        action:\n          allOf:\n            - $ref: '#/components/schemas/Action'\n            - description: Rules that a message must match\n      required:\n        - query\n        - action\npaths:\n  /authentication:\n    delete:\n      operationId: revokeAllAccessTokens\n      summary: Revoke previous access tokens\n      description: \u003e-\n        Note: This resource is forbidden when using an API key as authorization.\n        Use an access token.\n      parameters: []\n      responses:\n        '200':\n          description: Successfully expired previous tokens\n        '400': \u0026ref_2\n          description: Bad user input\n        '401':\n          description: Invalid or expired token\n      tags: \u0026ref_3\n        - Authentication\n      security:\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/authentication \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: getAccessToken\n      summary: Get an access token\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginDto'\n      responses:\n        '201':\n          description: Login successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n        '400': *ref_2\n        '401':\n          description: Invalid username or password\n      tags: *ref_3\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/authentication \\\n              --header 'content-type: application/json' \\\n              --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"rememberMe\":false}'\n  /users:\n    get:\n      operationId: getUsers\n      summary: '[Admin only] List all users'\n      parameters: []\n      responses:\n        '200':\n          description: list of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400': \u0026ref_4\n          description: Bad user input\n        '401': \u0026ref_5\n          description: Invalid or expired token\n      security: \u0026ref_6\n        - bearer: []\n      tags:\n        - Users\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/users \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: createUser\n      summary: '[Admin only] Create new API user'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserDto'\n      responses:\n        '201':\n          description: User successfully created\n        '400': *ref_4\n        '401': *ref_5\n      security: *ref_6\n      tags:\n        - Users\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/users \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"packageId\":\"5d49e11f600a423ffc0b1297\"}'\n  /users/me:\n    get:\n      operationId: getMe\n      summary: Get account info for current access token\n      parameters: []\n      responses:\n        '200':\n          description: User info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400': *ref_4\n        '401': *ref_5\n      security: *ref_6\n      tags:\n        - Profile\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/users/me \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    put:\n      operationId: updateMe\n      summary: Update username/password\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserDto'\n      responses:\n        '200':\n          description: User updated successfully\n        '400': *ref_4\n        '401': *ref_5\n      security: *ref_6\n      tags:\n        - Profile\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/users/me \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"username\":\"johndoe\",\"password\":\"supersecret\"}'\n  '/users/{id}':\n    delete:\n      operationId: deleteUser\n      summary: '[Admin only] Delete API user'\n      parameters:\n        - name: id\n          required: true\n          in: path\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for the user\n          schema:\n            type: string\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteUserDto'\n      responses:\n        '200':\n          description: User successfully deleted\n        '400': *ref_4\n        '401': *ref_5\n      security: *ref_6\n      tags:\n        - Users\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/users/5d49e11f600a423ffc0b1297 \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"onlyDeleteDomainsAndSuspend\":true}'\n    put:\n      operationId: updateUser\n      summary: '[Admin only] Update API user'\n      parameters:\n        - name: id\n          required: true\n          in: path\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for the user\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserAdminDto'\n      responses:\n        '200':\n          description: ''\n        '400': *ref_4\n        '401': *ref_5\n      security: *ref_6\n      tags:\n        - Users\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/users/5d49e11f600a423ffc0b1297 \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"username\":\"johndoe\",\"password\":\"supersecret\",\"packageId\":\"5d49e11f600a423ffc0b1297\",\"suspended\":false}'\n  /packages:\n    get:\n      operationId: getPackages\n      summary: '[Admin only] Get a list of packages'\n      parameters: []\n      responses:\n        '200':\n          description: List of packages\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Package'\n        '400': \u0026ref_7\n          description: Bad user input\n        '401': \u0026ref_8\n          description: Invalid or expired token\n      tags: \u0026ref_9\n        - Packages\n      security: \u0026ref_10\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/packages \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: createPackage\n      summary: '[Admin only] Create package'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Package'\n      responses:\n        '201':\n          description: Successfully created package\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Package'\n        '400': *ref_7\n        '401': *ref_8\n      tags: *ref_9\n      security: *ref_10\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/packages \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"Small\",\"quota\":1073741824,\"maxSend\":200,\"maxReceive\":1000,\"maxForward\":100}'\n  '/packages/{id}':\n    put:\n      operationId: updatePackage\n      summary: '[Admin only] Update package'\n      description: \u003e-\n        Will also update quota for existing users, except if you modified the\n        users quota manually.\n      parameters:\n        - name: id\n          required: true\n          in: path\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for the package\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Package'\n      responses:\n        '200':\n          description: Successfully updated package\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Package'\n        '400': *ref_7\n        '401': *ref_8\n      tags: *ref_9\n      security: *ref_10\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/packages/5d49e11f600a423ffc0b1297 \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"Small\",\"quota\":1073741824,\"maxSend\":200,\"maxReceive\":1000,\"maxForward\":100}'\n    delete:\n      operationId: deletePackage\n      summary: '[Admin only] Delete package'\n      parameters:\n        - name: id\n          required: true\n          in: path\n          example: 5d49e11f600a423ffc0b1297\n          description: Unique id for the package\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully deleted package\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Package'\n        '400': *ref_7\n        '401': *ref_8\n      tags: *ref_9\n      security: *ref_10\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/packages/5d49e11f600a423ffc0b1297 \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/domains/{domain}':\n    delete:\n      operationId: deleteDomain\n      summary: Delete a domain\n      description: \u003e-\n        WARNING: This will also delete any email accounts, forwarders, and DKIM\n        keys associated with this domain\n      parameters:\n        - name: domain\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Domain successfully deleted\n        '400': \u0026ref_11\n          description: Bad user input\n        '401': \u0026ref_12\n          description: Invalid or expired token\n        '404':\n          description: Domain not found on user\n      tags: \u0026ref_13\n        - Domains\n      security: \u0026ref_14\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/domains/%7Bdomain%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  /domains:\n    get:\n      operationId: getDomains\n      summary: List domains\n      parameters: []\n      responses:\n        '200':\n          description: A list of domains\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Domain'\n        '400': *ref_11\n        '401': *ref_12\n      tags: *ref_13\n      security: *ref_14\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/domains \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: addDomain\n      summary: Add a domain\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Domain'\n      responses:\n        '201':\n          description: Domain successfully added\n        '400': *ref_11\n        '401': *ref_12\n      tags: *ref_13\n      security: *ref_14\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/domains \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"domain\":\"example.com\"}'\n  '/domains/{domain}/DNS':\n    get:\n      operationId: checkDNS\n      summary: Get and check DNS records\n      parameters:\n        - name: domain\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The current and the correct DNS records for this domain\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DnsCheck'\n        '400': *ref_11\n        '401': *ref_12\n        '404':\n          description: Domain not found on user\n      tags: *ref_13\n      security: *ref_14\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/domains/%7Bdomain%7D/DNS \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/domains/{domain}/aliases':\n    post:\n      operationId: addAlias\n      summary: Add a domain alias\n      parameters:\n        - name: domain\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DomainAlias'\n      responses:\n        '201':\n          description: Alias successfully added\n        '400': *ref_11\n        '401': *ref_12\n        '404':\n          description: Domain not found on user\n      tags: *ref_13\n      security: *ref_14\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/domains/%7Bdomain%7D/aliases \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"domain\":\"example.com\"}'\n  '/domains/{domain}/aliases/{alias}':\n    delete:\n      operationId: deleteAlias\n      summary: Delete a domain alias\n      parameters:\n        - name: domain\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n        - name: alias\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Alias successfully deleted\n        '400': *ref_11\n        '401': *ref_12\n        '404':\n          description: Domain not found on user\n      tags: *ref_13\n      security: *ref_14\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/domains/%7Bdomain%7D/aliases/%7Balias%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/accounts/{accountId}':\n    delete:\n      operationId: deleteAccount\n      summary: Delete email account\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Account deleted successfully\n        '400': \u0026ref_15\n          description: Bad user input\n        '401': \u0026ref_16\n          description: Invalid or expired token\n        '404':\n          description: No account found with this id\n      tags: \u0026ref_17\n        - Email Accounts\n      security: \u0026ref_18\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    get:\n      operationId: getAccountDetails\n      summary: Get email account details\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Account details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountDetails'\n        '400': *ref_15\n        '401': *ref_16\n        '404':\n          description: No account found with this id\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    put:\n      operationId: updateAccount\n      summary: Update existing email account\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAccountDto'\n      responses:\n        '200':\n          description: Account updated successfully\n        '400': *ref_15\n        '401': *ref_16\n        '404':\n          description: No account found with this id\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"John Doe\",\"spamLevel\":50,\"limits\":{\"quota\":1073741824,\"send\":200,\"receive\":1000,\"forward\":100},\"disabledScopes\":[\"imap\",\"pop3\"],\"password\":\"verysecret\",\"disabled\":false}'\n  /accounts:\n    get:\n      operationId: getAccounts\n      summary: List email accounts\n      parameters: []\n      responses:\n        '200':\n          description: A list of accounts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccountListItem'\n        '400': *ref_15\n        '401': *ref_16\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/accounts \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: createAccount\n      summary: Create a new email account\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateAccountDto'\n      responses:\n        '201':\n          description: Account created successfully\n        '400': *ref_15\n        '401': *ref_16\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/accounts \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"John Doe\",\"spamLevel\":50,\"limits\":{\"quota\":1073741824,\"send\":200,\"receive\":1000,\"forward\":100},\"disabledScopes\":[\"imap\",\"pop3\"],\"address\":\"john@example.com\",\"password\":\"verysecret\"}'\n  '/accounts/{accountId}/aliases':\n    post:\n      operationId: addAccountAlias\n      summary: Add an account alias\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Address'\n      responses:\n        '201':\n          description: Alias successfully added\n        '400': *ref_15\n        '401': *ref_16\n        '404':\n          description: No account found with this id\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/aliases \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"John Doe\",\"address\":\"john@example.com\"}'\n  '/accounts/{accountId}/aliases/{aliasId}':\n    delete:\n      operationId: deleteAccountAlias\n      summary: Delete an account alias\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n        - name: aliasId\n          required: true\n          in: path\n          description: Unique id of the alias\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Alias successfully deleted\n        '400': *ref_15\n        '401': *ref_16\n        '404':\n          description: No account or alias found with this id\n      tags: *ref_17\n      security: *ref_18\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/aliases/%7BaliasId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/domains/{domainOrAlias}/dkim':\n    delete:\n      operationId: deleteDkim\n      summary: Delete DKIM key for a domain\n      parameters:\n        - name: domainOrAlias\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: DKIM key successfully deleted\n        '400': \u0026ref_19\n          description: Bad user input\n        '401': \u0026ref_20\n          description: Invalid or expired token\n        '404': \u0026ref_21\n          description: Domain not found in account\n      tags: \u0026ref_22\n        - Dkim\n      security: \u0026ref_23\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    get:\n      operationId: getDkim\n      summary: Get DKIM key info for a domain\n      parameters:\n        - name: domainOrAlias\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      responses:\n        '200':\n          description: DKIM key info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DkimKey'\n        '400': *ref_19\n        '401': *ref_20\n        '404': *ref_21\n      tags: *ref_22\n      security: *ref_23\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    put:\n      operationId: updateDkim\n      summary: Add or update DKIM key for a domain\n      parameters:\n        - name: domainOrAlias\n          required: true\n          in: path\n          description: example.com\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddDkimDto'\n      responses:\n        '200':\n          description: DKIM key info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DkimKey'\n        '400': *ref_19\n        '401': *ref_20\n        '404': *ref_21\n      tags: *ref_22\n      security: *ref_23\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/domains/%7BdomainOrAlias%7D/dkim \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"selector\":\"default\",\"privateKey\":\"-----BEGIN RSA PRIVATE KEY-----...\"}'\n  '/forwarders/{forwarderId}':\n    delete:\n      operationId: deleteForwarder\n      summary: Delete forwarder\n      parameters:\n        - name: forwarderId\n          required: true\n          in: path\n          description: Unique id of the forwarder\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Forwarder deleted successfully\n        '400': \u0026ref_24\n          description: Bad user input\n        '401': \u0026ref_25\n          description: Invalid or expired token\n        '404':\n          description: No forwarder found with this id\n      tags: \u0026ref_26\n        - Forwarders\n      security: \u0026ref_27\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    get:\n      operationId: getForwarderDetails\n      summary: Get forwarder details\n      parameters:\n        - name: forwarderId\n          required: true\n          in: path\n          description: Unique id of the forwarder\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Forwarder details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForwarderDetails'\n        '400': *ref_24\n        '401': *ref_25\n        '404':\n          description: No forwarder found with this id\n      tags: *ref_26\n      security: *ref_27\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    put:\n      operationId: updateForwarder\n      summary: Update existing forwarder\n      parameters:\n        - name: forwarderId\n          required: true\n          in: path\n          description: Unique id of the forwarder\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateForwarderDto'\n      responses:\n        '200':\n          description: Forwarder updated successfully\n        '400': *ref_24\n        '401': *ref_25\n        '404':\n          description: No forwarder found with this id\n      tags: *ref_26\n      security: *ref_27\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/forwarders/%7BforwarderId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"John Doe\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"],\"limits\":{\"forward\":600},\"address\":\"john@example.com\"}'\n  /forwarders:\n    get:\n      operationId: getForwarders\n      summary: List forwarders\n      parameters: []\n      responses:\n        '200':\n          description: A list of forwarders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Forwarder'\n        '400': *ref_24\n        '401': *ref_25\n      tags: *ref_26\n      security: *ref_27\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/forwarders \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: createForwarder\n      summary: Create a new forwarder\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateForwarderDto'\n      responses:\n        '201':\n          description: Forwarder created successfully\n        '400': *ref_24\n        '401': *ref_25\n      tags: *ref_26\n      security: *ref_27\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/forwarders \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"John Doe\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"],\"limits\":{\"forward\":600},\"address\":\"john@example.com\"}'\n  /apikeys:\n    post:\n      operationId: createApiKey\n      summary: Create an API key\n      description: \u003e-\n        Note: This resource is forbidden when using an API key as authorization.\n        Use an access token.\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApiKey'\n      responses:\n        '201':\n          description: API key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiKeyAccessToken'\n        '400': \u0026ref_28\n          description: Bad user input\n        '401': \u0026ref_29\n          description: Invalid or expired token\n      tags: \u0026ref_30\n        - Api Keys\n      security: \u0026ref_31\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/apikeys \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"API key for my script\"}'\n    get:\n      operationId: getApiKeys\n      summary: List active api keys\n      parameters: []\n      responses:\n        '200':\n          description: List of active api keys\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiKey'\n        '400': *ref_28\n        '401': *ref_29\n      tags: *ref_30\n      security: *ref_31\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/apikeys \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/apikeys/{id}':\n    delete:\n      operationId: revokeApiKey\n      summary: Revoke api key\n      description: \u003e-\n        Note: This resource is forbidden when using an API key as authorization.\n        Use an access token.\n      parameters:\n        - name: id\n          required: true\n          in: path\n          example: pnx97h6p64t4gau6vbub-\n          description: Unique id of the api key\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Api key revoked\n        '400': *ref_28\n        '401': *ref_29\n      tags: *ref_30\n      security: *ref_31\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/apikeys/pnx97h6p64t4gau6vbub- \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n  '/accounts/{accountId}/filters/{filterId}':\n    delete:\n      operationId: deleteFilter\n      summary: Delete filter\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n        - name: filterId\n          required: true\n          in: path\n          description: Unique id of the filter\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Filter deleted successfully\n        '400': \u0026ref_32\n          description: Bad user input\n        '401': \u0026ref_33\n          description: Invalid or expired token\n        '404':\n          description: No account or filter found with this id\n      tags: \u0026ref_34\n        - Filters\n      security: \u0026ref_35\n        - bearer: []\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request DELETE \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    get:\n      operationId: getFilterDetails\n      summary: Get filter details\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n        - name: filterId\n          required: true\n          in: path\n          description: Unique id of the filter\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Filter details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FilterDetails'\n        '400': *ref_32\n        '401': *ref_33\n        '404':\n          description: No account or filter found with this id\n      tags: *ref_34\n      security: *ref_35\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    put:\n      operationId: updateFilter\n      summary: Update existing filter\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n        - name: filterId\n          required: true\n          in: path\n          description: Unique id of the filter\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUpdateFilterDto'\n      responses:\n        '200':\n          description: Account updated successfully\n        '400': *ref_32\n        '401': *ref_33\n        '404':\n          description: No account or filter found with this id\n      tags: *ref_34\n      security: *ref_35\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request PUT \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/filters/%7BfilterId%7D \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"Mark as seen from John\",\"disabled\":false,\"query\":{\"from\":\"John\",\"to\":\"John\",\"subject\":\"You have 1 new notification\",\"listId\":\"John'\\''s list\",\"text\":\"Dedicated servers\",\"ha\":false,\"size\":1000},\"action\":{\"seen\":true,\"flag\":true,\"delete\":true,\"spam\":true,\"mailbox\":\"5a1c0ee490a34c67e266932c\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"]}}'\n  '/accounts/{accountId}/filters':\n    get:\n      operationId: getFilters\n      summary: List filters\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of filters\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FilterListItem'\n        '400': *ref_32\n        '401': *ref_33\n        '404':\n          description: No account found with this id\n      tags: *ref_34\n      security: *ref_35\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request GET \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/filters \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN'\n    post:\n      operationId: createFilter\n      summary: Create a new filter\n      parameters:\n        - name: accountId\n          required: true\n          in: path\n          description: Unique id of the account\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUpdateFilterDto'\n      responses:\n        '201':\n          description: Filter created successfully\n        '400': *ref_32\n        '401': *ref_33\n        '404':\n          description: No account found with this id\n      tags: *ref_34\n      security: *ref_35\n      x-code-samples:\n        - lang: Shell\n          label: Curl\n          source: |-\n            curl --request POST \\\n              --url http://localhost:3000/accounts/%7BaccountId%7D/filters \\\n              --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n              --header 'content-type: application/json' \\\n              --data '{\"name\":\"Mark as seen from John\",\"disabled\":false,\"query\":{\"from\":\"John\",\"to\":\"John\",\"subject\":\"You have 1 new notification\",\"listId\":\"John'\\''s list\",\"text\":\"Dedicated servers\",\"ha\":false,\"size\":1000},\"action\":{\"seen\":true,\"flag\":true,\"delete\":true,\"spam\":true,\"mailbox\":\"5a1c0ee490a34c67e266932c\",\"targets\":[\"johndoe@example.com\",\"smtp://mx.example.com:25\",\"https://example.com\"]}}'\n",
			"canonicalURL": "/github.com/louis-lau/DuckyAPI@88697e0d759655083e3af06b0ac58ce0b52af736/-/blob/docs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/louis-lau/DuckyAPI/blob/88697e0d759655083e3af06b0ac58ce0b52af736/docs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/accounts\": get: responses: code 200: contents: application/json: generate schema: item: field quota: allOf: schema type mismatch: object and "
}