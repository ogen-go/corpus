{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apivideo/api.video-java-client"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 546084,
			"content": "openapi: 3.0.0\ninfo:\n  description: api.video is an API that encodes on the go to facilitate immediate\n    playback, enhancing viewer streaming experiences across multiple devices and platforms.\n    You can stream live or on-demand online videos within minutes.\n  title: api.video\n  version: \"1\"\nservers:\n- description: Production server\n  url: https://ws.api.video\n- description: Test server `all videos are watermarked, and deleted after 24 hours.\n  url: https://sandbox.api.video\npaths:\n  /auth/api-key:\n    post:\n      description: |-\n        To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.\n        All tutorials using the [authentication endpoint](https://api.video/blog/endpoints/authenticate)\n      operationId: POST_auth-api-key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/authenticate-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token_type: Bearer\n                    expires_in: 3600\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n              schema:\n                $ref: '#/components/schemas/access-token'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n                    title: The user credentials were incorrect.\n                    name: \"\"\n                    status: 400\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      summary: Authenticate\n      tags:\n      - Authentication\n      x-client-action: authenticate\n      x-client-hidden: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: node\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: php\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: python\n          code: |\n            #With the api.video API clients, authentication is taken care of with each client created.\n            # You get to skip this step!\n        - language: java\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: csharp\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/refresh:\n    post:\n      description: \"Use the refresh endpoint with the refresh token you received when\\\n        \\ you first authenticated using the api-key endpoint. Send the refresh token\\\n        \\ in the body of your request. The api.video API returns a new access token\\\n        \\ that is valid for one hour (3600 seconds) and a new refresh token. \\n\"\n      operationId: POST_auth-refresh\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/refresh-token-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token_type: Bearer\n                    expires_in: 3600\n                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n                    refresh_token: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n              schema:\n                $ref: '#/components/schemas/access-token'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/authenticationinvalid_credentials\n                    title: The user credentials were incorrect.\n                    name: \"\"\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      summary: Refresh token\n      tags:\n      - Authentication\n      x-client-action: refresh\n      x-client-hidden: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: node\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: php\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: python\n          code: |\n            #With the api.video API clients, authentication is taken care of with each client created.\n            # You get to skip this step!\n        - language: java\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n        - language: csharp\n          code: |\n            //With the api.video API clients, authentication is taken care of with each client created.\n            // You get to skip this step!\n      x-contentType: application/json\n      x-accepts: application/json\n  /videos:\n    get:\n      description: Requests to this endpoint return a list of your videos (with all\n        their details). With no parameters added to this query, the API returns all\n        videos. You can filter what videos the API returns using the parameters described\n        below.  We have [several tutorials](https://api.video/blog/endpoints/video-list)\n        that demonstrate this endpoint.\n      operationId: LIST-videos\n      parameters:\n      - description: The title of a specific video you want to find. The search will\n          match exactly to what term you provide and return any videos that contain\n          the same term as part of their titles.\n        example: My Video.mp4\n        explode: true\n        in: query\n        name: title\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: A tag is a category you create and apply to videos. You can search\n          for videos with particular tags by listing one or more here. Only videos\n          that have all the tags you list will be returned.\n        example: '[\"captions\", \"dialogue\"]'\n        explode: true\n        in: query\n        name: tags[]\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - description: Videos can be tagged with metadata tags in key:value pairs. You\n          can search for videos with specific key value pairs using this parameter.\n          [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows\n          you to define a key that allows any value pair.\n        example: metadata[Author]=John Doe\u0026metadata[Format]=Tutorial\n        explode: true\n        in: query\n        name: metadata\n        required: false\n        schema:\n          additionalProperties:\n            type: string\n          type: object\n        style: deepObject\n        x-is-deep-object: true\n      - description: If you described a video with a term or sentence, you can add\n          it here to return videos containing this string.\n        example: New Zealand\n        explode: true\n        in: query\n        name: description\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: If you know the ID for a live stream, you can retrieve the stream\n          by adding the ID for it here.\n        example: li400mYKSgQ6xs7taUeSaEKr\n        explode: true\n        in: query\n        name: liveStreamId\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Allowed: publishedAt, title. You can search by the time videos\n          were published at, or by title.'\n        example: publishedAt\n        explode: true\n        in: query\n        name: sortBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Allowed: asc, desc. asc is ascending and sorts from A to Z.\n          desc is descending and sorts from Z to A.'\n        example: asc\n        explode: true\n        in: query\n        name: sortOrder\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - videoId: vi4blUQJFrYWbaG44NChkH27\n                      playerId: pl45KFKdlddgk654dspkze\n                      title: Maths video\n                      description: An amazing video explaining the string theory\n                      public: false\n                      panoramic: false\n                      mp4Support: true\n                      tags:\n                      - maths\n                      - string theory\n                      - video\n                      metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Format\n                        value: Tutorial\n                      publishedAt: 2019-12-16T08:25:51+00:00\n                      updatedAt: 2019-12-16T08:48:49+00:00\n                      source:\n                        uri: /videos/c188ed58-3403-46a2-b91b-44603d10b2c9/source\n                      assets:\n                        iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                          allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n                    - videoId: vi4blUQJFrYWbaG44NChkH27\n                      title: Video Title\n                      description: A description for your video.\n                      public: false\n                      panoramic: false\n                      mp4Support: true\n                      tags:\n                      - books\n                      - short stories\n                      metadata:\n                      - key: Author\n                        value: John Doe\n                      - key: Science Fiction\n                        value: Cyberpunk\n                      - key: Technology\n                        value: Computers\n                      publishedAt: 2019-12-16T08:25:51+00:00\n                      updatedAt: 2019-12-16T08:48:49+00:00\n                      source:\n                        uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                      assets:\n                        iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                          allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n                    - videoId: vi4blUQJFrYWbaG44NChkH27\n                      playerId: pl45KFKdlddgk654dspkze\n                      title: My Video Title\n                      description: A brief description of the video.\n                      public: false\n                      panoramic: false\n                      mp4Support: true\n                      tags:\n                      - General\n                      - Videos\n                      metadata:\n                      - key: Length\n                        value: Short\n                      publishedAt: 2019-12-16T08:25:51+00:00\n                      updatedAt: 2019-12-16T08:48:49+00:00\n                      source:\n                        uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                      assets:\n                        iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                          allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                        player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                        hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                        thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                        mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n                    pagination:\n                      currentPage: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 11\n                      currentPageItems: 11\n                      links:\n                      - rel: self\n                        uri: https://ws.api.video/videos?currentPage=1\n                      - rel: first\n                        uri: https://ws.api.video/videos?currentPage=1\n                      - rel: last\n                        uri: https://ws.api.video/videos?currentPage=1\n              schema:\n                $ref: '#/components/schemas/videos-list-response'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    title: This parameter is out of the allowed range of values.\n                    name: page\n                    status: 400\n                    range:\n                      min: 1\n                    problems:\n                    - title: This parameter is out of the allowed range of values.\n                      name: page\n                      range:\n                        min: 1\n                    - title: This parameter is out of the allowed range of values.\n                      name: pageSize\n                      range:\n                        min: 10\n                        max: 100\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: List all videos\n      tags:\n      - Videos\n      x-readme:\n        code-samples:\n        - language: php\n          code: |\n            \u003c?php\n\n            require __DIR__ . '/vendor/autoload.php';\n\n            $httpClient = new \\Symfony\\Component\\HttpClient\\Psr18Client();\n            $client = new \\ApiVideo\\Client(\n                                'https://sandbox.api.video',\n                                'YOUR_API_TOKEN',\n                                $httpClient\n                            );\n\n            // list all videos (all pages)\n            $allVideos = [];\n            do {\n                $currentPage = $client-\u003evideos()-\u003elist([]);\n                $allVideos = array_merge($allVideos, $currentPage-\u003egetData());\n            } while($currentPage-\u003egetPagination()-\u003egetCurrentPage() \u003c $currentPage-\u003egetPagination()-\u003egetPagesTotal());\n\n            // list videos that have all the given tags (only first results page)\n            $videosWithTag = $client-\u003evideos()-\u003elist(['tags' =\u003e ['TAG2','TAG1']]);\n\n            // list videos that have all the given metadata values (only first results page)\n            $videosWithMetadata = $client-\u003evideos()-\u003elist(['metadata' =\u003e ['key1' =\u003e 'key1value1', 'key2' =\u003e 'key2value1']]);\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-optional-object: true\n      x-accepts: application/json\n    post:\n      description: |2\n\n        ## We have tutorials on:\n        * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)\n        * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)\n\n\n        * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)\n        * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)\n        * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)\n\n        * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.\n      operationId: POST-video\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/video-creation-payload'\n        description: video to create\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    title: Maths video\n                    description: An amazing video explaining the string theory\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    playerId: pl4k0jvEUuaTdRAEjQ4Jfrgz\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Created\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/attributerequired\n                    title: This attribute is required.\n                    name: title\n                    status: 400\n                    problems:\n                    - type: https://docs.api.video/docs/attributerequired\n                      title: This attribute is required.\n                      name: title\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be a ISO8601 date.\n                      name: scheduledAt\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be an array.\n                      name: tags\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be an array.\n                      name: metadata\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Create a video\n      tags:\n      - Videos\n      x-client-action: create\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            \\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoCreationPayload := *apivideosdk.NewVideoCreationPayload(\\\"\\\n            Maths video\\\") // VideoCreationPayload | video to create\\n\\n    \\n   \\\n            \\ res, err := client.Videos.Create(videoCreationPayload)\\n\\n    if err\\\n            \\ != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `Videos.Create``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `Create`: Video\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.Create`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\nconst client = new ApiVideoClient({\\\n            \\ apiKey: \\\"YOUR_API_TOKEN\\\" });\\nconst videoCreationPayload = {\\n  title:\\\n            \\ \\\"Maths video\\\", // The title of your new video.\\n  description: \\\"\\\n            A video about string theory.\\\", // A brief description of your video.\\n\\\n            \\  source: \\\"https://www.myvideo.url.com/video.mp4\\\", // If you add a\\\n            \\ video already on the web, this is where you enter the url for the video.\\n\\\n            \\  _public: true, // Whether your video can be viewed by everyone, or\\\n            \\ requires authentication to see it. A setting of false will require a\\\n            \\ unique token for each view.\\n  panoramic: false, // Indicates if your\\\n            \\ video is a 360/immersive video.\\n  mp4Support: true, // Enables mp4\\\n            \\ version in addition to streamed version.\\n  playerId: \\\"pl45KFKdlddgk654dspkze\\\"\\\n            , // The unique identification number for your video player.\\n  tags:\\\n            \\ [\\\"maths\\\", \\\"string theory\\\", \\\"video\\\"], // A list of tags you want\\\n            \\ to use to describe your video.\\n  metadata: [{\\\"key\\\": \\\"Author\\\", \\\"\\\n            value\\\": \\\"John Doe\\\"}], // A list of key value pairs that you use to\\\n            \\ provide metadata for your video. These pairs can be made dynamic, allowing\\\n            \\ you to segment your audience. You can also just use the pairs as another\\\n            \\ way to tag and categorize your videos.\\n}; \\n\\n// Video\\nconst result\\\n            \\ = await client.videos.create(videoCreationPayload);\\n\"\n        - language: php\n          code: |\n            \u003c?php\n\n            use ApiVideo\\Client\\Model\\Metadata;\n            use ApiVideo\\Client\\Model\\VideoCreationPayload;\n\n            require __DIR__ . '/vendor/autoload.php';\n\n            $httpClient = new \\Symfony\\Component\\HttpClient\\Psr18Client();\n            $client = new \\ApiVideo\\Client(\n                                'https://sandbox.api.video',\n                                'YOUR_API_TOKEN',\n                                $httpClient\n                            );\n\n            $myVideo = $client-\u003evideos()-\u003ecreate((new VideoCreationPayload())\n                -\u003esetTitle('Video B')\n                -\u003esetTags(array(\"TAG1\", \"TAG2\"))\n                -\u003esetMetadata(array(\n                    new Metadata(['key' =\u003e 'key1', 'value' =\u003e 'key1value1']),\n                    new Metadata(['key' =\u003e 'key2', 'value' =\u003e 'key2value1']))));\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.video_creation_payload import VideoCreationPayload\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.video import Video\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_creation_payload = VideoCreationPayload(\n                    title=\"Maths video\",\n                    description=\"A video about string theory.\",\n                    source=\"https://www.myvideo.url.com/video.mp4\",\n                    public=True,\n                    panoramic=False,\n                    mp4_support=True,\n                    player_id=\"pl45KFKdlddgk654dspkze\",\n                    tags=[\"maths\", \"string theory\", \"video\"],\n                    metadata=[\n                        Metadata(\n                            key=\"Color\",\n                            value=\"Green\",\n                        ),\n                    ],\n                ) # VideoCreationPayload | video to create\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Create a video\n                    api_response = api_instance.create(video_creation_payload)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003ecreate: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    VideosApi apiInstance =\\\n            \\ client.videos();\\n    \\n    VideoCreationPayload videoCreationPayload\\\n            \\ = new VideoCreationPayload(); // video to create\\n    videoCreationPayload.setTitle(\\\"\\\n            Maths video\\\"); // The title of your new video.\\n    videoCreationPayload.setDescription(\\\"\\\n            A video about string theory.\\\"); // A brief description of your video.\\n\\\n            \\    videoCreationPayload.setSource(\\\"https://www.myvideo.url.com/video.mp4\\\"\\\n            ); // If you add a video already on the web, this is where you enter the\\\n            \\ url for the video.\\n    videoCreationPayload.setPublic(true); // Whether\\\n            \\ your video can be viewed by everyone, or requires authentication to\\\n            \\ see it. A setting of false will require a unique token for each view.\\n\\\n            \\    videoCreationPayload.setPanoramic(false); // Indicates if your video\\\n            \\ is a 360/immersive video.\\n    videoCreationPayload.setMp4Support(true);\\\n            \\ // Enables mp4 version in addition to streamed version.\\n    videoCreationPayload.setPlayerId(\\\"\\\n            pl45KFKdlddgk654dspkze\\\"); // The unique identification number for your\\\n            \\ video player.\\n    videoCreationPayload.setTags(Arrays.asList(\\\"maths\\\"\\\n            , \\\"string theory\\\", \\\"video\\\")); // A list of tags you want to use to\\\n            \\ describe your video.\\n    videoCreationPayload.setMetadata(Collections.\u003cMetadata\u003eemptyList());\\\n            \\ // A list of key value pairs that you use to provide metadata for your\\\n            \\ video. These pairs can be made dynamic, allowing you to segment your\\\n            \\ audience. You can also just use the pairs as another way to tag and\\\n            \\ categorize your videos.\\n\\n\\n    try {\\n      Video result = apiInstance.create(videoCreationPayload);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling VideosApi#create\\\");\\n\\\n            \\      System.err.println(\\\"Status code: \\\" + e.getCode());\\n      System.err.println(\\\"\\\n            Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"Response headers:\\\n            \\ \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n \\\n            \\ }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class createExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoCreationPayload = new VideoCreationPayload(); // VideoCreationPayload | video to create\n                        var apiVideosInstance = apiInstance.Videos();\n                        try\n                        {\n                            // Create a video\n                            Video result = apiVideosInstance.create(videoCreationPayload);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling VideosApi.create: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-contentType: application/json\n      x-accepts: application/json\n  /videos/{videoId}/source:\n    post:\n      description: \"To upload a video to the videoId you created. Replace {videoId}\\\n        \\ with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4\\\n        \\ with the path to the video you'd like to upload. You can only upload your\\\n        \\ video to the videoId once.\\nWe offer 2 types of upload: \\n* Regular upload\\\n        \\ \\n* Progressive upload\\nThe latter allows you to split a video source into\\\n        \\ X chunks and send those chunks independently (concurrently or sequentially).\\\n        \\ The 2 main goals for our users are to\\n  * allow the upload of video sources\\\n        \\ \u003e 200 MiB (200 MiB = the max. allowed file size for regular upload)\\n  *\\\n        \\ allow to send a video source \\\"progressively\\\", i.e., before before knowing\\\n        \\ the total size of the video.\\n  Once all chunks have been sent, they are\\\n        \\ reaggregated to one source file. The video source is considered as \\\"completely\\\n        \\ sent\\\" when the \\\"last\\\" chunk is sent (i.e., the chunk that \\\"completes\\\"\\\n        \\ the upload).\\n```bash\\ncurl https://ws.api.video/videos/{videoId}/source\\\n        \\ \\\\\\n  -H 'Authorization: Bearer {access_token}' \\\\\\n  -F file=@/path/to/video.mp4\\n\\\n        \\n  ```\\nTutorials using [video upload](https://api.video/blog/endpoints/video-upload).\"\n      operationId: POST_videos-videoId-source\n      parameters:\n      - description: Enter the videoId you want to use to upload your video.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: \"Content-Range can be used if you want to split your file. You\\\n          \\ can do this by parts, or by chunk.\\n* If you split your file by parts\\\n          \\ (recommended option), the `Content-Range` header value must match the\\\n          \\ following pattern: `part \u003cpart\u003e/\u003ctotal_parts\u003e`:\\n  * `\u003cpart\u003e` is a positive\\\n          \\ integer representing the part number. The first sequential part number\\\n          \\ is always 1.\\n  * `\u003ctotal_parts\u003e` is a positive integer representing the\\\n          \\ total parts of the video source. It can also be `*` if or as long as it\\\n          \\ is unknown. Technically, this value is required only one time and cannot\\\n          \\ differ in several requests.\\n* If you split your file by bytes, bear in\\\n          \\ mind byte ranges are inclusive, meaning that bytes 0-5242879 represents\\\n          \\ the first 5,242,880 bytes in a file or object. Also, the Content-Range\\\n          \\ header value must match the following pattern: `bytes \u003cfrom_byte\u003e-\u003cto_byte\u003e/\u003ctotal_bytes\u003e`:\\n\\\n          \\  * `\u003cfrom_byte\u003e` is a positive integer or 0. It represents the range start\\\n          \\ (aka lower bound), i.e., the first byte of the chunk compared to the total\\\n          \\ bytes composing the full video source. The first sequential range always\\\n          \\ starts at 0.\\n  * `\u003cto_byte\u003e` is a positive integer representing the range\\\n          \\ end (aka upper bound), i.e., the last byte of the chunk compared to the\\\n          \\ total bytes composing the full video source.\\n  * `\u003ctotal_bytes\u003e` is a\\\n          \\ positive integer representing the total bytes composing the full video\\\n          \\ source. It can also be `*` if or as long as it is unknown. Technically,\\\n          \\ this value is required only one time and cannot differ in several requests.\\n\\\n          * Ordering and chunk or part size\\n  * The order in which the chunks are\\\n          \\ received on our side does not matter. \\n    * Example: `part 3/*` then\\\n          \\ `part 2/*` then `part 1/3` works.\\n  * The chunks can be sent concurrently.\\\n          \\ We have a lock mechanism to ensure they are still technically processed\\\n          \\ one by one to ensure the \\\"completion\\\" check behaves as expected.\\n \\\n          \\ * The only chunk that can be smaller than our minimum allowed chunk size\\\n          \\ (5 MiB) is the last sequential one (i.e., the last sequential range for\\\n          \\ the \\\"byte-range\\\" system and the last part for the \\\"part\\\" system.\\n\\\n          \\    * For instance, if your video is 10.5 MiB big, your last chunk would\\\n          \\ be 500 KiB, and that would work. \\n    * Another example is if your video\\\n          \\ is 2 MiB big, then your first and last chunk will be 2MiB and that will\\\n          \\ work as well.\\n\"\n        example: bytes 209715200-419430399/524288000 OR part 2/3\n        explode: false\n        in: header\n        name: Content-Range\n        required: false\n        schema:\n          pattern: /(?:bytes (?\u003cfrom\u003e\\d+)-(?\u003cto\u003e\\d+)|part (?\u003cpart\u003e\\d+))\\/(?\u003ctotal\u003e\\d+|\\*)/\n          type: string\n        style: simple\n        x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/video-upload-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    title: Maths video\n                    description: An amazing video explaining the string theory.\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    playerId: pl45KFKdlddgk654dspkze\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598+00:00\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/filealreadyuploaded\n                    title: The source of the video is already uploaded.\n                    name: file\n                    status: 400\n                    problems:\n                    - type: https://docs.api.video/docs/filealreadyuploaded\n                      title: The source of the video is already uploaded.\n                      name: file\n                    - type: https://docs.api.video/docs/filealreadyuploaded\n                      title: The video xxxx has already been uploaded.\n                      name: video\n                    - type: https://docs.api.video/docs/filemissing\n                      title: There is no uploaded file in the request.\n                      name: file\n                    - type: https://docs.api.video/docs/multiplefilesuploaded\n                      title: There is more than one uploaded file in the request.\n                      name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a video\n      tags:\n      - Videos\n      x-client-action: upload\n      x-client-chunk-upload: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            \\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n\\n      videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" \\n    // string\\\n            \\ | Enter the videoId you want to use to upload your video.\\n      file\\\n            \\ := os.NewFile(1234, \\\"some_file\\\") \\n    // *os.File | The path to the\\\n            \\ video you would like to upload. The path must be local. If you want\\\n            \\ to use a video from an online source, you must use the \\\\\\\\\\\\\\\"/videos\\\\\\\n            \\\\\\\\\\\" endpoint and add the \\\\\\\\\\\\\\\"source\\\\\\\\\\\\\\\" parameter when you\\\n            \\ create a new video.\\n    \\n    \\n      res, err := client.Videos.UploadFile(videoId,\\\n            \\ file)\\n    \\n      // you can also use a Reader instead of a File:\\n\\\n            \\      // client.Videos.Upload(videoId, fileName, fileReader, fileSize)\\n\\\n            \\    \\n      if err != nil {\\n          fmt.Fprintf(os.Stderr, \\\"Error\\\n            \\ when calling `Videos.Upload``: %v\\\\n\\\", err)\\n      }\\n      // response\\\n            \\ from `Upload`: Video\\n      fmt.Fprintf(os.Stdout, \\\"Response from `Videos.Upload`:\\\n            \\ %v\\\\n\\\", res)\\n    }\\n      }\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n      const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n      \\n      const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Enter\\\n            \\ the videoId you want to use to upload your video.\\n      const file\\\n            \\ = 'BINARY_DATA_HERE'; // The path to the video you would like to upload.\\\n            \\ The path must be local. If you want to use a video from an online source,\\\n            \\ you must use the \\\\\\\\\\\\\\\"/videos\\\\\\\\\\\\\\\" endpoint and add the \\\\\\\\\\\\\\\n            \\\"source\\\\\\\\\\\\\\\" parameter when you create a new video.\\n      \\n    \\\n            \\  // Video\\n      const result = await client.videos.upload(videoId,\\\n            \\ file);\\n      console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: php\n          code: |\n            \u003c?php\n\n            use ApiVideo\\Client\\Model\\VideoCreationPayload;\n\n            require __DIR__ . '/vendor/autoload.php';\n\n            $httpClient = new \\Symfony\\Component\\HttpClient\\Psr18Client();\n            $client = new \\ApiVideo\\Client(\n                                'https://sandbox.api.video',\n                                'YOUR_API_TOKEN',\n                                $httpClient\n                            );\n\n            // create a new video \u0026 upload a video file\n            $myVideo = $client-\u003evideos()-\u003ecreate((new VideoCreationPayload())-\u003esetTitle('Uploaded video'));\n            $client-\u003evideos()-\u003eupload($myVideo-\u003egetVideoId(), new SplFileObject(__DIR__ . '/../../../tests/resources/558k.mp4'));\n\n            // create a new video \u0026 upload a video file using progressive upload (the file is uploaded by parts)\n            $myVideo2 = $client-\u003evideos()-\u003ecreate((new VideoCreationPayload())-\u003esetTitle('Uploaded video (progressive upload)'));\n\n            $progressiveSession = $client-\u003evideos()-\u003ecreateUploadProgressiveSession($myVideo2-\u003egetVideoId());\n\n            $progressiveSession-\u003euploadPart(new SplFileObject(__DIR__ . '/../../../tests/resources/10m.mp4.part.a'));\n            $progressiveSession-\u003euploadPart(new SplFileObject(__DIR__ . '/../../../tests/resources/10m.mp4.part.b'));\n\n            $progressiveSession-\u003euploadLastPart(new SplFileObject(__DIR__ . '/../../../tests/resources/10m.mp4.part.c'));\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.video import Video\n            from apivideo.configuration import Configuration\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            # When uploading a file you can change the chunk size (in octet)\n            configuration = Configuration(chunk_size=10 * 1024 * 1024)\n            with apivideo.AuthenticatedApiClient(__API_KEY__, configuration=configuration) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | Enter the videoId you want to use to upload your video.\n                file = open('/path/to/file', 'rb') # file_type | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\\\\\"/videos\\\\\\\" endpoint and add the \\\\\\\"source\\\\\\\" parameter when you create a new video.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a video\n                    api_response = api_instance.upload(video_id, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003eupload: %s\\n\" % e)\n        - language: java\n          code: |\n            //dependency addition instructions\n            //https://github.com/apivideo/api.video-java-client\n            // Import classes:\n            import video.api.client.ApiVideoClient;\n            import video.api.client.api.ApiException;\n            import video.api.client.api.models.*;\n            import video.api.client.api.clients.VideosApi;\n            import java.util.*;\n\n            public class Example {\n              public static void main(String[] args) {\n                ApiVideoClient client = new ApiVideoClient(\"YOUR_API_TOKEN\");\n                // if you rather like to use the sandbox environment:\n                // ApiVideoClient client = new ApiVideoClient(\"YOU_SANDBOX_API_TOKEN\", ApiVideoClient.Environment.SANDBOX);\n\n                VideosApi apiInstance = client.videos();\n\n                String videoId = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\"; // Enter the videoId you want to use to upload your video.\n                File file = new File(\"/path/to/file\"); // The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\\\\\"/videos\\\\\\\" endpoint and add the \\\\\\\"source\\\\\\\" parameter when you create a new video.\n\n                try {\n                  Video result = apiInstance.upload(videoId, file);\n                  System.out.println(result);\n                } catch (ApiException e) {\n                  System.err.println(\"Exception when calling VideosApi#upload\");\n                  System.err.println(\"Status code: \" + e.getCode());\n                  System.err.println(\"Reason: \" + e.getMessage());\n                  System.err.println(\"Response headers: \" + e.getResponseHeaders());\n                  e.printStackTrace();\n                }\n              }\n            }\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class uploadExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | Enter the videoId you want to use to upload your video.\n                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\\\\\"/videos\\\\\\\" endpoint and add the \\\\\\\"source\\\\\\\" parameter when you create a new video.\n                        var apiVideosInstance = apiInstance.Videos();\n                        try\n                        {\n                            // Upload a video\n                            Video result = apiVideosInstance.upload(videoId, file);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling VideosApi.upload: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /watermarks:\n    get:\n      description: List all watermarks. A watermark is a static image overlapping\n        a video used as a \"stamp\" to limit leetching.\n      operationId: LIST-watermarks\n      parameters:\n      - description: 'Allowed: createdAt. You can search by the time watermark were\n          created at.'\n        example: createdAt\n        explode: true\n        in: query\n        name: sortBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Allowed: asc, desc. asc is ascending and sorts from A to Z.\n          desc is descending and sorts from Z to A.'\n        example: asc\n        explode: true\n        in: query\n        name: sortOrder\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i\n                      createdAt: 2019-12-16T08:25:51+00:00\n                    - watermarkId: watermark_3BWC2L5MTQwxGkuxKjzh7g\n                      createdAt: 2019-12-16T08:25:51+00:00\n                    pagination:\n                      currentPage: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 11\n                      currentPageItems: 11\n                      links:\n                      - rel: self\n                        uri: https://ws.api.video/watermarks?currentPage=1\n                      - rel: first\n                        uri: https://ws.api.video/watermarks?currentPage=1\n                      - rel: last\n                        uri: https://ws.api.video/watermarks?currentPage=1\n              schema:\n                $ref: '#/components/schemas/watermarks-list-response'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    title: This parameter is out of the allowed range of values.\n                    name: page\n                    status: 400\n                    range:\n                      min: 1\n                    problems:\n                    - title: This parameter is out of the allowed range of values.\n                      name: page\n                      range:\n                        min: 1\n                    - title: This parameter is out of the allowed range of values.\n                      name: pageSize\n                      range:\n                        min: 10\n                        max: 100\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: List all watermarks\n      tags:\n      - Watermarks\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-accepts: application/json\n    post:\n      description: Create a new watermark by uploading a .jpg or a .png image. A watermark\n        is a static image overlapping a video used as a \"stamp\" to limit leetching.\n      operationId: POST_watermark\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/watermark-upload-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i\n                    createdAt: 2020-03-03T12:52:03.085+00:00\n              schema:\n                $ref: '#/components/schemas/watermark'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/fileextension\n                    title: Only [jpeg, jpg, JPG, JPEG, png, PNG] extensions are supported.\n                    name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Upload a watermark\n      tags:\n      - Watermarks\n      x-client-action: upload\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            \\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n\\n    videoId := \\\"videoId_example\\\" // string | Unique identifier\\\n            \\ of the chosen video \\n    file := os.NewFile(1234, \\\"some_file\\\") //\\\n            \\ *os.File | The .jpg image to be added as a thumbnail.\\n\\n\\n    res,\\\n            \\ err := client.Videos.UploadThumbnailFile(videoId, file)\\n\\n    // you\\\n            \\ can also use a Reader instead of a File:\\n    // client.Videos.UploadThumbnail(videoId,\\\n            \\ fileName, fileReader)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `Videos.UploadThumbnail``: %v\\\\n\\\", err)\\n    }\\n\\\n            \\    // response from `UploadThumbnail`: Video\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.UploadThumbnail`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const videoId = 'videoId_example'; // Unique identifier\\\n            \\ of the chosen video \\n        const file = 'BINARY_DATA_HERE'; // The\\\n            \\ .jpg image to be added as a thumbnail.\\n\\n        // Video\\n       \\\n            \\ const result = await client.videos.uploadThumbnail(videoId, file);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            \\nimport apivideo\\nfrom apivideo.api import videos_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.not_found import NotFound\\nfrom\\\n            \\ apivideo.model.video import Video\\nfrom pprint import pprint\\n\\n# Enter\\\n            \\ a context with an instance of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = videos_api.VideosApi(api_client)\\n    video_id = \\\"videoId_example\\\"\\\n            \\ # str | Unique identifier of the chosen video \\n    file = open('/path/to/file',\\\n            \\ 'rb') # file_type | The .jpg image to be added as a thumbnail.\\n\\n \\\n            \\   # example passing only required values which don't have defaults set\\n\\\n            \\    try:\\n        # Upload a thumbnail\\n        api_response = api_instance.upload_thumbnail(video_id,\\\n            \\ file)\\n        pprint(api_response)\\n    except apivideo.ApiException\\\n            \\ as e:\\n        print(\\\"Exception when calling VideosApi-\u003eupload_thumbnail:\\\n            \\ %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n public static void main(String[]\\\n            \\ args) {\\n   ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n   // if you rather like to use the sandbox environment:\\n   // ApiVideoClient\\\n            \\ client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\", ApiVideoClient.Environment.SANDBOX);\\n\\\n            \\n   VideosApi apiInstance = client.videos();\\n\\n   String videoId = \\\"\\\n            videoId_example\\\"; // Unique identifier of the chosen video \\n   File\\\n            \\ file = new File(\\\"/path/to/file\\\"); // The .jpg image to be added as\\\n            \\ a thumbnail.\\n\\n   try {\\n     Video result = apiInstance.uploadThumbnail(videoId,\\\n            \\ file);\\n     System.out.println(result);\\n   } catch (ApiException e)\\\n            \\ {\\n     System.err.println(\\\"Exception when calling VideosApi#uploadThumbnail\\\"\\\n            );\\n     System.err.println(\\\"Status code: \\\" + e.getCode());\\n     System.err.println(\\\"\\\n            Reason: \\\" + e.getMessage());\\n     System.err.println(\\\"Response headers:\\\n            \\ \\\" + e.getResponseHeaders());\\n     e.printStackTrace();\\n   }\\n }\\n\\\n            }\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\n\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class uploadThumbnailExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = videoId_example;  // string | Unique identifier\\\n            \\ of the chosen video \\n            var file = BINARY_DATA_HERE;  // System.IO.Stream\\\n            \\ | The .jpg image to be added as a thumbnail.\\n            var apiVideosInstance\\\n            \\ = apiInstance.Videos();\\n            try\\n            {\\n          \\\n            \\      // Upload a thumbnail\\n                Video result = apiVideosInstance.uploadThumbnail(videoId,\\\n            \\ file);\\n                Debug.WriteLine(result);\\n            }\\n  \\\n            \\          catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling VideosApi.uploadThumbnail: \\\" + e.Message );\\n\\\n            \\                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n      \\\n            \\          Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n\\\n            }\\n\"\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /watermarks/{watermarkId}:\n    delete:\n      description: Delete a watermark. A watermark is a static image overlapping a\n        video used as a \"stamp\" to limit leetching.\n      operationId: DELETE_watermark\n      parameters:\n      - description: The watermark ID for the watermark you want to delete.\n        example: watermark_1BWr2L5MTQwxGkuxKjzh6i\n        explode: false\n        in: path\n        name: watermarkId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: watermarkId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a watermark\n      tags:\n      - Watermarks\n      x-client-action: delete\n      x-accepts: application/json\n  /videos/{videoId}/thumbnail:\n    patch:\n      description: |-\n        Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.\n        Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).\n      operationId: PATCH_videos-videoId-thumbnail\n      parameters:\n      - description: Unique identifier of the video you want to add a thumbnail to,\n          where you use a section of your video as the thumbnail.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/video-thumbnail-pick-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining string theory\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598+00:00\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Pick a thumbnail\n      tags:\n      - Videos\n      x-client-action: pickThumbnail\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | Unique identifier of the video you want to add a thumbnail to, where\\\n            \\ you use a section of your video as the thumbnail.\\n    videoThumbnailPickPayload\\\n            \\ := *apivideosdk.NewVideoThumbnailPickPayload(\\\"Timecode_example\\\") //\\\n            \\ VideoThumbnailPickPayload | \\n\\n    \\n    res, err := client.Videos.PickThumbnail(videoId,\\\n            \\ videoThumbnailPickPayload)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `Videos.PickThumbnail``: %v\\\\n\\\", err)\\n    }\\n\\\n            \\    // response from `PickThumbnail`: Video\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.PickThumbnail`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n  try {\\n\\\n            \\      const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n      const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // Unique identifier\\\n            \\ of the video you want to add a thumbnail to, where you use a section\\\n            \\ of your video as the thumbnail.\\n      const videoThumbnailPickPayload\\\n            \\ = {\\n      timecode: \\\"timecode_example\\\", \\n      // Frame in video\\\n            \\ to be used as a placeholder before the video plays. \\n      //Example:\\\n            \\ '\\\\\\\"00:01:00.000\\\\\\\" for 1 minute into the video.' Valid Patterns:\\\n            \\ \\\\\\\"hh:mm:ss.ms\\\\\\\" \\\\\\\"hh:mm:ss:frameNumber\\\\\\\" \\\\\\\"124\\\\\\\" (integer\\\n            \\ value is reported as seconds) If selection is out of range, \\\\\\\"00:00:00.00\\\\\\\n            \\\" will be chosen.\\n  }; \\n\\n      // Video\\n      const result = await\\\n            \\ client.videos.pickThumbnail(videoId, videoThumbnailPickPayload);\\n \\\n            \\     console.log(result);\\n  } catch (e) {\\n      console.error(e);\\n\\\n            \\  }\\n })();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import videos_api\\nfrom apivideo.model.video_thumbnail_pick_payload\\\n            \\ import VideoThumbnailPickPayload\\nfrom apivideo.model.not_found import\\\n            \\ NotFound\\nfrom apivideo.model.video import Video\\nfrom pprint import\\\n            \\ pprint\\n\\n# Enter a context with an instance of the API client\\nwith\\\n            \\ apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n    # Create\\\n            \\ an instance of the API class\\n    api_instance = videos_api.VideosApi(api_client)\\n\\\n            \\    video_id = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" # str | Unique identifier\\\n            \\ of the video you want to add a thumbnail to, where you use a section\\\n            \\ of your video as the thumbnail.\\n    video_thumbnail_pick_payload =\\\n            \\ VideoThumbnailPickPayload(\\n        timecode=\\\"04:80:72\\\",\\n    ) #\\\n            \\ VideoThumbnailPickPayload | \\n\\n    # example passing only required\\\n            \\ values which don't have defaults set\\n    try:\\n        # Pick a thumbnail\\n\\\n            \\        api_response = api_instance.pick_thumbnail(video_id, video_thumbnail_pick_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling VideosApi-\u003epick_thumbnail: %s\\\\\\\n            n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    VideosApi apiInstance =\\\n            \\ client.videos();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // Unique identifier of the video you want to add a thumbnail to, where\\\n            \\ you use a section of your video as the thumbnail.\\n    VideoThumbnailPickPayload\\\n            \\ videoThumbnailPickPayload = new VideoThumbnailPickPayload(); // \\n \\\n            \\   videoThumbnailPickPayload.setTimecode(\\\"null\\\"); // Frame in video\\\n            \\ to be used as a placeholder before the video plays.\\nExample: \u0026#39;\u0026quot;00:01:00.000\u0026quot;\\\n            \\ for 1 minute into the video.\u0026#39;\\nValid Patterns:\\n\u0026quot;hh:mm:ss.ms\u0026quot;\\n\\\n            \u0026quot;hh:mm:ss:frameNumber\u0026quot;\\n\u0026quot;124\u0026quot; (integer value is reported\\\n            \\ as seconds)\\nIf selection is out of range, \u0026quot;00:00:00.00\u0026quot; will\\\n            \\ be chosen.\\n\\n\\n    try {\\n      Video result = apiInstance.pickThumbnail(videoId,\\\n            \\ videoThumbnailPickPayload);\\n      System.out.println(result);\\n   \\\n            \\ } catch (ApiException e) {\\n      System.err.println(\\\"Exception when\\\n            \\ calling VideosApi#pickThumbnail\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}        \\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class pickThumbnailExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | Unique\\\n            \\ identifier of the video you want to add a thumbnail to, where you use\\\n            \\ a section of your video as the thumbnail.\\n            var videoThumbnailPickPayload\\\n            \\ = new VideoThumbnailPickPayload(); // VideoThumbnailPickPayload | \\n\\\n            \\            var apiVideosInstance = apiInstance.Videos();\\n         \\\n            \\   try\\n            {\\n                // Pick a thumbnail\\n        \\\n            \\        Video result = apiVideosInstance.pickThumbnail(videoId, videoThumbnailPickPayload);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling VideosApi.pickThumbnail: \\\" + e.Message );\\n  \\\n            \\              Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n        \\\n            \\        Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n\\\n            }              \\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n    post:\n      description: \"The thumbnail is the poster that appears in the player window\\\n        \\ before video playback begins.\\nThis endpoint allows you to upload an image\\\n        \\ for the thumbnail.\\nTo select a still frame from the video using a time\\\n        \\ stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail)\\\n        \\ to pick a time in the video. \\nNote: There may be a short delay before the\\\n        \\ new thumbnail is delivered to our CDN.\\nTutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).\"\n      operationId: POST_videos-videoId-thumbnail\n      parameters:\n      - description: 'Unique identifier of the chosen video '\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/video-thumbnail-upload-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining the string theory\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    createdAt: 2020-03-03T12:52:03.085+00:00\n                    publishedAt: 2020-07-14T23:36:18.598+00:00\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/fileextension\n                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.\n                    name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a thumbnail\n      tags:\n      - Videos\n      x-client-action: uploadThumbnail\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            \\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n\\n    videoId := \\\"videoId_example\\\" // string | Unique identifier\\\n            \\ of the chosen video \\n    file := os.NewFile(1234, \\\"some_file\\\") //\\\n            \\ *os.File | The .jpg image to be added as a thumbnail.\\n\\n\\n    res,\\\n            \\ err := client.Videos.UploadThumbnailFile(videoId, file)\\n\\n    // you\\\n            \\ can also use a Reader instead of a File:\\n    // client.Videos.UploadThumbnail(videoId,\\\n            \\ fileName, fileReader)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `Videos.UploadThumbnail``: %v\\\\n\\\", err)\\n    }\\n\\\n            \\    // response from `UploadThumbnail`: Video\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.UploadThumbnail`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const videoId = 'videoId_example'; // Unique identifier\\\n            \\ of the chosen video \\n        const file = 'BINARY_DATA_HERE'; // The\\\n            \\ .jpg image to be added as a thumbnail.\\n\\n        // Video\\n       \\\n            \\ const result = await client.videos.uploadThumbnail(videoId, file);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            \\nimport apivideo\\nfrom apivideo.api import videos_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.not_found import NotFound\\nfrom\\\n            \\ apivideo.model.video import Video\\nfrom pprint import pprint\\n\\n# Enter\\\n            \\ a context with an instance of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = videos_api.VideosApi(api_client)\\n    video_id = \\\"videoId_example\\\"\\\n            \\ # str | Unique identifier of the chosen video \\n    file = open('/path/to/file',\\\n            \\ 'rb') # file_type | The .jpg image to be added as a thumbnail.\\n\\n \\\n            \\   # example passing only required values which don't have defaults set\\n\\\n            \\    try:\\n        # Upload a thumbnail\\n        api_response = api_instance.upload_thumbnail(video_id,\\\n            \\ file)\\n        pprint(api_response)\\n    except apivideo.ApiException\\\n            \\ as e:\\n        print(\\\"Exception when calling VideosApi-\u003eupload_thumbnail:\\\n            \\ %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n public static void main(String[]\\\n            \\ args) {\\n   ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n   // if you rather like to use the sandbox environment:\\n   // ApiVideoClient\\\n            \\ client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\", ApiVideoClient.Environment.SANDBOX);\\n\\\n            \\n   VideosApi apiInstance = client.videos();\\n\\n   String videoId = \\\"\\\n            videoId_example\\\"; // Unique identifier of the chosen video \\n   File\\\n            \\ file = new File(\\\"/path/to/file\\\"); // The .jpg image to be added as\\\n            \\ a thumbnail.\\n\\n   try {\\n     Video result = apiInstance.uploadThumbnail(videoId,\\\n            \\ file);\\n     System.out.println(result);\\n   } catch (ApiException e)\\\n            \\ {\\n     System.err.println(\\\"Exception when calling VideosApi#uploadThumbnail\\\"\\\n            );\\n     System.err.println(\\\"Status code: \\\" + e.getCode());\\n     System.err.println(\\\"\\\n            Reason: \\\" + e.getMessage());\\n     System.err.println(\\\"Response headers:\\\n            \\ \\\" + e.getResponseHeaders());\\n     e.printStackTrace();\\n   }\\n }\\n\\\n            }\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\n\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class uploadThumbnailExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = videoId_example;  // string | Unique identifier\\\n            \\ of the chosen video \\n            var file = BINARY_DATA_HERE;  // System.IO.Stream\\\n            \\ | The .jpg image to be added as a thumbnail.\\n            var apiVideosInstance\\\n            \\ = apiInstance.Videos();\\n            try\\n            {\\n          \\\n            \\      // Upload a thumbnail\\n                Video result = apiVideosInstance.uploadThumbnail(videoId,\\\n            \\ file);\\n                Debug.WriteLine(result);\\n            }\\n  \\\n            \\          catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling VideosApi.uploadThumbnail: \\\" + e.Message );\\n\\\n            \\                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n      \\\n            \\          Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n\\\n            }\\n\"\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /videos/{videoId}:\n    delete:\n      description: If you do not need a video any longer, you can send a request to\n        delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).\n      operationId: DELETE-video\n      parameters:\n      - description: The video ID for the video you want to delete.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a video\n      tags:\n      - Videos\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n   \\\n            \\ apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\nfunc main()\\\n            \\ {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\").Build()\\n\\\n            \\    // if you rather like to use the sandbox environment:\\n    // client\\\n            \\ := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\").Build()\\n\\\n            \\        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string | The\\\n            \\ video ID for the video you want to delete.\\n    err := client.Videos.Delete(videoId)\\n\\\n            \\    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Videos.Delete``: %v\\\\n\\\", err)\\n    }\\n}  \\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The video ID for the video you want to delete.\n                    // void\n                    const result = await client.videos.delete(videoId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The video ID for the video you want to delete.\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a video\n                    api_instance.delete(video_id)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n  \\npublic class Example {\\n  public static void\\\n            \\ main(String[] args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"\\\n            YOUR_API_TOKEN\\\");\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n    \\n    VideosApi apiInstance\\\n            \\ = client.videos();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The video ID for the video you want to delete.\\n    \\n    try {\\n\\\n            \\      apiInstance.delete(videoId);\\n    } catch (ApiException e) {\\n\\\n            \\      System.err.println(\\\"Exception when calling VideosApi#delete\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class deleteExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\            var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The\\\n            \\ video ID for the video you want to delete.\\n            var apiVideosInstance\\\n            \\ = apiInstance.Videos();\\n            try\\n            {\\n          \\\n            \\      // Delete a video\\n                apiVideosInstance.delete(videoId);\\n\\\n            \\            }\\n            catch (ApiException  e)\\n            {\\n \\\n            \\               Debug.Print(\\\"Exception when calling VideosApi.delete:\\\n            \\ \\\" + e.Message );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n\\\n            \\                Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n} \\n\"\n      x-accepts: application/json\n    get:\n      description: This call provides the same JSON information provided on video\n        creation. For private videos, it will generate a unique token url. Use this\n        to retrieve any details you need about a video, or set up a private viewing\n        URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).\n      operationId: GET-video\n      parameters:\n      - description: The unique identifier for the video you want details about.\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining string theory\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 2019-12-16T08:25:51+00:00\n                    updatedAt: 2019-12-16T08:48:49+00:00\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show a video\n      tags:\n      - Videos\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"videoId_example\\\" // string | The\\\n            \\ unique identifier for the video you want details about.\\n\\n    \\n  \\\n            \\  res, err := client.Videos.Get(videoId)\\n\\n    if err != nil {\\n   \\\n            \\     fmt.Fprintf(os.Stderr, \\\"Error when calling `Videos.Get``: %v\\\\\\\n            n\\\", err)\\n    }\\n    // response from `Get`: Video\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Videos.Get`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'videoId_example'; // The unique identifier for the video you want details about.\n\n                    // Video\n                    const result = await client.videos.get(videoId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.video import Video\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_id = \"videoId_example\" # str | The unique identifier for the video you want details about.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show a video\n                    api_response = api_instance.get(video_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    VideosApi apiInstance =\\\n            \\ client.videos();\\n    \\n    String videoId = \\\"videoId_example\\\"; //\\\n            \\ The unique identifier for the video you want details about.\\n\\n    try\\\n            \\ {\\n      Video result = apiInstance.get(videoId);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling VideosApi#get\\\");\\n      System.err.println(\\\"Status code:\\\n            \\ \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}  \\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class getExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = videoId_example;  // string | The unique identifier\\\n            \\ for the video you want details about.\\n            var apiVideosInstance\\\n            \\ = apiInstance.Videos();\\n            try\\n            {\\n          \\\n            \\      // Show a video\\n                Video result = apiVideosInstance.get(videoId);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling VideosApi.get: \\\" + e.Message );\\n            \\\n            \\    Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n                Debug.Print(e.StackTrace);\\n\\\n            \\            }\\n        }\\n    }\\n} \\n\"\n      x-accepts: application/json\n    patch:\n      description: 'Use this endpoint to update the parameters associated with your\n        video. The video you are updating is determined by the video ID you provide\n        in the path. For each parameter you want to update, include the update in\n        the request body. NOTE: If you are updating an array, you must provide the\n        entire array as what you provide here overwrites what is in the system rather\n        than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).'\n      operationId: PATCH-video\n      parameters:\n      - description: The video ID for the video you want to delete.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/video-update-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4blUQJFrYWbaG44NChkH27\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining the string theory\n                    public: false\n                    panoramic: false\n                    mp4Support: true\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 2019-12-16T08:25:51+00:00\n                    updatedAt: 2019-12-16T08:48:49+00:00\n                    source:\n                      uri: /videos/vi4blUQJFrYWbaG44NChkH27/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/attributeinvalid\n                    title: This attribute must be a ISO-8601 date.\n                    name: scheduledAt\n                    status: 400\n                    problems:\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be a ISO-8601 date.\n                      name: scheduledAt\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be an array.\n                      name: tags\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be an array.\n                      name: metadata\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Update a video\n      tags:\n      - Videos\n      x-client-action: update\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The video ID for the video you want to delete.\\n    videoUpdatePayload\\\n            \\ := *apivideosdk.NewVideoUpdatePayload() // VideoUpdatePayload | \\n\\n\\\n            \\    \\n    res, err := client.Videos.Update(videoId, videoUpdatePayload)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Videos.Update``: %v\\\\n\\\", err)\\n    }\\n    // response from `Update`:\\\n            \\ Video\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Videos.Update`: %v\\\\\\\n            n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The video\\\n            \\ ID for the video you want to delete.\\n        const videoUpdatePayload\\\n            \\ = {\\n      playerId: \\\"pl4k0jvEUuaTdRAEjQ4Jfrgz\\\", // The unique ID\\\n            \\ for the player you want to associate with your video.\\n      title:\\\n            \\ \\\"title_example\\\", // The title you want to use for your video.\\n  \\\n            \\    description: \\\"A film about good books.\\\", // A brief description\\\n            \\ of the video.\\n      _public: true, // Whether the video is publicly\\\n            \\ available or not. False means it is set to private.\\n      panoramic:\\\n            \\ false, // Whether the video is a 360 degree or immersive video.\\n  \\\n            \\    mp4Support: true, // Whether the player supports the mp4 format.\\n\\\n            \\      tags: [\\\"maths\\\", \\\"string theory\\\", \\\"video\\\"], // A list of terms\\\n            \\ or words you want to tag the video with. Make sure the list includes\\\n            \\ all the tags you want as whatever you send in this list will overwrite\\\n            \\ the existing list for the video.\\n      metadata: null, // A list (array)\\\n            \\ of dictionaries where each dictionary contains a key value pair that\\\n            \\ describes the video. As with tags, you must send the complete list of\\\n            \\ metadata you want as whatever you send here will overwrite the existing\\\n            \\ metadata for the video.\\n    }; \\n\\n        // Video\\n        const\\\n            \\ result = await client.videos.update(videoId, videoUpdatePayload);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import videos_api\\nfrom apivideo.model.video_update_payload\\\n            \\ import VideoUpdatePayload\\nfrom apivideo.model.bad_request import BadRequest\\n\\\n            from apivideo.model.not_found import NotFound\\nfrom apivideo.model.video\\\n            \\ import Video\\nfrom pprint import pprint\\n\\n# Enter a context with an\\\n            \\ instance of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = videos_api.VideosApi(api_client)\\n    video_id = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            \\ # str | The video ID for the video you want to delete.\\n    video_update_payload\\\n            \\ = VideoUpdatePayload(\\n        player_id=\\\"pl4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ,\\n        title=\\\"title_example\\\",\\n        description=\\\"A film about\\\n            \\ good books.\\\",\\n        public=True,\\n        panoramic=False,\\n   \\\n            \\     mp4_support=True,\\n        tags=[\\\"maths\\\", \\\"string theory\\\", \\\"\\\n            video\\\"],\\n        metadata=[\\n            Metadata(\\n               \\\n            \\ key=\\\"Color\\\",\\n                value=\\\"Green\\\",\\n            ),\\n \\\n            \\       ],\\n    ) # VideoUpdatePayload | \\n\\n    # example passing only\\\n            \\ required values which don't have defaults set\\n    try:\\n        # Update\\\n            \\ a video\\n        api_response = api_instance.update(video_id, video_update_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling VideosApi-\u003eupdate: %s\\\\n\\\" % e)\\\n            \\              \\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    VideosApi apiInstance =\\\n            \\ client.videos();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The video ID for the video you want to delete.\\n    VideoUpdatePayload\\\n            \\ videoUpdatePayload = new VideoUpdatePayload(); // \\n    videoUpdatePayload.setPlayerId(\\\"\\\n            pl4k0jvEUuaTdRAEjQ4Jfrgz\\\"); // The unique ID for the player you want\\\n            \\ to associate with your video.\\n    videoUpdatePayload.setTitle(\\\"null\\\"\\\n            ); // The title you want to use for your video.\\n    videoUpdatePayload.setDescription(\\\"\\\n            A film about good books.\\\"); // A brief description of the video.\\n  \\\n            \\  videoUpdatePayload.setPublic(true); // Whether the video is publicly\\\n            \\ available or not. False means it is set to private.\\n    videoUpdatePayload.setPanoramic(false);\\\n            \\ // Whether the video is a 360 degree or immersive video.\\n    videoUpdatePayload.setMp4Support(true);\\\n            \\ // Whether the player supports the mp4 format.\\n    videoUpdatePayload.setTags(Arrays.asList(\\\"\\\n            maths\\\", \\\"string theory\\\", \\\"video\\\")); // A list of terms or words you\\\n            \\ want to tag the video with. Make sure the list includes all the tags\\\n            \\ you want as whatever you send in this list will overwrite the existing\\\n            \\ list for the video.\\n    videoUpdatePayload.setMetadata(Collections.\u003cMetadata\u003eemptyList());\\\n            \\ // A list (array) of dictionaries where each dictionary contains a key\\\n            \\ value pair that describes the video. As with tags, you must send the\\\n            \\ complete list of metadata you want as whatever you send here will overwrite\\\n            \\ the existing metadata for the video.\\n\\n\\n    try {\\n      Video result\\\n            \\ = apiInstance.update(videoId, videoUpdatePayload);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling VideosApi#update\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class updateExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The\\\n            \\ video ID for the video you want to delete.\\n            var videoUpdatePayload\\\n            \\ = new VideoUpdatePayload(); // VideoUpdatePayload | \\n            var\\\n            \\ apiVideosInstance = apiInstance.Videos();\\n            try\\n       \\\n            \\     {\\n                // Update a video\\n                Video result\\\n            \\ = apiVideosInstance.update(videoId, videoUpdatePayload);\\n         \\\n            \\       Debug.WriteLine(result);\\n            }\\n            catch (ApiException\\\n            \\  e)\\n            {\\n                Debug.Print(\\\"Exception when calling\\\n            \\ VideosApi.update: \\\" + e.Message );\\n                Debug.Print(\\\"\\\n            Status Code: \\\"+ e.ErrorCode);\\n                Debug.Print(e.StackTrace);\\n\\\n            \\            }\\n        }\\n    }\\n}\\n\"\n        - language: php\n          code: |\n            \u003c?php\n\n            use ApiVideo\\Client\\Model\\Metadata;\n            use ApiVideo\\Client\\Model\\VideoUpdatePayload;\n\n            require __DIR__ . '/../../../vendor/autoload.php';\n\n            $httpClient = new \\Symfony\\Component\\HttpClient\\Psr18Client();\n            $client = new \\ApiVideo\\Client(\n                                'https://sandbox.api.video',\n                                'YOUR_API_TOKEN',\n                                $httpClient\n                            );\n\n            $client-\u003evideos()-\u003eupdate(\"vi6DEWhlgoHU3Ig5tgPlYkBc\", (new VideoUpdatePayload())\n                -\u003esetTitle(\"The new title\")\n                -\u003esetPublic(false)\n                -\u003esetDescription(\"A new description\")\n                -\u003esetTags([\"tag1\", \"tag2\"])\n                -\u003esetMetadata(array(\n                    new Metadata([\"key\" =\u003e \"aa\", 'value' =\u003e \"bb\"]),\n                    new Metadata([\"key\" =\u003e \"aa2\", 'value' =\u003e \"bb2\"]))));\n      x-contentType: application/json\n      x-accepts: application/json\n  /videos/{videoId}/status:\n    get:\n      description: This API provides upload status \u0026 encoding status to determine\n        when the video is uploaded or ready to playback. Once encoding is completed,\n        the response also lists the available stream qualities. Tutorials using [video\n        status](https://api.video/blog/endpoints/video-status).\n      operationId: GET-video-status\n      parameters:\n      - description: The unique identifier for the video you want the status for.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    ingest:\n                      status: uploaded\n                      filesize: 273579401\n                      receivedBytes:\n                      - to: 134217727\n                        from: 0\n                        total: 273579401\n                      - to: 268435455\n                        from: 134217728\n                        total: 273579401\n                      - to: 273579400\n                        from: 268435456\n                        total: 273579401\n                    encoding:\n                      playable: true\n                      qualities:\n                      - quality: 360p\n                        status: encoded\n                      - quality: 480p\n                        status: encoded\n                      - quality: 720p\n                        status: encoded\n                      - quality: 1080p\n                        status: encoding\n                      - quality: 2160p\n                        status: waiting\n                      metadata:\n                        width: 424\n                        height: 240\n                        bitrate: 411.218\n                        duration: 4176\n                        framerate: 24\n                        samplerate: 48000\n                        videoCodec: h264\n                        audioCodec: aac\n                        aspectRatio: 16/9\n              schema:\n                $ref: '#/components/schemas/video-status'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show video status\n      tags:\n      - Videos\n      x-client-action: getStatus\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            \\ package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n\\\n            \\    apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The unique identifier for the video you want the status for.\\n\\n \\\n            \\   \\n    res, err := client.Videos.GetStatus(videoId)\\n\\n    if err !=\\\n            \\ nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `Videos.GetStatus``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `GetStatus`: VideoStatus\\n\\\n            \\    fmt.Fprintf(os.Stdout, \\\"Response from `Videos.GetStatus`: %v\\\\n\\\"\\\n            , res)\\n}             \\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video you want the status for.\n\n                    // VideoStatus\n                    const result = await client.videos.getStatus(videoId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import videos_api\n            from apivideo.model.video_status import VideoStatus\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = videos_api.VideosApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the video you want the status for.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show video status\n                    api_response = api_instance.get_status(video_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling VideosApi-\u003eget_status: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.VideosApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    VideosApi apiInstance =\\\n            \\ client.videos();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the video you want the status for.\\n\\n\\\n            \\    try {\\n      VideoStatus result = apiInstance.getStatus(videoId);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling VideosApi#getStatus\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getStatusExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want the status for.\n                        var apiVideosInstance = apiInstance.Videos();\n                        try\n                        {\n                            // Show video status\n                            VideoStatus result = apiVideosInstance.getStatus(videoId);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling VideosApi.getStatus: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n  /upload-tokens:\n    get:\n      description: |-\n        A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.\n        Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).\n      operationId: GET_upload-tokens\n      parameters:\n      - description: 'Allowed: createdAt, ttl. You can use these to sort by when a\n          token was created, or how much longer the token will be active (ttl - time\n          to live). Date and time is presented in ISO-8601 format.'\n        example: ttl\n        explode: true\n        in: query\n        name: sortBy\n        required: false\n        schema:\n          enum:\n          - createdAt\n          - ttl\n          type: string\n        style: form\n      - description: 'Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0\n          or Z-A.'\n        example: asc\n        explode: true\n        in: query\n        name: sortOrder\n        required: false\n        schema:\n          enum:\n          - asc\n          - desc\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - token: to37YfoPDRR2pcDKa6LsUE0M\n                      ttl: 3600\n                      createdAt: 2020-12-02T10:26:46+00:00\n                      expiresAt: 2020-12-02T11:26:46+00:00\n                    - token: to1W3ZS9PdUBZWzzTEZr1B79\n                      ttl: 0\n                      createdAt: 2020-12-02T10:26:28+00:00\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 2\n                      links:\n                      - rel: self\n                        uri: /upload-tokens?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /upload-tokens?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /upload-tokens?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/token-list-response'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: List all active upload tokens.\n      tags:\n      - Upload Tokens\n      x-group-parameters: true\n      x-client-paginated: true\n      x-optional-object: true\n      x-client-action: list\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n   \\\n            \\ apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc main()\\\n            \\ {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\").Build()\\n\\\n            \\    // if you rather like to use the sandbox environment:\\n    // client\\\n            \\ := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\").Build()\\n\\\n            \\        \\n    uploadToken := \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\" // string |\\\n            \\ The unique identifier for the token you want information about.\\n\\n\\\n            \\    \\n    res, err := client.UploadTokens.GetToken(uploadToken)\\n\\n \\\n            \\   if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `UploadTokens.GetToken``: %v\\\\n\\\", err)\\n    }\\n    // response from\\\n            \\ `GetToken`: UploadToken\\n    fmt.Fprintf(os.Stdout, \\\"Response from\\\n            \\ `UploadTokens.GetToken`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const uploadToken = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the token you want information about.\n\n                    // UploadToken\n                    const result = await client.uploadTokens.getToken(uploadToken);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import upload_tokens_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.upload_token import UploadToken\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = upload_tokens_api.UploadTokensApi(api_client)\n                upload_token = \"to1tcmSFHeYY5KzyhOqVKMKb\" # str | The unique identifier for the token you want information about.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show upload token\n                    api_response = api_instance.get_token(upload_token)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling UploadTokensApi-\u003eget_token: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.UploadTokensApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    UploadTokensApi apiInstance\\\n            \\ = client.uploadTokens();\\n    \\n    String uploadToken = \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\"\\\n            ; // The unique identifier for the token you want information about.\\n\\\n            \\n    try {\\n      UploadToken result = apiInstance.getToken(uploadToken);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling UploadTokensApi#getToken\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getTokenExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the token you want information about.\n                        var apiUploadTokensInstance = apiInstance.UploadTokens();\n                        try\n                        {\n                            // Show upload token\n                            UploadToken result = apiUploadTokensInstance.getToken(uploadToken);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling UploadTokensApi.getToken: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    post:\n      description: Use this endpoint to generate an upload token. You can use this\n        token to authenticate video uploads while keeping your API key safe. Tutorials\n        using [delegated upload](https://api.video/blog/endpoints/delegated-upload).\n      operationId: POST_upload-tokens\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/token-creation-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token: to1tcmSFHeYY5KzyhOqVKMKb\n                    ttl: 3600\n                    createdAt: 2020-12-02T10:13:19+00:00\n                    expiresAt: 2020-12-02T11:13:19+00:00\n              schema:\n                $ref: '#/components/schemas/upload-token'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Generate an upload token\n      tags:\n      - Upload Tokens\n      x-client-action: createToken\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    tokenCreationPayload := *apivideosdk.NewTokenCreationPayload()\\\n            \\ // TokenCreationPayload | \\n\\n    \\n    res, err := client.UploadTokens.CreateToken(tokenCreationPayload)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `UploadTokens.CreateToken``: %v\\\\n\\\", err)\\n    }\\n    // response from\\\n            \\ `CreateToken`: UploadToken\\n    fmt.Fprintf(os.Stdout, \\\"Response from\\\n            \\ `UploadTokens.CreateToken`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const tokenCreationPayload = {\\n      ttl: 56, // Time\\\n            \\ in seconds that the token will be active. A value of 0 means that the\\\n            \\ token has no expiration date. The default is to have no expiration.\\n\\\n            \\    }; \\n\\n        // UploadToken\\n        const result = await client.uploadTokens.createToken(tokenCreationPayload);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import upload_tokens_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.upload_token import UploadToken\\n\\\n            from apivideo.model.token_creation_payload import TokenCreationPayload\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = upload_tokens_api.UploadTokensApi(api_client)\\n\\\n            \\    token_creation_payload = TokenCreationPayload(\\n        ttl=0,\\n\\\n            \\    ) # TokenCreationPayload | \\n\\n    # example passing only required\\\n            \\ values which don't have defaults set\\n    try:\\n        # Generate an\\\n            \\ upload token\\n        api_response = api_instance.create_token(token_creation_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling UploadTokensApi-\u003ecreate_token:\\\n            \\ %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.UploadTokensApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    UploadTokensApi apiInstance\\\n            \\ = client.uploadTokens();\\n    \\n    TokenCreationPayload tokenCreationPayload\\\n            \\ = new TokenCreationPayload(); // \\n    tokenCreationPayload.setTtl();\\\n            \\ // Time in seconds that the token will be active. A value of 0 means\\\n            \\ that the token has no expiration date. The default is to have no expiration.\\n\\\n            \\n\\n    try {\\n      UploadToken result = apiInstance.createToken(tokenCreationPayload);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling UploadTokensApi#createToken\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class createTokenExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var tokenCreationPayload = new TokenCreationPayload(); //\\\n            \\ TokenCreationPayload | \\n            var apiUploadTokensInstance = apiInstance.UploadTokens();\\n\\\n            \\            try\\n            {\\n                // Generate an upload\\\n            \\ token\\n                UploadToken result = apiUploadTokensInstance.createToken(tokenCreationPayload);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling UploadTokensApi.createToken: \\\" + e.Message );\\n\\\n            \\                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n      \\\n            \\          Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n\\\n            }\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /upload-tokens/{uploadToken}:\n    delete:\n      description: Delete an existing upload token. This is especially useful for\n        tokens you may have created that do not expire.\n      operationId: DELETE_upload-tokens-uploadToken\n      parameters:\n      - description: The unique identifier for the upload token you want to delete.\n          Deleting a token will make it so the token can no longer be used for authentication.\n        example: to1tcmSFHeYY5KzyhOqVKMKb\n        explode: false\n        in: path\n        name: uploadToken\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete an upload token\n      tags:\n      - Upload Tokens\n      x-client-action: deleteToken\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    uploadToken := \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\" //\\\n            \\ string | The unique identifier for the upload token you want to delete.\\\n            \\ Deleting a token will make it so the token can no longer be used for\\\n            \\ authentication.\\n\\n    \\n    err := client.UploadTokens.DeleteToken(uploadToken)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `UploadTokens.DeleteToken``: %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const uploadToken = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.\n\n                    // void\n                    const result = await client.uploadTokens.deleteToken(uploadToken);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import upload_tokens_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = upload_tokens_api.UploadTokensApi(api_client)\n                upload_token = \"to1tcmSFHeYY5KzyhOqVKMKb\" # str | The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete an upload token\n                    api_instance.delete_token(upload_token)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling UploadTokensApi-\u003edelete_token: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.UploadTokensApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    UploadTokensApi apiInstance\\\n            \\ = client.uploadTokens();\\n    \\n    String uploadToken = \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\"\\\n            ; // The unique identifier for the upload token you want to delete. Deleting\\\n            \\ a token will make it so the token can no longer be used for authentication.\\n\\\n            \\n    try {\\n      apiInstance.deleteToken(uploadToken);\\n    } catch\\\n            \\ (ApiException e) {\\n      System.err.println(\\\"Exception when calling\\\n            \\ UploadTokensApi#deleteToken\\\");\\n      System.err.println(\\\"Status code:\\\n            \\ \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteTokenExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.\n                        var apiUploadTokensInstance = apiInstance.UploadTokens();\n                        try\n                        {\n                            // Delete an upload token\n                            apiUploadTokensInstance.deleteToken(uploadToken);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling UploadTokensApi.deleteToken: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: You can retrieve details about a specific upload token if you have\n        the unique identifier for the upload token. Add it in the path of the endpoint.\n        Details include time-to-live (ttl), when the token was created, and when it\n        will expire.\n      operationId: GET_upload-tokens-uploadToken\n      parameters:\n      - description: The unique identifier for the token you want information about.\n        example: to1tcmSFHeYY5KzyhOqVKMKb\n        explode: false\n        in: path\n        name: uploadToken\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token: to1tcmSFHeYY5KzyhOqVKMKb\n                    ttl: 0\n                    createdAt: 2020-12-02T10:13:19+00:00\n              schema:\n                $ref: '#/components/schemas/upload-token'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show upload token\n      tags:\n      - Upload Tokens\n      x-client-action: getToken\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    uploadToken := \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\" //\\\n            \\ string | The unique identifier for the token you want information about.\\n\\\n            \\n    \\n    res, err := client.UploadTokens.GetToken(uploadToken)\\n\\n\\\n            \\    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `UploadTokens.GetToken``: %v\\\\n\\\", err)\\n    }\\n    // response from\\\n            \\ `GetToken`: UploadToken\\n    fmt.Fprintf(os.Stdout, \\\"Response from\\\n            \\ `UploadTokens.GetToken`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const uploadToken = 'to1tcmSFHeYY5KzyhOqVKMKb'; // The unique identifier for the token you want information about.\n\n                    // UploadToken\n                    const result = await client.uploadTokens.getToken(uploadToken);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import upload_tokens_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.upload_token import UploadToken\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = upload_tokens_api.UploadTokensApi(api_client)\n                upload_token = \"to1tcmSFHeYY5KzyhOqVKMKb\" # str | The unique identifier for the token you want information about.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show upload token\n                    api_response = api_instance.get_token(upload_token)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling UploadTokensApi-\u003eget_token: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.UploadTokensApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    UploadTokensApi apiInstance\\\n            \\ = client.uploadTokens();\\n    \\n    String uploadToken = \\\"to1tcmSFHeYY5KzyhOqVKMKb\\\"\\\n            ; // The unique identifier for the token you want information about.\\n\\\n            \\n    try {\\n      UploadToken result = apiInstance.getToken(uploadToken);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling UploadTokensApi#getToken\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getTokenExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var uploadToken = to1tcmSFHeYY5KzyhOqVKMKb;  // string | The unique identifier for the token you want information about.\n                        var apiUploadTokensInstance = apiInstance.UploadTokens();\n                        try\n                        {\n                            // Show upload token\n                            UploadToken result = apiUploadTokensInstance.getToken(uploadToken);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling UploadTokensApi.getToken: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n  /upload:\n    post:\n      description: \"When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=\u003ctokenId\u003e`.\\n\\\n        \\nExample with cURL:\\n\\n```curl\\n$ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'\\n\\\n        \\ --header 'content-type: multipart/form-data'\\n -F file=@video.mp4\\n```\\n\\\n        \\nOr in an HTML form, with a little JavaScript to convert the form into JSON:\\n\\\n        ```html\\n\u003c!--form for user interaction--\u003e\\n\u003cform name=\\\"videoUploadForm\\\"\\\n        \\ \u003e\\n  \u003clabel for=video\u003eVideo:\u003c/label\u003e\\n  \u003cinput type=file name=source/\u003e\u003cbr/\u003e\\n\\\n        \\  \u003cinput value=\\\"Submit\\\" type=\\\"submit\\\"\u003e\\n\u003c/form\u003e\\n\u003cdiv\u003e\u003c/div\u003e\\n\u003c!--JS\\\n        \\ takes the form data \\n    uses FormData to turn the response into JSON.\\n\\\n        \\    then uses POST to upload the video file.\\n    Update the token parameter\\\n        \\ in the url to your upload token.\\n    --\u003e\\n\u003cscript\u003e\\n   var form = document.forms.namedItem(\\\"\\\n        videoUploadForm\\\");\\t\\n   form.addEventListener('submit', function(ev) {\\n\\\n        \\t ev.preventDefault();\\n     var oOutput = document.querySelector(\\\"div\\\"\\\n        ),\\n         oData = new FormData(form);\\n     var oReq = new XMLHttpRequest();\\n\\\n        \\t \\n     oReq.open(\\\"POST\\\", \\\"https://ws.api.video/upload?token=toXXX\\\"\\\n        , true);\\n     oReq.send(oData);\\n\\t oReq.onload = function(oEvent) {\\n  \\\n        \\     if (oReq.status ==201) {\\n         oOutput.innerHTML = \\\"Your video\\\n        \\ is uploaded!\u003cbr/\u003e\\\"  + oReq.response;\\n       } else {\\n         oOutput.innerHTML\\\n        \\ = \\\"Error \\\" + oReq.status + \\\" occurred when trying to upload your file.\u003cbr\\\n        \\ \\\\/\u003e\\\";\\n       }\\n     };\\n   }, false);\\t\\n\u003c/script\u003e\\n```\\n\\n\\n### Dealing\\\n        \\ with large files\\n\\nYou can upload large files on api.video with \u003ca href='https://docs.api.video/reference/post_videos-videoid-source'\u003eProgressive\\\n        \\ Upload\u003c/a\u003e. Alternatively, if you want to use regular upload, we have created\\\n        \\ a \u003ca href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'\u003etutorial\u003c/a\u003e\\\n        \\ to walk through the steps required.\"\n      operationId: POST_upload\n      parameters:\n      - description: The unique identifier for the token you want to use to upload\n          a video.\n        example: to1tcmSFHeYY5KzyhOqVKMKb\n        explode: true\n        in: query\n        name: token\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: Content-Range represents the range of bytes that will be returned\n          as a result of the request. Byte ranges are inclusive, meaning that bytes\n          0-999 represents the first 1000 bytes in a file or object.\n        example: 'Content-Range: bytes 200-100/5000'\n        explode: false\n        in: header\n        name: Content-Range\n        required: false\n        schema:\n          pattern: ^bytes [0-9]*-[0-9]*\\/[0-9]*$\n          type: string\n        style: simple\n        x-client-ignore: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/token-upload-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n                    playerId: pl45KFKdlddgk654dspkze\n                    title: Maths video\n                    description: An amazing video explaining the string theory\n                    public: false\n                    panoramic: false\n                    tags:\n                    - maths\n                    - string theory\n                    - video\n                    metadata:\n                    - key: Author\n                      value: John Doe\n                    - key: Format\n                      value: Tutorial\n                    publishedAt: 4665-07-14T23:36:18.598Z\n                    source:\n                      uri: /videos/vi4k0jvEUuaTdRAEjQ4Jfrgz/source\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/vod/vi4blUQJFrYWbaG44NChkH27\n                      hls: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/hls/manifest.m3u8\n                      thumbnail: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/thumbnail.jpg\n                      mp4: https://cdn.api.video/vod/vi4blUQJFrYWbaG44NChkH27/mp4/1080/source.mp4\n              schema:\n                $ref: '#/components/schemas/video'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security: []\n      summary: Upload with an upload token\n      tags:\n      - Videos\n      x-client-action: uploadWithUploadToken\n      x-client-chunk-upload: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//The upload will happen on the front end, and not on the backend\\\n            \\ code.  \\n//Our [JavaScript uploader(https://docs.api.video/docs/video-uploader)\\\n            \\ is a great place to look for uploading videos with the delegated token.\\n\\\n            //We also have uploaders for a number of [mobile languages](https://docs.api.video/docs/flutter-uploader).\\n\"\n        - language: node\n          code: \"//The upload will happen on the front end, and not on the backend\\\n            \\ code.  \\n//Our [JavaScript uploader(https://docs.api.video/docs/video-uploader)\\\n            \\ is a great place to look for uploading videos with the delegated token.\\n\\\n            //We also have uploaders for a number of [mobile languages](https://docs.api.video/docs/flutter-uploader).\\n\"\n        - language: python\n          code: \"#The upload will happen on the front end, and not on the backend\\\n            \\ code.  \\n#Our [JavaScript uploader(https://docs.api.video/docs/video-uploader)\\\n            \\ is a great place to look for uploading videos with the delegated token.\\n\\\n            #We also have uploaders for a number of [mobile languages](https://docs.api.video/docs/flutter-uploader).\\n\"\n        - language: java\n          code: \"//The upload will happen on the front end, and not on the backend\\\n            \\ code.  \\n//Our [JavaScript uploader(https://docs.api.video/docs/video-uploader)\\\n            \\ is a great place to look for uploading videos with the delegated token.\\n\\\n            //We also have uploaders for a number of [mobile languages](https://docs.api.video/docs/flutter-uploader).\\n\"\n        - language: csharp\n          code: \"//The upload will happen on the front end, and not on the backend\\\n            \\ code.  \\n//Our [JavaScript uploader(https://docs.api.video/docs/video-uploader)\\\n            \\ is a great place to look for uploading videos with the delegated token.\\n\\\n            //We also have uploaders for a number of [mobile languages](https://docs.api.video/docs/flutter-uploader).\\n\"\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /live-streams:\n    get:\n      description: With no parameters added to the url, this will return all livestreams.\n        Query by name or key to limit the list.\n      operationId: GET_live-streams\n      parameters:\n      - description: The unique stream key that allows you to stream videos.\n        example: 30087931-229e-42cf-b5f9-e91bcc1f7332\n        explode: true\n        in: query\n        name: streamKey\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: You can filter live streams by their name or a part of their\n          name.\n        example: My Video\n        explode: true\n        in: query\n        name: name\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Allowed: createdAt, publishedAt, name. createdAt - the time\n          a livestream was created using the specified streamKey. publishedAt - the\n          time a livestream was published using the specified streamKey. name - the\n          name of the livestream. If you choose one of the time based options, the\n          time is presented in ISO-8601 format.'\n        example: createdAt\n        explode: true\n        in: query\n        name: sortBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Allowed: asc, desc. Ascending for date and time means that earlier\n          values precede later ones. Descending means that later values preced earlier\n          ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.'\n        example: desc\n        explode: true\n        in: query\n        name: sortOrder\n        required: false\n        schema:\n          enum:\n          - asc\n          - desc\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                      createdAt: 2020-01-31T10:17:47+00:00\n                      updatedAt: 2020-03-09T13:19:43+00:00\n                      streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                      name: Live Stream From the browser\n                      public: true\n                      record: true\n                      broadcasting: false\n                      assets:\n                        iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\"\n                          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                          allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                        player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                        hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                        thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n                    - liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5\n                      createdAt: 2020-07-29T10:45:35+00:00\n                      updatedAt: 2020-07-29T10:45:35+00:00\n                      streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n                      name: Live From New York\n                      public: true\n                      record: true\n                      broadcasting: false\n                      assets:\n                        iframe: \u003ciframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"\n                          width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                          allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                        player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\n                        hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n                        thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 19\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 19\n                      links:\n                      - rel: self\n                        uri: /live-streams?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /live-streams?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /live-streams?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/live-stream-list-response'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: List all live streams\n      tags:\n      - Live Streams\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-optional-object: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n  \\n  import (\\n      \\\"context\\\"\\n      \\\"fmt\\\"\\n     \\\n            \\ \\\"os\\\"\\n      apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\\n            \\n  )\\n  \\n  func main() {\\n      client := apivideosdk.ClientBuilder(\\\"\\\n            YOUR_API_TOKEN\\\").Build()\\n      // if you rather like to use the sandbox\\\n            \\ environment:\\n      // client := apivideosdk.SandboxClientBuilder(\\\"\\\n            YOU_SANDBOX_API_TOKEN\\\").Build()\\n      req := apivideosdk.LiveStreamsApiListRequest{}\\n\\\n            \\      \\n      req.StreamKey(\\\"30087931-229e-42cf-b5f9-e91bcc1f7332\\\"\\\n            ) // string | The unique stream key that allows you to stream videos.\\n\\\n            \\      req.Name(\\\"My Video\\\") // string | You can filter live streams\\\n            \\ by their name or a part of their name.\\n      req.SortBy(\\\"createdAt\\\"\\\n            ) // string | Allowed: createdAt, publishedAt, name. createdAt - the time\\\n            \\ a livestream was created using the specified streamKey. publishedAt\\\n            \\ - the time a livestream was published using the specified streamKey.\\\n            \\ name - the name of the livestream. If you choose one of the time based\\\n            \\ options, the time is presented in ISO-8601 format.\\n      req.SortOrder(\\\"\\\n            desc\\\") // string | Allowed: asc, desc. Ascending for date and time means\\\n            \\ that earlier values precede later ones. Descending means that later\\\n            \\ values preced earlier ones. For title, it is 0-9 and A-Z ascending and\\\n            \\ Z-A, 9-0 descending.\\n      req.CurrentPage(int32(2)) // int32 | Choose\\\n            \\ the number of search results to return per page. Minimum value: 1 (default\\\n            \\ to 1)\\n      req.PageSize(int32(30)) // int32 | Results per page. Allowed\\\n            \\ values 1-100, default is 25. (default to 25)\\n  \\n      res, err :=\\\n            \\ client.LiveStreams.List(req)\\n      \\n  \\n      if err != nil {\\n  \\\n            \\        fmt.Fprintf(os.Stderr, \\\"Error when calling `LiveStreams.List``:\\\n            \\ %v\\\\n\\\", err)\\n      }\\n      // response from `List`: LiveStreamListResponse\\n\\\n            \\      fmt.Fprintf(os.Stdout, \\\"Response from `LiveStreams.List`: %v\\\\\\\n            n\\\", res)\\n  }\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const streamKey = '30087931-229e-42cf-b5f9-e91bcc1f7332'; // The unique stream key that allows you to stream videos.\n                    const name = 'My Video'; // You can filter live streams by their name or a part of their name.\n                    const sortBy = 'createdAt'; // Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.\n                    const sortOrder = 'desc'; // Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.\n                    const currentPage = '2'; // Choose the number of search results to return per page. Minimum value: 1\n                    const pageSize = '30'; // Results per page. Allowed values 1-100, default is 25.\n\n                    // LiveStreamListResponse\n                    const result = await client.liveStreams.list({ streamKey, name, sortBy, sortOrder, currentPage, pageSize })\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import live_streams_api\n            from apivideo.model.live_stream import LiveStream\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = live_streams_api.LiveStreamsApi(api_client)\n                live_stream_id = \"li400mYKSgQ6xs7taUeSaEKr\" # str | The unique ID for the live stream you want to watch.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show live stream\n                    api_response = api_instance.get(live_stream_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling LiveStreamsApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    String streamKey = \\\"30087931-229e-42cf-b5f9-e91bcc1f7332\\\"\\\n            ; // The unique stream key that allows you to stream videos.\\n    String\\\n            \\ name = \\\"My Video\\\"; // You can filter live streams by their name or\\\n            \\ a part of their name.\\n    String sortBy = \\\"createdAt\\\"; // Allowed:\\\n            \\ createdAt, publishedAt, name. createdAt - the time a livestream was\\\n            \\ created using the specified streamKey. publishedAt - the time a livestream\\\n            \\ was published using the specified streamKey. name - the name of the\\\n            \\ livestream. If you choose one of the time based options, the time is\\\n            \\ presented in ISO-8601 format.\\n    String sortOrder = \\\"desc\\\"; // Allowed:\\\n            \\ asc, desc. Ascending for date and time means that earlier values precede\\\n            \\ later ones. Descending means that later values preced earlier ones.\\\n            \\ For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.\\n  \\\n            \\  Integer currentPage = 1; // Choose the number of search results to\\\n            \\ return per page. Minimum value: 1\\n    Integer pageSize = 25; // Results\\\n            \\ per page. Allowed values 1-100, default is 25.\\n\\n    try {\\n      Page\u003cLiveStream\u003e\\\n            \\ result = apiInstance.list()\\n            .streamKey(streamKey)\\n   \\\n            \\         .name(name)\\n            .sortBy(sortBy)\\n            .sortOrder(sortOrder)\\n\\\n            \\            .currentPage(currentPage)\\n            .pageSize(pageSize)\\n\\\n            \\            .execute();\\n      System.out.println(result);\\n    } catch\\\n            \\ (ApiException e) {\\n      System.err.println(\\\"Exception when calling\\\n            \\ LiveStreamsApi#list\\\");\\n      System.err.println(\\\"Status code: \\\"\\\n            \\ + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream you want to watch.\n                        var apiLiveStreamsInstance = apiInstance.LiveStreams();\n                        try\n                        {\n                            // Show live stream\n                            LiveStream result = apiLiveStreamsInstance.get(liveStreamId);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling LiveStreamsApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    post:\n      description: |-\n        A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}\n        Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).\n      operationId: POST_live-streams\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/live-stream-creation-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    liveStreamId: li4pqNqGUkhKfWcBGpZVLRY5\n                    createdAt: 2020-07-29T10:45:35+00:00\n                    updatedAt: 2020-07-29T10:45:35+00:00\n                    streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n                    name: Live From New York\n                    public: true\n                    record: true\n                    broadcasting: false\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\n                      hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n                      thumbnail: https://cdn.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5/thumbnail.jpg\n              schema:\n                $ref: '#/components/schemas/live-stream'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Create live stream\n      tags:\n      - Live Streams\n      x-client-action: create\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamCreationPayload := *apivideosdk.NewLiveStreamCreationPayload(\\\"\\\n            My Live Stream Video\\\") // LiveStreamCreationPayload | \\n\\n    \\n    res,\\\n            \\ err := client.LiveStreams.Create(liveStreamCreationPayload)\\n\\n    if\\\n            \\ err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `LiveStreams.Create``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `Create`: LiveStream\\n  \\\n            \\  fmt.Fprintf(os.Stdout, \\\"Response from `LiveStreams.Create`: %v\\\\n\\\"\\\n            , res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const liveStreamCreationPayload = {\\n      name: \\\"My\\\n            \\ Live Stream Video\\\", // Add a name for your live stream here.\\n    \\\n            \\  record: true, // Whether you are recording or not. True for record,\\\n            \\ false for not record.\\n      _public: true, // BETA FEATURE Please limit\\\n            \\ all public = false (\\\\\\\"private\\\\\\\") livestreams to 3,000 users. Whether\\\n            \\ your video can be viewed by everyone, or requires authentication to\\\n            \\ see it. A setting of false will require a unique token for each view.\\n\\\n            \\      playerId: \\\"pl4f4ferf5erfr5zed4fsdd\\\", // The unique identifier\\\n            \\ for the player.\\n    }; \\n\\n        // LiveStream\\n        const result\\\n            \\ = await client.liveStreams.create(liveStreamCreationPayload);\\n    \\\n            \\    console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import live_streams_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.live_stream_creation_payload\\\n            \\ import LiveStreamCreationPayload\\nfrom apivideo.model.live_stream import\\\n            \\ LiveStream\\nfrom pprint import pprint\\n\\n# Enter a context with an instance\\\n            \\ of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = live_streams_api.LiveStreamsApi(api_client)\\n    live_stream_creation_payload\\\n            \\ = LiveStreamCreationPayload(\\n        name=\\\"My Live Stream Video\\\"\\\n            ,\\n        record=True,\\n        public=True,\\n        player_id=\\\"pl4f4ferf5erfr5zed4fsdd\\\"\\\n            ,\\n    ) # LiveStreamCreationPayload | \\n\\n    # example passing only\\\n            \\ required values which don't have defaults set\\n    try:\\n        # Create\\\n            \\ live stream\\n        api_response = api_instance.create(live_stream_creation_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling LiveStreamsApi-\u003ecreate: %s\\\\n\\\"\\\n            \\ % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    LiveStreamCreationPayload liveStreamCreationPayload\\\n            \\ = new LiveStreamCreationPayload(); // \\n    liveStreamCreationPayload.setName(\\\"\\\n            My Live Stream Video\\\"); // Add a name for your live stream here.\\n  \\\n            \\  liveStreamCreationPayload.setRecord(true); // Whether you are recording\\\n            \\ or not. True for record, false for not record.\\n    liveStreamCreationPayload.setPublic();\\\n            \\ // BETA FEATURE Please limit all public \u0026#x3D; false (\u0026quot;private\u0026quot;)\\\n            \\ livestreams to 3,000 users. Whether your video can be viewed by everyone,\\\n            \\ or requires authentication to see it. A setting of false will require\\\n            \\ a unique token for each view.\\n    liveStreamCreationPayload.setPlayerId(\\\"\\\n            pl4f4ferf5erfr5zed4fsdd\\\"); // The unique identifier for the player.\\n\\\n            \\n\\n    try {\\n      LiveStream result = apiInstance.create(liveStreamCreationPayload);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling LiveStreamsApi#create\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class createExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var liveStreamCreationPayload = new LiveStreamCreationPayload();\\\n            \\ // LiveStreamCreationPayload | \\n            var apiLiveStreamsInstance\\\n            \\ = apiInstance.LiveStreams();\\n            try\\n            {\\n     \\\n            \\           // Create live stream\\n                LiveStream result =\\\n            \\ apiLiveStreamsInstance.create(liveStreamCreationPayload);\\n        \\\n            \\        Debug.WriteLine(result);\\n            }\\n            catch (ApiException\\\n            \\  e)\\n            {\\n                Debug.Print(\\\"Exception when calling\\\n            \\ LiveStreamsApi.create: \\\" + e.Message );\\n                Debug.Print(\\\"\\\n            Status Code: \\\"+ e.ErrorCode);\\n                Debug.Print(e.StackTrace);\\n\\\n            \\            }\\n        }\\n    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /live-streams/{liveStreamId}:\n    delete:\n      operationId: DELETE_live-streams-liveStreamId\n      parameters:\n      - description: The unique ID for the live stream that you want to remove.\n        example: li400mYKSgQ6xs7taUeSaEKr\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n      security:\n      - bearerAuth: []\n      summary: Delete a live stream\n      tags:\n      - Live Streams\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamId := \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            \\ // string | The unique ID for the live stream that you want to remove.\\n\\\n            \\n    \\n    err := client.LiveStreams.Delete(liveStreamId)\\n\\n    if err\\\n            \\ != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `LiveStreams.Delete``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream that you want to remove.\n\n                    // void\n                    const result = await client.liveStreams.delete(liveStreamId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import live_streams_api\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = live_streams_api.LiveStreamsApi(api_client)\n                live_stream_id = \"li400mYKSgQ6xs7taUeSaEKr\" # str | The unique ID for the live stream that you want to remove.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a live stream\n                    api_instance.delete(live_stream_id)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling LiveStreamsApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\n  import video.api.client.ApiVideoClient;\\n  import\\\n            \\ video.api.client.api.ApiException;\\n  import video.api.client.api.models.*;\\n\\\n            \\  import video.api.client.api.clients.LiveStreamsApi;\\n  import java.util.*;\\n\\\n            \\  \\n  public class Example {\\n    public static void main(String[] args)\\\n            \\ {\\n      ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n      // if you rather like to use the sandbox environment:\\n    \\\n            \\  // ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n  \\n      LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n      \\n      String liveStreamId = \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            ; // The unique ID for the live stream that you want to remove.\\n  \\n\\\n            \\      try {\\n        apiInstance.delete(liveStreamId);\\n      } catch\\\n            \\ (ApiException e) {\\n        System.err.println(\\\"Exception when calling\\\n            \\ LiveStreamsApi#delete\\\");\\n        System.err.println(\\\"Status code:\\\n            \\ \\\" + e.getCode());\\n        System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\        System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\        e.printStackTrace();\\n      }\\n    }\\n  }\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream that you want to remove.\n                        var apiLiveStreamsInstance = apiInstance.LiveStreams();\n                        try\n                        {\n                            // Delete a live stream\n                            apiLiveStreamsInstance.delete(liveStreamId);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling LiveStreamsApi.delete: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: Supply a LivestreamId, and you'll get all the details for streaming\n        into, and watching the livestream. Tutorials that use the [show livestream\n        endpoint](https://api.video/blog/endpoints/live-stream-status).\n      operationId: GET_live-streams-liveStreamId\n      parameters:\n      - description: The unique ID for the live stream you want to watch.\n        example: li400mYKSgQ6xs7taUeSaEKr\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                    createdAt: 2020-01-31T10:17:47+00:00\n                    updatedAt: 2020-03-09T13:19:43+00:00\n                    streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                    name: Live Stream From the browser\n                    public: true\n                    record: true\n                    broadcasting: false\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                      hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                      thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n              schema:\n                $ref: '#/components/schemas/live-stream'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Show live stream\n      tags:\n      - Live Streams\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamId := \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            \\ // string | The unique ID for the live stream you want to watch.\\n\\n\\\n            \\    \\n    res, err := client.LiveStreams.Get(liveStreamId)\\n\\n    if\\\n            \\ err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `LiveStreams.Get``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `Get`: LiveStream\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `LiveStreams.Get`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The unique ID for the live stream you want to watch.\n\n                    // LiveStream\n                    const result = await client.liveStreams.get(liveStreamId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import live_streams_api\n            from apivideo.model.live_stream import LiveStream\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = live_streams_api.LiveStreamsApi(api_client)\n                live_stream_id = \"li400mYKSgQ6xs7taUeSaEKr\" # str | The unique ID for the live stream you want to watch.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show live stream\n                    api_response = api_instance.get(live_stream_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling LiveStreamsApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    String liveStreamId = \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            ; // The unique ID for the live stream you want to watch.\\n\\n    try {\\n\\\n            \\      LiveStream result = apiInstance.get(liveStreamId);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling LiveStreamsApi#get\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string | The unique ID for the live stream you want to watch.\n                        var apiLiveStreamsInstance = apiInstance.LiveStreams();\n                        try\n                        {\n                            // Show live stream\n                            LiveStream result = apiLiveStreamsInstance.get(liveStreamId);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling LiveStreamsApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    patch:\n      description: 'Use this endpoint to update the player, or to turn recording on/off\n        (saving a copy of the livestream). NOTE: If the livestream is actively streaming,\n        changing the recording status will only affect the NEXT stream.    The public=false\n        ''private livestream'' is available as a BETA feature, and should be limited\n        to livestreams of 3,000 viewers or fewer.'\n      operationId: PATCH_live-streams-liveStreamId\n      parameters:\n      - description: The unique ID for the live stream that you want to update information\n          for such as player details, or whether you want the recording on or off.\n        example: li400mYKSgQ6xs7taUeSaEKr\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/live-stream-update-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n                    createdAt: 2020-01-31T10:17:47+00:00\n                    updatedAt: 2020-03-09T13:19:43+00:00\n                    streamKey: 30087931-229e-42cf-b5f9-e91bcc1f7332\n                    name: Live Stream From the browser\n                    public: true\n                    record: true\n                    broadcasting: false\n                    assets:\n                      iframe: \u003ciframe src=\"https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\"\n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n                      player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n                      hls: https://live.api.video/li400mYKSgQ6xs7taUeSaEKr.m3u8\n                      thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n              schema:\n                $ref: '#/components/schemas/live-stream'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Update a live stream\n      tags:\n      - Live Streams\n      x-client-action: update\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamId := \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            \\ // string | The unique ID for the live stream that you want to update\\\n            \\ information for such as player details, or whether you want the recording\\\n            \\ on or off.\\n    liveStreamUpdatePayload := *apivideosdk.NewLiveStreamUpdatePayload()\\\n            \\ // LiveStreamUpdatePayload | \\n\\n    \\n    res, err := client.LiveStreams.Update(liveStreamId,\\\n            \\ liveStreamUpdatePayload)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `LiveStreams.Update``: %v\\\\n\\\", err)\\n    }\\n \\\n            \\   // response from `Update`: LiveStream\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `LiveStreams.Update`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The\\\n            \\ unique ID for the live stream that you want to update information for\\\n            \\ such as player details, or whether you want the recording on or off.\\n\\\n            \\        const liveStreamUpdatePayload = {\\n      name: \\\"My Live Stream\\\n            \\ Video\\\", // The name you want to use for your live stream.\\n      _public:\\\n            \\ true, // BETA FEATURE Please limit all public = false (\\\\\\\"private\\\\\\\n            \\\") livestreams to 3,000 users. Whether your video can be viewed by everyone,\\\n            \\ or requires authentication to see it. A setting of false will require\\\n            \\ a unique token for each view.\\n      record: true, // Use this to indicate\\\n            \\ whether you want the recording on or off. On is true, off is false.\\n\\\n            \\      playerId: \\\"pl45KFKdlddgk654dspkze\\\", // The unique ID for the\\\n            \\ player associated with a live stream that you want to update.\\n    };\\\n            \\ \\n\\n        // LiveStream\\n        const result = await client.liveStreams.update(liveStreamId,\\\n            \\ liveStreamUpdatePayload);\\n        console.log(result);\\n    } catch\\\n            \\ (e) {\\n        console.error(e);\\n    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import live_streams_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.live_stream_update_payload import\\\n            \\ LiveStreamUpdatePayload\\nfrom apivideo.model.live_stream import LiveStream\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = live_streams_api.LiveStreamsApi(api_client)\\n\\\n            \\    live_stream_id = \\\"li400mYKSgQ6xs7taUeSaEKr\\\" # str | The unique\\\n            \\ ID for the live stream that you want to update information for such\\\n            \\ as player details, or whether you want the recording on or off.\\n  \\\n            \\  live_stream_update_payload = LiveStreamUpdatePayload(\\n        name=\\\"\\\n            My Live Stream Video\\\",\\n        public=True,\\n        record=True,\\n\\\n            \\        player_id=\\\"pl45KFKdlddgk654dspkze\\\",\\n    ) # LiveStreamUpdatePayload\\\n            \\ | \\n\\n    # example passing only required values which don't have defaults\\\n            \\ set\\n    try:\\n        # Update a live stream\\n        api_response\\\n            \\ = api_instance.update(live_stream_id, live_stream_update_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling LiveStreamsApi-\u003eupdate: %s\\\\n\\\"\\\n            \\ % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    String liveStreamId = \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            ; // The unique ID for the live stream that you want to update information\\\n            \\ for such as player details, or whether you want the recording on or\\\n            \\ off.\\n    LiveStreamUpdatePayload liveStreamUpdatePayload = new LiveStreamUpdatePayload();\\\n            \\ // \\n    liveStreamUpdatePayload.setName(\\\"My Live Stream Video\\\");\\\n            \\ // The name you want to use for your live stream.\\n    liveStreamUpdatePayload.setPublic();\\\n            \\ // BETA FEATURE Please limit all public \u0026#x3D; false (\u0026quot;private\u0026quot;)\\\n            \\ livestreams to 3,000 users.\\nWhether your video can be viewed by everyone,\\\n            \\ or requires authentication to see it. A setting of false will require\\\n            \\ a unique token for each view.\\n    liveStreamUpdatePayload.setRecord(true);\\\n            \\ // Use this to indicate whether you want the recording on or off. On\\\n            \\ is true, off is false.\\n    liveStreamUpdatePayload.setPlayerId(\\\"pl45KFKdlddgk654dspkze\\\"\\\n            ); // The unique ID for the player associated with a live stream that\\\n            \\ you want to update.\\n\\n\\n    try {\\n      LiveStream result = apiInstance.update(liveStreamId,\\\n            \\ liveStreamUpdatePayload);\\n      System.out.println(result);\\n    }\\\n            \\ catch (ApiException e) {\\n      System.err.println(\\\"Exception when\\\n            \\ calling LiveStreamsApi#update\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class updateExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string\\\n            \\ | The unique ID for the live stream that you want to update information\\\n            \\ for such as player details, or whether you want the recording on or\\\n            \\ off.\\n            var liveStreamUpdatePayload = new LiveStreamUpdatePayload();\\\n            \\ // LiveStreamUpdatePayload | \\n            var apiLiveStreamsInstance\\\n            \\ = apiInstance.LiveStreams();\\n            try\\n            {\\n     \\\n            \\           // Update a live stream\\n                LiveStream result\\\n            \\ = apiLiveStreamsInstance.update(liveStreamId, liveStreamUpdatePayload);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling LiveStreamsApi.update: \\\" + e.Message );\\n    \\\n            \\            Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n          \\\n            \\      Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /live-streams/{liveStreamId}/thumbnail:\n    delete:\n      description: Send the unique identifier for a live stream to delete it from\n        the system.\n      operationId: DELETE_live-streams-liveStreamId-thumbnail\n      parameters:\n      - description: 'The unique identifier for the live stream you want to delete. '\n        example: li400mYKSgQ6xs7taUeSaEKr\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/live-stream'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: liveStreamId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a thumbnail\n      tags:\n      - Live Streams\n      x-client-action: deleteThumbnail\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamId := \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            \\ // string | The unique identifier for the live stream you want to delete.\\\n            \\ \\n\\n    \\n    res, err := client.LiveStreams.DeleteThumbnail(liveStreamId)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `LiveStreams.DeleteThumbnail``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `DeleteThumbnail`: LiveStream\\n    fmt.Fprintf(os.Stdout, \\\"Response\\\n            \\ from `LiveStreams.DeleteThumbnail`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const liveStreamId = 'li400mYKSgQ6xs7taUeSaEKr'; // The\\\n            \\ unique identifier for the live stream you want to delete. \\n\\n     \\\n            \\   // LiveStream\\n        const result = await client.liveStreams.deleteThumbnail(liveStreamId);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import live_streams_api\\nfrom apivideo.model.not_found\\\n            \\ import NotFound\\nfrom apivideo.model.live_stream import LiveStream\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = live_streams_api.LiveStreamsApi(api_client)\\n\\\n            \\    live_stream_id = \\\"li400mYKSgQ6xs7taUeSaEKr\\\" # str | The unique\\\n            \\ identifier for the live stream you want to delete. \\n\\n    # example\\\n            \\ passing only required values which don't have defaults set\\n    try:\\n\\\n            \\        # Delete a thumbnail\\n        api_response = api_instance.delete_thumbnail(live_stream_id)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling LiveStreamsApi-\u003edelete_thumbnail:\\\n            \\ %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    String liveStreamId = \\\"li400mYKSgQ6xs7taUeSaEKr\\\"\\\n            ; // The unique identifier for the live stream you want to delete. \\n\\n\\\n            \\    try {\\n      LiveStream result = apiInstance.deleteThumbnail(liveStreamId);\\n\\\n            \\      System.out.println(result);\\n    } catch (ApiException e) {\\n \\\n            \\     System.err.println(\\\"Exception when calling LiveStreamsApi#deleteThumbnail\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class deleteThumbnailExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var liveStreamId = li400mYKSgQ6xs7taUeSaEKr;  // string\\\n            \\ | The unique identifier for the live stream you want to delete. \\n \\\n            \\           var apiLiveStreamsInstance = apiInstance.LiveStreams();\\n\\\n            \\            try\\n            {\\n                // Delete a thumbnail\\n\\\n            \\                LiveStream result = apiLiveStreamsInstance.deleteThumbnail(liveStreamId);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling LiveStreamsApi.deleteThumbnail: \\\" + e.Message\\\n            \\ );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n \\\n            \\               Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n}\\n\"\n      x-accepts: application/json\n    post:\n      description: Upload an image to use as a backdrop for your livestream. Tutorials\n        that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail).\n      operationId: POST_live-streams-liveStreamId-thumbnail\n      parameters:\n      - description: The unique ID for the live stream you want to upload.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/live-stream-thumbnail-upload-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/live-stream'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/fileextension\n                    title: Only [jpeg, jpg, JPG, JPEG] extensions are supported.\n                    name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: liveStreamId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a thumbnail\n      tags:\n      - Live Streams\n      x-client-action: uploadThumbnail\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    liveStreamId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            \\ // string | The unique ID for the live stream you want to upload.\\n\\\n            \\    file := os.NewFile(1234, \\\"some_file\\\") // *os.File | The .jpg image\\\n            \\ to be added as a thumbnail.\\n\\n    \\n    res, err := client.LiveStreams.UploadThumbnailFile(liveStreamId,\\\n            \\ file)\\n\\n    // you can also use a Reader instead of a File:\\n    //\\\n            \\ client.LiveStreams.UploadThumbnail(liveStreamId, fileName, fileReader)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `LiveStreams.UploadThumbnail``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `UploadThumbnail`: LiveStream\\n    fmt.Fprintf(os.Stdout, \\\"Response\\\n            \\ from `LiveStreams.UploadThumbnail`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const liveStreamId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique ID for the live stream you want to upload.\n                    const file = 'BINARY_DATA_HERE'; // The .jpg image to be added as a thumbnail.\n\n                    // LiveStream\n                    const result = await client.liveStreams.uploadThumbnail(liveStreamId, file);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import live_streams_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.live_stream import LiveStream\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = live_streams_api.LiveStreamsApi(api_client)\n                live_stream_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique ID for the live stream you want to upload.\n                file = open('/path/to/file', 'rb') # file_type | The .jpg image to be added as a thumbnail.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a thumbnail\n                    api_response = api_instance.upload_thumbnail(live_stream_id, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling LiveStreamsApi-\u003eupload_thumbnail: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.LiveStreamsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    LiveStreamsApi apiInstance\\\n            \\ = client.liveStreams();\\n    \\n    String liveStreamId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique ID for the live stream you want to upload.\\n    File file\\\n            \\ = new File(\\\"/path/to/file\\\"); // The .jpg image to be added as a thumbnail.\\n\\\n            \\n    try {\\n      LiveStream result = apiInstance.uploadThumbnail(liveStreamId,\\\n            \\ file);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling LiveStreamsApi#uploadThumbnail\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class uploadThumbnailExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var liveStreamId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique ID for the live stream you want to upload.\n                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The .jpg image to be added as a thumbnail.\n                        var apiLiveStreamsInstance = apiInstance.LiveStreams();\n                        try\n                        {\n                            // Upload a thumbnail\n                            LiveStream result = apiLiveStreamsInstance.uploadThumbnail(liveStreamId, file);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling LiveStreamsApi.uploadThumbnail: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /videos/{videoId}/captions/{language}:\n    delete:\n      description: Delete a caption in a specific language by providing the video\n        ID for the video you want to delete the caption from and the language the\n        caption is in.\n      operationId: DELETE_videos-videoId-captions-language\n      parameters:\n      - description: The unique identifier for the video you want to delete a caption\n          from.\n        example: vi4k0jvEUuaTdRAEjQ4Prklgc\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a caption\n      tags:\n      - Captions\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Prklgc\\\" // string\\\n            \\ | The unique identifier for the video you want to delete a caption from.\\n\\\n            \\    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    \\n    err := client.Captions.Delete(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Captions.Delete``: %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklgc'; // The unique identifier for the video you want to delete a caption from.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                    // void\n                    const result = await client.captions.delete(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import captions_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = captions_api.CaptionsApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Prklgc\" # str | The unique identifier for the video you want to delete a caption from.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a caption\n                    api_instance.delete(video_id, language)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling CaptionsApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.CaptionsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    CaptionsApi apiInstance\\\n            \\ = client.captions();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklgc\\\"\\\n            ; // The unique identifier for the video you want to delete a caption\\\n            \\ from.\\n    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    try {\\n      apiInstance.delete(videoId,\\\n            \\ language);\\n    } catch (ApiException e) {\\n      System.err.println(\\\"\\\n            Exception when calling CaptionsApi#delete\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklgc;  // string | The unique identifier for the video you want to delete a caption from.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                        var apiCaptionsInstance = apiInstance.Captions();\n                        try\n                        {\n                            // Delete a caption\n                            apiCaptionsInstance.delete(videoId, language);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling CaptionsApi.delete: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: |-\n        Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found.\n        Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).\n      operationId: GET_videos-videoId-captions-language\n      parameters:\n      - description: The unique identifier for the video you want captions for.\n        example: vi4k0jvEUuaTdRAEjQ4Prklg\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    default: false\n              schema:\n                $ref: '#/components/schemas/caption'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show a caption\n      tags:\n      - Captions\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\" // string\\\n            \\ | The unique identifier for the video you want captions for.\\n    language\\\n            \\ := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation\\n\\n    \\n    res, err := client.Captions.Get(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Captions.Get``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `Get`: Caption\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Captions.Get`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for the video you want captions for.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n\n                    // Caption\n                    const result = await client.captions.get(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import captions_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.caption import Caption\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = captions_api.CaptionsApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Prklg\" # str | The unique identifier for the video you want captions for.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show a caption\n                    api_response = api_instance.get(video_id, language)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling CaptionsApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.CaptionsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    CaptionsApi apiInstance\\\n            \\ = client.captions();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            ; // The unique identifier for the video you want captions for.\\n    String\\\n            \\ language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation\\n\\n    try {\\n      Caption result = apiInstance.get(videoId,\\\n            \\ language);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling CaptionsApi#get\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want captions for.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n                        var apiCaptionsInstance = apiInstance.Captions();\n                        try\n                        {\n                            // Show a caption\n                            Caption result = apiCaptionsInstance.get(videoId, language);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling CaptionsApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    patch:\n      description: 'To have the captions on automatically, use this PATCH to set default:\n        true.'\n      operationId: PATCH_videos-videoId-captions-language\n      parameters:\n      - description: The unique identifier for the video you want to have automatic\n          captions for.\n        example: vi4k0jvEUuaTdRAEjQ4Prklg\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/captions-update-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    default: true\n              schema:\n                $ref: '#/components/schemas/caption'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: string (required)\n                    title: string (required)\n                    name: string (required)\n                    status: integer (required)\n                    problems:\n                    - null\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: Lorem sit culpa non\n                    title: sunt do fugiat tempor\n                    name: irure mollit aute\n                    status: 85925135\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Update caption\n      tags:\n      - Captions\n      x-client-action: update\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\" // string\\\n            \\ | The unique identifier for the video you want to have automatic captions\\\n            \\ for.\\n    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n    captionsUpdatePayload := *apivideosdk.NewCaptionsUpdatePayload()\\\n            \\ // CaptionsUpdatePayload | \\n\\n    \\n    res, err := client.Captions.Update(videoId,\\\n            \\ language, captionsUpdatePayload)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `Captions.Update``: %v\\\\n\\\", err)\\n    }\\n    //\\\n            \\ response from `Update`: Caption\\n    fmt.Fprintf(os.Stdout, \\\"Response\\\n            \\ from `Captions.Update`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique\\\n            \\ identifier for the video you want to have automatic captions for.\\n\\\n            \\        const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n        const captionsUpdatePayload = {\\n\\\n            \\      _default: true,\\n    }; \\n\\n        // Caption\\n        const result\\\n            \\ = await client.captions.update(videoId, language, captionsUpdatePayload);\\n\\\n            \\        console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import captions_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.captions_update_payload import\\\n            \\ CaptionsUpdatePayload\\nfrom apivideo.model.not_found import NotFound\\n\\\n            from apivideo.model.caption import Caption\\nfrom pprint import pprint\\n\\\n            \\n# Enter a context with an instance of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = captions_api.CaptionsApi(api_client)\\n    video_id = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            \\ # str | The unique identifier for the video you want to have automatic\\\n            \\ captions for.\\n    language = \\\"en\\\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n    captions_update_payload = CaptionsUpdatePayload(\\n\\\n            \\        default=True,\\n    ) # CaptionsUpdatePayload | \\n\\n    # example\\\n            \\ passing only required values which don't have defaults set\\n    try:\\n\\\n            \\        # Update caption\\n        api_response = api_instance.update(video_id,\\\n            \\ language, captions_update_payload)\\n        pprint(api_response)\\n \\\n            \\   except apivideo.ApiException as e:\\n        print(\\\"Exception when\\\n            \\ calling CaptionsApi-\u003eupdate: %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.CaptionsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    CaptionsApi apiInstance\\\n            \\ = client.captions();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            ; // The unique identifier for the video you want to have automatic captions\\\n            \\ for.\\n    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n    CaptionsUpdatePayload captionsUpdatePayload\\\n            \\ = new CaptionsUpdatePayload(); // \\n    captionsUpdatePayload.setDefault();\\\n            \\ // \\n\\n\\n    try {\\n      Caption result = apiInstance.update(videoId,\\\n            \\ language, captionsUpdatePayload);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling CaptionsApi#update\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class updateExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The\\\n            \\ unique identifier for the video you want to have automatic captions\\\n            \\ for.\\n            var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n            var captionsUpdatePayload = new\\\n            \\ CaptionsUpdatePayload(); // CaptionsUpdatePayload | \\n            var\\\n            \\ apiCaptionsInstance = apiInstance.Captions();\\n            try\\n   \\\n            \\         {\\n                // Update caption\\n                Caption\\\n            \\ result = apiCaptionsInstance.update(videoId, language, captionsUpdatePayload);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling CaptionsApi.update: \\\" + e.Message );\\n       \\\n            \\         Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n             \\\n            \\   Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n    post:\n      description: |-\n        Upload a VTT file to add captions to your video.\n         Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.\n      operationId: POST_videos-videoId-captions-language\n      parameters:\n      - description: The unique identifier for the video you want to add a caption\n          to.\n        example: vi4k0jvEUuaTdRAEjQ4Prklg\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid BCP 47 language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/captions-upload-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                    srclang: en\n                    default: false\n              schema:\n                $ref: '#/components/schemas/caption'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a caption\n      tags:\n      - Captions\n      x-client-action: upload\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\" // string\\\n            \\ | The unique identifier for the video you want to add a caption to.\\n\\\n            \\    language := \\\"en\\\" // string | A valid BCP 47 language representation.\\n\\\n            \\    file := os.NewFile(1234, \\\"some_file\\\") // *os.File | The video text\\\n            \\ track (VTT) you want to upload.\\n\\n    \\n    res, err := client.Captions.UploadFile(videoId,\\\n            \\ language, file)\\n\\n    // you can also use a Reader instead of a File:\\n\\\n            \\    // client.Captions.Upload(videoId, language, fileName, fileReader)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Captions.Upload``: %v\\\\n\\\", err)\\n    }\\n    // response from `Upload`:\\\n            \\ Caption\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Captions.Upload`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for the video you want to add a caption to.\n                    const language = 'en'; // A valid BCP 47 language representation.\n                    const file = 'BINARY_DATA_HERE'; // The video text track (VTT) you want to upload.\n\n                    // Caption\n                    const result = await client.captions.upload(videoId, language, file);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import captions_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.caption import Caption\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = captions_api.CaptionsApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Prklg\" # str | The unique identifier for the video you want to add a caption to.\n                language = \"en\" # str | A valid BCP 47 language representation.\n                file = open('/path/to/file', 'rb') # file_type | The video text track (VTT) you want to upload.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a caption\n                    api_response = api_instance.upload(video_id, language, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling CaptionsApi-\u003eupload: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.CaptionsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    CaptionsApi apiInstance\\\n            \\ = client.captions();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            ; // The unique identifier for the video you want captions for.\\n    String\\\n            \\ language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation\\n\\n    try {\\n      Caption result = apiInstance.get(videoId,\\\n            \\ language);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling CaptionsApi#get\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class uploadExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want to add a caption to.\n                        var language = en;  // string | A valid BCP 47 language representation.\n                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The video text track (VTT) you want to upload.\n                        var apiCaptionsInstance = apiInstance.Captions();\n                        try\n                        {\n                            // Upload a caption\n                            Caption result = apiCaptionsInstance.upload(videoId, language, file);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling CaptionsApi.upload: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /videos/{videoId}/captions:\n    get:\n      description: Retrieve a list of available captions for the videoId you provide.\n      operationId: GET_videos-videoId-captions\n      parameters:\n      - description: The unique identifier for the video you want to retrieve a list\n          of captions for.\n        example: vi4k0jvEUuaTdRAEjQ4Prklg\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/en\n                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/en.vtt\n                      srclang: en\n                      default: false\n                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions/fr\n                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/captions/fr.vtt\n                      srclang: fr\n                      default: false\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 2\n                      links:\n                      - rel: self\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/captions?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/captions-list-response'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: List video captions\n      tags:\n      - Captions\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\" // string\\\n            \\ | The unique identifier for the video you want captions for.\\n    language\\\n            \\ := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation\\n\\n    \\n    res, err := client.Captions.Get(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Captions.Get``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `Get`: Caption\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Captions.Get`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique identifier for the video you want captions for.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n\n                    // Caption\n                    const result = await client.captions.get(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import captions_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.caption import Caption\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = captions_api.CaptionsApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Prklg\" # str | The unique identifier for the video you want captions for.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show a caption\n                    api_response = api_instance.get(video_id, language)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling CaptionsApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.CaptionsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    CaptionsApi apiInstance\\\n            \\ = client.captions();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            ; // The unique identifier for the video you want captions for.\\n    String\\\n            \\ language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation\\n\\n    try {\\n      Caption result = apiInstance.get(videoId,\\\n            \\ language);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling CaptionsApi#get\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The unique identifier for the video you want captions for.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation\n                        var apiCaptionsInstance = apiInstance.Captions();\n                        try\n                        {\n                            // Show a caption\n                            Caption result = apiCaptionsInstance.get(videoId, language);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling CaptionsApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n  /videos/{videoId}/chapters/{language}:\n    delete:\n      operationId: DELETE_videos-videoId-chapters-language\n      parameters:\n      - description: The unique identifier for the video you want to delete a chapter\n          from.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a chapter\n      tags:\n      - Chapters\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The unique identifier for the video you want to delete a chapter from.\\n\\\n            \\    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    \\n    err := client.Chapters.Delete(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Chapters.Delete``: %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video you want to delete a chapter from.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                    // void\n                    const result = await client.chapters.delete(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import chapters_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = chapters_api.ChaptersApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the video you want to delete a chapter from.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a chapter\n                    api_instance.delete(video_id, language)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling ChaptersApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.ChaptersApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    ChaptersApi apiInstance\\\n            \\ = client.chapters();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the video you want to delete a chapter\\\n            \\ from.\\n    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    try {\\n      apiInstance.delete(videoId,\\\n            \\ language);\\n    } catch (ApiException e) {\\n      System.err.println(\\\"\\\n            Exception when calling ChaptersApi#delete\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to delete a chapter from.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                        var apiChaptersInstance = apiInstance.Chapters();\n                        try\n                        {\n                            // Delete a chapter\n                            apiChaptersInstance.delete(videoId, language);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling ChaptersApi.delete: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: Chapters help your viewers find the sections of the video they\n        are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).\n      operationId: GET_videos-videoId-chapters-language\n      parameters:\n      - description: The unique identifier for the video you want to show a chapter\n          for.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                    language: fr\n              schema:\n                $ref: '#/components/schemas/chapter'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show a chapter\n      tags:\n      - Chapters\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The unique identifier for the video you want to show a chapter for.\\n\\\n            \\    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    \\n    res, err := client.Chapters.Get(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Chapters.Get``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `Get`: Chapter\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Chapters.Get`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video you want to show a chapter for.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                    // Chapter\n                    const result = await client.chapters.get(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import chapters_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.chapter import Chapter\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = chapters_api.ChaptersApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the video you want to show a chapter for.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show a chapter\n                    api_response = api_instance.get(video_id, language)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling ChaptersApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.ChaptersApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    ChaptersApi apiInstance\\\n            \\ = client.chapters();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the video you want to show a chapter for.\\n\\\n            \\    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    try {\\n      Chapter result = apiInstance.get(videoId,\\\n            \\ language);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling ChaptersApi#get\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to show a chapter for.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                        var apiChaptersInstance = apiInstance.Chapters();\n                        try\n                        {\n                            // Show a chapter\n                            Chapter result = apiChaptersInstance.get(videoId, language);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling ChaptersApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    post:\n      description: Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos)\n        for more details.\n      operationId: POST_videos-videoId-chapters-language\n      parameters:\n      - description: The unique identifier for the video you want to upload a chapter\n          for.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\n          language representation.\n        example: en\n        explode: false\n        in: path\n        name: language\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/chapters-update-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n                    src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                    language: fr\n              schema:\n                $ref: '#/components/schemas/chapter'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a chapter\n      tags:\n      - Chapters\n      x-client-action: upload\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The unique identifier for the video you want to upload a chapter for.\\n\\\n            \\    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n    file := os.NewFile(1234, \\\"some_file\\\"\\\n            ) // *os.File | The VTT file describing the chapters you want to upload.\\n\\\n            \\n    \\n    res, err := client.Chapters.UploadFile(videoId, language,\\\n            \\ file)\\n\\n    // you can also use a Reader instead of a File:\\n    //\\\n            \\ client.Chapters.Upload(videoId, language, fileName, fileReader)\\n\\n\\\n            \\    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Chapters.Upload``: %v\\\\n\\\", err)\\n    }\\n    // response from `Upload`:\\\n            \\ Chapter\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Chapters.Upload`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video you want to upload a chapter for.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                    const file = 'BINARY_DATA_HERE'; // The VTT file describing the chapters you want to upload.\n\n                    // Chapter\n                    const result = await client.chapters.upload(videoId, language, file);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import chapters_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.chapter import Chapter\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = chapters_api.ChaptersApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the video you want to upload a chapter for.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                file = open('/path/to/file', 'rb') # file_type | The VTT file describing the chapters you want to upload.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a chapter\n                    api_response = api_instance.upload(video_id, language, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling ChaptersApi-\u003eupload: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.ChaptersApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    ChaptersApi apiInstance\\\n            \\ = client.chapters();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the video you want to upload a chapter\\\n            \\ for.\\n    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n    File file = new File(\\\"/path/to/file\\\"\\\n            ); // The VTT file describing the chapters you want to upload.\\n\\n   \\\n            \\ try {\\n      Chapter result = apiInstance.upload(videoId, language,\\\n            \\ file);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling ChaptersApi#upload\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class uploadExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to upload a chapter for.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                        var file = BINARY_DATA_HERE;  // System.IO.Stream | The VTT file describing the chapters you want to upload.\n                        var apiChaptersInstance = apiInstance.Chapters();\n                        try\n                        {\n                            // Upload a chapter\n                            Chapter result = apiChaptersInstance.upload(videoId, language, file);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling ChaptersApi.upload: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /videos/{videoId}/chapters:\n    get:\n      description: Retrieve a list of all chapters for a specified video.\n      operationId: GET_videos-videoId-chapters\n      parameters:\n      - description: The unique identifier for the video you want to retrieve a list\n          of chapters for.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/fr\n                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n                      language: fr\n                    - uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters/en\n                      src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/en.vtt\n                      language: en\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 2\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 2\n                      links:\n                      - rel: self\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /videos/vi3N6cDinStg3oBbN79GklWS/chapters?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/chapters-list-response'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: List video chapters\n      tags:\n      - Chapters\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    videoId := \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\" // string\\\n            \\ | The unique identifier for the video you want to show a chapter for.\\n\\\n            \\    language := \\\"en\\\" // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    \\n    res, err := client.Chapters.Get(videoId,\\\n            \\ language)\\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `Chapters.Get``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `Get`: Chapter\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Chapters.Get`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const videoId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The unique identifier for the video you want to show a chapter for.\n                    const language = 'en'; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                    // Chapter\n                    const result = await client.chapters.get(videoId, language);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import chapters_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.chapter import Chapter\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = chapters_api.ChaptersApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the video you want to show a chapter for.\n                language = \"en\" # str | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show a chapter\n                    api_response = api_instance.get(video_id, language)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling ChaptersApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.ChaptersApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    ChaptersApi apiInstance\\\n            \\ = client.chapters();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the video you want to show a chapter for.\\n\\\n            \\    String language = \\\"en\\\"; // A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers)\\\n            \\ language representation.\\n\\n    try {\\n      Chapter result = apiInstance.get(videoId,\\\n            \\ language);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling ChaptersApi#get\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var videoId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string | The unique identifier for the video you want to show a chapter for.\n                        var language = en;  // string | A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.\n                        var apiChaptersInstance = apiInstance.Chapters();\n                        try\n                        {\n                            // Show a chapter\n                            Chapter result = apiChaptersInstance.get(videoId, language);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling ChaptersApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n  /players:\n    get:\n      description: |-\n        Retrieve a list of all the player themes you created, as well as details about each one.\n        Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).\n      operationId: GET_players\n      parameters:\n      - description: createdAt is the time the player was created. updatedAt is the\n          time the player was last updated. The time is presented in ISO-8601 format.\n        example: createdAt\n        explode: true\n        in: query\n        name: sortBy\n        required: false\n        schema:\n          enum:\n          - name\n          - createdAt\n          - updatedAt\n          type: string\n        style: form\n      - description: 'Allowed: asc, desc. Ascending for date and time means that earlier\n          values precede later ones. Descending means that later values preced earlier\n          ones.'\n        example: asc\n        explode: true\n        in: query\n        name: sortOrder\n        required: false\n        schema:\n          enum:\n          - asc\n          - desc\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - playerId: pl4fgtjy4tjyKDK545DRdfg\n                      createdAt: 2020-01-13T10:09:17+00:00\n                      updatedAt: 2020-01-13T10:09:17+00:00\n                      text: rgba(255, 255, 255, .95)\n                      link: rgba(255, 0, 0, .95)\n                      linkHover: rgba(255, 255, 255, .75)\n                      linkActive: rgba(255, 0, 0, .75)\n                      trackPlayed: rgba(255, 255, 255, .95)\n                      trackUnplayed: rgba(255, 255, 255, .1)\n                      trackBackground: rgba(0, 0, 0, 0)\n                      backgroundTop: rgba(72, 4, 45, 1)\n                      backgroundBottom: rgba(94, 95, 89, 1)\n                      backgroundText: rgba(255, 255, 255, .95)\n                      enableApi: false\n                      enableControls: false\n                      forceAutoplay: false\n                      hideTitle: false\n                      forceLoop: false\n                    - playerId: pl54fgtjy4tjyKDK45DRdfg\n                      createdAt: 2020-01-13T10:09:17+00:00\n                      updatedAt: 2020-01-13T10:09:17+00:00\n                      text: rgba(255, 255, 255, .95)\n                      link: rgba(255, 0, 0, .95)\n                      linkHover: rgba(255, 255, 255, .75)\n                      linkActive: rgba(255, 0, 0, .75)\n                      trackPlayed: rgba(255, 255, 255, .95)\n                      trackUnplayed: rgba(255, 255, 255, .1)\n                      trackBackground: rgba(0, 0, 0, 0)\n                      backgroundTop: rgba(72, 4, 45, 1)\n                      backgroundBottom: rgba(94, 95, 89, 1)\n                      backgroundText: rgba(255, 255, 255, .95)\n                      enableApi: true\n                      enableControls: true\n                      forceAutoplay: true\n                      hideTitle: false\n                      forceLoop: false\n                    pagination:\n                      currentPage: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 4\n                      currentPageItems: 4\n                      links:\n                      - rel: self\n                        uri: https://ws.api.video/players?currentPage=1\n                      - rel: first\n                        uri: https://ws.api.video/players?currentPage=1\n                      - rel: last\n                        uri: https://ws.api.video/players?currentPage=1\n              schema:\n                $ref: '#/components/schemas/player-themes-list-response'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    title: This parameter is out of the allowed range of values.\n                    name: page\n                    status: 400\n                    range:\n                      min: 1\n                    problems:\n                    - title: This parameter is out of the allowed range of values.\n                      name: page\n                      range:\n                        min: 1\n                    - title: This parameter is out of the allowed range of values.\n                      name: pageSize\n                      range:\n                        min: 10\n                        max: 100\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: List all player themes\n      tags:\n      - Player Themes\n      x-client-action: list\n      x-group-parameters: true\n      x-client-paginated: true\n      x-optional-object: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n    req := apivideosdk.PlayerThemesApiListRequest{}\\n    \\n\\\n            \\    req.SortBy(\\\"createdAt\\\") // string | createdAt is the time the player\\\n            \\ was created. updatedAt is the time the player was last updated. The\\\n            \\ time is presented in ISO-8601 format.\\n    req.SortOrder(\\\"asc\\\") //\\\n            \\ string | Allowed: asc, desc. Ascending for date and time means that\\\n            \\ earlier values precede later ones. Descending means that later values\\\n            \\ preced earlier ones.\\n    req.CurrentPage(int32(2)) // int32 | Choose\\\n            \\ the number of search results to return per page. Minimum value: 1 (default\\\n            \\ to 1)\\n    req.PageSize(int32(30)) // int32 | Results per page. Allowed\\\n            \\ values 1-100, default is 25. (default to 25)\\n\\n    res, err := client.PlayerThemes.List(req)\\n\\\n            \\    \\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when\\\n            \\ calling `PlayerThemes.List``: %v\\\\n\\\", err)\\n    }\\n    // response\\\n            \\ from `List`: PlayerThemesListResponse\\n    fmt.Fprintf(os.Stdout, \\\"\\\n            Response from `PlayerThemes.List`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const sortBy = 'createdAt'; // createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.\n                    const sortOrder = 'asc'; // Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.\n                    const currentPage = '2'; // Choose the number of search results to return per page. Minimum value: 1\n                    const pageSize = '30'; // Results per page. Allowed values 1-100, default is 25.\n\n                    // PlayerThemesListResponse\n                    const result = await client.playerThemes.list({ sortBy, sortOrder, currentPage, pageSize })\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import player_themes_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.player_themes_list_response import PlayerThemesListResponse\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = player_themes_api.PlayerThemesApi(api_client)\n                sort_by = \"createdAt\" # str | createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format. (optional)\n                sort_order = \"asc\" # str | Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. (optional)\n                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1\n                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # List all players\n                    api_response = api_instance.list(sort_by=sort_by, sort_order=sort_order, current_page=current_page, page_size=page_size)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling PlayerThemesApi-\u003elist: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String sortBy = \\\"createdAt\\\"; //\\\n            \\ createdAt is the time the player was created. updatedAt is the time\\\n            \\ the player was last updated. The time is presented in ISO-8601 format.\\n\\\n            \\    String sortOrder = \\\"asc\\\"; // Allowed: asc, desc. Ascending for\\\n            \\ date and time means that earlier values precede later ones. Descending\\\n            \\ means that later values preced earlier ones.\\n    Integer currentPage\\\n            \\ = 1; // Choose the number of search results to return per page. Minimum\\\n            \\ value: 1\\n    Integer pageSize = 25; // Results per page. Allowed values\\\n            \\ 1-100, default is 25.\\n\\n    try {\\n      Page\u003cPlayerTheme\u003e result =\\\n            \\ apiInstance.list()\\n            .sortBy(sortBy)\\n            .sortOrder(sortOrder)\\n\\\n            \\            .currentPage(currentPage)\\n            .pageSize(pageSize)\\n\\\n            \\            .execute();\\n      System.out.println(result);\\n    } catch\\\n            \\ (ApiException e) {\\n      System.err.println(\\\"Exception when calling\\\n            \\ PlayerThemesApi#list\\\");\\n      System.err.println(\\\"Status code: \\\"\\\n            \\ + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class listExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var sortBy = createdAt;  // string | createdAt is the time\\\n            \\ the player was created. updatedAt is the time the player was last updated.\\\n            \\ The time is presented in ISO-8601 format. (optional) \\n            var\\\n            \\ sortOrder = asc;  // string | Allowed: asc, desc. Ascending for date\\\n            \\ and time means that earlier values precede later ones. Descending means\\\n            \\ that later values preced earlier ones. (optional) \\n            var\\\n            \\ currentPage = 2;  // int? | Choose the number of search results to return\\\n            \\ per page. Minimum value: 1 (optional)  (default to 1)\\n            var\\\n            \\ pageSize = 30;  // int? | Results per page. Allowed values 1-100, default\\\n            \\ is 25. (optional)  (default to 25)\\n            var apiPlayerThemesInstance\\\n            \\ = apiInstance.PlayerThemes();\\n            try\\n            {\\n    \\\n            \\            // List all players\\n                PlayerThemesListResponse\\\n            \\ result = apiPlayerThemesInstance.list(sortBy, sortOrder, currentPage,\\\n            \\ pageSize);\\n                Debug.WriteLine(result);\\n            }\\n\\\n            \\            catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling PlayerThemesApi.list: \\\" + e.Message );\\n     \\\n            \\           Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n           \\\n            \\     Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n}\\n\"\n      x-accepts: application/json\n    post:\n      description: Create a player for your video, and customise it.\n      operationId: POST_players\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/player-theme-creation-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    updatedAt: 2020-01-13T10:09:17+00:00\n                    text: rgba(255, 255, 255, .95)\n                    link: rgba(255, 0, 0, .95)\n                    linkHover: rgba(255, 255, 255, .75)\n                    linkActive: rgba(255, 0, 0, .75)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    hideTitle: false\n                    forceLoop: false\n              schema:\n                $ref: '#/components/schemas/player-theme'\n          description: Created\n      security:\n      - bearerAuth: []\n      summary: Create a player\n      tags:\n      - Player Themes\n      x-client-action: create\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerThemeCreationPayload := *apivideosdk.NewPlayerThemeCreationPayload()\\\n            \\ // PlayerThemeCreationPayload | \\n\\n    \\n    res, err := client.PlayerThemes.Create(playerThemeCreationPayload)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `PlayerThemes.Create``: %v\\\\n\\\", err)\\n    }\\n    // response from `Create`:\\\n            \\ PlayerTheme\\n    fmt.Fprintf(os.Stdout, \\\"Response from `PlayerThemes.Create`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const playerThemeCreationPayload = {\\n      text: \\\"\\\n            text_example\\\", // RGBA color for timer text. Default: rgba(255, 255,\\\n            \\ 255, 1)\\n      link: \\\"link_example\\\", // RGBA color for all controls.\\\n            \\ Default: rgba(255, 255, 255, 1)\\n      linkHover: \\\"linkHover_example\\\"\\\n            , // RGBA color for all controls when hovered. Default: rgba(255, 255,\\\n            \\ 255, 1)\\n      trackPlayed: \\\"trackPlayed_example\\\", // RGBA color playback\\\n            \\ bar: played content. Default: rgba(88, 131, 255, .95)\\n      trackUnplayed:\\\n            \\ \\\"trackUnplayed_example\\\", // RGBA color playback bar: downloaded but\\\n            \\ unplayed (buffered) content. Default: rgba(255, 255, 255, .35)\\n   \\\n            \\   trackBackground: \\\"trackBackground_example\\\", // RGBA color playback\\\n            \\ bar: background. Default: rgba(255, 255, 255, .2)\\n      backgroundTop:\\\n            \\ \\\"backgroundTop_example\\\", // RGBA color: top 50% of background. Default:\\\n            \\ rgba(0, 0, 0, .7)\\n      backgroundBottom: \\\"backgroundBottom_example\\\"\\\n            , // RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\\n\\\n            \\      backgroundText: \\\"backgroundText_example\\\", // RGBA color for title\\\n            \\ text. Default: rgba(255, 255, 255, 1)\\n      enableApi: true, // enable/disable\\\n            \\ player SDK access. Default: true\\n      enableControls: true, // enable/disable\\\n            \\ player controls. Default: true\\n      forceAutoplay: true, // enable/disable\\\n            \\ player autoplay. Default: false\\n      hideTitle: true, // enable/disable\\\n            \\ title. Default: false\\n      forceLoop: true, // enable/disable looping.\\\n            \\ Default: false\\n    }; \\n\\n        // PlayerTheme\\n        const result\\\n            \\ = await client.playerThemes.create(playerThemeCreationPayload);\\n  \\\n            \\      console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import player_themes_api\\nfrom apivideo.model.player_theme_creation_payload\\\n            \\ import PlayerThemeCreationPayload\\nfrom apivideo.model.player_theme\\\n            \\ import PlayerTheme\\nfrom pprint import pprint\\n\\n# Enter a context with\\\n            \\ an instance of the API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__)\\\n            \\ as api_client:\\n    # Create an instance of the API class\\n    api_instance\\\n            \\ = player_themes_api.PlayerThemesApi(api_client)\\n    player_theme_creation_payload\\\n            \\ = PlayerThemeCreationPayload(\\n        text=\\\"text_example\\\",\\n    \\\n            \\    link=\\\"link_example\\\",\\n        link_hover=\\\"link_hover_example\\\"\\\n            ,\\n        track_played=\\\"track_played_example\\\",\\n        track_unplayed=\\\"\\\n            track_unplayed_example\\\",\\n        track_background=\\\"track_background_example\\\"\\\n            ,\\n        background_top=\\\"background_top_example\\\",\\n        background_bottom=\\\"\\\n            background_bottom_example\\\",\\n        background_text=\\\"background_text_example\\\"\\\n            ,\\n        enable_api=True,\\n        enable_controls=True,\\n        force_autoplay=False,\\n\\\n            \\        hide_title=False,\\n        force_loop=False,\\n    ) # PlayerThemeCreationPayload\\\n            \\ | \\n\\n    # example passing only required values which don't have defaults\\\n            \\ set\\n    try:\\n        # Create a player\\n        api_response = api_instance.create(player_theme_creation_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling PlayerThemesApi-\u003ecreate: %s\\\\\\\n            n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    PlayerThemeCreationPayload playerThemeCreationPayload\\\n            \\ = new PlayerThemeCreationPayload(); // \\n    playerThemeCreationPayload.setText(\\\"\\\n            \\\"null\\\"\\\"); // RGBA color for timer text. Default: rgba(255, 255, 255,\\\n            \\ 1)\\n    playerThemeCreationPayload.setLink(\\\"\\\"null\\\"\\\"); // RGBA color\\\n            \\ for all controls. Default: rgba(255, 255, 255, 1)\\n    playerThemeCreationPayload.setLinkHover(\\\"\\\n            \\\"null\\\"\\\"); // RGBA color for all controls when hovered. Default: rgba(255,\\\n            \\ 255, 255, 1)\\n    playerThemeCreationPayload.setTrackPlayed(\\\"\\\"null\\\"\\\n            \\\"); // RGBA color playback bar: played content. Default: rgba(88, 131,\\\n            \\ 255, .95)\\n    playerThemeCreationPayload.setTrackUnplayed(\\\"\\\"null\\\"\\\n            \\\"); // RGBA color playback bar: downloaded but unplayed (buffered) content.\\\n            \\ Default: rgba(255, 255, 255, .35)\\n    playerThemeCreationPayload.setTrackBackground(\\\"\\\n            \\\"null\\\"\\\"); // RGBA color playback bar: background. Default: rgba(255,\\\n            \\ 255, 255, .2)\\n    playerThemeCreationPayload.setBackgroundTop(\\\"\\\"\\\n            null\\\"\\\"); // RGBA color: top 50% of background. Default: rgba(0, 0, 0,\\\n            \\ .7)\\n    playerThemeCreationPayload.setBackgroundBottom(\\\"\\\"null\\\"\\\"\\\n            ); // RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\\n\\\n            \\    playerThemeCreationPayload.setBackgroundText(\\\"\\\"null\\\"\\\"); // RGBA\\\n            \\ color for title text. Default: rgba(255, 255, 255, 1)\\n    playerThemeCreationPayload.setEnableApi();\\\n            \\ // enable/disable player SDK access. Default: true\\n    playerThemeCreationPayload.setEnableControls();\\\n            \\ // enable/disable player controls. Default: true\\n    playerThemeCreationPayload.setForceAutoplay();\\\n            \\ // enable/disable player autoplay. Default: false\\n    playerThemeCreationPayload.setHideTitle();\\\n            \\ // enable/disable title. Default: false\\n    playerThemeCreationPayload.setForceLoop();\\\n            \\ // enable/disable looping. Default: false\\n\\n\\n    try {\\n      PlayerTheme\\\n            \\ result = apiInstance.create(playerThemeCreationPayload);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling PlayerThemesApi#create\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class createExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var playerThemeCreationPayload = new PlayerThemeCreationPayload();\\\n            \\ // PlayerThemeCreationPayload | \\n            var apiPlayerThemesInstance\\\n            \\ = apiInstance.PlayerThemes();\\n            try\\n            {\\n    \\\n            \\            // Create a player\\n                PlayerTheme result =\\\n            \\ apiPlayerThemesInstance.create(playerThemeCreationPayload);\\n      \\\n            \\          Debug.WriteLine(result);\\n            }\\n            catch\\\n            \\ (ApiException  e)\\n            {\\n                Debug.Print(\\\"Exception\\\n            \\ when calling PlayerThemesApi.create: \\\" + e.Message );\\n           \\\n            \\     Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n                Debug.Print(e.StackTrace);\\n\\\n            \\            }\\n        }\\n    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /players/{playerId}:\n    delete:\n      description: Delete a player if you no longer need it. You can delete any player\n        that you have the player ID for.\n      operationId: DELETE_players-playerId\n      parameters:\n      - description: The unique identifier for the player you want to delete.\n        example: pl45d5vFFGrfdsdsd156dGhh\n        explode: false\n        in: path\n        name: playerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: playerId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a player\n      tags:\n      - Player Themes\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerId := \\\"pl45d5vFFGrfdsdsd156dGhh\\\" // string\\\n            \\ | The unique identifier for the player you want to delete.\\n\\n    \\n\\\n            \\    err := client.PlayerThemes.Delete(playerId)\\n\\n    if err != nil\\\n            \\ {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `PlayerThemes.Delete``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique identifier for the player you want to delete.\n\n                    // void\n                    const result = await client.playerThemes.delete(playerId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import player_themes_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = player_themes_api.PlayerThemesApi(api_client)\n                player_id = \"pl45d5vFFGrfdsdsd156dGhh\" # str | The unique identifier for the player you want to delete.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a player\n                    api_instance.delete(player_id)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling PlayerThemesApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String playerId = \\\"pl45d5vFFGrfdsdsd156dGhh\\\"\\\n            ; // The unique identifier for the player you want to delete.\\n\\n    try\\\n            \\ {\\n      apiInstance.delete(playerId);\\n    } catch (ApiException e)\\\n            \\ {\\n      System.err.println(\\\"Exception when calling PlayerThemesApi#delete\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var playerId = pl45d5vFFGrfdsdsd156dGhh;  // string | The unique identifier for the player you want to delete.\n                        var apiPlayerThemesInstance = apiInstance.PlayerThemes();\n                        try\n                        {\n                            // Delete a player\n                            apiPlayerThemesInstance.delete(playerId);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling PlayerThemesApi.delete: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: Use a player ID to retrieve details about the player and display\n        it for viewers.\n      operationId: GET_players-playerId\n      parameters:\n      - description: 'The unique identifier for the player you want to retrieve. '\n        example: pl45d5vFFGrfdsdsd156dGhh\n        explode: false\n        in: path\n        name: playerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    updatedAt: 2020-01-13T11:12:14+00:00\n                    text: rgba(255, 255, 255, .95)\n                    link: rgba(255, 0, 0, .95)\n                    linkHover: rgba(255, 255, 255, .75)\n                    linkActive: rgba(255, 0, 0, .75)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    hideTitle: false\n                    forceLoop: false\n              schema:\n                $ref: '#/components/schemas/player-theme'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: playerId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Show a player\n      tags:\n      - Player Themes\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerId := \\\"pl45d5vFFGrfdsdsd156dGhh\\\" // string\\\n            \\ | The unique identifier for the player you want to retrieve. \\n\\n  \\\n            \\  \\n    res, err := client.PlayerThemes.Get(playerId)\\n\\n    if err !=\\\n            \\ nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling `PlayerThemes.Get``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `Get`: PlayerTheme\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `PlayerThemes.Get`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique\\\n            \\ identifier for the player you want to retrieve. \\n\\n        // PlayerTheme\\n\\\n            \\        const result = await client.playerThemes.get(playerId);\\n   \\\n            \\     console.log(result);\\n    } catch (e) {\\n        console.error(e);\\n\\\n            \\    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import player_themes_api\\nfrom apivideo.model.not_found\\\n            \\ import NotFound\\nfrom apivideo.model.player_theme import PlayerTheme\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = player_themes_api.PlayerThemesApi(api_client)\\n\\\n            \\    player_id = \\\"pl45d5vFFGrfdsdsd156dGhh\\\" # str | The unique identifier\\\n            \\ for the player you want to retrieve. \\n\\n    # example passing only\\\n            \\ required values which don't have defaults set\\n    try:\\n        # Show\\\n            \\ a player\\n        api_response = api_instance.get(player_id)\\n     \\\n            \\   pprint(api_response)\\n    except apivideo.ApiException as e:\\n   \\\n            \\     print(\\\"Exception when calling PlayerThemesApi-\u003eget: %s\\\\n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String playerId = \\\"pl45d5vFFGrfdsdsd156dGhh\\\"\\\n            ; // The unique identifier for the player you want to retrieve. \\n\\n \\\n            \\   try {\\n      PlayerTheme result = apiInstance.get(playerId);\\n   \\\n            \\   System.out.println(result);\\n    } catch (ApiException e) {\\n    \\\n            \\  System.err.println(\\\"Exception when calling PlayerThemesApi#get\\\");\\n\\\n            \\      System.err.println(\\\"Status code: \\\" + e.getCode());\\n      System.err.println(\\\"\\\n            Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"Response headers:\\\n            \\ \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n \\\n            \\ }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class getExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var playerId = pl45d5vFFGrfdsdsd156dGhh;  // string | The\\\n            \\ unique identifier for the player you want to retrieve. \\n          \\\n            \\  var apiPlayerThemesInstance = apiInstance.PlayerThemes();\\n       \\\n            \\     try\\n            {\\n                // Show a player\\n         \\\n            \\       PlayerTheme result = apiPlayerThemesInstance.get(playerId);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling PlayerThemesApi.get: \\\" + e.Message );\\n      \\\n            \\          Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n            \\\n            \\    Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n}\\n\"\n      x-accepts: application/json\n    patch:\n      description: 'Use a player ID to update specific details for a player. NOTE:\n        It may take up to 10 min before the new player configuration is available\n        from our CDN.'\n      operationId: PATCH_players-playerId\n      parameters:\n      - description: The unique identifier for the player.\n        example: pl45d5vFFGrfdsdsd156dGhh\n        explode: false\n        in: path\n        name: playerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/player-theme-update-payload'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    playerId: pl45d5vFFGrfdsdsd156dGhh\n                    createdAt: 2020-01-13T10:09:17+00:00\n                    updatedAt: 2020-01-13T11:12:14+00:00\n                    text: rgba(255, 255, 255, .95)\n                    link: rgba(255, 0, 0, .95)\n                    linkHover: rgba(255, 255, 255, .75)\n                    linkActive: rgba(255, 0, 0, .75)\n                    trackPlayed: rgba(255, 255, 255, .95)\n                    trackUnplayed: rgba(255, 255, 255, .1)\n                    trackBackground: rgba(0, 0, 0, 0)\n                    backgroundTop: rgba(72, 4, 45, 1)\n                    backgroundBottom: rgba(94, 95, 89, 1)\n                    backgroundText: rgba(255, 255, 255, .95)\n                    enableApi: false\n                    enableControls: false\n                    forceAutoplay: false\n                    hideTitle: false\n                    forceLoop: false\n              schema:\n                $ref: '#/components/schemas/player-theme'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: playerId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Update a player\n      tags:\n      - Player Themes\n      x-client-action: update\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerId := \\\"pl45d5vFFGrfdsdsd156dGhh\\\" // string\\\n            \\ | The unique identifier for the player.\\n    playerThemeUpdatePayload\\\n            \\ := *apivideosdk.NewPlayerThemeUpdatePayload() // PlayerThemeUpdatePayload\\\n            \\ | \\n\\n    \\n    res, err := client.PlayerThemes.Update(playerId, playerThemeUpdatePayload)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `PlayerThemes.Update``: %v\\\\n\\\", err)\\n    }\\n    // response from `Update`:\\\n            \\ PlayerTheme\\n    fmt.Fprintf(os.Stdout, \\\"Response from `PlayerThemes.Update`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const playerId = 'pl45d5vFFGrfdsdsd156dGhh'; // The unique\\\n            \\ identifier for the player.\\n        const playerThemeUpdatePayload =\\\n            \\ {\\n      text: \\\"text_example\\\", // RGBA color for timer text. Default:\\\n            \\ rgba(255, 255, 255, 1)\\n      link: \\\"link_example\\\", // RGBA color\\\n            \\ for all controls. Default: rgba(255, 255, 255, 1)\\n      linkHover:\\\n            \\ \\\"linkHover_example\\\", // RGBA color for all controls when hovered.\\\n            \\ Default: rgba(255, 255, 255, 1)\\n      trackPlayed: \\\"trackPlayed_example\\\"\\\n            , // RGBA color playback bar: played content. Default: rgba(88, 131, 255,\\\n            \\ .95)\\n      trackUnplayed: \\\"trackUnplayed_example\\\", // RGBA color\\\n            \\ playback bar: downloaded but unplayed (buffered) content. Default: rgba(255,\\\n            \\ 255, 255, .35)\\n      trackBackground: \\\"trackBackground_example\\\",\\\n            \\ // RGBA color playback bar: background. Default: rgba(255, 255, 255,\\\n            \\ .2)\\n      backgroundTop: \\\"backgroundTop_example\\\", // RGBA color:\\\n            \\ top 50% of background. Default: rgba(0, 0, 0, .7)\\n      backgroundBottom:\\\n            \\ \\\"backgroundBottom_example\\\", // RGBA color: bottom 50% of background.\\\n            \\ Default: rgba(0, 0, 0, .7)\\n      backgroundText: \\\"backgroundText_example\\\"\\\n            , // RGBA color for title text. Default: rgba(255, 255, 255, 1)\\n    \\\n            \\  enableApi: true, // enable/disable player SDK access. Default: true\\n\\\n            \\      enableControls: true, // enable/disable player controls. Default:\\\n            \\ true\\n      forceAutoplay: true, // enable/disable player autoplay.\\\n            \\ Default: false\\n      hideTitle: true, // enable/disable title. Default:\\\n            \\ false\\n      forceLoop: true, // enable/disable looping. Default: false\\n\\\n            \\    }; \\n\\n        // PlayerTheme\\n        const result = await client.playerThemes.update(playerId,\\\n            \\ playerThemeUpdatePayload);\\n        console.log(result);\\n    } catch\\\n            \\ (e) {\\n        console.error(e);\\n    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import player_themes_api\\nfrom apivideo.model.not_found\\\n            \\ import NotFound\\nfrom apivideo.model.player_theme import PlayerTheme\\n\\\n            from apivideo.model.player_theme_update_payload import PlayerThemeUpdatePayload\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = player_themes_api.PlayerThemesApi(api_client)\\n\\\n            \\    player_id = \\\"pl45d5vFFGrfdsdsd156dGhh\\\" # str | The unique identifier\\\n            \\ for the player.\\n    player_theme_update_payload = PlayerThemeUpdatePayload(\\n\\\n            \\        text=\\\"text_example\\\",\\n        link=\\\"link_example\\\",\\n    \\\n            \\    link_hover=\\\"link_hover_example\\\",\\n        track_played=\\\"track_played_example\\\"\\\n            ,\\n        track_unplayed=\\\"track_unplayed_example\\\",\\n        track_background=\\\"\\\n            track_background_example\\\",\\n        background_top=\\\"background_top_example\\\"\\\n            ,\\n        background_bottom=\\\"background_bottom_example\\\",\\n        background_text=\\\"\\\n            background_text_example\\\",\\n        enable_api=True,\\n        enable_controls=True,\\n\\\n            \\        force_autoplay=True,\\n        hide_title=True,\\n        force_loop=True,\\n\\\n            \\    ) # PlayerThemeUpdatePayload | \\n\\n    # example passing only required\\\n            \\ values which don't have defaults set\\n    try:\\n        # Update a player\\n\\\n            \\        api_response = api_instance.update(player_id, player_theme_update_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling PlayerThemesApi-\u003eupdate: %s\\\\\\\n            n\\\" % e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String playerId = \\\"pl45d5vFFGrfdsdsd156dGhh\\\"\\\n            ; // The unique identifier for the player.\\n    PlayerThemeUpdatePayload\\\n            \\ playerThemeUpdatePayload = new PlayerThemeUpdatePayload(); // \\n   \\\n            \\ playerThemeUpdatePayload.setText(\\\"\\\"null\\\"\\\"); // RGBA color for timer\\\n            \\ text. Default: rgba(255, 255, 255, 1)\\n    playerThemeUpdatePayload.setLink(\\\"\\\n            \\\"null\\\"\\\"); // RGBA color for all controls. Default: rgba(255, 255, 255,\\\n            \\ 1)\\n    playerThemeUpdatePayload.setLinkHover(\\\"\\\"null\\\"\\\"); // RGBA\\\n            \\ color for all controls when hovered. Default: rgba(255, 255, 255, 1)\\n\\\n            \\    playerThemeUpdatePayload.setTrackPlayed(\\\"\\\"null\\\"\\\"); // RGBA color\\\n            \\ playback bar: played content. Default: rgba(88, 131, 255, .95)\\n   \\\n            \\ playerThemeUpdatePayload.setTrackUnplayed(\\\"\\\"null\\\"\\\"); // RGBA color\\\n            \\ playback bar: downloaded but unplayed (buffered) content. Default: rgba(255,\\\n            \\ 255, 255, .35)\\n    playerThemeUpdatePayload.setTrackBackground(\\\"\\\"\\\n            null\\\"\\\"); // RGBA color playback bar: background. Default: rgba(255,\\\n            \\ 255, 255, .2)\\n    playerThemeUpdatePayload.setBackgroundTop(\\\"\\\"null\\\"\\\n            \\\"); // RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)\\n\\\n            \\    playerThemeUpdatePayload.setBackgroundBottom(\\\"\\\"null\\\"\\\"); // RGBA\\\n            \\ color: bottom 50% of background. Default: rgba(0, 0, 0, .7)\\n    playerThemeUpdatePayload.setBackgroundText(\\\"\\\n            \\\"null\\\"\\\"); // RGBA color for title text. Default: rgba(255, 255, 255,\\\n            \\ 1)\\n    playerThemeUpdatePayload.setEnableApi(); // enable/disable player\\\n            \\ SDK access. Default: true\\n    playerThemeUpdatePayload.setEnableControls();\\\n            \\ // enable/disable player controls. Default: true\\n    playerThemeUpdatePayload.setForceAutoplay();\\\n            \\ // enable/disable player autoplay. Default: false\\n    playerThemeUpdatePayload.setHideTitle();\\\n            \\ // enable/disable title. Default: false\\n    playerThemeUpdatePayload.setForceLoop();\\\n            \\ // enable/disable looping. Default: false\\n\\n\\n    try {\\n      PlayerTheme\\\n            \\ result = apiInstance.update(playerId, playerThemeUpdatePayload);\\n \\\n            \\     System.out.println(result);\\n    } catch (ApiException e) {\\n  \\\n            \\    System.err.println(\\\"Exception when calling PlayerThemesApi#update\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class updateExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var playerId = pl45d5vFFGrfdsdsd156dGhh;  // string | The\\\n            \\ unique identifier for the player.\\n            var playerThemeUpdatePayload\\\n            \\ = new PlayerThemeUpdatePayload(); // PlayerThemeUpdatePayload | \\n \\\n            \\           var apiPlayerThemesInstance = apiInstance.PlayerThemes();\\n\\\n            \\            try\\n            {\\n                // Update a player\\n\\\n            \\                PlayerTheme result = apiPlayerThemesInstance.update(playerId,\\\n            \\ playerThemeUpdatePayload);\\n                Debug.WriteLine(result);\\n\\\n            \\            }\\n            catch (ApiException  e)\\n            {\\n \\\n            \\               Debug.Print(\\\"Exception when calling PlayerThemesApi.update:\\\n            \\ \\\" + e.Message );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n\\\n            \\                Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /players/{playerId}/logo:\n    delete:\n      operationId: DELETE_players-playerId-logo\n      parameters:\n      - description: The unique identifier for the player.\n        example: pl14Db6oMJRH6SRVoOwORacK\n        explode: false\n        in: path\n        name: playerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: playerId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete logo\n      tags:\n      - Player Themes\n      x-client-action: deleteLogo\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerId := \\\"pl14Db6oMJRH6SRVoOwORacK\\\" // string\\\n            \\ | The unique identifier for the player.\\n\\n    \\n    err := client.PlayerThemes.DeleteLogo(playerId)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `PlayerThemes.DeleteLogo``: %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const playerId = 'pl14Db6oMJRH6SRVoOwORacK'; // The unique identifier for the player.\n\n                    // void\n                    const result = await client.playerThemes.deleteLogo(playerId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import player_themes_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = player_themes_api.PlayerThemesApi(api_client)\n                player_id = \"pl14Db6oMJRH6SRVoOwORacK\" # str | The unique identifier for the player.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete logo\n                    api_instance.delete_logo(player_id)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling PlayerThemesApi-\u003edelete_logo: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String playerId = \\\"pl14Db6oMJRH6SRVoOwORacK\\\"\\\n            ; // The unique identifier for the player.\\n\\n    try {\\n      apiInstance.deleteLogo(playerId);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling PlayerThemesApi#deleteLogo\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteLogoExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var playerId = pl14Db6oMJRH6SRVoOwORacK;  // string | The unique identifier for the player.\n                        var apiPlayerThemesInstance = apiInstance.PlayerThemes();\n                        try\n                        {\n                            // Delete logo\n                            apiPlayerThemesInstance.deleteLogo(playerId);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling PlayerThemesApi.deleteLogo: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    post:\n      description: The uploaded image maximum size should be 200x100 and its weight\n        should be 100KB.  It will be scaled down to 30px height and converted to PNG\n        to be displayed in the player.\n      operationId: POST_players-playerId-logo\n      parameters:\n      - description: The unique identifier for the player.\n        example: pl14Db6oMJRH6SRVoOwORacK\n        explode: false\n        in: path\n        name: playerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/player-theme-upload-logo-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/player-theme'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    status: 400\n                    type: https://docs.api.video/docs/fileextension\n                    title: Only ['jpg', 'JPG', 'jpeg', 'JPEG', 'png', 'PNG'] extensions\n                      are supported.\n                    name: file\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: playerId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Upload a logo\n      tags:\n      - Player Themes\n      x-client-action: uploadLogo\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    playerId := \\\"pl14Db6oMJRH6SRVoOwORacK\\\" // string\\\n            \\ | The unique identifier for the player.\\n    file := os.NewFile(1234,\\\n            \\ \\\"some_file\\\") // *os.File | The name of the file you want to use for\\\n            \\ your logo.\\n    link := \\\"link_example\\\" // string | A public link that\\\n            \\ you want to advertise in your player. For example, you could add a link\\\n            \\ to your company. When a viewer clicks on your logo, they will be taken\\\n            \\ to this address.\\n\\n    \\n    res, err := client.PlayerThemes.UploadLogoFile(playerId,\\\n            \\ file)\\n\\n    // you can also use a Reader instead of a File:\\n    //\\\n            \\ client.PlayerThemes.UploadLogo(playerId, fileName, fileReader)\\n\\n \\\n            \\   if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `PlayerThemes.UploadLogo``: %v\\\\n\\\", err)\\n    }\\n    // response from\\\n            \\ `UploadLogo`: PlayerTheme\\n    fmt.Fprintf(os.Stdout, \\\"Response from\\\n            \\ `PlayerThemes.UploadLogo`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const playerId = 'pl14Db6oMJRH6SRVoOwORacK'; // The unique identifier for the player.\n                    const file = 'BINARY_DATA_HERE'; // The name of the file you want to use for your logo.\n                    const link = 'link_example'; // A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address.\n\n                    // PlayerTheme\n                    const result = await client.playerThemes.uploadLogo(playerId, file, link);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import player_themes_api\n            from apivideo.model.bad_request import BadRequest\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.player_theme import PlayerTheme\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = player_themes_api.PlayerThemesApi(api_client)\n                player_id = \"pl14Db6oMJRH6SRVoOwORacK\" # str | The unique identifier for the player.\n                file = open('/path/to/file', 'rb') # file_type | The name of the file you want to use for your logo.\n                link = \"https://my-company.com\" # str | A public link that you want to advertise in your player. For example, you could add a link to your company. When a viewer clicks on your logo, they will be taken to this address. (optional)\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Upload a logo\n                    api_response = api_instance.upload_logo(player_id, file)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling PlayerThemesApi-\u003eupload_logo: %s\\n\" % e)\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # Upload a logo\n                    api_response = api_instance.upload_logo(player_id, file, link=link)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling PlayerThemesApi-\u003eupload_logo: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.PlayerThemesApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    PlayerThemesApi apiInstance\\\n            \\ = client.playerThemes();\\n    \\n    String playerId = \\\"pl14Db6oMJRH6SRVoOwORacK\\\"\\\n            ; // The unique identifier for the player.\\n    File file = new File(\\\"\\\n            /path/to/file\\\"); // The name of the file you want to use for your logo.\\n\\\n            \\    String link = \\\"link_example\\\"; // A public link that you want to\\\n            \\ advertise in your player. For example, you could add a link to your\\\n            \\ company. When a viewer clicks on your logo, they will be taken to this\\\n            \\ address.\\n\\n    try {\\n      PlayerTheme result = apiInstance.uploadLogo(playerId,\\\n            \\ file, link);\\n      System.out.println(result);\\n    } catch (ApiException\\\n            \\ e) {\\n      System.err.println(\\\"Exception when calling PlayerThemesApi#uploadLogo\\\"\\\n            );\\n      System.err.println(\\\"Status code: \\\" + e.getCode());\\n     \\\n            \\ System.err.println(\\\"Reason: \\\" + e.getMessage());\\n      System.err.println(\\\"\\\n            Response headers: \\\" + e.getResponseHeaders());\\n      e.printStackTrace();\\n\\\n            \\    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class uploadLogoExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var playerId = pl14Db6oMJRH6SRVoOwORacK;  // string | The\\\n            \\ unique identifier for the player.\\n            var file = BINARY_DATA_HERE;\\\n            \\  // System.IO.Stream | The name of the file you want to use for your\\\n            \\ logo.\\n            var link = link_example;  // string | A public link\\\n            \\ that you want to advertise in your player. For example, you could add\\\n            \\ a link to your company. When a viewer clicks on your logo, they will\\\n            \\ be taken to this address. (optional) \\n            var apiPlayerThemesInstance\\\n            \\ = apiInstance.PlayerThemes();\\n            try\\n            {\\n    \\\n            \\            // Upload a logo\\n                PlayerTheme result = apiPlayerThemesInstance.uploadLogo(playerId,\\\n            \\ file, link);\\n                Debug.WriteLine(result);\\n           \\\n            \\ }\\n            catch (ApiException  e)\\n            {\\n            \\\n            \\    Debug.Print(\\\"Exception when calling PlayerThemesApi.uploadLogo:\\\n            \\ \\\" + e.Message );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n\\\n            \\                Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n}\\n\"\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n  /analytics/videos/{videoId}:\n    get:\n      description: Retrieve all available user sessions for a specific video. Tutorials\n        that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).\n      operationId: GET_analytics-videos-videoId\n      parameters:\n      - description: The unique identifier for the video you want to retrieve session\n          information for.\n        example: vi4k0jvEUuaTdRAEjQ4Prklg\n        explode: false\n        in: path\n        name: videoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: \"Period must have one of the following formats: \\n- For a day\\\n          \\ : 2018-01-01,\\n- For a week: 2018-W01, \\n- For a month: 2018-01\\n- For\\\n          \\ a year: 2018\\nFor a range period: \\n-  Date range: 2018-01-01/2018-01-15\\n\"\n        explode: true\n        in: query\n        name: period\n        required: false\n        schema:\n          format: period\n          type: string\n        style: form\n      - description: Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata)\n          filter. Send an array of key value pairs you want to filter sessios with.\n        example: metadata[Author]=John Doe\u0026metadata[Format]=Tutorial\n        explode: true\n        in: query\n        name: metadata\n        required: false\n        schema:\n          additionalProperties:\n            type: string\n          type: object\n        style: deepObject\n        x-is-deep-object: true\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - session:\n                        sessionId: psEmFwGQUAXR2lFHj5nDOpy\n                        loadedAt: 2019-06-24T11:45:01.109+00\n                        endedAt: 2019-06-24T11:49:19.243+00\n                      location:\n                        country: France\n                        city: Paris\n                      referrer:\n                        url: https://api.video\n                        medium: organic\n                        source: https://google.com\n                        searchTerm: video encoding hosting and delivery\n                      device:\n                        type: desktop\n                        vendor: Dell\n                        model: unknown\n                      os:\n                        name: Microsoft Windows\n                        shortname: W10\n                        version: Windows10\n                      client:\n                        type: browser\n                        name: Firefox\n                        version: \"67.0\"\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 1\n                      links:\n                      - rel: self\n                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /analytics/sessions/psEmFwGQUAXR2lFHj5nDOpy?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/raw-statistics-list-sessions-response'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: List video player sessions\n      tags:\n      - Raw statistics\n      x-client-action: listVideoSessions\n      x-group-parameters: true\n      x-client-paginated: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n    req := apivideosdk.RawStatisticsApiListVideoSessionsRequest{}\\n\\\n            \\    \\n    req.VideoId(\\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\") // string | The unique\\\n            \\ identifier for the video you want to retrieve session information for.\\n\\\n            \\    req.Period(\\\"period_example\\\") // string | Period must have one of\\\n            \\ the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,\\\n            \\ - For a month: 2018-01 - For a year: 2018  For a range period: -  Date\\\n            \\ range: 2018-01-01/2018-01-15 \\n    req.Metadata(map[string]string{\\\"\\\n            key\\\": \\\"Inner_example\\\"}) // map[string]string | Metadata and Dynamic\\\n            \\ Metadata filter. Send an array of key value pairs you want to filter\\\n            \\ sessios with.\\n    req.CurrentPage(int32(2)) // int32 | Choose the number\\\n            \\ of search results to return per page. Minimum value: 1 (default to 1)\\n\\\n            \\    req.PageSize(int32(30)) // int32 | Results per page. Allowed values\\\n            \\ 1-100, default is 25. (default to 25)\\n\\n    res, err := client.RawStatistics.ListVideoSessions(videoId\\\n            \\ string, req)\\n    \\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `RawStatistics.ListVideoSessions``: %v\\\\n\\\", err)\\n\\\n            \\    }\\n    // response from `ListVideoSessions`: RawStatisticsListSessionsResponse\\n\\\n            \\    fmt.Fprintf(os.Stdout, \\\"Response from `RawStatistics.ListVideoSessions`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const videoId = 'vi4k0jvEUuaTdRAEjQ4Prklg'; // The unique\\\n            \\ identifier for the video you want to retrieve session information for.\\n\\\n            \\        const period = 'period_example'; // Period must have one of the\\\n            \\ following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,\\\n            \\ - For a month: 2018-01 - For a year: 2018  For a range period: -  Date\\\n            \\ range: 2018-01-01/2018-01-15 \\n        const metadata = 'metadata[Author]=John\\\n            \\ Doe\u0026metadata[Format]=Tutorial'; // Metadata and Dynamic Metadata filter.\\\n            \\ Send an array of key value pairs you want to filter sessios with.\\n\\\n            \\        const currentPage = '2'; // Choose the number of search results\\\n            \\ to return per page. Minimum value: 1\\n        const pageSize = '30';\\\n            \\ // Results per page. Allowed values 1-100, default is 25.\\n\\n      \\\n            \\  // RawStatisticsListSessionsResponse\\n        const result = await\\\n            \\ client.rawStatistics.listVideoSessions({ videoId, period, metadata,\\\n            \\ currentPage, pageSize })\\n        console.log(result);\\n    } catch\\\n            \\ (e) {\\n        console.error(e);\\n    }\\n})();\\n\"\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import raw_statistics_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.raw_statistics_list_sessions_response import RawStatisticsListSessionsResponse\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = raw_statistics_api.RawStatisticsApi(api_client)\n                video_id = \"vi4k0jvEUuaTdRAEjQ4Prklg\" # str | The unique identifier for the video you want to retrieve session information for.\n                period = \"period_example\" # str | Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01, - For a month: 2018-01 - For a year: 2018  For a range period: -  Date range: 2018-01-01/2018-01-15  (optional)\n                metadata = {\n                    \"key\": \"key_example\",\n                } # {str: (str,)} | Metadata and Dynamic Metadata filter. Send an array of key value pairs you want to filter sessios with. (optional)\n                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1\n                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # List video player sessions\n                    api_response = api_instance.list_video_sessions(video_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_video_sessions: %s\\n\" % e)\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # List video player sessions\n                    api_response = api_instance.list_video_sessions(video_id, period=period, metadata=metadata, current_page=current_page, page_size=page_size)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_video_sessions: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.RawStatisticsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    RawStatisticsApi apiInstance\\\n            \\ = client.rawStatistics();\\n    \\n    String videoId = \\\"vi4k0jvEUuaTdRAEjQ4Prklg\\\"\\\n            ; // The unique identifier for the video you want to retrieve session\\\n            \\ information for.\\n    String period = \\\"period_example\\\"; // Period\\\n            \\ must have one of the following formats:  - For a day : 2018-01-01, -\\\n            \\ For a week: 2018-W01, - For a month: 2018-01 - For a year: 2018  For\\\n            \\ a range period: -  Date range: 2018-01-01/2018-01-15 \\n    Map\u003cString,\\\n            \\ String\u003e metadata = new HashMap(); // Metadata and Dynamic Metadata filter.\\\n            \\ Send an array of key value pairs you want to filter sessios with.\\n\\\n            \\    Integer currentPage = 1; // Choose the number of search results to\\\n            \\ return per page. Minimum value: 1\\n    Integer pageSize = 25; // Results\\\n            \\ per page. Allowed values 1-100, default is 25.\\n\\n    try {\\n      Page\u003cVideoSession\u003e\\\n            \\ result = apiInstance.listVideoSessions(videoId)\\n            .period(period)\\n\\\n            \\            .metadata(metadata)\\n            .currentPage(currentPage)\\n\\\n            \\            .pageSize(pageSize)\\n            .execute();\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling RawStatisticsApi#listVideoSessions\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class listVideoSessionsExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var videoId = vi4k0jvEUuaTdRAEjQ4Prklg;  // string | The\\\n            \\ unique identifier for the video you want to retrieve session information\\\n            \\ for.\\n            var period = period_example;  // string | Period must\\\n            \\ have one of the following formats:  - For a day : 2018-01-01, - For\\\n            \\ a week: 2018-W01, - For a month: 2018-01 - For a year: 2018  For a range\\\n            \\ period: -  Date range: 2018-01-01/2018-01-15  (optional) \\n        \\\n            \\    var metadata = new Dictionary\u003cstring, string\u003e(); // Dictionary\u003cstring,\\\n            \\ string\u003e | Metadata and Dynamic Metadata filter. Send an array of key\\\n            \\ value pairs you want to filter sessios with. (optional) \\n         \\\n            \\   var currentPage = 2;  // int? | Choose the number of search results\\\n            \\ to return per page. Minimum value: 1 (optional)  (default to 1)\\n  \\\n            \\          var pageSize = 30;  // int? | Results per page. Allowed values\\\n            \\ 1-100, default is 25. (optional)  (default to 25)\\n            var apiRawStatisticsInstance\\\n            \\ = apiInstance.RawStatistics();\\n            try\\n            {\\n   \\\n            \\             // List video player sessions\\n                RawStatisticsListSessionsResponse\\\n            \\ result = apiRawStatisticsInstance.listVideoSessions(videoId, period,\\\n            \\ metadata, currentPage, pageSize);\\n                Debug.WriteLine(result);\\n\\\n            \\            }\\n            catch (ApiException  e)\\n            {\\n \\\n            \\               Debug.Print(\\\"Exception when calling RawStatisticsApi.listVideoSessions:\\\n            \\ \\\" + e.Message );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n\\\n            \\                Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n}\\n\"\n      x-accepts: application/json\n  /analytics/live-streams/{liveStreamId}:\n    get:\n      operationId: GET_analytics-live-streams-liveStreamId\n      parameters:\n      - description: The unique identifier for the live stream you want to retrieve\n          analytics for.\n        example: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        explode: false\n        in: path\n        name: liveStreamId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: \"Period must have one of the following formats: \\n- For a day\\\n          \\ : \\\"2018-01-01\\\",\\n- For a week: \\\"2018-W01\\\", \\n- For a month: \\\"2018-01\\\"\\\n          \\n- For a year: \\\"2018\\\"\\nFor a range period: \\n-  Date range: \\\"2018-01-01/2018-01-15\\\"\\\n          \\n\"\n        example: 2019-01-01\n        explode: true\n        in: query\n        name: period\n        required: false\n        schema:\n          format: period\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - session:\n                        sessionId: ps4zRWVOv2If2vzKJLMr3jQo\n                        loadedAt: 2018-09-11T13:04:37.89+00\n                        endedAt: 2018-09-11T14:47:22.186+00\n                      location:\n                        country: France\n                        city: Paris\n                      referrer:\n                        url: unknown\n                        medium: unknown\n                        source: unknown\n                        searchTerm: unknown\n                      device:\n                        type: desktop\n                        vendor: unknown\n                        model: unknown\n                      os:\n                        name: unknown\n                        shortname: unknown\n                        version: unknown\n                      client:\n                        type: browser\n                        name: Firefox\n                        version: \"61.0\"\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 1\n                      links:\n                      - rel: self\n                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n                      - rel: last\n                        uri: /analytics/sessions/ps4zRWVOv2If2vzKJLMr3jQo?currentPage=1\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/raw-statistics-list-live-stream-analytics-response'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: liveStreamId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: List live stream player sessions\n      tags:\n      - Raw statistics\n      x-client-action: listLiveStreamSessions\n      x-group-parameters: true\n      x-client-paginated: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n    req := apivideosdk.RawStatisticsApiListLiveStreamSessionsRequest{}\\n\\\n            \\    \\n    req.LiveStreamId(\\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\") // string |\\\n            \\ The unique identifier for the live stream you want to retrieve analytics\\\n            \\ for.\\n    req.Period(\\\"2019-01-01\\\") // string | Period must have one\\\n            \\ of the following formats:  - For a day : \\\\\\\"2018-01-01\\\\\\\", - For a\\\n            \\ week: \\\\\\\"2018-W01\\\\\\\", - For a month: \\\\\\\"2018-01\\\\\\\" - For a year:\\\n            \\ \\\\\\\"2018\\\\\\\"  For a range period: -  Date range: \\\\\\\"2018-01-01/2018-01-15\\\\\\\n            \\\" \\n    req.CurrentPage(int32(2)) // int32 | Choose the number of search\\\n            \\ results to return per page. Minimum value: 1 (default to 1)\\n    req.PageSize(int32(30))\\\n            \\ // int32 | Results per page. Allowed values 1-100, default is 25. (default\\\n            \\ to 25)\\n\\n    res, err := client.RawStatistics.ListLiveStreamSessions(liveStreamId\\\n            \\ string, req)\\n    \\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr,\\\n            \\ \\\"Error when calling `RawStatistics.ListLiveStreamSessions``: %v\\\\n\\\"\\\n            , err)\\n    }\\n    // response from `ListLiveStreamSessions`: RawStatisticsListLiveStreamAnalyticsResponse\\n\\\n            \\    fmt.Fprintf(os.Stdout, \\\"Response from `RawStatistics.ListLiveStreamSessions`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const liveStreamId = 'vi4k0jvEUuaTdRAEjQ4Jfrgz'; // The\\\n            \\ unique identifier for the live stream you want to retrieve analytics\\\n            \\ for.\\n        const period = '2019-01-01'; // Period must have one of\\\n            \\ the following formats:  - For a day : \\\\\\\"2018-01-01\\\\\\\", - For a week:\\\n            \\ \\\\\\\"2018-W01\\\\\\\", - For a month: \\\\\\\"2018-01\\\\\\\" - For a year: \\\\\\\"\\\n            2018\\\\\\\"  For a range period: -  Date range: \\\\\\\"2018-01-01/2018-01-15\\\\\\\n            \\\" \\n        const currentPage = '2'; // Choose the number of search results\\\n            \\ to return per page. Minimum value: 1\\n        const pageSize = '30';\\\n            \\ // Results per page. Allowed values 1-100, default is 25.\\n\\n      \\\n            \\  // RawStatisticsListLiveStreamAnalyticsResponse\\n        const result\\\n            \\ = await client.rawStatistics.listLiveStreamSessions({ liveStreamId,\\\n            \\ period, currentPage, pageSize })\\n        console.log(result);\\n   \\\n            \\ } catch (e) {\\n        console.error(e);\\n    }\\n})();\\n\"\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import raw_statistics_api\n            from apivideo.model.raw_statistics_list_live_stream_analytics_response import RawStatisticsListLiveStreamAnalyticsResponse\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = raw_statistics_api.RawStatisticsApi(api_client)\n                live_stream_id = \"vi4k0jvEUuaTdRAEjQ4Jfrgz\" # str | The unique identifier for the live stream you want to retrieve analytics for.\n                period = \"2019-01-01\" # str | Period must have one of the following formats:  - For a day : \\\"2018-01-01\\\", - For a week: \\\"2018-W01\\\", - For a month: \\\"2018-01\\\" - For a year: \\\"2018\\\"  For a range period: -  Date range: \\\"2018-01-01/2018-01-15\\\"  (optional)\n                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1\n                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # List live stream player sessions\n                    api_response = api_instance.list_live_stream_sessions(live_stream_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_live_stream_sessions: %s\\n\" % e)\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # List live stream player sessions\n                    api_response = api_instance.list_live_stream_sessions(live_stream_id, period=period, current_page=current_page, page_size=page_size)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_live_stream_sessions: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.RawStatisticsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    RawStatisticsApi apiInstance\\\n            \\ = client.rawStatistics();\\n    \\n    String liveStreamId = \\\"vi4k0jvEUuaTdRAEjQ4Jfrgz\\\"\\\n            ; // The unique identifier for the live stream you want to retrieve analytics\\\n            \\ for.\\n    String period = \\\"2019-01-01\\\"; // Period must have one of\\\n            \\ the following formats:  - For a day : \\\\\\\"2018-01-01\\\\\\\", - For a week:\\\n            \\ \\\\\\\"2018-W01\\\\\\\", - For a month: \\\\\\\"2018-01\\\\\\\" - For a year: \\\\\\\"\\\n            2018\\\\\\\"  For a range period: -  Date range: \\\\\\\"2018-01-01/2018-01-15\\\\\\\n            \\\" \\n    Integer currentPage = 1; // Choose the number of search results\\\n            \\ to return per page. Minimum value: 1\\n    Integer pageSize = 25; //\\\n            \\ Results per page. Allowed values 1-100, default is 25.\\n\\n    try {\\n\\\n            \\      Page\u003cLiveStreamSession\u003e result = apiInstance.listLiveStreamSessions(liveStreamId)\\n\\\n            \\            .period(period)\\n            .currentPage(currentPage)\\n\\\n            \\            .pageSize(pageSize)\\n            .execute();\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling RawStatisticsApi#listLiveStreamSessions\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class listLiveStreamSessionsExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var liveStreamId = vi4k0jvEUuaTdRAEjQ4Jfrgz;  // string\\\n            \\ | The unique identifier for the live stream you want to retrieve analytics\\\n            \\ for.\\n            var period = 2019-01-01;  // string | Period must\\\n            \\ have one of the following formats:  - For a day : \\\\\\\"2018-01-01\\\\\\\"\\\n            , - For a week: \\\\\\\"2018-W01\\\\\\\", - For a month: \\\\\\\"2018-01\\\\\\\" - For\\\n            \\ a year: \\\\\\\"2018\\\\\\\"  For a range period: -  Date range: \\\\\\\"2018-01-01/2018-01-15\\\\\\\n            \\\"  (optional) \\n            var currentPage = 2;  // int? | Choose the\\\n            \\ number of search results to return per page. Minimum value: 1 (optional)\\\n            \\  (default to 1)\\n            var pageSize = 30;  // int? | Results per\\\n            \\ page. Allowed values 1-100, default is 25. (optional)  (default to 25)\\n\\\n            \\            var apiRawStatisticsInstance = apiInstance.RawStatistics();\\n\\\n            \\            try\\n            {\\n                // List live stream player\\\n            \\ sessions\\n                RawStatisticsListLiveStreamAnalyticsResponse\\\n            \\ result = apiRawStatisticsInstance.listLiveStreamSessions(liveStreamId,\\\n            \\ period, currentPage, pageSize);\\n                Debug.WriteLine(result);\\n\\\n            \\            }\\n            catch (ApiException  e)\\n            {\\n \\\n            \\               Debug.Print(\\\"Exception when calling RawStatisticsApi.listLiveStreamSessions:\\\n            \\ \\\" + e.Message );\\n                Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n\\\n            \\                Debug.Print(e.StackTrace);\\n            }\\n        }\\n\\\n            \\    }\\n}\\n\"\n      x-accepts: application/json\n  /analytics/sessions/{sessionId}/events:\n    get:\n      description: Useful to track and measure video's engagement.\n      operationId: GET_analytics-sessions-sessionId-events\n      parameters:\n      - description: A unique identifier you can use to reference and track a session\n          with.\n        example: psEmFwGQUAXR2lFHj5nDOpy\n        explode: false\n        in: path\n        name: sessionId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - type: ready\n                      emittedAt: 2020-09-15T09:47:42+00:00\n                      at: 0\n                    - type: play\n                      emittedAt: 2020-09-15T21:35:57+00:00\n                      at: 0\n                    - type: pause\n                      emittedAt: 2020-09-15T21:36:05+00:00\n                      at: 7\n                    - type: resume\n                      emittedAt: 2020-09-15T21:36:19+00:00\n                      at: 21\n                    - type: seek.forward\n                      emittedAt: 2020-09-15T21:36:19+00:00\n                      from: 7\n                      to: 21\n                    - type: end\n                      emittedAt: 2020-09-15T21:36:28+00:00\n                      at: 30\n                    - type: play\n                      emittedAt: 2020-09-15T21:36:29+00:00\n                      at: 0\n                    - type: seek.backward\n                      emittedAt: 2020-09-15T21:36:29+00:00\n                      from: 30\n                      to: 0\n                    - type: pause\n                      emittedAt: 2020-09-15T21:36:29+00:00\n                      at: 21\n                    - type: resume\n                      emittedAt: 2020-09-15T21:36:30+00:00\n                      at: 21\n                    - type: seek.forward\n                      emittedAt: 2020-09-15T21:36:30+00:00\n                      from: 0\n                      to: 21\n                    - type: pause\n                      emittedAt: 2020-09-15T21:36:33+00:00\n                      at: 20\n                    - type: resume\n                      emittedAt: 2020-09-15T21:36:33+00:00\n                      at: 20\n                    - type: seek.backward\n                      emittedAt: 2020-09-15T21:36:33+00:00\n                      from: 24\n                      to: 20\n                    - type: pause\n                      emittedAt: 2020-09-15T21:36:39+00:00\n                      at: 17\n                    - type: resume\n                      emittedAt: 2020-09-15T21:36:39+00:00\n                      at: 17\n                    - type: seek.forward\n                      emittedAt: 2020-09-15T21:36:39+00:00\n                      from: 17\n                      to: 17\n                    - type: pause\n                      emittedAt: 2020-09-15T21:36:41+00:00\n                      at: 19\n                    - type: ready\n                      emittedAt: 2020-09-17T09:20:47+00:00\n                      at: 0\n                    - type: ready\n                      emittedAt: 2020-09-17T09:41:01+00:00\n                      at: 0\n                    - type: ready\n                      emittedAt: 2020-09-17T09:41:08+00:00\n                      at: 0\n                    - type: play\n                      emittedAt: 2020-09-17T09:41:10+00:00\n                      at: 0\n                    - type: pause\n                      emittedAt: 2020-09-17T09:41:12+00:00\n                      at: 1\n                    - type: resume\n                      emittedAt: 2020-09-17T09:41:13+00:00\n                      at: 1\n                    - type: pause\n                      emittedAt: 2020-09-17T09:41:15+00:00\n                      at: 3\n                    pagination:\n                      currentPage: 1\n                      currentPageItems: 25\n                      pageSize: 25\n                      pagesTotal: 2\n                      itemsTotal: 30\n                      links:\n                      - rel: self\n                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1\u0026pageSize=25\n                      - rel: first\n                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=1\u0026pageSize=25\n                      - rel: next\n                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2\u0026pageSize=25\n                      - rel: last\n                        uri: /analytics/sessions/ps5ltuhfsTOeh6bP03Tq5OWc/events?currentPage=2\u0026pageSize=25\n              schema:\n                $ref: '#/components/schemas/raw-statistics-list-player-session-events-response'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: videoId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: List player session events\n      tags:\n      - Raw statistics\n      x-client-action: listSessionEvents\n      x-group-parameters: true\n      x-client-paginated: true\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n    req := apivideosdk.RawStatisticsApiListSessionEventsRequest{}\\n\\\n            \\    \\n    req.SessionId(\\\"psEmFwGQUAXR2lFHj5nDOpy\\\") // string | A unique\\\n            \\ identifier you can use to reference and track a session with.\\n    req.CurrentPage(int32(2))\\\n            \\ // int32 | Choose the number of search results to return per page. Minimum\\\n            \\ value: 1 (default to 1)\\n    req.PageSize(int32(30)) // int32 | Results\\\n            \\ per page. Allowed values 1-100, default is 25. (default to 25)\\n\\n \\\n            \\   res, err := client.RawStatistics.ListSessionEvents(sessionId string,\\\n            \\ req)\\n    \\n\\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"\\\n            Error when calling `RawStatistics.ListSessionEvents``: %v\\\\n\\\", err)\\n\\\n            \\    }\\n    // response from `ListSessionEvents`: RawStatisticsListPlayerSessionEventsResponse\\n\\\n            \\    fmt.Fprintf(os.Stdout, \\\"Response from `RawStatistics.ListSessionEvents`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const sessionId = 'psEmFwGQUAXR2lFHj5nDOpy'; // A unique identifier you can use to reference and track a session with.\n                    const currentPage = '2'; // Choose the number of search results to return per page. Minimum value: 1\n                    const pageSize = '30'; // Results per page. Allowed values 1-100, default is 25.\n\n                    // RawStatisticsListPlayerSessionEventsResponse\n                    const result = await client.rawStatistics.listSessionEvents({ sessionId, currentPage, pageSize })\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import raw_statistics_api\n            from apivideo.model.not_found import NotFound\n            from apivideo.model.raw_statistics_list_player_session_events_response import RawStatisticsListPlayerSessionEventsResponse\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = raw_statistics_api.RawStatisticsApi(api_client)\n                session_id = \"psEmFwGQUAXR2lFHj5nDOpy\" # str | A unique identifier you can use to reference and track a session with.\n                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1\n                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # List player session events\n                    api_response = api_instance.list_session_events(session_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_session_events: %s\\n\" % e)\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # List player session events\n                    api_response = api_instance.list_session_events(session_id, current_page=current_page, page_size=page_size)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling RawStatisticsApi-\u003elist_session_events: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.RawStatisticsApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    RawStatisticsApi apiInstance\\\n            \\ = client.rawStatistics();\\n    \\n    String sessionId = \\\"psEmFwGQUAXR2lFHj5nDOpy\\\"\\\n            ; // A unique identifier you can use to reference and track a session\\\n            \\ with.\\n    Integer currentPage = 1; // Choose the number of search results\\\n            \\ to return per page. Minimum value: 1\\n    Integer pageSize = 25; //\\\n            \\ Results per page. Allowed values 1-100, default is 25.\\n\\n    try {\\n\\\n            \\      Page\u003cPlayerSessionEvent\u003e result = apiInstance.listSessionEvents(sessionId)\\n\\\n            \\            .currentPage(currentPage)\\n            .pageSize(pageSize)\\n\\\n            \\            .execute();\\n      System.out.println(result);\\n    } catch\\\n            \\ (ApiException e) {\\n      System.err.println(\\\"Exception when calling\\\n            \\ RawStatisticsApi#listSessionEvents\\\");\\n      System.err.println(\\\"\\\n            Status code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\"\\\n            \\ + e.getMessage());\\n      System.err.println(\\\"Response headers: \\\"\\\n            \\ + e.getResponseHeaders());\\n      e.printStackTrace();\\n    }\\n  }\\n\\\n            }\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class listSessionEventsExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var sessionId = psEmFwGQUAXR2lFHj5nDOpy;  // string | A unique identifier you can use to reference and track a session with.\n                        var currentPage = 2;  // int? | Choose the number of search results to return per page. Minimum value: 1 (optional)  (default to 1)\n                        var pageSize = 30;  // int? | Results per page. Allowed values 1-100, default is 25. (optional)  (default to 25)\n                        var apiRawStatisticsInstance = apiInstance.RawStatistics();\n                        try\n                        {\n                            // List player session events\n                            RawStatisticsListPlayerSessionEventsResponse result = apiRawStatisticsInstance.listSessionEvents(sessionId, currentPage, pageSize);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling RawStatisticsApi.listSessionEvents: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n  /webhooks:\n    get:\n      description: Requests to this endpoint return a list of your webhooks (with\n        all their details). You can filter what the webhook list that the API returns\n        using the parameters described below.\n      operationId: LIST-webhooks\n      parameters:\n      - description: The webhook event that you wish to filter on.\n        example: video.encoding.quality.completed\n        explode: true\n        in: query\n        name: events\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: 'Choose the number of search results to return per page. Minimum\n          value: 1'\n        example: 2\n        explode: true\n        in: query\n        name: currentPage\n        required: false\n        schema:\n          default: 1\n          type: integer\n        style: form\n      - description: Results per page. Allowed values 1-100, default is 25.\n        example: 30\n        explode: true\n        in: query\n        name: pageSize\n        required: false\n        schema:\n          default: 25\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                    - webhookId: webhook_XXXXXXXXXXXXXXX\n                      createdAt: 2021-01-08T14:12:18.000+00:00\n                      events:\n                      - video.encoding.quality.completed\n                      url: http://clientnotificationserver.com/notif?myquery=query\n                    - webhookId: webhook_XXXXXXXXXYYYYYY\n                      createdAt: 2021-01-12T12:12:12.000+00:00\n                      events:\n                      - video.encoding.quality.completed\n                      url: http://clientnotificationserver.com/notif?myquery=query2\n                    pagination:\n                      currentPage: 1\n                      pageSize: 25\n                      pagesTotal: 1\n                      itemsTotal: 11\n                      currentPageItems: 11\n                      links:\n                      - rel: self\n                        uri: https://ws.api.video/webhooks?currentPage=1\n                      - rel: first\n                        uri: https://ws.api.video/webhooks?currentPage=1\n                      - rel: last\n                        uri: https://ws.api.video/webhooks?currentPage=1\n              schema:\n                $ref: '#/components/schemas/webhooks-list-response'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: List all webhooks\n      tags:\n      - Webhooks\n      x-group-parameters: true\n      x-client-paginated: true\n      x-optional-object: true\n      x-client-action: list\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n    req := apivideosdk.WebhooksApiListRequest{}\\n    \\n   \\\n            \\ req.Events(\\\"video.encoding.quality.completed\\\") // string | The webhook\\\n            \\ event that you wish to filter on.\\n    req.CurrentPage(int32(2)) //\\\n            \\ int32 | Choose the number of search results to return per page. Minimum\\\n            \\ value: 1 (default to 1)\\n    req.PageSize(int32(30)) // int32 | Results\\\n            \\ per page. Allowed values 1-100, default is 25. (default to 25)\\n\\n \\\n            \\   res, err := client.Webhooks.List(req)\\n    \\n\\n    if err != nil {\\n\\\n            \\        fmt.Fprintf(os.Stderr, \\\"Error when calling `Webhooks.List``:\\\n            \\ %v\\\\n\\\", err)\\n    }\\n    // response from `List`: WebhooksListResponse\\n\\\n            \\    fmt.Fprintf(os.Stdout, \\\"Response from `Webhooks.List`: %v\\\\n\\\",\\\n            \\ res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const events = 'video.encoding.quality.completed'; // The webhook event that you wish to filter on.\n                    const currentPage = '2'; // Choose the number of search results to return per page. Minimum value: 1\n                    const pageSize = '30'; // Results per page. Allowed values 1-100, default is 25.\n\n                    // WebhooksListResponse\n                    const result = await client.webhooks.list({ events, currentPage, pageSize })\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import webhooks_api\n            from apivideo.model.webhooks_list_response import WebhooksListResponse\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = webhooks_api.WebhooksApi(api_client)\n                events = \"video.encoding.quality.completed\" # str | The webhook event that you wish to filter on. (optional)\n                current_page = 2 # int | Choose the number of search results to return per page. Minimum value: 1 (optional) if omitted the server will use the default value of 1\n                page_size = 30 # int | Results per page. Allowed values 1-100, default is 25. (optional) if omitted the server will use the default value of 25\n\n                # example passing only required values which don't have defaults set\n                # and optional values\n                try:\n                    # List all webhooks\n                    api_response = api_instance.list(events=events, current_page=current_page, page_size=page_size)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling WebhooksApi-\u003elist: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.WebhooksApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    WebhooksApi apiInstance\\\n            \\ = client.webhooks();\\n    \\n    String events = \\\"video.encoding.quality.completed\\\"\\\n            ; // The webhook event that you wish to filter on.\\n    Integer currentPage\\\n            \\ = 1; // Choose the number of search results to return per page. Minimum\\\n            \\ value: 1\\n    Integer pageSize = 25; // Results per page. Allowed values\\\n            \\ 1-100, default is 25.\\n\\n    try {\\n      Page\u003cWebhook\u003e result = apiInstance.list()\\n\\\n            \\            .events(events)\\n            .currentPage(currentPage)\\n\\\n            \\            .pageSize(pageSize)\\n            .execute();\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling WebhooksApi#list\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class listExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var events = video.encoding.quality.completed;  // string\\\n            \\ | The webhook event that you wish to filter on. (optional) \\n      \\\n            \\      var currentPage = 2;  // int? | Choose the number of search results\\\n            \\ to return per page. Minimum value: 1 (optional)  (default to 1)\\n  \\\n            \\          var pageSize = 30;  // int? | Results per page. Allowed values\\\n            \\ 1-100, default is 25. (optional)  (default to 25)\\n            var apiWebhooksInstance\\\n            \\ = apiInstance.Webhooks();\\n            try\\n            {\\n        \\\n            \\        // List all webhooks\\n                WebhooksListResponse result\\\n            \\ = apiWebhooksInstance.list(events, currentPage, pageSize);\\n       \\\n            \\         Debug.WriteLine(result);\\n            }\\n            catch (ApiException\\\n            \\  e)\\n            {\\n                Debug.Print(\\\"Exception when calling\\\n            \\ WebhooksApi.list: \\\" + e.Message );\\n                Debug.Print(\\\"\\\n            Status Code: \\\"+ e.ErrorCode);\\n                Debug.Print(e.StackTrace);\\n\\\n            \\            }\\n        }\\n    }\\n}\\n\"\n      x-accepts: application/json\n    post:\n      description: \"Webhooks can push notifications to your server, rather than polling\\\n        \\ api.video for changes. We currently offer four events: \\n* ```video.encoding.quality.completed```\\\n        \\  When a new video is uploaded into your account, it will be encoded into\\\n        \\ several different HLS sizes/bitrates.  When each version is encoded, your\\\n        \\ webhook will get a notification.  It will look like ```{ \\\\\\\"type\\\\\\\": \\\\\\\n        \\\"video.encoding.quality.completed\\\\\\\", \\\\\\\"emittedAt\\\\\\\": \\\\\\\"2021-01-29T16:46:25.217+01:00\\\\\\\n        \\\", \\\\\\\"videoId\\\\\\\": \\\\\\\"viXXXXXXXX\\\\\\\", \\\\\\\"encoding\\\\\\\": \\\\\\\"hls\\\\\\\", \\\\\\\n        \\\"quality\\\\\\\": \\\\\\\"720p\\\\\\\"} ```. This request says that the 720p HLS encoding\\\n        \\ was completed.\\n* ```live-stream.broadcast.started```  When a livestream\\\n        \\ begins broadcasting, the broadcasting parameter changes from false to true,\\\n        \\ and this webhook fires.\\n* ```live-stream.broadcast.ended```  This event\\\n        \\ fores when the livestream has finished broadcasting, and the broadcasting\\\n        \\ parameter flips from false to true.\\n* ```video.source.recorded```  This\\\n        \\ event is similar to ```video.encoding.quality.completed```, but tells you\\\n        \\ if a livestream has been recorded as a VOD.\"\n      operationId: POST-webhooks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webhooks-creation-payload'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    webhookId: webhook_XXXXXXXXXXXXXXX\n                    createdAt: 2021-01-08T14:12:18.000+00:00\n                    events:\n                    - video.encoding.quality.completed\n                    url: http://clientnotificationserver.com/notif?myquery=query\n              schema:\n                $ref: '#/components/schemas/webhook'\n          description: Created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/attributerequired\n                    events: This attribute is required.\n                    name: events\n                    status: 400\n                    problems:\n                    - type: https://docs.api.video/docs/attributerequired\n                      title: This attribute is required.\n                      name: events\n                    - type: https://docs.api.video/docs/attributerequired\n                      title: This attribute is required.\n                      name: url\n                    - type: https://docs.api.video/docs/attributeinvalid\n                      title: This attribute must be an array.\n                      name: events\n              schema:\n                $ref: '#/components/schemas/bad-request'\n          description: Bad Request\n      security:\n      - bearerAuth: []\n      summary: Create Webhook\n      tags:\n      - Webhooks\n      x-client-action: create\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    webhooksCreationPayload := *apivideosdk.NewWebhooksCreationPayload([]string{\\\"\\\n            Events_example\\\"}, \\\"https://example.com/webhooks\\\") // WebhooksCreationPayload\\\n            \\ | \\n\\n    \\n    res, err := client.Webhooks.Create(webhooksCreationPayload)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Webhooks.Create``: %v\\\\n\\\", err)\\n    }\\n    // response from `Create`:\\\n            \\ Webhook\\n    fmt.Fprintf(os.Stdout, \\\"Response from `Webhooks.Create`:\\\n            \\ %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: \"//install the module with npm or yarn\\n//npm install @api.video/nodejs-client\\\n            \\ --save\\n//yarn add @api.video/nodejs-client\\n(async () =\u003e {\\n    try\\\n            \\ {\\n        const client = new ApiVideoClient({ apiKey: \\\"YOUR_API_TOKEN\\\"\\\n            \\ });\\n\\n        const webhooksCreationPayload = {\\n      events: [\\\"\\\n            video.encoding.quality.completed\\\"], // A list of the webhooks that you\\\n            \\ are subscribing to. There are Currently four webhook options: * ```video.encoding.quality.completed```\\\n            \\  When a new video is uploaded into your account, it will be encoded\\\n            \\ into several different HLS sizes/bitrates.  When each version is encoded,\\\n            \\ your webhook will get a notification.  It will look like ```{ \\\\\\\\\\\\\\\n            \\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"video.encoding.quality.completed\\\\\\\\\\\\\\\", \\\\\\\\\\\n            \\\\\\\"emittedAt\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2021-01-29T16:46:25.217+01:00\\\\\\\\\\\\\\\",\\\n            \\ \\\\\\\\\\\\\\\"videoId\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"viXXXXXXXX\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"encoding\\\\\\\n            \\\\\\\\\\\": \\\\\\\\\\\\\\\"hls\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"quality\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"720p\\\\\\\\\\\n            \\\\\\\"} ```. This request says that the 720p HLS encoding was completed.\\\n            \\ * ```live-stream.broadcast.started```  When a livestream begins broadcasting,\\\n            \\ the broadcasting parameter changes from false to true, and this webhook\\\n            \\ fires. * ```live-stream.broadcast.ended```  This event fores when the\\\n            \\ livestream has finished broadcasting, and the broadcasting parameter\\\n            \\ flips from false to true. * ```video.source.recorded```  This event\\\n            \\ is similar to ```video.encoding.quality.completed```, but tells you\\\n            \\ if a livestream has been recorded as a VOD.\\n      url: \\\"https://example.com/webhooks\\\"\\\n            , // The the url to which HTTP notifications are sent. It could be any\\\n            \\ http or https URL.\\n    }; \\n\\n        // Webhook\\n        const result\\\n            \\ = await client.webhooks.create(webhooksCreationPayload);\\n        console.log(result);\\n\\\n            \\    } catch (e) {\\n        console.error(e);\\n    }\\n})();\\n\"\n        - language: python\n          code: \"#install the api.video API client library\\n#pip install api.video\\n\\\n            import apivideo\\nfrom apivideo.api import webhooks_api\\nfrom apivideo.model.bad_request\\\n            \\ import BadRequest\\nfrom apivideo.model.webhook import Webhook\\nfrom\\\n            \\ apivideo.model.webhooks_creation_payload import WebhooksCreationPayload\\n\\\n            from pprint import pprint\\n\\n# Enter a context with an instance of the\\\n            \\ API client\\nwith apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\\n\\\n            \\    # Create an instance of the API class\\n    api_instance = webhooks_api.WebhooksApi(api_client)\\n\\\n            \\    webhooks_creation_payload = WebhooksCreationPayload(\\n        events=[\\\"\\\n            video.encoding.quality.completed\\\"],\\n        url=\\\"https://example.com/webhooks\\\"\\\n            ,\\n    ) # WebhooksCreationPayload | \\n\\n    # example passing only required\\\n            \\ values which don't have defaults set\\n    try:\\n        # Create Webhook\\n\\\n            \\        api_response = api_instance.create(webhooks_creation_payload)\\n\\\n            \\        pprint(api_response)\\n    except apivideo.ApiException as e:\\n\\\n            \\        print(\\\"Exception when calling WebhooksApi-\u003ecreate: %s\\\\n\\\" %\\\n            \\ e)\\n\"\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.WebhooksApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    WebhooksApi apiInstance\\\n            \\ = client.webhooks();\\n    \\n    WebhooksCreationPayload webhooksCreationPayload\\\n            \\ = new WebhooksCreationPayload(); // \\n    webhooksCreationPayload.setEvents(Arrays.asList(\\\"\\\n            video.encoding.quality.completed\\\")); \\n    webhooksCreationPayload.setUrl(\\\"\\\n            https://example.com/webhooks\\\"); // The the url to which HTTP notifications\\\n            \\ are sent. It could be any http or https URL.\\n\\n\\n    try {\\n      Webhook\\\n            \\ result = apiInstance.create(webhooksCreationPayload);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling WebhooksApi#create\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: \"//install via Nuget\\n//Install-Package ApiVideo\\nusing System.Diagnostics;\\n\\\n            using ApiVideo.Client;\\n\\nnamespace Example\\n{\\n    public class createExample\\n\\\n            \\    {\\n        public static void Main()\\n        {\\n            var\\\n            \\ basePath = ApiVideoClient.Client.Environment.SANDBOX;\\n            var\\\n            \\ apiKey = \\\"YOUR_API_KEY\\\";\\n\\n            var apiInstance = new ApiVideoClient(apiKey,basePath);\\n\\\n            \\n            var webhooksCreationPayload = new WebhooksCreationPayload();\\\n            \\ // WebhooksCreationPayload | \\n            var apiWebhooksInstance =\\\n            \\ apiInstance.Webhooks();\\n            try\\n            {\\n          \\\n            \\      // Create Webhook\\n                Webhook result = apiWebhooksInstance.create(webhooksCreationPayload);\\n\\\n            \\                Debug.WriteLine(result);\\n            }\\n           \\\n            \\ catch (ApiException  e)\\n            {\\n                Debug.Print(\\\"\\\n            Exception when calling WebhooksApi.create: \\\" + e.Message );\\n       \\\n            \\         Debug.Print(\\\"Status Code: \\\"+ e.ErrorCode);\\n             \\\n            \\   Debug.Print(e.StackTrace);\\n            }\\n        }\\n    }\\n}\\n\"\n      x-contentType: application/json\n      x-accepts: application/json\n  /webhooks/{webhookId}:\n    delete:\n      description: This endpoint will delete the indicated webhook.\n      operationId: DELETE-webhook\n      parameters:\n      - description: The webhook you wish to delete.\n        explode: false\n        in: path\n        name: webhookId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: No Content\n        \"404\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    type: https://docs.api.video/docs/resourcenot_found\n                    title: The requested resource was not found.\n                    name: webhookId\n                    status: 404\n              schema:\n                $ref: '#/components/schemas/not-found'\n          description: Not Found\n      security:\n      - bearerAuth: []\n      summary: Delete a Webhook\n      tags:\n      - Webhooks\n      x-client-action: delete\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    webhookId := \\\"webhookId_example\\\" // string\\\n            \\ | The webhook you wish to delete.\\n\\n    \\n    err := client.Webhooks.Delete(webhookId)\\n\\\n            \\n    if err != nil {\\n        fmt.Fprintf(os.Stderr, \\\"Error when calling\\\n            \\ `Webhooks.Delete``: %v\\\\n\\\", err)\\n    }\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const webhookId = 'webhookId_example'; // The webhook you wish to delete.\n\n                    // void\n                    const result = await client.webhooks.delete(webhookId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import webhooks_api\n            from apivideo.model.not_found import NotFound\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = webhooks_api.WebhooksApi(api_client)\n                webhook_id = \"webhookId_example\" # str | The webhook you wish to delete.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Delete a Webhook\n                    api_instance.delete(webhook_id)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling WebhooksApi-\u003edelete: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.WebhooksApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    WebhooksApi apiInstance\\\n            \\ = client.webhooks();\\n    \\n    String webhookId = \\\"webhookId_example\\\"\\\n            ; // The webhook you wish to delete.\\n\\n    try {\\n      apiInstance.delete(webhookId);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling WebhooksApi#delete\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class deleteExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var webhookId = webhookId_example;  // string | The webhook you wish to delete.\n                        var apiWebhooksInstance = apiInstance.Webhooks();\n                        try\n                        {\n                            // Delete a Webhook\n                            apiWebhooksInstance.delete(webhookId);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling WebhooksApi.delete: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\n    get:\n      description: This call provides the same JSON information provided on Webjhook\n        creation.\n      operationId: GET-Webhook\n      parameters:\n      - description: The unique webhook you wish to retreive details on.\n        explode: false\n        in: path\n        name: webhookId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    webhookId: webhook_XXXXXXXXXXXXXXX\n                    createdAt: 2021-01-08T14:12:18.000+00:00\n                    events:\n                    - video.encoding.quality.completed\n                    url: http://clientnotificationserver.com/notif?myquery=query\n              schema:\n                $ref: '#/components/schemas/webhook'\n          description: Success\n      security:\n      - bearerAuth: []\n      summary: Show Webhook details\n      tags:\n      - Webhooks\n      x-client-action: get\n      x-readme:\n        code-samples:\n        - language: go\n          code: \"//install the Go API client\\n//go get github.com/apivideo/api.video-go-client\\n\\\n            package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"os\\\"\\n \\\n            \\   apivideosdk \\\"github.com/apivideo/api.video-go-client\\\"\\n)\\n\\nfunc\\\n            \\ main() {\\n    client := apivideosdk.ClientBuilder(\\\"YOUR_API_TOKEN\\\"\\\n            ).Build()\\n    // if you rather like to use the sandbox environment:\\n\\\n            \\    // client := apivideosdk.SandboxClientBuilder(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            ).Build()\\n        \\n    webhookId := \\\"webhookId_example\\\" // string\\\n            \\ | The unique webhook you wish to retreive details on.\\n\\n    \\n    res,\\\n            \\ err := client.Webhooks.Get(webhookId)\\n\\n    if err != nil {\\n     \\\n            \\   fmt.Fprintf(os.Stderr, \\\"Error when calling `Webhooks.Get``: %v\\\\\\\n            n\\\", err)\\n    }\\n    // response from `Get`: Webhook\\n    fmt.Fprintf(os.Stdout,\\\n            \\ \\\"Response from `Webhooks.Get`: %v\\\\n\\\", res)\\n}\\n\"\n        - language: node\n          code: |\n            //install the module with npm or yarn\n            //npm install @api.video/nodejs-client --save\n            //yarn add @api.video/nodejs-client\n            (async () =\u003e {\n                try {\n                    const client = new ApiVideoClient({ apiKey: \"YOUR_API_TOKEN\" });\n\n                    const webhookId = 'webhookId_example'; // The unique webhook you wish to retreive details on.\n\n                    // Webhook\n                    const result = await client.webhooks.get(webhookId);\n                    console.log(result);\n                } catch (e) {\n                    console.error(e);\n                }\n            })();\n        - language: python\n          code: |\n            #install the api.video API client library\n            #pip install api.video\n            import apivideo\n            from apivideo.api import webhooks_api\n            from apivideo.model.webhook import Webhook\n            from pprint import pprint\n\n            # Enter a context with an instance of the API client\n            with apivideo.AuthenticatedApiClient(__API_KEY__) as api_client:\n                # Create an instance of the API class\n                api_instance = webhooks_api.WebhooksApi(api_client)\n                webhook_id = \"webhookId_example\" # str | The unique webhook you wish to retreive details on.\n\n                # example passing only required values which don't have defaults set\n                try:\n                    # Show Webhook details\n                    api_response = api_instance.get(webhook_id)\n                    pprint(api_response)\n                except apivideo.ApiException as e:\n                    print(\"Exception when calling WebhooksApi-\u003eget: %s\\n\" % e)\n        - language: java\n          code: \"//dependency addition instructions\\n//https://github.com/apivideo/api.video-java-client\\n\\\n            // Import classes:\\nimport video.api.client.ApiVideoClient;\\nimport video.api.client.api.ApiException;\\n\\\n            import video.api.client.api.models.*;\\nimport video.api.client.api.clients.WebhooksApi;\\n\\\n            import java.util.*;\\n\\npublic class Example {\\n  public static void main(String[]\\\n            \\ args) {\\n    ApiVideoClient client = new ApiVideoClient(\\\"YOUR_API_TOKEN\\\"\\\n            );\\n    // if you rather like to use the sandbox environment:\\n    //\\\n            \\ ApiVideoClient client = new ApiVideoClient(\\\"YOU_SANDBOX_API_TOKEN\\\"\\\n            , ApiVideoClient.Environment.SANDBOX);\\n\\n    WebhooksApi apiInstance\\\n            \\ = client.webhooks();\\n    \\n    String webhookId = \\\"webhookId_example\\\"\\\n            ; // The unique webhook you wish to retreive details on.\\n\\n    try {\\n\\\n            \\      Webhook result = apiInstance.get(webhookId);\\n      System.out.println(result);\\n\\\n            \\    } catch (ApiException e) {\\n      System.err.println(\\\"Exception\\\n            \\ when calling WebhooksApi#get\\\");\\n      System.err.println(\\\"Status\\\n            \\ code: \\\" + e.getCode());\\n      System.err.println(\\\"Reason: \\\" + e.getMessage());\\n\\\n            \\      System.err.println(\\\"Response headers: \\\" + e.getResponseHeaders());\\n\\\n            \\      e.printStackTrace();\\n    }\\n  }\\n}\\n\"\n        - language: csharp\n          code: |\n            //install via Nuget\n            //Install-Package ApiVideo\n            using System.Diagnostics;\n            using ApiVideo.Client;\n\n            namespace Example\n            {\n                public class getExample\n                {\n                    public static void Main()\n                    {\n                        var basePath = ApiVideoClient.Client.Environment.SANDBOX;\n                        var apiKey = \"YOUR_API_KEY\";\n\n                        var apiInstance = new ApiVideoClient(apiKey,basePath);\n\n                        var webhookId = webhookId_example;  // string | The unique webhook you wish to retreive details on.\n                        var apiWebhooksInstance = apiInstance.Webhooks();\n                        try\n                        {\n                            // Show Webhook details\n                            Webhook result = apiWebhooksInstance.get(webhookId);\n                            Debug.WriteLine(result);\n                        }\n                        catch (ApiException  e)\n                        {\n                            Debug.Print(\"Exception when calling WebhooksApi.get: \" + e.Message );\n                            Debug.Print(\"Status Code: \"+ e.ErrorCode);\n                            Debug.Print(e.StackTrace);\n                        }\n                    }\n                }\n            }\n      x-accepts: application/json\ncomponents:\n  parameters:\n    current-page:\n      description: 'Choose the number of search results to return per page. Minimum\n        value: 1'\n      example: 2\n      explode: true\n      in: query\n      name: currentPage\n      required: false\n      schema:\n        default: 1\n        type: integer\n      style: form\n    page-size:\n      description: Results per page. Allowed values 1-100, default is 25.\n      example: 30\n      explode: true\n      in: query\n      name: pageSize\n      required: false\n      schema:\n        default: 25\n        type: integer\n      style: form\n  schemas:\n    link:\n      properties:\n        rel:\n          type: string\n        uri:\n          type: string\n      type: object\n    access-token:\n      example:\n        access_token: est\n        token_type: qui nulla l\n        refresh_token: cillum\n        expires_in: 3600\n      properties:\n        access_token:\n          description: The access token containing security credentials allowing you\n            to acccess the API. The token lasts for one hour.\n          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjUyZWM4NWUyMjFkODZjOWI0NDQ5NzBhMjQwMzUyOWQ4MDQyNGQ3ZmJjYjFlYWM2MjVlM2VkMjI2YWRlNTcxMDY2NDUyZDc0NjdhN2E4NjI0In0.eyJhdWQiOiJsaWJjYXN0IiwianRpIjoiNTJlYzg1ZTIyMWQ4NmM5YjQ0NDk3MGEyNDAzNTI5ZDgwNDI0ZDdmYmNiMWVhYzYyNWUzZWQyMjZhZGU1NzEwNjY0NTJkNzQ2N2E3YTg2MjQiLCJpYXQiOjE1MjUyNzYxNDcsIm5iZiI6MTUyNTI3NjE0NywiZXhwIjoxNTI1Mjc5NzQ3LCJzdWIiOiJ1c01vbml0b3IiLCJzY29wZXMiOlsibW9uaXRvci5saWJjYXN0LmNvbSJdLCJjb250ZXh0Ijp7InVzZXIiOiJ1c01vbml0b3IiLCJwcm9qZWN0IjoicHJNb25pdG9yIiwibWVtYmVyIjoibWVNb25pdG9yIn19.rUvishDNyJLNlI4W5VmguNecm5KD2uZgPkKJQbaqw-cJbSrVxkSbiKYtk_E3cz3WT7-IS2yFTsYN3uIo5Rbit8_HftweyEp2bdBRI8yjR6oZZ1sNJJXswISN1i2kk4r-aaxu7Xxf_LtsjOMUj_YZsvcc2nqBXPKjHbJCJryx3DDJaIcymOqao7nhQaCCQyrQooAXNTYs4E9fWN1dC_x2O-zok5TuG-xhEW-umwxfSUMWNgSTkz38ACceQ0PCJSgB3jqjDH4MwC7B3ppEPZuK5E6JhKeyRlalswRyYq3UQPnVeMTam7YQHsuTgbehF6WySW8i44o7V_MCe9hjPdp-WA\n          type: string\n        token_type:\n          default: bearer\n          description: The type of token you have.\n          type: string\n        refresh_token:\n          description: A token you can use to get the next access token when your\n            current access token expires.\n          example: def50200a28d88fb9aaa921be78eeb5604b071101a334899a7d5fc7492cf8ea752962ddc8961fe5c126101d4ecacd980396eb2fd494995b812dffcb98256c4277f790d1f658fc2d2e34f350740544e5232d69d68d34c648271d706c5e7049adac0b1832d0fdf71809715cc7e97fa63f65966deadb501a55ff469b0fd23a637cb6acbe9d9b8594a17f09efc2efeed82984764a0065d5e29c950c7b081a61ba2aaa192be3085c400ee37eac50fa9320ce2cfe8916c8165418d23e9f91b6a5c8515e1d74ee193a5a1ca01954fbff27361c20184240be2359e0afbed0bf1c762cf872450b5e8b5d4704f4fd9583e4470adc98409dd42965709712806bd9019378a72eea0b4912ce684ffd833db5806ab84174f905db2a75380071d004615c944bb8f8c4045cce7234c2be9a2330522cf7f067b8e58f57cffb6edb4b7ef91313e12bcde47e5e76ceee7fa52990132288f345d33ed917ae4fd54b7284f8964d898e97e1ee3bc4157f75d7fee63976e4be66ac1ec32ef74afa533f0eb593523f226cbec57d196ac8962\n          type: string\n        expires_in:\n          description: Lists the time in seconds when your access token expires. It\n            lasts for one hour.\n          type: integer\n      title: AccessToken\n      type: object\n    pagination:\n      example:\n        itemsTotal: 123\n        pagesTotal: 7\n        pageSize: 20\n        currentPage: 3\n        currentPageItems: 20\n        links:\n          first:\n            rel: first\n            uri: /videos/search?currentPage=1\u0026pageSize=20\n          previous:\n            rel: previous\n            uri: /videos/search?currentPage=2\u0026pageSize=20\n          next:\n            rel: next\n            uri: /videos/search?currentPage=4\u0026pageSize=20\n          last:\n            rel: last\n            uri: /videos/search?currentPage=6\u0026pageSize=20\n      properties:\n        itemsTotal:\n          description: Total number of items that exist.\n          readOnly: true\n          type: integer\n        pagesTotal:\n          description: Number of items listed in the current page.\n          readOnly: true\n          type: integer\n        pageSize:\n          description: Maximum number of item per page.\n          readOnly: true\n          type: integer\n        currentPage:\n          description: The current page index.\n          readOnly: true\n          type: integer\n        currentPageItems:\n          description: The number of items on the current page.\n          readOnly: true\n          type: integer\n        links:\n          items:\n            $ref: '#/components/schemas/pagination-link'\n          type: array\n      required:\n      - links\n      title: Pagination\n      type: object\n    bad-request:\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n        problems:\n          items:\n            $ref: '#/components/schemas/bad-request'\n          type: array\n          uniqueItems: true\n      title: BadRequest\n      type: object\n    not-found:\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n      title: NotFound\n      type: object\n    video:\n      example:\n        videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n        title: Maths video\n        description: An amazing video explaining the string theory\n        tags:\n        - maths\n        - string theory\n        - video\n        metadata:\n        - key: Author\n          value: John Doe\n        - key: Format\n          value: Tutorial\n        createdAt: 4251-03-03T12:52:03.085Z\n        publishedAt: 4665-07-14T23:36:18.598Z\n        actions:\n        - video_delete\n        - video_download\n        - video_update\n      properties:\n        videoId:\n          description: The unique identifier of the video object.\n          example: vi4k0jvEUuaTdRAEjQ4Prklg\n          type: string\n        createdAt:\n          description: When a video was created, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        title:\n          description: |\n            The title of the video content.\n          example: Maths video\n          type: string\n        description:\n          description: |\n            A description for the video content.\n          example: An amazing video explaining string theory.\n          type: string\n        publishedAt:\n          description: The date and time the API created the video. Date and time\n            are provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:25:51+00:00\n          type: string\n        updatedAt:\n          description: The date and time the video was updated. Date and time are\n            provided using ISO-8601 UTC format.\n          example: 2019-12-16T08:25:51+00:10\n          format: date-time\n          type: string\n        tags:\n          description: \"One array of tags (each tag is a string) in order to categorize\\\n            \\ a video. Tags may include spaces. \\n\"\n          example: '\"tags\": [\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        metadata:\n          description: |\n            Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.\n          example: '[{\"key\":\"Author\", \"value\":\"John Doe\"}, {\"key\":\"Format\", \"value\":\"Tutorial\"}]'\n          items:\n            $ref: '#/components/schemas/metadata'\n          type: array\n        source:\n          $ref: '#/components/schemas/video-source'\n        assets:\n          $ref: '#/components/schemas/video-assets'\n        playerId:\n          description: |\n            The id of the player that will be applied on the video.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        public:\n          description: |\n            Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: false\n          type: boolean\n        panoramic:\n          description: |\n            Defines if video is panoramic.\n          example: false\n          type: boolean\n        mp4Support:\n          description: |\n            This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.\n          example: true\n          type: boolean\n      required:\n      - videoId\n      title: Video\n      type: object\n    watermark:\n      example:\n        watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i\n        createdAt: 2000-01-23T04:56:07.000+00:00\n      properties:\n        watermarkId:\n          description: The unique identifier of the watermark.\n          example: watermark_1BWr2L5MTQwxGkuxKjzh6i\n          type: string\n        createdAt:\n          description: When the watermark was created, presented in ISO-8601 format.\n          format: date-time\n          type: string\n      title: Watermark\n      type: object\n    watermarks-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i\n          createdAt: 2000-01-23T04:56:07.000+00:00\n        - watermarkId: watermark_1BWr2L5MTQwxGkuxKjzh6i\n          createdAt: 2000-01-23T04:56:07.000+00:00\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/watermark'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: Watermarks\n      type: object\n    watermark-upload-payload:\n      properties:\n        file:\n          description: The .jpg or .png image to be added as a watermark.\n          format: binary\n          type: string\n      required:\n      - file\n      title: WatermarkUploadPayload\n      type: object\n    player-theme:\n      example:\n        trackUnplayed: trackUnplayed\n        backgroundTop: backgroundTop\n        link: link\n        trackPlayed: trackPlayed\n        linkHover: linkHover\n        backgroundBottom: backgroundBottom\n        enableControls: true\n        backgroundText: backgroundText\n        enableApi: true\n        forceAutoplay: true\n        trackBackground: trackBackground\n        createdAt: 2020-01-31T10:17:47Z\n        assets:\n          link: path/to/my/logo/mylogo.jpg\n          logo: mylogo.jpg\n        hideTitle: true\n        name: name\n        text: text\n        linkActive: linkActive\n        forceLoop: true\n        playerId: pl45KFKdlddgk654dspkze\n        updatedAt: 2020-01-31T10:18:47Z\n      properties:\n        name:\n          description: The name of the player theme\n          type: string\n        text:\n          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        link:\n          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,\n            1)'\n          type: string\n        linkHover:\n          description: 'RGBA color for all controls when hovered. Default: rgba(255,\n            255, 255, 1)'\n          type: string\n        linkActive:\n          description: RGBA color for the play button when hovered.\n          type: string\n        trackPlayed:\n          description: 'RGBA color playback bar: played content. Default: rgba(88,\n            131, 255, .95)'\n          type: string\n        trackUnplayed:\n          description: 'RGBA color playback bar: downloaded but unplayed (buffered)\n            content. Default: rgba(255, 255, 255, .35)'\n          type: string\n        trackBackground:\n          description: 'RGBA color playback bar: background. Default: rgba(255, 255,\n            255, .2)'\n          type: string\n        backgroundTop:\n          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,\n            .7)'\n          type: string\n        backgroundBottom:\n          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,\n            0, .7)'\n          type: string\n        backgroundText:\n          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        enableApi:\n          description: 'enable/disable player SDK access. Default: true'\n          type: boolean\n        enableControls:\n          description: 'enable/disable player controls. Default: true'\n          type: boolean\n        forceAutoplay:\n          description: 'enable/disable player autoplay. Default: false'\n          type: boolean\n        hideTitle:\n          description: 'enable/disable title. Default: false'\n          type: boolean\n        forceLoop:\n          description: 'enable/disable looping. Default: false'\n          type: boolean\n        playerId:\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        createdAt:\n          description: When the player was created, presented in ISO-8601 format.\n          example: 2020-01-31T10:17:47Z\n          format: date-time\n          type: string\n        updatedAt:\n          description: When the player was last updated, presented in ISO-8601 format.\n          example: 2020-01-31T10:18:47Z\n          format: date-time\n          type: string\n        assets:\n          $ref: '#/components/schemas/player_theme_assets'\n      required:\n      - playerId\n      title: PlayerTheme\n      type: object\n    player-theme-creation-payload:\n      example:\n        name: My nice theme\n        assets:\n          logo: https://cdn.api.video/player/pl14Db6oMJRH6SRVoOwORacK/logo.png\n          link: https://api.video\n        shapeMargin: 10\n        shapeRadius: 3\n        shapeAspect: flat\n        shapeBackgroundTop: rgba(50, 50, 50, .7)\n        shapeBackgroundBottom: rgba(50, 50, 50, .8)\n        text: rgba(255, 255, 255, .95)\n        link: rgba(255, 0, 0, .95)\n        linkHover: rgba(255, 255, 255, .75)\n        linkActive: rgba(255, 0, 0, .75)\n        trackPlayed: rgba(255, 255, 255, .95)\n        trackUnplayed: rgba(255, 255, 255, .1)\n        trackBackground: rgba(0, 0, 0, 0)\n        backgroundTop: rgba(72, 4, 45, 1)\n        backgroundBottom: rgba(94, 95, 89, 1)\n        backgroundText: rgba(255, 255, 255, .95)\n        language: en\n        enableApi: true\n        enableControls: true\n        forceAutoplay: false\n        hideTitle: false\n        forceLoop: false\n      properties:\n        name:\n          description: Add a name for your player theme here.\n          maxLength: 100\n          type: string\n        text:\n          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        link:\n          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,\n            1)'\n          type: string\n        linkHover:\n          description: 'RGBA color for all controls when hovered. Default: rgba(255,\n            255, 255, 1)'\n          type: string\n        linkActive:\n          description: RGBA color for the play button when hovered.\n          type: string\n        trackPlayed:\n          description: 'RGBA color playback bar: played content. Default: rgba(88,\n            131, 255, .95)'\n          type: string\n        trackUnplayed:\n          description: 'RGBA color playback bar: downloaded but unplayed (buffered)\n            content. Default: rgba(255, 255, 255, .35)'\n          type: string\n        trackBackground:\n          description: 'RGBA color playback bar: background. Default: rgba(255, 255,\n            255, .2)'\n          type: string\n        backgroundTop:\n          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,\n            .7)'\n          type: string\n        backgroundBottom:\n          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,\n            0, .7)'\n          type: string\n        backgroundText:\n          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        enableApi:\n          default: true\n          description: 'enable/disable player SDK access. Default: true'\n          type: boolean\n        enableControls:\n          default: true\n          description: 'enable/disable player controls. Default: true'\n          type: boolean\n        forceAutoplay:\n          default: false\n          description: 'enable/disable player autoplay. Default: false'\n          type: boolean\n        hideTitle:\n          default: false\n          description: 'enable/disable title. Default: false'\n          type: boolean\n        forceLoop:\n          default: false\n          description: 'enable/disable looping. Default: false'\n          type: boolean\n      title: PlayerThemeCreationPayload\n      type: object\n    player-theme-update-payload:\n      properties:\n        name:\n          description: Add a name for your player theme here.\n          maxLength: 100\n          type: string\n        text:\n          description: 'RGBA color for timer text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        link:\n          description: 'RGBA color for all controls. Default: rgba(255, 255, 255,\n            1)'\n          type: string\n        linkHover:\n          description: 'RGBA color for all controls when hovered. Default: rgba(255,\n            255, 255, 1)'\n          type: string\n        linkActive:\n          description: RGBA color for the play button when hovered.\n          type: string\n        trackPlayed:\n          description: 'RGBA color playback bar: played content. Default: rgba(88,\n            131, 255, .95)'\n          type: string\n        trackUnplayed:\n          description: 'RGBA color playback bar: downloaded but unplayed (buffered)\n            content. Default: rgba(255, 255, 255, .35)'\n          type: string\n        trackBackground:\n          description: 'RGBA color playback bar: background. Default: rgba(255, 255,\n            255, .2)'\n          type: string\n        backgroundTop:\n          description: 'RGBA color: top 50% of background. Default: rgba(0, 0, 0,\n            .7)'\n          type: string\n        backgroundBottom:\n          description: 'RGBA color: bottom 50% of background. Default: rgba(0, 0,\n            0, .7)'\n          type: string\n        backgroundText:\n          description: 'RGBA color for title text. Default: rgba(255, 255, 255, 1)'\n          type: string\n        enableApi:\n          description: 'enable/disable player SDK access. Default: true'\n          type: boolean\n        enableControls:\n          description: 'enable/disable player controls. Default: true'\n          type: boolean\n        forceAutoplay:\n          description: 'enable/disable player autoplay. Default: false'\n          type: boolean\n        hideTitle:\n          description: 'enable/disable title. Default: false'\n          type: boolean\n        forceLoop:\n          description: 'enable/disable looping. Default: false'\n          type: boolean\n      title: PlayerThemeUpdatePayload\n      type: object\n    caption:\n      example:\n        default: false\n        src: src\n        srclang: srclang\n        uri: uri\n      properties:\n        uri:\n          type: string\n        src:\n          type: string\n        srclang:\n          type: string\n        default:\n          default: false\n          description: Whether you will have subtitles or not. True for yes you will\n            have subtitles, false for no you will not have subtitles.\n          example: false\n          type: boolean\n      title: Caption\n      type: object\n    video-session:\n      example:\n        session:\n          sessionId: psEmFwGQUAXR2lFHj5nDOpy\n          loadedAt: 2019-06-24T11:45:01.109+00\n          endedAt: 2019-06-24T11:49:19.243+00\n        location:\n          country: France\n          city: Paris\n        referrer:\n          url: https://api.video\n          medium: organic\n          source: https://google.com\n          searchTerm: video encoding hosting and delivery\n        device:\n          type: desktop\n          vendor: Dell\n          model: unknown\n        os:\n          name: Microsoft Windows\n          shortname: W10\n          version: Windows10\n        client:\n          type: browser\n          name: Firefox\n          version: \"67.0\"\n      properties:\n        session:\n          $ref: '#/components/schemas/video-session-session'\n        location:\n          $ref: '#/components/schemas/video-session-location'\n        referrer:\n          $ref: '#/components/schemas/video-session-referrer'\n        device:\n          $ref: '#/components/schemas/video-session-device'\n        os:\n          $ref: '#/components/schemas/video-session-os'\n        client:\n          $ref: '#/components/schemas/video-session-client'\n      title: VideoSession\n      type: object\n    live-stream:\n      example:\n        streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n        createdAt: 2020-01-31T10:17:47Z\n        assets:\n          thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n          iframe: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\"\n            width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n          hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n          player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n        public: true\n        liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n        record: true\n        name: My Live Stream\n        playerId: pl45d5vFFGrfdsdsd156dGhh\n        broadcasting: true\n        updatedAt: 2020-01-31T10:18:47Z\n      properties:\n        liveStreamId:\n          description: The unique identifier for the live stream. Live stream IDs\n            begin with \"li.\"\n          example: li400mYKSgQ6xs7taUeSaEKr\n          type: string\n        name:\n          description: The name of your live stream.\n          example: My Live Stream\n          type: string\n        streamKey:\n          description: The unique, private stream key that you use to begin streaming.\n          example: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n          type: string\n        record:\n          description: Whether you are recording or not.\n          example: true\n          type: boolean\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams\n            to 3,000 users. Whether your video can be viewed by everyone, or requires\n            authentication to see it. A setting of false will require a unique token\n            for each view.\n          example: true\n          type: boolean\n        assets:\n          $ref: '#/components/schemas/live-stream-assets'\n        playerId:\n          description: The unique identifier for the player.\n          example: pl45d5vFFGrfdsdsd156dGhh\n          type: string\n        broadcasting:\n          description: Whether or not you are broadcasting the live video you recorded\n            for others to see. True means you are broadcasting to viewers, false means\n            you are not.\n          example: true\n          type: boolean\n        createdAt:\n          description: When the player was created, presented in ISO-8601 format.\n          example: 2020-01-31T10:17:47Z\n          format: date-time\n          type: string\n        updatedAt:\n          description: When the player was last updated, presented in ISO-8601 format.\n          example: 2020-01-31T10:18:47Z\n          format: date-time\n          type: string\n      required:\n      - liveStreamId\n      title: LiveStream\n      type: object\n    live-stream-session:\n      example:\n        referrer:\n          searchTerm: video stream\n          medium: organic\n          source: https://google.com\n          url: https://api.video\n        os:\n          name: Microsoft Windows\n          shortname: W10\n          version: Windows 10\n        session:\n          loadedAt: 2000-01-23T04:56:07.000+00:00\n          endedAt: 2000-01-23T04:56:07.000+00:00\n          sessionId: sessionId\n        client:\n          name: Firefox\n          type: browser\n          version: \"67.0\"\n        location:\n          country: France\n          city: Paris\n        device:\n          vendor: Dell\n          model: unknown\n          type: desktop\n      properties:\n        session:\n          $ref: '#/components/schemas/live-stream-session-session'\n        location:\n          $ref: '#/components/schemas/live-stream-session-location'\n        referrer:\n          $ref: '#/components/schemas/live-stream-session-referrer'\n        device:\n          $ref: '#/components/schemas/live-stream-session-device'\n        os:\n          $ref: '#/components/schemas/video-session-os'\n        client:\n          $ref: '#/components/schemas/live-stream-session-client'\n      title: LiveStreamSession\n      type: object\n    player-session-event:\n      example:\n        emittedAt: 2000-01-23T04:56:07.000+00:00\n        at: 0\n        from: 6\n        to: 1\n        type: play\n      properties:\n        type:\n          description: 'Possible values are: ready, play, pause, resume, seek.backward,\n            seek.forward, end'\n          example: play\n          type: string\n        emittedAt:\n          description: When an event occurred, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        at:\n          type: integer\n        from:\n          type: integer\n        to:\n          type: integer\n      title: PlayerSessionEvent\n      type: object\n    webhook:\n      example:\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        webhookId: webhook_XXXXXXXXXXXXXXX\n        events: '[\"video.encoding.quality.completed\"]'\n        url: http://clientnotificationserver.com/notif?myquery=query\n      properties:\n        webhookId:\n          description: Unique identifier of the webhook\n          example: webhook_XXXXXXXXXXXXXXX\n          type: string\n        createdAt:\n          description: When an webhook was created, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        events:\n          description: A list of events that will trigger the webhook.\n          example: '[\"video.encoding.quality.completed\"]'\n          items:\n            type: string\n          type: array\n        url:\n          description: URL of the webhook\n          example: http://clientnotificationserver.com/notif?myquery=query\n          type: string\n      title: Webhook\n      type: object\n    video-status:\n      example:\n        ingest:\n          status: uploaded\n          filesize: 273579401\n          receivedBytes:\n          - to: 134217727\n            from: 0\n            total: 273579401\n          - to: 268435455\n            from: 134217728\n            total: 273579401\n          - to: 273579400\n            from: 268435456\n            total: 273579401\n        encoding:\n          playable: true\n          qualities:\n          - quality: 240p\n            status: encoded\n          - quality: 360p\n            status: encoded\n          - quality: 480p\n            status: encoded\n          - quality: 720p\n            status: encoded\n          - quality: 1080p\n            status: encoding\n          - quality: 2160p\n            status: waiting\n          metadata:\n            width: 424\n            height: 240\n            bitrate: 411.218\n            duration: 4176\n            framerate: 24\n            samplerate: 48000\n            videoCodec: h264\n            audioCodec: aac\n            aspectRatio: 16/9\n      properties:\n        ingest:\n          $ref: '#/components/schemas/video-status-ingest'\n        encoding:\n          $ref: '#/components/schemas/video-status-encoding'\n      title: VideoStatus\n      type: object\n    quality:\n      properties:\n        type:\n          description: The type of video (hls or mp4).\n          enum:\n          - hls\n          - mp4\n          example: hls\n          type: string\n        quality:\n          description: The quality of the video you have, in pixels. Choices include\n            360p, 480p, 720p, 1080p, and 2160p.\n          enum:\n          - 240p\n          - 360p\n          - 480p\n          - 720p\n          - 1080p\n          - 2160p\n          example: 720p\n          type: string\n        status:\n          description: The status of your video. Statuses include waiting - the video\n            is waiting to be encoded. encoding - the video is in the process of being\n            encoded. encoded - the video was successfully encoded. failed - the video\n            failed to be encoded.\n          enum:\n          - waiting\n          - encoding\n          - encoded\n          - failed\n          type: string\n      title: Quality\n      type: object\n    bytes-range:\n      properties:\n        from:\n          description: The starting point for the range of bytes for a chunk of a\n            video.\n          example: 0\n          type: integer\n        to:\n          description: The ending point for the range of bytes for a chunk of a video.\n          example: 9999\n          type: integer\n        total:\n          description: The total number of bytes in the provided range.\n          example: 10000\n          type: integer\n      title: BytesRange\n      type: object\n    chapter:\n      example:\n        src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n        language: language\n        uri: uri\n      properties:\n        uri:\n          type: string\n        src:\n          description: The link to your VTT file, which contains your chapters information\n            for the video.\n          example: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n          type: string\n        language:\n          type: string\n      title: Chapter\n      type: object\n    upload-token:\n      example:\n        createdAt: 2019-12-16T08:25:51Z\n        ttl: 171976544\n        expiresAt: 2019-12-16T09:25:51Z\n        token: to1tcmSFHeYY5KzyhOqVKMKb\n      properties:\n        token:\n          description: The unique identifier for the token you will use to authenticate\n            an upload.\n          example: to1tcmSFHeYY5KzyhOqVKMKb\n          type: string\n        ttl:\n          description: Time-to-live - how long the upload token is valid for.\n          maximum: 2147483647\n          minimum: 0\n          type: integer\n        createdAt:\n          description: When the token was created, displayed in ISO-8601 format.\n          example: 2019-12-16T08:25:51Z\n          format: date-time\n          type: string\n        expiresAt:\n          description: When the token expires, displayed in ISO-8601 format.\n          example: 2019-12-16T09:25:51Z\n          format: date-time\n          nullable: true\n          type: string\n      title: UploadToken\n      type: object\n    authenticate-payload:\n      example:\n        apiKey: 9VxMaPgsaFg7EBqmuspSzF7\n      properties:\n        apiKey:\n          description: Your account API key. You can use your sandbox API key, or\n            you can use your production API key.\n          type: string\n      required:\n      - apiKey\n      title: ApiKey\n      type: object\n    refresh-token-payload:\n      example:\n        refreshToken: def502005346d9cc2bd79a7793ab5bdabfefcaabfbb8c253f14733f1262077e1a3f38c4751d6d20f590c3784e531a82adc11f05fc1949aa46d5575aaa99cb84b9334ba66ac773576b5d7a418937ae337de62811d086dd42ad1164b12f87d67be6ffea18f2d50be9b95697b21c4d3c4372849bdb2287259cb80541570e913691a08b2fa33c85885930de15cebea627fc09f0255562ab3d39d87d4ff8fc02b00e252afcd480421dec7de9d1411176bcf669c527762e22294b453bc9ea06e9fa8ba5b873feb2ee14ce0a6a6ddd4b78c580631e210e9b9387265dc2bec9478a66a09dcdce1c40d2f856689e9d81742c9628a0b87b359e0b218ea1f07427eef89f999e47af89792f598e05847bd008fddc32ee63f4a601ffb4cd2ad08977f1c854ec358238322c918f05aa5a41f8a171dee497218408abc8283473f6112aeed7310815416a0fa36c63667e0ed014fa40b8992891bf58bae400d901c01450101c88f4978938ad138adc19cfe5698d60fd82cb27c586f6a8f70f4393c7c9e579df8739d46d249fb76d7\n      properties:\n        refreshToken:\n          description: |\n            The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.\n          type: string\n      required:\n      - refreshToken\n      title: RefreshToken\n      type: object\n    videos-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          title: Maths video\n          description: An amazing video explaining the string theory\n          tags:\n          - maths\n          - string theory\n          - video\n          metadata:\n          - key: Author\n            value: John Doe\n          - key: Format\n            value: Tutorial\n          createdAt: 4251-03-03T12:52:03.085Z\n          publishedAt: 4665-07-14T23:36:18.598Z\n          actions:\n          - video_delete\n          - video_download\n          - video_update\n        - videoId: vi4k0jvEUuaTdRAEjQ4Jfrgz\n          title: Maths video\n          description: An amazing video explaining the string theory\n          tags:\n          - maths\n          - string theory\n          - video\n          metadata:\n          - key: Author\n            value: John Doe\n          - key: Format\n            value: Tutorial\n          createdAt: 4251-03-03T12:52:03.085Z\n          publishedAt: 4665-07-14T23:36:18.598Z\n          actions:\n          - video_delete\n          - video_download\n          - video_update\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/video'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: Videos\n      type: object\n    metadata:\n      properties:\n        key:\n          description: The constant that defines the data set.\n          example: Color\n          type: string\n        value:\n          description: A variable which belongs to the data set.\n          example: Green\n          type: string\n      title: Metadata\n      type: object\n      x-client-all-args-constructor: true\n    video-creation-payload:\n      example:\n        title: Maths video\n        description: An amazing video explaining string theory.\n        public: false\n        panoramic: false\n        mp4Support: true\n        playerId: pl45KFKdlddgk654dspkze\n        tags:\n        - maths\n        - string theory\n        - video\n        metadata:\n        - key: Author\n          value: John Doe\n        - key: Format\n          value: Tutorial\n        watermark:\n          id: watermark_1BWr2L5MTQwxGkuxKjzh6i\n          bottom: 10px\n          right: 10px\n          width: 50%\n          opacity: 70%\n      properties:\n        title:\n          description: The title of your new video.\n          example: Maths video\n          type: string\n        description:\n          description: A brief description of your video.\n          example: A video about string theory.\n          type: string\n        source:\n          description: If you add a video already on the web, this is where you enter\n            the url for the video.\n          example: https://www.myvideo.url.com/video.mp4\n          type: string\n        public:\n          default: true\n          description: Whether your video can be viewed by everyone, or requires authentication\n            to see it. A setting of false will require a unique token for each view.\n            Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: true\n          type: boolean\n        panoramic:\n          default: false\n          description: Indicates if your video is a 360/immersive video.\n          example: false\n          type: boolean\n        mp4Support:\n          default: true\n          description: Enables mp4 version in addition to streamed version.\n          example: true\n          type: boolean\n        playerId:\n          description: The unique identification number for your video player.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n        tags:\n          description: A list of tags you want to use to describe your video.\n          example: '[\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        metadata:\n          description: A list of key value pairs that you use to provide metadata\n            for your video. These pairs can be made dynamic, allowing you to segment\n            your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).\n          example: '[{\"key\": \"Author\", \"value\": \"John Doe\"}]'\n          items:\n            $ref: '#/components/schemas/metadata'\n          type: array\n        clip:\n          $ref: '#/components/schemas/video-clip'\n        watermark:\n          $ref: '#/components/schemas/video-watermark'\n      required:\n      - title\n      title: VideoCreationPayload\n      type: object\n    video-upload-payload:\n      properties:\n        file:\n          description: The path to the video you would like to upload. The path must\n            be local. If you want to use a video from an online source, you must use\n            the \"/videos\" endpoint and add the \"source\" parameter when you create\n            a new video.\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n      required:\n      - file\n      type: object\n    video-thumbnail-pick-payload:\n      example:\n        timecode: 00:00:00.000\n      properties:\n        timecode:\n          description: \"Frame in video to be used as a placeholder before the video\\\n            \\ plays. \\nExample: '\\\"00:01:00.000\\\" for 1 minute into the video.'\\n\\\n            Valid Patterns: \\n\\\"hh:mm:ss.ms\\\"\\n\\\"hh:mm:ss:frameNumber\\\"\\n\\\"124\\\" (integer\\\n            \\ value is reported as seconds) \\nIf selection is out of range, \\\"00:00:00.00\\\"\\\n            \\ will be chosen.\"\n          pattern: \\d{2}:\\d{2}:\\d{2}(\\.\\d{2})?\n          type: string\n      required:\n      - timecode\n      title: ThumbnailPickPayload\n      type: object\n    video-thumbnail-upload-payload:\n      properties:\n        file:\n          description: The .jpg image to be added as a thumbnail.\n          format: binary\n          type: string\n      required:\n      - file\n      title: VideoThumbnailUploadPayload\n      type: object\n    video-update-payload:\n      example:\n        playerId: pl45KFKdlddgk654dspkze\n        title: String theory\n        description: An amazing video explaining the string theory\n        public: false\n        panoramic: false\n        mp4Support: true\n        tags:\n        - maths\n        - string theory\n        - video\n        metadata:\n        - key: Author\n          value: John Doe\n        - key: Format\n          value: Tutorial\n      properties:\n        playerId:\n          description: The unique ID for the player you want to associate with your\n            video.\n          example: pl4k0jvEUuaTdRAEjQ4Jfrgz\n          type: string\n          x-optional-nullable: true\n        title:\n          description: The title you want to use for your video.\n          type: string\n        description:\n          description: A brief description of the video.\n          example: A film about good books.\n          type: string\n        public:\n          description: Whether the video is publicly available or not. False means\n            it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).\n          example: true\n          type: boolean\n        panoramic:\n          description: Whether the video is a 360 degree or immersive video.\n          example: false\n          type: boolean\n        mp4Support:\n          description: Whether the player supports the mp4 format.\n          example: true\n          type: boolean\n        tags:\n          description: A list of terms or words you want to tag the video with. Make\n            sure the list includes all the tags you want as whatever you send in this\n            list will overwrite the existing list for the video.\n          example: '[\"maths\", \"string theory\", \"video\"]'\n          items:\n            type: string\n          type: array\n        metadata:\n          description: A list (array) of dictionaries where each dictionary contains\n            a key value pair that describes the video. As with tags, you must send\n            the complete list of metadata you want as whatever you send here will\n            overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata)\n            allows you to define a key that allows any value pair.\n          items:\n            $ref: '#/components/schemas/metadata'\n          type: array\n      title: VideoUpdatePayload\n      type: object\n    token-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - createdAt: 2019-12-16T08:25:51Z\n          ttl: 171976544\n          expiresAt: 2019-12-16T09:25:51Z\n          token: to1tcmSFHeYY5KzyhOqVKMKb\n        - createdAt: 2019-12-16T08:25:51Z\n          ttl: 171976544\n          expiresAt: 2019-12-16T09:25:51Z\n          token: to1tcmSFHeYY5KzyhOqVKMKb\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/upload-token'\n          title: uploadToken\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: UploadTokens\n      type: object\n    token-creation-payload:\n      example:\n        ttl: 3600\n      properties:\n        ttl:\n          default: 0\n          description: Time in seconds that the token will be active. A value of 0\n            means that the token has no exipration date. The default is to have no\n            expiration.\n          maximum: 2147483647\n          minimum: 0\n          type: integer\n      title: TokenCreationPayload\n      type: object\n    token-upload-payload:\n      properties:\n        file:\n          description: The path to the video you want to upload.\n          format: binary\n          type: string\n          x-client-chunk-upload: \"true\"\n        videoId:\n          description: The video id returned by the first call to this endpoint in\n            a large video upload scenario.\n          type: string\n          x-client-ignore: true\n          x-client-copy-from-response: true\n      required:\n      - file\n      title: tokenUploadPayload\n      type: object\n    live-stream-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n          createdAt: 2020-01-31T10:17:47Z\n          assets:\n            thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n            iframe: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\"\n              width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n            hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n            player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n          public: true\n          liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n          record: true\n          name: My Live Stream\n          playerId: pl45d5vFFGrfdsdsd156dGhh\n          broadcasting: true\n          updatedAt: 2020-01-31T10:18:47Z\n        - streamKey: cc1b4df0-d1c5-4064-a8f9-9f0368385135\n          createdAt: 2020-01-31T10:17:47Z\n          assets:\n            thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n            iframe: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\"\n              width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n            hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n            player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n          public: true\n          liveStreamId: li400mYKSgQ6xs7taUeSaEKr\n          record: true\n          name: My Live Stream\n          playerId: pl45d5vFFGrfdsdsd156dGhh\n          broadcasting: true\n          updatedAt: 2020-01-31T10:18:47Z\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/live-stream'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: LiveStreams\n      type: object\n    live-stream-creation-payload:\n      example:\n        name: Test live\n        record: true\n        playerId: pl4f4ferf5erfr5zed4fsdd\n      properties:\n        name:\n          description: Add a name for your live stream here.\n          example: My Live Stream Video\n          type: string\n        record:\n          default: false\n          description: Whether you are recording or not. True for record, false for\n            not record.\n          example: true\n          type: boolean\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams\n            to 3,000 users. Whether your video can be viewed by everyone, or requires\n            authentication to see it. A setting of false will require a unique token\n            for each view.\n          type: boolean\n        playerId:\n          description: The unique identifier for the player.\n          example: pl4f4ferf5erfr5zed4fsdd\n          type: string\n      required:\n      - name\n      title: LiveStreamCreationPayload\n      type: object\n    live-stream-update-payload:\n      properties:\n        name:\n          description: The name you want to use for your live stream.\n          example: My Live Stream Video\n          type: string\n        public:\n          description: BETA FEATURE Please limit all public = false (\"private\") livestreams\n            to 3,000 users. Whether your video can be viewed by everyone, or requires\n            authentication to see it. A setting of false will require a unique token\n            for each view.\n          type: boolean\n        record:\n          description: Use this to indicate whether you want the recording on or off.\n            On is true, off is false.\n          example: true\n          type: boolean\n        playerId:\n          description: The unique ID for the player associated with a live stream\n            that you want to update.\n          example: pl45KFKdlddgk654dspkze\n          type: string\n      title: LiveStreamUpdatePayload\n      type: object\n    captions-upload-payload:\n      properties:\n        file:\n          description: The video text track (VTT) you want to upload.\n          format: binary\n          type: string\n      required:\n      - file\n      title: CaptionsUploadPayload\n      type: object\n    live-stream-thumbnail-upload-payload:\n      properties:\n        file:\n          description: The .jpg image to be added as a thumbnail.\n          format: binary\n          type: string\n      required:\n      - file\n      title: LiveStreamThumbnailUploadPayload\n      type: object\n    captions-update-payload:\n      properties:\n        default:\n          type: boolean\n      title: CaptionsUpdatePayload\n      type: object\n    captions-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - default: false\n          src: src\n          srclang: srclang\n          uri: uri\n        - default: false\n          src: src\n          srclang: srclang\n          uri: uri\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/caption'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: VideoCaptions\n      type: object\n    chapters-update-payload:\n      properties:\n        file:\n          description: The VTT file describing the chapters you want to upload.\n          format: binary\n          type: string\n      required:\n      - file\n      title: ChaptersUpdatePayload\n      type: object\n    chapters-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n          language: language\n          uri: uri\n        - src: https://cdn.api.video/vod/vi3N6cDinStg3oBbN79GklWS/chapters/fr.vtt\n          language: language\n          uri: uri\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/chapter'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: VideoChapters\n      type: object\n    player-themes-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - trackUnplayed: trackUnplayed\n          backgroundTop: backgroundTop\n          link: link\n          trackPlayed: trackPlayed\n          linkHover: linkHover\n          backgroundBottom: backgroundBottom\n          enableControls: true\n          backgroundText: backgroundText\n          enableApi: true\n          forceAutoplay: true\n          trackBackground: trackBackground\n          createdAt: 2020-01-31T10:17:47Z\n          assets:\n            link: path/to/my/logo/mylogo.jpg\n            logo: mylogo.jpg\n          hideTitle: true\n          name: name\n          text: text\n          linkActive: linkActive\n          forceLoop: true\n          playerId: pl45KFKdlddgk654dspkze\n          updatedAt: 2020-01-31T10:18:47Z\n        - trackUnplayed: trackUnplayed\n          backgroundTop: backgroundTop\n          link: link\n          trackPlayed: trackPlayed\n          linkHover: linkHover\n          backgroundBottom: backgroundBottom\n          enableControls: true\n          backgroundText: backgroundText\n          enableApi: true\n          forceAutoplay: true\n          trackBackground: trackBackground\n          createdAt: 2020-01-31T10:17:47Z\n          assets:\n            link: path/to/my/logo/mylogo.jpg\n            logo: mylogo.jpg\n          hideTitle: true\n          name: name\n          text: text\n          linkActive: linkActive\n          forceLoop: true\n          playerId: pl45KFKdlddgk654dspkze\n          updatedAt: 2020-01-31T10:18:47Z\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/player-theme'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: PlayerThemes\n      type: object\n    player-theme-upload-logo-payload:\n      properties:\n        file:\n          description: The name of the file you want to use for your logo.\n          format: binary\n          type: string\n        link:\n          description: A public link that you want to advertise in your player. For\n            example, you could add a link to your company. When a viewer clicks on\n            your logo, they will be taken to this address.\n          example: https://my-company.com\n          format: string\n          type: string\n      required:\n      - file\n      title: PlayerThemeUploadLogoPayload\n      type: object\n    raw-statistics-list-sessions-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - session:\n            sessionId: psEmFwGQUAXR2lFHj5nDOpy\n            loadedAt: 2019-06-24T11:45:01.109+00\n            endedAt: 2019-06-24T11:49:19.243+00\n          location:\n            country: France\n            city: Paris\n          referrer:\n            url: https://api.video\n            medium: organic\n            source: https://google.com\n            searchTerm: video encoding hosting and delivery\n          device:\n            type: desktop\n            vendor: Dell\n            model: unknown\n          os:\n            name: Microsoft Windows\n            shortname: W10\n            version: Windows10\n          client:\n            type: browser\n            name: Firefox\n            version: \"67.0\"\n        - session:\n            sessionId: psEmFwGQUAXR2lFHj5nDOpy\n            loadedAt: 2019-06-24T11:45:01.109+00\n            endedAt: 2019-06-24T11:49:19.243+00\n          location:\n            country: France\n            city: Paris\n          referrer:\n            url: https://api.video\n            medium: organic\n            source: https://google.com\n            searchTerm: video encoding hosting and delivery\n          device:\n            type: desktop\n            vendor: Dell\n            model: unknown\n          os:\n            name: Microsoft Windows\n            shortname: W10\n            version: Windows10\n          client:\n            type: browser\n            name: Firefox\n            version: \"67.0\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/video-session'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: VideoSessions\n      type: object\n    raw-statistics-list-live-stream-analytics-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - referrer:\n            searchTerm: video stream\n            medium: organic\n            source: https://google.com\n            url: https://api.video\n          os:\n            name: Microsoft Windows\n            shortname: W10\n            version: Windows 10\n          session:\n            loadedAt: 2000-01-23T04:56:07.000+00:00\n            endedAt: 2000-01-23T04:56:07.000+00:00\n            sessionId: sessionId\n          client:\n            name: Firefox\n            type: browser\n            version: \"67.0\"\n          location:\n            country: France\n            city: Paris\n          device:\n            vendor: Dell\n            model: unknown\n            type: desktop\n        - referrer:\n            searchTerm: video stream\n            medium: organic\n            source: https://google.com\n            url: https://api.video\n          os:\n            name: Microsoft Windows\n            shortname: W10\n            version: Windows 10\n          session:\n            loadedAt: 2000-01-23T04:56:07.000+00:00\n            endedAt: 2000-01-23T04:56:07.000+00:00\n            sessionId: sessionId\n          client:\n            name: Firefox\n            type: browser\n            version: \"67.0\"\n          location:\n            country: France\n            city: Paris\n          device:\n            vendor: Dell\n            model: unknown\n            type: desktop\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/live-stream-session'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: LiveStreamSessions\n      type: object\n    raw-statistics-list-player-session-events-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - emittedAt: 2000-01-23T04:56:07.000+00:00\n          at: 0\n          from: 6\n          to: 1\n          type: play\n        - emittedAt: 2000-01-23T04:56:07.000+00:00\n          at: 0\n          from: 6\n          to: 1\n          type: play\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/player-session-event'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: PlayerSessionEvents\n      type: object\n    webhooks-list-response:\n      example:\n        pagination:\n          itemsTotal: 123\n          pagesTotal: 7\n          pageSize: 20\n          currentPage: 3\n          currentPageItems: 20\n          links:\n            first:\n              rel: first\n              uri: /videos/search?currentPage=1\u0026pageSize=20\n            previous:\n              rel: previous\n              uri: /videos/search?currentPage=2\u0026pageSize=20\n            next:\n              rel: next\n              uri: /videos/search?currentPage=4\u0026pageSize=20\n            last:\n              rel: last\n              uri: /videos/search?currentPage=6\u0026pageSize=20\n        data:\n        - createdAt: 2000-01-23T04:56:07.000+00:00\n          webhookId: webhook_XXXXXXXXXXXXXXX\n          events: '[\"video.encoding.quality.completed\"]'\n          url: http://clientnotificationserver.com/notif?myquery=query\n        - createdAt: 2000-01-23T04:56:07.000+00:00\n          webhookId: webhook_XXXXXXXXXXXXXXX\n          events: '[\"video.encoding.quality.completed\"]'\n          url: http://clientnotificationserver.com/notif?myquery=query\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/webhook'\n          type: array\n        pagination:\n          $ref: '#/components/schemas/pagination'\n      required:\n      - data\n      - pagination\n      title: Webhooks\n      type: object\n    webhooks-creation-payload:\n      example:\n        events:\n        - video.encoding.quality.completed\n        url: http://clientnotificationserver.com/notif?myquery=query\n      properties:\n        events:\n          description: |-\n            A list of the webhooks that you are subscribing to. There are Currently four webhook options:\n            * ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \\\"type\\\": \\\"video.encoding.quality.completed\\\", \\\"emittedAt\\\": \\\"2021-01-29T16:46:25.217+01:00\\\", \\\"videoId\\\": \\\"viXXXXXXXX\\\", \\\"encoding\\\": \\\"hls\\\", \\\"quality\\\": \\\"720p\\\"} ```. This request says that the 720p HLS encoding was completed.\n            * ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.\n            * ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.\n            * ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.\n          example:\n          - video.encoding.quality.completed\n          items:\n            type: string\n          type: array\n        url:\n          description: The the url to which HTTP notifications are sent. It could\n            be any http or https URL.\n          example: https://example.com/webhooks\n          type: string\n      required:\n      - events\n      - url\n      title: WebhooksCreationPayload\n      type: object\n    pagination-link:\n      properties:\n        rel:\n          type: string\n        uri:\n          format: uri\n          type: string\n      title: PaginationLink\n      type: object\n    video-watermark:\n      properties:\n        id:\n          description: id of the watermark\n          example: watermark_1BWr2L5MTQwxGkuxKjzh6i\n          type: string\n        top:\n          description: Distance expressed in px or % between the top-border of the\n            video and the watermark-image.\n          example: 10px\n          type: string\n        left:\n          description: Distance expressed in px or % between the left-border of the\n            video and the watermark-image.\n          example: 10px\n          type: string\n        bottom:\n          description: Distance expressed in px or % between the bottom-border of\n            the video and the watermark-image.\n          example: 10px\n          type: string\n        right:\n          description: Distance expressed in px or % between the right-border of the\n            video and the watermark-image.\n          example: 10px\n          type: string\n        width:\n          description: 'Width of the watermark-image relative to the video if expressed\n            in %. Otherwise a fixed width. NOTE: To keep intrinsic watermark-image\n            width use initial'\n          example: 50%\n          type: string\n        height:\n          description: 'Width of the watermark-image relative to the video if expressed\n            in %. Otherwise a fixed height. NOTE: To keep intrinsic watermark-image\n            height use initial'\n          example: 50%\n          type: string\n        opacity:\n          description: Opacity expressed in % only to specify the degree of the watermark-image\n            transparency with the video.\n          example: 70%\n          type: string\n      type: object\n    video-clip:\n      properties:\n        startTimecode:\n          pattern: ^(?:\\d{2,3}:[0-5]\\d:[0-5]\\d(?:\\.\\d{1,3}|\\:\\d{1,2})?|\\d{1,7})$\n          type: string\n        endTimecode:\n          pattern: ^(?:\\d{2,3}:[0-5]\\d:[0-5]\\d(?:\\.\\d{1,3}|\\:\\d{1,2})?|\\d{1,7})$\n          type: string\n      type: object\n    video-source-live-stream-link:\n      properties:\n        rel:\n          type: string\n        uri:\n          type: string\n      type: object\n    video-source-live-stream:\n      description: This appears if the video is from a Live Record.\n      properties:\n        liveStreamId:\n          description: The unique identifier for the live stream.\n          example: li400mYKSgQ6xs7taUeSaEKr\n          type: string\n        links:\n          items:\n            $ref: '#/components/schemas/video-source-live-stream-link'\n          type: array\n      type: object\n    video-source:\n      description: Source information about the video.\n      properties:\n        uri:\n          description: The URL where the video is stored.\n          example: /videos/vi4k0jvEUuaTdRAEjQ4Prklg/source\n          type: string\n        type:\n          type: string\n        liveStream:\n          $ref: '#/components/schemas/video-source-live-stream'\n      title: VideoSource\n      type: object\n    video-assets:\n      description: Collection of details about the video object that you can use to\n        work with the video object.\n      properties:\n        hls:\n          description: This is the manifest URL. For HTTP Live Streaming (HLS), when\n            a HLS video stream is initiated, the first file to download is the manifest.\n            This file has the extension M3U8, and provides the video player with information\n            about the various bitrates available for streaming.\n          format: uri\n          type: string\n        iframe:\n          description: Code to use video from a third party website\n          example: \u003ciframe src=\"//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\"\n            width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n          type: string\n        player:\n          description: Raw url of the player.\n          example: https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae\n          format: uri\n          type: string\n        thumbnail:\n          description: Poster of the video.\n          example: https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg\n          format: uri\n          type: string\n        mp4:\n          description: Available only if mp4Support is enabled. Raw mp4 url.\n          example: https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4\n          format: uri\n          type: string\n      title: VideoAssets\n      type: object\n    video-session-session:\n      properties:\n        sessionId:\n          description: The unique identifier for the session that you can use to track\n            what happens during it.\n          example: psEmFwGQUAXR2lFHj5nDOpy\n          type: string\n        loadedAt:\n          description: When the video session started, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        endedAt:\n          description: When the video session ended, presented in ISO-8601 format.\n          format: date-time\n          type: string\n        metadata:\n          description: A list of key value pairs that you use to provide metadata\n            for your video. These pairs can be made dynamic, allowing you to segment\n            your audience. You can also just use the pairs as another way to tag and\n            categorize your videos.\n          example: '[{\"key\": \"Author\", \"value\": \"John Doe\"}]'\n          items:\n            $ref: '#/components/schemas/metadata'\n          type: array\n      title: VideoSessionSession\n      type: object\n    video-session-location:\n      description: The location of the viewer.\n      properties:\n        country:\n          description: The country of the viewer.\n          example: France\n          type: string\n        city:\n          description: The city of the viewer.\n          example: Paris\n          nullable: true\n          type: string\n      title: VideoSessionLocation\n      type: object\n    video-session-referrer:\n      properties:\n        url:\n          description: The link the viewer used to reach the video session.\n          example: https://api.video\n          nullable: true\n          type: string\n        medium:\n          description: How they arrived at the site, for example organic or paid.\n            Organic meaning they found it themselves and paid meaning they followed\n            a link from an advertisement.\n          example: organic\n          type: string\n        source:\n          description: The source the referrer came from to the video session. For\n            example if they searched through google to find the stream.\n          example: https://google.com\n          type: string\n        searchTerm:\n          description: The search term they typed to arrive at the video session.\n          type: string\n      title: VideoSessionReferrer\n      type: object\n    video-session-device:\n      description: What type of device the user is on when in the video session.\n      properties:\n        type:\n          description: What the type is like desktop, laptop, mobile.\n          example: desktop\n          type: string\n        vendor:\n          description: If known, what the brand of the device is, like Apple, Dell,\n            etc.\n          example: Dell\n          type: string\n        model:\n          description: The specific model of the device, if known.\n          example: unknown\n          type: string\n      title: VideoSessionDevice\n      type: object\n    video-session-os:\n      description: The operating system the viewer is on.\n      example:\n        name: Microsoft Windows\n        shortname: W10\n        version: Windows 10\n      properties:\n        name:\n          description: The name of the operating system.\n          example: Microsoft Windows\n          type: string\n        shortname:\n          description: The nickname for the operating system, often representing the\n            version.\n          example: W10\n          type: string\n        version:\n          description: The version of the operating system.\n          example: Windows 10\n          type: string\n      title: VideoSessionOs\n      type: object\n    video-session-client:\n      description: What kind of browser the viewer is using for the video session.\n      properties:\n        name:\n          description: The name of the browser used to view the video session.\n          example: Firefox\n          type: string\n        version:\n          description: The version of the browser used to view the video session.\n          example: \"67.0\"\n          type: string\n        type:\n          description: The type of client used to view the video session.\n          example: browser\n          type: string\n      title: VideoSessionClient\n      type: object\n    live-stream-assets:\n      example:\n        thumbnail: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n        iframe: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\"\n          width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n        hls: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n        player: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n      properties:\n        hls:\n          description: The http live streaming (HLS) link for your live video stream.\n          example: https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8\n          format: uri\n          type: string\n        iframe:\n          description: The embed code for the iframe containing your live video stream.\n          example: \u003ciframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\"\n            width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"\u003e\u003c/iframe\u003e\n          type: string\n        player:\n          description: A link to the video player that is playing your live stream.\n          example: https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr\n          format: uri\n          type: string\n        thumbnail:\n          description: A link to the thumbnail for your video.\n          example: https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg\n          format: uri\n          type: string\n      title: LiveStreamAssets\n      type: object\n    live-stream-session-session:\n      example:\n        loadedAt: 2000-01-23T04:56:07.000+00:00\n        endedAt: 2000-01-23T04:56:07.000+00:00\n        sessionId: sessionId\n      properties:\n        sessionId:\n          description: A unique identifier for your session. You can use this to track\n            what happens during a specific session.\n          type: string\n        loadedAt:\n          description: When the session started, with the date and time presented\n            in ISO-8601 format.\n          format: date-time\n          type: string\n        endedAt:\n          description: When the session ended, with the date and time presented in\n            ISO-8601 format.\n          format: date-time\n          type: string\n      title: LiveStreamSessionSession\n      type: object\n    live-stream-session-location:\n      description: The location of the viewer of the live stream.\n      example:\n        country: France\n        city: Paris\n      properties:\n        country:\n          description: The country of the viewer of the live stream.\n          example: France\n          type: string\n        city:\n          description: The city of the viewer of the live stream.\n          example: Paris\n          type: string\n      title: LiveStreamSessionLocation\n      type: object\n    live-stream-session-referrer:\n      example:\n        searchTerm: video stream\n        medium: organic\n        source: https://google.com\n        url: https://api.video\n      properties:\n        url:\n          description: The website the viewer of the live stream was referred to in\n            order to view the live stream.\n          example: https://api.video\n          type: string\n        medium:\n          description: The type of search that brought the viewer to the live stream.\n            Organic would be they found it on their own, paid would be they found\n            it via an advertisement.\n          example: organic\n          type: string\n        source:\n          description: Where the viewer came from to see the live stream (usually\n            where they searched from).\n          example: https://google.com\n          type: string\n        searchTerm:\n          description: What term they searched for that led them to the live stream.\n          example: video stream\n          type: string\n      title: LiveStreamSessionReferrer\n      type: object\n    live-stream-session-device:\n      description: What type of device the user is on when in the live stream session.\n      example:\n        vendor: Dell\n        model: unknown\n        type: desktop\n      properties:\n        type:\n          description: What the type is like desktop, laptop, mobile.\n          example: desktop\n          type: string\n        vendor:\n          description: If known, what the brand of the device is, like Apple, Dell,\n            etc.\n          example: Dell\n          type: string\n        model:\n          description: The specific model of the device, if known.\n          example: unknown\n          type: string\n      title: LiveStreamSessionDevice\n      type: object\n    live-stream-session-client:\n      description: What kind of browser the viewer is using for the live stream session.\n      example:\n        name: Firefox\n        type: browser\n        version: \"67.0\"\n      properties:\n        name:\n          description: The name of the browser used to view the live stream session.\n          example: Firefox\n          type: string\n        version:\n          description: The version of the browser used to view the live stream session.\n          example: \"67.0\"\n          type: string\n        type:\n          description: The type of client used to view the live stream session.\n          example: browser\n          type: string\n      title: LiveStreamSessionClient\n      type: object\n    video-status-ingest:\n      description: Details about the capturing, transferring, and storing of your\n        video for use immediately or in the future.\n      properties:\n        status:\n          description: There are three possible ingest statuses. missing - you are\n            missing information required to ingest the video. uploading - the video\n            is in the process of being uploaded. uploaded - the video is ready for\n            use.\n          enum:\n          - missing\n          - uploading\n          - uploaded\n          example: uploaded\n          type: string\n        filesize:\n          description: The size of your file in bytes.\n          example: 200000\n          type: integer\n        receivedBytes:\n          description: The total number of bytes received, listed for each chunk of\n            the upload.\n          items:\n            $ref: '#/components/schemas/bytes-range'\n          type: array\n      title: VideoStatusIngest\n      type: object\n    video-status-encoding-metadata:\n      properties:\n        width:\n          description: The width of the video in pixels.\n          type: integer\n        height:\n          description: The height of the video in pixels.\n          type: integer\n        bitrate:\n          description: The number of bits processed per second.\n          type: number\n        duration:\n          description: The length of the video.\n          type: integer\n        framerate:\n          description: The frequency with which consecutive images or frames appear\n            on a display. Shown in this API as frames per second (fps).\n          example: 60\n          type: integer\n        samplerate:\n          description: How many samples per second a digital audio system uses to\n            record an audio signal. The higher the rate, the higher the frequencies\n            that can be recorded. They are presented in this API using hertz.\n          example: 48000\n          type: integer\n        videoCodec:\n          description: 'The method used to compress and decompress digital video.\n            API Video supports all codecs in the libavcodec library. '\n          type: string\n        audioCodec:\n          description: The method used to compress and decompress digital audio for\n            your video.\n          type: string\n        aspectRatio:\n          type: string\n      title: VideoStatusEncodingMetadata\n      type: object\n    video-status-encoding:\n      properties:\n        playable:\n          description: Whether the video is playable or not.\n          example: true\n          type: boolean\n        qualities:\n          description: Available qualities the video can be viewed in.\n          items:\n            $ref: '#/components/schemas/quality'\n          type: array\n        metadata:\n          $ref: '#/components/schemas/video-status-encoding-metadata'\n      title: VideoStatusEncoding\n      type: object\n    player_theme_assets:\n      example:\n        link: path/to/my/logo/mylogo.jpg\n        logo: mylogo.jpg\n      properties:\n        logo:\n          description: The name of the file containing the logo you want to use.\n          example: mylogo.jpg\n          type: string\n        link:\n          description: The path to the file containing your logo.\n          example: path/to/my/logo/mylogo.jpg\n          type: string\n      type: object\n  securitySchemes:\n    bearerAuth:\n      scheme: bearer\n      type: http\nx-client-base-paths:\n  production: https://ws.api.video\n  sandbox: https://sandbox.api.video\nx-readme:\n  explorer-enabled: true\n  proxy-enabled: true\n  samples-enabled: true\n  samples-languages:\n  - curl\n  - go\n  - node\n  - php\n  - python\n\n"
		}
	},
	"Error": "buildIR: make ir: path \"/videos/{videoId}/source\": post: parameters: \"Content-Range\": string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?\u003c`",
	"NotImplemented": [
		"unsupported content types",
		"object with additionalProperties",
		"unsupported content types",
		"unsupported content types",
		"object with additionalProperties",
		"unsupported content types",
		"unsupported content types",
		"unsupported content types"
	]
}