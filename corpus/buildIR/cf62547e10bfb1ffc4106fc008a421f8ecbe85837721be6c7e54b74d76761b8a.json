{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opengeospatial/developer-events"
		},
		"file": {
			"name": "ogcapi-3d-geovolumes-draft-0.0.2.yaml",
			"size": 0,
			"path": "2022/Vector-Data-Code-Sprint/ogcapi-3d-geovolumes-draft-0.0.2.yaml",
			"byteSize": 26925,
			"content": "openapi: 3.0.1\ninfo:\n  title: A sample API definition based on the draft OGC API - 3D GeoVolumes candidate standard\n  version: \"0.0.2\"\n  description: \u003e-\n    This is a sample OpenAPI definition produced by the OGC 3D Container API Pilot\n    and adapted for the July 2022 OGC API Code Sprint - The Vector Data Code Sprint.\n  contact:\n    name: \"Open Geospatial Consortium (OGC)\"\n    email: standards-team@ogc.org\n    url: 'https://www.ogc.org/contacts'\n  license:\n    name: OGC License\n    url: http://www.opengeospatial.org/legal/\npaths:\n  '/':\n    get:\n      summary: Landing page of this API\n      description: \u003e-\n        The landing page provides links to the API definition, the Conformance\n        statements and the metadata about the 3d Container in this dataset.\n      operationId: getLandingPage\n      tags:\n        - OGC3DContainerAPI\n      responses:\n        '200':\n          description: 'links to the API capabilities'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/landingPage'\n            text/html:\n              schema:\n                type: string\n        '500':\n          description: 'error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  '/api':\n    get:\n      summary: API Definition\n      description: \u003e-\n        Provides the API definition\n      operationId: getAPIDefinition\n      tags:\n        - OGC3DContainerAPI\n      responses:\n        '200':\n          description: 'Links to the API capabilities'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/root'\n            text/html:\n              schema:\n                type: string\n        '500':\n          description: 'error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  '/conformance':\n    get:\n      summary: API Conformance\n      description: \u003e-\n        The landing page provides links to the API definition, the Conformance\n        statements and the metadata about the 3d-container data in this dataset.\n      operationId: getConformance\n      tags:\n        - OGC3DContainerAPI\n      responses:\n        '200':\n          description: 'links to the API capabilities'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/conformance'\n            text/html:\n              schema:\n                type: string\n        '500':\n          description: 'error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  '/collections':\n    get:\n      summary: Describes the collection of 3D Containers. \n      operationId: describe3DContainers\n      tags:\n        - OGC3DContainerAPI\n      parameters:\n      - $ref: '#/components/parameters/bbox'\n      - $ref: '#/components/parameters/formatHeader'\n      - $ref: '#/components/parameters/formatQS'\n      responses:\n        '200':\n          description: Metadata about the 3D Containers shared by this API.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/collections'\n            text/html:\n              schema:\n                type: string\n        '500':\n          description: 'error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n  '/collections/{3d-containerID}':\n    get:\n      summary: \u003e-\n        Retrieve the 3d-container for the specified id.  Optional query items: \n        bounding box and return format type.\n      operationId: describeContainer\n      tags:\n        - OGC3DContainerAPI\n      parameters:\n      - $ref: '#/components/parameters/3d-containerID'\n      - $ref: '#/components/parameters/bbox'\n      - $ref: '#/components/parameters/formatHeader'\n      - $ref: '#/components/parameters/formatQS'\n      responses:\n        '200':\n          description: 'Metadata about the {3d-containerID} 3D Container shared by this API.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/3dcontainer'\n            text/html:\n              schema:\n                type: string\n        '500':\n          description: 'error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\n        default:\n          description: An error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n            text/html:\n              schema:\n                type: string\ncomponents:\n  parameters:\n    boundingbox:\n      name: boundingbox\n      in: query\n      description: \u003e-\n        An array of 12 numbers that define an oriented bounding box. The \n        first three elements define the x, y, and z values for the center \n        of the box. The next three elements (with indices 3, 4, and 5) \n        define the x axis direction and half-length. The next three elements \n        (indices 6, 7, and 8) define the y axis direction and half-length. \n        The last three elements (indices 9, 10, and 11) define the z axis \n        direction and half-length.\n      required: false\n      schema:\n        type: array\n        minItems: 12\n        maxItems: 12\n        items:\n          type: number\n          format: double\n      style: form\n      explode: false\n    region:\n      name: region\n      in: query\n      description: \u003e-\n        An array of six numbers that define a bounding geographic region in \n        EPSG:4979 coordinates with the order [west, south, east, north, minimum\n        height, maximum height]. Longitudes and latitudes are in radians, and \n        heights are in meters above (or below) the WGS84 ellipsoid.\n      required: false\n      schema:\n        type: array\n        minItems: 6\n        maxItems: 6\n        items:\n          type: number\n          format: double\n      style: form\n      explode: false\n    sphere:\n      name: sphere\n      in: query\n      description: \u003e-\n        An array of four numbers that define a bounding sphere. The first three\n        elements define the x, y, and z values for the center of the sphere. \n        The last element (with index 3) defines the radius in meters.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 4\n        items:\n          type: number\n          format: double\n      style: form\n      explode: false\n    bbox:\n      name: bbox\n      in: query\n      description: \u003e\n        Only features that have a geometry that intersects the bounding box are selected.\n        The bounding box is provided as four or six numbers, depending on whether the\n        coordinate reference system includes a vertical axis (elevation or depth):\n\n        * Lower left corner, coordinate axis 1\n        * Lower left corner, coordinate axis 2\n        * Lower left corner, coordinate axis 3 (optional)\n        * Upper right corner, coordinate axis 1\n        * Upper right corner, coordinate axis 2\n        * Upper right corner, coordinate axis 3 (optional)\n\n        The coordinate reference system of the values is WGS84 longitude/latitude\n        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate\n        reference system is specified in the parameter `bbox-crs`.\n\n        For WGS84 longitude/latitude the values are in most cases the sequence of\n        minimum longitude, minimum latitude, maximum longitude and maximum latitude.\n        However, in cases where the box spans the antimeridian the first value\n        (west-most box edge) is larger than the third value (east-most box edge).\n\n        If a feature has multiple spatial geometry properties, it is the decision of the\n        server whether only a single spatial geometry property is used to determine\n        the extent or all relevant geometries.\n      required: false\n      schema:\n        type: array\n        minItems: 4\n        maxItems: 6\n        items:\n          type: number\n          format: double\n      style: form\n      explode: false\n    time:\n      name: time\n      in: query\n      description: \u003e-\n        Either a date-time or a period string that adheres to RFC 3339. Examples:\n\n        * A date-time: \"2018-02-12T23:20:50Z\"\n        * A period: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" or \"2018-02-12T00:00:00Z/P1M6DT12H31M12S\"\n\n        Only features that have a temporal property that intersects the value of\n        `time` are selected.\n\n        If a feature has multiple temporal properties, it is the decision of the\n        server whether only a single temporal property is used to determine\n        the extent or all relevant temporal properties.\n      required: false\n      schema:\n        type: string\n      style: form\n      explode: false\n    formatHeader:\n      name: format\n      in: header\n      description: \u003e-\n        The format of the response. If no value is provided, the standard http\n        rules apply, i.e., the accept header is used to determine the format.\n        Pre-defined values are application/json, text/html, application/octet stream.\n        The response to other values is determined by the server.\n      required: false\n      schema:\n        type: string\n        enum: \n          - 'application/json'\n          - 'text/html'\n          - 'application/octet stream'\n    formatQS:\n      name: f\n      in: query\n      description: \u003e-\n        The format of the response. If no value is provided, the standard http\n        rules apply, i.e., the accept header is used to determine the format.\n        Pre-defined values are \"json\" and \"html\". The response to other\n        values is determined by the server.\n      required: false\n      schema:\n        type: string\n        enum:\n          - json\n          - html\n    3d-containerID:\n      name: 3d-containerID\n      in: path\n      required: true\n      description: 'Identifier (name) of a specific 3D Container'\n      schema:\n        type: string\n  schemas:\n    exception:\n      title: 'Exception'\n      description: \u003e-\n        An exception describes an event, which occurs during execution \n        that disrupts the normal flow of the program's instructions.\n      type: object\n      required:\n        - code\n      properties:\n        code:\n          type: string\n        description:\n          type: string\n      example:\n        code: '500'\n        description: 'An internal server error occurred. Incident ID: 1234567. Please contact admin@example.org.'\n    conformance:\n      title: 'Conformance'\n      description: \u003e-\n        This schema defines the resource returned from the /Conformance path\n      type: object\n      properties:\n        conformsTo:\n          type: array\n          description: \u003e-\n            ConformsTo is an array of URLs. Each URL should correspond to\n            a defined OGC Conformance class. Unrecognized URLs should be ignored\n          items:\n            type: string\n            example: 'http://www.opengis.net/spec/OAPI_Common/1.0/req/core'\n      example:\n        conformsTo:\n        - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/req/core'\n        - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/req/oas30'\n        - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/req/html'\n        - 'http://www.opengis.net/spec/ogcapi-features-1/1.0/req/geojson'\n    landingPage:\n      title: 'Landing Page'\n      description: 'JSON schema for the OGC API-Common landing page'\n      type: object\n      required: \n        - links\n      properties:\n        title:\n          description: 'The title of the API'\n          type: string\n          example: 'OGC3DContainerAPI-Pilot'\n        description:\n          description: 'A textual description of the API'\n          type: 'string'\n          example: \u003e\n            The 3D Data Container and Tiles Pilot and associated component implementations to design, implement, and test a 2D/3D environment that allows smooth integration of both 2D tiled and 3D tiled geospatial data.\n        links:\n          description: 'Links to the resources exposed through this API.'\n          type: array\n          items: \n             $ref: '#/components/schemas/link'\n      example:\n        tile: 'OGC 3D Container/API Pilot'\n        description: 'A Pilot of anAPI for 3D Containers'\n        links:\n          - href: 'http://data.example.org/'\n            rel: 'service-desc'\n            type: application/json\n            title: \"Service Description\"\n          - href: 'https://app.swaggerhub.com/apis/timothy-miller/OGC_3DContainer_Tile_API_Pilot/0.0.1'\n            rel: service\n            type: application/openapi+json;version=3.0\n            title: 'Conformance'\n          - href: 'http://data.example.org/conformance'\n            rel: conformance\n            type: application/json\n            title: Conformance\n          - href: 'http://data.example.org/collections'\n            rel: data\n            type: application/json\n            title: Collections\n    root:\n      title: 'Root Object'\n      type: object\n      description: \u003e-\n        Collection of links that describe the overall capabilities of the API.\n      required:\n        - links\n      properties:\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n          example:\n            - href: 'http://data.example.org/'\n              rel: self\n              type: application/json\n              title: this document\n            - href: 'http://data.example.org/api'\n              rel: service\n              type: application/openapi+json;version=3.0\n              title: the API definition\n            - href: 'http://data.example.org/conformance'\n              rel: conformance\n              type: application/json\n              title: WFS 3.0 conformance classes implemented by this server\n            - href: 'http://data.example.org/collections'\n              rel: data\n              type: application/json\n              title: Metadata about the feature collections\n    link:\n      title: 'Link'\n      type: object\n      description: 'Link to content'\n      required:\n        - href\n        - rel\n      properties:\n        href:\n          type: string\n        title:\n          type: string\n        rel:\n          $ref: '#/components/schemas/rel'\n        type:\n          $ref: '#/components/schemas/type'\n        hreflang:\n          type: string\n          example: en\n      example: \n         title: '3dtiles'\n         href: 'URL'\n         rel:  'original'\n         type: 'application/json+3dtiles'\n         hreflang: 'en'\n    extent:\n      description: |-\n        The extent of the collection. In the Core only spatial and temporal extents are specified. Extensions may add additional members to represent other  extents, for example, thermal or pressure ranges.\n        It is recommended that the spatial extent is expected in CRS84 except if this is not possible.\n      type: object\n      properties:\n        spatial:\n          $ref: '#/components/schemas/spatialExtent'\n        temporal:\n          $ref: '#/components/schemas/temporalExtent'\n    spatialExtent:\n      description: |-\n        The spatial extent of the element in the collection.\n      type: object\n      required:\n        - bbox\n      properties:\n        bbox:\n          $ref: '#/components/schemas/bbox'\n        crs:\n          $ref: '#/components/schemas/crs'\n    bbox:\n      description: |-\n        One or more bounding boxes that describe the spatial extent of the dataset.\n        In the Core only a single bounding box is supported. Extensions may support\n        additional areas. If multiple areas are provided, the union of the bounding\n        boxes describes the spatial extent.\n      type: array\n      minItems: 1\n      items:\n        description: |-\n          West, south, [optional elevation], east, north, [optional elevation] edges of the bounding box. \n          The coordinates are in the coordinate reference system specified in 'crs'. By default\n          this is WGS84 longitude/latitude.\n          4 coordinates: longitude, latitude, longitude, latitude,\n          6 coordinates: longitude, latitude, elevation, longitude, latitude, elevation\n        type: array\n        minItems: 4\n        maxItems: 6\n        items:\n          type: number\n        example:\n          - 7.01\n          - 50.63\n          - -1.6\n          - 7.22\n          - 50.78\n          - 10.2\n    crs:\n      description: |-\n        Coordinate reference system of the coordinates in the spatial extent\n        (property `bbox`). The default reference system is WGS 84 longitude/latitude.\n        In the Core this is the only supported coordinate reference system.\n        Extensions may support additional coordinate reference systems and add\n        additional enum values.\n      type: string\n      enum:\n        - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n      default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n    temporalExtent:\n      description: |-\n        The temporal extent of the element in the collection.\n      type: object\n      nullable: true\n      properties:\n        interval:\n          $ref: '#/components/schemas/temporalInterval'\n        trs:\n          $ref: '#/components/schemas/trs'\n    temporalInterval:\n      description: |-\n        One or more time intervals that describe the temporal extent of the dataset.\n        The value `null` is supported and indicates an open time interval.\n        In the Core only a single time interval is supported. Extensions may support\n        multiple intervals. If multiple intervals are provided, the union of the\n        intervals describes the temporal extent.\n      type: array\n      nullable: true\n      minItems: 1\n      items:\n        description: |-\n          Begin and end times of the time interval. The timestamps\n          are in the coordinate reference system specified in `trs`. By default\n          this is the Gregorian calendar.\n        type: array\n        minItems: 2\n        maxItems: 2\n        items:\n          type: string\n          format: date-time\n          nullable: true\n        example:\n          - '2010-02-15T12:34:56Z'\n          - null\n    trs:\n      description: |-\n        Coordinate reference system of the coordinates in the temporal extent\n        (property `interval`). The default reference system is the Gregorian calendar.\n        In the Core this is the only supported temporal reference system.\n        Extensions may support additional temporal reference systems and add\n        additional enum values.\n      type: string\n      enum:\n        - 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n      default: 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n    3dcontainer:\n      title: '3D-Container' \n      description: \u003e-\n        The 3D Data Container and Tiles API is an OGC API whose characteristic resource is a 3DContainer.\n        The most general definition of a 3D-Container (3DC) is that it is a spatial information resource that has a distinct bounding volume, a (required) enclosing bounding box (2D / 3D), contains at most one 3D model dataset which is relevant to that volume (items, content) and represented by references to one or more distributions, and includes or references other 3D-Containers (children) whose bounding volumes are fully contained by the parent container’s bounding volume. The default representations of a 3D-Container are json / html information documents which define the bounding box, link to an implicit tileset scheme if applicable and provide the described links.\n      type: object\n      required:\n        - id\n        - extent\n        - links\n      properties:\n        id:\n          type: string\n          description: 'Identifier (name) of a specific 3D Container'\n        title:\n          type: string\n          description: 'Title of a specific 3D Container'\n          example: '3D-Container Collection Information Schema'\n        description:\n          type: string\n          description:  'Detailed description of a specific 3D Container'\n          example: \u003e- \n            This schema defines metadata resource returned from \n            /collections/{collectionId} for a collection type of 3d-container\n        collectionType:\n          type: string\n          description: \u003e-\n             Property with value \"3d-container\" is required.\n          default: '3d-container'\n        itemType:\n          type: string\n          description: \u003e-\n             Indicator about the type of the items in the collection (the default value is 'unknown').\n          default: 'unknown'\n        extent:\n          $ref: '#/components/schemas/extent'\n        contentExtent:\n           $ref: '#/components/schemas/boundingVolume'\n        crs:\n           $ref: '#/components/schemas/crs'\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n          example:\n            - href: 'http://data.example.org/collections.json'\n              rel: self\n              type: application/json\n              title: this document\n            - href: 'http://data.example.org/collections.html'\n              rel: alternate\n              type: text/html\n              title: this document as HTML\n            - href: 'http://schemas.example.org/1.0/foobar.xsd'\n              rel: describedBy\n              type: application/xml\n              title: XML schema for Acme Corporation data\n          description: \u003e-\n            Array members in the \"links\" property must include \"self\", and may include\n            \"items\" (for compatibility with a common collection type),\n            \"parent\" (link to enclosing 3D-Container),\n            \"root\" (link to top-level 3D-Container),\n            \"scheme\" link to the definition of any implicit tile scheme which sets the \n            3Container organization, extent and/or addressing,\n            \"affinemap\" (link from a 3D-Container with 2D content to a 3D-Container \n            with 2.5D content (surface, point cloud) to which the 2D content should \n            be texture-mapped)\n        children:\n          type: array\n          description: \u003e-\n            A \"children\" property with an array of zero or more \"child\" \n            3D-Containers is require(could be just the required properties: \n            id, self-link, extent).\n          items:\n            $ref: '#/components/schemas/3dcontainer'\n        content:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n    collections:\n      type: object\n      title: 'Collections'\n      properties:\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/link'\n        collections:\n          type: array\n          items:\n            $ref: '#/components/schemas/3dcontainer'\n    box:\n      title: 'Bounding Box'\n      description: \u003e-\n        An array of 12 numbers that define an oriented bounding box.  The first\n        three elements define the x, y, and z values for the center of the box.\n        The next three elements (with indices 3, 4, and 5) define the x axis \n        direction and half-length.  The next three elements (indices 6, 7, and\n        8) define the y axis direction and half-length.  The last three elements\n        (indices 9, 10, and 11) define the z axis direction and half-length.\n      example: [0, 0, 10, 100, 0, 0, 0, 100, 0, 0, 0, 10]\n      type: array\n      items:\n        type: number\n        format: double\n      minItems: 12\n      maxItems: 12\n    region:\n      title: 'Bounding Region'\n      description: \u003e-\n        An array of six numbers that define a bounding geographic region in \n        EPSG:4979 coordinates with the order [west, south, east, north, \n        minimum height, maximum height]. Longitudes and latitudes are in \n        radians, and heights are in meters above (or below) the WGS84 ellipsoid.\n      example: [ -1.3197004795898053, 0.6988582109, -1.3196595204101946, 0.6988897891, 0, 20 ]\n      type: array\n      items:\n        type: number\n        format: double\n      minItems: 6\n      maxItems: 6\n    sphere:\n      title: 'Bounding Sphere'\n      description: \u003e-\n        An array of four numbers that define a bounding sphere.  The first \n        three elements define the x, y, and z values for the center of the \n        sphere.  The last element (with index 3) defines the radius in meters. \n      example: [ 0, 0, 10, 141.4214 ]\n      type: array\n      items:\n        type: number\n        format: double\n      minItems: 4\n      maxItems: 4\n    boundingVolume:\n      title: 'Bounding Volume'\n      description: \u003e-\n        A closed volume completely containing the union of a set of geometric objects. \n        Exactly one box, region, or sphere property is required.\n      properties:\n          box:\n            $ref: '#/components/schemas/box'\n          region:\n            $ref: '#/components/schemas/region'\n          sphere:\n            $ref: '#/components/schemas/sphere'\n      oneOf:\n        - $ref: '#/components/schemas/box'\n        - $ref: '#/components/schemas/region'\n        - $ref: '#/components/schemas/sphere'\n    rel:\n      title: 'Link Relation Type'\n      description: \u003e-\n        The relationship between the current JSON resource representation and a \n        related JSON resource.  The provided enumeration is provided as an \n        example.  Other relationship types are possible.\n      type: string\n      enum:\n        - affinemap\n        - alternate\n        - collections\n        - conformance\n        - data\n        - dataset\n        - describedBy\n        - distribution\n        - item\n        - items\n        - original\n        - parent\n        - root\n        - scheme\n        - self\n        - service\n        - service-desc\n    type:\n      title: \"Content Type\"\n      description: 'Content type enumeration'\n      type: string\n      pattern: '^(?=[-a-z]{1,127}/[-\\.a-z0-9]{1,127}$)[a-z]+(-[a-z]+)*/[a-z0-9]+([-\\.][a-z0-9]+)*$'\n      enum:\n        - 'application/json'\n        - 'application/json-3dtiles'\n        - 'application/json-i3s'\n        - 'text/html'\ntags:\n  - name: OGC3DContainerAPI\n    description: \u003e-\n      Essential characteristics of this API including information about the data.\n",
			"canonicalURL": "/github.com/opengeospatial/developer-events@ab844083098dbb7f33eed6d3a9883a0d8a089516/-/blob/2022/Vector-Data-Code-Sprint/ogcapi-3d-geovolumes-draft-0.0.2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/opengeospatial/developer-events/blob/ab844083098dbb7f33eed6d3a9883a0d8a089516/2022/Vector-Data-Code-Sprint/ogcapi-3d-geovolumes-draft-0.0.2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/\": get: responses: code 200: contents: media: \"application/json\": generate schema: field links: item: field type: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?=`"
}