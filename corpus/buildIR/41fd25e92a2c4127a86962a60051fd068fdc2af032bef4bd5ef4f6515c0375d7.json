{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/openapi-to-graphql"
		},
		"file": {
			"name": "example_oas.json",
			"size": 0,
			"path": "test/fixtures/example_oas.json",
			"byteSize": 42769,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Example API\",\n    \"description\": \"An API to test converting Open API Specs 3.0 to GraphQL\",\n    \"version\": \"1.0.0\",\n    \"termsOfService\": \"http://example.com/terms/\",\n    \"contact\": {\n      \"name\": \"Erik Wittern\",\n      \"url\": \"http://www.example.com/support\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"externalDocs\": {\n    \"url\": \"http://example.com/docs\",\n    \"description\": \"Some more natural language description.\"\n  },\n  \"tags\": [\n    {\n      \"name\": \"test\",\n      \"description\": \"Indicates this API is for testing\"\n    }\n  ],\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:{port}/{basePath}\",\n      \"description\": \"The location of the local test server.\",\n      \"variables\": {\n        \"port\": {\n          \"default\": \"3001\"\n        },\n        \"basePath\": {\n          \"default\": \"api\"\n        }\n      }\n    }\n  ],\n  \"paths\": {\n    \"/users\": {\n      \"get\": {\n        \"operationId\": \"getUsers\",\n        \"description\": \"Return a list of users.\",\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            },\n            \"description\": \"Limit of the number of users to return.\"\n          }\n        ],\n        \"responses\": {\n          \"202\": {\n            \"description\": \"A list of users.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/user\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"operationId\": \"postUser\",\n        \"description\": \"Create a new user in the system.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/user\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The posted user.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/user\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users/{username}\": {\n      \"get\": {\n        \"operationId\": \"getUserByUsername\",\n        \"description\": \"Returns a user from the system.\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Identifier of a user.\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A user represents a natural person.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/user\"\n                }\n              }\n            },\n            \"links\": {\n              \"employerCompany\": {\n                \"$ref\": \"#/components/links/EmployerCompany\"\n              },\n              \"author\": {\n                \"$ref\": \"#/components/links/Author\"\n              },\n              \"friends\": {\n                \"$ref\": \"#/components/links/Friends\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users/{username}/car\": {\n      \"get\": {\n        \"operationId\": \"getUserCar\",\n        \"description\": \"Returns a car to test nesting of sub operations\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Identifier of a user.\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A car of a user.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/car\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users/{username}/friends\": {\n      \"get\": {\n        \"operationId\": \"getUserFriends\",\n        \"description\": \"Returns a user's friends to test pagination\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Identifier of a user.\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The user's friends.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/user\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/assets/{companyId}\": {\n      \"get\": {\n        \"operationId\": \"getAllAssets\",\n        \"description\": \"Returns all company assets\",\n        \"parameters\": [\n          {\n            \"name\": \"companyId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A company's assets\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/car\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/user\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/trashcan\"\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cars\": {\n      \"get\": {\n        \"operationId\": \"getAllCars\",\n        \"description\": \"Returns information about all employee cars\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Everyone's cars\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/car\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/companies/{id}\": {\n      \"get\": {\n        \"operationId\": \"getCompanyById\",\n        \"description\": \"Returns the profile of a company with the given ID.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A company profile.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/company\"\n                }\n              }\n            },\n            \"links\": {\n              \"ceoUser\": {\n                \"$ref\": \"#/components/links/CeoUser\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cookie\": {\n      \"get\": {\n        \"operationId\": \"getCookie\",\n        \"description\": \"Used to test cookies.\",\n        \"parameters\": [\n          {\n            \"name\": \"cookie_type\",\n            \"in\": \"cookie\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\"chocolate chip\", \"oatmeal raisin\", \"sugar\"]\n            }\n          },\n          {\n            \"name\": \"cookie_size\",\n            \"in\": \"cookie\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\"bite-sized\", \"regular\", \"mega-sized\"]\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"You got a cookie!\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"description\": \"Used to test generation of object types with matching schema.\",\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/coffeeLocation\": {\n      \"get\": {\n        \"operationId\": \"getNearestCoffeeMachine\",\n        \"description\": \"Used to find the nearest coffee machine based on the user's coordinates. Used to test the content field in parameter objects.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"lat\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"long\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"number\"\n                }\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Coordinates of nearest coffee machine.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/coordinates\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/copier\": {\n      \"get\": {\n        \"operationId\": \"getCopier\",\n        \"description\": \"Used to test link parameters with variables\",\n        \"parameters\": [\n          {\n            \"name\": \"query\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success!\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"body\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"basicLink\": {\n                \"$ref\": \"#/components/links/BasicLink\"\n              },\n              \"constantLink\": {\n                \"$ref\": \"#/components/links/ConstantLink\"\n              },\n              \"variableLink\": {\n                \"$ref\": \"#/components/links/VariableLink\"\n              },\n              \"everythingLink\": {\n                \"$ref\": \"#/components/links/EverythingLink\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cleanDesks\": {\n      \"get\": {\n        \"operationId\": \"getNumberOfCleanDesks\",\n        \"description\": \"Used to test generation of object types with matching schema.\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Number of clean desks.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/dirtyDesks\": {\n      \"get\": {\n        \"operationId\": \"getNumberOfDirtyDesks\",\n        \"description\": \"Used to test generation of object types with matching schema.\",\n        \"parameters\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Number of dirty desks.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/bonuses\": {\n      \"get\": {\n        \"operationId\": \"getBonuses\",\n        \"description\": \"Used to test empty responses\",\n        \"parameters\": [],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Used to test empty responses\"\n          }\n        }\n      }\n    },\n    \"/offices/{id}\": {\n      \"get\": {\n        \"operationId\": \"getOffice\",\n        \"description\": \"Return an office.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            },\n            \"description\": \"Office ID\"\n          },\n          {\n            \"name\": \"accept\",\n            \"in\": \"header\",\n            \"description\": \"Describes the format of the return values. By default, the return type is `text/plain` and the return value is the two-letter language code for the identified language, for example, `en` for English or `es` for Spanish. To retrieve a JSON object that contains a ranking of identified languages with confidence scores, set the accept header parameter to `application/json`.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\"application/json\", \"text/plain\"],\n              \"default\": \"text/plain\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An office.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/office\"\n                }\n              },\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"links\": {\n              \"owner\": {\n                \"$ref\": \"#/components/links/Employee\"\n              },\n              \"company\": {\n                \"$ref\": \"#/components/links/EmployerCompany\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/papers\": {\n      \"get\": {\n        \"operationId\": \"getPapers\",\n        \"description\": \"Return a list of papers. Endpoint to test 2XX status code.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"A list of papers.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/paper\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"operationId\": \"postPaper\",\n        \"description\": \"Create a new paper in the system. Endpoint to test non-application/json request and response bodies.\",\n        \"requestBody\": {\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The posted paper.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/products\": {\n      \"post\": {\n        \"operationId\": \"post-product-with-id\",\n        \"description\": \"Endpoint to test unsanitized parameters and data.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/product-with-id\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"A product.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/product-with-id\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/products/{product-id}\": {\n      \"get\": {\n        \"operationId\": \"get-product-with-id\",\n        \"description\": \"Another endpoint to test unsanitized parameters and data.\",\n        \"parameters\": [\n          {\n            \"name\": \"product-id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"product-tag\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A product.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/product-with-id\"\n                }\n              }\n            },\n            \"links\": {\n              \"reviews\": {\n                \"$ref\": \"#/components/links/Reviews\"\n              },\n              \"reviewsWithOperationRef\": {\n                \"$ref\": \"#/components/links/ReviewsWithOperationRef\"\n              }\n            }\n          }\n        },\n        \"security\": []\n      }\n    },\n    \"/products/{id}/reviews\": {\n      \"get\": {\n        \"operationId\": \"getProductReviews\",\n        \"description\": \"Obtain reviews for a product.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"product-tag\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"default\": \"sport\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"List of review texts\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"text\": {\n                        \"type\": \"string\"\n                      },\n                      \"timestamp\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/patents/{patent-id}\": {\n      \"get\": {\n        \"operationId\": \"get-patent-with-id\",\n        \"description\": \"An endpoint to test authentication.\",\n        \"parameters\": [\n          {\n            \"name\": \"patent-id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A product.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/patent-with-id\"\n                }\n              }\n            },\n            \"links\": {\n              \"inventor\": {\n                \"$ref\": \"#/components/links/Inventor\"\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"example_api_basic_protocol\": []\n          },\n          {\n            \"example_api_key_protocol_2\": []\n          },\n          {\n            \"example_api_key_protocol_3\": []\n          }\n        ]\n      }\n    },\n    \"/projects\": {\n      \"post\": {\n        \"operationId\": \"post-project-with-id\",\n        \"description\": \"An endpoint to test authenticated POST requests.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/project-with-id\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"A product.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/project-with-id\"\n                }\n              }\n            },\n            \"links\": {\n              \"ProjectLead\": {\n                \"$ref\": \"#/components/links/ProjectLead\"\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"example_api_key_protocol\": []\n          },\n          {\n            \"example_api_key_protocol_2\": []\n          }\n        ]\n      }\n    },\n    \"/projects/{project-id}\": {\n      \"get\": {\n        \"operationId\": \"get-project-with-id\",\n        \"description\": \"Another endpoint to test authentication.\",\n        \"parameters\": [\n          {\n            \"name\": \"project-id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A project.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/project-with-id\"\n                }\n              }\n            },\n            \"links\": {\n              \"projectLead\": {\n                \"$ref\": \"#/components/links/ProjectLead\"\n              },\n              \"patent\": {\n                \"$ref\": \"#/components/links/Patent\"\n              }\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"example_api_key_protocol\": []\n          },\n          {\n            \"example_api_key_protocol_2\": []\n          },\n          {\n            \"example_api_key_protocol_3\": []\n          }\n        ]\n      }\n    },\n    \"/scanner\": {\n      \"get\": {\n        \"operationId\": \"getScanner\",\n        \"description\": \"Used to test link parameters with variables\",\n        \"parameters\": [\n          {\n            \"name\": \"query\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success!\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"body\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"basicLink\": {\n                \"$ref\": \"#/components/links/BasicLink\"\n              },\n              \"constantLink\": {\n                \"$ref\": \"#/components/links/ConstantLink\"\n              },\n              \"variableLink\": {\n                \"$ref\": \"#/components/links/VariableLink\"\n              },\n              \"everythingLink\": {\n                \"$ref\": \"#/components/links/EverythingLink\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/scanner/{path}\": {\n      \"post\": {\n        \"operationId\": \"postScanner\",\n        \"description\": \"Used to test link parameters with variables\",\n        \"parameters\": [\n          {\n            \"name\": \"query\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"path\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success!\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"body\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"basicLink\": {\n                \"$ref\": \"#/components/links/BasicLink\"\n              },\n              \"constantLink\": {\n                \"$ref\": \"#/components/links/ConstantLink\"\n              },\n              \"variableLink\": {\n                \"$ref\": \"#/components/links/VariableLink\"\n              },\n              \"everythingLink\": {\n                \"$ref\": \"#/components/links/EverythingLink\"\n              },\n              \"everythingLink2\": {\n                \"$ref\": \"#/components/links/EverythingLink2\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/snack\": {\n      \"get\": {\n        \"operationId\": \"getSnack\",\n        \"description\": \"Endpoint to test sending of headers.\",\n        \"parameters\": [\n          {\n            \"name\": \"snack_type\",\n            \"in\": \"header\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\"chips\", \"soda\"]\n            }\n          },\n          {\n            \"name\": \"snack_size\",\n            \"in\": \"header\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\"large\", \"small\"]\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Status message.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"What snack is offered.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/status\": {\n      \"get\": {\n        \"operationId\": \"get-Status\",\n        \"description\": \"Endpoint to test sending of options.\",\n        \"parameters\": [\n          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Status message.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"What the status is.\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Endpoint to test placeholder objects to wrap response objects.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"hello\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Status message.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"$ref\": \"#/components/parameters/GlobalQuery\"\n        }\n      ]\n    },\n    \"/secure\": {\n      \"get\": {\n        \"operationId\": \"getSecure\",\n        \"description\": \"Used to test OAuth token being present in header.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Secure message.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"A secure message.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/trashcans\": {\n      \"get\": {\n        \"operationId\": \"getAllTrashCans\",\n        \"description\": \"Returns the (contents of a) trashcan from a specific office\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Many trashcans\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/trashcan\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/trashcans/{username}\": {\n      \"get\": {\n        \"operationId\": \"getOfficeTrashCan\",\n        \"description\": \"Returns the (contents of a) trashcan from a specific owner\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Identifier of a user.\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A trashcan\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/trashcan\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"operationId\": \"postOfficeTrashCan\",\n        \"description\": \"Add new contents to the trashcan of a specific owner\",\n        \"parameters\": [\n          {\n            \"name\": \"username\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Identifier of a user.\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A trashcan\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/trashcan\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/mystery\": {\n      \"get\": {\n        \"description\": \"It could be anything!\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Mystery object\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"properties\": {\n                        \"common_attribute\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    },\n                    {\n                      \"properties\": {\n                        \"different_attribute\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/random\": {\n      \"get\": {\n        \"description\": \"Returns an arbitrary JSON object\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Random object\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"address\": {\n        \"type\": \"object\",\n        \"description\": \"The legal address of a user\",\n        \"properties\": {\n          \"street\": {\n            \"type\": \"string\",\n            \"description\": \"The street a user lives in\"\n          },\n          \"city\": {\n            \"type\": \"string\",\n            \"description\": \"The city a user lives in\"\n          }\n        }\n      },\n      \"car\": {\n        \"type\": \"object\",\n        \"description\": \"A car\",\n        \"properties\": {\n          \"model\": {\n            \"type\": \"string\",\n            \"description\": \"The model of the car.\"\n          },\n          \"color\": {\n            \"type\": \"string\",\n            \"description\": \"The color of the car.\"\n          },\n          \"features\": {\n            \"properties\": {}\n          },\n          \"tags\": {\n            \"$ref\": \"#/components/schemas/tags\"\n          },\n          \"kind\": {\n            \"type\": \"string\",\n            \"enum\": [\"SEDAN\", \"SUV\", \"MINIVAN\", \"LIMOSINE\", \"RACE_CAR\"]\n          },\n          \"rating\": {\n            \"type\": \"number\",\n            \"enum\": [100, 101, 200],\n            \"description\": \"The rating of the car.\"\n          }\n        }\n      },\n      \"company\": {\n        \"type\": \"object\",\n        \"description\": \"A company is the employer of many users\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The identifier of a company\",\n            \"format\": \"uuid\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The legal name of a company\"\n          },\n          \"legalForm\": {\n            \"type\": \"string\",\n            \"description\": \"The legal form of a company\"\n          },\n          \"ceoUsername\": {\n            \"type\": \"string\",\n            \"description\": \"The identifier of the user who is CEO of the company\"\n          },\n          \"offices\": {\n            \"type\": \"array\",\n            \"description\": \"The offices of a company\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/address\"\n            }\n          }\n        }\n      },\n      \"coordinates\": {\n        \"type\": \"object\",\n        \"required\": [\"lat\", \"long\"],\n        \"properties\": {\n          \"lat\": {\n            \"type\": \"number\"\n          },\n          \"long\": {\n            \"type\": \"number\"\n          }\n        }\n      },\n      \"familyObject\": {\n        \"type\": \"object\",\n        \"allOf\": [\n          {\n            \"properties\": {\n              \"family\": {\n                \"$ref\": \"#/components/schemas/familyString\"\n              }\n            },\n            \"required\": [\"family\"]\n          },\n          {\n            \"properties\": {\n              \"familyCircular\": {\n                \"$ref\": \"#/components/schemas/familyObject\"\n              }\n            }\n          }\n        ]\n      },\n      \"familyString\": {\n        \"type\": \"string\"\n      },\n      \"office\": {\n        \"description\": \"An office\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"employeeId\": {\n            \"description\": \"The owner ID of the office\",\n            \"type\": \"string\"\n          },\n          \"room number\": {\n            \"description\": \"The room number of the office\",\n            \"type\": \"integer\"\n          },\n          \"employerId\": {\n            \"type\": \"string\",\n            \"description\": \"The identifier of the company a user works for\"\n          }\n        }\n      },\n      \"paper\": {\n        \"description\": \"A research paper\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"description\": \"The name of the paper\",\n            \"type\": \"string\"\n          },\n          \"published\": {\n            \"description\": \"Whether the paper is published\",\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"patent-with-id\": {\n        \"type\": \"object\",\n        \"description\": \"A patent\",\n        \"properties\": {\n          \"patent-id\": {\n            \"type\": \"string\",\n            \"description\": \"The id of the patent\",\n            \"format\": \"specialIdFormat\"\n          },\n          \"inventor-id\": {\n            \"type\": \"string\",\n            \"description\": \"The id of the inventor\"\n          }\n        },\n        \"required\": [\"patent-name\", \"patent-id\"]\n      },\n      \"product-with-id\": {\n        \"type\": \"object\",\n        \"description\": \"A product\",\n        \"properties\": {\n          \"product-name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the product\"\n          },\n          \"product-id\": {\n            \"type\": \"string\",\n            \"description\": \"The id of the product\"\n          },\n          \"product-tag\": {\n            \"type\": \"string\",\n            \"description\": \"A tag associated with the product\"\n          }\n        }\n      },\n      \"project-with-id\": {\n        \"type\": \"object\",\n        \"description\": \"A project\",\n        \"properties\": {\n          \"project-id\": {\n            \"type\": \"integer\",\n            \"description\": \"The id of the project\"\n          },\n          \"lead-id\": {\n            \"type\": \"string\",\n            \"description\": \"The id of the lead\"\n          },\n          \"active\": {\n            \"type\": \"boolean\",\n            \"description\": \"Whether the project is active\"\n          },\n          \"patentId\": {\n            \"type\": \"string\",\n            \"description\": \"The patent associated with a project if applicable\"\n          }\n        }\n      },\n      \"trashcan\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"brand\": {\n            \"type\": \"object\"\n          },\n          \"contents\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\"\n            }\n          }\n        }\n      },\n      \"tags\": {\n        \"type\": \"object\",\n        \"title\": \"Tags\",\n        \"description\": \"Arbitrary (string) tags describing an entity.\",\n        \"additionalProperties\": {\n          \"type\": \"string\"\n        }\n      },\n      \"suborderObject\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"suborder\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"user\": {\n        \"type\": \"object\",\n        \"description\": \"A user represents a natural person\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The legal name of a user\"\n          },\n          \"address\": {\n            \"$ref\": \"#/components/schemas/address\"\n          },\n          \"address2\": {\n            \"$ref\": \"#/components/schemas/address\"\n          },\n          \"employerId\": {\n            \"type\": \"string\",\n            \"description\": \"The identifier of the company a user works for\"\n          },\n          \"hobbies\": {\n            \"type\": \"array\",\n            \"description\": \"The hobbies of this user\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"status\": {\n            \"enum\": [\"staff\", \"contractor\", \"alumni\"]\n          },\n          \"nomenclature\": {\n            \"type\": \"object\",\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/suborderObject\"\n              },\n              {\n                \"$ref\": \"#/components/schemas/familyObject\"\n              },\n              {\n                \"properties\": {\n                  \"genus\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            ],\n            \"properties\": {\n              \"species\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"required\": [\"name\", \"address\", \"employerId\", \"hobbies\"]\n      }\n    },\n    \"links\": {\n      \"Author\": {\n        \"operationRef\": \"Example API 3#/paths/~1authors~1{authorId}/get\",\n        \"parameters\": {\n          \"authorId\": \"$request.path.username\"\n        },\n        \"description\": \"Link between two different APIs\"\n      },\n      \"Employee\": {\n        \"operationId\": \"getUserByUsername\",\n        \"parameters\": {\n          \"username\": \"$response.body#/employeeId\"\n        },\n        \"description\": \"Allows to fetch the user who invented a product.\"\n      },\n      \"EmployerCompany\": {\n        \"operationId\": \"getCompanyById\",\n        \"parameters\": {\n          \"id\": \"$response.body#/employerId\"\n        },\n        \"description\": \"Allows to fetch the user's employer company.\"\n      },\n      \"Friends\": {\n        \"operationId\": \"getUserFriends\",\n        \"parameters\": {\n          \"username\": \"$request.query.username\"\n        },\n        \"description\": \"Allows to fetch the user's friends.\"\n      },\n      \"CeoUser\": {\n        \"operationId\": \"getUserByUsername\",\n        \"parameters\": {\n          \"username\": \"$response.body#/ceoUsername\"\n        },\n        \"description\": \"Allows to fetch the company's CEO user.\"\n      },\n      \"ProjectLead\": {\n        \"operationId\": \"getUserByUsername\",\n        \"parameters\": {\n          \"username\": \"$response.body#/leadId\"\n        },\n        \"description\": \"Allows to fetch the user leading a project.\"\n      },\n      \"Patent\": {\n        \"operationId\": \"get-patent-with-id\",\n        \"parameters\": {\n          \"patent-id\": \"$response.body#/patentId\"\n        },\n        \"description\": \"Allows to fetch a patent.\"\n      },\n      \"Inventor\": {\n        \"operationId\": \"getUserByUsername\",\n        \"parameters\": {\n          \"username\": \"$response.body#/inventorId\"\n        },\n        \"description\": \"Allows to fetch the user who invented a product.\"\n      },\n      \"BasicLink\": {\n        \"operationId\": \"getCopier\",\n        \"parameters\": {\n          \"query\": \"$request.query.query\"\n        }\n      },\n      \"ConstantLink\": {\n        \"operationId\": \"getCopier\",\n        \"parameters\": {\n          \"query\": \"123\"\n        }\n      },\n      \"VariableLink\": {\n        \"operationId\": \"getCopier\",\n        \"parameters\": {\n          \"query\": \"_{$request.query.query}_{$request.query.query}{$request.query.query}abc{$request.query.query}123\"\n        }\n      },\n      \"EverythingLink\": {\n        \"operationId\": \"getCopier\",\n        \"parameters\": {\n          \"query\": \"{$url}_{$method}_{$statusCode}_{$request.query.query}_{$request.header.accept}_{$response.header.connection}\"\n        }\n      },\n      \"EverythingLink2\": {\n        \"operationId\": \"getCopier\",\n        \"parameters\": {\n          \"query\": \"{$url}_{$method}_{$statusCode}_{$request.body}_{$request.query.query}_{$request.path.path}_{$request.header.accept}_{$response.body#/body}_{$response.query.query}_{$response.path.path}_{$response.header.connection}\"\n        }\n      },\n      \"Reviews\": {\n        \"operationId\": \"getProductReviews\",\n        \"parameters\": {\n          \"id\": \"$request.path.product-id\",\n          \"product-tag\": \"$request.query.product-tag\"\n        }\n      },\n      \"ReviewsWithOperationRef\": {\n        \"operationRef\": \"#/paths/~1products~1{id}~1reviews/get\",\n        \"parameters\": {\n          \"id\": \"$request.path.product-id\",\n          \"product-tag\": \"$request.query.product-tag\"\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"example_api_key_protocol\": {\n        \"in\": \"header\",\n        \"name\": \"access_token\",\n        \"type\": \"apiKey\"\n      },\n      \"example_api_key_protocol_2\": {\n        \"in\": \"query\",\n        \"name\": \"access_token\",\n        \"type\": \"apiKey\"\n      },\n      \"example_api_key_protocol_3\": {\n        \"in\": \"cookie\",\n        \"name\": \"access_token\",\n        \"type\": \"apiKey\"\n      },\n      \"example_api_basic_protocol\": {\n        \"type\": \"http\",\n        \"scheme\": \"basic\"\n      }\n    },\n    \"parameters\": {\n      \"GlobalQuery\": {\n        \"name\": \"globalquery\",\n        \"in\": \"query\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"security\": []\n}\n"
		}
	},
	"Error": "buildIR: make ir: path \"/users/{username}/friends\": get: responses: 200: contents: application/json: generate schema: item: field nomenclature: allOf: schema type mismatch: object and ",
	"NotImplemented": [
		"HTTP code pattern",
		"cookie security",
		"unsupported content types"
	]
}