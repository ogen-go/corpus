{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/admin-ch/CovidCertificate-App-Verifier-Service"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "ch-covidcertificate-backend-verifier/openapi.yaml",
			"byteSize": 8674,
			"content": "openapi: 3.0.0\nservers:\n- url: https://www.cc-d.bit.admin.ch\n  description: ''\n- url: https://www.cc-a.bit.admin.ch\n  description: ''\n- url: https://www.cc.bit.admin.ch\n  description: ''\ninfo:\n  version: 2.2.0\n  description: CH Covidcertificate Verifier API\n  title: CH Covidcertificate Verifier API\npaths:\n  /trust/v2/keys/:\n    get:\n      summary: hello\n      description: Echo endpoint\n      responses:\n        '200':\n          description: Hello from CH Covidcertificate Verifier WS\n          headers: {\n            }\n          content:\n            application/json:\n              schema:\n                type: string\n  /trust/v2/keys/updates:\n    get:\n      summary: getSignerCerts\n      description: get signer certificates\n      responses:\n        '200':\n          description: next certificate batch after `since` up to `upTo` (optional).\n            keep requesting until `up-to-date` header is `true`\n          headers:\n            X-Next-Since:\n              description: '`since` to set for next request'\n              schema:\n                type: string\n            up-to-date:\n              description: set to 'true' when no more certs to fetch\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.cert.CertsResponse'\n      parameters:\n      - name: since\n        in: query\n        description: ''\n        required: false\n        schema:\n          type: integer\n          format: long\n      - name: upTo\n        in: query\n        description: ''\n        required: true\n        schema:\n          type: integer\n          format: long\n      - name: certFormat\n        in: query\n        description: ''\n        required: true\n        schema:\n          $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.cert.CertFormat'\n  /trust/v2/keys/list:\n    get:\n      summary: getActiveSignerCertKeyIds\n      description: get all key IDs of active signer certs\n      responses:\n        '200':\n          description: list of Key IDs of all active signer certs\n          headers:\n            ETag:\n              description: etag to set for next request\n              schema:\n                type: string\n            up-to:\n              description: ' `upTo` to set for next keys/update request'\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.cert.ActiveCertsResponse'\n        '304':\n          description: no changes since last request\n          headers:\n            ETag:\n              description: etag to set for next request\n              schema:\n                type: string\n            up-to:\n              description: ' `upTo` to set for next keys/update request'\n              schema:\n                type: string\n  /trust/v2/revocationList:\n    get:\n      summary: getRevokedCerts\n      description: get list of revoked certificates\n      responses:\n        '200':\n          description: next batch of revoked certificates\n          headers:\n            X-Next-Since:\n              description: '`since` to set for next request'\n              schema:\n                type: string\n            up-to-date:\n              description: set to 'true' when no more certs to fetch\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.RevocationResponse'\n      parameters:\n      - name: since\n        in: query\n        description: ''\n        required: false\n        schema:\n          type: integer\n          format: long\n  /trust/v2/verificationRules:\n    get:\n      summary: getVerificationRules\n      description: get list of verification rules (uses the new format)\n      responses:\n        '200':\n          description: list of verification rules\n          headers:\n            ETag:\n              description: etag to set for next request\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n                example: '{\n    \"rules\": [\n        {      \"country\": \"CH\",\n               \"engine\": \"CertLogic\",\n               \"engineVersion\": \"0.7.5\",\n               \"schemaVersion\": \"1.0.0\",\n               \"type\": \"Acceptance\",\n               \"validTo\": \"2031-01-01T00:00:00Z\",\n               \"identifier\": \"GR-CH-0001\",\n               \"version\": \"1.0.8\",\n               \"validFrom\": \"2022-01-31T00:00:00Z\",\n               \"certificateType\": \"General\",\n               \"logic\": {}\n   }\n    ],\n    \"modeRules\": {\n        \"activeModes\": [\"THREE_G\"],\n        \"verifierActiveModes\": [\"THREE_G, TEST_CERT\"],\n        \"walletActiveModes\": [\"THREE_G\", \"TWO_G\"],\n        \"logic\": {}\n    },\n    \"displayRules\": [{\"id\": \"display-from-date\",\n                      \"logic\": {}\n                     },\n                     {\"id\": \"display-until-date\",\n                      \"logic\": {}\n                     },\n                     {\"id\": \"eol-banner\",\n                      \"logic\": {}\n                     },\n                     {\"id\": \"is-only-valid-in-ch\",\n                      \"logic\": {}\n                     }\n    ],\n    \"validDuration\": 172800000,\n    \"valueSets\": {\n    }\n}'\n        '304':\n          description: no changes since last request\n          headers:\n            ETag:\n              description: etag to set for next request\n              schema:\n                type: string\ncomponents:\n  schemas:\n    ch.admin.bag.covidcertificate.backend.verifier.model.RevocationResponse:\n      type: object\n      properties:\n        revokedCerts:\n          type: array\n          items:\n            type: string\n          description: list of revoked covidcerts\n        validDuration:\n          allOf:\n          - type: integer\n          - description: describes how long the list response is valid for in ms\n          - example: '172800000'\n    ch.admin.bag.covidcertificate.backend.verifier.model.cert.ActiveCertsResponse:\n      type: object\n      properties:\n        activeKeyIds:\n          type: array\n          items:\n            type: string\n          description: list of active key ids\n        validDuration:\n          allOf:\n          - type: integer\n          - description: describes how long the list response is valid for in ms\n          - example: '172800000'\n        upTo:\n          type: integer\n          format: long\n          description: up to which key id can be requested\n          example: ''\n    ch.admin.bag.covidcertificate.backend.verifier.model.cert.Algorithm:\n      type: string\n      enum:\n      - ES256\n      - RS256\n      - UNSUPPORTED\n    ch.admin.bag.covidcertificate.backend.verifier.model.cert.CertFormat:\n      type: string\n      enum:\n      - IOS\n      - ANDROID\n    ch.admin.bag.covidcertificate.backend.verifier.model.cert.CertsResponse:\n      type: object\n      properties:\n        certs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.cert.ClientCert'\n    ch.admin.bag.covidcertificate.backend.verifier.model.cert.ClientCert:\n      type: object\n      properties:\n        keyId:\n          type: string\n          description: base64 encoded. shasum of x509\n          example: ''\n        use:\n          type: string\n          description: 'either ''sig'' (all) or one or more of: ''r'' (recovery),\n            ''t'' (test), ''v'' (vaccine), ''l'' (light)'\n          example: sig\n        alg:\n          allOf:\n          - $ref: '#/components/schemas/ch.admin.bag.covidcertificate.backend.verifier.model.cert.Algorithm'\n          - description: ES256 or RS256. key type can be derived from algorithm\n          - example: ES256\n        n:\n          type: string\n          description: base64 encoded. RSA only (android)\n          example: ''\n        e:\n          type: string\n          description: base64 encoded. RSA only (android)\n          example: ''\n        subjectPublicKeyInfo:\n          type: string\n          description: base64 encoded. RSA only (ios)\n          example: ''\n        crv:\n          type: string\n          description: EC only. only 'P-256' is supported at this time\n          example: P-256\n        x:\n          type: string\n          description: base64 encoded. EC only\n          example: ''\n        y:\n          type: string\n          description: base64 encoded. EC only\n          example: ''\n",
			"canonicalURL": "/github.com/admin-ch/CovidCertificate-App-Verifier-Service@61be2e8119192929151bbbe23ac4c13fa6f27bfe/-/blob/ch-covidcertificate-backend-verifier/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/admin-ch/CovidCertificate-App-Verifier-Service/blob/61be2e8119192929151bbbe23ac4c13fa6f27bfe/ch-covidcertificate-backend-verifier/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/trust/v2/keys/list\": get: responses: 200: contents: application/json: generate schema: field validDuration: allOf: schema type mismatch: integer and "
}