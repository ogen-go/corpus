{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aptos-labs/aptos-core"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "ecosystem/indexer-server/typescript/src/api/v1/openapi.yaml",
			"byteSize": 107956,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    name: Aptos\n    url: https://github.com/aptos-labs/aptos-core\n  description: |\n    The Aptos Node API is a RESTful API for client applications to interact with the Aptos blockchain.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: Aptos Dev API Specification\n  version: 0.1.1\nservers:\n- url: /\ntags:\n- description: General information\n  name: general\n- description: Access to transactions\n  name: transactions\n- description: Access to account resources and modules\n  name: accounts\n- description: Access to events\n  name: events\npaths:\n  /:\n    get:\n      operationId: get_ledger_info\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LedgerInfo'\n          description: Returns the latest ledger information.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      summary: Ledger information\n      tags:\n      - general\n      x-eov-operation-handler: controllers/GeneralController\n  /spec.html:\n    get:\n      operationId: get_spec_html\n      responses:\n        \"200\":\n          description: Returns OpenAPI specification html document.\n        \"400\":\n          description: Bad Request\n      summary: API document\n      tags:\n      - general\n      x-eov-operation-handler: controllers/GeneralController\n  /openapi.yaml:\n    get:\n      operationId: get_spec_yaml\n      responses:\n        \"200\":\n          description: Returns OpenAPI specification YAML document.\n        \"400\":\n          description: Bad Request\n      summary: OpenAPI specification\n      tags:\n      - general\n      x-eov-operation-handler: controllers/GeneralController\n  /tokens/all:\n    get:\n      description: Returns all tokens\n      operationId: getAllTokens\n      parameters:\n      - description: offset of the tokens to be returned from the first token.\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: The number of items to return\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tokens'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /tokens/{tokenId}:\n    get:\n      description: Returns Token by Id\n      operationId: getTokenById\n      parameters:\n      - description: Token Id has format `${creator_address}::${collection_name}::${token_name}`\n        explode: false\n        in: path\n        name: tokenId\n        required: true\n        schema:\n          $ref: '#/components/schemas/TokenId'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /tokens/{tokenId}/meta:\n    get:\n      description: Returns token metadata by Id\n      operationId: getTokenMetaDataById\n      parameters:\n      - description: Token Id has format `${creator_address}::${collection_name}::${token_name}`\n        explode: false\n        in: path\n        name: tokenId\n        required: true\n        schema:\n          $ref: '#/components/schemas/TokenMetaData'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenMetaData'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /tokens/{tokenId}/royalties:\n    get:\n      description: Returns token royalty by tokenId\n      operationId: getTokenRoyaltiesById\n      parameters:\n      - explode: false\n        in: path\n        name: tokenId\n        required: true\n        schema:\n          $ref: '#/components/schemas/TokenId'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Royalties'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /metadata/byIds:\n    post:\n      description: Returns Token MetaData by tokenIds\n      operationId: getTokenMetaDataByIds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenIds'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenMetaData'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /tokens/byIds:\n    post:\n      description: Returns Tokens by tokenIds\n      operationId: getTokenByIds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenIds'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tokens'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /ownerships/all:\n    get:\n      description: Returns all ownerships\n      operationId: getAllOwnerships\n      parameters:\n      - description: offset of the ownership to be returned from the first ownership.\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: The number of items to return\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ownerships'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /ownerships/{ownershipId}:\n    get:\n      description: Returns ownership by ownershipId\n      operationId: getOwnershipById\n      parameters:\n      - description: Ownership Id has the format of \"${tokenID}::${ownerAddress}\"\n        explode: false\n        in: path\n        name: ownershipId\n        required: true\n        schema:\n          $ref: '#/components/schemas/OwnershipId'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ownership'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /ownerships/byToken:\n    get:\n      description: Returns ownerships by token\n      operationId: getOwnershipsByToken\n      parameters:\n      - description: TokenId, has format `${creator_address}::${collection_name}::${token_name}`\n        explode: true\n        in: query\n        name: tokenId\n        required: true\n        schema:\n          $ref: '#/components/schemas/TokenId'\n        style: form\n      - description: offset from the first ownership to be returned\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: The number of tokens to return\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ownerships'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /ownerships/byIds:\n    post:\n      description: Returns Ownerships by ownershipIds\n      operationId: getOwnershipsByIds\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OwnershipIds'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ownerships'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /collections/{collectionId}:\n    get:\n      description: Returns collection by collection id\n      operationId: getCollectionById\n      parameters:\n      - description: Id of the collection. collectionId has the format of “${ownerAddress}::${collectionName}\n        explode: false\n        in: path\n        name: collectionId\n        required: true\n        schema:\n          $ref: '#/components/schemas/CollectionId'\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 404\n                  message: resource not found\n                  aptos_ledger_version: \"37829327\"\n          description: |\n            Resource or data not found.\n            Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /collections/all:\n    get:\n      description: Returns all collections\n      operationId: getAllCollections\n      parameters:\n      - description: offset of the collections to be returned from the first collection.\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: The number of items to return\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collections'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      x-eov-operation-handler: controllers/DefaultController\n  /activities/byUser:\n    get:\n      description: Returns activities by user\n      operationId: getActivitiesByUser\n      parameters:\n      - description: Activity type\n        explode: true\n        in: query\n        name: type\n        required: true\n        schema:\n          items:\n            $ref: '#/components/schemas/UserActivityType'\n          type: array\n        style: form\n      - description: Addresses of the users\n        explode: true\n        in: query\n        name: user\n        required: true\n        schema:\n          items:\n            $ref: '#/components/schemas/Address'\n          type: array\n        style: form\n      - description: Lower time border of data\n        explode: true\n        in: query\n        name: from\n        required: false\n        schema:\n          format: date-time\n          type: string\n        style: form\n      - description: Upper time border of data\n        explode: true\n        in: query\n        name: to\n        required: false\n        schema:\n          format: date-time\n          type: string\n        style: form\n      - description: The number of items to return\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: Sorting by data update time\n        explode: true\n        in: query\n        name: sort\n        required: false\n        schema:\n          $ref: '#/components/schemas/ActivitySort'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Activities'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 400\n                  message: invalid parameter\n          description: |\n            Bad request due to a client error: invalid request headers, parameters or body.\n            Client should not retry the request without modification.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - $ref: '#/components/schemas/AptosError'\n                example:\n                  code: 500\n                  message: unexpected internal error\n          description: |\n            Server internal error, caused by unexpected issues.\n      tags:\n      - activity-controller\n      x-eov-operation-handler: controllers/ActivityControllerController\ncomponents:\n  parameters:\n    AccountAddress:\n      explode: false\n      in: path\n      name: address\n      required: true\n      schema:\n        $ref: '#/components/schemas/Address'\n      style: simple\n    LedgerVersion:\n      explode: true\n      in: query\n      name: version\n      required: false\n      schema:\n        $ref: '#/components/schemas/LedgerVersion'\n      style: form\n    StartVersion:\n      description: The start transaction version of the page. Default is the latest\n        ledger version.\n      example: 1\n      explode: true\n      in: query\n      name: start\n      required: false\n      schema:\n        type: integer\n      style: form\n    Limit:\n      description: The max number of transactions should be returned for the page.\n        Default is 25.\n      example: 25\n      explode: true\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n      style: form\n    EventStart:\n      description: |\n        The start sequence number in the EVENT STREAM, defaulting to the latest event.\n        The events are returned in the reverse order of sequence numbers.\n      explode: true\n      in: query\n      name: start\n      required: false\n      schema:\n        type: integer\n      style: form\n    EventLimit:\n      description: The number of events to be returned for the page default is 5\n      example: 25\n      explode: true\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n      style: form\n  responses:\n    \"400\":\n      content:\n        application/json:\n          schema:\n            allOf:\n            - $ref: '#/components/schemas/AptosError'\n            example:\n              code: 400\n              message: invalid parameter\n      description: |\n        Bad request due to a client error: invalid request headers, parameters or body.\n        Client should not retry the request without modification.\n    \"404\":\n      content:\n        application/json:\n          schema:\n            allOf:\n            - $ref: '#/components/schemas/AptosError'\n            example:\n              code: 404\n              message: resource not found\n              aptos_ledger_version: \"37829327\"\n      description: |\n        Resource or data not found.\n        Client may retry the request if it is waiting for transaction execution or ledger synchronization.\n    \"413\":\n      content:\n        application/json:\n          schema:\n            allOf:\n            - $ref: '#/components/schemas/AptosError'\n            example:\n              code: 413\n              message: The request payload is too large\n      description: |\n        The request payload is too large.\n    \"415\":\n      content:\n        application/json:\n          schema:\n            allOf:\n            - $ref: '#/components/schemas/AptosError'\n            example:\n              code: 415\n              message: The request's content-type is not supported\n      description: |\n        The request's content-type is not supported.\n    \"500\":\n      content:\n        application/json:\n          schema:\n            allOf:\n            - $ref: '#/components/schemas/AptosError'\n            example:\n              code: 500\n              message: unexpected internal error\n      description: |\n        Server internal error, caused by unexpected issues.\n  schemas:\n    AptosError:\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n        aptos_ledger_version:\n          description: |\n            The version of the latest transaction in the ledger.\n          example: \"52635485\"\n          format: uint64\n          title: Ledger Version\n          type: string\n      required:\n      - code\n      - message\n      title: Response Error\n      type: object\n    Uint64:\n      description: Unsigned int64 type value\n      example: \"32425224034\"\n      format: uint64\n      title: uint64\n      type: string\n    Address:\n      description: |\n        Hex-encoded 16 bytes Aptos account address.\n\n        Prefixed with `0x` and leading zeros are trimmed.\n\n        See [doc](https://diem.github.io/move/address.html) for more details.\n      example: 0xdd\n      format: address\n      title: Account Address\n      type: string\n    HexEncodedBytes:\n      description: |\n        All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n        two hex digits per byte.\n\n        Different with `Address` type, hex-encoded bytes should not trim any zeros.\n      example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n      format: hex\n      title: Hex-encoded Bytes\n      type: string\n    TimestampSec:\n      description: |\n        Timestamp in seconds, e.g. transaction expiration timestamp.\n      example: \"1635447454\"\n      format: uint64\n      title: Timestamp in Seconds\n      type: string\n    TimestampUsec:\n      description: |\n        Timestamp in microseconds, e.g. ledger / block creation timestamp.\n      example: \"1632507671675208\"\n      format: uint64\n      title: Timestamp in Microseconds\n      type: string\n    LedgerVersion:\n      description: |\n        The version of the latest transaction in the ledger.\n      example: \"52635485\"\n      format: uint64\n      title: Ledger Version\n      type: string\n    EventKey:\n      description: |\n        Event key is a global index for an event stream.\n\n        It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is\n        a combination of a `uint64` creation number and account address\n        (without trimming leading zeros).\n\n        For example, event key `0x00000000000000000000000000000000000000000a550c18`\n        is combined by the following 2 parts:\n          1. `0000000000000000`: `uint64` representation of `0`.\n          2. `0000000000000000000000000a550c18`: 16 bytes of account address.\n      example: 0x00000000000000000000000000000000000000000a550c18\n      format: hex\n      title: Event Key\n      type: string\n    EventSequenceNumber:\n      description: |\n        Event `sequence_number` is unique id of an event in an event stream.\n        Event `sequence_number` starts from 0 for each event key.\n      example: \"23\"\n      format: uint64\n      title: Event Sequence Number\n      type: string\n    LedgerInfo:\n      example:\n        ledger_version: \"52635485\"\n        chain_id: 4\n        ledger_timestamp: \"1632507671675208\"\n      properties:\n        chain_id:\n          description: |\n            The blockchain chain id.\n          example: 4\n          type: integer\n        ledger_version:\n          description: |\n            The version of the latest transaction in the ledger.\n          example: \"52635485\"\n          format: uint64\n          title: Ledger Version\n          type: string\n        ledger_timestamp:\n          description: |\n            Timestamp in microseconds, e.g. ledger / block creation timestamp.\n          example: \"1632507671675208\"\n          format: uint64\n          title: Timestamp in Microseconds\n          type: string\n      required:\n      - chain_id\n      - ledger_timestamp\n      - ledger_version\n      title: Ledger Information\n      type: object\n    Account:\n      description: Core account resource, used for identifying account and transaction\n        execution.\n      example:\n        sequence_number: \"1\"\n        authentication_key: 0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\n      properties:\n        sequence_number:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        authentication_key:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - authentication_key\n      - sequence_number\n      title: Account\n      type: object\n    AccountResource:\n      description: Account resource is a Move struct value belongs to an account.\n      example:\n        type: 0x1::AptosAccount::Balance<0x1::XDX::XDX>\n        data:\n          coin:\n            value: \"8000000000\"\n      properties:\n        type:\n          description: |\n            String representation of an on-chain Move struct type.\n\n            It is a combination of:\n              1. `Move module address`, `module name` and `struct name` joined by `::`.\n              2. `struct generic type parameters` joined by `, `.\n\n            Examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n            See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.\n          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n          format: move_type\n          pattern: ^0x[0-9a-zA-Z:_<>]+$\n          title: Move Struct Tag ID\n          type: string\n        data:\n          description: |\n            Account resource data is JSON representation of the Move struct `type`.\n\n            Move struct field name and value are serialized as object property name and value.\n          type: object\n      required:\n      - data\n      - type\n      title: Account Resource\n      type: object\n    MoveTypeTagId:\n      description: |\n        String representation of an on-chain Move type tag that is exposed in transaction payload.\n\n        Values:\n          - bool\n          - u8\n          - u64\n          - u128\n          - address\n          - signer\n          - vector: `vector<{non-reference MoveTypeId}>`\n          - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n\n        Vector type value examples:\n          * `vector<u8>`\n          * `vector<vector<u64>>`\n          * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n        Struct type value examples:\n          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n          * `0x1::AptosAccount::AccountOperationsCapability`\n\n        Note:\n          1. Empty chars should be ignored when comparing 2 struct tag ids.\n          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n      example: 0x1::XUS::XUS\n      pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n      title: Move Type Tag ID\n      type: string\n    MoveTypeId:\n      description: |\n        String representation of an on-chain Move type identifier defined by the Move language.\n\n        Values:\n          - bool\n          - u8\n          - u64\n          - u128\n          - address\n          - signer\n          - vector: `vector<{non-reference MoveTypeId}>`\n          - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n          - reference: immutable `&` and mutable `&mut` references.\n          - generic_type_parameter: it is always start with `T` and following an index number,\n            which is the position of the generic type parameter in the `struct` or\n            `function` generic type parameters definition.\n\n        Vector type value examples:\n          * `vector<u8>`\n          * `vector<vector<u64>>`\n          * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n        Struct type value examples:\n          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n          * `0x1::AptosAccount::AccountOperationsCapability`\n\n        Reference type value examples:\n          * `&signer`\n          * `&mut address`\n          * `&mut vector<u8>`\n\n        Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:\n\n            {\n                \"name\": \"TransactionFee\",\n                \"is_native\": false,\n                \"abilities\": [\"key\"],\n                \"generic_type_params\": [\n                    {\"constraints\": [], \"is_phantom\": true}\n                ],\n                \"fields\": [\n                    { \"name\": \"balance\", \"type\": \"0x1::Aptos::Aptos<T0>\" },\n                    { \"name\": \"preburn\", \"type\": \"0x1::Aptos::Preburn<T0>\" }\n                ]\n            }\n\n        It's Move source code:\n\n            module AptosFramework::TransactionFee {\n                struct TransactionFee<phantom CoinType> has key {\n                    balance: Aptos<CoinType>,\n                    preburn: Preburn<CoinType>,\n                }\n            }\n\n        The `T0` in the above JSON representation is the generic type place holder for\n        the `CoinType` in the Move source code.\n\n        Note:\n          1. Empty chars should be ignored when comparing 2 struct tag ids.\n          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n      example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n      pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut\n        )?.+$|T\\d+)$\n      title: Move Type ID\n      type: string\n    MoveStructTagId:\n      description: |\n        String representation of an on-chain Move struct type.\n\n        It is a combination of:\n          1. `Move module address`, `module name` and `struct name` joined by `::`.\n          2. `struct generic type parameters` joined by `, `.\n\n        Examples:\n          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n          * `0x1::AptosAccount::AccountOperationsCapability`\n\n        Note:\n          1. Empty chars should be ignored when comparing 2 struct tag ids.\n          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n        See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.\n      example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n      format: move_type\n      pattern: ^0x[0-9a-zA-Z:_<>]+$\n      title: Move Struct Tag ID\n      type: string\n    MoveModule:\n      properties:\n        bytecode:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        abi:\n          $ref: '#/components/schemas/MoveModuleABI'\n      required:\n      - bytecode\n      title: Move Module\n      type: object\n    MoveModuleABI:\n      description: |\n        Move Module ABI is JSON representation of Move module binary interface.\n      properties:\n        address:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        name:\n          example: Aptos\n          type: string\n        friends:\n          items:\n            $ref: '#/components/schemas/MoveModuleId'\n          type: array\n        exposed_functions:\n          items:\n            $ref: '#/components/schemas/MoveFunction'\n          type: array\n        structs:\n          items:\n            $ref: '#/components/schemas/MoveStruct'\n          type: array\n      required:\n      - address\n      - exposed_functions\n      - friends\n      - name\n      - structs\n      title: Move Module ABI\n      type: object\n    MoveStruct:\n      example:\n        name: Balance\n        is_native: false\n        abilities:\n        - key\n        generic_type_params:\n        - constraints: []\n          is_phantom: true\n        fields:\n        - name: coin\n          type: 0x1::Aptos::Aptos<T0>\n      properties:\n        name:\n          type: string\n        is_native:\n          type: boolean\n        abilities:\n          items:\n            $ref: '#/components/schemas/MoveAbility'\n          type: array\n        generic_type_params:\n          items:\n            $ref: '#/components/schemas/MoveStruct_generic_type_params'\n          type: array\n        fields:\n          items:\n            $ref: '#/components/schemas/MoveStructField'\n          type: array\n      required:\n      - abilities\n      - fields\n      - generic_type_params\n      - is_native\n      - name\n      title: Move Struct\n      type: object\n    MoveStructField:\n      example:\n        name: value\n        type: u64\n      properties:\n        name:\n          type: string\n        type:\n          description: |\n            String representation of an on-chain Move type identifier defined by the Move language.\n\n            Values:\n              - bool\n              - u8\n              - u64\n              - u128\n              - address\n              - signer\n              - vector: `vector<{non-reference MoveTypeId}>`\n              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n              - reference: immutable `&` and mutable `&mut` references.\n              - generic_type_parameter: it is always start with `T` and following an index number,\n                which is the position of the generic type parameter in the `struct` or\n                `function` generic type parameters definition.\n\n            Vector type value examples:\n              * `vector<u8>`\n              * `vector<vector<u64>>`\n              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n            Struct type value examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Reference type value examples:\n              * `&signer`\n              * `&mut address`\n              * `&mut vector<u8>`\n\n            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:\n\n                {\n                    \"name\": \"TransactionFee\",\n                    \"is_native\": false,\n                    \"abilities\": [\"key\"],\n                    \"generic_type_params\": [\n                        {\"constraints\": [], \"is_phantom\": true}\n                    ],\n                    \"fields\": [\n                        { \"name\": \"balance\", \"type\": \"0x1::Aptos::Aptos<T0>\" },\n                        { \"name\": \"preburn\", \"type\": \"0x1::Aptos::Preburn<T0>\" }\n                    ]\n                }\n\n            It's Move source code:\n\n                module AptosFramework::TransactionFee {\n                    struct TransactionFee<phantom CoinType> has key {\n                        balance: Aptos<CoinType>,\n                        preburn: Preburn<CoinType>,\n                    }\n                }\n\n            The `T0` in the above JSON representation is the generic type place holder for\n            the `CoinType` in the Move source code.\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut\n            )?.+$|T\\d+)$\n          title: Move Type ID\n          type: string\n      required:\n      - name\n      - type\n      title: Move Struct Field\n      type: object\n    MoveFunction:\n      example:\n        name: peer_to_peer_with_metadata\n        visibility: script\n        generic_type_params:\n        - constraints: []\n        params:\n        - signer\n        - address\n        - u64\n        - vector<u8>\n        - vector<u8>\n        return: []\n      properties:\n        name:\n          description: Move function name\n          type: string\n        visibility:\n          enum:\n          - public\n          - script\n          - friend\n          type: string\n        generic_type_params:\n          items:\n            $ref: '#/components/schemas/MoveFunction_generic_type_params'\n          type: array\n        params:\n          items:\n            $ref: '#/components/schemas/MoveTypeId'\n          type: array\n        return:\n          items:\n            $ref: '#/components/schemas/MoveTypeId'\n          type: array\n      required:\n      - generic_type_params\n      - name\n      - params\n      - return\n      - visibility\n      title: Move Function\n      type: object\n    MoveAbility:\n      description: |\n        Abilities are a typing feature in Move that control what actions are permissible for values of a given type.\n\n        See [doc](https://diem.github.io/move/abilities.html) for more details.\n      enum:\n      - copy\n      - drop\n      - store\n      - key\n      example: key\n      title: Move Ability\n      type: string\n    MoveModuleId:\n      description: |\n        Move module id is a string representation of Move module.\n\n        Format: \"{address}::{module name}\"\n\n        `address` should be hex-encoded 16 bytes account address\n        that is prefixed with `0x` and leading zeros are trimmed.\n\n        Module name is case-sensitive.\n\n        See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n      example: 0x1::Aptos\n      title: Move Module ID\n      type: string\n    UserTransactionRequest:\n      properties:\n        sender:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        sequence_number:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        max_gas_amount:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        gas_unit_price:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        gas_currency_code:\n          example: XDX\n          type: string\n        expiration_timestamp_secs:\n          description: |\n            Timestamp in seconds, e.g. transaction expiration timestamp.\n          example: \"1635447454\"\n          format: uint64\n          title: Timestamp in Seconds\n          type: string\n        payload:\n          $ref: '#/components/schemas/TransactionPayload'\n      required:\n      - expiration_timestamp_secs\n      - gas_currency_code\n      - gas_unit_price\n      - max_gas_amount\n      - payload\n      - sender\n      - sequence_number\n      title: User Transaction Request\n      type: object\n    UserTransactionSignature:\n      description: |\n        This schema is used for appending `signature` field to another schema.\n      properties:\n        signature:\n          $ref: '#/components/schemas/TransactionSignature'\n      required:\n      - signature\n      title: User Transaction Signature\n      type: object\n    Transaction:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/PendingTransaction'\n      - $ref: '#/components/schemas/GenesisTransaction'\n      - $ref: '#/components/schemas/UserTransaction'\n      - $ref: '#/components/schemas/BlockMetadataTransaction'\n    SubmitTransactionRequest:\n      allOf:\n      - $ref: '#/components/schemas/UserTransactionRequest'\n      - $ref: '#/components/schemas/UserTransactionSignature'\n      title: Submit Transaction Request\n      type: object\n    PendingTransaction:\n      allOf:\n      - $ref: '#/components/schemas/PendingTransaction_allOf'\n      - $ref: '#/components/schemas/UserTransactionRequest'\n      - $ref: '#/components/schemas/UserTransactionSignature'\n      title: Pending Transaction\n      type: object\n    OnChainTransaction:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/GenesisTransaction'\n      - $ref: '#/components/schemas/UserTransaction'\n      - $ref: '#/components/schemas/BlockMetadataTransaction'\n      title: On-chain Transaction\n    OnChainTransactionInfo:\n      properties:\n        version:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        state_root_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        event_root_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        gas_used:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        success:\n          description: |\n            Transaction execution result (success: true, failure: false).\n            See `vm_status` for human readable error message from Aptos VM.\n          type: boolean\n        vm_status:\n          description: |\n            Human readable transaction execution result message from Aptos VM.\n          type: string\n        accumulator_root_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        changes:\n          items:\n            $ref: '#/components/schemas/WriteSetChange'\n          type: array\n      required:\n      - accumulator_root_hash\n      - changes\n      - event_root_hash\n      - gas_used\n      - hash\n      - state_root_hash\n      - success\n      - version\n      - vm_status\n      title: On-chain transaction information\n      type: object\n    UserTransaction:\n      allOf:\n      - $ref: '#/components/schemas/UserTransaction_allOf'\n      - $ref: '#/components/schemas/UserTransactionRequest'\n      - $ref: '#/components/schemas/UserTransactionSignature'\n      - $ref: '#/components/schemas/OnChainTransactionInfo'\n      title: User Transaction\n      type: object\n    BlockMetadataTransaction:\n      allOf:\n      - $ref: '#/components/schemas/BlockMetadataTransaction_allOf'\n      - $ref: '#/components/schemas/OnChainTransactionInfo'\n      title: Block Metadata Transaction\n      type: object\n    GenesisTransaction:\n      allOf:\n      - $ref: '#/components/schemas/GenesisTransaction_allOf'\n      - $ref: '#/components/schemas/OnChainTransactionInfo'\n      title: Genesis Transaction\n      type: object\n    TransactionPayload:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/ScriptFunctionPayload'\n      - $ref: '#/components/schemas/ScriptPayload'\n      - $ref: '#/components/schemas/ModuleBundlePayload'\n      - $ref: '#/components/schemas/WriteSetPayload'\n      title: Transaction Payload\n    ScriptFunctionPayload:\n      example:\n        type: script_function_payload\n        function: 0x1::PaymentScripts::peer_to_peer_with_metadata\n        type_arguments:\n        - 0x1::XDX::XDX\n        arguments:\n        - 0x1668f6be25668c1a17cd8caf6b8d2f25\n        - \"2021000000\"\n        - 0x\n        - 0x\n      properties:\n        type:\n          type: string\n        function:\n          description: |\n            Script function id is string representation of a script function defined on-chain.\n\n            Format: `{address}::{module name}::{function name}`\n\n            Both `module name` and `function name` are case-sensitive.\n          example: 0x1::PaymentScripts::peer_to_peer_with_metadata\n          title: Script Function ID\n          type: string\n        type_arguments:\n          description: Generic type arguments required by the script function.\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n          type: array\n        arguments:\n          description: The script function arguments.\n          items:\n            $ref: '#/components/schemas/MoveValue'\n          type: array\n      required:\n      - arguments\n      - function\n      - type\n      - type_arguments\n      title: Script Function Payload\n      type: object\n    ScriptFunctionId:\n      description: |\n        Script function id is string representation of a script function defined on-chain.\n\n        Format: `{address}::{module name}::{function name}`\n\n        Both `module name` and `function name` are case-sensitive.\n      example: 0x1::PaymentScripts::peer_to_peer_with_metadata\n      title: Script Function ID\n      type: string\n    ScriptPayload:\n      properties:\n        type:\n          example: script_payload\n          type: string\n        code:\n          $ref: '#/components/schemas/MoveScript'\n        type_arguments:\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n          type: array\n        arguments:\n          items:\n            $ref: '#/components/schemas/MoveValue'\n          type: array\n      required:\n      - arguments\n      - code\n      - type\n      - type_arguments\n      title: Script Payload\n      type: object\n    ModuleBundlePayload:\n      properties:\n        type:\n          example: module_bundle_payload\n          type: string\n        modules:\n          items:\n            $ref: '#/components/schemas/MoveModule'\n          type: array\n      required:\n      - modules\n      - type\n      title: Module Bundle Payload\n      type: object\n    WriteSetPayload:\n      properties:\n        type:\n          example: write_set_payload\n          type: string\n        write_set:\n          $ref: '#/components/schemas/WriteSet'\n      required:\n      - type\n      - write_set\n      title: WriteSet Payload\n      type: object\n    WriteSet:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/ScriptWriteSet'\n      - $ref: '#/components/schemas/DirectWriteSet'\n      title: WriteSet\n    ScriptWriteSet:\n      properties:\n        type:\n          example: script_write_set\n          type: string\n        execute_as:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        script:\n          $ref: '#/components/schemas/Script'\n      required:\n      - execute_as\n      - script\n      - type\n      title: Script WriteSet\n      type: object\n    DirectWriteSet:\n      properties:\n        type:\n          example: direct_write_set\n          type: string\n        changes:\n          items:\n            $ref: '#/components/schemas/WriteSetChange'\n          type: array\n        events:\n          items:\n            $ref: '#/components/schemas/Event'\n          type: array\n      required:\n      - changes\n      - events\n      - type\n      title: Direct WriteSet\n      type: object\n    WriteSetChange:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/DeleteModule'\n      - $ref: '#/components/schemas/DeleteResource'\n      - $ref: '#/components/schemas/DeleteTableItem'\n      - $ref: '#/components/schemas/WriteModule'\n      - $ref: '#/components/schemas/WriteResource'\n      - $ref: '#/components/schemas/WriteTableItem'\n    DeleteModule:\n      properties:\n        type:\n          example: delete_module\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        address:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        module:\n          description: |\n            Move module id is a string representation of Move module.\n\n            Format: \"{address}::{module name}\"\n\n            `address` should be hex-encoded 16 bytes account address\n            that is prefixed with `0x` and leading zeros are trimmed.\n\n            Module name is case-sensitive.\n\n            See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n          example: 0x1::Aptos\n          title: Move Module ID\n          type: string\n      required:\n      - address\n      - module\n      - state_key_hash\n      - type\n      title: Delete Module\n      type: object\n    DeleteResource:\n      description: Delete account resource change.\n      properties:\n        type:\n          example: delete_resource\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        address:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        resource:\n          description: |\n            String representation of an on-chain Move struct type.\n\n            It is a combination of:\n              1. `Move module address`, `module name` and `struct name` joined by `::`.\n              2. `struct generic type parameters` joined by `, `.\n\n            Examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n            See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.\n          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n          format: move_type\n          pattern: ^0x[0-9a-zA-Z:_<>]+$\n          title: Move Struct Tag ID\n          type: string\n      required:\n      - address\n      - resource\n      - state_key_hash\n      - type\n      title: Delete Resource\n      type: object\n    DeleteTableItem:\n      description: Delete table item change.\n      properties:\n        type:\n          example: delete_table_item\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        data:\n          $ref: '#/components/schemas/Table_item_deletion'\n      required:\n      - data\n      - state_key_hash\n      - type\n      title: Delete Table Item\n      type: object\n    WriteModule:\n      description: Write move module\n      properties:\n        type:\n          example: write_module\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        address:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        data:\n          $ref: '#/components/schemas/MoveModule'\n      required:\n      - address\n      - data\n      - state_key_hash\n      - type\n      title: Write Module\n      type: object\n    WriteResource:\n      description: Write account resource\n      properties:\n        type:\n          example: write_resource\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        address:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        data:\n          $ref: '#/components/schemas/AccountResource'\n      required:\n      - address\n      - data\n      - state_key_hash\n      - type\n      title: Write Resource\n      type: object\n    WriteTableItem:\n      description: Write table item\n      properties:\n        type:\n          example: write_table_item\n          type: string\n        state_key_hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        data:\n          $ref: '#/components/schemas/Table_item_write'\n      required:\n      - data\n      - state_key_hash\n      - type\n      title: Write Table Item\n      type: object\n    Script:\n      properties:\n        code:\n          $ref: '#/components/schemas/MoveScript'\n        type_arguments:\n          items:\n            $ref: '#/components/schemas/MoveTypeTagId'\n          type: array\n        arguments:\n          items:\n            $ref: '#/components/schemas/MoveValue'\n          type: array\n      required:\n      - arguments\n      - code\n      - type_arguments\n      title: Script\n      type: object\n    MoveScript:\n      properties:\n        bytecode:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        abi:\n          $ref: '#/components/schemas/MoveFunction'\n      required:\n      - bytecode\n      title: Move Script\n      type: object\n    MoveValue:\n      description: |\n        Move `bool` type value is serialized into `boolean`.\n\n        Move `u8` type value is serialized into `integer`.\n\n        Move `u64` and `u128` type value is serialized into `string`.\n\n        Move `address` type value(16 bytes Aptos account address) is serialized into\n        hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.\n\n        For example:\n          * `0x1`\n          * `0x1668f6be25668c1a17cd8caf6b8d2f25`\n\n        Move `vector` type value is serialized into `array`, except `vector<u8>` which is\n        serialized into hex-encoded string with `0x` prefix.\n\n        For example:\n          * `vector<u64>{255, 255}` => `[\"255\", \"255\"]`\n          * `vector<u8>{255, 255}` => `0xffff`\n\n        Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):\n\n          ```json\n          {\n            field1_name: field1_value,\n            field2_name: field2_value,\n            ......\n          }\n          ```\n\n        For example:\n          `{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }`\n\n        **Special serialization for Move stdlib types:**\n\n        * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b\"hello world\"}` is serialized as `\"hello world\"` in JSON.\n      example: \"3344000000\"\n      title: Move Value\n    Event:\n      description: |\n        Event `key` and `sequence_number` are global identifier of the event.\n\n        Event `sequence_number` starts from 0 for each event key.\n\n        Event `type` is the type information of the event `data`, you can use the `type`\n        to decode the `data` JSON.\n      example:\n        key: 0x00000000000000000000000000000000000000000a550c18\n        sequence_number: \"23\"\n        type: 0x1::AptosAccount::CreateAccountEvent\n        data:\n          created: 0xa550c18\n          role_id: \"0\"\n      properties:\n        key:\n          description: |\n            Event key is a global index for an event stream.\n\n            It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is\n            a combination of a `uint64` creation number and account address\n            (without trimming leading zeros).\n\n            For example, event key `0x00000000000000000000000000000000000000000a550c18`\n            is combined by the following 2 parts:\n              1. `0000000000000000`: `uint64` representation of `0`.\n              2. `0000000000000000000000000a550c18`: 16 bytes of account address.\n          example: 0x00000000000000000000000000000000000000000a550c18\n          format: hex\n          title: Event Key\n          type: string\n        sequence_number:\n          description: |\n            Event `sequence_number` is unique id of an event in an event stream.\n            Event `sequence_number` starts from 0 for each event key.\n          example: \"23\"\n          format: uint64\n          title: Event Sequence Number\n          type: string\n        type:\n          description: |\n            String representation of an on-chain Move type tag that is exposed in transaction payload.\n\n            Values:\n              - bool\n              - u8\n              - u64\n              - u128\n              - address\n              - signer\n              - vector: `vector<{non-reference MoveTypeId}>`\n              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n\n            Vector type value examples:\n              * `vector<u8>`\n              * `vector<vector<u64>>`\n              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n            Struct type value examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n          example: 0x1::XUS::XUS\n          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n          title: Move Type Tag ID\n          type: string\n        data:\n          description: |\n            Move `bool` type value is serialized into `boolean`.\n\n            Move `u8` type value is serialized into `integer`.\n\n            Move `u64` and `u128` type value is serialized into `string`.\n\n            Move `address` type value(16 bytes Aptos account address) is serialized into\n            hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.\n\n            For example:\n              * `0x1`\n              * `0x1668f6be25668c1a17cd8caf6b8d2f25`\n\n            Move `vector` type value is serialized into `array`, except `vector<u8>` which is\n            serialized into hex-encoded string with `0x` prefix.\n\n            For example:\n              * `vector<u64>{255, 255}` => `[\"255\", \"255\"]`\n              * `vector<u8>{255, 255}` => `0xffff`\n\n            Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):\n\n              ```json\n              {\n                field1_name: field1_value,\n                field2_name: field2_value,\n                ......\n              }\n              ```\n\n            For example:\n              `{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }`\n\n            **Special serialization for Move stdlib types:**\n\n            * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b\"hello world\"}` is serialized as `\"hello world\"` in JSON.\n          example: \"3344000000\"\n          title: Move Value\n      required:\n      - data\n      - key\n      - sequence_number\n      - type\n      title: Event\n      type: object\n    TransactionSignature:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/Ed25519Signature'\n      - $ref: '#/components/schemas/MultiEd25519Signature'\n      - $ref: '#/components/schemas/MultiAgentSignature'\n      title: Transaction Signature\n    Ed25519Signature:\n      description: |\n        Please refer to https://github.com/aptos-labs/aptos-core/tree/main/specifications/crypto#signature-and-verification for\n        more details.\n      properties:\n        type:\n          example: ed25519_signature\n          type: string\n        public_key:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        signature:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - public_key\n      - signature\n      - type\n      title: Ed25519 Signature\n      type: object\n    MultiEd25519Signature:\n      description: |\n        Multi ed25519 signature, please refer to https://github.com/aptos-labs/aptos-core/tree/main/specifications/crypto#multi-signatures for more details.\n      properties:\n        type:\n          example: multi_ed25519_signature\n          type: string\n        public_keys:\n          description: all public keys of the sender account\n          items:\n            $ref: '#/components/schemas/HexEncodedBytes'\n          type: array\n        signatures:\n          description: signatures created based on the `threshold`\n          items:\n            $ref: '#/components/schemas/HexEncodedBytes'\n          type: array\n        threshold:\n          description: The threshold of the multi ed25519 account key.\n          type: integer\n        bitmap:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - bitmap\n      - public_keys\n      - signatures\n      - threshold\n      - type\n      title: Multi-ed25519 Signature\n      type: object\n    MultiAgentSignature:\n      description: |\n        Multi agent signature, please refer to TBD.\n      properties:\n        type:\n          example: multi_agent_signature\n          type: string\n        sender:\n          $ref: '#/components/schemas/AccountSignature'\n        secondary_signer_addresses:\n          items:\n            $ref: '#/components/schemas/Address'\n          type: array\n        secondary_signers:\n          items:\n            $ref: '#/components/schemas/AccountSignature'\n          type: array\n      required:\n      - secondary_signer_addresses\n      - secondary_signers\n      - sender\n      - type\n      title: Multi-agent Signature\n      type: object\n    AccountSignature:\n      discriminator:\n        propertyName: type\n      oneOf:\n      - $ref: '#/components/schemas/Ed25519Signature'\n      - $ref: '#/components/schemas/MultiEd25519Signature'\n      title: Account Signature\n    TableItemRequest:\n      properties:\n        key_type:\n          description: |\n            String representation of an on-chain Move type identifier defined by the Move language.\n\n            Values:\n              - bool\n              - u8\n              - u64\n              - u128\n              - address\n              - signer\n              - vector: `vector<{non-reference MoveTypeId}>`\n              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n              - reference: immutable `&` and mutable `&mut` references.\n              - generic_type_parameter: it is always start with `T` and following an index number,\n                which is the position of the generic type parameter in the `struct` or\n                `function` generic type parameters definition.\n\n            Vector type value examples:\n              * `vector<u8>`\n              * `vector<vector<u64>>`\n              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n            Struct type value examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Reference type value examples:\n              * `&signer`\n              * `&mut address`\n              * `&mut vector<u8>`\n\n            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:\n\n                {\n                    \"name\": \"TransactionFee\",\n                    \"is_native\": false,\n                    \"abilities\": [\"key\"],\n                    \"generic_type_params\": [\n                        {\"constraints\": [], \"is_phantom\": true}\n                    ],\n                    \"fields\": [\n                        { \"name\": \"balance\", \"type\": \"0x1::Aptos::Aptos<T0>\" },\n                        { \"name\": \"preburn\", \"type\": \"0x1::Aptos::Preburn<T0>\" }\n                    ]\n                }\n\n            It's Move source code:\n\n                module AptosFramework::TransactionFee {\n                    struct TransactionFee<phantom CoinType> has key {\n                        balance: Aptos<CoinType>,\n                        preburn: Preburn<CoinType>,\n                    }\n                }\n\n            The `T0` in the above JSON representation is the generic type place holder for\n            the `CoinType` in the Move source code.\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut\n            )?.+$|T\\d+)$\n          title: Move Type ID\n          type: string\n        value_type:\n          description: |\n            String representation of an on-chain Move type identifier defined by the Move language.\n\n            Values:\n              - bool\n              - u8\n              - u64\n              - u128\n              - address\n              - signer\n              - vector: `vector<{non-reference MoveTypeId}>`\n              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`\n              - reference: immutable `&` and mutable `&mut` references.\n              - generic_type_parameter: it is always start with `T` and following an index number,\n                which is the position of the generic type parameter in the `struct` or\n                `function` generic type parameters definition.\n\n            Vector type value examples:\n              * `vector<u8>`\n              * `vector<vector<u64>>`\n              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`\n\n            Struct type value examples:\n              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`\n              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`\n              * `0x1::AptosAccount::AccountOperationsCapability`\n\n            Reference type value examples:\n              * `&signer`\n              * `&mut address`\n              * `&mut vector<u8>`\n\n            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:\n\n                {\n                    \"name\": \"TransactionFee\",\n                    \"is_native\": false,\n                    \"abilities\": [\"key\"],\n                    \"generic_type_params\": [\n                        {\"constraints\": [], \"is_phantom\": true}\n                    ],\n                    \"fields\": [\n                        { \"name\": \"balance\", \"type\": \"0x1::Aptos::Aptos<T0>\" },\n                        { \"name\": \"preburn\", \"type\": \"0x1::Aptos::Preburn<T0>\" }\n                    ]\n                }\n\n            It's Move source code:\n\n                module AptosFramework::TransactionFee {\n                    struct TransactionFee<phantom CoinType> has key {\n                        balance: Aptos<CoinType>,\n                        preburn: Preburn<CoinType>,\n                    }\n                }\n\n            The `T0` in the above JSON representation is the generic type place holder for\n            the `CoinType` in the Move source code.\n\n            Note:\n              1. Empty chars should be ignored when comparing 2 struct tag ids.\n              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>\n          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut\n            )?.+$|T\\d+)$\n          title: Move Type ID\n          type: string\n        key:\n          description: |\n            Move `bool` type value is serialized into `boolean`.\n\n            Move `u8` type value is serialized into `integer`.\n\n            Move `u64` and `u128` type value is serialized into `string`.\n\n            Move `address` type value(16 bytes Aptos account address) is serialized into\n            hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.\n\n            For example:\n              * `0x1`\n              * `0x1668f6be25668c1a17cd8caf6b8d2f25`\n\n            Move `vector` type value is serialized into `array`, except `vector<u8>` which is\n            serialized into hex-encoded string with `0x` prefix.\n\n            For example:\n              * `vector<u64>{255, 255}` => `[\"255\", \"255\"]`\n              * `vector<u8>{255, 255}` => `0xffff`\n\n            Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):\n\n              ```json\n              {\n                field1_name: field1_value,\n                field2_name: field2_value,\n                ......\n              }\n              ```\n\n            For example:\n              `{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }`\n\n            **Special serialization for Move stdlib types:**\n\n            * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b\"hello world\"}` is serialized as `\"hello world\"` in JSON.\n          example: \"3344000000\"\n          title: Move Value\n      required:\n      - key\n      - key_type\n      - value_type\n      title: Table item request\n      type: object\n    TokenId:\n      description: token id is the unique identifier of a token. It consists of 3\n        parts joined with \"::\". The 3 parts are ${creator_address}::${collection_name}::${token_name}\n      example: 0x1::APE::LASER_APE\n      format: string\n      title: token Id\n      type: string\n    TokenIds:\n      example:\n        tokenIds:\n        - 0x1::APE::LASER_APE\n        - 0x1::APE::LASER_APE\n      properties:\n        tokenIds:\n          description: 'List of token Ids '\n          items:\n            $ref: '#/components/schemas/TokenId'\n          type: array\n      type: object\n    Royalty:\n      example:\n        value: 6\n        account: 0xdd\n      properties:\n        account:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        value:\n          type: integer\n      type: object\n    Royalties:\n      example:\n        royalties:\n        - value: 6\n          account: 0xdd\n        - value: 6\n          account: 0xdd\n      properties:\n        royalties:\n          items:\n            $ref: '#/components/schemas/Royalty'\n          type: array\n      type: object\n    Tokens:\n      example:\n        tokens:\n        - mintedAt: 2000-01-23T04:56:07.000+00:00\n          creator: 0xdd\n          deleted: false\n          max: 1\n          royalties:\n            royalties:\n            - value: 6\n              account: 0xdd\n            - value: 6\n              account: 0xdd\n          contract: 0x1::Aptos\n          id: 0x1::APE::LASER_APE\n          supply: 0\n          uri: uri\n        - mintedAt: 2000-01-23T04:56:07.000+00:00\n          creator: 0xdd\n          deleted: false\n          max: 1\n          royalties:\n            royalties:\n            - value: 6\n              account: 0xdd\n            - value: 6\n              account: 0xdd\n          contract: 0x1::Aptos\n          id: 0x1::APE::LASER_APE\n          supply: 0\n          uri: uri\n      properties:\n        tokens:\n          items:\n            $ref: '#/components/schemas/Token'\n          type: array\n      title: Tokens\n      type: object\n    Token:\n      description: Aptos Token data\n      example:\n        mintedAt: 2000-01-23T04:56:07.000+00:00\n        creator: 0xdd\n        deleted: false\n        max: 1\n        royalties:\n          royalties:\n          - value: 6\n            account: 0xdd\n          - value: 6\n            account: 0xdd\n        contract: 0x1::Aptos\n        id: 0x1::APE::LASER_APE\n        supply: 0\n        uri: uri\n      properties:\n        id:\n          description: token id is the unique identifier of a token. It consists of\n            3 parts joined with \"::\". The 3 parts are ${creator_address}::${collection_name}::${token_name}\n          example: 0x1::APE::LASER_APE\n          format: string\n          title: token Id\n          type: string\n        contract:\n          description: |\n            Move module id is a string representation of Move module.\n\n            Format: \"{address}::{module name}\"\n\n            `address` should be hex-encoded 16 bytes account address\n            that is prefixed with `0x` and leading zeros are trimmed.\n\n            Module name is case-sensitive.\n\n            See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n          example: 0x1::Aptos\n          title: Move Module ID\n          type: string\n        creator:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        supply:\n          type: integer\n        royalties:\n          $ref: '#/components/schemas/Royalties'\n        deleted:\n          example: false\n          type: boolean\n        max:\n          description: The max number of this token\n          type: integer\n        uri:\n          description: The link to the json metadata of the token\n          type: string\n        mintedAt:\n          description: Date and time of the token first minting\n          format: date-time\n          type: string\n      required:\n      - contract\n      - creator\n      - id\n      - mintedAt\n      - supply\n      - uri\n      title: Token\n      type: object\n    CollectionId:\n      description: A Id of a collection with the format of ${creator_address}::${collection_name}\n      example: 0x1::my_awesome_collection\n      title: Colelction Id\n      type: string\n    Collection:\n      description: A collection of tokens\n      example:\n        creator: 0xdd\n        name: name\n        count: 1\n        description: description\n        id: 0x1::my_awesome_collection\n        maxSupply: 0\n        uri: uri\n      properties:\n        id:\n          description: A Id of a collection with the format of ${creator_address}::${collection_name}\n          example: 0x1::my_awesome_collection\n          title: Colelction Id\n          type: string\n        name:\n          type: string\n        creator:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        maxSupply:\n          type: integer\n        count:\n          description: the number of tokens in this collection\n          example: 1\n          type: integer\n        description:\n          type: string\n        uri:\n          type: string\n      required:\n      - count\n      - creator\n      - description\n      - id\n      - name\n      - uri\n      title: NFT collection\n    Collections:\n      example:\n        tokens:\n        - creator: 0xdd\n          name: name\n          count: 1\n          description: description\n          id: 0x1::my_awesome_collection\n          maxSupply: 0\n          uri: uri\n        - creator: 0xdd\n          name: name\n          count: 1\n          description: description\n          id: 0x1::my_awesome_collection\n          maxSupply: 0\n          uri: uri\n      properties:\n        tokens:\n          items:\n            $ref: '#/components/schemas/Collection'\n          type: array\n      title: Collections\n      type: object\n    OwnershipId:\n      description: Ownership Id has the format of \"${tokenID}::${ownerAddress}\". ${tokenID}::${ownerAddress},\n        fully destructured, becomes ${creator_address}::${collection_name}::${token_name}::${ownerAddress}\n      type: string\n    OwnershipIds:\n      example:\n        ownershipIds:\n        - null\n        - null\n      properties:\n        ownershipIds:\n          description: List of Ownership Ids\n          items:\n            $ref: '#/components/schemas/OwnershipId'\n          type: array\n      type: object\n    OwnershipSource:\n      enum:\n      - MINT\n      - TRANSFER\n      type: string\n    Ownership:\n      example:\n        owner: 0xdd\n        createdAt: 2000-01-23T04:56:07.000+00:00\n        creator: 0xdd\n        tokenId: 0x1::APE::LASER_APE\n        contract: 0x1::Aptos\n        id: id\n        collection: 0x1::my_awesome_collection\n        value: 0\n      properties:\n        id:\n          description: Ownership Id has the format of \"${tokenID}::${ownerAddress}\".\n            ${tokenID}::${ownerAddress}, fully destructured, becomes ${creator_address}::${collection_name}::${token_name}::${ownerAddress}\n          type: string\n        tokenId:\n          description: token id is the unique identifier of a token. It consists of\n            3 parts joined with \"::\". The 3 parts are ${creator_address}::${collection_name}::${token_name}\n          example: 0x1::APE::LASER_APE\n          format: string\n          title: token Id\n          type: string\n        contract:\n          description: |\n            Move module id is a string representation of Move module.\n\n            Format: \"{address}::{module name}\"\n\n            `address` should be hex-encoded 16 bytes account address\n            that is prefixed with `0x` and leading zeros are trimmed.\n\n            Module name is case-sensitive.\n\n            See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n          example: 0x1::Aptos\n          title: Move Module ID\n          type: string\n        collection:\n          description: A Id of a collection with the format of ${creator_address}::${collection_name}\n          example: 0x1::my_awesome_collection\n          title: Colelction Id\n          type: string\n        owner:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        value:\n          description: the number of the tokens in this ownership\n          type: integer\n        source:\n          $ref: '#/components/schemas/OwnershipSource'\n        createdAt:\n          format: date-time\n          type: string\n        creator:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n      required:\n      - collection\n      - createdAt\n      - creator\n      - id\n      - owner\n      - tokenId\n      - value\n      type: object\n    Ownerships:\n      example:\n        ownership:\n        - owner: 0xdd\n          createdAt: 2000-01-23T04:56:07.000+00:00\n          creator: 0xdd\n          tokenId: 0x1::APE::LASER_APE\n          contract: 0x1::Aptos\n          id: id\n          collection: 0x1::my_awesome_collection\n          value: 0\n        - owner: 0xdd\n          createdAt: 2000-01-23T04:56:07.000+00:00\n          creator: 0xdd\n          tokenId: 0x1::APE::LASER_APE\n          contract: 0x1::Aptos\n          id: id\n          collection: 0x1::my_awesome_collection\n          value: 0\n      properties:\n        ownership:\n          items:\n            $ref: '#/components/schemas/Ownership'\n          type: array\n      title: Ownerships\n      type: object\n    MintActivity:\n      properties:\n        '@type':\n          enum:\n          - MINT\n          type: string\n        creator:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        contract:\n          description: |\n            Move module id is a string representation of Move module.\n\n            Format: \"{address}::{module name}\"\n\n            `address` should be hex-encoded 16 bytes account address\n            that is prefixed with `0x` and leading zeros are trimmed.\n\n            Module name is case-sensitive.\n\n            See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.\n          example: 0x1::Aptos\n          title: Move Module ID\n          type: string\n        tokenId:\n          description: token id is the unique identifier of a token. It consists of\n            3 parts joined with \"::\". The 3 parts are ${creator_address}::${collection_name}::${token_name}\n          example: 0x1::APE::LASER_APE\n          format: string\n          title: token Id\n          type: string\n        value:\n          type: integer\n        transactionHash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      type: object\n    ActivityId:\n      $ref: '#/components/schemas/EventKey'\n    UserActivityType:\n      enum:\n      - TRANSFER_FROM\n      - TRANSFER_TO\n      - MINT\n      - BURN\n      - MAKE_BID\n      - GET_BID\n      - LIST\n      - BUY\n      - SELL\n      - CANCEL_LIST\n      - CANCEL_BID\n      - AUCTION_BID\n      - AUCTION_CREATED\n      - AUCTION_CANCEL\n      - AUCTION_FINISHED\n      - AUCTION_STARTED\n      - AUCTION_ENDED\n      type: string\n    Activity:\n      example:\n        date: 2000-01-23T04:56:07.000+00:00\n        lastUpdatedAt: 2000-01-23T04:56:07.000+00:00\n        id: 0x00000000000000000000000000000000000000000a550c18\n      oneOf:\n      - $ref: '#/components/schemas/MintActivity'\n      properties:\n        id:\n          description: |\n            Event key is a global index for an event stream.\n\n            It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is\n            a combination of a `uint64` creation number and account address\n            (without trimming leading zeros).\n\n            For example, event key `0x00000000000000000000000000000000000000000a550c18`\n            is combined by the following 2 parts:\n              1. `0000000000000000`: `uint64` representation of `0`.\n              2. `0000000000000000000000000a550c18`: 16 bytes of account address.\n          example: 0x00000000000000000000000000000000000000000a550c18\n          format: hex\n          title: Event Key\n          type: string\n        date:\n          format: date-time\n          type: string\n        lastUpdatedAt:\n          format: date-time\n          type: string\n      type: object\n    Activities:\n      example:\n        ownership:\n        - date: 2000-01-23T04:56:07.000+00:00\n          lastUpdatedAt: 2000-01-23T04:56:07.000+00:00\n          id: 0x00000000000000000000000000000000000000000a550c18\n        - date: 2000-01-23T04:56:07.000+00:00\n          lastUpdatedAt: 2000-01-23T04:56:07.000+00:00\n          id: 0x00000000000000000000000000000000000000000a550c18\n      properties:\n        ownership:\n          items:\n            $ref: '#/components/schemas/Activity'\n          type: array\n      type: object\n    ActivitySort:\n      enum:\n      - LATEST_FIRST\n      - EARLIEST_FIRST\n      type: string\n    TokenMetaData:\n      example:\n        name: name\n        description: description\n        raw: raw\n        attributes:\n        - format: format\n          type: type\n          value: value\n          key: key\n        - format: format\n          type: type\n          value: value\n          key: key\n        collection: collection\n        content:\n        - url: url\n        - url: url\n      properties:\n        collection:\n          description: the name of the collection\n          type: string\n        name:\n          description: Name of the NFT item\n          type: string\n        description:\n          description: Description of the NFT item\n          type: string\n        attributes:\n          description: Attributes of the NFT item\n          items:\n            $ref: '#/components/schemas/TokenMetaAttribute'\n          type: array\n        content:\n          description: NFT content information\n          items:\n            $ref: '#/components/schemas/MetaContent'\n          type: array\n        raw:\n          type: string\n      required:\n      - attributes\n      - content\n      - name\n      type: object\n    TokenMetaAttribute:\n      example:\n        format: format\n        type: type\n        value: value\n        key: key\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        type:\n          type: string\n        format:\n          type: string\n      required:\n      - key\n      type: object\n    MetaContent:\n      example:\n        url: url\n      oneOf:\n      - $ref: '#/components/schemas/ImageContent'\n      properties:\n        url:\n          type: string\n      required:\n      - url\n      type: object\n    ImageContent:\n      properties:\n        '@type':\n          enum:\n          - IMAGE\n          type: string\n        width:\n          type: integer\n        height:\n          type: integer\n      type: object\n    MoveStruct_generic_type_params:\n      properties:\n        constraints:\n          items:\n            $ref: '#/components/schemas/MoveAbility'\n          type: array\n        is_phantom:\n          type: boolean\n      required:\n      - constraints\n      - is_phantom\n      type: object\n    MoveFunction_generic_type_params:\n      properties:\n        constraints:\n          items:\n            $ref: '#/components/schemas/MoveAbility'\n          type: array\n      required:\n      - constraints\n      type: object\n    PendingTransaction_allOf:\n      properties:\n        type:\n          example: pending_transaction\n          type: string\n        hash:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - hash\n      - type\n    UserTransaction_allOf:\n      properties:\n        type:\n          example: user_transaction\n          type: string\n        events:\n          items:\n            $ref: '#/components/schemas/Event'\n          type: array\n        timestamp:\n          description: |\n            Timestamp in microseconds, e.g. ledger / block creation timestamp.\n          example: \"1632507671675208\"\n          format: uint64\n          title: Timestamp in Microseconds\n          type: string\n      required:\n      - events\n      - timestamp\n      - type\n    BlockMetadataTransaction_allOf:\n      properties:\n        type:\n          example: block_metadata_transaction\n          type: string\n        id:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        round:\n          description: Unsigned int64 type value\n          example: \"32425224034\"\n          format: uint64\n          title: uint64\n          type: string\n        previous_block_votes:\n          items:\n            $ref: '#/components/schemas/Address'\n          type: array\n        proposer:\n          description: |\n            Hex-encoded 16 bytes Aptos account address.\n\n            Prefixed with `0x` and leading zeros are trimmed.\n\n            See [doc](https://diem.github.io/move/address.html) for more details.\n          example: 0xdd\n          format: address\n          title: Account Address\n          type: string\n        timestamp:\n          description: |\n            Timestamp in microseconds, e.g. ledger / block creation timestamp.\n          example: \"1632507671675208\"\n          format: uint64\n          title: Timestamp in Microseconds\n          type: string\n      required:\n      - id\n      - previous_block_votes\n      - proposer\n      - round\n      - timestamp\n      - type\n    GenesisTransaction_allOf:\n      properties:\n        type:\n          example: genesis_transaction\n          type: string\n        events:\n          items:\n            $ref: '#/components/schemas/Event'\n          type: array\n        payload:\n          $ref: '#/components/schemas/WriteSetPayload'\n      required:\n      - events\n      - payload\n      - type\n    Table_item_deletion:\n      properties:\n        handle:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        key:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - handle\n      - key\n      title: Table item deletion\n      type: object\n    Table_item_write:\n      properties:\n        handle:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        key:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n        value:\n          description: |\n            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with\n            two hex digits per byte.\n\n            Different with `Address` type, hex-encoded bytes should not trim any zeros.\n          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1\n          format: hex\n          title: Hex-encoded Bytes\n          type: string\n      required:\n      - handle\n      - key\n      - value\n      title: Table item write\n      type: object\n",
			"canonicalURL": "/github.com/aptos-labs/aptos-core@8b8d70e9907af5b4f8dacc5c42bd0279bc63b98d/-/blob/ecosystem/indexer-server/typescript/src/api/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aptos-labs/aptos-core/blob/8b8d70e9907af5b4f8dacc5c42bd0279bc63b98d/ecosystem/indexer-server/typescript/src/api/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/tokens/{tokenId}/meta\": get: parameters: fail: \"tokenId\": field \"Attributes\": nested arrays not allowed"
}