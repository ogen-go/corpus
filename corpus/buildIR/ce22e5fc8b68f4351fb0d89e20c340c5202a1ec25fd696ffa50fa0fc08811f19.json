{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dahag-ag/keycloak-openapi"
		},
		"file": {
			"name": "keycloak-16.0.yml",
			"size": 0,
			"path": "OpenApiDefinitions/keycloak-16.0.yml",
			"byteSize": 264578,
			"content": "openapi: 3.0.1\ninfo:\n  title: Keycloak REST Api\n  description: This is a REST API reference for the Keycloak Admin\n  version: '1'\npaths:\n  /:\n    get:\n      tags:\n        - RealmsAdmin\n      description: \"/\\nGet accessible realms\\n\\nReturns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RealmRepresentation'\n    post:\n      tags:\n        - RealmsAdmin\n      description: \"/\\nImport a realm\\n\\nImports a realm from a full representation of that realm.  Realm name must be unique.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n      responses:\n        2XX:\n          description: Success\n  '/{realm}':\n    description: '/{realm}'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet the top-level representation of the realm\\n\\nIt will not include nested information like User and Client representations.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nUpdate the top-level information of the realm\\n\\nAny user, roles or client information in the representation\\nwill be ignored.  This will only update top-level attributes of the realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete the realm\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/admin-events':\n    description: '/{realm}/admin-events'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: operationTypes\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n        - name: authRealm\n          in: query\n          schema:\n            type: string\n        - name: authClient\n          in: query\n          schema:\n            type: string\n        - name: authUser\n          in: query\n          schema:\n            type: string\n        - name: authIpAddress\n          in: query\n          schema:\n            type: string\n        - name: resourcePath\n          in: query\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: resourceTypes\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AdminEventRepresentation'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete all admin events\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/attack-detection/brute-force/users':\n    description: '/{realm}/attack-detection/brute-force/users'\n    delete:\n      tags:\n        - AttackDetection\n      description: \"/\\nClear any user login failures for all users\\n\\nThis can release temporary disabled users\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/attack-detection/brute-force/users/{userId}':\n    description: '/{realm}/attack-detection/brute-force/users/{userId}'\n    get:\n      tags:\n        - AttackDetection\n      description: \"/\\nGet status of a username in brute force detection\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    delete:\n      tags:\n        - AttackDetection\n      description: \"/\\nClear any user login failures for the user\\n\\nThis can release temporary disabled user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userId\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/authenticator-providers':\n    description: '/{realm}/authentication/authenticator-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator providers\\n\\nReturns a stream of authenticator providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/client-authenticator-providers':\n    description: '/{realm}/authentication/client-authenticator-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet client authenticator providers\\n\\nReturns a stream of client authenticator providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config':\n    description: '/{realm}/authentication/config'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCreate new authenticator configuration\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config-description/{providerId}':\n    description: '/{realm}/authentication/config-description/{providerId}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator provider's configuration description\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: providerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/config/{id}':\n    description: '/{realm}/authentication/config/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authenticator configuration\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete authenticator configuration\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate authenticator configuration\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Configuration id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions':\n    description: '/{realm}/authentication/executions'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new authentication execution\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}':\n    description: '/{realm}/authentication/executions/{executionId}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet Single Execution\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete execution\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/config':\n    description: '/{realm}/authentication/executions/{executionId}/config'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate execution with new configuration\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/config/{id}':\n    description: '/{realm}/authentication/executions/{executionId}/config/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet execution's configuration\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Configuration id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/lower-priority':\n    description: '/{realm}/authentication/executions/{executionId}/lower-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nLower execution's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/executions/{executionId}/raise-priority':\n    description: '/{realm}/authentication/executions/{executionId}/raise-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRaise execution's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: executionId\n        in: path\n        description: Execution id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows':\n    description: '/{realm}/authentication/flows'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication flows\\n\\nReturns a stream of authentication flows.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCreate a new authentication flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/copy':\n    description: '/{realm}/authentication/flows/{flowAlias}/copy'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nCopy existing authentication flow under a new name\\n\\nThe new name is given as 'newName' attribute of the passed JSON object\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Name of the existing authentication flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication executions for a flow\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate authentication executions of a Flow\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Flow alias\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions/execution':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions/execution'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new authentication execution to a flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Alias of parent flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{flowAlias}/executions/flow':\n    description: '/{realm}/authentication/flows/{flowAlias}/executions/flow'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nAdd new flow with new execution to existing flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: flowAlias\n        in: path\n        description: Alias of parent authentication flow\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/flows/{id}':\n    description: '/{realm}/authentication/flows/{id}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet authentication flow for id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate an authentication flow\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete an authentication flow\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: Flow id\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/form-action-providers':\n    description: '/{realm}/authentication/form-action-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet form action providers\\n\\nReturns a stream of form action providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/form-providers':\n    description: '/{realm}/authentication/form-providers'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet form providers\\n\\nReturns a stream of form providers.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/per-client-config-description':\n    description: '/{realm}/authentication/per-client-config-description'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet configuration descriptions for all clients\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/register-required-action':\n    description: '/{realm}/authentication/register-required-action'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRegister a new required actions\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions':\n    description: '/{realm}/authentication/required-actions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet required actions\\n\\nReturns a stream of required actions.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}':\n    description: '/{realm}/authentication/required-actions/{alias}'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet required action for alias\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n    put:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nUpdate required action\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nDelete required action\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}/lower-priority':\n    description: '/{realm}/authentication/required-actions/{alias}/lower-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nLower required action's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/required-actions/{alias}/raise-priority':\n    description: '/{realm}/authentication/required-actions/{alias}/raise-priority'\n    post:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nRaise required action's priority\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n  '/{realm}/authentication/unregistered-required-actions':\n    description: '/{realm}/authentication/unregistered-required-actions'\n    get:\n      tags:\n        - AuthenticationManagement\n      description: \"/\\nGet unregistered required actions\\n\\nReturns a stream of unregistered required actions.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clear-keys-cache':\n    description: '/{realm}/clear-keys-cache'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nClear cache of external public keys (Public keys of clients or Identity providers)\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clear-realm-cache':\n    description: '/{realm}/clear-realm-cache'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nClear realm cache\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clear-user-cache':\n    description: '/{realm}/clear-user-cache'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nClear user cache\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-description-converter':\n    description: '/{realm}/client-description-converter'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for importing clients under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n          application/xml:\n            schema:\n              type: string\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-policies/policies':\n    description: '/{realm}/client-policies/policies'\n    get:\n      tags:\n        - ClientPolicies\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientPoliciesRepresentation'\n    put:\n      tags:\n        - ClientPolicies\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientPoliciesRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-policies/profiles':\n    description: '/{realm}/client-policies/profiles'\n    get:\n      tags:\n        - ClientProfiles\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: include-global-profiles\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientProfilesRepresentation'\n    put:\n      tags:\n        - ClientProfiles\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientProfilesRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-registration-policy/providers':\n    description: '/{realm}/client-registration-policy/providers'\n    get:\n      tags:\n        - ClientRegistrationPolicy\n      description: \"/\\nBase path for retrieve providers with the configProperties properly filled\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentTypeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes':\n    description: '/{realm}/client-scopes'\n    get:\n      tags:\n        - ClientScopes\n      description: \"/\\nGet client scopes belonging to the realm\\n\\nReturns a list of client scopes belonging to the realm\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    post:\n      tags:\n        - ClientScopes\n      description: \"/\\nCreate a new client scope\\n\\nClient Scope's name must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}':\n    description: '/{realm}/client-scopes/{id}'\n    put:\n      tags:\n        - ClientScope\n      description: \"/\\nUpdate the client scope\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ClientScope\n      description: \"/\\nGet representation of the client scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientScopeRepresentation'\n    delete:\n      tags:\n        - ClientScope\n      description: \"/\\nDelete the client scope\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/add-models':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/models':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings':\n    description: '/{realm}/client-scopes/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm/available':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/client-scopes/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-session-stats':\n    description: '/{realm}/client-session-stats'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet client session stats\\n\\nReturns a JSON map.  The key is the client id, the value is the number of sessions that currently are active\\nwith that client.  Only clients that actually have a session associated with them will be in this map.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates':\n    description: '/{realm}/client-templates'\n    get:\n      tags:\n        - ClientScopes\n      description: \"/\\nGet client scopes belonging to the realm\\n\\nReturns a list of client scopes belonging to the realm\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    post:\n      tags:\n        - ClientScopes\n      description: \"/\\nCreate a new client scope\\n\\nClient Scope's name must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}':\n    description: '/{realm}/client-templates/{id}'\n    put:\n      tags:\n        - ClientScope\n      description: \"/\\nUpdate the client scope\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ClientScope\n      description: \"/\\nGet representation of the client scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientScopeRepresentation'\n    delete:\n      tags:\n        - ClientScope\n      description: \"/\\nDelete the client scope\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/add-models':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/models':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings':\n    description: '/{realm}/client-templates/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm/available':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/client-templates/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n  '/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients':\n    description: '/{realm}/clients'\n    get:\n      tags:\n        - Clients\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      parameters:\n        - name: clientId\n          in: query\n          schema:\n            type: string\n        - name: viewableOnly\n          in: query\n          schema:\n            type: boolean\n        - name: search\n          in: query\n          schema:\n            type: boolean\n        - name: q\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientRepresentation'\n    post:\n      tags:\n        - Clients\n      description: \"/\\nCreate a new client\\n\\nClient's client_id must be unique!\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients-initial-access':\n    description: '/{realm}/clients-initial-access'\n    post:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nCreate a new initial access token.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientInitialAccessPresentation'\n    get:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nBase path for managing client initial access tokens\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientInitialAccessPresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients-initial-access/{id}':\n    description: '/{realm}/clients-initial-access/{id}'\n    delete:\n      tags:\n        - ClientInitialAccess\n      description: \"/\\nBase path for managing client initial access tokens\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}':\n    description: '/{realm}/clients/{id}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nUpdate the client\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet representation of the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    delete:\n      tags:\n        - Client\n      description: \"/\\nDelete the client\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}':\n    description: '/{realm}/clients/{id}/certificates/{attr}'\n    get:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGet key info\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/download':\n    description: '/{realm}/clients/{id}/certificates/{attr}/download'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGet a keystore file for the client, containing private key and public certificate\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/generate':\n    description: '/{realm}/clients/{id}/certificates/{attr}/generate'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGenerate a new certificate with new key pair\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/generate-and-download':\n    description: '/{realm}/clients/{id}/certificates/{attr}/generate-and-download'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nGenerate a new keypair and certificate, and get the private key file\\n\\nGenerates a keypair and certificate and serves the private key in a specified keystore format.\\nOnly generated public certificate is saved in Keycloak DB - the private key is not.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/upload':\n    description: '/{realm}/clients/{id}/certificates/{attr}/upload'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nUpload certificate and eventually private key\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/certificates/{attr}/upload-certificate':\n    description: '/{realm}/clients/{id}/certificates/{attr}/upload-certificate'\n    post:\n      tags:\n        - ClientAttributeCertificate\n      description: \"/\\nUpload only certificate, not private key\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: attr\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/client-secret':\n    description: '/{realm}/clients/{id}/client-secret'\n    post:\n      tags:\n        - Client\n      description: \"/\\nGenerate a new secret for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet the client secret\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/default-client-scopes':\n    description: '/{realm}/clients/{id}/default-client-scopes'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet default client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}':\n    description: '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example access token\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example id token\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IDToken'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo':\n    description: '/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nCreate JSON with payload of example user info\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: userId\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers':\n    description: '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers'\n    get:\n      tags:\n        - ClientScopeEvaluate\n      description: \"/\\nReturn list of all protocol mappers, which will be used when generating tokens issued for particular client. This means\\nprotocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperEvaluationRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted':\n    description: '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted'\n    get:\n      tags:\n        - ClientScopeEvaluateScopeMappings\n      description: \"/\\nGet effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.\\n\\nThis contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes,\\nwhich are linked with this client.\\n\\n\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: roleContainerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted':\n    description: '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted'\n    get:\n      tags:\n        - ClientScopeEvaluateScopeMappings\n      description: \"/\\nGet roles, which this client doesn't have scope for and can't have them in the accessToken issued for him. Defacto all the\\nother roles of particular role container, which are not in {\"\n      parameters:\n        - name: scope\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: roleContainerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/installation/providers/{providerId}':\n    description: '/{realm}/clients/{id}/installation/providers/{providerId}'\n    get:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: providerId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/management/permissions':\n    description: '/{realm}/clients/{id}/management/permissions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Client\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/nodes':\n    description: '/{realm}/clients/{id}/nodes'\n    post:\n      tags:\n        - Client\n      description: \"/\\nRegister a cluster node with the client\\n\\nManually register cluster node to this client - usually it's not needed to call this directly as adapter should handle\\nby sending registration request to Keycloak\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/nodes/{node}':\n    description: '/{realm}/clients/{id}/nodes/{node}'\n    delete:\n      tags:\n        - Client\n      description: \"/\\nUnregister a cluster node from the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: node\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/offline-session-count':\n    description: '/{realm}/clients/{id}/offline-session-count'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet application offline session count\\n\\nReturns a number of offline user sessions associated with this client\\n\\n{\\n\\\"count\\\": number\\n}\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/offline-sessions':\n    description: '/{realm}/clients/{id}/offline-sessions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet offline sessions for client\\n\\nReturns a list of offline user sessions associated with this client\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/optional-client-scopes':\n    description: '/{realm}/clients/{id}/optional-client-scopes'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet optional client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}':\n    description: '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Client\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/add-models':\n    description: '/{realm}/clients/{id}/protocol-mappers/add-models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate multiple mappers\\n\\n/\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/models':\n    description: '/{realm}/clients/{id}/protocol-mappers/models'\n    post:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nCreate a mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}':\n    description: '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mappers by name for a specific protocol\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: protocol\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/push-revocation':\n    description: '/{realm}/clients/{id}/push-revocation'\n    post:\n      tags:\n        - Client\n      description: \"/\\nPush the client's revocation policy to its admin URL\\n\\nIf the client has an admin URL, push revocation policy to it.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/registration-access-token':\n    description: '/{realm}/clients/{id}/registration-access-token'\n    post:\n      tags:\n        - Client\n      description: \"/\\nGenerate a new registration access token for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles':\n    description: '/{realm}/clients/{id}/roles'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet all roles for the realm or client\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nCreate a new role for the realm or client\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}':\n    description: '/{realm}/clients/{id}/roles/{role-name}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nDelete a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nUpdate a role by name\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nAdd a composite to the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet composites of the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nRemove roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/composites/realm':\n    description: '/{realm}/clients/{id}/roles/{role-name}/composites/realm'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet realm-level roles of the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/groups':\n    description: '/{realm}/clients/{id}/roles/{role-name}/groups'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nBase path for managing clients under this realm.\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/management/permissions':\n    description: '/{realm}/clients/{id}/roles/{role-name}/management/permissions'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/roles/{role-name}/users':\n    description: '/{realm}/clients/{id}/roles/{role-name}/users'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturns a stream of users that have the specified role name.\\n\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: 'first result to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: 'maximum number of results to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: the role name.\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings':\n    description: '/{realm}/clients/{id}/scope-mappings'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet all scope mappings for the client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet the roles associated with a client's scope\\n\\nReturns roles for the client.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nAdd client-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nRemove client-level roles from the client's scope.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}/available':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nThe available client-level roles\\n\\nReturns the roles for the client that can be associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite':\n    description: '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ScopeMappedClient\n      description: \"/\\nGet effective client roles\\n\\nReturns the roles for the client that are associated with the client's scope.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm':\n    description: '/{realm}/clients/{id}/scope-mappings/realm'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles associated with the client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ScopeMapped\n      description: \"/\\nAdd a set of realm-level roles to the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ScopeMapped\n      description: \"/\\nRemove a set of realm-level roles from the client's scope\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm/available':\n    description: '/{realm}/clients/{id}/scope-mappings/realm/available'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet realm-level roles that are available to attach to this client's scope\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/scope-mappings/realm/composite':\n    description: '/{realm}/clients/{id}/scope-mappings/realm/composite'\n    get:\n      tags:\n        - ScopeMapped\n      description: \"/\\nGet effective realm-level roles associated with the client's scope\\n\\nWhat this does is recurse\\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\\nto show a comprehensive total view of realm-level roles associated with the client.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/service-account-user':\n    description: '/{realm}/clients/{id}/service-account-user'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet a user dedicated to the service account\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/session-count':\n    description: '/{realm}/clients/{id}/session-count'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet application session count\\n\\nReturns a number of user sessions associated with this client\\n\\n{\\n\\\"count\\\": number\\n}\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/test-nodes-available':\n    description: '/{realm}/clients/{id}/test-nodes-available'\n    get:\n      tags:\n        - Client\n      description: \"/\\nTest if registered cluster nodes are available\\n\\nTests availability by sending 'ping' request to all cluster nodes.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id}/user-sessions':\n    description: '/{realm}/clients/{id}/user-sessions'\n    get:\n      tags:\n        - Client\n      description: \"/\\nGet user sessions for client\\n\\nReturns a list of user sessions associated with this client\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/clients/{id1}/protocol-mappers/models/{id2}':\n    description: '/{realm}/clients/{id1}/protocol-mappers/models/{id2}'\n    get:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nGet mapper by id\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nUpdate the mapper\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ProtocolMappers\n      description: \"/\\nDelete the mapper\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id1\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: id2\n        in: path\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n  '/{realm}/components':\n    description: '/{realm}/components'\n    get:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      parameters:\n        - name: parent\n          in: query\n          schema:\n            type: string\n        - name: type\n          in: query\n          schema:\n            type: string\n        - name: name\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentRepresentation'\n    post:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/components/{id}':\n    description: '/{realm}/components/{id}'\n    get:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComponentRepresentation'\n    put:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Component\n      description: \"/\\nBase path for managing components under this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/components/{id}/sub-component-types':\n    description: '/{realm}/components/{id}/sub-component-types'\n    get:\n      tags:\n        - Component\n      description: \"/\\nList of subcomponent types that are available to configure for a particular parent component.\\n\\n\"\n      parameters:\n        - name: type\n          in: query\n          description: ''\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ComponentTypeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/credential-registrators':\n    description: '/{realm}/credential-registrators'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-default-client-scopes':\n    description: '/{realm}/default-default-client-scopes'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet realm default client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-default-client-scopes/{clientScopeId}':\n    description: '/{realm}/default-default-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-groups':\n    description: '/{realm}/default-groups'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet group hierarchy.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-groups/{groupId}':\n    description: '/{realm}/default-groups/{groupId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: groupId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-optional-client-scopes':\n    description: '/{realm}/default-optional-client-scopes'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet realm optional client scopes.  Only name and ids are returned.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientScopeRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/default-optional-client-scopes/{clientScopeId}':\n    description: '/{realm}/default-optional-client-scopes/{clientScopeId}'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientScopeId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/events':\n    description: '/{realm}/events'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      parameters:\n        - name: type\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n        - name: client\n          in: query\n          schema:\n            type: string\n        - name: user\n          in: query\n          schema:\n            type: string\n        - name: dateFrom\n          in: query\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          schema:\n            type: string\n        - name: ipAddress\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EventRepresentation'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nDelete all events\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/events/config':\n    description: '/{realm}/events/config'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet the events provider configuration\\n\\nReturns JSON object with events provider configuration\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nUpdate the events provider\\n\\nChange the events provider and/or its configuration\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/group-by-path/{path}':\n    description: '/{realm}/group-by-path/{path}'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: path\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups':\n    description: '/{realm}/groups'\n    get:\n      tags:\n        - Groups\n      description: \"/\\nGet group hierarchy.  Only name and ids are returned.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    post:\n      tags:\n        - Groups\n      description: \"/\\ncreate or add a top level realm groupSet or create child.  This will update the group and set the parent if it exists.  Create it and set the parent\\nif the group doesn't exist.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}':\n    description: '/{realm}/groups/{id}'\n    get:\n      tags:\n        - Group\n      description: \"/\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    put:\n      tags:\n        - Group\n      description: \"/\\nUpdate group, ignores subgroups.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - Group\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/children':\n    description: '/{realm}/groups/{id}/children'\n    post:\n      tags:\n        - Group\n      description: \"/\\nSet or create child.  This will just set the parent if it exists.  Create it and set the parent\\nif the group doesn't exist.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/management/permissions':\n    description: '/{realm}/groups/{id}/management/permissions'\n    get:\n      tags:\n        - Group\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Group\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/members':\n    description: '/{realm}/groups/{id}/members'\n    get:\n      tags:\n        - Group\n      description: \"/\\nGet users\\n\\nReturns a stream of users, filtered according to query parameters\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: Pagination offset\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          description: 'Only return basic information (only guaranteed to return id, username, created, first and last name,'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings':\n    description: '/{realm}/groups/{id}/role-mappings'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet client-level role mappings for the user, and the app\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nAdd client-level roles to the user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nDelete client-level roles from user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}/available':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet available client-level roles that can be mapped to the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/clients/{client}/composite':\n    description: '/{realm}/groups/{id}/role-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet effective client-level role mappings\\n\\nThis recurses any composite roles\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm':\n    description: '/{realm}/groups/{id}/role-mappings/realm'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleMapper\n      description: \"/\\nAdd realm-level role mappings to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RoleMapper\n      description: \"/\\nDelete realm-level role mappings\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm/available':\n    description: '/{realm}/groups/{id}/role-mappings/realm/available'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level roles that can be mapped\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/{id}/role-mappings/realm/composite':\n    description: '/{realm}/groups/{id}/role-mappings/realm/composite'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet effective realm-level role mappings\\n\\nThis will recurse all composite roles to get the result.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/groups/count':\n    description: '/{realm}/groups/count'\n    get:\n      tags:\n        - Groups\n      description: \"/\\nReturns the groups counts.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: top\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/import-config':\n    description: '/{realm}/identity-provider/import-config'\n    post:\n      tags:\n        - IdentityProviders\n      description: \"/\\nImport identity provider from uploaded JSON file\\n\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n          application/json:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances':\n    description: '/{realm}/identity-provider/instances'\n    get:\n      tags:\n        - IdentityProviders\n      description: \"/\\nGet identity providers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IdentityProviderRepresentation'\n    post:\n      tags:\n        - IdentityProviders\n      description: \"/\\nCreate a new identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}':\n    description: '/{realm}/identity-provider/instances/{alias}'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderRepresentation'\n    delete:\n      tags:\n        - IdentityProvider\n      description: \"/\\nDelete the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nUpdate the identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/export':\n    description: '/{realm}/identity-provider/instances/{alias}/export'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nExport public broker configuration for identity provider\\n\\n\"\n      parameters:\n        - name: format\n          in: query\n          description: Format to use\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/management/permissions':\n    description: '/{realm}/identity-provider/instances/{alias}/management/permissions'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mapper-types':\n    description: '/{realm}/identity-provider/instances/{alias}/mapper-types'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mapper types for identity provider\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mappers':\n    description: '/{realm}/identity-provider/instances/{alias}/mappers'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mappers for identity provider\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n    post:\n      tags:\n        - IdentityProvider\n      description: \"/\\nAdd a mapper to identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/instances/{alias}/mappers/{id}':\n    description: '/{realm}/identity-provider/instances/{alias}/mappers/{id}'\n    get:\n      tags:\n        - IdentityProvider\n      description: \"/\\nGet mapper by id for the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n    put:\n      tags:\n        - IdentityProvider\n      description: \"/\\nUpdate a mapper for the identity provider\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - IdentityProvider\n      description: \"/\\nDelete a mapper for the identity provider\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: alias\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/identity-provider/providers/{provider_id}':\n    description: '/{realm}/identity-provider/providers/{provider_id}'\n    get:\n      tags:\n        - IdentityProviders\n      description: \"/\\nGet identity providers\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: provider_id\n        in: path\n        description: Provider id\n        required: true\n        schema:\n          type: string\n  '/{realm}/keys':\n    description: '/{realm}/keys'\n    get:\n      tags:\n        - Key\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeysMetadataRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/ldap-server-capabilities':\n    description: '/{realm}/ldap-server-capabilities'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nGet LDAP supported extensions.\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestLdapConnectionRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization':\n    description: '/{realm}/localization'\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization/{locale}':\n    description: '/{realm}/localization/{locale}'\n    post:\n      tags:\n        - RealmLocalization\n      description: \"/\\nImport localization from uploaded JSON file\\n/\\n\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n          application/json:\n            schema:\n              type: object\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: locale\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/localization/{locale}/{key}':\n    description: '/{realm}/localization/{locale}/{key}'\n    put:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RealmLocalization\n      description: \"/\\nBase path for managing localization under this realm.\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            text/plain:\n              schema:\n                type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: locale\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: key\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/logout-all':\n    description: '/{realm}/logout-all'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nRemoves all user sessions.  Any client that has an admin url will also be told to invalidate any sessions\\nthey have.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                description: GlobalRequestResult\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/partial-export':\n    description: '/{realm}/partial-export'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPartial export of existing realm into a JSON file.\\n\\n\"\n      parameters:\n        - name: exportGroupsAndRoles\n          in: query\n          description: ''\n          schema:\n            type: boolean\n        - name: exportClients\n          in: query\n          description: ''\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/partialImport':\n    description: '/{realm}/partialImport'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPartial import from a JSON file to an existing realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartialImportRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/push-revocation':\n    description: '/{realm}/push-revocation'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nPush the realm's revocation policy to any client that has an admin url associated with it.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles':\n    description: '/{realm}/roles'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet all roles for the realm or client\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nCreate a new role for the realm or client\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}':\n    description: '/{realm}/roles-by-id/{role-id}'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet a specific role's representation\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleById\n      description: \"/\\nDelete the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleById\n      description: \"/\\nUpdate the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: id of role\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites':\n    description: '/{realm}/roles-by-id/{role-id}/composites'\n    post:\n      tags:\n        - RoleById\n      description: \"/\\nMake the role a composite role by associating some child roles\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nPath for managing all realm-level or client-level roles defined in this realm by its id.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleById\n      description: \"/\\nRemove a set of roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}':\n    description: '/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/composites/realm':\n    description: '/{realm}/roles-by-id/{role-id}/composites/realm'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nGet realm-level roles that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles-by-id/{role-id}/management/permissions':\n    description: '/{realm}/roles-by-id/{role-id}/management/permissions'\n    get:\n      tags:\n        - RoleById\n      description: \"/\\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleById\n      description: \"/\\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}':\n    description: '/{realm}/roles/{role-name}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nDelete a role by name\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nUpdate a role by name\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites':\n    description: '/{realm}/roles/{role-name}/composites'\n    post:\n      tags:\n        - RoleContainer\n      description: \"/\\nAdd a composite to the role\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet composites of the role\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    delete:\n      tags:\n        - RoleContainer\n      description: \"/\\nRemove roles from the role's composite\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites/clients/{clientUuid}':\n    description: '/{realm}/roles/{role-name}/composites/clients/{clientUuid}'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet client-level roles for the client that are in the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/composites/realm':\n    description: '/{realm}/roles/{role-name}/composites/realm'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nGet realm-level roles of the role's composite\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: role's name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/groups':\n    description: '/{realm}/roles/{role-name}/groups'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nbase path for managing realm-level roles of this realm\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/management/permissions':\n    description: '/{realm}/roles/{role-name}/management/permissions'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\\n\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/roles/{role-name}/users':\n    description: '/{realm}/roles/{role-name}/users'\n    get:\n      tags:\n        - RoleContainer\n      description: \"/\\nReturns a stream of users that have the specified role name.\\n\\n\\n\"\n      parameters:\n        - name: first\n          in: query\n          description: 'first result to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          description: 'maximum number of results to return. Ignored if negative or {@code null}.'\n          schema:\n            type: integer\n            format: int32\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: role-name\n        in: path\n        description: the role name.\n        required: true\n        schema:\n          type: string\n  '/{realm}/sessions/{session}':\n    description: '/{realm}/sessions/{session}'\n    delete:\n      tags:\n        - RealmAdmin\n      description: \"/\\nRemove a specific user session. Any client that has an admin url will also be told to invalidate this\\nparticular session.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: session\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/testLDAPConnection':\n    description: '/{realm}/testLDAPConnection'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/testSMTPConnection':\n    description: '/{realm}/testSMTPConnection'\n    post:\n      tags:\n        - RealmAdmin\n      description: \"/\\nTest SMTP connection with current logged in user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/user-storage/{id}/name':\n    description: '/{realm}/user-storage/{id}/name'\n    get:\n      tags:\n        - UserStorageProvider\n      description: \"/\\nNeed this for admin console to display simple name of provider when displaying user detail\\n\\nKEYCLOAK-4328\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/user-storage/{id}/remove-imported-users':\n    description: '/{realm}/user-storage/{id}/remove-imported-users'\n    post:\n      tags:\n        - UserStorageProvider\n      description: \"/\\nRemove imported users\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/user-storage/{id}/sync':\n    description: '/{realm}/user-storage/{id}/sync'\n    post:\n      tags:\n        - UserStorageProvider\n      description: \"/\\nTrigger sync of users\\n\\nAction can be \\\"triggerFullSync\\\" or \\\"triggerChangedUsersSync\\\"\\n\\n\"\n      parameters:\n        - name: action\n          in: query\n          description: ''\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SynchronizationResult'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/user-storage/{id}/unlink-users':\n    description: '/{realm}/user-storage/{id}/unlink-users'\n    post:\n      tags:\n        - UserStorageProvider\n      description: \"/\\nUnlink imported users from a storage provider\\n\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        description: ''\n        required: true\n        schema:\n          type: string\n  '/{realm}/user-storage/{parentId}/mappers/{id}/sync':\n    description: '/{realm}/user-storage/{parentId}/mappers/{id}/sync'\n    post:\n      tags:\n        - UserStorageProvider\n      description: \"/\\nTrigger sync of mapper data related to ldap mapper (roles, groups, ...)\\n\\ndirection is \\\"fedToKeycloak\\\" or \\\"keycloakToFed\\\"\\n\\n\"\n      parameters:\n        - name: direction\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SynchronizationResult'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: parentId\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users':\n    description: '/{realm}/users'\n    post:\n      tags:\n        - Users\n      description: \"/\\nCreate a new user\\n\\nUsername must be unique.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - Users\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: lastName\n          in: query\n          schema:\n            type: string\n        - name: firstName\n          in: query\n          schema:\n            type: string\n        - name: email\n          in: query\n          schema:\n            type: string\n        - name: username\n          in: query\n          schema:\n            type: string\n        - name: emailVerified\n          in: query\n          schema:\n            type: boolean\n        - name: idpAlias\n          in: query\n          schema:\n            type: string\n        - name: idpUserId\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: enabled\n          in: query\n          schema:\n            type: boolean\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n        - name: q\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users-management-permissions':\n    description: '/{realm}/users-management-permissions'\n    get:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - RealmAdmin\n      description: \"/\\nBase path for the admin REST API for one particular realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}':\n    description: '/{realm}/users/{id}'\n    put:\n      tags:\n        - User\n      description: \"/\\nUpdate the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n      responses:\n        2XX:\n          description: Success\n    get:\n      tags:\n        - User\n      description: \"/\\nGet representation of the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    delete:\n      tags:\n        - User\n      description: \"/\\nDelete the user\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/configured-user-storage-credential-types':\n    description: '/{realm}/users/{id}/configured-user-storage-credential-types'\n    get:\n      tags:\n        - User\n      description: \"/\\nReturn credential types, which are provided by the user storage where user is stored. Returned values can contain for example \\\"password\\\", \\\"otp\\\" etc.\\nThis will always return empty list for \\\"local\\\" users, which are not backed by any user storage\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/consents':\n    description: '/{realm}/users/{id}/consents'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet consents granted by the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties:\n                    type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/consents/{client}':\n    description: '/{realm}/users/{id}/consents/{client}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nRevoke consent and offline tokens for particular client from user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        description: Client id\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials':\n    description: '/{realm}/users/{id}/credentials'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}':\n    description: '/{realm}/users/{id}/credentials/{credentialId}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nRemove a credential for a user\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}'\n    post:\n      tags:\n        - User\n      description: \"/\\nMove a credential to a position behind another credential\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n      - name: newPreviousCredentialId\n        in: path\n        description: 'The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.'\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst'\n    post:\n      tags:\n        - User\n      description: \"/\\nMove a credential to a first position in the credentials list of the user\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/credentials/{credentialId}/userLabel':\n    description: '/{realm}/users/{id}/credentials/{credentialId}/userLabel'\n    put:\n      tags:\n        - User\n      description: \"/\\nUpdate a credential label for a user\\n/\\n\"\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: credentialId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/disable-credential-types':\n    description: '/{realm}/users/{id}/disable-credential-types'\n    put:\n      tags:\n        - User\n      description: \"/\\nDisable all credentials for a user of a specific type\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/execute-actions-email':\n    description: '/{realm}/users/{id}/execute-actions-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend a update account email to the user\\n\\nAn email contains a link the user can click to perform a set of required actions.\\nThe redirectUri and clientId parameters are optional. If no redirect is given, then there will\\nbe no link back to click after actions have completed.  Redirect uri must be a valid uri for the\\nparticular clientId.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: Redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: Client id\n          schema:\n            type: string\n        - name: lifespan\n          in: query\n          description: Number of seconds after which the generated token expires\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/federated-identity':\n    description: '/{realm}/users/{id}/federated-identity'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet social logins associated with the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FederatedIdentityRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/federated-identity/{provider}':\n    description: '/{realm}/users/{id}/federated-identity/{provider}'\n    post:\n      tags:\n        - User\n      description: \"/\\nAdd a social login provider to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedIdentityRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - User\n      description: \"/\\nRemove a social login provider from user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: provider\n        in: path\n        description: Social login provider id\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups':\n    description: '/{realm}/users/{id}/groups'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: first\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: max\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - name: briefRepresentation\n          in: query\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups/{groupId}':\n    description: '/{realm}/users/{id}/groups/{groupId}'\n    delete:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    put:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: groupId\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/groups/count':\n    description: '/{realm}/users/{id}/groups/count'\n    get:\n      tags:\n        - User\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int64\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/impersonation':\n    description: '/{realm}/users/{id}/impersonation'\n    post:\n      tags:\n        - User\n      description: \"/\\nImpersonate the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/logout':\n    description: '/{realm}/users/{id}/logout'\n    post:\n      tags:\n        - User\n      description: \"/\\nRemove all user sessions associated with the user\\n\\nAlso send notification to all clients that have an admin URL to invalidate the sessions for the particular user.\\n\\n/\\n\"\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/offline-sessions/{clientUuid}':\n    description: '/{realm}/users/{id}/offline-sessions/{clientUuid}'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet offline sessions associated with the user and client\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: clientUuid\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/reset-password':\n    description: '/{realm}/users/{id}/reset-password'\n    put:\n      tags:\n        - User\n      description: \"/\\nSet up a new password for the user.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CredentialRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/reset-password-email':\n    description: '/{realm}/users/{id}/reset-password-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend an email to the user with a link they can click to reset their password.\\nThe redirectUri and clientId parameters are optional. The default for the\\nredirect is the account client.\\n\\nThis endpoint has been deprecated.  Please use the execute-actions-email passing a list with\\nUPDATE_PASSWORD within it.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: client id\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings':\n    description: '/{realm}/users/{id}/role-mappings'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet client-level role mappings for the user, and the app\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nAdd client-level roles to the user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nDelete client-level roles from user role mapping\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}/available':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}/available'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet available client-level roles that can be mapped to the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/clients/{client}/composite':\n    description: '/{realm}/users/{id}/role-mappings/clients/{client}/composite'\n    get:\n      tags:\n        - ClientRoleMappings\n      description: \"/\\nGet effective client-level role mappings\\n\\nThis recurses any composite roles\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: client\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm':\n    description: '/{realm}/users/{id}/role-mappings/realm'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level role mappings\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    post:\n      tags:\n        - RoleMapper\n      description: \"/\\nAdd realm-level role mappings to the user\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    delete:\n      tags:\n        - RoleMapper\n      description: \"/\\nDelete realm-level role mappings\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm/available':\n    description: '/{realm}/users/{id}/role-mappings/realm/available'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet realm-level roles that can be mapped\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/role-mappings/realm/composite':\n    description: '/{realm}/users/{id}/role-mappings/realm/composite'\n    get:\n      tags:\n        - RoleMapper\n      description: \"/\\nGet effective realm-level role mappings\\n\\nThis will recurse all composite roles to get the result.\\n\\n\"\n      parameters:\n        - name: briefRepresentation\n          in: query\n          description: 'if false, return roles with their attributes'\n          schema:\n            type: boolean\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/send-verify-email':\n    description: '/{realm}/users/{id}/send-verify-email'\n    put:\n      tags:\n        - User\n      description: \"/\\nSend an email-verification email to the user\\n\\nAn email contains a link the user can click to verify their email address.\\nThe redirectUri and clientId parameters are optional. The default for the\\nredirect is the account client.\\n\\n\"\n      parameters:\n        - name: OIDCLoginProtocol.REDIRECT_URI_PARAM\n          in: query\n          description: Redirect uri\n          schema:\n            type: string\n        - name: OIDCLoginProtocol.CLIENT_ID_PARAM\n          in: query\n          description: Client id\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/{id}/sessions':\n    description: '/{realm}/users/{id}/sessions'\n    get:\n      tags:\n        - User\n      description: \"/\\nGet sessions associated with the user\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSessionRepresentation'\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/count':\n    description: '/{realm}/users/count'\n    get:\n      tags:\n        - Users\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: lastName\n          in: query\n          schema:\n            type: string\n        - name: firstName\n          in: query\n          schema:\n            type: string\n        - name: email\n          in: query\n          schema:\n            type: string\n        - name: emailVerified\n          in: query\n          schema:\n            type: boolean\n        - name: username\n          in: query\n          schema:\n            type: string\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n  '/{realm}/users/profile':\n    description: '/{realm}/users/profile'\n    get:\n      tags:\n        - UserProfile\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      responses:\n        2XX:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      tags:\n        - UserProfile\n      description: \"/\\nBase path for managing users in this realm.\\n\\n\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        2XX:\n          description: Success\n    parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\ncomponents:\n  schemas:\n    AbstractAuthenticationExecutionRepresentation:\n      type: object\n      properties:\n        AuthenticatorConfig:\n          type: string\n        Authenticator:\n          type: string\n        Requirement:\n          type: string\n        Priority:\n          type: integer\n          format: int32\n        AutheticatorFlow:\n          type: boolean\n        AuthenticatorFlow:\n          type: boolean\n    AuthDetailsRepresentation:\n      type: object\n      properties:\n        RealmId:\n          type: string\n        ClientId:\n          type: string\n        UserId:\n          type: string\n        IpAddress:\n          type: string\n    AuthenticationExecutionExportRepresentation:\n      type: object\n      properties:\n        UserSetupAllowed:\n          type: boolean\n        FlowAlias:\n          type: string\n    AuthenticationExecutionInfoRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        DisplayName:\n          type: string\n        Alias:\n          type: string\n        Description:\n          type: string\n        Requirement:\n          type: string\n        RequirementChoices:\n          type: array\n          items:\n            type: string\n        Configurable:\n          type: boolean\n        ProviderId:\n          type: string\n        AuthenticationConfig:\n          type: string\n        AuthenticationFlow:\n          type: boolean\n        Level:\n          type: integer\n          format: int32\n        Index:\n          type: integer\n          format: int32\n        FlowId:\n          type: string\n    AuthenticationExecutionRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        FlowId:\n          type: string\n        ParentFlow:\n          type: string\n    AuthenticationFlowRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Alias:\n          type: string\n        Description:\n          type: string\n        ProviderId:\n          type: string\n        TopLevel:\n          type: boolean\n        BuiltIn:\n          type: boolean\n        AuthenticationExecutions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'\n    AuthenticatorConfigRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Alias:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    CertificateRepresentation:\n      type: object\n      properties:\n        PrivateKey:\n          type: string\n        PublicKey:\n          type: string\n        Certificate:\n          type: string\n        Kid:\n          type: string\n    ClaimRepresentation:\n      type: object\n      properties:\n        Name:\n          type: boolean\n        Username:\n          type: boolean\n        Profile:\n          type: boolean\n        Picture:\n          type: boolean\n        Website:\n          type: boolean\n        Email:\n          type: boolean\n        Gender:\n          type: boolean\n        Locale:\n          type: boolean\n        Address:\n          type: boolean\n        Phone:\n          type: boolean\n    ClientInitialAccessCreatePresentation:\n      type: object\n      properties:\n        Expiration:\n          type: integer\n          format: int32\n        Count:\n          type: integer\n          format: int32\n    ClientInitialAccessPresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Token:\n          type: string\n        Timestamp:\n          type: integer\n          format: int32\n        Expiration:\n          type: integer\n          format: int32\n        Count:\n          type: integer\n          format: int32\n        RemainingCount:\n          type: integer\n          format: int32\n    ClientPoliciesRepresentation:\n      type: object\n      properties:\n        Policies:\n          type: array\n          items:\n            type: object\n            description: ClientPolicyRepresentation\n    ClientPolicyConditionConfigurationRepresentation:\n      type: object\n      properties:\n        NegativeLogic:\n          type: boolean\n        ConfigAsMap:\n          type: object\n          additionalProperties:\n            type: object\n    ClientPolicyConditionRepresentation:\n      type: object\n      properties:\n        ConditionProviderId:\n          type: string\n        Configuration:\n          type: object\n    ClientPolicyExecutorConfigurationRepresentation:\n      type: object\n      properties:\n        ConfigAsMap:\n          type: object\n          additionalProperties:\n            type: object\n    ClientPolicyExecutorRepresentation:\n      type: object\n      properties:\n        ExecutorProviderId:\n          type: string\n        Configuration:\n          type: object\n    ClientProfileRepresentation:\n      type: object\n      properties:\n        Name:\n          type: string\n        Description:\n          type: string\n        Executors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'\n    ClientProfilesRepresentation:\n      type: object\n      properties:\n        Profiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n        GlobalProfiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n    ComponentExportRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        ProviderId:\n          type: string\n        SubType:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n        SubComponents:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ComponentExportRepresentation'\n    ComponentRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        ProviderId:\n          type: string\n        ProviderType:\n          type: string\n        ParentId:\n          type: string\n        SubType:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    ConfigPropertyRepresentation:\n      type: object\n      properties:\n        Name:\n          type: string\n        Label:\n          type: string\n        Type:\n          type: string\n        DefaultValue:\n          type: object\n        HelpText:\n          type: string\n        Options:\n          type: array\n          items:\n            type: string\n        Secret:\n          type: boolean\n    CredentialRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Type:\n          type: string\n        UserLabel:\n          type: string\n        SecretData:\n          type: string\n        CredentialData:\n          type: string\n        Priority:\n          type: integer\n          format: int32\n        CreatedDate:\n          type: integer\n          format: int64\n        Value:\n          type: string\n        Temporary:\n          type: boolean\n        Device:\n          type: string\n        HashedSaltedValue:\n          type: string\n        Salt:\n          type: string\n        HashIterations:\n          type: integer\n          format: int32\n        Counter:\n          type: integer\n          format: int32\n        Algorithm:\n          type: string\n        Digits:\n          type: integer\n          format: int32\n        Period:\n          type: integer\n          format: int32\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    EventRepresentation:\n      type: object\n      properties:\n        Time:\n          type: integer\n          format: int64\n        Type:\n          type: string\n        RealmId:\n          type: string\n        ClientId:\n          type: string\n        UserId:\n          type: string\n        SessionId:\n          type: string\n        IpAddress:\n          type: string\n        Error:\n          type: string\n        Details:\n          type: object\n          additionalProperties:\n            type: string\n    FederatedIdentityRepresentation:\n      type: object\n      properties:\n        IdentityProvider:\n          type: string\n        UserId:\n          type: string\n        UserName:\n          type: string\n    GroupRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Path:\n          type: string\n        RealmRoles:\n          type: array\n          items:\n            type: string\n        ClientRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        Attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        SubGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        Access:\n          type: object\n          additionalProperties:\n            type: boolean\n    IdentityProviderMapperRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        IdentityProviderAlias:\n          type: string\n        IdentityProviderMapper:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    IdentityProviderMapperTypeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Category:\n          type: string\n        HelpText:\n          type: string\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    IdentityProviderRepresentation:\n      type: object\n      properties:\n        InternalId:\n          type: string\n        Alias:\n          type: string\n        ProviderId:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n        Enabled:\n          type: boolean\n        LinkOnly:\n          type: boolean\n        UpdateProfileFirstLoginMode:\n          type: string\n        AuthenticateByDefault:\n          type: boolean\n        FirstBrokerLoginFlowAlias:\n          type: string\n        PostBrokerLoginFlowAlias:\n          type: string\n        StoreToken:\n          type: boolean\n        AddReadTokenRoleOnCreate:\n          type: boolean\n        TrustEmail:\n          type: boolean\n        DisplayName:\n          type: string\n    KeyMetadataRepresentation:\n      type: object\n      properties:\n        ProviderId:\n          type: string\n        ProviderPriority:\n          type: integer\n          format: int64\n        Kid:\n          type: string\n        Status:\n          type: string\n        Type:\n          type: string\n        Algorithm:\n          type: string\n        PublicKey:\n          type: string\n        Certificate:\n          type: string\n        Use:\n          type: object\n          description: KeyUse\n    LDAPCapabilityRepresentation:\n      type: object\n      properties:\n        Oid:\n          type: string\n        Type:\n          type: object\n          description: CapabilityType\n    ManagementPermissionReference:\n      type: object\n      properties:\n        Enabled:\n          type: boolean\n        Resource:\n          type: string\n        ScopePermissions:\n          type: object\n          additionalProperties:\n            type: string\n    ManagementPermissionRepresentation:\n      type: object\n      properties:\n        Enabled:\n          type: boolean\n    OAuth2ErrorRepresentation:\n      type: object\n      properties:\n        Error:\n          type: string\n        ErrorDescription:\n          type: string\n    OAuthClientRepresentation:\n      type: object\n    PasswordPolicyTypeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        DisplayName:\n          type: string\n        ConfigType:\n          type: string\n        DefaultValue:\n          type: string\n        MultipleSupported:\n          type: boolean\n    ProtocolMapperRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Protocol:\n          type: string\n        ProtocolMapper:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n        ConsentRequired:\n          type: boolean\n        ConsentText:\n          type: string\n    ProtocolMapperTypeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Category:\n          type: string\n        HelpText:\n          type: string\n        Priority:\n          type: integer\n          format: int32\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    PublishedRealmRepresentation:\n      type: object\n      properties:\n        PublicKeyPem:\n          type: string\n        TokenServiceUrl:\n          type: string\n        AccountServiceUrl:\n          type: string\n        NotBefore:\n          type: integer\n          format: int32\n    RealmEventsConfigRepresentation:\n      type: object\n      properties:\n        EventsEnabled:\n          type: boolean\n        EventsExpiration:\n          type: integer\n          format: int64\n        EventsListeners:\n          type: array\n          items:\n            type: string\n        EnabledEventTypes:\n          type: array\n          items:\n            type: string\n        AdminEventsEnabled:\n          type: boolean\n        AdminEventsDetailsEnabled:\n          type: boolean\n    RequiredActionProviderRepresentation:\n      type: object\n      properties:\n        Alias:\n          type: string\n        Name:\n          type: string\n        Enabled:\n          type: boolean\n        DefaultAction:\n          type: boolean\n        ProviderId:\n          type: string\n        Priority:\n          type: integer\n          format: int32\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    RequiredActionProviderSimpleRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        ProviderId:\n          type: string\n    Composites:\n      type: object\n      properties:\n        Realm:\n          type: array\n          items:\n            type: string\n        Client:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        Application:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    ScopeMappingRepresentation:\n      type: object\n      properties:\n        Self:\n          type: string\n        Client:\n          type: string\n        ClientTemplate:\n          type: string\n        ClientScope:\n          type: string\n        Roles:\n          type: array\n          items:\n            type: string\n    SocialLinkRepresentation:\n      type: object\n      properties:\n        SocialProvider:\n          type: string\n        SocialUserId:\n          type: string\n        SocialUsername:\n          type: string\n    SynchronizationResultRepresentation:\n      type: object\n      properties:\n        Ignored:\n          type: boolean\n        Added:\n          type: integer\n          format: int32\n        Updated:\n          type: integer\n          format: int32\n        Removed:\n          type: integer\n          format: int32\n        Failed:\n          type: integer\n          format: int32\n        Status:\n          type: string\n    TestLdapConnectionRepresentation:\n      type: object\n      properties:\n        Action:\n          type: string\n        ConnectionUrl:\n          type: string\n        AuthType:\n          type: string\n        BindDn:\n          type: string\n        BindCredential:\n          type: string\n        UseTruststoreSpi:\n          type: string\n        ConnectionTimeout:\n          type: string\n        ComponentId:\n          type: string\n        StartTls:\n          type: string\n    UserConsentRepresentation:\n      type: object\n      properties:\n        ClientId:\n          type: string\n        GrantedClientScopes:\n          type: array\n          items:\n            type: string\n        CreatedDate:\n          type: integer\n          format: int64\n        LastUpdatedDate:\n          type: integer\n          format: int64\n        GrantedRealmRoles:\n          type: array\n          items:\n            type: string\n    UserFederationMapperRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        FederationProviderDisplayName:\n          type: string\n        FederationMapperType:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    UserFederationMapperSyncConfigRepresentation:\n      type: object\n      properties:\n        FedToKeycloakSyncSupported:\n          type: boolean\n        FedToKeycloakSyncMessage:\n          type: string\n        KeycloakToFedSyncSupported:\n          type: boolean\n        KeycloakToFedSyncMessage:\n          type: string\n    UserFederationMapperTypeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Category:\n          type: string\n        HelpText:\n          type: string\n        SyncConfig:\n          $ref: '#/components/schemas/UserFederationMapperSyncConfigRepresentation'\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n        DefaultConfig:\n          type: object\n          additionalProperties:\n            type: string\n    UserFederationProviderFactoryRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Options:\n          type: array\n          items:\n            type: string\n        HelpText:\n          type: string\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    UserFederationProviderRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        DisplayName:\n          type: string\n        ProviderName:\n          type: string\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n        Priority:\n          type: integer\n          format: int32\n        FullSyncPeriod:\n          type: integer\n          format: int32\n        ChangedSyncPeriod:\n          type: integer\n          format: int32\n        LastSync:\n          type: integer\n          format: int32\n    UserRepresentation:\n      type: object\n      properties:\n        Self:\n          type: string\n        Id:\n          type: string\n        CreatedTimestamp:\n          type: integer\n          format: int64\n        FirstName:\n          type: string\n        LastName:\n          type: string\n        Email:\n          type: string\n        Username:\n          type: string\n        Enabled:\n          type: boolean\n        Totp:\n          type: boolean\n        EmailVerified:\n          type: boolean\n        Attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        Credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/CredentialRepresentation'\n        RequiredActions:\n          type: array\n          items:\n            type: string\n        FederatedIdentities:\n          type: array\n          items:\n            $ref: '#/components/schemas/FederatedIdentityRepresentation'\n        SocialLinks:\n          type: array\n          items:\n            $ref: '#/components/schemas/SocialLinkRepresentation'\n        RealmRoles:\n          type: array\n          items:\n            type: string\n        ClientRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        ClientConsents:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserConsentRepresentation'\n        NotBefore:\n          type: integer\n          format: int32\n        ApplicationRoles:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        FederationLink:\n          type: string\n        ServiceAccountClientId:\n          type: string\n        Groups:\n          type: array\n          items:\n            type: string\n        Origin:\n          type: string\n        DisableableCredentialTypes:\n          type: array\n          items:\n            type: string\n        Access:\n          type: object\n          additionalProperties:\n            type: boolean\n    UserSessionRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Username:\n          type: string\n        UserId:\n          type: string\n        IpAddress:\n          type: string\n        Start:\n          type: integer\n          format: int64\n        LastAccess:\n          type: integer\n          format: int64\n        Clients:\n          type: object\n          additionalProperties:\n            type: string\n    Access:\n      type: object\n      properties:\n        Roles:\n          type: array\n          items:\n            type: string\n        VerifyCaller:\n          type: boolean\n    CertConf:\n      type: object\n      properties:\n        CertThumbprint:\n          type: string\n    AccessTokenResponse:\n      type: object\n      properties:\n        Scope:\n          type: string\n        Token:\n          type: string\n        ExpiresIn:\n          type: integer\n          format: int64\n        RefreshExpiresIn:\n          type: integer\n          format: int64\n        RefreshToken:\n          type: string\n        TokenType:\n          type: string\n        IdToken:\n          type: string\n        NotBeforePolicy:\n          type: integer\n          format: int32\n        SessionState:\n          type: string\n        OtherClaims:\n          type: object\n          additionalProperties:\n            type: object\n        Error:\n          type: string\n        ErrorDescription:\n          type: string\n        ErrorUri:\n          type: string\n    AddressClaimSet:\n      type: object\n      properties:\n        FormattedAddress:\n          type: string\n        StreetAddress:\n          type: string\n        Locality:\n          type: string\n        Region:\n          type: string\n        PostalCode:\n          type: string\n        Country:\n          type: string\n    AuthorizationResponseToken:\n      type: object\n      properties:\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    IDToken:\n      type: object\n      properties:\n        Nonce:\n          type: string\n        Auth_time:\n          type: integer\n          format: int64\n        SessionId:\n          type: string\n        SessionState:\n          type: string\n        AccessTokenHash:\n          type: string\n        CodeHash:\n          type: string\n        Name:\n          type: string\n        GivenName:\n          type: string\n        FamilyName:\n          type: string\n        MiddleName:\n          type: string\n        NickName:\n          type: string\n        PreferredUsername:\n          type: string\n        Profile:\n          type: string\n        Picture:\n          type: string\n        Website:\n          type: string\n        Email:\n          type: string\n        EmailVerified:\n          type: boolean\n        Gender:\n          type: string\n        Birthdate:\n          type: string\n        Zoneinfo:\n          type: string\n        Locale:\n          type: string\n        PhoneNumber:\n          type: string\n        PhoneNumberVerified:\n          type: boolean\n        Address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        UpdatedAt:\n          type: integer\n          format: int64\n        ClaimsLocales:\n          type: string\n        Acr:\n          type: string\n        StateHash:\n          type: string\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    JsonWebToken:\n      type: object\n      properties:\n        Id:\n          type: string\n        Exp:\n          type: integer\n          format: int64\n        Nbf:\n          type: integer\n          format: int64\n        Iat:\n          type: integer\n          format: int64\n        Issuer:\n          type: string\n        suer:\n          $ref: '#/components/schemas/JsonWebToken'\n        Subject:\n          type: string\n        Type:\n          type: string\n        IssuedFor:\n          type: string\n        suedFor:\n          $ref: '#/components/schemas/JsonWebToken'\n        OtherClaims:\n          type: object\n          additionalProperties:\n            type: object\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    KeyStoreConfig:\n      type: object\n      properties:\n        RealmCertificate:\n          type: boolean\n        StorePassword:\n          type: string\n        KeyPassword:\n          type: string\n        KeyAlias:\n          type: string\n        RealmAlias:\n          type: string\n        Format:\n          type: string\n    LogoutToken:\n      type: object\n      properties:\n        Events:\n          type: object\n          additionalProperties:\n            type: object\n        Sid:\n          type: string\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    OAuth2DeviceAuthorizationResponse:\n      type: object\n      properties:\n        DeviceCode:\n          type: string\n        UserCode:\n          type: string\n        VerificationUri:\n          type: string\n        VerificationUriComplete:\n          type: string\n        ExpiresIn:\n          type: integer\n          format: int64\n        Interval:\n          type: integer\n          format: int64\n    RefreshToken:\n      type: object\n      properties:\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    UserInfo:\n      type: object\n      properties:\n        Issuer:\n          type: string\n        Subject:\n          type: string\n        Name:\n          type: string\n        GivenName:\n          type: string\n        FamilyName:\n          type: string\n        MiddleName:\n          type: string\n        NickName:\n          type: string\n        PreferredUsername:\n          type: string\n        Profile:\n          type: string\n        Picture:\n          type: string\n        Website:\n          type: string\n        Email:\n          type: string\n        EmailVerified:\n          type: boolean\n        Gender:\n          type: string\n        Birthdate:\n          type: string\n        Zoneinfo:\n          type: string\n        Locale:\n          type: string\n        PhoneNumber:\n          type: string\n        PhoneNumberVerified:\n          type: boolean\n        Address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        UpdatedAt:\n          type: integer\n          format: int64\n        Sub:\n          type: string\n        ClaimsLocales:\n          type: string\n        OtherClaims:\n          type: object\n          additionalProperties:\n            type: object\n    VersionRepresentation:\n      type: object\n      properties:\n        Version:\n          type: string\n        BuildTime:\n          type: string\n    SynchronizationResult:\n      type: object\n      properties:\n        Ignored:\n          type: boolean\n        Added:\n          type: integer\n          format: int32\n        Updated:\n          type: integer\n          format: int32\n        Removed:\n          type: integer\n          format: int32\n        Failed:\n          type: integer\n          format: int32\n        Status:\n          type: string\n    ProtocolMapperEvaluationRepresentation:\n      type: object\n      properties:\n        MapperId:\n          type: string\n        MapperName:\n          type: string\n        ContainerId:\n          type: string\n        ContainerName:\n          type: string\n        ContainerType:\n          type: string\n        ProtocolMapper:\n          type: string\n    Permission:\n      type: object\n      properties:\n        ResourceId:\n          type: string\n        ResourceName:\n          type: string\n        Scopes:\n          type: array\n          items:\n            type: string\n        Claims:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    AggregatePolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n    ClientScopeDefinition:\n      type: object\n      properties:\n        Id:\n          type: string\n        Required:\n          type: boolean\n    GroupDefinition:\n      type: object\n      properties:\n        Id:\n          type: string\n        Path:\n          type: string\n        ExtendChildren:\n          type: boolean\n    JSPolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        Code:\n          type: string\n    PermissionTicketRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Owner:\n          type: string\n        Resource:\n          type: string\n        Scope:\n          type: string\n        Granted:\n          type: boolean\n        ScopeName:\n          type: string\n        ResourceName:\n          type: string\n        RequesterName:\n          type: string\n        Requester:\n          type: string\n        OwnerName:\n          type: string\n    PolicyProviderRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        Name:\n          type: string\n        Group:\n          type: string\n    PolicyRepresentation:\n      type: object\n      properties:\n        Config:\n          type: object\n          additionalProperties:\n            type: string\n    RegexPolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        TargetClaim:\n          type: string\n        Pattern:\n          type: string\n    ResourceOwnerRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n    ResourcePermissionRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        ResourceType:\n          type: string\n    RoleDefinition:\n      type: object\n      properties:\n        Id:\n          type: string\n        Required:\n          type: boolean\n    ScopePermissionRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        ResourceType:\n          type: string\n    TimePolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        NotBefore:\n          type: string\n        NotOnOrAfter:\n          type: string\n        DayMonth:\n          type: string\n        DayMonthEnd:\n          type: string\n        Month:\n          type: string\n        MonthEnd:\n          type: string\n        Year:\n          type: string\n        YearEnd:\n          type: string\n        Hour:\n          type: string\n        HourEnd:\n          type: string\n        Minute:\n          type: string\n        MinuteEnd:\n          type: string\n    UmaPermissionRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        Roles:\n          type: array\n          items:\n            type: string\n        Groups:\n          type: array\n          items:\n            type: string\n        Clients:\n          type: array\n          items:\n            type: string\n        Users:\n          type: array\n          items:\n            type: string\n        Condition:\n          type: string\n    UserPolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        Users:\n          type: array\n          items:\n            type: string\n    AdminEventRepresentation:\n      type: object\n      properties:\n        Time:\n          type: integer\n          format: int64\n        RealmId:\n          type: string\n        AuthDetails:\n          $ref: '#/components/schemas/AuthDetailsRepresentation'\n        OperationType:\n          type: string\n        ResourceType:\n          type: string\n        ResourcePath:\n          type: string\n        Representation:\n          type: string\n        Error:\n          type: string\n    ApplicationRepresentation:\n      type: object\n      properties:\n        Name:\n          type: string\n        Claims:\n          $ref: '#/components/schemas/ClaimRepresentation'\n    AuthenticatorConfigInfoRepresentation:\n      type: object\n      properties:\n        Name:\n          type: string\n        HelpText:\n          type: string\n        ProviderId:\n          type: string\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n    ClientScopeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Description:\n          type: string\n        ProtocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        Protocol:\n          type: string\n        Attributes:\n          type: object\n          additionalProperties:\n            type: string\n    ClientTemplateRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Description:\n          type: string\n        ProtocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        Protocol:\n          type: string\n        FullScopeAllowed:\n          type: boolean\n        BearerOnly:\n          type: boolean\n        ConsentRequired:\n          type: boolean\n        StandardFlowEnabled:\n          type: boolean\n        ImplicitFlowEnabled:\n          type: boolean\n        DirectAccessGrantsEnabled:\n          type: boolean\n        ServiceAccountsEnabled:\n          type: boolean\n        PublicClient:\n          type: boolean\n        FrontchannelLogout:\n          type: boolean\n        Attributes:\n          type: object\n          additionalProperties:\n            type: string\n    ComponentTypeRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        HelpText:\n          type: string\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n        Metadata:\n          type: object\n          additionalProperties:\n            type: object\n    KeysMetadataRepresentation:\n      type: object\n      properties:\n        Active:\n          type: object\n          additionalProperties:\n            type: string\n        Keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/KeyMetadataRepresentation'\n    RoleRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Description:\n          type: string\n        ScopeParamRequired:\n          type: boolean\n        Composites:\n          $ref: '#/components/schemas/Composites'\n        Composite:\n          type: boolean\n        ClientRole:\n          type: boolean\n        ContainerId:\n          type: string\n        Attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    RolesRepresentation:\n      type: object\n      properties:\n        Realm:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n        Client:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/RoleRepresentation'\n        Application:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/RoleRepresentation'\n    Authorization:\n      type: object\n      properties:\n        Permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    ClientScopePolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        ClientScopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientScopeDefinition'\n    GroupPolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        GroupsClaim:\n          type: string\n        Groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupDefinition'\n    RolePolicyRepresentation:\n      type: object\n      properties:\n        Type:\n          type: string\n        Roles:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleDefinition'\n    ClientMappingsRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Client:\n          type: string\n        Mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n    MappingsRepresentation:\n      type: object\n      properties:\n        RealmMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n        ClientMappings:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ClientMappingsRepresentation'\n    AccessToken:\n      type: object\n      properties:\n        suedAt:\n          $ref: '#/components/schemas/AccessToken'\n        suer:\n          $ref: '#/components/schemas/AccessToken'\n        AllowedOrigins:\n          type: array\n          items:\n            type: string\n        RealmAccess:\n          $ref: '#/components/schemas/Access'\n        TrustedCertificates:\n          type: array\n          items:\n            type: string\n        suedFor:\n          $ref: '#/components/schemas/AccessToken'\n        Authorization:\n          $ref: '#/components/schemas/Authorization'\n        CertConf:\n          $ref: '#/components/schemas/CertConf'\n        Scope:\n          type: string\n        Category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n          type: string\n          description: TokenCategory\n    ClientRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        Description:\n          type: string\n        ClientId:\n          type: string\n        Enabled:\n          type: boolean\n        AlwaysDisplayInConsole:\n          type: boolean\n        SurrogateAuthRequired:\n          type: boolean\n        RootUrl:\n          type: string\n        AdminUrl:\n          type: string\n        BaseUrl:\n          type: string\n        ClientAuthenticatorType:\n          type: string\n        Secret:\n          type: string\n        RegistrationAccessToken:\n          type: string\n        RedirectUris:\n          type: array\n          items:\n            type: string\n        WebOrigins:\n          type: array\n          items:\n            type: string\n        DefaultRoles:\n          type: array\n          items:\n            type: string\n        NotBefore:\n          type: integer\n          format: int32\n        BearerOnly:\n          type: boolean\n        ConsentRequired:\n          type: boolean\n        StandardFlowEnabled:\n          type: boolean\n        ImplicitFlowEnabled:\n          type: boolean\n        DirectAccessGrantsEnabled:\n          type: boolean\n        ServiceAccountsEnabled:\n          type: boolean\n        AuthorizationServicesEnabled:\n          type: boolean\n        DirectGrantsOnly:\n          type: boolean\n        PublicClient:\n          type: boolean\n        FullScopeAllowed:\n          type: boolean\n        Protocol:\n          type: string\n        Attributes:\n          type: object\n          additionalProperties:\n            type: string\n        AuthenticationFlowBindingOverrides:\n          type: object\n          additionalProperties:\n            type: string\n        NodeReRegistrationTimeout:\n          type: integer\n          format: int32\n        RegisteredNodes:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        FrontchannelLogout:\n          type: boolean\n        ProtocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        ClientTemplate:\n          type: string\n        UseTemplateConfig:\n          type: boolean\n        UseTemplateScope:\n          type: boolean\n        UseTemplateMappers:\n          type: boolean\n        DefaultClientScopes:\n          type: array\n          items:\n            type: string\n        OptionalClientScopes:\n          type: array\n          items:\n            type: string\n        AuthorizationSettings:\n          $ref: '#/components/schemas/ResourceServerRepresentation'\n        Access:\n          type: object\n          additionalProperties:\n            type: boolean\n        Origin:\n          type: string\n    PartialImportRepresentation:\n      type: object\n      properties:\n        IfResourceExists:\n          type: string\n        Policy:\n          type: object\n          description: Policy\n        Users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        Clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        Groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        IdentityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        Roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n    RealmRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Realm:\n          type: string\n        DisplayName:\n          type: string\n        DisplayNameHtml:\n          type: string\n        Users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        Applications:\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationRepresentation'\n        Clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        Enabled:\n          type: boolean\n        SslRequired:\n          type: string\n        DefaultSignatureAlgorithm:\n          type: string\n        RevokeRefreshToken:\n          type: boolean\n        RefreshTokenMaxReuse:\n          type: integer\n          format: int32\n        AccessTokenLifespan:\n          type: integer\n          format: int32\n        AccessTokenLifespanForImplicitFlow:\n          type: integer\n          format: int32\n        SsoSessionIdleTimeout:\n          type: integer\n          format: int32\n        SsoSessionMaxLifespan:\n          type: integer\n          format: int32\n        SsoSessionMaxLifespanRememberMe:\n          type: integer\n          format: int32\n        SsoSessionIdleTimeoutRememberMe:\n          type: integer\n          format: int32\n        OfflineSessionIdleTimeout:\n          type: integer\n          format: int32\n        OfflineSessionMaxLifespanEnabled:\n          type: boolean\n        OfflineSessionMaxLifespan:\n          type: integer\n          format: int32\n        ClientSessionIdleTimeout:\n          type: integer\n          format: int32\n        ClientSessionMaxLifespan:\n          type: integer\n          format: int32\n        ClientOfflineSessionIdleTimeout:\n          type: integer\n          format: int32\n        ClientOfflineSessionMaxLifespan:\n          type: integer\n          format: int32\n        ScopeMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeMappingRepresentation'\n        RequiredCredentials:\n          type: array\n          items:\n            type: string\n        PasswordPolicy:\n          type: string\n        AccessCodeLifespan:\n          type: integer\n          format: int32\n        AccessCodeLifespanUserAction:\n          type: integer\n          format: int32\n        AccessCodeLifespanLogin:\n          type: integer\n          format: int32\n        ActionTokenGeneratedByAdminLifespan:\n          type: integer\n          format: int32\n        OAuth2DeviceCodeLifespan:\n          type: integer\n          format: int32\n        OAuth2DevicePollingInterval:\n          type: integer\n          format: int32\n        ActionTokenGeneratedByUserLifespan:\n          type: integer\n          format: int32\n        DefaultRoles:\n          type: array\n          items:\n            type: string\n        DefaultRole:\n          $ref: '#/components/schemas/RoleRepresentation'\n        DefaultGroups:\n          type: array\n          items:\n            type: string\n        PrivateKey:\n          type: string\n        PublicKey:\n          type: string\n        Certificate:\n          type: string\n        CodeSecret:\n          type: string\n        PasswordCredentialGrantAllowed:\n          type: boolean\n        RegistrationAllowed:\n          type: boolean\n        RegistrationEmailAsUsername:\n          type: boolean\n        RememberMe:\n          type: boolean\n        VerifyEmail:\n          type: boolean\n        LoginWithEmailAllowed:\n          type: boolean\n        DuplicateEmailsAllowed:\n          type: boolean\n        ResetPasswordAllowed:\n          type: boolean\n        EditUsernameAllowed:\n          type: boolean\n        Social:\n          type: boolean\n        UpdateProfileOnInitialSocialLogin:\n          type: boolean\n        BrowserSecurityHeaders:\n          type: object\n          additionalProperties:\n            type: string\n        SocialProviders:\n          type: object\n          additionalProperties:\n            type: string\n        SmtpServer:\n          type: object\n          additionalProperties:\n            type: string\n        OauthClients:\n          type: array\n          items:\n            $ref: '#/components/schemas/OAuthClientRepresentation'\n        ClientScopeMappings:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ScopeMappingRepresentation'\n        ApplicationScopeMappings:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/ScopeMappingRepresentation'\n        Roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n        LoginTheme:\n          type: string\n        AccountTheme:\n          type: string\n        AdminTheme:\n          type: string\n        EmailTheme:\n          type: string\n        NotBefore:\n          type: integer\n          format: int32\n        BruteForceProtected:\n          type: boolean\n        PermanentLockout:\n          type: boolean\n        MaxFailureWaitSeconds:\n          type: integer\n          format: int32\n        MinimumQuickLoginWaitSeconds:\n          type: integer\n          format: int32\n        WaitIncrementSeconds:\n          type: integer\n          format: int32\n        QuickLoginCheckMilliSeconds:\n          type: integer\n          format: int64\n        MaxDeltaTimeSeconds:\n          type: integer\n          format: int32\n        FailureFactor:\n          type: integer\n          format: int32\n        EventsEnabled:\n          type: boolean\n        EventsExpiration:\n          type: integer\n          format: int64\n        EventsListeners:\n          type: array\n          items:\n            type: string\n        EnabledEventTypes:\n          type: array\n          items:\n            type: string\n        AdminEventsEnabled:\n          type: boolean\n        AdminEventsDetailsEnabled:\n          type: boolean\n        UserFederationProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationProviderRepresentation'\n        UserFederationMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationMapperRepresentation'\n        IdentityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        ProtocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        InternationalizationEnabled:\n          type: boolean\n        SupportedLocales:\n          type: array\n          items:\n            type: string\n        DefaultLocale:\n          type: string\n        IdentityProviderMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        AuthenticationFlows:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n        AuthenticatorConfig:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n        RequiredActions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n        OtpPolicyType:\n          type: string\n        OtpPolicyAlgorithm:\n          type: string\n        OtpPolicyInitialCounter:\n          type: integer\n          format: int32\n        OtpPolicyDigits:\n          type: integer\n          format: int32\n        OtpPolicyLookAheadWindow:\n          type: integer\n          format: int32\n        OtpPolicyPeriod:\n          type: integer\n          format: int32\n        OtpSupportedApplications:\n          type: array\n          items:\n            type: string\n        WebAuthnPolicyRpEntityName:\n          type: string\n        WebAuthnPolicySignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        WebAuthnPolicyRpId:\n          type: string\n        WebAuthnPolicyAttestationConveyancePreference:\n          type: string\n        WebAuthnPolicyAuthenticatorAttachment:\n          type: string\n        WebAuthnPolicyRequireResidentKey:\n          type: string\n        WebAuthnPolicyUserVerificationRequirement:\n          type: string\n        WebAuthnPolicyCreateTimeout:\n          type: integer\n          format: int32\n        WebAuthnPolicyAvoidSameAuthenticatorRegister:\n          type: boolean\n        WebAuthnPolicyAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        WebAuthnPolicyPasswordlessRpEntityName:\n          type: string\n        WebAuthnPolicyPasswordlessSignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        WebAuthnPolicyPasswordlessRpId:\n          type: string\n        WebAuthnPolicyPasswordlessAttestationConveyancePreference:\n          type: string\n        WebAuthnPolicyPasswordlessAuthenticatorAttachment:\n          type: string\n        WebAuthnPolicyPasswordlessRequireResidentKey:\n          type: string\n        WebAuthnPolicyPasswordlessUserVerificationRequirement:\n          type: string\n        WebAuthnPolicyPasswordlessCreateTimeout:\n          type: integer\n          format: int32\n        WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:\n          type: boolean\n        WebAuthnPolicyPasswordlessAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        BrowserFlow:\n          type: string\n        RegistrationFlow:\n          type: string\n        DirectGrantFlow:\n          type: string\n        ResetCredentialsFlow:\n          type: string\n        ClientAuthenticationFlow:\n          type: string\n        DockerAuthenticationFlow:\n          type: string\n        KeycloakVersion:\n          type: string\n        Groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        ClientTemplates:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientTemplateRepresentation'\n        ClientScopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientScopeRepresentation'\n        DefaultDefaultClientScopes:\n          type: array\n          items:\n            type: string\n        DefaultOptionalClientScopes:\n          type: array\n          items:\n            type: string\n        Components:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ComponentExportRepresentation'\n        Attributes:\n          type: object\n          additionalProperties:\n            type: string\n        FederatedUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        UserManagedAccessAllowed:\n          type: boolean\n    AbstractPolicyRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Type:\n          type: string\n        DecisionStrategy:\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n          type: string\n          description: DecisionStrategy\n        Logic:\n          enum:\n            - POSITIVE\n            - NEGATIVE\n          type: string\n          description: Logic\n        Name:\n          type: string\n        Description:\n          type: string\n        Policies:\n          type: array\n          items:\n            type: string\n        Resources:\n          type: array\n          items:\n            type: string\n        Scopes:\n          type: array\n          items:\n            type: string\n        Owner:\n          type: string\n        ResourcesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        ScopesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n    ResourceRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        Name:\n          type: string\n        DisplayName:\n          type: string\n        Uris:\n          type: array\n          items:\n            type: string\n        Type:\n          type: string\n        Scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        IconUri:\n          type: string\n        Owner:\n          $ref: '#/components/schemas/ResourceOwnerRepresentation'\n        OwnerManagedAccess:\n          type: boolean\n        Attributes:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n    ResourceServerRepresentation:\n      type: object\n      properties:\n        Id:\n          type: string\n        ClientId:\n          type: string\n        Name:\n          type: string\n        AllowRemoteResourceManagement:\n          type: boolean\n        PolicyEnforcementMode:\n          enum:\n            - ENFORCING\n            - PERMISSIVE\n            - DISABLED\n          type: string\n          description: PolicyEnforcementMode\n        Resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        Policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        Scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        DecisionStrategy:\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n          type: string\n          description: DecisionStrategy\n    ScopeRepresentation:\n      type: object\n      properties:\n        Name:\n          type: string\n        DisplayName:\n          type: string\n        IconUri:\n          type: string\n        Id:\n          type: string\n        Policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        Resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n  securitySchemes:\n    access_token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - access_token: [ ]",
			"canonicalURL": "/github.com/dahag-ag/keycloak-openapi@a6eb1b4537a9a2f274713499c182d4900b224c71/-/blob/OpenApiDefinitions/keycloak-16.0.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dahag-ag/keycloak-openapi/blob/a6eb1b4537a9a2f274713499c182d4900b224c71/OpenApiDefinitions/keycloak-16.0.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/AccessToken\" name conflict: \"AccessToken\"",
	"NotImplemented": [
		"complex form schema"
	]
}