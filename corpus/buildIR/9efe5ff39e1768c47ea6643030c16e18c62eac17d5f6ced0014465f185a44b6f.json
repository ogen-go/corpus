{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/sakari.io/1.0.1/openapi.yaml",
			"byteSize": 81582,
			"content": "openapi: 3.0.0\nservers:\n  - description: Sakari Production\n    url: https://api.sakari.io/v1\ninfo:\n  contact:\n    email: support@sakari.io\n  description: |\n    # Introduction\n\n    Welcome to the documentation for the Sakari Messaging REST API. \n\n    Sakari provides an advanced platform to drive large scale customized SMS communication\n\n    REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.\n\n    To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).\n\n    # Quickstart\n\n    For your convenience we have created a quickstart guide to get you up and running in 5 minutes. \n\n    [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)\n\n    # PostMan Collection\n\n    We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information\n\n    [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)\n\n    # Finding your client id, client secret and account id\n\n    To authenticate against the API's you will need three key pieces of data\n     - client id\n     - client secret\n     - account id\n\n    To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"\n\n    # Versioning\n\n    With any breaking changes we will introduce a new version of the API. The latest version is v1.\n\n    The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.\n\n    # Testing\n\n    There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.\n\n    # Throttling / Limits\n\n    Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n\n    ```\n    {\n      \"success\": false,\n      \"error\": {\n        \"code\": \"CONT-001\",\n        \"message\": \"Invalid mobile number\"\n      }\n    }\n    ```\n\n    # Pagination\n\n    For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:\n\n    ```\n    {\n      \"pagination\": {\n        \"offset\": 0,\n        \"limit\": 10\n        \"totalCount\": 21\n      }  \n    }\n    ```\n\n    When making calls to the API, you can adjust the slice of data returned using query parameters such as:\n\n    `` https://api.sakari.io/v1/accounts/123/contacts?offset=20\u0026limit=25 ``\n\n    This will return 25 contacts with an offset of 20.\n  termsOfService: https://sakari.io/terms-service.html\n  title: Sakari\n  version: 1.0.1\n  x-apisguru-categories:\n    - messaging\n  x-logo:\n    url: https://sakari.io/wp-content/uploads/cropped-sakari-icon-512x512-180x180.png\n  x-origin:\n    - format: openapi\n      url: https://developer.sakari.io/openapi.yaml\n      version: \"3.0\"\n  x-providerName: sakari.io\nexternalDocs:\n  description: Find out more about Sakari\n  url: https://sakari.io\ntags:\n  - description: |\n      Sakari uses OAuth2 for authentication. After you have created an account at [https://hub.sakari.io](https://hub.sakari.io), you can retrieve your client id and secret from the 'Account Details' screen (click on the 'cog' icon in the top right corner and scroll down to API Credentials)\n\n      Using your client id and secret, you can exchange these for a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token))\n\n      The JWT should then be used when accessing any of the core API's. It should be passed in the `Authorization` header.\n\n      For example:\n\n      ``Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImt....``\n    name: authentication\n  - description: Create, modify or delete contacts\n    name: contacts\n  - description: Send or track messages to one contact, a group of contacts or your entire address book\n    name: messages\n  - description: Define reusable message or web templates\n    name: templates\n  - description: Define reusable message campaigns with a predefined contact list/filter, template and schedule\n    name: campaigns\n  - description: Conversations group your message history with each contact into one thread\n    name: conversations\n  - description: Tools to assist with sending and receiving messages, such as file sharing, translation, etc.\n    name: tools\n  - description: Webhooks allow your own system to be automatically notified upon certin events, such as a new message received from one of your contacts or a status change notification for your messages\n    name: webhooks\npaths:\n  \"/accounts/{accountId}/campaigns\":\n    get:\n      operationId: campaigns.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/nameFilter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CampaignsResponse\"\n          description: successful operation\n        4XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n        5XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n      security:\n        - sakari_auth: []\n      summary: Fetch campaigns\n      tags:\n        - campaigns\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    post:\n      operationId: campaigns.create\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CampaignRequest\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CampaignResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Create campaign\n      tags:\n        - campaigns\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"name\": \"Marketing Campaign\",\n              \"trigger\": {\n                \"code\":\"M\"\n              },\n              \"template\":\"Hi {{{contact.firstName}}}\",\n              \"reporting\":{\"when\":\"NoReport\"}\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body:\n               { name: 'Marketing Campaign',\n                 trigger: { code: 'M' },\n                 template: 'Hi {{{contact.firstName}}}',\n                 reporting: { when: 'NoReport' } },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"name\": \"Marketing Campaign\",\n                \"trigger\": {\n                  \"code\":\"M\"\n                },\n                \"template\":\"Hi {{{contact.firstName}}}\",\n                \"reporting\":{\"when\":\"NoReport\"}\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/campaigns/{campaignId}\":\n    delete:\n      operationId: campaigns.remove\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: Campaign id to delete\n          in: path\n          name: campaignId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  success:\n                    type: boolean\n                type: object\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Deletes a campaign\n      tags:\n        - campaigns\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X DELETE \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'DELETE',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n              $request-\u003esetMethod(HTTP_METH_DELETE);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    get:\n      operationId: campaigns.fetch\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of campaign to return\n          in: path\n          name: campaignId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CampaignResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch campaign by ID\n      tags:\n        - campaigns\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    put:\n      operationId: campaigns.update\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of campaign\n          in: path\n          name: campaignId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CampaignResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Updates a campaign\n      tags:\n        - campaigns\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"name\": \"Marketing Campaign\",\n              \"trigger\": {\n                \"code\":\"M\"\n              },\n              \"template\":\"Hi {{{contact.firstName}}}\",\n              \"reporting\":{\"when\":\"NoReport\"}\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body:\n               { name: 'Marketing Campaign',\n                 trigger: { code: 'M' },\n                 template: 'Hi {{{contact.firstName}}}',\n                 reporting: { when: 'NoReport' } },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"name\": \"Marketing Campaign\",\n                \"trigger\": {\n                  \"code\":\"M\"\n                },\n                \"template\":\"Hi {{{contact.firstName}}}\",\n                \"reporting\":{\"when\":\"NoReport\"}\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/contacts\":\n    get:\n      operationId: contacts.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/firstNameFilter\"\n        - $ref: \"#/components/parameters/lastNameFilter\"\n        - $ref: \"#/components/parameters/mobileFilter\"\n        - $ref: \"#/components/parameters/emailFilter\"\n        - $ref: \"#/components/parameters/tagsFilter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContactsResponse\"\n          description: successful operation\n        4XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n        5XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n      security:\n        - sakari_auth: []\n      summary: Fetch contacts\n      tags:\n        - contacts\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    post:\n      operationId: contacts.create\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: Determines how existing contacts with matching mobile numbers are treated\n          in: query\n          name: mergeStrategy\n          required: false\n          schema:\n            enum:\n              - append\n              - core\n              - remove\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ContactRequest\"\n          text/csv:\n            schema:\n              example: |\n                country,firstName,lastName,email,mobile,jobTitle,Address,City,State,ZipCode US,Joe,Bloggs,joebloggs@sakari.co,123-456-7890,mover,123 Text Street,San Francisco,CA,12345\n              type: string\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/ContactsResponse\"\n                  - $ref: \"#/components/schemas/ContactUploadResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Create contact\n      tags:\n        - contacts\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"firstName\": \"Chris\",\n              \"lastName\": \"Thomson\",\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n              headers: {\n                 Authorization: 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body:\n               { firstName: 'Chris',\n                 lastName: 'Thomson',\n                 mobile: { number: '+1234567890', country: 'US' } },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"firstName\": \"Chris\",\n                \"lastName\": \"Thomson\",\n                \"mobile\": {\n                  \"number\": \"+1234567890\",\n                  \"country\": \"US\"\n                }\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/contacts/{contactId}\":\n    delete:\n      operationId: contacts.remove\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: Contact id to delete\n          in: path\n          name: contactId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  success:\n                    type: boolean\n                type: object\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Deletes a contact\n      tags:\n        - contacts\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X DELETE \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'DELETE',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n              headers:\n               { 'Authorization': 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n              $request-\u003esetMethod(HTTP_METH_DELETE);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"firstName\": \"Chris\",\n                \"lastName\": \"Thomson\",\n                \"mobile\": {\n                  \"number\": \"+1234567890\",\n                  \"country\": \"US\"\n                }\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    get:\n      operationId: contacts.fetch\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of contact to return\n          in: path\n          name: contactId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContactResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch contact by ID\n      tags:\n        - contacts\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    put:\n      operationId: contacts.update\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of contact\n          in: path\n          name: contactId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContactResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Updates a contact\n      tags:\n        - contacts\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X PUT \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"firstName\": \"Bob\",\n              \"lastName\": \"Thomson\",\n              \"mobile\": {\n                \"number\": \"+1234567890\",\n                \"country\": \"US\"\n              }\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'PUT',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n              headers:\n               { 'Authorization': 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body:\n               { firstName: 'Bob',\n                 lastName: 'Thomson',\n                 mobile: { number: '+1234567890', country: 'US' } },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n              $request-\u003esetMethod(HTTP_METH_PUT);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"firstName\": \"Bob\",\n                \"lastName\": \"Thomson\",\n                \"mobile\": {\n                  \"number\": \"+1234567890\",\n                  \"country\": \"US\"\n                }\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/conversations\":\n    get:\n      operationId: conversations.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationsResponse\"\n          description: successful operation\n        4XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n        5XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n      security:\n        - sakari_auth: []\n      summary: Fetch conversations\n      tags:\n        - conversations\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/conversations/{conversationId}\":\n    get:\n      operationId: conversations.fetch\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of template to return\n          in: path\n          name: conversationId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch conversation by ID\n      tags:\n        - conversations\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/conversations/{conversationId}/close\":\n    put:\n      operationId: conversations.close\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of conversation\n          in: path\n          name: conversationId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Closes a conversation\n      tags:\n        - conversations\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close');\n              $request-\u003esetMethod(HTTP_METH_PUT);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"name\": \"Test Template\",\n                \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n                \"type\": \"SMS\"\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/messages\":\n    get:\n      operationId: messages.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/contactIdFilter\"\n        - $ref: \"#/components/parameters/conversationIdFilter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MessagesResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch messages\n      tags:\n        - messages\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var settings = {\n              \"async\": true,\n              \"crossDomain\": true,\n              \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages\",\n              \"method\": \"GET\",\n              \"headers\": {\n                \"Authorization\": \"Bearer {{TOKEN}}\"\n              }\n            }\n\n            $.ajax(settings).done(function (response) {\n              console.log(response);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    post:\n      operationId: messages.send\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SendMessagesRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SendMessagesResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Send Messages\n      tags:\n        - messages\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n              -H 'Accept: application/json' \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"contacts\": [{\n                \"mobile\": {\n                  \"number\": \"+1234567890\",\n                  \"country\": \"US\"\n                }\n              }],\n              \"template\": \"Congratulations! You just sent your first message\"\n            } '\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages',\n              headers:\n               { 'Authorization': 'Bearer {{TOKEN}}',\n                 Accept: 'application/json',\n                 'Content-Type': 'application/json' },\n              body:\n               { contacts: [ { mobile: { number: '+1234567890', country: 'US' } } ],\n                 template: 'Congratulations! You just sent your first message' },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Accept' =\u003e 'application/json',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"contacts\": [{\n                  \"mobile\": {\n                    \"number\": \"+1234567890\",\n                    \"country\": \"US\"\n                  }\n                }],\n                \"template\": \"Congratulations! You just sent your first message\"\n              } ');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/messages/{messageId}\":\n    get:\n      description: Returns a single messag\n      operationId: messages.fetch\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of message to return\n          in: path\n          name: messageId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MessageResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch message by id\n      tags:\n        - messages\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}',\n              headers:\n               { 'Authorization': 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/templates\":\n    get:\n      operationId: templates.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - $ref: \"#/components/parameters/offset\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/nameFilter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TemplatesResponse\"\n          description: successful operation\n        4XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n        5XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n      security:\n        - sakari_auth: []\n      summary: Fetch templates\n      tags:\n        - templates\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n              headers:\n               { 'Authorization': 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    post:\n      operationId: templates.create\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TemplateRequest\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TemplatesResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Create template\n      tags:\n        - templates\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"name\": \"Test Template\",\n              \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n              \"type\": \"SMS\"\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n              headers:\n               { 'Content-Type': 'application/json' },\n              body:\n               { name: 'Test Template',\n                 template: 'Hi {{ firstName }}, Welcome to Sakari!',\n                 type: 'SMS' },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"name\": \"Test Template\",\n                \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n                \"type\": \"SMS\"\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/templates/{templateId}\":\n    delete:\n      operationId: templates.remove\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: Template id to delete\n          in: path\n          name: templateId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  success:\n                    type: boolean\n                type: object\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Deletes a template\n      tags:\n        - templates\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X DELETE \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n\n            var options = { method: 'DELETE',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n              $request-\u003esetMethod(HTTP_METH_DELETE);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    get:\n      operationId: templates.fetch\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of template to return\n          in: path\n          name: templateId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TemplateResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch template by ID\n      tags:\n        - templates\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'GET',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' } };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    put:\n      operationId: templates.update\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: ID of template\n          in: path\n          name: templateId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TemplateResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Updates a template\n      tags:\n        - templates\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X PUT \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"name\": \"Test Template\",\n              \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n              \"type\": \"SMS\"\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n\n            var options = { method: 'PUT',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body:\n               { name: 'Test Template',\n                 template: 'Hi {{ firstName }}, Welcome to Sakari!',\n                 type: 'SMS' },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n              $request-\u003esetMethod(HTTP_METH_PUT);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"name\": \"Test Template\",\n                \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n                \"type\": \"SMS\"\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/webhooks\":\n    get:\n      description: When messages are acknowledge by carriers, a notification is sent to the specified URL\n      operationId: webhooks.fetchAll\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhooksResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Fetch active webhooks\n      tags:\n        - webhooks\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X GET \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -d '{\n              \"url\": \"https://requestbin.io\"\n            }'\n        - lang: JavaScript\n          source: |\n            var settings = {\n              \"async\": true,\n              \"crossDomain\": true,\n              \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks\",\n              \"method\": \"GET\",\n              \"headers\": {\n                \"Authorization\": \"Bearer {{TOKEN}}\"\n              },\n              \"data\": \"{\\n\\t\\\"url\\\": \\\"https://requestbin.io\\\"\\n}\"\n            }\n\n            $.ajax(settings).done(function (response) {\n              console.log(response);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n              $request-\u003esetMethod(HTTP_METH_GET);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              $request-\u003esetBody('{\n                \"url\": \"https://requestbin.io\"\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n    post:\n      description: When messages are acknowledge by carriers, a notification is sent to the specified URL\n      operationId: webhooks.subscribe\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                eventTypes:\n                  items:\n                    type: string\n                  type: array\n                url:\n                  example: https://myserver.com/send/callback/here\n                  format: uri\n                  type: string\n              required:\n                - callbackUrl\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookResponse\"\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Subscribe to message events\n      tags:\n        - webhooks\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n              -H 'Authorization: Bearer {{TOKEN}}' \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"url\": \"https://requestbin.io\",\n              \"eventTypes\": [\"message-received\"]\n            }'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'POST',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}',\n                 'Content-Type': 'application/json' },\n              body: { url: 'https://requestbin.io', eventTypes: [ 'message-received' ] },\n              json: true };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}',\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"url\": \"https://requestbin.io\",\n                \"eventTypes\": [\"message-received\"]\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  \"/accounts/{accountId}/webhooks/{url}\":\n    delete:\n      callbacks:\n        event:\n          \"{$request.body#/callbackUrl}\":\n            post:\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      $ref: \"#/components/schemas/Event\"\n                required: true\n              responses:\n                \"200\":\n                  description: Your server returns this code if it accepts the callback\n      description: Delete subscription for receiving notifications\n      operationId: webhooks.unsubscribe\n      parameters:\n        - $ref: \"#/components/parameters/accountId\"\n        - description: Account to apply operations to\n          in: path\n          name: url\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: successful operation\n      security:\n        - sakari_auth: []\n      summary: Unsubscribe to message events\n      tags:\n        - webhooks\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X DELETE \\\n              https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}} \\\n              -H 'Authorization: Bearer {{TOKEN}}'\n        - lang: JavaScript\n          source: |\n            var request = require(\"request\");\n            var options = { method: 'DELETE',\n              url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}',\n              headers:\n               { Authorization: 'Bearer {{TOKEN}}' };\n\n            request(options, function (error, response, body) {\n              if (error) throw new Error(error);\n\n              console.log(body);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}');\n              $request-\u003esetMethod(HTTP_METH_DELETE);\n\n              $request-\u003esetHeaders(array(\n                'Authorization' =\u003e 'Bearer {{TOKEN}}'\n              ));\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  /oauth2/token:\n    post:\n      operationId: auth.token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TokenRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n          description: successful operation\n      summary: Get token for accessing APIs\n      tags:\n        - authentication\n      x-code-samples:\n        - lang: CURL\n          source: |\n            curl -X POST \\\n              https://api.sakari.io/oauth2/token \\\n              -H 'Content-Type: application/json' \\\n              -d '{\n              \"grant_type\": \"client_credentials\",\n              \"client_id\": \"12345678-1234-1234-1234-123456789012\",\n              \"client_secret\": \"87654321-4321-4321-4321-098765432121\"\n            }'\n        - lang: JavaScript\n          source: |\n            var settings = {\n              \"async\": true,\n              \"crossDomain\": true,\n              \"url\": \"https://api.sakari.io/oauth2/token\",\n              \"method\": \"POST\",\n              \"headers\": {\n                \"Content-Type\": \"application/json\"\n              },\n              \"processData\": false,\n              \"data\": \"{\\n\\t\\\"grant_type\\\": \\\"client_credentials\\\",\\n\\t\\\"client_id\\\": \\\"12345678-1234-1234-1234-123456789012\\\",\\n\\t\\\"client_secret\\\": \\\"87654321-4321-4321-4321-098765432121\\\"\\n}\"\n            }\n\n            $.ajax(settings).done(function (response) {\n              console.log(response);\n            });\n        - lang: PHP\n          source: |\n            \u003c?php\n\n              $request = new HttpRequest();\n              $request-\u003esetUrl('https://api.sakari.io/oauth2/token');\n              $request-\u003esetMethod(HTTP_METH_POST);\n\n              $request-\u003esetHeaders(array(\n                'Content-Type' =\u003e 'application/json'\n              ));\n\n              $request-\u003esetBody('{\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": \"12345678-1234-1234-123456789012\",\n                \"client_secret\": \"87654321-4321-4321-898765432121\"\n              }');\n\n              try {\n                $response = $request-\u003esend();\n\n                echo $response-\u003egetBody();\n              } catch (HttpException $ex) {\n                echo $ex;\n              }\n  /tools/sharefile:\n    post:\n      operationId: tools.shareFile\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: binary\n              type: string\n          multipart/form-data:\n            schema:\n              properties:\n                media:\n                  format: binary\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ShareFileResponse\"\n          description: successful operation\n        4XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n        5XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: invalid request\n      security:\n        - sakari_auth: []\n      summary: Share file - use to host a file and generate a short link to be used directly in a message or as a link to media for a MMS\n      tags:\n        - tools\ncomponents:\n  parameters:\n    accountId:\n      description: Account to apply operations to\n      in: path\n      name: accountId\n      required: true\n      schema:\n        type: string\n    contactIdFilter:\n      description: ID of contact\n      in: query\n      name: contactId\n      required: false\n      schema:\n        type: string\n    conversationIdFilter:\n      description: ID of conversation\n      in: query\n      name: conversationId\n      required: false\n      schema:\n        type: string\n    email:\n      description: Email of contact\n      in: query\n      name: email\n      required: false\n      schema:\n        type: string\n    emailFilter:\n      description: Filter by email or part of\n      in: query\n      name: email\n      required: false\n      schema:\n        type: string\n    firstName:\n      description: First name of contact\n      in: query\n      name: firstName\n      required: false\n      schema:\n        type: string\n    firstNameFilter:\n      description: Filter by first name or part of\n      in: query\n      name: firstName\n      required: false\n      schema:\n        type: string\n    lastName:\n      description: Last name of contact\n      in: query\n      name: lastName\n      required: false\n      schema:\n        type: string\n    lastNameFilter:\n      description: Filter by last name or part of\n      in: query\n      name: lastName\n      required: false\n      schema:\n        type: string\n    limit:\n      description: Maximum number of results to return\n      in: query\n      name: limit\n      required: false\n      schema:\n        format: int64\n        maximum: 100\n        minimum: 1\n        type: integer\n    mobile:\n      description: Mobile of contact\n      in: query\n      name: mobile\n      required: false\n      schema:\n        type: string\n    mobileFilter:\n      description: Filter by mobile or part of\n      in: query\n      name: mobile\n      required: false\n      schema:\n        type: string\n    nameFilter:\n      description: Filter by name or part of\n      in: query\n      name: name\n      required: false\n      schema:\n        type: string\n    offset:\n      description: Results to skip when paginating through a result set\n      in: query\n      name: offset\n      required: false\n      schema:\n        format: int64\n        minimum: 0\n        type: integer\n    tags:\n      description: Tag of contact\n      in: query\n      name: tags\n      required: false\n      schema:\n        type: string\n    tagsFilter:\n      description: Filter by tag(s)\n      in: query\n      name: tags\n      required: false\n      schema:\n        type: string\n  requestBodies:\n    Contact:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ContactRequest\"\n      description: Pet object that needs to be added to the store\n      required: true\n    Contacts:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: \"#/components/schemas/ContactRequest\"\n            type: array\n      description: List of contacts\n      required: true\n  schemas:\n    AccountEvent:\n      properties:\n        accountId:\n          $ref: \"#/components/schemas/AccountId\"\n        type:\n          $ref: \"#/components/schemas/EventType\"\n      type: object\n    AccountEventPayload:\n      properties:\n        balance:\n          format: double\n          type: number\n      type: object\n    AccountId:\n      type: string\n    AttributeFilter:\n      properties:\n        comparator:\n          enum:\n            - =\n            - \u003c\n            - \u003c=\n            - \"\u003e\"\n            - \"\u003e=\"\n            - \"!=\"\n          type: string\n        name:\n          type: string\n        value:\n          type: string\n      type: object\n    Campaign:\n      properties:\n        id:\n          type: string\n      type: object\n    CampaignRequest:\n      properties:\n        filters:\n          properties:\n            attributes:\n              items:\n                type: string\n              type: array\n            contacts:\n              items:\n                type: string\n              type: array\n            tags:\n              items:\n                type: string\n              type: array\n          type: object\n        template:\n          type: string\n        trigger:\n          properties:\n            code:\n              description: |\n                Campaign type specifies how it sources contacts and what event triggers its execution Sort order\n                  * `M` - Manual\n                  * `S` - Scheduled\n                  * `FU` - File Upload\n              enum:\n                - M\n                - S\n                - FU\n              type: string\n          type: object\n      type: object\n    CampaignResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Campaign\"\n        success:\n          type: boolean\n      type: object\n    CampaignsResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Campaign\"\n              type: array\n          type: object\n    Contact:\n      allOf:\n        - $ref: \"#/components/schemas/ContactRequest\"\n        - properties:\n            created:\n              $ref: \"#/components/schemas/Updated\"\n            error:\n              $ref: \"#/components/schemas/Error\"\n            updated:\n              $ref: \"#/components/schemas/Updated\"\n            valid:\n              type: boolean\n          type: object\n    ContactIdentifiers:\n      properties:\n        email:\n          example: chris@sakari.io\n          type: string\n        firstName:\n          example: Chris\n          type: string\n        id:\n          type: string\n        lastName:\n          example: Bloggs\n          type: string\n        mobile:\n          properties:\n            country:\n              type: string\n            number:\n              example: 123-456-7890\n              type: string\n          type: object\n      type: object\n    ContactRequest:\n      allOf:\n        - $ref: \"#/components/schemas/ContactIdentifiers\"\n        - properties:\n            attributes:\n              type: object\n            tags:\n              items:\n                $ref: \"#/components/schemas/Tag\"\n              type: array\n          type: object\n    ContactResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Contact\"\n        success:\n          default: true\n          type: boolean\n      type: object\n    ContactUploadResponse:\n      properties:\n        data:\n          properties:\n            contacts:\n              description: Uploaded contacts\n              items:\n                $ref: \"#/components/schemas/Contact\"\n              type: array\n            errors:\n              description: Contacts that failed validation\n              items:\n                $ref: \"#/components/schemas/Contact\"\n              type: array\n            inserted:\n              type: integer\n            submitted:\n              type: integer\n            success:\n              type: integer\n            updated:\n              type: integer\n          type: object\n        success:\n          default: true\n          type: boolean\n      type: object\n    ContactsResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Contact\"\n              type: array\n          type: object\n    Conversation:\n      properties:\n        closed:\n          type: boolean\n        contact:\n          $ref: \"#/components/schemas/ContactIdentifiers\"\n        created:\n          $ref: \"#/components/schemas/Updated\"\n        id:\n          type: string\n        lastMessage:\n          $ref: \"#/components/schemas/Message\"\n        phoneNumber:\n          $ref: \"#/components/schemas/PhoneNumber\"\n        unread:\n          items:\n            type: string\n          type: array\n        updated:\n          $ref: \"#/components/schemas/Updated\"\n      type: object\n    ConversationResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Conversation\"\n        success:\n          type: boolean\n      type: object\n    ConversationsResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Conversation\"\n              type: array\n          type: object\n    Error:\n      properties:\n        code:\n          example: CONT-010\n          type: string\n        description:\n          example: Contact has requested no further communication\n          type: string\n      type: object\n    ErrorResponse:\n      properties:\n        error:\n          properties:\n            code:\n              example: CONV-001\n              type: string\n            message:\n              example: Invalid conversation id\n              type: string\n          type: object\n        success:\n          default: false\n          example: false\n          type: boolean\n      type: object\n    Event:\n      properties:\n        accountId:\n          $ref: \"#/components/schemas/AccountId\"\n        data:\n          oneOf:\n            - $ref: \"#/components/schemas/AccountEventPayload\"\n            - $ref: \"#/components/schemas/MessageEventPayload\"\n        eventId:\n          type: string\n        type:\n          $ref: \"#/components/schemas/EventType\"\n      type: object\n    EventType:\n      enum:\n        - account\n        - messageStatus\n        - messageIncoming\n      example: message\n      type: string\n    Message:\n      properties:\n        contact:\n          $ref: \"#/components/schemas/ContactIdentifiers\"\n        conversation:\n          properties:\n            id:\n              type: string\n          type: object\n        created:\n          $ref: \"#/components/schemas/Updated\"\n        error:\n          $ref: \"#/components/schemas/Error\"\n        id:\n          type: string\n        media:\n          description: List of media objects attached to message\n          items:\n            properties:\n              filename:\n                type: string\n              type:\n                type: string\n              url:\n                type: string\n            type: object\n          type: array\n        message:\n          type: string\n        outgoing:\n          type: boolean\n        phoneNumber:\n          example: \"+1234567890\"\n          type: string\n        price:\n          type: number\n        read:\n          type: boolean\n        segments:\n          type: number\n        status:\n          type: string\n        template:\n          type: string\n        updated:\n          $ref: \"#/components/schemas/Updated\"\n      type: object\n    MessageEventPayload:\n      properties:\n        contact:\n          $ref: \"#/components/schemas/ContactIdentifiers\"\n        error:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n      type: object\n    MessageResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Message\"\n        success:\n          type: boolean\n      type: object\n    MessagesResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Message\"\n              type: array\n          type: object\n    PaginatedResponse:\n      properties:\n        error:\n          properties:\n            code:\n              type: string\n            message:\n              type: string\n          type: object\n        pagination:\n          properties:\n            limit:\n              type: integer\n            offset:\n              type: integer\n            totalCount:\n              type: integer\n          type: object\n        success:\n          type: boolean\n      type: object\n    PhoneNumber:\n      properties:\n        active:\n          type: boolean\n        country:\n          type: string\n        number:\n          type: string\n      type: object\n    SendMessagesRequest:\n      properties:\n        contacts:\n          items:\n            $ref: \"#/components/schemas/ContactRequest\"\n          type: array\n        conversationStrategy:\n          type: string\n        conversations:\n          description: List of conversation ids to send messages to\n          items:\n            type: string\n          type: array\n        filters:\n          properties:\n            attributes:\n              items:\n                type: object\n              type: array\n            tags:\n              items:\n                type: string\n              type: array\n          type: object\n        media:\n          description: List of media objects to attach to message\n          items:\n            properties:\n              url:\n                type: string\n            type: object\n          type: array\n        template:\n          type: string\n        type:\n          enum:\n            - SMS\n            - MMS\n          type: string\n      type: object\n    SendMessagesResponse:\n      properties:\n        data:\n          properties:\n            estimatedPrice:\n              format: double\n              type: number\n            jobId:\n              type: string\n            messages:\n              items:\n                $ref: \"#/components/schemas/Message\"\n              type: array\n            queued:\n              type: integer\n          type: object\n      type: object\n    ShareFileResponse:\n      properties:\n        data:\n          properties:\n            expires:\n              format: date-time\n              type: string\n            link:\n              type: string\n          type: object\n        success:\n          type: boolean\n      type: object\n    Tag:\n      properties:\n        tag:\n          type: string\n        visible:\n          type: boolean\n      type: object\n    Template:\n      allOf:\n        - $ref: \"#/components/schemas/TemplateRequest\"\n        - properties:\n            id:\n              type: string\n          type: object\n    TemplateRequest:\n      properties:\n        name:\n          type: string\n        template:\n          example: Hi {{{firstName}}}. Grab 20% off today only at ABC Shoes\n          type: string\n        type:\n          enum:\n            - SMS\n            - Web\n          example: SMS\n          type: string\n      type: object\n    TemplateResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Template\"\n        success:\n          type: boolean\n      type: object\n    TemplatesResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Template\"\n              type: array\n          type: object\n    TokenRequest:\n      properties:\n        client_id:\n          example: 00000000-0000-0000-0000-00000000000\n          type: string\n        client_secret:\n          example: 00000000-0000-0000-0000-00000000000\n          type: string\n        grant_type:\n          example: client_credentials\n          type: string\n      type: object\n    TokenResponse:\n      properties:\n        access_token:\n          type: string\n        token_type:\n          type: string\n      type: object\n    Updated:\n      properties:\n        at:\n          format: date-time\n          type: string\n        by:\n          properties:\n            firstName:\n              example: Joe\n              type: string\n            id:\n              type: string\n            lastName:\n              example: Bloggs\n              type: string\n          type: object\n      type: object\n    Webhook:\n      properties:\n        eventTypes:\n          items:\n            enum:\n              - message-received\n              - message-status\n              - message-sent\n              - conversation-closed\n              - contact-created\n              - contact-updated\n              - contact-removed\n            type: string\n          type: array\n        url:\n          type: string\n      type: object\n    WebhookResponse:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Webhook\"\n        success:\n          type: boolean\n      type: object\n    WebhooksResponse:\n      allOf:\n        - $ref: \"#/components/schemas/PaginatedResponse\"\n        - properties:\n            data:\n              items:\n                $ref: \"#/components/schemas/Webhook\"\n              type: array\n          type: object\n  securitySchemes:\n    sakari_auth:\n      flows:\n        clientCredentials:\n          scopes:\n            messages:send: Send messages\n          tokenUrl: /oauth2/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/sakari.io/1.0.1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/sakari.io/1.0.1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/accounts/{accountId}/contacts\": post: responses: 201: contents: application/json: generate schema: oneOf: collect variants: oneOf[0]: allOf: field data: item: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"HTTP code pattern",
		"oauth2 security"
	]
}