{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/redhat-developer/app-services-sdk-java"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "packages/connector-management-sdk/api/openapi.yaml",
			"byteSize": 66521,
			"content": "openapi: 3.0.0\ninfo:\n  description: Connector Service Fleet Manager is a Rest API to manage connectors.\n  title: Connector Service Fleet Manager\n  version: 0.1.0\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- name: Connector Types\n- name: Connectors\n- name: Connector Clusters\n- name: Connector Service\npaths:\n  /api/connector_mgmt/v1:\n    get:\n      description: Returns the version metadata\n      operationId: getVersionMetadata\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionMetadata'\n          description: Version metadata\n      summary: Returns the version metadata\n      tags:\n      - Connector Service\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_types/{connector_type_id}:\n    get:\n      description: Get a connector type by id\n      operationId: getConnectorTypeByID\n      parameters:\n      - description: The id of the connector type\n        explode: false\n        in: path\n        name: connector_type_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                ConnectorTypeExample:\n                  $ref: '#/components/examples/ConnectorTypeExample'\n              schema:\n                $ref: '#/components/schemas/ConnectorType'\n          description: The connector type matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector type exists\n        \"410\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/410Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Connector type doesn't exist anymore\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector type by id\n      tags:\n      - Connector Types\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_types:\n    get:\n      description: Returns a list of connector types\n      operationId: getConnectorTypes\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `<>`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorTypeList'\n          description: A list of connector types\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector types\n      tags:\n      - Connector Types\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connectors:\n    get:\n      description: Returns a list of connector types\n      operationId: listConnectors\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `<>`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorList'\n          description: A list of connectors\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector types\n      tags:\n      - Connectors\n      x-accepts: application/json\n    post:\n      description: Create a new connector\n      operationId: createConnector\n      parameters:\n      - description: Perform the action in an asynchronous manner\n        explode: true\n        in: query\n        name: async\n        required: true\n        schema:\n          type: boolean\n        style: form\n      requestBody:\n        content:\n          application/json:\n            examples:\n              ConnectorCreateExample:\n                $ref: '#/components/examples/ConnectorCreateExample'\n            schema:\n              $ref: '#/components/schemas/ConnectorRequest'\n        description: Connector data\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              examples:\n                \"400CreationExample\":\n                  $ref: '#/components/examples/400CreationExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation errors occurred\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: An unexpected error occurred creating the connector\n      security:\n      - Bearer: []\n      summary: Create a new connector\n      tags:\n      - Connectors\n      x-contentType: application/json\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connectors/{id}:\n    delete:\n      description: Delete a connector\n      operationId: deleteConnector\n      parameters:\n      - description: The ID of record\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Deleted\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404DeleteExample\":\n                  $ref: '#/components/examples/404DeleteExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No kafka request with specified ID exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500DeleteExample\":\n                  $ref: '#/components/examples/500DeleteExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a connector\n      tags:\n      - Connectors\n      x-accepts: application/json\n    get:\n      description: Get a connector\n      operationId: getConnector\n      parameters:\n      - description: The ID of record\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n          description: The connector matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector exists\n        \"410\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/410Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist anymore\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector\n      tags:\n      - Connectors\n      x-accepts: application/json\n    patch:\n      description: Patch a connector\n      operationId: patchConnector\n      parameters:\n      - description: The ID of record\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: object\n          application/json-patch+json:\n            schema:\n              description: A JSON Patch, RFC 6902 - https://tools.ietf.org/html/rfc6902\n              type: object\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectorRequest'\n        description: Data to patch the connector with\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n          description: The connector matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching resource exists\n        \"410\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/410Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist anymore\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Patch a connector\n      tags:\n      - Connectors\n      x-contentType: application/merge-patch+json\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_clusters:\n    get:\n      description: Returns a list of connector clusters\n      operationId: listConnectorClusters\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorClusterList'\n          description: A list of connector clusters\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector clusters\n      tags:\n      - Connector Clusters\n      x-accepts: application/json\n    post:\n      description: Create a new connector cluster\n      operationId: createConnectorCluster\n      parameters:\n      - description: Perform the action in an asynchronous manner\n        explode: true\n        in: query\n        name: async\n        required: true\n        schema:\n          type: boolean\n        style: form\n      requestBody:\n        content:\n          application/json:\n            examples:\n              ConnectorClusterCreateExample:\n                $ref: '#/components/examples/ConnectorClusterCreateExample'\n            schema:\n              $ref: '#/components/schemas/ConnectorClusterRequest'\n        description: Connector cluster data\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorCluster'\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              examples:\n                \"400CreationExample\":\n                  $ref: '#/components/examples/400CreationExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation errors occurred\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: An unexpected error occurred creating the connector cluster\n      security:\n      - Bearer: []\n      summary: Create a new connector cluster\n      tags:\n      - Connector Clusters\n      x-contentType: application/json\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}:\n    delete:\n      description: Delete a connector cluster\n      operationId: deleteConnectorCluster\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Deleted\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404DeleteExample\":\n                  $ref: '#/components/examples/404DeleteExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No resource with specified ID exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500DeleteExample\":\n                  $ref: '#/components/examples/500DeleteExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Delete a connector cluster\n      tags:\n      - Connector Clusters\n      x-accepts: application/json\n    get:\n      description: Get a connector cluster\n      operationId: getConnectorCluster\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorCluster'\n          description: The connector cluster matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster type exists\n        \"410\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/410Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist anymore\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector cluster\n      tags:\n      - Connector Clusters\n      x-accepts: application/json\n    put:\n      description: udpate a connector cluster\n      operationId: updateConnectorClusterById\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectorClusterRequest'\n        description: Data to updated connector with\n        required: true\n      responses:\n        \"204\":\n          description: Cluster status is updated\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: udpate a connector cluster\n      tags:\n      - Connector Clusters\n      x-contentType: application/json\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters:\n    get:\n      description: Get a connector cluster's addon parameters\n      operationId: getConnectorClusterAddonParameters\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Resets cluster service account credentials when true\n        explode: true\n        in: query\n        name: reset_credentials\n        required: false\n        schema:\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddonParameterList'\n          description: The parameters that should be used to configure the managed\n            connector addon on the cluster.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster type exists\n        \"410\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/410Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist anymore\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector cluster's addon parameters\n      tags:\n      - Connector Clusters\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/namespaces:\n    get:\n      description: Get a connector cluster's namespaces\n      operationId: getConnectorClusterNamespaces\n      parameters:\n      - description: The id of the connector cluster\n        explode: false\n        in: path\n        name: connector_cluster_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `<>`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespaceList'\n          description: The namespaces visible to user in the cluster.\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector cluster type exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector cluster's namespaces\n      tags:\n      - Connector Clusters\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_namespaces:\n    get:\n      description: Returns a list of connector namespaces\n      operationId: listConnectorNamespaces\n      parameters:\n      - description: Page index\n        examples:\n          page:\n            value: \"1\"\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Number of items in each page\n        examples:\n          size:\n            value: \"100\"\n        explode: true\n        in: query\n        name: size\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |-\n          Specifies the order by criteria. The syntax of this parameter is\n          similar to the syntax of the `order by` clause of an SQL statement.\n          Each query can be ordered by any of the `ConnectorType` fields.\n          For example, to return all Connector types ordered by their name, use the following syntax:\n\n          ```sql\n          name asc\n          ```\n\n          To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n          ```sql\n          name asc, version asc\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then\n          the results are ordered by name.\n        examples:\n          orderBy:\n            value: name asc\n        explode: true\n        in: query\n        name: orderBy\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Search criteria.\n\n          The syntax of this parameter is similar to the syntax of the `where` clause of a\n          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n          Allowed operators are `<>`, `=`, or `LIKE`.\n          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n          Examples:\n\n          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n          ```\n          name = aws-sqs-source and channel = stable\n          ```[p-]\n\n          To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n          ```\n          name like aws%25\n          ```\n\n          If the parameter isn't provided, or if the value is empty, then all the Connector Type\n          that the user has permission to see are returned.\n\n          Note. If the query is invalid, an error is returned.\n        examples:\n          search:\n            value: name = aws-sqs-source and channel = stable\n        explode: true\n        in: query\n        name: search\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespaceList'\n          description: A list of connector namespaces\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Returns a list of connector namespaces\n      tags:\n      - Connector Namespaces\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_namespaces/{connector_namespace_id}:\n    get:\n      description: Get a connector namespace\n      operationId: getConnectorNamespace\n      parameters:\n      - description: The id of the connector namespace\n        explode: false\n        in: path\n        name: connector_namespace_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespace'\n          description: The connector namespace matching the request\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: No matching connector namespace type exists\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unexpected error occurred\n      security:\n      - Bearer: []\n      summary: Get a connector namespace\n      tags:\n      - Connector Namespaces\n      x-accepts: application/json\n  /api/connector_mgmt/v1/kafka_connector_namespaces/eval:\n    post:\n      description: Create a new evaluation connector namespace\n      operationId: createEvaluationNamespace\n      requestBody:\n        content:\n          application/json:\n            examples:\n              ConnectorNamespaceEvalCreateExample:\n                $ref: '#/components/examples/ConnectorNamespaceEvalCreateExample'\n            schema:\n              $ref: '#/components/schemas/ConnectorNamespaceEvalRequest'\n        description: Connector namespace data\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorNamespace'\n          description: Accepted\n        \"400\":\n          content:\n            application/json:\n              examples:\n                \"400CreationExample\":\n                  $ref: '#/components/examples/400CreationExample'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation errors occurred\n        \"401\":\n          content:\n            application/json:\n              examples:\n                \"401Example\":\n                  $ref: '#/components/examples/401Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Auth token is invalid\n        \"404\":\n          content:\n            application/json:\n              examples:\n                \"404Example\":\n                  $ref: '#/components/examples/404Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The requested resource doesn't exist\n        \"500\":\n          content:\n            application/json:\n              examples:\n                \"500Example\":\n                  $ref: '#/components/examples/500Example'\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: An unexpected error occurred creating the connector namespace\n      security:\n      - Bearer: []\n      summary: Create a new short lived evaluation connector namespace\n      tags:\n      - Connector Namespaces\n      x-contentType: application/json\n      x-accepts: application/json\ncomponents:\n  examples:\n    ConnectorClusterCreateExample:\n      value:\n        name: MyCluster\n    ConnectorTypeExample:\n      value:\n        id: log_sink_0.1\n        kind: ConnectorType\n        href: /api/connector_mgmt/v1/kafka_connector_types/log_sink_0.1\n        name: Log Sink\n        version: \"0.1\"\n        channels:\n        - stable\n        description: Log Sink\n        icon_href: /api/connector_mgmt/v1/kafka_connector_types/log_sink.png\n        labels:\n        - sink\n        capabilities:\n        - data_shape\n        - processors\n        schema:\n          properties:\n            common:\n              required: []\n              title: Log\n              type: object\n              properties:\n                multi_line:\n                  default: false\n                  description: Multi Line\n                  title: Multi Line\n                  type: boolean\n                  x-group: endpoint\n                show_all:\n                  default: false\n                  description: Show All\n                  title: Show All\n                  type: boolean\n                  x-group: endpoint\n            topics:\n              description: Comma separated list of Kafka topic names\n              title: Topic names\n              type: string\n              x-group: kafka\n            steps:\n              type: array\n              items:\n                oneOf:\n                - properties:\n                    insert_field:\n                      description: Adds a custom field with a constant value to the\n                        message in transit.\n                      properties:\n                        field:\n                          description: The name of the field to be added\n                          title: Field\n                          type: string\n                        value:\n                          description: The value of the field\n                          title: Value\n                          type: string\n                      required:\n                      - field\n                      - value\n                      title: Insert Field Action\n                      type: object\n                  required:\n                  - insert_field\n                  type: object\n                - properties:\n                    extract_field:\n                      description: Extract a field from the body\n                      properties:\n                        field:\n                          description: The name of the field to be added\n                          title: Field\n                          type: string\n                      required:\n                      - field\n                      title: Extract Field Action\n                      type: object\n                  required:\n                  - extract_field\n                  type: object\n                - properties:\n                    has_header_filter:\n                      description: Filter based on the presence of one header\n                      properties:\n                        name:\n                          description: The header name to evaluate\n                          example: headerName\n                          title: Header Name\n                          type: string\n                      required:\n                      - name\n                      title: Has Header Filter Action\n                      type: object\n                  required:\n                  - has_header_filter\n                  type: object\n    ConnectorCreateExample:\n      value:\n        name: MyLogger\n        namespace_id: 9bsv0s7tne7g02gh5g4g\n        kafka:\n          id: 9bsv0s6brfr002pfnkh0\n          client_id: srvc-acct-162ef2d8-0209-4117-8462-df63c2025c26\n          client_secret: b144d991-08eb-4472-8ec1-eb034c69231b\n          url: foo-9bsv0s6brfr002pfnkh0.kas.acme.com:443\n        schema_registry:\n          id: 9bsv0s0k8lng031se9q0\n          client_id: srvc-acct-e025265e-a88a-44fb-8450-ed010eb6bc5c\n          client_secret: dc5a8298-bed7-422e-8947-f6fda69292ff\n          url: bar-9bsv0s2mfca002t9q7sg.srs.acme.com:443\n        channel: stable\n        connector_type_id: log_sink_0.1\n        connector:\n          common:\n            show_all: true\n            multi_lines: true\n          topics: foo,bar\n          data_shape:\n            key:\n              format: STRING\n            value:\n              format: JSON\n          processors:\n          - insert_field:\n              name: fieldName\n              value: fieldValue\n        desired_state: ready\n        error_handling:\n          dead_letter_queue:\n            topic: dlq\n    ConnectorNamespaceCreateExample:\n      value:\n        name: MyNamespace\n        cluster_id: 9bsv0s7tne7g02gh5g4g\n        annotations:\n          connector_mgmt.bf2.org/profile: default-profile\n    ConnectorNamespaceEvalCreateExample:\n      value:\n        name: MyEvalNamespace\n        annotations:\n          connector_mgmt.bf2.org/profile: evaluation-profile\n    \"400CreationExample\":\n      value:\n        id: \"103\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/103\n        code: CONNECTOR-MGMT-103\n        reason: Synchronous action is not supported, use async=true parameter\n        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa\n    \"400InvalidQueryExample\":\n      value:\n        id: \"203\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/23\n        code: CONNECTOR-MGMT-23\n        reason: |\n          Failed to parse search query: Unable to list Kafka requests for api_kafka_service: CONNECTOR-MGMT-23:\n          Failed to parse search query: Unsupported column name for search: 'id'. Supported column names are:\n          region, name, cloud_provider, name, status. Query invalid: id = 123\n        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv\n    \"404Example\":\n      value:\n        id: \"404\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/7\n        code: CONNECTOR-MGMT-7\n        reason: The requested resource doesn't exist\n    \"410Example\":\n      value:\n        id: \"410\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/25\n        code: CONNECTOR-MGMT-25\n        reason: The requested resource has been deleted\n    \"404DeleteExample\":\n      value:\n        id: \"7\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/7\n        code: CONNECTOR-MGMT-7\n        reason: Connector with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found\n        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y\n    \"401Example\":\n      value:\n        id: \"11\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/11\n        code: CONNECTOR-MGMT-11\n        reason: 'Unable to verify JWT token: Required authorization token not found'\n        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD\n    \"409NameConflictExample\":\n      value:\n        id: \"36\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/36\n        code: CONNECTOR-MGMT-36\n        reason: Conenctor name is already used\n        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED\n    \"500Example\":\n      value:\n        id: \"9\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/9\n        code: CONNECTOR-MGMT-9\n        reason: Unspecified error\n        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW\n    \"500DeleteExample\":\n      value:\n        id: \"9\"\n        kind: Error\n        href: /api/connector_mgmt/v1/errors/9\n        code: CONNECTOR-MGMT-9\n        reason: |\n          Error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e\n          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier\n          is '404', code is 'CLUSTERS-MGMT-404' and operation identifier is '1g5or50viu07oealuehrkc26dgftj1ac':\n          Cluster '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)\n        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca\n  parameters:\n    id:\n      description: The ID of record\n      explode: false\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n      style: simple\n    page:\n      description: Page index\n      examples:\n        page:\n          value: \"1\"\n      explode: true\n      in: query\n      name: page\n      required: false\n      schema:\n        type: string\n      style: form\n    size:\n      description: Number of items in each page\n      examples:\n        size:\n          value: \"100\"\n      explode: true\n      in: query\n      name: size\n      required: false\n      schema:\n        type: string\n      style: form\n    orderBy:\n      description: |-\n        Specifies the order by criteria. The syntax of this parameter is\n        similar to the syntax of the `order by` clause of an SQL statement.\n        Each query can be ordered by any of the `ConnectorType` fields.\n        For example, to return all Connector types ordered by their name, use the following syntax:\n\n        ```sql\n        name asc\n        ```\n\n        To return all Connector types ordered by their name _and_ version, use the following syntax:\n\n        ```sql\n        name asc, version asc\n        ```\n\n        If the parameter isn't provided, or if the value is empty, then\n        the results are ordered by name.\n      examples:\n        orderBy:\n          value: name asc\n      explode: true\n      in: query\n      name: orderBy\n      required: false\n      schema:\n        type: string\n      style: form\n    search:\n      description: |\n        Search criteria.\n\n        The syntax of this parameter is similar to the syntax of the `where` clause of a\n        SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.\n        Allowed operators are `<>`, `=`, or `LIKE`.\n        Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.\n\n        Examples:\n\n        To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:\n\n        ```\n        name = aws-sqs-source and channel = stable\n        ```[p-]\n\n        To return a Kafka instance with a name that starts with `aws`, use the following syntax:\n\n        ```\n        name like aws%25\n        ```\n\n        If the parameter isn't provided, or if the value is empty, then all the Connector Type\n        that the user has permission to see are returned.\n\n        Note. If the query is invalid, an error is returned.\n      examples:\n        search:\n          value: name = aws-sqs-source and channel = stable\n      explode: true\n      in: query\n      name: search\n      required: false\n      schema:\n        type: string\n      style: form\n  schemas:\n    List:\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n      required:\n      - items\n      - kind\n      - page\n      - size\n      - total\n      type: object\n    Error:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/Error_allOf'\n    ObjectReference:\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n      type: object\n    ObjectMeta:\n      properties:\n        owner:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        modified_at:\n          format: date-time\n          type: string\n      type: object\n    ServiceConnectionSettings:\n      properties:\n        id:\n          type: string\n        url:\n          type: string\n      required:\n      - id\n      - url\n    ServiceAccount:\n      properties:\n        client_id:\n          type: string\n        client_secret:\n          type: string\n      required:\n      - client_id\n      - client_secret\n    VersionMetadata:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/VersionMetadata_allOf'\n    KafkaConnectionSettings:\n      allOf:\n      - $ref: '#/components/schemas/ServiceConnectionSettings'\n      description: Holds the configuration to connect to a Kafka Instance.\n    SchemaRegistryConnectionSettings:\n      allOf:\n      - $ref: '#/components/schemas/ServiceConnectionSettings'\n      description: Holds the configuration to connect to a Schem Registry Instance.\n    AddonParameter:\n      description: A addon parameter\n      example:\n        id: id\n        value: value\n      properties:\n        id:\n          type: string\n        value:\n          type: string\n      type: object\n    AddonParameterList:\n      description: A list of addon parameters\n      items:\n        $ref: '#/components/schemas/AddonParameter'\n      type: array\n    ConnectorClusterState:\n      enum:\n      - disconnected\n      - ready\n      - deleting\n      type: string\n    ConnectorClusterRequestMeta:\n      properties:\n        name:\n          type: string\n    ConnectorClusterRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'\n      description: Schema for the request to update a data plane cluster's name\n    ConnectorClusterMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'\n    ConnectorClusterStatus:\n      properties:\n        status:\n          $ref: '#/components/schemas/ConnectorClusterStatus_status'\n    ConnectorCluster:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorClusterMeta'\n      - $ref: '#/components/schemas/ConnectorClusterStatus'\n    ConnectorClusterList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorClusterList_allOf'\n    Channel:\n      default: stable\n      enum:\n      - stable\n      type: string\n    ConnectorDesiredState:\n      enum:\n      - unassigned\n      - ready\n      - stopped\n      - deleted\n      type: string\n    ConnectorState:\n      enum:\n      - assigning\n      - assigned\n      - updating\n      - ready\n      - stopped\n      - failed\n      - deleting\n      - deleted\n      - provisioning\n      - deprovisioning\n      type: string\n    ConnectorConfiguration:\n      properties:\n        kafka:\n          $ref: '#/components/schemas/KafkaConnectionSettings'\n        service_account:\n          $ref: '#/components/schemas/ServiceAccount'\n        schema_registry:\n          $ref: '#/components/schemas/SchemaRegistryConnectionSettings'\n        connector:\n          type: object\n      required:\n      - connector\n      - kafka\n      - service_account\n    ConnectorRequestMeta:\n      properties:\n        name:\n          type: string\n        connector_type_id:\n          type: string\n        namespace_id:\n          type: string\n        channel:\n          $ref: '#/components/schemas/Channel'\n        desired_state:\n          $ref: '#/components/schemas/ConnectorDesiredState'\n      required:\n      - connector_type_id\n      - desired_state\n      - name\n      - namespace_id\n    ConnectorRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorRequestMeta'\n      - $ref: '#/components/schemas/ConnectorConfiguration'\n    ConnectorMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorRequestMeta'\n      - $ref: '#/components/schemas/ConnectorMeta_allOf'\n    ConnectorStatus:\n      properties:\n        status:\n          $ref: '#/components/schemas/ConnectorStatus_status'\n    Connector:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorMeta'\n      - $ref: '#/components/schemas/ConnectorConfiguration'\n      - $ref: '#/components/schemas/ConnectorStatus'\n    ConnectorList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorList_allOf'\n    ConnectorType:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorType_allOf'\n      description: Represents a connector type supported by the API\n      oneOf:\n      - required:\n        - name\n        - schema\n        - version\n      - required:\n        - json_schema\n        - name\n        - version\n    ConnectorTypeList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorTypeList_allOf'\n    ConnectorNamespaceRequestMeta:\n      properties:\n        name:\n          description: Namespace name must match pattern `^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$`,\n            or it may be empty to be auto-generated.\n          pattern: ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$\n          type: string\n        annotations:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    ConnectorNamespaceQuota:\n      properties:\n        connectors:\n          format: int32\n          type: integer\n        memory_requests:\n          description: Memory quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        memory_limits:\n          description: Memory quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        cpu_requests:\n          description: CPU quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n        cpu_limits:\n          description: CPU quota for limits or requests\n          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n          type: string\n      type: object\n    ConnectorNamespaceMeta:\n      allOf:\n      - $ref: '#/components/schemas/ObjectMeta'\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      - $ref: '#/components/schemas/ConnectorNamespaceMeta_allOf'\n    ConnectorNamespaceTenantKind:\n      enum:\n      - user\n      - organisation\n      type: string\n    ConnectorNamespaceTenant:\n      properties:\n        kind:\n          $ref: '#/components/schemas/ConnectorNamespaceTenantKind'\n        id:\n          description: Either user or organisation id depending on the value of kind\n          type: string\n      required:\n      - id\n      - kind\n      type: object\n    ConnectorNamespaceRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      - $ref: '#/components/schemas/ConnectorNamespaceRequest_allOf'\n      description: A connector namespace create request\n      required:\n      - cluster_id\n      - kind\n      - name\n    ConnectorNamespacePatchRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      - type: object\n      description: A connector namespace patch request\n    ConnectorNamespaceEvalRequest:\n      allOf:\n      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'\n      description: An evaluation connector namespace create request\n    ConnectorNamespaceList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - $ref: '#/components/schemas/ConnectorNamespaceList_allOf'\n    ConnectorNamespaceState:\n      enum:\n      - disconnected\n      - ready\n      - deleting\n      - deleted\n      type: string\n    ConnectorNamespaceStatus:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorNamespaceState'\n        version:\n          type: string\n        connectors_deployed:\n          format: int32\n          type: integer\n        error:\n          type: string\n      required:\n      - connectors_deployed\n      - state\n      type: object\n    ConnectorNamespace:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/ConnectorNamespaceMeta'\n      - $ref: '#/components/schemas/ConnectorNamespace_allOf'\n      description: A connector namespace\n    MemoryQuota:\n      description: Memory quota for limits or requests\n      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n      type: string\n    CpuQuota:\n      description: CPU quota for limits or requests\n      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$\n      type: string\n    Error_allOf:\n      properties:\n        code:\n          type: string\n        reason:\n          type: string\n        operation_id:\n          type: string\n      type: object\n    VersionMetadata_allOf:\n      example:\n        kind: APIVersion\n        id: v1\n        href: /api/connector_mgmt/v1\n        collections:\n        - id: kafkas\n          href: /api/connector_mgmt/v1/kafka_connectors\n          kind: ConnectorList\n      properties:\n        collections:\n          items:\n            allOf:\n            - $ref: '#/components/schemas/ObjectReference'\n          type: array\n      type: object\n    ConnectorClusterStatus_status:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorClusterState'\n        error:\n          type: string\n      type: object\n    ConnectorClusterList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorCluster'\n          type: array\n      type: object\n    ConnectorMeta_allOf:\n      properties:\n        resource_version:\n          format: int64\n          type: integer\n      type: object\n    ConnectorStatus_status:\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorState'\n        error:\n          type: string\n      type: object\n    ConnectorList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/Connector'\n          type: array\n      type: object\n    ConnectorType_allOf:\n      properties:\n        name:\n          description: Name of the connector type.\n          type: string\n        version:\n          description: Version of the connector type.\n          type: string\n        channels:\n          description: Channels of the connector type.\n          items:\n            $ref: '#/components/schemas/Channel'\n          type: array\n        description:\n          description: A description of the connector.\n          type: string\n        icon_href:\n          description: URL to an icon of the connector.\n          type: string\n        labels:\n          description: Labels used to categorize the connector\n          items:\n            type: string\n          type: array\n        capabilities:\n          description: The capabilities supported by the conenctor\n          items:\n            type: string\n          type: array\n        schema:\n          description: A json schema that can be used to validate a ConnectorRequest\n            connector field.\n          type: object\n        json_schema:\n          description: A json schema that can be used to validate a ConnectorRequest\n            connector field.\n          type: object\n      type: object\n    ConnectorTypeList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorType'\n          type: array\n      type: object\n    ConnectorNamespaceMeta_allOf:\n      properties:\n        resource_version:\n          format: int64\n          type: integer\n        quota:\n          $ref: '#/components/schemas/ConnectorNamespaceQuota'\n      type: object\n    ConnectorNamespaceRequest_allOf:\n      properties:\n        cluster_id:\n          type: string\n        kind:\n          $ref: '#/components/schemas/ConnectorNamespaceTenantKind'\n      type: object\n    ConnectorNamespaceList_allOf:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/ConnectorNamespace'\n          type: array\n      type: object\n    ConnectorNamespace_allOf:\n      properties:\n        name:\n          type: string\n        cluster_id:\n          type: string\n        expiration:\n          description: Namespace expiration timestamp in RFC 3339 format\n          type: string\n        tenant:\n          $ref: '#/components/schemas/ConnectorNamespaceTenant'\n        status:\n          $ref: '#/components/schemas/ConnectorNamespaceStatus'\n      required:\n      - cluster_id\n      - id\n      - name\n      - resource_version\n      - status\n      - tenant\n      type: object\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n\n",
			"canonicalURL": "/github.com/redhat-developer/app-services-sdk-java@4515520baf91913fe2f588ffeb8af92e60a1667c/-/blob/packages/connector-management-sdk/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/redhat-developer/app-services-sdk-java/blob/4515520baf91913fe2f588ffeb8af92e60a1667c/packages/connector-management-sdk/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/connector_mgmt/v1/kafka_connector_clusters\": get: responses: 200: contents: application/json: generate schema: allOf: field items: item: allOf: schema type mismatch: object and "
}