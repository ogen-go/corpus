{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ObeoNetwork/InformationSystem"
		},
		"file": {
			"name": "Swagger Petstore - OpenAPI 3.0-1.0.5-SNAPSHOT.yaml",
			"size": 0,
			"path": "addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/petstore/yaml/Swagger Petstore - OpenAPI 3.0-1.0.5-SNAPSHOT.yaml",
			"byteSize": 19701,
			"content": "openapi: 3.0.1\ninfo:\n  title: Swagger Petstore - OpenAPI 3.0\n  description: \"This is a sample Pet Store Server based on the OpenAPI 3.0 specification.\\\n    \\  You can find out more about\\nSwagger at [http://swagger.io](http://swagger.io).\\\n    \\ In the third iteration of the pet store, we've switched to the design first\\\n    \\ approach!\\nYou can now help us improve the API whether it's by making changes\\\n    \\ to the definition itself or to the code.\\nThat way, with time, we can improve\\\n    \\ the API in general, and expose some of the new features in OAS3.\\n\\nSome useful\\\n    \\ links:\\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\\n\\\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml) \"\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.5-SNAPSHOT\nservers:\n- url: /v3\ntags:\n- name: User\n  description: Access to Petstore orders\n- name: Store\n  description: Operations about user\n- name: Pet\n  description: Everything about your Pets\npaths:\n  /user:\n    post:\n      tags:\n      - User\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n  /user/createWithList:\n    post:\n      tags:\n      - User\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: |-\n            OK\n\n            Successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: successful operation\n      x-swagger-router-controller: UserController\n  /user/login:\n    get:\n      tags:\n      - User\n      operationId: loginUser\n      parameters:\n      - name: username\n        in: query\n        description: The user name for login\n        required: false\n        schema:\n          type: string\n      - name: password\n        in: query\n        description: The password for login in clear text\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        400:\n          description: |-\n            Bad Request\n\n            Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n      - User\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n      - User\n      operationId: getUserByName\n      parameters:\n      - name: username\n        in: path\n        description: 'The name that needs to be fetched. Use user1 for testing. '\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid username supplied\n        404:\n          description: |-\n            Not Found\n\n            User not found\n    put:\n      tags:\n      - User\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n      - name: username\n        in: path\n        description: name that need to be deleted\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: successful operation\n      x-swagger-router-controller: UserController\n    delete:\n      tags:\n      - User\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n      - name: username\n        in: path\n        description: The name that needs to be deleted\n        required: true\n        schema:\n          type: string\n      responses:\n        400:\n          description: |-\n            Bad Request\n\n            Invalid username supplied\n        404:\n          description: |-\n            Not Found\n\n            User not found\n  /store/inventory:\n    get:\n      tags:\n      - Store\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Store_GetInventoryOutput200'\n      security:\n      - api_key: []\n      x-swagger-router-controller: OrderController\n  /store/order:\n    post:\n      tags:\n      - Store\n      description: Place a new order in the store\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        405:\n          description: |-\n            Method Not Allowed\n\n            Invalid input\n      x-swagger-router-controller: OrderController\n  /store/order/{orderId}:\n    get:\n      tags:\n      - Store\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of order that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid ID supplied\n        404:\n          description: |-\n            Not Found\n\n            Order not found\n      x-swagger-router-controller: OrderController\n    delete:\n      tags:\n      - Store\n      description: For valid response try integer IDs with value \u003c 1000. Anything\n        above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n      - name: orderId\n        in: path\n        description: ID of the order that needs to be deleted\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        400:\n          description: |-\n            Bad Request\n\n            Invalid ID supplied\n        404:\n          description: |-\n            Not Found\n\n            Order not found\n      x-swagger-router-controller: OrderController\n  /pet:\n    put:\n      tags:\n      - Pet\n      description: Update an existing pet by Id\n      operationId: updatePet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        200:\n          description: |-\n            OK\n\n            Successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid ID supplied\n        404:\n          description: |-\n            Not Found\n\n            Pet not found\n        405:\n          description: |-\n            Method Not Allowed\n\n            Validation exception\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n    post:\n      tags:\n      - Pet\n      description: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        200:\n          description: |-\n            OK\n\n            Successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        405:\n          description: |-\n            Method Not Allowed\n\n            Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n      - Pet\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: false\n        schema:\n          $ref: '#/components/schemas/PetStatus'\n      - name: page\n        in: query\n        description: The index of the page queried\n        required: false\n        schema:\n          type: integer\n          format: int64\n      - name: size\n        in: query\n        description: The number of elements per page\n        required: false\n        schema:\n          type: integer\n          format: int64\n      responses:\n        206:\n          description: |-\n            Partial Content\n\n            successful operation\n          headers:\n            X-Total-Element:\n              schema:\n                type: integer\n                format: int64\n            X-Page-Element-Count:\n              schema:\n                type: integer\n                format: int64\n            Accept-Range:\n              schema:\n                type: string\n            Content-Range:\n              schema:\n                type: string\n            Link:\n              schema:\n                type: string\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid status value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      x-pagination: this is a pagination-related property extension\n  /pet/findByTags:\n    get:\n      tags:\n      - Pet\n      description: Multiple tags can be provided with comma separated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: false\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid tag value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/{petId}:\n    get:\n      tags:\n      - Pet\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        400:\n          description: |-\n            Bad Request\n\n            Invalid ID supplied\n        404:\n          description: |-\n            Not Found\n\n            Pet not found\n      security:\n      - api_key: []\n      - petstore_auth:\n        - write:pets\n        - read:pets\n    post:\n      tags:\n      - Pet\n      operationId: updatePetWithForm\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be updated\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: name\n        in: query\n        description: Name of pet that needs to be updated\n        required: false\n        schema:\n          type: string\n      - name: status\n        in: query\n        description: Status of pet that needs to be updated\n        required: false\n        schema:\n          type: string\n      responses:\n        405:\n          description: |-\n            Method Not Allowed\n\n            Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n    delete:\n      tags:\n      - Pet\n      operationId: deletePet\n      parameters:\n      - name: api_key\n        in: header\n        required: false\n        schema:\n          type: string\n      - name: petId\n        in: path\n        description: Pet id to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        400:\n          description: |-\n            Bad Request\n\n            Invalid pet value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n      - Pet\n      operationId: uploadFile\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet to update\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: additionalMetadata\n        in: query\n        description: Additional Metadata\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        200:\n          description: |-\n            OK\n\n            successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\ncomponents:\n  schemas:\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Category:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n          format: int64\n      x-swagger-router-model: io.swagger.petstore.model.Category\n    Order:\n      type: object\n      properties:\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        id:\n          type: integer\n          format: int64\n        shipDate:\n          type: string\n          format: date-time\n        complete:\n          type: boolean\n        status:\n          $ref: '#/components/schemas/OrderStatus'\n      x-swagger-router-model: io.swagger.petstore.model.Order\n    OrderStatus:\n      type: string\n      enum:\n      - approved\n      - placed\n      - delivered\n    Pet:\n      required:\n      - name\n      - photoUrls\n      type: object\n      properties:\n        photoUrls:\n          minItems: 1\n          type: array\n          items:\n            type: string\n        name:\n          type: string\n        id:\n          type: integer\n          format: int64\n        status:\n          $ref: '#/components/schemas/PetStatus'\n        category:\n          $ref: '#/components/schemas/Category'\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n      x-swagger-router-model: io.swagger.petstore.model.Pet\n    PetStatus:\n      type: string\n      enum:\n      - sold\n      - pending\n      - available\n    Store_GetInventoryOutput200:\n      type: object\n    Tag:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n          format: int64\n      x-swagger-router-model: io.swagger.petstore.model.Tag\n    User:\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        password:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n        phone:\n          type: string\n        id:\n          type: integer\n          format: int64\n        email:\n          type: string\n        username:\n          type: string\n      x-swagger-router-model: io.swagger.petstore.model.User\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://petstore.swagger.io/oauth/authorize\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: key\n      in: header\n",
			"canonicalURL": "/github.com/ObeoNetwork/InformationSystem@779873ee0c37f9525674788fcf535bebccf6443d/-/blob/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/petstore/yaml/Swagger%20Petstore%20-%20OpenAPI%203.0-1.0.5-SNAPSHOT.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ObeoNetwork/InformationSystem/blob/779873ee0c37f9525674788fcf535bebccf6443d/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/petstore/yaml/Swagger Petstore - OpenAPI 3.0-1.0.5-SNAPSHOT.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/pet\": put: requestBody: contents: application/x-www-form-urlencoded: form parameter \"tags\": nested objects not allowed"
}