{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kuvasz-uptime/kuvasz"
		},
		"file": {
			"name": "kuvasz-latest.yml",
			"size": 0,
			"path": "docs/api-doc/kuvasz-latest.yml",
			"byteSize": 15274,
			"content": "openapi: 3.0.1\ninfo:\n  title: kuvasz\n  description: \"Kuvasz [pronounce as 'koovas'] is an open-source, headless uptime\\\n    \\ and SSL monitoring service, built in Kotlin on top of the awesome Micronaut\\\n    \\ framework\"\n  contact:\n    url: https://github.com/kuvasz-uptime/kuvasz\n  version: latest\ntags:\n- name: Security operations\n- name: Management operations\n- name: Monitor operations\npaths:\n  /health:\n    get:\n      tags:\n      - Management operations\n      summary: Health endpoint\n      description: Returns the current status of the application\n      operationId: health\n      parameters: []\n      responses:\n        \"200\":\n          description: Service is UP\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthResult'\n        \"503\":\n          description: Service is DOWN\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthResult'\n  /info:\n    get:\n      tags:\n      - Management operations\n      summary: Info endpoint\n      description: \"Returns info about the application (e.g. which handlers are enabled,\\\n        \\ etc.)\"\n      operationId: info\n      parameters: []\n      responses:\n        \"200\":\n          description: The standard response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InfoResult'\n              example:\n                handlers:\n                  log-event-handler.enabled: true\n                  smtp-event-handler.enabled: false\n                  slack-event-handler.enabled: true\n                  telegram-event-handler.enabled: true\n                  pagerduty-event-handler.enabled: true\n  /login:\n    post:\n      tags:\n      - Security operations\n      summary: Login endpoint\n      description: After a successful login it returns a valid access token that you\n        should use in your authenticated request\n      operationId: login\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserNamePasswordCredentials'\n        required: true\n      responses:\n        \"200\":\n          description: Successful login\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BearerAccessRefreshToken'\n        \"401\":\n          description: Unauthorized\n  /monitors:\n    get:\n      tags:\n      - Monitor operations\n      summary: Returns all monitors with their details\n      operationId: getMonitorsWithDetails\n      parameters:\n      - name: enabledOnly\n        in: query\n        required: false\n        schema:\n          type: boolean\n          nullable: true\n      responses:\n        \"200\":\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MonitorDetailsDto'\n      security:\n      - bearerAuth: []\n    post:\n      tags:\n      - Monitor operations\n      summary: Creates a monitor\n      operationId: createMonitor\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MonitorCreateDto'\n        required: true\n      responses:\n        \"201\":\n          description: Successful creation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorDto'\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n  /monitors/{monitorId}:\n    get:\n      tags:\n      - Monitor operations\n      summary: Returns a monitor's details\n      operationId: getMonitorDetails\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorDetailsDto'\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n    delete:\n      tags:\n      - Monitor operations\n      summary: Deletes a monitor by ID\n      operationId: deleteMonitor\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"204\":\n          description: Successful deletion\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n    patch:\n      tags:\n      - Monitor operations\n      summary: Updates a monitor by ID\n      operationId: updateMonitor\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MonitorUpdateDto'\n        required: true\n      responses:\n        \"200\":\n          description: Successful update\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorDto'\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n  /monitors/{monitorId}/pagerduty-integration-key:\n    put:\n      tags:\n      - Monitor operations\n      summary: Updates or creates a Pagerduty integration key for the given monitor\n      operationId: upsertPagerdutyIntegrationKey\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PagerdutyKeyUpdateDto'\n        required: true\n      responses:\n        \"200\":\n          description: Successful update or create\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorDto'\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n    delete:\n      tags:\n      - Monitor operations\n      summary: Deletes the Pagerduty integration key of the given monitor\n      operationId: deletePagerdutyIntegrationKey\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"204\":\n          description: Successful deletion\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceError'\n      security:\n      - bearerAuth: []\n  /monitors/{monitorId}/ssl-events:\n    get:\n      tags:\n      - Monitor operations\n      summary: Returns the SSL events of the given monitor\n      operationId: getSSLEvents\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSLEventDto'\n      security:\n      - bearerAuth: []\n  /monitors/{monitorId}/uptime-events:\n    get:\n      tags:\n      - Monitor operations\n      summary: Returns the uptime events of the given monitor\n      operationId: getUptimeEvents\n      parameters:\n      - name: monitorId\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: Successful query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UptimeEventDto'\n      security:\n      - bearerAuth: []\ncomponents:\n  schemas:\n    BearerAccessRefreshToken:\n      type: object\n      properties:\n        username:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n            example: ROLE_ADMIN\n        access_token:\n          type: string\n        token_type:\n          type: string\n          example: Bearer\n        expires_in:\n          type: number\n          format: int32\n          example: 3600\n    HealthResult:\n      type: object\n      properties:\n        name:\n          type: string\n        status:\n          type: string\n          enum:\n          - UP\n          - DOWN\n          - UNKNOWN\n    InfoResult:\n      type: object\n      properties:\n        handlers:\n          type: object\n    MonitorCreateDto:\n      required:\n      - name\n      - uptimeCheckInterval\n      - url\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n        url:\n          pattern: \"^(https?)://[-a-zA-Z0-9+\u0026@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%=~_|]\"\n          type: string\n        uptimeCheckInterval:\n          minimum: 60\n          type: integer\n          format: int32\n        enabled:\n          type: boolean\n          nullable: true\n        sslCheckEnabled:\n          type: boolean\n          nullable: true\n        pagerdutyIntegrationKey:\n          type: string\n          nullable: true\n    MonitorDetailsDto:\n      required:\n      - createdAt\n      - enabled\n      - id\n      - name\n      - pagerdutyKeyPresent\n      - sslCheckEnabled\n      - uptimeCheckInterval\n      - url\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n          format: uri\n        uptimeCheckInterval:\n          type: integer\n          format: int32\n        enabled:\n          type: boolean\n        sslCheckEnabled:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n          nullable: true\n        uptimeStatus:\n          allOf:\n          - $ref: '#/components/schemas/UptimeStatus'\n          - nullable: true\n        uptimeStatusStartedAt:\n          type: string\n          format: date-time\n          nullable: true\n        lastUptimeCheck:\n          type: string\n          format: date-time\n          nullable: true\n        sslStatus:\n          allOf:\n          - $ref: '#/components/schemas/SslStatus'\n          - nullable: true\n        sslStatusStartedAt:\n          type: string\n          format: date-time\n          nullable: true\n        lastSSLCheck:\n          type: string\n          format: date-time\n          nullable: true\n        uptimeError:\n          type: string\n          nullable: true\n        sslError:\n          type: string\n          nullable: true\n        averageLatencyInMs:\n          type: integer\n          format: int32\n          nullable: true\n        P95LatencyInMs:\n          type: integer\n          format: int32\n          nullable: true\n        P99LatencyInMs:\n          type: integer\n          format: int32\n          nullable: true\n        pagerdutyKeyPresent:\n          type: boolean\n    MonitorDto:\n      required:\n      - createdAt\n      - enabled\n      - id\n      - name\n      - pagerdutyKeyPresent\n      - sslCheckEnabled\n      - uptimeCheckInterval\n      - url\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n        uptimeCheckInterval:\n          type: integer\n          format: int32\n        enabled:\n          type: boolean\n        sslCheckEnabled:\n          type: boolean\n        pagerdutyKeyPresent:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n          nullable: true\n    MonitorUpdateDto:\n      type: object\n      properties:\n        name:\n          type: string\n          nullable: true\n        url:\n          pattern: \"^(https?)://[-a-zA-Z0-9+\u0026@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%=~_|]\"\n          type: string\n          nullable: true\n        uptimeCheckInterval:\n          minimum: 60\n          type: integer\n          format: int32\n          nullable: true\n        enabled:\n          type: boolean\n          nullable: true\n        sslCheckEnabled:\n          type: boolean\n          nullable: true\n    PagerdutyKeyUpdateDto:\n      required:\n      - pagerdutyIntegrationKey\n      type: object\n      properties:\n        pagerdutyIntegrationKey:\n          minLength: 1\n          type: string\n    SSLEventDto:\n      required:\n      - startedAt\n      - status\n      - updatedAt\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/SslStatus'\n        error:\n          type: string\n          nullable: true\n        startedAt:\n          type: string\n          format: date-time\n        endedAt:\n          type: string\n          format: date-time\n          nullable: true\n        updatedAt:\n          type: string\n          format: date-time\n    ServiceError:\n      type: object\n      properties:\n        message:\n          type: string\n          nullable: true\n    SslStatus:\n      type: string\n      enum:\n      - VALID\n      - INVALID\n      - WILL_EXPIRE\n    UptimeEventDto:\n      required:\n      - startedAt\n      - status\n      - updatedAt\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/UptimeStatus'\n        error:\n          type: string\n          nullable: true\n        startedAt:\n          type: string\n          format: date-time\n        endedAt:\n          type: string\n          format: date-time\n          nullable: true\n        updatedAt:\n          type: string\n          format: date-time\n    UptimeStatus:\n      type: string\n      enum:\n      - UP\n      - DOWN\n    UserNamePasswordCredentials:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/kuvasz-uptime/kuvasz@2297709d97ee0d9ee61df17ab3b37b463fb56338/-/blob/docs/api-doc/kuvasz-latest.yml",
			"externalURLs": [
				{
					"url": "https://github.com/kuvasz-uptime/kuvasz/blob/2297709d97ee0d9ee61df17ab3b37b463fb56338/docs/api-doc/kuvasz-latest.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/monitors\": get: responses: code 200: contents: media: \"application/json\": generate schema: item: field sslStatus: allOf: schema type mismatch: string and "
}