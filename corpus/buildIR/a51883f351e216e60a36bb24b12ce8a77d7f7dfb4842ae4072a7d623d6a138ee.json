{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AlbertSuarez/object-cut"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "multiplexer/src/openapi/openapi.yaml",
			"byteSize": 4602,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: ObjectCut API\n  description: ObjectCut API\n  contact:\n    email: contact@objectcut.com\n  version: \"1.0\"\n\n  x-logo:\n    url: 'https://avatars1.githubusercontent.com/u/68817885?s=200&v=4'\n    altText: ObjectCut Logo.\n\nexternalDocs:\n  description: RapidAPI API.\n  url: https://rapidapi.com/object-cut/api/background-removal\n\nservers:\n  - url: http://localhost:80\n\ntags:\n  - name: remove\n    x-displayName: Background removal\n\npaths:\n\n  /remove:\n    post:\n      tags:\n        - remove\n      summary: Remove background or foreground from images\n      description: From an input image, it returns the same image but without background or foreground.\n      operationId: src.api.remove.post\n      requestBody:\n        $ref: '#/components/requestBodies/Remove'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        default:\n          $ref: '#/components/responses/Error'\n\ncomponents:\n\n  requestBodies:\n\n    Remove:\n      required: true\n      content:\n        application/x-www-form-urlencoded:\n          schema:\n            type: object\n            properties:\n              image_url:\n                $ref: '#/components/schemas/ImageURL'\n              image_base64:\n                $ref: '#/components/schemas/ImageBase64'\n              output_format:\n                $ref: '#/components/schemas/OutputFormat'\n              to_remove:\n                $ref: '#/components/schemas/ToRemove'\n              color_removal:\n                $ref: '#/components/schemas/ColorRemoval'\n\n  responses:\n\n    Success:\n      description: Successfully request proccesed.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                $ref: '#/components/schemas/Error'\n              correlation_id:\n                $ref: '#/components/schemas/CorrelationId'\n              message:\n                $ref: '#/components/schemas/Message'\n              response:\n                $ref: '#/components/schemas/Response'\n\n    Error:\n      description: Error response with some information about.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                $ref: '#/components/schemas/Message'\n\n  schemas:\n\n    ImageURL:\n      type: string\n      description: Internet accessible URL of an image.\n      example: 'https://example.com/image.jpg'\n\n    ImageBase64:\n      type: string\n      description: URL and filename - safe base64(url) encoded image.\n      example: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgG...'\n\n    OutputFormat:\n      type: string\n      enum: ['url', 'base64']\n      description: Image format from the image result (default to URL).\n      default: url\n      example: url\n\n    ToRemove:\n      type: string\n      enum: ['background', 'foreground']\n      description: Element to remove the input image result (default to background).\n      default: background\n      example: background\n\n    ColorRemoval:\n      type: string\n      enum: ['transparent', 'white']\n      description: Color from the removed or erased part (default to transparent).\n      default: transparent\n      example: transparent\n\n    ErrorId:\n      type: string\n      enum: ['001', '002', '003']\n      example: '001'\n      description: >\n        Error message if the request was unsuccessful.\n          * 001 - An unspecified error has occurred during request processing.\n          * 002 - Image is not reachable or the URL is invalid.\n          * 003 - Invalid URL or required parameters not specified.\n\n    Error:\n      type: boolean\n      description: Unique identifier for specific request.\n      example: false\n\n    CorrelationId:\n      type: string\n      description: Unique identifier for specific request.\n      example: '02011199-9769-4999-b2c7-8d32cb17fc49'\n\n    Message:\n      type: string\n      description: Useful information (hopefully) about request.\n      example: Message\n\n    Response:\n      type: object\n      description: Details of an error if it is the scenario.\n      properties:\n        correlation_id:\n          $ref: '#/components/schemas/Message'\n        error:\n          $ref: '#/components/schemas/Error'\n        error_id:\n          $ref: '#/components/schemas/ErrorId'\n        message:\n          $ref: '#/components/schemas/Message'\n        response:\n          type: object\n          description: Reponse wrapper.\n          properties:\n            image_url:\n              $ref: '#/components/schemas/ImageURL'\n            image_base64:\n              $ref: '#/components/schemas/ImageBase64'\n",
			"canonicalURL": "/github.com/AlbertSuarez/object-cut@4cb1bc6f8efcbacc42192b2cc4b7a292b8734184/-/blob/multiplexer/src/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/AlbertSuarez/object-cut/blob/4cb1bc6f8efcbacc42192b2cc4b7a292b8734184/multiplexer/src/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reference type \"#/components/schemas/Error\" name conflict: \"Error\""
}