{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaloAltoNetworks/pan.dev"
		},
		"file": {
			"name": "DataResource.yaml",
			"size": 0,
			"path": "static/sase/spec/insights/2.0/DataResource.yaml",
			"byteSize": 17658,
			"content": "components:\n  schemas:\n    DataResourceQuery:\n      description: Data resource query request\n      properties:\n        addOnFilter:\n          allOf:\n          - $ref: '#/components/schemas/FilterCondition'\n          - description: Add on data Filter Condition. (The existing property will\n              be replaced)\n        computeDataRowsProcessed:\n          description: Flag to indicate total rows processed for query\n          type: boolean\n        count:\n          default: 10000\n          description: Maximum number of records\n          example: 3000\n          format: int32\n          maximum: 10000\n          minimum: 1\n          type: integer\n        filter:\n          allOf:\n          - $ref: '#/components/schemas/FilterCondition'\n          - description: Filter Condition\n        histogram:\n          allOf:\n          - $ref: '#/components/schemas/HistogramCondition'\n          - description: Histogram Condition\n        includeRecordNumber:\n          description: Flag to indicate add row number to response\n          type: boolean\n        properties:\n          allOf:\n          - $ref: '#/components/schemas/ListQueryProperty'\n          - description: Resource properties\n            example:\n            - property: property1\n            - function: sum\n              property: property2\n              sort:\n                order: desc\n                sequence: 1\n            - alias: average_property3\n              function: avg\n              property: property3\n      required:\n      - properties\n      - filter\n      type: object\n    DataResponse:\n      description: Resource Request response\n      properties:\n        data:\n          allOf:\n          - $ref: '#/components/schemas/ListMapStringObject'\n          - description: Response Data\n            example:\n            - average_property3: 10.75\n              property1: value1\n              property2: 10\n            - average_property3: 20.99\n              property1: value2\n              property2: 25\n        header:\n          allOf:\n          - $ref: '#/components/schemas/MapStringObject'\n          - description: Response header\n            example:\n              createdAt: Fri Jan  1 00:00:00 PST 2021\n              name: Response Name\n              requestId: 123e4567-e89b-12d3-a456-426614174000\n      required:\n      - header\n      - data\n      type: object\n    ErrorResponse:\n      description: Error Response\n      properties:\n        details:\n          description: Error details\n          example: Input value 'property1' is not valid\n          type: string\n        errorCode:\n          description: Error code\n          example: REST10001\n          type: string\n        message:\n          description: Error Message\n          example: Invalid input\n          type: string\n        values:\n          allOf:\n          - $ref: '#/components/schemas/ListString'\n          - description: Values in error details. Used to construct error in different\n              language\n            example:\n            - property1\n      required:\n      - errorCode\n      - message\n      - details\n      - values\n      type: object\n    FilterCondition:\n      properties:\n        operator:\n          allOf:\n          - $ref: '#/components/schemas/Operator'\n          - default: AND\n            description: Query operator\n            example: AND\n        rules:\n          $ref: '#/components/schemas/ListQueryRule'\n      type: object\n    Function:\n      enum:\n      - ceil\n      - floor\n      - round\n      - trunc\n      type: string\n    HistogramCondition:\n      properties:\n        alias:\n          description: Property Alias\n          example: property1_alias\n          type: string\n        enableEmptyInterval:\n          description: Enable filling empty record for intervals with no data\n          example: true\n          type: boolean\n        property:\n          description: Property\n          example: property1\n          type: string\n        range:\n          allOf:\n          - $ref: '#/components/schemas/Range'\n          - description: Histogram Range\n            example: hour\n        sort:\n          allOf:\n          - $ref: '#/components/schemas/SortCondition'\n          - description: Sort Condition (optional)\n            example:\n              order: desc\n              sequence: 1\n        value:\n          description: Histogram range value (only 1 is supported)\n          example: 1\n          format: int32\n          type: integer\n      required:\n      - property\n      - range\n      type: object\n    ListMapStringObject:\n      items:\n        $ref: '#/components/schemas/MapStringObject'\n      type: array\n    ListObject:\n      items: {}\n      type: array\n    ListQueryProperty:\n      items:\n        $ref: '#/components/schemas/QueryProperty'\n      type: array\n    ListQueryRule:\n      items:\n        $ref: '#/components/schemas/QueryRule'\n      type: array\n    ListString:\n      items:\n        type: string\n      type: array\n    MapStringObject:\n      properties:\n        empty:\n          type: boolean\n      type: object\n    NumberFormat:\n      properties:\n        function:\n          $ref: '#/components/schemas/Function'\n        value:\n          format: int32\n          type: integer\n      type: object\n    Operator:\n      enum:\n      - AND\n      - OR\n      type: string\n    Order:\n      enum:\n      - asc\n      - desc\n      type: string\n    QueryProperty:\n      properties:\n        alias:\n          description: Property Alias (Name to include in response)\n          example: my_property1_name\n          type: string\n        format:\n          allOf:\n          - $ref: '#/components/schemas/NumberFormat'\n          - description: Number Format function (optional)\n            example:\n              function: round\n              value: 1\n        function:\n          allOf:\n          - $ref: '#/components/schemas/Function'\n          - description: Aggregation function (Applicable only to metric properties)\n            example: count\n        property:\n          description: Property\n          example: property1\n          type: string\n        sort:\n          allOf:\n          - $ref: '#/components/schemas/SortCondition'\n          - description: Sort Condition (optional)\n            example:\n              order: desc\n              sequence: 1\n      required:\n      - property\n      type: object\n    QueryRule:\n      properties:\n        escapeValue:\n          description: Enable character escaping for value\n          example: true\n          type: boolean\n        format:\n          allOf:\n          - $ref: '#/components/schemas/NumberFormat'\n          - description: Number Format function (optional)\n            example:\n              function: round\n              value: 1\n        operator:\n          allOf:\n          - $ref: '#/components/schemas/Operator'\n          - description: Operator\n            example: in\n        property:\n          description: Resource Property\n          example: property1\n          type: string\n        subQuery:\n          allOf:\n          - $ref: '#/components/schemas/SubQuery'\n          - description: Subquery (optional)\n            example:\n              type: local\n              value: sub_query1\n        values:\n          allOf:\n          - $ref: '#/components/schemas/ListObject'\n          - description: Operator\n            example:\n            - value1\n            - value2\n      required:\n      - property\n      - operator\n      - values\n      - escapeValue\n      type: object\n    Range:\n      enum:\n      - day\n      - hour\n      - minute\n      - month\n      - week\n      - year\n      type: string\n    SortCondition:\n      properties:\n        order:\n          $ref: '#/components/schemas/Order'\n        sequence:\n          format: int32\n          type: integer\n      type: object\n    SubQuery:\n      properties:\n        name:\n          type: string\n        type:\n          $ref: '#/components/schemas/SubQueryType'\n      type: object\n    SubQueryType:\n      enum:\n      - local\n      - pre_defined\n      type: string\ninfo:\n  contact: {}\n  description: 'Manages standard data resources.\n\n    '\n  title: Data Resource\n  version: '2.0'\nopenapi: 3.0.3\npaths:\n  /api/sase/v2.0/resource/query/{resource_name}:\n    post:\n      description: 'Retrieve general information from your tenant.\n\n        '\n      operationId: post-api-sase-v2.0-resource-query-resource_name\n      parameters:\n      - description: \"Name of the resource that you want to query. The supported\\n\\\n          resources are:\\n\\n  * site_current_status\\n\\n    Provides connection status\\\n          \\ information.\\n\\n  * alerts\\n\\n    Provides information on alerts raised\\\n          \\ by your tenant.\\n\"\n        in: path\n        name: resource_name\n        required: true\n        schema:\n          type: string\n      - description: Unique tenant ID.\n        in: path\n        name: tenant_id\n        required: true\n        schema:\n          type: string\n      - description: Sub-tenant ID. This parameter is required only if a sub-tenant\n          is configured.\n        in: header\n        name: Prisma-SubTenant\n        required: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataResourceQuery'\n        description: 'The JSON object used to query the resource. The query consists\n          of four parts, show below.\n\n\n          1. Properties - Data fields to include in the query output.\n\n          2. Query - Filter conditions to apply to the query.\n\n          3. Sort - Sort order for the the data.\n\n          4. Count - Maximum number of records to retrieve.\n\n          '\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n          description: List of resources\n        '400':\n          content:\n            application/json:\n              schema:\n                description: Error Response\n                example:\n                  details: Resource property 'property1' is not valid\n                  errorCode: DATA10002\n                  message: Invalid Resource property name\n                  values:\n                  - property1\n                properties:\n                  details:\n                    description: Error details\n                    example: Input value 'property1' is not valid\n                    type: string\n                  errorCode:\n                    description: Error code\n                    example: REST10001\n                    type: string\n                  message:\n                    description: Error Message\n                    example: Invalid input\n                    type: string\n                  values:\n                    allOf:\n                    - $ref: '#/components/schemas/ListString'\n                    - description: Values in error details. Used to construct error\n                        in different language\n                      example:\n                      - property1\n                required:\n                - errorCode\n                - message\n                - details\n                - values\n                type: object\n          description: '\n\n            Invalid Resource Query request responses\n\n\n            1. Invalid Resource property name (Error code: DATA10002)\n\n            2. Invalid Resource request parameter (Error code: DATA10003)\n\n            3. The resource or property is not licensed (Error code: DATA10004)\n\n\n            '\n        '403':\n          content:\n            application/json:\n              schema:\n                description: Error Response\n                example:\n                  details: Permission Denied\n                  errorCode: REST10003\n                  message: Permission Denied\n                  values:\n                  - value1\n                properties:\n                  details:\n                    description: Error details\n                    example: Input value 'property1' is not valid\n                    type: string\n                  errorCode:\n                    description: Error code\n                    example: REST10001\n                    type: string\n                  message:\n                    description: Error Message\n                    example: Invalid input\n                    type: string\n                  values:\n                    allOf:\n                    - $ref: '#/components/schemas/ListString'\n                    - description: Values in error details. Used to construct error\n                        in different language\n                      example:\n                      - property1\n                required:\n                - errorCode\n                - message\n                - details\n                - values\n                type: object\n          description: '\n\n            Permission response\n\n\n            1. Permission Denied (Error code: REST10003)\n\n\n            '\n        '404':\n          content:\n            application/json:\n              schema:\n                description: Error Response\n                example:\n                  details: Resource not found\n                  errorCode: REST10002\n                  message: Resource not found\n                  values:\n                  - value1\n                properties:\n                  details:\n                    description: Error details\n                    example: Input value 'property1' is not valid\n                    type: string\n                  errorCode:\n                    description: Error code\n                    example: REST10001\n                    type: string\n                  message:\n                    description: Error Message\n                    example: Invalid input\n                    type: string\n                  values:\n                    allOf:\n                    - $ref: '#/components/schemas/ListString'\n                    - description: Values in error details. Used to construct error\n                        in different language\n                      example:\n                      - property1\n                required:\n                - errorCode\n                - message\n                - details\n                - values\n                type: object\n          description: '\n\n            Resource not available response\n\n\n            1. Resource not found (Error code: REST10002)\n\n\n            '\n        '500':\n          content:\n            application/json:\n              schema:\n                description: Error Response\n                example:\n                  details: Failed to process request\n                  errorCode: REST10001\n                  message: Unexpected server error\n                  values:\n                  - value1\n                properties:\n                  details:\n                    description: Error details\n                    example: Input value 'property1' is not valid\n                    type: string\n                  errorCode:\n                    description: Error code\n                    example: REST10001\n                    type: string\n                  message:\n                    description: Error Message\n                    example: Invalid input\n                    type: string\n                  values:\n                    allOf:\n                    - $ref: '#/components/schemas/ListString'\n                    - description: Values in error details. Used to construct error\n                        in different language\n                      example:\n                      - property1\n                required:\n                - errorCode\n                - message\n                - details\n                - values\n                type: object\n          description: '\n\n            Unexpected server error response\n\n\n            1. Unexpected server error (Error code: REST10001)\n\n\n            '\n      summary: Resource query\n      tags:\n      - DataResource\n  /api/sase/v2.0/resource/{resource_name}:\n    get:\n      description: 'Returns all resource information, including available properties\n        and details.\n\n        '\n      operationId: get-api-sase-v2.0-resource-resource_name\n      parameters:\n      - description: \"Name of the resource for which you want information. The supported\\n\\\n          resources are:\\n\\n  * site_current_status\\n\\n    Provides connection status\\\n          \\ information.\\n\\n  * alerts\\n\\n    Provides information on alerts raised\\\n          \\ by your tenant.\\n\"\n        in: path\n        name: resource_name\n        required: true\n        schema:\n          type: string\n      - description: Unique tenant ID.\n        in: path\n        name: tenant_id\n        required: true\n        schema:\n          type: string\n      - description: Sub-tenant ID. This parameter is required only if a sub-tenant\n          is configured.\n        in: header\n        name: Prisma-SubTenant\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataResponse'\n          description: List of resources\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Invalid Request\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Unexpected server error\n      summary: Get resource details\n      tags:\n      - DataResource\nservers:\n- url: https://pa-us.api.prismaaccess.com\ntags:\n- name: DataResource\n",
			"canonicalURL": "/github.com/PaloAltoNetworks/pan.dev@8dfdda5a3bf2e2f901caf068a70a1345e8f34a96/-/blob/static/sase/spec/insights/2.0/DataResource.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PaloAltoNetworks/pan.dev/blob/8dfdda5a3bf2e2f901caf068a70a1345e8f34a96/static/sase/spec/insights/2.0/DataResource.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/api/sase/v2.0/resource/query/{resource_name}\": post: requestBody: contents: application/json: generate schema: field addOnFilter: allOf: schema type mismatch: object and "
}