{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/developmentseed/osm-teams"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "docs/api.yml",
			"byteSize": 21958,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: OSM Teams\n  description: Teams for OpenStreetMap! [Log in to try out requests other than GET](/)\n  version: 0.0.0\n\nservers:\n  - url: /api\n\ntags:\n  - name: teams\n    description: Teams\n  - name: organizations\n    description: Organizations\n  - name: clients\n    description: Clients\n\ncomponents:\n  schemas:\n    Team:\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: unique id of the team\n        name:\n          type: string\n          description: name of the team\n        hashtag:\n          type: string\n          description: hashtag representing the team\n        bio:\n          type: string\n          description: description of the team\n        privacy:\n          type: string\n          enum: [private, public]\n          description: if `private`, team details/members are not shown in ui unless user is a member of the team\n        require_join_request:\n          type: boolean\n          description: if true, this team requires potential new members to request access\n        created_at:\n          type: string\n          format: date-time\n          description: the timestamp of the time and date the team was created\n        updated_at:\n          type: string\n          format: date-time\n          description: the timestamp of the time and date the team was last updated\n        location:\n          type: string\n          description: geojson point\n        editing_policy:\n          type: string\n          format: uri\n          description: link to organized editing policy of the team\n        members:\n          type: array\n          description: list of team member's osm id\n          items:\n            type: number\n        moderators:\n          type: array\n          description: list of team member's osm id\n          items:\n            type: number\n    TeamList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Team'\n    TeamMember:\n      properties:\n        id:\n          type: string\n          description: OSM id of user\n        name:\n          type: string\n          description: OSM username\n    TeamMemberList:\n      type: array\n      items:\n        $ref: '#/components/schemas/TeamMember'\n    TeamModerator:\n      properties:\n        id:\n          type: integer\n          description: unique id representing the team moderator relation\n        osm_id:\n          type: integer\n          description: OSM id of user\n        team_id:\n          type: integer\n          description: unique id of the team\n    TeamModeratorList:\n      type: array\n      items:\n        $ref: '#/components/schemas/TeamModerator'\n    TeamFullDetail:\n      allOf:\n        - $ref: '#/components/schemas/Team'\n        - type: object\n          properties:\n            members:\n              $ref: '#/components/schemas/TeamModeratorList'\n            moderators:\n              $ref: '#/components/schemas/TeamModeratorList'\n    Organization:\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: unique id of the organization\n        name:\n          type: string\n          description: name of the organization\n        description:\n          type: string\n          description: description of the organization\n        created_at:\n          type: string\n          format: date-time\n          description: the timestamp of the time and date the organization was created\n        updated_at:\n          type: string\n          format: date-time\n          description: the timestamp of the time and date the organization was last updated\n    OrganizationOwner:\n      properties:\n        id:\n          type: integer\n          description: unique id representing the organization owner relation\n        osm_id:\n          type: integer\n          description: OSM id of user\n        organization_id:\n          type: integer\n          description: unique id of the organization\n    OrganizationManager:\n      properties:\n        id:\n          type: integer\n          description: unique id representing the organization manager relation\n        osm_id:\n          type: integer\n          description: OSM id of user\n        organization_id:\n          type: integer\n          description: unique id of the organization\n    OrganizationTeam:\n      properties:\n        id:\n          type: integer\n          description: unique id representing the organization team relation\n        team_id:\n          type: integer\n          description: id of team\n        organization_id:\n          type: integer\n          description: unique id of the organization\n    OrganizationOwnerList:\n      type: array\n      items:\n        $ref: '#/components/schemas/OrganizationOwner'\n    OrganizationManagerList:\n      type: array\n      items:\n        $ref: '#/components/schemas/OrganizationManager'\n    OrganizationFullDetail:\n      allOf:\n        - $ref: '#/components/schemas/Organization'\n        - type: object\n          properties:\n            members:\n              $ref: '#/components/schemas/OrganizationOwnerList'\n            moderators:\n              $ref: '#/components/schemas/OrganizationManagerList'\n    Client:\n      properties:\n        client_id:\n          type: string\n          description: unique id of the client application\n        client_name:\n          type: string\n          description: human-readable name presented to a user during authorization\n        redirect_uris:\n          type: array\n          description: an array of allowed redirect urls for the client\n          items:\n            type: string\n            format: uri\n        grant_types:\n          type: array\n          description: an array of grant types the client is allowed to use\n          items:\n            type: string\n        response_types:\n          type: array\n          description: an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint\n          items:\n            type: string\n        scope:\n          type: string\n          description: a string containing a space-separated list of scope values\n        audience:\n          type: array\n          description: a list defining the audiences this client is allowed to request tokens for\n          items:\n            type: string\n        owner:\n          type: string\n          description: id of the user that created the client\n        policy_uri:\n          type: string\n          description: a URL string that points to a human-readable privacy policy document that describes how the client collects, uses, retains, and discloses personal data\n          format: uri\n        allowed_cors_origins:\n          type: array\n          description: one or more URLs that are allowed to make CORS requests to the /oauth/token endpoint\n          items:\n            type: string\n            format: uri\n        tos_uri:\n          type: string\n          description: a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client\n          format: uri\n        client_uri:\n          type: string\n          description: a URL string of a web page providing information about the client\n          format: uri\n        logo_uri:\n          type: string\n          description: a URL string for the client logo\n          format: uri\n        contacts:\n          type: array\n          description: array of strings representing ways to contact people responsible for this client, typically email addresses\n        client_secret_expires_at:\n          type: integer\n          description: an integer holding the time at which the client secret will expire or 0 if it will not expire\n          format: int64\n        subject_type:\n          type: string\n          description: the subject type requested for responses to the client\n          enum: [pairwise, public]\n        token_endpoint_auth_method:\n          type: string\n          description: client authentication method for the token endpoint\n          enum: [client_secret_post, client_secret_basic, private_key_jwt, none]\n        userinfo_signed_response_alg:\n          type: string\n          description: jws algorithm used for signing user info response. if omitted, the response is a UTF-8 encoded JSON object using the application/json content-type\n        created_at:\n          type: string\n          description: the timestamp of the time and date the client was created\n          format: date-time\n        updated_at:\n          type: string\n          description: the timestamp of the time and date the client was last updated\n          format: date-time\n    ResponseError:\n      properties:\n        statusCode:\n          type: integer\n        error:\n          type: string\n        message:\n          type: string\n  parameters:\n    ClientId:\n      name: id\n      in: path\n      description: client id\n      required: true\n      schema:\n        type: integer\n        format: int64\n    TeamId:\n      name: id\n      in: path\n      description: team id\n      required: true\n      schema:\n        type: integer\n        format: int64\n    OrgId:\n      name: id\n      in: path\n      description: organization id\n      required: true\n      schema:\n        type: integer\n        format: int64\n    OsmId:\n      name: osmId\n      in: path\n      description: osm id\n      required: true\n      schema:\n        type: integer\n        format: int64\n\npaths:\n  /clients:\n    get:\n      summary: list of clients\n      tags:\n        - clients\n      responses:\n        '200':\n          description: A JSON array of client objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Client'\n    post:\n      summary: create a client\n      tags:\n        - clients\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Client'\n      responses:\n        '200':\n          description: oath 2.0 client\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  client:\n                    $ref: '#/components/schemas/Client'\n  /clients/{id}:\n    parameters:\n      - $ref: '#/components/parameters/ClientId'\n    delete:\n      summary: delete a client\n      tags:\n        - clients\n      responses:\n        '200':\n          description: client is deleted\n  /teams:\n    get:\n      summary: list of teams\n      tags:\n        - teams\n      responses:\n        '200':\n          description: A JSON array of team objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamList'\n        '400':\n          description: error getting list of teams\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n    post:\n      summary: create a team\n      tags:\n        - teams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Team'\n      responses:\n        '200':\n          description: team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n  /teams/{id}:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n    get:\n      summary: get a team\n      tags:\n        - teams\n      responses:\n        '200':\n          description: team retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamFullDetail'\n        '400':\n          description: error getting list of teams\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    put:\n      summary: update a team\n      tags:\n        - teams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Team'\n      responses:\n        '200':\n          description: team updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamFullDetail'\n        '400':\n          description: error updating team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    delete:\n      summary: delete a team\n      tags:\n        - teams\n      responses:\n        '200':\n          description: team is deleted\n        '400':\n          description: error deleting team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /teams/add/{id}/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: add a team member to a team\n      tags:\n        - teams\n      responses:\n        '200':\n          description: team member is added\n        '400':\n          description: error adding member to team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /teams/remove/{id}/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: remove a team member from a team\n      tags:\n        - teams\n      responses:\n        '200':\n          description: team member is removed\n        '400':\n          description: error removing member to team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /teams/{id}/members:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n    patch:\n      summary: add and remove team members from a team\n      tags:\n        - teams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                add:\n                  type: array\n                  items:\n                    type: integer\n                    description: osm id\n                remove:\n                  type: array\n                  items:\n                    type: integer\n                    description: osm id\n      responses:\n        '200':\n          description: team members are added/removed\n        '400':\n          description: error updating team members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /teams/{id}/assignModerator/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Assign/Promote a member to be moderator of a team. More than one\n        moderator may exist concurrently. Moderators are listed in the\n        TeamModeratorList schema.\n      tags:\n        - teams\n      responses:\n        '200':\n          description: member was promoted to moderator\n        '400':\n          description: error updating moderator relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /teams/{id}/removeModerator/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/TeamId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Remove/Demote a moderator of a team. At least one moderator must exist\n        for a team. Moderators are listed in the TeamModeratorList schema.\n      tags:\n        - teams\n      responses:\n        '200':\n          description: member was demoted from moderator\n        '400':\n          description: error updating moderator relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations:\n    post:\n      summary: create an organization\n      tags:\n        - organizations\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n      responses:\n        '200':\n          description: team\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n  /organizations/{id}:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n    get:\n      summary: get an organization\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: organization retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationFullDetail'\n        '400':\n          description: error getting list of organizations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    put:\n      summary: update an organization\n      tags:\n        - organizations\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Organization'\n      responses:\n        '200':\n          description: team updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '400':\n          description: error updating organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    delete:\n      summary: delete an organization\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: organization is deleted\n        '400':\n          description: error deleting organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations/{id}/addOwner/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Assign/Promote a user to be an owner of an organization. More than one\n        owner may exist concurrently. Owners can manage organizations of an organization.\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: user is promoted to owner of organization\n        '400':\n          description: error updating owner relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations/{id}/removeOwner/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Remove/Demote an owner of an organization. At least one owner\n        must remain in the organization.\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: user is demoted from owner\n        '400':\n          description: error updating owner relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations/{id}/addManager/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Assign/Promote a user to be a manager of an organization. More than one\n        manager may exist concurrently. Managers can create organizations for an organization\n        but cannot update the organization.\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: user is promoted to manager of organization\n        '400':\n          description: error updating owner relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations/{id}/removeManager/{osmId}:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n      - $ref: '#/components/parameters/OsmId'\n    put:\n      summary: \u003e\n        Remove/Demote manager of an organization. An org can have no managers.\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: user is demoted from manager of organization\n        '400':\n          description: error updating owner relation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n  /organizations/{id}/teams:\n    parameters:\n      - $ref: '#/components/parameters/OrgId'\n    post:\n      summary: \u003e\n        Add a team to this organization. Only owners and managers can add\n        new teams.\n      tags:\n        - organizations\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Team'\n      responses:\n        '200':\n          description: team was added successfully\n        '400':\n          description: error creating team for organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n    get:\n      summary: \u003e\n        Get a list of teams for the specified organization\n      tags:\n        - organizations\n      responses:\n        '200':\n          description: A JSON array of team objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamList'\n        '400':\n          description: error getting list of teams\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseError'\n",
			"canonicalURL": "/github.com/developmentseed/osm-teams@4641dd4a78a60e02199dc7d34011485817ed434c/-/blob/docs/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/developmentseed/osm-teams/blob/4641dd4a78a60e02199dc7d34011485817ed434c/docs/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/teams/{id}\": get: responses: 200: contents: application/json: generate schema: allOf: merge properties: try to merge conflicting property schemas: merge item schema: schema type mismatch: object and number"
}