{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jupyterlab/jupyterlab-hdf5"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "jupyterlab_hdf/api/api.yaml",
			"byteSize": 18392,
			"content": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n#\n# jupyterLab_hdf : HDF5 api for Jupyter/Jupyterlab\n\nopenapi: 3.0.0\ninfo:\n  title: JupyterLab HDF5 proxy\n  description: 'Proxies HDF5 API requests from JupyterLab to HDF5.'\n  version: 1.1.0\n\nservers:\n  - url: http://{host}:{port}/\n    description: 'a jupyter server running the jupyterlab_hdf serverextension. Defaults to \"localhost:8888\"'\n    variables:\n      host:\n        default: 'localhost'\n        description: 'the address of the host on which your jupyter server is running. Defaults to \"localhost\"'\n      port:\n        default: '8888'\n        description: 'the port on which your jupyter server is running. Defaults to \"8888\"'\n\npaths:\n  /hdf/attrs/{fpath}:\n    parameters:\n      - $ref: '#/components/parameters/fpath'\n      - $ref: '#/components/parameters/uri'\n      - $ref: '#/components/parameters/attr_keys'\n    get:\n      description: 'get the attributes of an hdf object'\n      summary: 'get the attributes of an hdf object'\n      responses:\n        '200':\n          $ref: '#/components/responses/attrs'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n\n  /hdf/contents/{fpath}:\n    parameters:\n      - $ref: '#/components/parameters/fpath'\n      - $ref: '#/components/parameters/uri'\n      - $ref: '#/components/parameters/ixstr'\n      - $ref: '#/components/parameters/min_ndim'\n    get:\n      description: 'get the contents of an hdf object'\n      summary: 'get the contents of an hdf object'\n      responses:\n        '200':\n          $ref: '#/components/responses/contents'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n\n  /hdf/data/{fpath}:\n    parameters:\n      - $ref: '#/components/parameters/fpath'\n      - $ref: '#/components/parameters/uri'\n      - $ref: '#/components/parameters/ixstr'\n      - $ref: '#/components/parameters/subixstr'\n      - $ref: '#/components/parameters/min_ndim'\n    get:\n      description: 'get raw array data from one hdf dataset, as a json blob'\n      summary: 'get data from an hdf dataset'\n      responses:\n        '200':\n          $ref: '#/components/responses/data'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n\n  /hdf/meta/{fpath}:\n    parameters:\n      - $ref: '#/components/parameters/fpath'\n      - $ref: '#/components/parameters/uri'\n      - $ref: '#/components/parameters/ixstr'\n      - $ref: '#/components/parameters/min_ndim'\n    get:\n      description: 'get the metadata of an hdf object. If the object is a dataset and the ixstr parameter is provided, all shape-related metadata will be for the slab specified by ixstr'\n      summary: 'get the metadata of an hdf object'\n      responses:\n        '200':\n          $ref: '#/components/responses/meta'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n\n  /hdf/snippet/{fpath}:\n    parameters:\n      - $ref: '#/components/parameters/fpath'\n      - $ref: '#/components/parameters/uri'\n      - $ref: '#/components/parameters/ixstr'\n      - $ref: '#/components/parameters/subixstr'\n    get:\n      description: 'get a Python snippet that fetches the hdf dataset or group pointed to by the path and uri'\n      summary: 'get a Python snippet that fetches an hdf dataset or group'\n      responses:\n        '200':\n          $ref: '#/components/responses/py_snippet'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '500':\n          $ref: '#/components/responses/500'\n\ncomponents:\n  examples:\n    dataset_contents:\n      description: 'example contents of a dataset object'\n      value:\n        {\n          'content':\n            {\n              'attributes':\n                [\n                  { 'name': 'attr1', 'dtype': '|O', 'shape': [] },\n                  { 'name': 'attr2', 'dtype': '\u003cf4', 'shape': [5] },\n                ],\n              'dtype': '\u003ei8',\n              'labels':\n                [\n                  { 'start': 0, 'stop': 13, 'step': 1 },\n                  { 'start': 0, 'stop': 5, 'step': 1 },\n                  { 'start': 0, 'stop': 17, 'step': 1 },\n                ],\n              'name': 'foo',\n              'ndim': 3,\n              'shape': [13, 5, 17],\n              'size': 1105,\n              'type': 'dataset',\n            },\n          'name': 'foo',\n          'type': 'dataset',\n          'uri': '/able/foo',\n        }\n    group_contents:\n      description: 'example contents of a group object'\n      value:\n        [\n          { 'name': 'baker', 'type': 'group', 'uri': '/able/baker' },\n          { 'name': 'foo', 'type': 'dataset', 'uri': '/able/foo' },\n          { 'name': 'bar', 'type': 'dataset', 'uri': '/able/bar' },\n        ]\n    data_1d:\n      description: 'a 1D chunk of raw array data'\n      value: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    data_2d:\n      description: 'a 2D chunk of raw array data'\n      value:\n        [[11, 12, 13, 14], [15, 16, 17, 18], [19, 20, 21, 22], [23, 24, 25, 26]]\n    data_4d:\n      description: 'a 4D chunk of raw array data'\n      value:\n        [\n          [[[11, 12], [13, 14]], [[15, 16], [17, 18]]],\n          [[[19, 20], [21, 22]], [[23, 24], [25, 26]]],\n        ]\n    dataset_meta:\n      description: 'metadata for dataset of shape `[13, 5, 17]`'\n      value:\n        {\n          'attributes':\n            [\n              { 'name': 'attr1', 'dtype': '|O', 'shape': [] },\n              { 'name': 'attr2', 'dtype': '\u003cf4', 'shape': [5] },\n            ],\n          'dtype': '\u003ei8',\n          'labels':\n            [\n              { 'start': 0, 'stop': 13, 'step': 1 },\n              { 'start': 0, 'stop': 5, 'step': 1 },\n              { 'start': 0, 'stop': 17, 'step': 1 },\n            ],\n          'name': 'foo',\n          'ndim': 3,\n          'shape': [13, 5, 17],\n          'size': 1105,\n          'type': 'dataset',\n        }\n    dataset_meta_w_ixstr:\n      description: 'metadata for dataset of shape `[13, 5, 17]`, given an ixstr of `\"2:11, 3, 1:16\"`'\n      value:\n        {\n          'attributes':\n            [\n              { 'name': 'attr1', 'dtype': '|O', 'shape': [] },\n              { 'name': 'attr2', 'dtype': '\u003cf4', 'shape': [5] },\n            ],\n          'dtype': '\u003ei8',\n          'labels':\n            [\n              { 'start': 2, 'stop': 11, 'step': 1 },\n              { 'start': 3, 'stop': 4, 'step': 1 },\n              { 'start': 1, 'stop': 16, 'step': 1 },\n            ],\n          'name': 'foo',\n          'ndim': 2,\n          'shape': [9, 15],\n          'size': 135,\n          'type': 'dataset',\n        }\n    group_meta:\n      description: 'metadata for group'\n      value:\n        {\n          'attributes': [],\n          'children':\n            [\n              {\n                'name': 'dataset_1',\n                'dtype': '\u003cf8',\n                'type': 'dataset',\n                'shape': [2, 3, 4],\n                'attributes': [],\n              },\n              {\n                'name': 'group_with_attrs',\n                'type': 'group',\n                'attributes':\n                  [{ 'name': 'array_attr', 'dtype': '\u003ef4', 'shape': [10] }],\n              },\n            ],\n          'name': 'beta',\n          'type': 'group',\n        }\n    child_group_meta:\n      description: 'metadata for child group'\n      value: { 'attributes': [], 'name': 'beta', 'type': 'group' }\n    dataset_py_snippet:\n      description: 'python snippet for dataset'\n      value: \"with h5py.File('/Users/alice/git/jupyterlab-hdf/example/nested_int.hdf5', 'r') as f:\\n    dataset = f['/leaf01/data01']\"\n    group_py_snippet:\n      description: 'python snippet for group'\n      value: \"with h5py.File('/Users/alice/git/jupyterlab-hdf/example/nested_int.hdf5', 'r') as f:\\n    group = f['/leaf01']\"\n\n  parameters:\n    fpath:\n      name: fpath\n      in: path\n      required: true\n      description: 'path on disk to an HDF5 file'\n      schema:\n        type: string\n        format: uri\n    ixstr:\n      name: ixstr\n      in: query\n      required: false\n      description: 'index specifying which ND slab of a dataset to consider when fetching data. Uses numpy-style index syntax'\n      schema:\n        type: string\n    subixstr:\n      name: subixstr\n      in: query\n      required: false\n      description: 'index specifying which chunk (of the ND slab specified by ixstr) of a dataset to fetch. Uses numpy-style index syntax. The count of slices in ixstr and subixstr should match'\n      schema:\n        type: string\n    min_ndim:\n      name: min_ndim\n      in: query\n      required: false\n      description: 'if set, all shape-related metadata and array data fetched from a dataset will be promoted to have at least this many dimensions'\n      schema:\n        type: number\n    attr_keys:\n      name: attr_keys\n      in: query\n      required: false\n      description: 'keys of the attributes to fetch. If not set, all attributes will be fetched'\n      schema:\n        type: array\n    uri:\n      name: uri\n      in: query\n      required: true\n      description: 'path within an HDF5 file to a specific group or dataset'\n      schema:\n        type: string\n\n  responses:\n    '400':\n      description: 'the request was malformed; url should be of the format `\"fpath?uri=uri\"`'\n    '401':\n      description: 'the request did not specify a file that `h5py` could understand'\n    '403':\n      description: 'the request specified a file that does not exist'\n    '500':\n      description: 'found and opened file, error getting contents from object specified by the uri'\n    attrs:\n      description: 'attributes of an arbitrary hdf object, as a dictionary'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/attrs'\n    contents:\n      description: \"data representing an arbitrary hdf object, in the format required by the jupyterlab `Contents` stack. If object is a dataset, basic information (including metadata) about that dataset will be reutrned as a dict. If object is a group, then basic information (but not metadata) about that group's children will be returned as an array of dicts\"\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/dataset_contents'\n              - type: array\n                items:\n                  $ref: '#/components/schemas/contents'\n          examples:\n            'contents of a dataset':\n              $ref: '#/components/examples/dataset_contents'\n            'contents of a group':\n              $ref: '#/components/examples/group_contents'\n    data:\n      description: 'a chunk of raw array data from an hdf dataset. May be of any dimensionality'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/data'\n          examples:\n            '1D data':\n              $ref: '#/components/examples/data_1d'\n            '2D data':\n              $ref: '#/components/examples/data_2d'\n            '4D data':\n              $ref: '#/components/examples/data_4d'\n    meta:\n      description: 'metadata of an arbitrary hdf object, as a dictionary'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/meta'\n          examples:\n            'metadata for dataset':\n              $ref: '#/components/examples/dataset_meta'\n            'metadata for dataset, given an ixstr':\n              $ref: '#/components/examples/dataset_meta_w_ixstr'\n            'metadata for group':\n              $ref: '#/components/examples/group_meta'\n    py_snippet:\n      description: 'python code snippet'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/py_snippet'\n          examples:\n            'python snippet for dataset':\n              $ref: '#/components/examples/dataset_py_snippet'\n            'python snippet for group':\n              $ref: '#/components/examples/group_py_snippet'\n\n  schemas:\n    attrs:\n      description: 'attributes of an arbitrary hdf object, as a dictionary'\n      type: object\n      additionalProperties: true\n    attr_meta:\n      description: 'metadata of an attribute'\n      required: [name, dtype, shape]\n      type: object\n      properties:\n        name:\n          description: 'name of an attribute'\n          type: string\n        dtype:\n          description: 'datatype of an attribute'\n          type: string\n        shape:\n          description: 'shape of an attribute'\n          type: array\n          items:\n            type: number\n    dataset_contents:\n      description: 'a basic description of an hdf dataset, in the format required by the jupyterlab `Contents` stack'\n      required: [name, type, uri]\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/dataset_meta'\n        name:\n          description: 'object name (ie last part of uri)'\n          type: string\n        type:\n          description: 'the string literal `\"dataset\"`'\n          enum: ['dataset']\n          type: string\n        uri:\n          description: 'full uri pointing to the object'\n          type: string\n    group_contents:\n      description: 'a basic description of an hdf group, in the format required by the jupyterlab `Contents` stack'\n      required: [name, type, uri]\n      type: object\n      properties:\n        name:\n          description: 'object name (ie last part of uri)'\n          type: string\n        type:\n          description: 'the string literal `\"group\"`'\n          enum: ['group']\n          type: string\n        uri:\n          description: 'full uri pointing to the object'\n          type: string\n    contents:\n      description: 'data representing an arbitrary hdf object, in the format required by the jupyterlab `Contents` stack'\n      discriminator:\n        propertyName: type\n        mapping:\n          dataset: '#/components/schemas/dataset_contents'\n          group: '#/components/schemas/group_contents'\n      oneOf:\n        - $ref: '#/components/schemas/dataset_contents'\n        - $ref: '#/components/schemas/group_contents'\n    data:\n      description: 'a chunk of raw array data from an hdf dataset. May be of any dimensionality'\n      type: array\n      items:\n        oneOf:\n          - type: number\n          - $ref: '#/components/schemas/data'\n    dataset_meta:\n      description: 'metadata of an hdf dataset, as a dictionary'\n      required: [attributes, dtype, labels, name, ndim, shape, size, type]\n      type: object\n      properties:\n        attributes:\n          description: 'metadata of the attributes of a dataset'\n          type: array\n          items:\n            $ref: '#/components/schemas/attr_meta'\n        dtype:\n          description: 'datatype of an hdf dataset'\n          type: string\n        labels:\n          description: 'ranges that label the indices of an hdf dataset, given as an array of slices'\n          type: array\n          items:\n            $ref: '#/components/schemas/slice'\n        name:\n          description: 'name of hdf dataset'\n          type: string\n        ndim:\n          description: 'count of dimensions of an hdf dataset'\n          type: number\n        shape:\n          description: 'shape of an hdf dataset'\n          type: array\n          items:\n            type: number\n        size:\n          description: 'count of entries of an hdf dataset'\n          type: number\n        type:\n          description: 'the string literal `\"dataset\"`'\n          enum: ['dataset']\n          type: string\n    group_meta:\n      description: 'metadata of an hdf group, as a dictionary'\n      required: [attributes, children, name, type]\n      type: object\n      properties:\n        attributes:\n          description: 'metadata of the attributes of the group'\n          type: array\n          items:\n            $ref: '#/components/schemas/attr_meta'\n        children:\n          description: 'metadata of the children of the group'\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/dataset_meta'\n              - $ref: '#/components/schemas/child_group_meta'\n        name:\n          description: 'name of hdf group'\n          type: string\n        type:\n          description: 'the string literal `\"group\"`'\n          enum: ['group']\n          type: string\n    child_group_meta:\n      description: 'metadata of a child hdf group (does not include children)'\n      required: [attributes, children, name, type]\n      type: object\n      properties:\n        attributes:\n          description: 'metadata of the attributes of the group'\n          type: array\n          items:\n            $ref: '#/components/schemas/attr_meta'\n        name:\n          description: 'name of hdf group'\n          type: string\n        type:\n          description: 'the string literal `\"group\"`'\n          enum: ['group']\n          type: string\n    meta:\n      description: 'the metadata of an hdf object'\n      discriminator:\n        propertyName: type\n        mapping:\n          dataset: '#/components/schemas/dataset_meta'\n          group: '#/components/schemas/group_meta'\n      oneOf:\n        - $ref: '#/components/schemas/dataset_meta'\n        - $ref: '#/components/schemas/group_meta'\n    py_snippet:\n      description: 'python code snippet'\n      type: string\n    slice:\n      description: 'python-style slice'\n      required: [start, stop, step]\n      type: object\n      properties:\n        start:\n          description: 'first index of the slice'\n          type: number\n        stop:\n          description: 'one past the last index of the slice'\n          type: number\n        step:\n          description: 'step of the slice'\n          type: number\n"
		}
	},
	"Error": "buildIR: make ir: path \"/hdf/contents/{fpath}\": get: responses: 200: contents: application/json: schema: save schema types: save referenced type: reference \"#/components/schemas/contents\" type name conflict: \"Contents\"",
	"NotImplemented": [
		"any type parameter"
	]
}