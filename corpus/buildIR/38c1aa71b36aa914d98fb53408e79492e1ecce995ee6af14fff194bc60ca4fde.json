{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/contrib-pisp-demo-svc"
		},
		"file": {
			"name": "mojaloop.yaml",
			"size": 0,
			"path": "src/interface/mojaloop.yaml",
			"byteSize": 86279,
			"content": "openapi: 3.0.1\ninfo:\n  title: PISP Demo Server Open API\n  description: \u003e-\n    This is part of the PISP demo server that handles communication with\n    Mojaloop's switch and third-party adapter. Note - The API supports a maximum\n    size of 65536 bytes (64 Kilobytes) in the HTTP header.\n  license:\n    name: Apache 2.0\n  version: '1.1'\nservers:\n  - url: /\npaths:\n  '/accounts/{ID}':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      operationId: GetAccountsByUserId\n      summary: GetAccountsByUserId\n      description: \u003e\n        The HTTP request `GET /accounts/{ID}` is used to retrieve the list of\n        potential accounts available for linking.\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      description: \u003e\n        The HTTP request `PUT /accounts/{ID}` is used to return the list of\n        potential accounts available for linking\n      operationId: UpdateAccountsByUserId\n      summary: UpdateAccountsByUserId\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountsIDPutResponse'\n            example:\n              - accountNickname: dfspa.user.nickname1\n                id: dfspa.username.1234\n                currency: ZAR\n              - accountNickname: dfspa.user.nickname2\n                id: dfspa.username.5678\n                currency: USD\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/accounts/{ID}/error':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      description: \u003e\n        The HTTP request `PUT /accounts/{ID}/error` is used to return error\n        information\n      operationId: UpdateAccountsByUserIdError\n      summary: UpdateAccountsByUserIdError\n      tags:\n        - accounts\n        - sampled\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Details of the error returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  /authorizations:\n    post:\n      description: \u003e\n        The HTTP request `POST /authorizations` is used to request the Payer to\n        enter the applicable credentials in the PISP system.\n      operationId: AuthorizationsPostRequest\n      tags:\n        - authorizations\n      requestBody:\n        description: Authorization request details\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthorizationsPostRequest'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/consentRequests/{ID}':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      tags:\n        - consentRequests\n        - sampled\n      operationId: UpdateConsentRequest\n      summary: UpdateConsentRequest\n      description: \u003e\n        DFSP updates auth channels and/or auth uri in response to\n        consentRequest.\n\n\n        PISP updates the consentRequest to include authorization token from\n        their user,\n\n        which the DFSP is to then verify.\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ConsentRequestsIDPutResponseWeb'\n                - $ref: '#/components/schemas/ConsentRequestsIDPutResponseOTP'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    patch:\n      tags:\n        - consentRequests\n        - sampled\n      operationId: PatchConsentRequest\n      summary: PatchConsentRequest\n      description: \u003e\n        PISP sends user's OTP token to a DFSP to verify user trusts\n        aforementioned PISP\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsentRequestsIDPatchRequest'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/consentRequests/{ID}/error':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      tags:\n        - consentRequests\n      operationId: NotifyErrorConsentRequests\n      summary: NotifyErrorConsentRequests\n      description: \u003e\n        DFSP responds to the PISP if something went wrong with validating an OTP\n        or secret.\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  /consents:\n    parameters:\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    post:\n      tags:\n        - consents\n        - sampled\n      operationId: PostConsents\n      summary: PostConsents\n      description: \u003e\n        DFSP sends this request to the PISP after granting consent. DFSP sends\n        this request to an Auth service to validate a signed consent.\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ConsentsPostRequestAUTH'\n                - $ref: '#/components/schemas/ConsentsPostRequestPISP'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/consents/{ID}':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      description: \u003e\n        The HTTP request `GET /consents/{ID}` is used to get information\n        regarding a consent object created or requested earlier. The `{ID}` in\n        the URI should contain the `{ID}` that was used in the `POST /consents`.\n        summary: GetConsent\n      tags:\n        - consents\n      operationId: GetConsent\n      summary: GetConsent\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    patch:\n      description: \u003e\n        The HTTP request `PATCH /consents/{ID}` is used\n\n\n        - In account linking in the Credential Registration phase. Used by a\n        DFSP\n          to notify a PISP a credential has been verified and registered with an\n          Auth service.\n\n        - In account unlinking by a hub hosted auth service and by DFSPs\n          in non-hub hosted scenarios to notify participants of a consent being revoked.\n\n          Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.\n          Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.\n      tags:\n        - consents\n        - sampled\n      operationId: PatchConsentByID\n      summary: PatchConsentByID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ConsentsIDPatchResponseVerified'\n                - $ref: '#/components/schemas/ConsentsIDPatchResponseRevoked'\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Length'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      description: \u003e\n        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth\n        Service.\n\n\n        - Called by a `PISP` to after signing a challenge. Sent to an DFSP for\n        verification.\n\n        - Called by a `auth-service` to notify a DFSP that a credential has been\n        verified and registered.\n      tags:\n        - consents\n        - sampled\n      operationId: PutConsentByID\n      summary: PutConsentByID\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/ConsentsIDPutResponseSigned'\n                - $ref: '#/components/schemas/ConsentsIDPutResponseVerified'\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    delete:\n      description: \u003e\n        The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a\n        previously created consent.\n\n\n        - Called by a PISP when a user wants to remove their consent.\n      operationId: DeleteConsentByID\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      tags:\n        - consents\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/consents/{ID}/error':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      tags:\n        - consents\n      operationId: NotifyErrorConsents\n      summary: NotifyErrorConsents\n      description: \u003e\n        DFSP responds to the PISP if something went wrong with validating or\n        storing consent.\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/thirdpartyRequests/transactions/{ID}':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: GetThirdpartyTransactionRequests\n      summary: GetThirdpartyTransactionRequests\n      description: \u003e\n        The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to\n        request the\n\n        retrieval of a third party transaction request.\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: UpdateThirdPartyTransactionRequests\n      summary: UpdateThirdPartyTransactionRequests\n      description: \u003e\n        The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by\n        the DFSP to inform the client about\n\n        the status of a previously requested thirdparty transaction request.\n\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ThirdpartyRequestsTransactionsIDPutResponse'\n            example:\n              transactionId: 11111111-0000-0000-0000-000000000000\n              transactionRequestState: RECEIVED\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    patch:\n      operationId: NotifyThirdpartyTransactionRequests\n      summary: NotifyThirdpartyTransactionRequests\n      description: \u003e\n        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used\n        to\n\n        notify a thirdparty of the outcome of a transaction request.\n\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      tags:\n        - thirdpartyRequests\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \u003e-\n                #/components/schemas/ThirdpartyRequestsTransactionsIDPatchResponse\n            example:\n              transactionId: 11111111-0000-0000-0000-000000000000\n              transactionRequestState: ACCEPTED\n              transactionState: COMMITTED\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/thirdpartyRequests/transactions/{ID}/error':\n    parameters:\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      tags:\n        - thirdpartyRequests\n        - sampled\n      operationId: ThirdpartyTransactionRequestsError\n      summary: ThirdpartyTransactionRequestsError\n      description: \u003e\n        If the server is unable to find the transaction request, or another\n        processing error occurs,\n\n        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is\n        used.\n\n        The `{ID}` in the URI should contain the `transactionRequestId` that was\n        used for the creation of\n\n        the thirdparty transaction request.\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  /health:\n    get:\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n      operationId: HealthGet\n      summary: Health check endpoint\n      description: \u003e-\n        The HTTP request GET /health is used to return the current status of the\n        API.\n  '/parties/{Type}/{ID}':\n    parameters:\n      - $ref: '#/components/parameters/Type'\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      description: \u003e-\n        The HTTP request `GET /parties/{Type}/{ID}` (or `GET\n        /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding\n        the requested Party, defined by `{Type}`, `{ID}` and optionally\n        `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET\n        /parties/BUSINESS/shoecompany/employee1`).\n      summary: Look up party information\n      tags:\n        - parties\n      operationId: PartiesByTypeAndID\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      description: \u003e-\n        The callback `PUT /parties/{Type}/{ID}` (or `PUT\n        /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a\n        successful result of the Party information lookup.\n      summary: Return party information\n      tags:\n        - parties\n      operationId: PartiesByTypeAndID2\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Party information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartiesTypeIDPutResponse'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/parties/{Type}/{ID}/error':\n    put:\n      description: \u003e-\n        If the server is unable to find Party information of the provided\n        identity, or another processing error occurred, the error callback `PUT\n        /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubI}/error`)\n        is used.\n      summary: Return party information error\n      tags:\n        - parties\n      operationId: PartiesErrorByTypeAndID\n      parameters:\n        - $ref: '#/components/parameters/Type'\n        - $ref: '#/components/parameters/ID'\n        - $ref: '#/components/parameters/Content-Length'\n        - $ref: '#/components/parameters/Content-Type'\n        - $ref: '#/components/parameters/Date'\n        - $ref: '#/components/parameters/X-Forwarded-For'\n        - $ref: '#/components/parameters/FSPIOP-Source'\n        - $ref: '#/components/parameters/FSPIOP-Destination'\n        - $ref: '#/components/parameters/FSPIOP-Encryption'\n        - $ref: '#/components/parameters/FSPIOP-Signature'\n        - $ref: '#/components/parameters/FSPIOP-URI'\n        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n      requestBody:\n        description: Details of the error returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/parties/{Type}/{ID}/{SubId}':\n    parameters:\n      - $ref: '#/components/parameters/Type'\n      - $ref: '#/components/parameters/ID'\n      - $ref: '#/components/parameters/SubId'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      description: \u003e-\n        The HTTP request `GET /parties/{Type}/{ID}` (or `GET\n        /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding\n        the requested Party, defined by `{Type}`, `{ID}` and optionally\n        `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET\n        /parties/BUSINESS/shoecompany/employee1`).\n      summary: Look up party information\n      tags:\n        - parties\n      operationId: PartiesSubIdByTypeAndID\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      description: \u003e-\n        The callback `PUT /parties/{Type}/{ID}` (or `PUT\n        /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a\n        successful result of the Party information lookup.\n      summary: Return party information\n      tags:\n        - parties\n      operationId: PartiesSubIdByTypeAndIDPut\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Party information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartiesTypeIDPutResponse'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/parties/{Type}/{ID}/{SubId}/error':\n    put:\n      description: \u003e-\n        If the server is unable to find Party information of the provided\n        identity, or another processing error occurred, the error callback `PUT\n        /parties/{Type}/{ID}/error` (or `PUT\n        /parties/{Type}/{ID}/{SubId}/error`) is used.\n      summary: Return party information error\n      tags:\n        - parties\n      operationId: PartiesSubIdErrorByTypeAndID\n      parameters:\n        - $ref: '#/components/parameters/Type'\n        - $ref: '#/components/parameters/ID'\n        - $ref: '#/components/parameters/SubId'\n        - $ref: '#/components/parameters/Content-Length'\n        - $ref: '#/components/parameters/Content-Type'\n        - $ref: '#/components/parameters/Date'\n        - $ref: '#/components/parameters/X-Forwarded-For'\n        - $ref: '#/components/parameters/FSPIOP-Source'\n        - $ref: '#/components/parameters/FSPIOP-Destination'\n        - $ref: '#/components/parameters/FSPIOP-Encryption'\n        - $ref: '#/components/parameters/FSPIOP-Signature'\n        - $ref: '#/components/parameters/FSPIOP-URI'\n        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n      requestBody:\n        description: Details of the error returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/services/{ServiceType}':\n    parameters:\n      - $ref: '#/components/parameters/ServiceType'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    get:\n      operationId: GetServicesByServiceType\n      summary: GetServicesByServiceType\n      description: \u003e\n        The HTTP request `GET /services/{ServiceType}` is used to retrieve the\n        list of participants\n\n        that support a specified service.\n      parameters:\n        - $ref: '#/components/parameters/Accept'\n      tags:\n        - services\n        - sampled\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n    put:\n      description: \u003e\n        The HTTP request `PUT /services/{ServiceType}` is used to return list of\n        participants\n\n        that support a specified service.\n      operationId: PutServicesByServiceType\n      summary: PutServicesByServiceType\n      tags:\n        - services\n        - sampled\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServicesServiceTypePutResponse'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\n  '/services/{ServiceType}/error':\n    parameters:\n      - $ref: '#/components/parameters/ServiceType'\n      - $ref: '#/components/parameters/Content-Type'\n      - $ref: '#/components/parameters/Date'\n      - $ref: '#/components/parameters/X-Forwarded-For'\n      - $ref: '#/components/parameters/FSPIOP-Source'\n      - $ref: '#/components/parameters/FSPIOP-Destination'\n      - $ref: '#/components/parameters/FSPIOP-Encryption'\n      - $ref: '#/components/parameters/FSPIOP-Signature'\n      - $ref: '#/components/parameters/FSPIOP-URI'\n      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'\n    put:\n      description: \u003e\n        The HTTP request `PUT /services/{ServiceType}/error` is used to return\n        error information\n      operationId: PutServicesByServiceTypeAndError\n      summary: PutServicesByServiceTypeAndError\n      tags:\n        - services\n        - sampled\n      parameters:\n        - $ref: '#/components/parameters/Content-Length'\n      requestBody:\n        description: Details of the error returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ErrorInformationObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '406':\n          $ref: '#/components/responses/406'\n        '501':\n          $ref: '#/components/responses/501'\n        '503':\n          $ref: '#/components/responses/503'\ncomponents:\n  parameters:\n    ID:\n      name: ID\n      in: path\n      required: true\n      schema:\n        type: string\n      description: The identifier value.\n    Content-Type:\n      name: Content-Type\n      in: header\n      schema:\n        type: string\n      required: true\n      description: \u003e-\n        The `Content-Type` header indicates the specific version of the API used\n        to send the payload body.\n    Date:\n      name: Date\n      in: header\n      schema:\n        type: string\n      required: true\n      description: The `Date` header field indicates the date when the request was sent.\n    X-Forwarded-For:\n      name: X-Forwarded-For\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `X-Forwarded-For` header field is an unofficially accepted standard\n        used for informational purposes of the originating client IP address, as\n        a request might pass multiple proxies, firewalls, and so on. Multiple\n        `X-Forwarded-For` values should be expected and supported by\n        implementers of the API.\n\n\n        **Note:** An alternative to `X-Forwarded-For` is defined in [RFC\n        7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC\n        7239 is less-used and supported than `X-Forwarded-For`.\n    FSPIOP-Source:\n      name: FSPIOP-Source\n      in: header\n      schema:\n        type: string\n      required: true\n      description: \u003e-\n        The `FSPIOP-Source` header field is a non-HTTP standard field used by\n        the API for identifying the sender of the HTTP request. The field should\n        be set by the original sender of the request. Required for routing and\n        signature verification (see header field `FSPIOP-Signature`).\n    FSPIOP-Destination:\n      name: FSPIOP-Destination\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `FSPIOP-Destination` header field is a non-HTTP standard field used\n        by the API for HTTP header based routing of requests and responses to\n        the destination. The field must be set by the original sender of the\n        request if the destination is known (valid for all services except GET\n        /parties) so that any entities between the client and the server do not\n        need to parse the payload for routing purposes. If the destination is\n        not known (valid for service GET /parties), the field should be left\n        empty.\n    FSPIOP-Encryption:\n      name: FSPIOP-Encryption\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `FSPIOP-Encryption` header field is a non-HTTP standard field used\n        by the API for applying end-to-end encryption of the request.\n    FSPIOP-Signature:\n      name: FSPIOP-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `FSPIOP-Signature` header field is a non-HTTP standard field used by\n        the API for applying an end-to-end request signature.\n    FSPIOP-URI:\n      name: FSPIOP-URI\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `FSPIOP-URI` header field is a non-HTTP standard field used by the\n        API for signature verification, should contain the service URI. Required\n        if signature verification is used, for more information, see [the API\n        Signature\n        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).\n    FSPIOP-HTTP-Method:\n      name: FSPIOP-HTTP-Method\n      in: header\n      schema:\n        type: string\n      required: false\n      description: \u003e-\n        The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used\n        by the API for signature verification, should contain the service HTTP\n        method. Required if signature verification is used, for more\n        information, see [the API Signature\n        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).\n    Accept:\n      name: Accept\n      in: header\n      required: true\n      schema:\n        type: string\n      description: \u003e-\n        The `Accept` header field indicates the version of the API the client\n        would like the server to use.\n    Content-Length:\n      name: Content-Length\n      in: header\n      required: false\n      schema:\n        type: integer\n      description: \u003e-\n        The `Content-Length` header field indicates the anticipated size of the\n        payload body. Only sent if there is a body.\n\n\n        **Note:** The API supports a maximum size of 5242880 bytes (5\n        Megabytes).\n    Type:\n      name: Type\n      in: path\n      required: true\n      schema:\n        type: string\n      description: 'The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.'\n    SubId:\n      name: SubId\n      in: path\n      required: true\n      schema:\n        type: string\n      description: \u003e-\n        A sub-identifier of the party identifier, or a sub-type of the party\n        identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`.\n    ServiceType:\n      name: ServiceType\n      in: path\n      required: true\n      schema:\n        type: string\n      description: 'The type of the service identifier. For example, `THIRD_PARTY_DFSP`'\n  responses:\n    '200':\n      description: OK\n    '202':\n      description: Accepted\n    '400':\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '401':\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '403':\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '404':\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '405':\n      description: Method Not Allowed\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '406':\n      description: Not Acceptable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '501':\n      description: Not Implemented\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n    '503':\n      description: Service Unavailable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorInformationResponse'\n      headers:\n        Content-Length:\n          $ref: '#/components/headers/Content-Length'\n        Content-Type:\n          $ref: '#/components/headers/Content-Type'\n  headers:\n    Content-Length:\n      required: false\n      schema:\n        type: integer\n      description: \u003e-\n        The `Content-Length` header field indicates the anticipated size of the\n        payload body. Only sent if there is a body.\n\n\n        **Note:** The API supports a maximum size of 5242880 bytes (5\n        Megabytes).\n    Content-Type:\n      schema:\n        type: string\n      required: true\n      description: \u003e-\n        The `Content-Type` header indicates the specific version of the API used\n        to send the payload body.\n  schemas:\n    ErrorCode:\n      title: ErrorCode\n      type: string\n      pattern: '^[1-9]\\d{3}$'\n      description: \u003e-\n        The API data type ErrorCode is a JSON String of four characters,\n        consisting of digits only. Negative numbers are not allowed. A leading\n        zero is not allowed. Each error code in the API is a four-digit number,\n        for example, 1234, where the first number (1 in the example) represents\n        the high-level error category, the second number (2 in the example)\n        represents the low-level error category, and the last two numbers (34 in\n        the example) represent the specific error.\n      example: '5100'\n    ErrorDescription:\n      title: ErrorDescription\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Error description string.\n    ExtensionKey:\n      title: ExtensionKey\n      type: string\n      minLength: 1\n      maxLength: 32\n      description: Extension key.\n    ExtensionValue:\n      title: ExtensionValue\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Extension value.\n    Extension:\n      title: Extension\n      type: object\n      description: Data model for the complex type Extension.\n      properties:\n        key:\n          $ref: '#/components/schemas/ExtensionKey'\n        value:\n          $ref: '#/components/schemas/ExtensionValue'\n      required:\n        - key\n        - value\n    ExtensionList:\n      title: ExtensionList\n      type: object\n      description: \u003e-\n        Data model for the complex type ExtensionList. An optional list of\n        extensions, specific to deployment.\n      properties:\n        extension:\n          type: array\n          items:\n            $ref: '#/components/schemas/Extension'\n          minItems: 1\n          maxItems: 16\n          description: Number of Extension elements.\n      required:\n        - extension\n    ErrorInformation:\n      title: ErrorInformation\n      type: object\n      description: Data model for the complex type ErrorInformation.\n      properties:\n        errorCode:\n          $ref: '#/components/schemas/ErrorCode'\n        errorDescription:\n          $ref: '#/components/schemas/ErrorDescription'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - errorCode\n        - errorDescription\n    ErrorInformationResponse:\n      title: ErrorInformationResponse\n      type: object\n      description: \u003e-\n        Data model for the complex type object that contains an optional element\n        ErrorInformation used along with 4xx and 5xx responses.\n      properties:\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n    Name:\n      title: Name\n      type: string\n      pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n      description: \u003e-\n        The API data type Name is a JSON String, restricted by a regular\n        expression to avoid characters which are generally not used in a name.\n\n\n        Regular Expression - The regular expression for restricting the Name\n        type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a\n        string consisting of whitespace only, all Unicode characters are\n        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)\n        and space characters ( ).\n\n\n        **Note:** In some programming languages, Unicode support must be\n        specifically enabled. For example, if Java is used, the flag\n        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.\n    AccountId:\n      title: AccountId\n      type: string\n      description: \u003e\n        A long-lived unique account identifier provided by the DFSP. This MUST\n        NOT\n\n        be Bank Account Number or anything that may expose a User's private bank\n\n        account information.\n      pattern: '^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$'\n      minLength: 1\n      maxLength: 1023\n    Currency:\n      title: Currency\n      description: \u003e-\n        The currency codes defined in [ISO\n        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter\n        alphabetic codes are used as the standard naming representation for\n        currencies.\n      type: string\n      minLength: 3\n      maxLength: 3\n      enum:\n        - AED\n        - AFN\n        - ALL\n        - AMD\n        - ANG\n        - AOA\n        - ARS\n        - AUD\n        - AWG\n        - AZN\n        - BAM\n        - BBD\n        - BDT\n        - BGN\n        - BHD\n        - BIF\n        - BMD\n        - BND\n        - BOB\n        - BRL\n        - BSD\n        - BTN\n        - BWP\n        - BYN\n        - BZD\n        - CAD\n        - CDF\n        - CHF\n        - CLP\n        - CNY\n        - COP\n        - CRC\n        - CUC\n        - CUP\n        - CVE\n        - CZK\n        - DJF\n        - DKK\n        - DOP\n        - DZD\n        - EGP\n        - ERN\n        - ETB\n        - EUR\n        - FJD\n        - FKP\n        - GBP\n        - GEL\n        - GGP\n        - GHS\n        - GIP\n        - GMD\n        - GNF\n        - GTQ\n        - GYD\n        - HKD\n        - HNL\n        - HRK\n        - HTG\n        - HUF\n        - IDR\n        - ILS\n        - IMP\n        - INR\n        - IQD\n        - IRR\n        - ISK\n        - JEP\n        - JMD\n        - JOD\n        - JPY\n        - KES\n        - KGS\n        - KHR\n        - KMF\n        - KPW\n        - KRW\n        - KWD\n        - KYD\n        - KZT\n        - LAK\n        - LBP\n        - LKR\n        - LRD\n        - LSL\n        - LYD\n        - MAD\n        - MDL\n        - MGA\n        - MKD\n        - MMK\n        - MNT\n        - MOP\n        - MRO\n        - MUR\n        - MVR\n        - MWK\n        - MXN\n        - MYR\n        - MZN\n        - NAD\n        - NGN\n        - NIO\n        - NOK\n        - NPR\n        - NZD\n        - OMR\n        - PAB\n        - PEN\n        - PGK\n        - PHP\n        - PKR\n        - PLN\n        - PYG\n        - QAR\n        - RON\n        - RSD\n        - RUB\n        - RWF\n        - SAR\n        - SBD\n        - SCR\n        - SDG\n        - SEK\n        - SGD\n        - SHP\n        - SLL\n        - SOS\n        - SPL\n        - SRD\n        - STD\n        - SVC\n        - SYP\n        - SZL\n        - THB\n        - TJS\n        - TMT\n        - TND\n        - TOP\n        - TRY\n        - TTD\n        - TVD\n        - TWD\n        - TZS\n        - UAH\n        - UGX\n        - USD\n        - UYU\n        - UZS\n        - VEF\n        - VND\n        - VUV\n        - WST\n        - XAF\n        - XCD\n        - XDR\n        - XOF\n        - XPF\n        - YER\n        - ZAR\n        - ZMW\n        - ZWD\n    Account:\n      title: Account\n      type: object\n      description: Data model for the complex type Account.\n      properties:\n        accountNickname:\n          $ref: '#/components/schemas/Name'\n        id:\n          $ref: '#/components/schemas/AccountId'\n        currency:\n          $ref: '#/components/schemas/Currency'\n      required:\n        - accountNickname\n        - id\n        - currency\n    AccountsIDPutResponse:\n      title: AccountsIDPutResponse\n      type: object\n      description: 'The object sent in a `PUT /accounts/{ID}` request.'\n      properties:\n        accounts:\n          type: array\n          items:\n            $ref: '#/components/schemas/Account'\n      required:\n        - accounts\n    ErrorInformationObject:\n      title: ErrorInformationObject\n      type: object\n      description: Data model for the complex type object that contains ErrorInformation.\n      properties:\n        errorInformation:\n          $ref: '#/components/schemas/ErrorInformation'\n      required:\n        - errorInformation\n    AuthenticationType:\n      title: AuthenticationType\n      type: string\n      enum:\n        - OTP\n        - QRCODE\n        - U2F\n      description: |-\n        Below are the allowed values for the enumeration AuthenticationType.\n        - OTP - One-time password generated by the Payer FSP.\n        - QRCODE - QR code used as One Time Password.\n        - U2F - U2F is a new addition isolated to Thirdparty stream.\n    Integer:\n      title: Integer\n      type: string\n      pattern: '^[1-9]\\d*$'\n      description: \u003e-\n        The API data type Integer is a JSON String consisting of digits only.\n        Negative numbers and leading zeroes are not allowed. The data type is\n        always limited to a specific number of digits.\n    Amount:\n      title: Amount\n      type: string\n      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'\n      description: \u003e-\n        The API data type Amount is a JSON String in a canonical format that is\n        restricted by a regular expression for interoperability reasons. This\n        pattern does not allow any trailing zeroes at all, but allows an amount\n        without a minor currency unit. It also only allows four digits in the\n        minor currency unit; a negative value is not allowed. Using more than 18\n        digits in the major currency unit is not allowed.\n      example: '123.45'\n    Money:\n      title: Money\n      type: object\n      description: Data model for the complex type Money.\n      properties:\n        currency:\n          $ref: '#/components/schemas/Currency'\n        amount:\n          $ref: '#/components/schemas/Amount'\n      required:\n        - currency\n        - amount\n    CorrelationId:\n      title: CorrelationId\n      type: string\n      pattern: \u003e-\n        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\n      description: \u003e-\n        Identifier that correlates all messages of the same sequence. The API\n        data type UUID (Universally Unique Identifier) is a JSON String in\n        canonical format, conforming to [RFC\n        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a\n        regular expression for interoperability reasons. A UUID is always 36\n        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).\n      example: b51ec534-ee48-4575-b6a9-ead2955b8069\n    DateTime:\n      title: DateTime\n      type: string\n      pattern: \u003e-\n        ^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$\n      description: \u003e-\n        The API data type DateTime is a JSON String in a lexical format that is\n        restricted by a regular expression for interoperability reasons. The\n        format is according to [ISO\n        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed\n        in a combined date, time and time zone format. A more readable version\n        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are\n        \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z\n        indicates Zulu time zone, same as UTC).\n      example: '2016-05-24T08:38:08.699-04:00'\n    Latitude:\n      title: Latitude\n      type: string\n      pattern: \u003e-\n        ^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$\n      description: \u003e-\n        The API data type Latitude is a JSON String in a lexical format that is\n        restricted by a regular expression for interoperability reasons.\n      example: '+45.4215'\n    Longitude:\n      title: Longitude\n      type: string\n      pattern: \u003e-\n        ^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$\n      description: \u003e-\n        The API data type Longitude is a JSON String in a lexical format that is\n        restricted by a regular expression for interoperability reasons.\n      example: '+75.6972'\n    GeoCode:\n      title: GeoCode\n      type: object\n      description: \u003e-\n        Data model for the complex type GeoCode. Indicates the geographic\n        location from where the transaction was initiated.\n      properties:\n        latitude:\n          $ref: '#/components/schemas/Latitude'\n        longitude:\n          $ref: '#/components/schemas/Longitude'\n      required:\n        - latitude\n        - longitude\n    IlpPacket:\n      title: IlpPacket\n      type: string\n      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n      minLength: 1\n      maxLength: 32768\n      description: Information for recipient (transport layer information).\n      example: \u003e-\n        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA\n    IlpCondition:\n      title: IlpCondition\n      type: string\n      pattern: '^[A-Za-z0-9-_]{43}$'\n      maxLength: 48\n      description: Condition that must be attached to the transfer by the Payer.\n    QuotesIDPutResponse:\n      title: QuotesIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /quotes/{ID} callback.'\n      properties:\n        transferAmount:\n          $ref: '#/components/schemas/Money'\n        payeeReceiveAmount:\n          $ref: '#/components/schemas/Money'\n        payeeFspFee:\n          $ref: '#/components/schemas/Money'\n        payeeFspCommission:\n          $ref: '#/components/schemas/Money'\n        expiration:\n          $ref: '#/components/schemas/DateTime'\n        geoCode:\n          $ref: '#/components/schemas/GeoCode'\n        ilpPacket:\n          $ref: '#/components/schemas/IlpPacket'\n        condition:\n          $ref: '#/components/schemas/IlpCondition'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - transferAmount\n        - expiration\n        - ilpPacket\n        - condition\n    AuthorizationsPostRequest:\n      title: AuthorizationsPostRequest\n      description: POST /authorizations request object.\n      type: object\n      properties:\n        authenticationType:\n          $ref: '#/components/schemas/AuthenticationType'\n        retriesLeft:\n          $ref: '#/components/schemas/Integer'\n        amount:\n          $ref: '#/components/schemas/Money'\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionRequestId:\n          $ref: '#/components/schemas/CorrelationId'\n        quote:\n          $ref: '#/components/schemas/QuotesIDPutResponse'\n      required:\n        - authenticationType\n        - retriesLeft\n        - amount\n        - transactionId\n        - transactionRequestId\n        - quote\n      additionalProperties: false\n    ConsentScopeType:\n      title: ConsentScopeType\n      type: string\n      enum:\n        - accounts.getBalance\n        - accounts.transfer\n      description: |\n        The scopes requested for a ConsentRequest.\n        - \"accounts.getBalance\" - Get the balance of a given account.\n        - \"accounts.transfer\" - Initiate a transfer from an account.\n    Scope:\n      title: Scope\n      type: object\n      description: Scope + Account Identifier mapping for a Consent.\n      example: |\n        {\n          accountId: \"dfsp.username.5678\",\n          actions: [ \"accounts.transfer\", \"accounts.getBalance\" ]\n        }\n      properties:\n        accountId:\n          $ref: '#/components/schemas/AccountId'\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsentScopeType'\n      required:\n        - accountId\n        - actions\n    ConsentRequestChannelTypeWeb:\n      title: ConsentRequestChannelTypeWeb\n      type: string\n      enum:\n        - WEB\n      description: |\n        The web auth channel being used for PUT consentRequest/{ID} request.\n    ConsentRequestsIDPutResponseWeb:\n      title: ConsentRequestsIDPutResponseWeb\n      type: object\n      description: \u003e\n        The object sent in a `PUT /consentRequests/{ID}` request.\n\n\n        Schema used in the request consent phase of the account linking web\n        flow,\n\n        the result is the PISP being instructed on a specific URL where this\n\n        supposed user should be redirected. This URL should be a place where\n\n        the user can prove their identity (e.g., by logging in).\n      properties:\n        consentRequestId:\n          $ref: '#/components/schemas/CorrelationId'\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n        authChannels:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsentRequestChannelTypeWeb'\n        callbackUri:\n          type: string\n          description: \u003e-\n            The callback uri that the user will be redirected to after\n            completing the WEB auth channel.\n        authUri:\n          type: string\n          description: \u003e-\n            The callback uri that the pisp app redirects to for user to complete\n            their login.\n      required:\n        - consentRequestId\n        - scopes\n        - authChannels\n        - callbackUri\n        - authUri\n      additionalProperties: false\n    ConsentRequestChannelTypeOTP:\n      title: ConsentRequestChannelTypeOTP\n      type: string\n      enum:\n        - OTP\n      description: |\n        The OTP auth channel being used for PUT consentRequest/{ID} request.\n    ConsentRequestsIDPutResponseOTP:\n      title: ConsentRequestsIDPutResponseOTP\n      type: object\n      description: \u003e\n        The object sent in a `PUT /consentRequests/{ID}` request.\n\n\n        Schema used in the request consent phase of the account linking OTP/SMS\n        flow.\n      properties:\n        consentRequestId:\n          $ref: '#/components/schemas/CorrelationId'\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n        authChannels:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsentRequestChannelTypeOTP'\n        callbackUri:\n          type: string\n          description: \u003e-\n            The callback uri that the user will be redirected to after\n            completing the WEB auth channel.\n      required:\n        - consentRequestId\n        - scopes\n        - authChannels\n        - callbackUri\n      additionalProperties: false\n    ConsentRequestsIDPatchRequest:\n      title: ConsentRequestsIDPatchRequest\n      type: object\n      description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'\n      properties:\n        authToken:\n          type: string\n      required:\n        - authToken\n    CredentialType:\n      title: CredentialType\n      type: string\n      enum:\n        - FIDO\n      description: |\n        The type of the Credential.\n        - \"FIDO\" - A FIDO public/private keypair\n    FIDOPublicKeyCredential:\n      title: FIDOPublicKeyCredential\n      type: object\n      description: \u003e\n        An object sent in a `PUT /consents/{ID}` request.\n\n        Based on https://w3c.github.io/webauthn/#iface-pkcredential\n\n        and mostly on: https://webauthn.guide/#registration\n\n        AuthenticatorAttestationResponse\n\n        https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject\n      properties:\n        id:\n          type: string\n          description: |\n            credential id: identifier of pair of keys, base64 encoded\n            https://w3c.github.io/webauthn/#ref-for-dom-credential-id\n          minLength: 59\n          maxLength: 118\n        rawId:\n          type: string\n          description: |\n            raw credential id: identifier of pair of keys, base64 encoded\n          minLength: 59\n          maxLength: 118\n        response:\n          type: object\n          description: |\n            AuthenticatorAttestationResponse\n          properties:\n            clientDataJSON:\n              type: string\n              description: |\n                JSON string with client data\n              minLength: 121\n              maxLength: 512\n            attestationObject:\n              type: string\n              description: |\n                CBOR.encoded attestation object\n              minLength: 306\n              maxLength: 2048\n          required:\n            - clientDataJSON\n            - attestationObject\n          additionalProperties: false\n        type:\n          type: string\n          description: 'response type, we need only the type of public-key'\n          enum:\n            - public-key\n      required:\n        - id\n        - rawId\n        - response\n        - type\n      additionalProperties: false\n    SignedCredential:\n      title: SignedCredential\n      type: object\n      description: \u003e\n        A credential used to allow a user to prove their identity and access\n\n        to an account with a DFSP.\n\n\n        SignedCredential is a special formatting of the credential to allow us\n        to be\n\n        more explicit about the `status` field - it should only ever be PENDING\n        when\n\n        updating a credential.\n      properties:\n        credentialType:\n          $ref: '#/components/schemas/CredentialType'\n        status:\n          type: string\n          enum:\n            - PENDING\n          description: The challenge has signed but not yet verified.\n        payload:\n          $ref: '#/components/schemas/FIDOPublicKeyCredential'\n      required:\n        - credentialType\n        - status\n        - payload\n      additionalProperties: false\n    ConsentsPostRequestAUTH:\n      title: ConsentPostRequestAUTH\n      type: object\n      description: \u003e\n        The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to\n        store registered consent with PublicKey\n\n        and whatever needed to perform authorization validation later\n      properties:\n        consentId:\n          allOf:\n            - $ref: '#/components/schemas/CorrelationId'\n          description: |\n            Common ID between the PISP and FSP for the Consent object\n            decided by the DFSP who creates the Consent\n            This field is REQUIRED for POST /consent.\n            creation of this Consent.\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n        credential:\n          allOf:\n            - $ref: '#/components/schemas/SignedCredential'\n      required:\n        - consentId\n        - scopes\n        - credential\n      additionalProperties: false\n    ConsentsPostRequestPISP:\n      title: ConsentPostRequestPISP\n      type: object\n      description: \u003e-\n        The object sent in a `POST /consents` request to PISP by DFSP to ask for\n        delivering the credential object.\n      properties:\n        consentId:\n          allOf:\n            - $ref: '#/components/schemas/CorrelationId'\n          description: |\n            Common ID between the PISP and FSP for the Consent object\n            decided by the DFSP who creates the Consent\n            This field is REQUIRED for POST /consent.\n        consentRequestId:\n          allOf:\n            - $ref: '#/components/schemas/CorrelationId'\n          description: |\n            The id of the ConsentRequest that was used to initiate the\n            creation of this Consent.\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n      required:\n        - consentId\n        - scopes\n        - consentRequestId\n    ConsentsIDPutResponseSigned:\n      title: ConsentsIDPutResponseSigned\n      type: object\n      description: \u003e\n        The HTTP request `PUT /consents/{ID}` is used by the PISP to update a\n        Consent with a signed challenge and register a credential.\n\n        Called by a `PISP` to after signing a challenge. Sent to a DFSP for\n        verification.\n      properties:\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n        credential:\n          $ref: '#/components/schemas/SignedCredential'\n      required:\n        - scopes\n        - credential\n      additionalProperties: false\n    VerifiedCredential:\n      title: VerifiedCredential\n      type: object\n      description: \u003e\n        A credential used to allow a user to prove their identity and access\n\n        to an account with a DFSP.\n\n\n        VerifiedCredential is a special formatting of the credential to allow us\n        to be\n\n        more explicit about the `status` field - it should only ever be VERIFIED\n        when\n\n        updating a credential.\n      properties:\n        credentialType:\n          $ref: '#/components/schemas/CredentialType'\n        status:\n          type: string\n          enum:\n            - VERIFIED\n          description: 'The Credential is valid, and ready to be used by the PISP.'\n        payload:\n          $ref: '#/components/schemas/FIDOPublicKeyCredential'\n      required:\n        - credentialType\n        - status\n        - payload\n      additionalProperties: false\n    ConsentsIDPutResponseVerified:\n      title: ConsentsIDPutResponseVerified\n      type: object\n      description: \u003e\n        The HTTP request `PUT /consents/{ID}` is used by the DFSP or\n        Auth-Service to update a Consent object once it has been Verified.\n\n        Called by a `auth-service` to notify a DFSP that a credential has been\n        verified and registered.\n      properties:\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Scope'\n        credential:\n          $ref: '#/components/schemas/VerifiedCredential'\n      required:\n        - scopes\n        - credential\n      additionalProperties: false\n    ConsentStatusTypeVerified:\n      title: ConsentStatusType\n      type: string\n      enum:\n        - VERIFIED\n      description: |\n        The status of the Consent.\n        - \"VERIFIED\" - The Consent is valid and verified.\n    ConsentsIDPatchResponseVerified:\n      title: ConsentsIDPatchResponseVerified\n      description: |\n        PATCH /consents/{ID} request object.\n\n        Sent by the DFSP to the PISP when a consent is verified.\n        Used in the \"Register Credential\" part of the Account linking flow.\n      type: object\n      properties:\n        credential:\n          type: object\n          properties:\n            status:\n              $ref: '#/components/schemas/ConsentStatusTypeVerified'\n          required:\n            - status\n      required:\n        - credential\n    ConsentStatusTypeRevoked:\n      title: ConsentStatusType\n      type: string\n      enum:\n        - REVOKED\n      description: |\n        The status of the Consent.\n        - \"REVOKED\" - The Consent is no longer valid and has been revoked.\n    ConsentsIDPatchResponseRevoked:\n      title: ConsentsIDPatchResponseRevoked\n      description: |\n        PATCH /consents/{ID} request object.\n\n        Sent to both the PISP and DFSP when a consent is revoked.\n        Used in the \"Unlinking\" part of the Account Unlinking flow.\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/ConsentStatusTypeRevoked'\n        revokedAt:\n          $ref: '#/components/schemas/DateTime'\n      required:\n        - status\n        - revokedAt\n    TransactionRequestState:\n      title: TransactionRequestState\n      type: string\n      enum:\n        - RECEIVED\n        - PENDING\n        - ACCEPTED\n        - REJECTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n        - PENDING - Payer FSP has sent the transaction request to the Payer.\n        - ACCEPTED - Payer has approved the transaction.\n        - REJECTED - Payer has rejected the transaction.\n      example: RECEIVED\n    ThirdpartyRequestsTransactionsIDPutResponse:\n      title: ThirdpartyRequestsTransactionsIDPutResponse\n      type: object\n      description: \u003e-\n        The object sent in the PUT /thirdPartyRequests/transactions/{ID}\n        request.\n      properties:\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionRequestState:\n          $ref: '#/components/schemas/TransactionRequestState'\n      required:\n        - transactionId\n        - transactionRequestState\n    TransactionState:\n      title: TransactionState\n      type: string\n      enum:\n        - RECEIVED\n        - PENDING\n        - COMPLETED\n        - REJECTED\n      description: |-\n        Below are the allowed values for the enumeration.\n        - RECEIVED - Payee FSP has received the transaction from the Payer FSP.\n        - PENDING - Payee FSP has validated the transaction.\n        - COMPLETED - Payee FSP has successfully performed the transaction.\n        - REJECTED - Payee FSP has failed to perform the transaction.\n      example: RECEIVED\n    ThirdpartyRequestsTransactionsIDPatchResponse:\n      title: ThirdpartyRequestsTransactionsIDPatchResponse\n      type: object\n      description: \u003e-\n        The object sent in the PATCH /thirdpartyRequests/transactions/{ID}\n        callback.\n      properties:\n        transactionId:\n          $ref: '#/components/schemas/CorrelationId'\n        transactionRequestState:\n          $ref: '#/components/schemas/TransactionRequestState'\n        transactionState:\n          $ref: '#/components/schemas/TransactionState'\n      required:\n        - transactionId\n        - transactionRequestState\n        - transactionState\n    PartyIdType:\n      title: PartyIdType\n      type: string\n      enum:\n        - MSISDN\n        - EMAIL\n        - PERSONAL_ID\n        - BUSINESS\n        - DEVICE\n        - ACCOUNT_ID\n        - IBAN\n        - ALIAS\n      description: \u003e-\n        Below are the allowed values for the enumeration.\n\n        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory\n        Number, that is, the phone number) is used as reference to a\n        participant. The MSISDN identifier should be in international format\n        according to the [ITU-T E.164\n        standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the\n        MSISDN may be prefixed by a single plus sign, indicating the\n        international prefix.\n\n        - EMAIL - An email is used as reference to a participant. The format of\n        the email should be according to the informational [RFC\n        3696](https://tools.ietf.org/html/rfc3696).\n\n        - PERSONAL_ID - A personal identifier is used as reference to a\n        participant. Examples of personal identification are passport number,\n        birth certificate number, and national registration number. The\n        identifier number is added in the PartyIdentifier element. The personal\n        identifier type is added in the PartySubIdOrType element.\n\n        - BUSINESS - A specific Business (for example, an organization or a\n        company) is used as reference to a participant. The BUSINESS identifier\n        can be in any format. To make a transaction connected to a specific\n        username or bill number in a Business, the PartySubIdOrType element\n        should be used.\n\n        - DEVICE - A specific device (for example, a POS or ATM) ID connected to\n        a specific business or organization is used as reference to a Party. For\n        referencing a specific device under a specific business or organization,\n        use the PartySubIdOrType element.\n\n        - ACCOUNT_ID - A bank account number or FSP account ID should be used as\n        reference to a participant. The ACCOUNT_ID identifier can be in any\n        format, as formats can greatly differ depending on country and FSP.\n\n        - IBAN - A bank account number or FSP account ID is used as reference to\n        a participant. The IBAN identifier can consist of up to 34 alphanumeric\n        characters and should be entered without whitespace.\n\n        - ALIAS An alias is used as reference to a participant. The alias should\n        be created in the FSP as an alternative reference to an account owner.\n        Another example of an alias is a username in the FSP system. The ALIAS\n        identifier can be in any format. It is also possible to use the\n        PartySubIdOrType element for identifying an account under an Alias\n        defined by the PartyIdentifier.\n    PartyIdentifier:\n      title: PartyIdentifier\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Identifier of the Party.\n      example: '16135551212'\n    PartySubIdOrType:\n      title: PartySubIdOrType\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: \u003e-\n        Either a sub-identifier of a PartyIdentifier, or a sub-type of the\n        PartyIdType, normally a PersonalIdentifierType.\n    FspId:\n      title: FspId\n      type: string\n      minLength: 1\n      maxLength: 32\n      description: FSP identifier.\n    PartyIdInfo:\n      title: PartyIdInfo\n      type: object\n      description: \u003e-\n        Data model for the complex type PartyIdInfo. An ExtensionList element\n        has been added to this reqeust in version v1.1\n      properties:\n        partyIdType:\n          $ref: '#/components/schemas/PartyIdType'\n        partyIdentifier:\n          $ref: '#/components/schemas/PartyIdentifier'\n        partySubIdOrType:\n          $ref: '#/components/schemas/PartySubIdOrType'\n        fspId:\n          $ref: '#/components/schemas/FspId'\n        extensionList:\n          $ref: '#/components/schemas/ExtensionList'\n      required:\n        - partyIdType\n        - partyIdentifier\n    MerchantClassificationCode:\n      title: MerchantClassificationCode\n      type: string\n      pattern: '^[\\d]{1,4}$'\n      description: \u003e-\n        A limited set of pre-defined numbers. This list would be a limited set\n        of numbers identifying a set of popular merchant types like School Fees,\n        Pubs and Restaurants, Groceries, etc.\n    PartyName:\n      title: PartyName\n      type: string\n      minLength: 1\n      maxLength: 128\n      description: Name of the Party. Could be a real name or a nickname.\n    FirstName:\n      title: FirstName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n      description: First name of the Party (Name Type).\n      example: Henrik\n    MiddleName:\n      title: MiddleName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n      description: Middle name of the Party (Name Type).\n      example: Johannes\n    LastName:\n      title: LastName\n      type: string\n      minLength: 1\n      maxLength: 128\n      pattern: '^(?!\\s*$)[\\w .,''-]{1,128}$'\n      description: Last name of the Party (Name Type).\n      example: Karlsson\n    PartyComplexName:\n      title: PartyComplexName\n      type: object\n      description: Data model for the complex type PartyComplexName.\n      properties:\n        firstName:\n          $ref: '#/components/schemas/FirstName'\n        middleName:\n          $ref: '#/components/schemas/MiddleName'\n        lastName:\n          $ref: '#/components/schemas/LastName'\n    DateOfBirth:\n      title: DateofBirth (type Date)\n      type: string\n      pattern: \u003e-\n        ^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$\n      description: Date of Birth of the Party.\n      example: '1966-06-16'\n    PartyPersonalInfo:\n      title: PartyPersonalInfo\n      type: object\n      description: Data model for the complex type PartyPersonalInfo.\n      properties:\n        complexName:\n          $ref: '#/components/schemas/PartyComplexName'\n        dateOfBirth:\n          $ref: '#/components/schemas/DateOfBirth'\n    Party:\n      title: Party\n      type: object\n      description: Data model for the complex type Party.\n      properties:\n        partyIdInfo:\n          $ref: '#/components/schemas/PartyIdInfo'\n        merchantClassificationCode:\n          $ref: '#/components/schemas/MerchantClassificationCode'\n        name:\n          $ref: '#/components/schemas/PartyName'\n        personalInfo:\n          $ref: '#/components/schemas/PartyPersonalInfo'\n      required:\n        - partyIdInfo\n    PartiesTypeIDPutResponse:\n      title: PartiesTypeIDPutResponse\n      type: object\n      description: 'The object sent in the PUT /parties/{Type}/{ID} callback.'\n      properties:\n        party:\n          $ref: '#/components/schemas/Party'\n      required:\n        - party\n    ServicesServiceTypePutResponse:\n      title: ServicesServiceTypePutResponse\n      type: object\n      description: 'The object sent in a `PUT /services/{ServiceType}` request.'\n      properties:\n        providers:\n          type: array\n          items:\n            $ref: '#/components/schemas/FspId'\n      required:\n        - providers\n"
		}
	},
	"Error": "buildIR: make ir: path \"/accounts/{ID}\": put: requestBody: contents: application/json: schema: field accounts: item: field accountNickname: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?!`",
	"NotImplemented": [
		"allOf",
		"discriminator inference"
	]
}