{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/JHUAPL/PINE"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/pine/backend/api/openapi.yaml",
			"byteSize": 154033,
			"content": "# (C) 2021 The Johns Hopkins University Applied Physics Laboratory LLC.\n\nopenapi: 3.0.2\ninfo:\n  title: PINE\n  description: \u003e\n    PINE: Pmap Interface for Nlp Experimentation\n\n\n    PINE is a Natural Language Processing (NLP) tool designed for integration\n    with the\n\n    Precision Medicine Analytics Platform (PMAP), developed at the Johns Hopkins\n    University Applied\n\n    Physics Laboratory (JHU/APL).\n\n\n    PINE consists of a web UI along with backing services.\n  version: 1.0.1\n  contact:\n    name: Michael Harrity\n    email: Michael.Harrity@jhuapl.edu\n  license:\n    name: AGPL-3.0\n    url: 'https://github.com/JHUAPL/PINE/blob/master/LICENSE'\nservers:\n  - url: /api\n    description: This server.\npaths:\n  /admin/users:\n    get:\n      summary: Get All User Information\n      description: \u003e\n        Get a list of all users (and details: id, email, password hash).\n\n\n        Example: `curl -X GET http://localhost:5000/admin/users --cookie\n        admin.cookie`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_get_users\n      tags:\n        - admin\n      responses:\n        '200':\n          description: Returned list of user details.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties: \u0026ref_2\n                    _id:\n                      type: string\n                    _created:\n                      type: string\n                    description:\n                      type: string\n                    email:\n                      type: string\n                    firstname:\n                      type: string\n                    lastname:\n                      type: string\n                    passwdhash:\n                      type: string\n                    role:\n                      type: array\n                      items:\n                        type: string\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: \u0026ref_0\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: \u0026ref_1\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n    post:\n      summary: Create New User\n      description: \u003e\n        Create a new user.\n\n\n        Example: `curl -X Post http://localhost:5000/admin/users -d\n        '{\"id\":\"joe\", \"passwd\":\"mypass\", \"email\":\"joe@pine.jhuapl.edu\",\n        \"description\": \"\", \"firstname\":\"joe\", \"lastname\":\"jones\"}' -H\n        \"Content-type:application/json\" --cookie admin.cookie`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_add_user\n      tags:\n        - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \u0026ref_40\n                id:\n                  type: string\n                email:\n                  type: string\n                passwd:\n                  type: string\n                description:\n                  type: string\n                firstname:\n                  type: string\n                lastname:\n                  type: string\n                role:\n                  description: The role (for permissions) of the user.\n                  type: array\n                  items: \u0026ref_4\n                    type: string\n                    enum:\n                      - administrator\n                      - user\n              required: \u0026ref_41\n                - id\n                - email\n                - passwd\n                - firstname\n                - lastname\n                - roles\n      responses:\n        '200':\n          description: Return id info of newly created user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  description: \u003e\n                    This object is returned when doing actions like modifying a\n                    document or collection.  It contains the ID of the object\n                    and some other information from the database.\n                  allOf: \u0026ref_5\n                    - type: object\n                      properties: \u0026ref_8\n                        _etag:\n                          type: string\n                    - type: object\n                      properties:\n                        _status:\n                          type: string\n                        _id:\n                          type: string\n                        _updated:\n                          type: string\n                          format: date-time\n                        _created:\n                          type: string\n                          format: date-time\n                        _links:\n                          type: object\n                          properties: \u0026ref_9\n                            parent:\n                              type: object\n                              properties:\n                                title:\n                                  type: string\n                                href:\n                                  type: string\n                            self:\n                              type: object\n                              properties:\n                                title:\n                                  type: string\n                                href:\n                                  type: string\n        '400':\n          description: Input parameters are missing/invalid.\n          content: \u0026ref_6\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '409':\n          description: User with that ID/email already exists.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n  '/admin/users/{user_id}':\n    get:\n      summary: Get User Details\n      description: \u003e\n        Get details (id, email, password hash...) of a certain user.\n\n\n        Example: `curl -X GET http://localhost:5000/admin/users/ada --cookie\n        admin.cookie`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_get_user\n      tags:\n        - admin\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: ID of the user on which to operate.\n          schema: \u0026ref_3\n            type: string\n      responses:\n        '200':\n          description: Successfully found the user and returned their details.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_2\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '404':\n          description: No user found with that ID.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n    put:\n      summary: Update user details.\n      description: \u003e\n        Update user details.\n\n\n        Example: `curl -X PUT http://localhost:5000/admin/users/ada -d\n        '{\"_id\":\"ada\",\"description\":\"newdesc\", \"firstname\":\"newada\",\n        \"lastname\":\"adalast\",\n        \"_etag\":\"1c12354ee74f5d5732231ac5034f7915fb167244\",\n        \"email\":\"ada@pine.jhuapl.edu\"}' -H \"Content-type:application/json\"\n        --cookie admin.cookie`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_update_user\n      tags:\n        - admin\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: ID of the user on which to operate.\n          schema: *ref_3\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \u0026ref_42\n                _id:\n                  type: string\n                _etag:\n                  type: string\n                description:\n                  type: string\n                firstname:\n                  type: string\n                lastname:\n                  type: string\n                email:\n                  type: string\n                  description: 'If this is not included, you wont be able to log in.'\n                passwdhash:\n                  type: string\n                  description: Setting this manually might break the password.\n                role:\n                  description: The role (for permissions) of the user.\n                  type: array\n                  items: *ref_4\n              required: \u0026ref_43\n                - _id\n                - _etag\n                - firstname\n                - lastname\n                - passwdhash\n                - role\n      responses:\n        '200':\n          description: Successfully changed user information\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '404':\n          description: No user found with that ID.\n        '412':\n          description: Given etag did not match the most updated stored one.\n          content: \u0026ref_59\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '422':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n    delete:\n      summary: Delete User\n      description: \u003e\n        Delete a user.\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_delete_user\n      tags:\n        - admin\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: ID of the user on which to operate.\n          schema: *ref_3\n      responses:\n        '204':\n          description: Successfully deleted user.\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '404':\n          description: No user found with that ID.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n  '/admin/users/{user_id}/password':\n    put:\n      summary: Update User Password\n      description: \u003e\n        Update the password of a user.\n\n\n        Example: `curl -X post http://localhost:5000/admin/users/ada/password -d\n        '{\"passwd\":\"newpass\"}' -H \"Content-type:application/json\" --cookie\n        admin.cookie`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_update_user_password\n      tags:\n        - admin\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: ID of the user on which to operate.\n          schema: *ref_3\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                passwd:\n                  type: string\n              required:\n                - passwd\n      responses:\n        '200':\n          description: Successfully changed user password\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '404':\n          description: No user found with that ID.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n  /admin/system/export:\n    get:\n      summary: Export Database\n      description: \u003e\n        Export the database to a zip file.\n\n\n        Example: `curl -X GET http://localhost:5000/admin/system/export --cookie\n        admin.cookie -v --output out.zip`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_system_export\n      tags:\n        - admin\n      responses:\n        '200':\n          description: Successfully exported database\n          content:\n            application/gzip: {}\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n  /admin/system/import:\n    put:\n      summary: Import Database (Update)\n      description: \u003e\n        Import the database given in request body.  This will _update_ and not\n        _replace_ the\n\n        database.\n\n\n        Example: `curl -X PUT http://localhost:5000/admin/system/import --cookie\n        admin.cookie -F \"file=@/home/pine/out.zip\"`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_system_import_put\n      tags:\n        - admin\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '200':\n          description: Whether the operation succeeded or failed.\n          content: \u0026ref_7\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n        '400':\n          description: \u003e-\n            The loading of data was wrong. Should be a gz, like what is\n            exported.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '422':\n          description: The file argument was not present.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n    post:\n      summary: Import Database (Replace)\n      description: \u003e\n        Import the database given in request body.  This will _replace_ and not\n        _update_ the\n\n        database.\n\n\n        Example: `curl -X POST http://localhost:5000/admin/system/import\n        --cookie admin.cookie -F \"file=@/home/pine/out.zip\"`\n\n\n        _Note_: this endpoint requires the logged in user to be an admin and is\n        only relevant if\n\n        the auth module supports it.\n      operationId: admin_system_import_post\n      tags:\n        - admin\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '200':\n          description: Whether the operation succeeded or failed.\n          content: *ref_7\n        '400':\n          description: \u003e-\n            The loading of data was wrong. Should be a gz, like what is\n            exported.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: 'Authentication failed, not logged in or not an admin.'\n          content: *ref_0\n        '422':\n          description: The file argument was not present.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n  '/annotations/mine/by_document_id/{doc_id}':\n    get:\n      summary: Get My Document Annotations\n      description: \u003e\n        Get a list of annotations done by the logged in user on a document.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/annotations/mine/by_document_id/60d08052f2cb44c51e0af0f1\n        --cookie session.cookie`\n      operationId: annotations_get_mine\n      tags:\n        - annotations\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: \u0026ref_10\n            type: string\n      responses:\n        '200':\n          description: Successfully found document and got annotations.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_15\n                  _items:\n                    type: array\n                    items:\n                      description: \u003e\n                        This is the log of annotations by a specific user.  A\n                        document might have 0, 1, or multiple of these based on\n                        how many users annotated.\n                      allOf: \u0026ref_57\n                        - allOf: \u0026ref_30\n                            - type: object\n                              properties: *ref_8\n                            - type: object\n                              properties:\n                                _version:\n                                  type: integer\n                                _latest_version:\n                                  type: integer\n                        - type: object\n                          properties:\n                            _id:\n                              type: string\n                            creator_id:\n                              type: string\n                            collection_id:\n                              type: string\n                            document_id:\n                              type: string\n                            annotation:\n                              type: array\n                              items:\n                                anyOf:\n                                  - type: string\n                                    example: documentlabel\n                                    description: String for labels on the entire document.\n                                  - type: array\n                                    items:\n                                      anyOf:\n                                        - type: string\n                                        - type: integer\n                                    example:\n                                      - 1\n                                      - 2\n                                      - textlabel\n                                    description: \u003e-\n                                      Array for individual annotations\n                                      [start_index, end_index, label]\n                  _links:\n                    type: object\n                    properties: *ref_9\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: \u0026ref_11\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '404':\n          description: Document with given ID was not found.\n          content: \u0026ref_12\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n    post:\n      summary: Save My Annotations\n      description: \u003e\n        Change annotations of a document.\n\n\n        Example: `curl -X PUT\n        http://localhost:5000/annotations/mine/by_document_id/60d08052f2cb44c51e0af0f1\n        --cookie session.cookie -H \"Content-type: application/json\" -d\n        '{\"doc\":[\"sci.crypt\",\n        \"talk.politics.misc\"],\"ner\":[{\"end\":365,\"start\":346, \"label\":\"sci.med\"},\n        {\"start\":475, \"end\":530, \"label\":\"alt.atheism\"}]}'`\n\n\n        _Note_: start or end indices in the middle of words might make the UI\n        not show the label.\n\n        Also, invalid labels are not checked and might cause the UI to freeze.\n      operationId: annotations_save_mine\n      tags:\n        - annotations\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n        - name: update_iaa\n          in: query\n          required: false\n          description: Whether to also update IAA reports.\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: The labels to add to the document.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \u0026ref_13\n                doc:\n                  description: Document-level annotations.\n                  type: array\n                  items:\n                    description: Annotation label.\n                    type: string\n                ner:\n                  description: NER annotations.\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      start:\n                        description: 'Start index, inclusive.'\n                        type: integer\n                      end:\n                        description: 'End index, exclusive.'\n                        type: integer\n                      label:\n                        description: Annotation label.\n                        type: string\n              example: \u0026ref_14\n                doc:\n                  - label1\n                  - label2\n                ner:\n                  - start: 0\n                    end: 10\n                    label: in-text-label\n      responses:\n        '200':\n          description: \u003e-\n            Successfully found document and changed annotations (returns\n            doc_id).\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/annotations/mine/by_collection_id/{collection_id}':\n    post:\n      summary: Set Collection Annotations\n      description: \u003e\n        Modify annotations of certain documents in a given collection.\n\n\n        Example: `curl -X POST\n        http://localhost:5000/annotations/mine/by_collection_id/60d32ba28d34cf656fed503f\n        --cookie session.cookie -H \"Content-type: application/json\" -d\n        '{\"60d32ba48d34cf656fed504b\": {\"doc\":[\"sci.crypt\",\n        \"talk.politics.misc\"],\"ner\":[[0,4,\"sci.med\"], [0,4,\"alt.atheism\"]]},\n        \"60d32ba48d34cf656fed504c\": {\"doc\":[], \"ner\":[[0,4,\"sci.med\"]]}}'`\n      operationId: annotations_collection\n      tags:\n        - annotations\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: \u0026ref_21\n            type: string\n        - name: batch_mode\n          required: true\n          description: \u003e\n            Whether or not to send all annotations to the database as one batch\n            or individually.\n\n\n            _Note_: Batch mode should ONLY be used if all of the documents have\n            not already been annotated.\n\n\n            The versioning of eve will be messed up if batch mode annotates a\n            document with pre-existing annotations (even if old).\n\n\n            To be clear, even if a document had annotations that were deleted,\n            using batch mode on that document will cause problems.\n\n\n            Conversely, using individual mode (batch_mode = False) can always be\n            done, but will be slower.\n\n\n            Another issue with individual mode is with many documents, there\n            will be many backend queries, possibly getting rate limited.\n          schema:\n            type: boolean\n            default: true\n          in: query\n        - name: update_iaa\n          in: query\n          required: false\n          description: Whether to also update IAA reports.\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: The labels to add to the document.\n        required: true\n        content:\n          application/json:\n            schema:\n              description: Mapping from document ID to annotations object.\n              type: object\n              additionalProperties:\n                type: object\n                properties: *ref_13\n                example: *ref_14\n              example:\n                60d47b4bdbfddb3ca87c7971:\n                  doc:\n                    - label1\n                    - label2\n                  ner:\n                    - - 0\n                      - 10\n                      - label1\n                    - - 15\n                      - 18\n                      - label2\n      responses:\n        '200':\n          description: \u003e-\n            Successfully found document and changed annotations (returns\n            annotation ids).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: \u0026ref_23\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/annotations/others/by_document_id/{doc_id}':\n    get:\n      summary: Get Others' Document Annotations\n      description: \u003e\n        Get a list of annotations done by everyone but me on a document.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/annotations/others/by_document_id/60d08052f2cb44c51e0af0f1\n        --cookie session.cookie`\n      operationId: annotations_others\n      tags:\n        - annotations\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: Successfully found document and got annotations.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_15\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/annotations/by_document_id/{doc_id}':\n    get:\n      summary: Get All Document Annotations\n      description: \u003e\n        Get a list of annotations done by everyone on a document.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/annotations/by_document_id/60d08052f2cb44c51e0af0f1\n        --cookie session.cookie`\n      operationId: annotations_all\n      tags:\n        - annotations\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: Successfully found document and got annotations.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_15\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /auth/module:\n    get:\n      summary: Get Auth Module\n      description: |\n        Get the current auth module being used (vegas or eve).\n\n        Example: `curl -X GET http://localhost:5000/auth/module`\n      operationId: auth_get_module\n      tags:\n        - auth\n      responses:\n        '200':\n          description: Successfully got the auth module.\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - eve\n                  - vegas\n  /auth/flat:\n    get:\n      summary: Get Auth Is Flat\n      description: \u003e\n        Return true if the current auth module is flat.\n\n\n        \"Flat\" auth means, generally, there are no administrators and\n        permissions are generally on\n\n        the same \"level\".  Collection-level permissions for viewing/annotating\n        still apply, however.\n\n\n        Example: `curl -X GET http://localhost:5000/auth/flat`\n      operationId: auth_get_flat\n      tags:\n        - auth\n      responses:\n        '200':\n          description: Successfully return a boolean if the auth module was flat.\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /auth/can_manage_users:\n    get:\n      summary: Get Auth Can Manage Users\n      description: \u003e\n        Return true if the current auth module supports managing users.\n\n\n        If `true`, the auth module can change, add, and delete users.  If\n        `false`, users are managed\n\n        by an external system.\n\n\n        Example: `curl -X GET http://localhost:5000/auth/flat`\n      operationId: auth_get_manage\n      tags:\n        - auth\n      responses:\n        '200':\n          description: \u003e-\n            Successfully return a boolean if the auth module supports managing\n            users.\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /auth/logged_in_user:\n    get:\n      summary: Get Logged In User\n      description: \u003e\n        Get the currently logged in user (checks based on the session - need the\n        session cookie sent).\n\n        If there is no user logged, in `null` is returned.\n\n\n        Example: `curl -X GET http://localhost:5000/auth/logged_in_user --cookie\n        session.cookie`\n\n\n        Note that this operation does not REQUIRE the user to be logged in, but\n        it is marked as\n\n        requiring security so that the Swagger UI will send in whatever you have\n        configured.\n      operationId: auth_logged_in_user\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      tags:\n        - auth\n      responses:\n        '200':\n          description: \u003e-\n            Successfully returned the logged in user (or null if no session\n            cookie).\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: string\n                    nullable: true\n                    default: null\n                  - type: object\n                    properties: \u0026ref_18\n                      display_name:\n                        type: string\n                      id:\n                        type: string\n                      is_admin:\n                        type: boolean\n                      username:\n                        type: string\n                    example: \u0026ref_19\n                      display_name: Ada Lovelace\n                      id: ada\n                      is_admin: false\n                      username: ada@pine.jhuapl.edu\n  /auth/logged_in_user_details:\n    get:\n      summary: Get Logged In User Details\n      description: \u003e\n        Get the currently logged in user's details.\n\n\n        Example: `curl -X GET http://localhost:5000/auth/logged_in_user_details\n        --cookie session.cookie`\n      operationId: auth_user_details\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      tags:\n        - auth\n      responses:\n        '200':\n          description: Successfully returned the logged in user details.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_16\n                  description:\n                    type: string\n                  first_name:\n                    type: string\n                  last_name:\n                    type: string\n                example: \u0026ref_17\n                  first_name: Ada\n                  last_name: Lovelace\n                  description: The first computer programmer.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n    post:\n      summary: Update Logged In User Details with Eve\n      description: |\n        Updates the user details for the logged in user.\n\n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_update_user_details\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      tags:\n        - auth_eve\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: *ref_16\n              example: *ref_17\n      responses:\n        '200':\n          description: Successfully updated user details.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n  /auth/login_form:\n    get:\n      summary: Get the login form.\n      description: \u003e\n        For auth modules that use a form to login, this endpoint will return the\n        information needed\n\n        to present that form to the user and send back the necessary info in a\n        subsequent login\n\n        call.\n\n\n        Example: `curl -X GET http://localhost:5000/auth/login_form`\n      operationId: auth_login_form\n      tags:\n        - auth\n      responses:\n        '200':\n          description: Successfully returned the login form.\n          content:\n            application/json:\n              schema:\n                description: Information needed to display a login form.\n                type: object\n                properties: \u0026ref_44\n                  button_text:\n                    description: Text to set in the login button.\n                    type: string\n                  fields:\n                    description: Form fields to use.\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        display:\n                          description: Display name.\n                          type: string\n                        name:\n                          description: Form name.\n                          type: string\n                        type:\n                          description: Form type.\n                          type: string\n                example: \u0026ref_45\n                  button_text: Login\n                  fields:\n                    - display: Username or email\n                      name: username\n                      type: text\n                    - display: Password\n                      name: password\n                      type: password\n  /auth/logout:\n    post:\n      summary: Logout\n      description: \u003e\n        Logout of the current session.\n\n\n        Example: `curl -X POST http://localhost:5000/auth/logout --cookie\n        session.cookie`\n      operationId: auth_logout\n      tags:\n        - auth\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n      responses:\n        '200':\n          description: Successfully logged out.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n  /auth/login:\n    post:\n      summary: Login User\n      description: \u003e\n        Logs in user.  How this works depends on the auth module used.\n\n\n        For eve: this takes a request body consisting of the login form data.\n\n\n        For vegas: this takes in no parameters and returns the URL the caller\n        should redirect to.\n      operationId: auth_login\n      tags:\n        - auth_eve\n        - auth_vegas\n      parameters:\n        - name: return_to\n          in: query\n          required: false\n          description: 'For vegas auth only, a URL to return to after auth flow.'\n          schema:\n            type: string\n            format: url\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              description: Only for eve login.\n              type: object\n              properties: \u0026ref_46\n                username:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: \u003e\n            For eve: successfully logged in, returns user information.\n\n\n            For vegas: starts auth flow and returns the URL that the caller\n            should redirect to.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: object\n                    properties: *ref_18\n                    example: *ref_19\n                  - type: string\n                    format: url\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e-\n            Given user doesn't exist, password isn't set, or password doesn't\n            match.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n  /auth/users:\n    get:\n      summary: Get Eve Users\n      description: |\n        Gets all users that are registered with eve.\n\n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_users\n      tags:\n        - auth_eve\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      responses:\n        '200':\n          description: Returns all users.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties: *ref_18\n                  example: *ref_19\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n  /auth/logged_in_user_password:\n    post:\n      summary: Update Eve User Password\n      description: |\n        Updates the password of the currently logged in eve user.\n\n        _Note_: this endpoint is only exposed if using \"eve\" auth module.\n      operationId: auth_eve_update_password\n      tags:\n        - auth_eve\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \u0026ref_47\n                current_password:\n                  type: string\n                new_password:\n                  type: string\n      responses:\n        '200':\n          description: Successfully changed password.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: 'Not logged in, or current password doesn''t match.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n  /auth/authorize:\n    get:\n      summary: Authorize From Fragment\n      description: \u003e\n        Part of the OAuth flow, this will authorize based on passed-in query\n        parameters.\n\n\n        _Note_: this endpoint is only exposed if using \"vegas\" auth module.\n      operationId: auth_vegas_authorize_get\n      tags:\n        - auth_vegas\n      parameters:\n        - name: fragment\n          in: query\n          required: true\n          description: OAuth flow fragment.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Successfully logged in, returns user information.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_18\n                example: *ref_19\n        '400':\n          description: 'Fragment is not valid, or parsed token is not valid.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n    post:\n      summary: Authorize From Token\n      description: \u003e\n        Authorize diretly based on an obtained vegas token, outside the normal\n        OAuth flow.\n\n        This is meant to make it easy to authenticate using vegas and then use\n        this API outside of\n\n        the web UI.\n\n\n        _Note_: this endpoint is only exposed if using \"vegas\" auth module.\n      operationId: auth_vegas_authorize_post\n      tags:\n        - auth_vegas\n      requestBody:\n        description: Token obtained from Vegas.\n        required: true\n        content:\n          application/json:\n            schema:\n              description: An auth token obtained by Vegas out-of-band from PINE.\n              type: object\n              properties: \u0026ref_48\n                access_token:\n                  type: string\n                token_type:\n                  type: string\n                  example: bearer\n              additionalProperties: \u0026ref_49 {}\n      responses:\n        '200':\n          description: 'Successfully logged in, returns user information.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_18\n                example: *ref_19\n        '400':\n          description: Token is not valid.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n  /collections/unarchived:\n    get:\n      summary: Get Unarchived Collections\n      description: \u003e\n        Get all unarchived collections for logged in user.\n\n\n        Example: `curl http://localhost:5000/collections/unarchived --cookie\n        session.cookie`\n      operationId: collections_get_unarchived_all\n      tags:\n        - collections\n      responses:\n        '200':\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_20\n                  _items:\n                    type: array\n                    items:\n                      type: object\n                      properties: \u0026ref_22\n                        _id:\n                          type: string\n                        creator_id:\n                          type: string\n                        metadata:\n                          type: object\n                          additionalProperties: {}\n                        configuration:\n                          type: object\n                          additionalProperties: {}\n                        labels:\n                          type: array\n                          items:\n                            type: string\n                        viewers:\n                          type: array\n                          items:\n                            type: string\n                        annotators:\n                          type: array\n                          items:\n                            type: string\n                        archived:\n                          type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/unarchived/{page}':\n    get:\n      summary: Get Paginated Unarchived Collections\n      description: \u003e\n        Get unarchived user collections (either all or a certain page).\n\n\n        Example: `curl http://localhost:5000/collections/unarchived --cookie\n        session.cookie`\n      operationId: collections_get_unarchived_paginated\n      tags:\n        - collections\n      parameters:\n        - name: page\n          in: path\n          required: true\n          description: \u003e\n            Optional page number for specifying which collections.  \"all\" for\n            all pages or a page number.\n          schema:\n            oneOf:\n              - type: string\n                default: all\n              - type: integer\n      responses:\n        '200':\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_20\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /collections/archived:\n    get:\n      summary: Get Archived Collections\n      description: \u003e\n        Get all archived user collections.\n\n\n        Example: `curl http://localhost:5000/collections/archived --cookie\n        session.cookie`\n      operationId: collections_get_archived_all\n      tags:\n        - collections\n      responses:\n        '200':\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_20\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/archived/{page}':\n    get:\n      summary: Get Paginated Archived Collections\n      description: \u003e\n        Get archived user collections (either all or a certain page).\n\n\n        Example: `curl http://localhost:5000/collections/archived --cookie\n        session.cookie`\n      operationId: collections_get_archived_paginated\n      tags:\n        - collections\n      parameters:\n        - name: page\n          in: path\n          required: true\n          description: \u003e\n            Optional page number for specifying which collections.  \"all\" for\n            all pages or a page number.\n          schema:\n            oneOf:\n              - type: string\n                default: all\n              - type: integer\n      responses:\n        '200':\n          description: Successfully retrieved relevant collections.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_20\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/archive/{collection_id}':\n    put:\n      summary: Archive Collection\n      description: \u003e\n        Archive a collection with a certain ID.\n\n\n        Example: `curl -X PUT\n        http://localhost:5000/collections/archive/60c7b7375b72bf4ed6523bf0\n        --cookie session.cookie`\n      operationId: collections_archive\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully archived the chosen collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_22\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/unarchive/{collection_id}':\n    put:\n      summary: Unarchive Collection\n      description: \u003e\n        Unarchive a collection with a certain ID.\n\n\n        Example: `curl -X PUT\n        http://localhost:5000/collections/unarchive/60c7b7375b72bf4ed6523bf0\n        --cookie session.cookie`\n      operationId: collections_unarchive\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully unarchived the chosen collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_22\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/by_id/{collection_id}':\n    get:\n      summary: Get Collection\n      description: \u003e\n        Retrieve a collection by its ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/collections/by_id/60c7b7375b72bf4ed6523bf0\n        --cookie session.cookie`\n      operationId: collections_get\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully found and rerieved the chosen collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_22\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/by_id/{collection_id}/download':\n    get:\n      summary: Download Collection Data\n      description: \u003e\n        Download a collection's data by its ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/collections/by_id/60c7b7375b72bf4ed6523bf0/download\n        --cookie session.cookie`\n      operationId: collections_download\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully found and downloaded the chosen collection.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_22\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/add_annotator/{collection_id}':\n    post:\n      summary: Add Collection Annotator\n      description: \u003e\n        Add an annotator by user_id to a specific collection.\n\n\n        Example: `curl --cookie session.cookie  -X POST\n        \"http://localhost:5000/collections/add_annotator/60c7453d5b72bf4ed65239e9\"\n        -F 'user_id=\"\\\"bob\\\"\"'`\n\n\n        Notice the quotes around the user_id value, NEEDS to be like that to\n        include the \"\" in the\n\n        request session.cookie is a file containing: \"Set-cookie:\n        session=.eJy...(rest of cookie)\".\n      operationId: collections_add_annotator\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  type: string\n                  description: \u003e\n                    Note: You must put double quotation marks (`\"\"`) around the\n                    user_id for the backend to parse it correctly as it is a\n                    JSON string.  For example, enter `\"ada\"` instead of just\n                    `ada`.\n              required:\n                - user_id\n      responses:\n        '200':\n          description: Successfully added the user as an annotator to the collection.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: 'Request malformed, probably missisng user_id arg.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        '409':\n          description: Specified user is already an annotator.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '500':\n          description: Internal server error - the form data was probably malformed.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/add_viewer/{collection_id}':\n    post:\n      summary: Add Collection Viewer\n      description: \u003e\n        Add a viewer by user_id to a specific collection.\n\n\n        Example: `curl --cookie session.cookie  -X POST\n        \"http://localhost:5000/collections/add_viewer/60c7453d5b72bf4ed65239e9\"\n        -F 'user_id=\"\\\"bob\\\"\"'`\n\n\n        Notice the quotes around the user_id value, NEEDS to be like that to\n        include the \"\" in the\n\n        request. session.cookie is a file containing: \"Set-cookie:\n        session=.eJy...(rest of cookie)\"\n      operationId: addViewerToCollection\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  type: string\n                  description: \u003e-\n                    Note: You must put double quotation marks (\"\") around the\n                    user_id for the backend to parse it correctly. \n\n\n                    Ex: enter \"ada\" instead of just ada\n              required:\n                - user_id\n      responses:\n        '200':\n          description: Successfully added the user as a viewer to the collection.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: 'Request malformed, probably missisng user_id arg.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        '409':\n          description: Specified user is already an viewer.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '500':\n          description: Internal server error - the form data was probably malformed.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/add_label/{collection_id}':\n    post:\n      summary: Add Collection Label\n      description: \u003e\n        Add a label to a specific collection.\n\n\n        Example: `curl --cookie session.cookie  -X POST\n        \"http://localhost:5000/collections/add_label/60c7453d5b72bf4ed65239e9\"\n        -F 'new_label=\"\\\"testlabel\\\"\"'`\n\n\n        Notice the quotes around the new_label value, NEEDS to be like that to\n        include the \"\" in the\n\n        request.  session.cookie is a file containing: \"Set-cookie:\n        session=.eJy...(rest of cookie)\"\n      operationId: collections_add_label\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                new_label:\n                  type: string\n                  description: \u003e\n                    Note: You must put double quotation marks (`\"\"`) around the\n                    new_label for the backend to parse it correctly.  Ex: enter\n                    `\"MyLabel\"` instead of just `MyLabel`\n              required:\n                - new_label\n      responses:\n        '200':\n          description: Successfully added the label to the collection.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: 'Request malformed, probably missisng new_label arg.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        '409':\n          description: Specified label is already in collection.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '500':\n          description: Internal server error - the form data was probably malformed.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /collections:\n    post:\n      summary: Create Collection\n      description: \u003e\n        Create a new collection.\n\n\n        Example: `curl --cookie session.cookie  -X POST\n        \"http://localhost:5000/collections\" -F 'collection={\"creator_id\":\"ada\",\n        \"annotators\":[\"ada\"], \"labels\":[\"label1\",\n        \"labellll\"],\"metadata\":{\"title\":\"newcoll11\",\"subject\":null,\"description\":\"describe\n        blahblah\"}}' -F 'overlap=\"\\\".9\\\"\"' -F 'train_every=\"\\\"100\\\"\"' -F\n        'pipelineId=\"\\\"5babb6ee4eb7dd2c39b9671d\\\"\"'`\n\n\n        Notice the quotes around some value, NEEDS to be like that to include\n        the \"\" in the request\n\n        to be parsed as a JSON string.  session.cookie is a file containing:\n\n        \"Set-cookie: session=.eJy...(rest of cookie)\"\n      operationId: collections_create\n      tags:\n        - collections\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties: \u0026ref_50\n                collection:\n                  description: \u003e-\n                    At minimum, this must include creator_id, annotators,\n                    viewers and labels. All other args or sub-args should be\n                    deleted or set to null value.\n\n\n                    creator_id MUST be a valid user, otherwise 500 Error will\n                    occur.\n                  type: object\n                  properties:\n                    creator_id:\n                      type: string\n                    annotators:\n                      type: array\n                      items:\n                        type: string\n                    viewers:\n                      type: array\n                      items:\n                        type: string\n                    labels:\n                      type: array\n                      items:\n                        type: string\n                    archived:\n                      type: boolean\n                      default: false\n                    metadata:\n                      type: object\n                      properties:\n                        title:\n                          type: string\n                        subject:\n                          type: string\n                        description:\n                          type: string\n                        publisher:\n                          type: string\n                        contributor:\n                          type: string\n                        date:\n                          type: string\n                        type:\n                          type: string\n                        format:\n                          type: string\n                        identifier:\n                          type: string\n                        source:\n                          type: string\n                        language:\n                          type: string\n                        relation:\n                          type: string\n                        coverage:\n                          type: string\n                        rights:\n                          type: string\n                    configuration:\n                      type: object\n                      properties:\n                        allow_overlapping_ner_annotations:\n                          type: boolean\n                          default: true\n                  example:\n                    creator_id: ada\n                    annotators:\n                      - ada\n                    viewers:\n                      - ada\n                      - margaret\n                    labels:\n                      - label1\n                      - label2\n                    archived: false\n                    metadata:\n                      title: Test\n                      subject: testcoll\n                      description: test collection\n                      publisher: ada\n                      contributor: ada\n                      date: 1/1/21\n                      type: sometype\n                      format: HTML\n                      identifier: ABCD\n                      source: apl\n                      language: english\n                      relation: family\n                      coverage: some\n                      rights: all of them\n                    configuration:\n                      allow_overlapping_ner_annotations: true\n                train_every:\n                  description: Should be an integer \u003e= 5.\n                  type: integer\n                  minimum: 5\n                overlap:\n                  description: \u003e\n                    Should be a float between 0 and 1.\n\n\n                    WARNING: You MUST put double quotation marks (`\"\"`) around\n                    the number for the backend to\n\n                    parse it correctly.\n\n\n                    Ex: enter `\".5\"` instead of just `.5`\n                  type: number\n                  format: float\n                  minimum: 0\n                  maximum: 1\n                pipelineId:\n                  type: string\n                  description: \u003e\n                    WARNING: You MUST put double quotation marks (`\"\"`) around\n                    the id for the backend to\n\n                    parse it correctly.\n\n\n                    Ex: enter `\"123abc...\"` instead of just `123abc...`\n                classifierParameters:\n                  type: string\n                  format: object\n                file:\n                  description: Optional CSV file to upload for collection documents.\n                  type: string\n                  format: binary\n                csvTextCol:\n                  description: \u003e\n                    If a CSV file is uploaded, this is the column number that\n                    contains the text.\n                  type: integer\n                csvHasHeader:\n                  description: \u003e\n                    If a CSV file is uploaded, this is a flag for whether the\n                    file has a header row or not.\n                  type: boolean\n                imageFile:\n                  description: \u003e\n                    One or more image files to add to the collection.  The form\n                    should include the filename which will be used to store the\n                    image within the collection.\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n              required: \u0026ref_51\n                - collection\n                - train_every\n                - overlap\n                - pipelineId\n      responses:\n        '201':\n          description: Successfully created the collection.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: Request malformed.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: 'Authentication failed, not logged in.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '500':\n          description: Error in syntax of the request - OR Wekzeug Authentication Failure.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/static_images/{collection_id}':\n    get:\n      summary: Get Collection Static Images\n      description: \u003e\n        Retrieve all static images used in a collection.\n\n\n        Example: `curl --cookie session.cookie  -X GET\n        \"http://localhost:5000/collections/static_images/60c745395b72bf4ed6523821\"`\n      operationId: collections_get_static_images\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: \u003e-\n            Successfully found the collection and got any relevant static\n            images.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of static image paths.\n                items:\n                  type: string\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/images/{collection_id}':\n    get:\n      summary: Get Collection Images\n      description: \u003e\n        Retrieve all (non-static) images used in a collection.\n\n\n        Example: `curl --cookie session.cookie  -X GET\n        \"http://localhost:5000/collections/images/60c745395b72bf4ed6523821\"`\n      operationId: collections_get_images\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully found the collection and got any relevant images.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: An array of image paths.\n                items:\n                  type: string\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/image_exists/{collection_id}/{path}':\n    get:\n      summary: Check Collection Image\n      description: \u003e\n        Checks whether the given image exists in the given collection.\n\n\n        Example: `curl -X GET\n        \"http://localhost:5000/collections/image_exists/60c745395b72bf4ed6523821/static%2Fapl.png\"\n        -H  \"accept: application/json\" --cookie session.cookie`\n      operationId: collections_image_exists\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n        - name: path\n          in: path\n          required: true\n          description: \u003e-\n            Path of the image to check (same as returned from\n            images/static_images).\n          schema:\n            type: string\n          example: static/apl.jpg\n      responses:\n        '200':\n          description: Returns whether the collection holds the image.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/image/{collection_id}/{path}':\n    get:\n      summary: Get Collection Image\n      description: \u003e\n        Download an image from a collection.\n\n\n        Example: `curl --cookie session.cookie  -X GET\n        \"http://localhost:5000/collections/image/60c745395b72bf4ed6523821/static/apl.png\"\n        -v --output - \u003e apl.png`\n      operationId: collections_image\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n        - name: path\n          in: path\n          required: true\n          description: \u003e-\n            Path of the image to download (same as returned from\n            images/static_images).\n          schema:\n            type: string\n          example: static/apl.jpg\n      responses:\n        '200':\n          description: Successfully found the collection and returns image data.\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n    post:\n      summary: Upload Collection Image\n      description: \u003e\n        Upload an image to a collection.\n\n\n        Example: `curl --cookie session.cookie  -X POST\n        \"http://localhost:5000/collections/image/60c745395b72bf4ed6523821/static/dog.jpeg\"\n        -F 'file=@/home/pine/Downloads/dog.jpeg'`\n      operationId: collections_image_upload\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n        - name: path\n          in: path\n          required: true\n          description: \u003e\n            Path to place the image at.\n\n\n            Note: This path piece should NOT start with / (Ex: static/dog.jpg,\n            not /static/dog.jpg).\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        '100':\n          description: 'Couldn''t read the image, probably bad permissions or bad path.'\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '200':\n          description: Successfully uploaded image (Will return the path).\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Did not include the image in the request form.\n          content:\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/collections/user_permissions/{collection_id}':\n    get:\n      summary: Get Collection User Permissions\n      description: \u003e\n        Get the current user permissions of a collection.\n\n\n        Example: `curl --cookie session.cookie -X GET\n        \"http://localhost:5000/collections/user_permissions/60c745395b72bf4ed6523821\"\n        -v`\n      operationId: collections_permissions\n      tags:\n        - collections\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Returns collection permissions for logged in user.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_27\n                  add_documents:\n                    type: boolean\n                  add_images:\n                    type: boolean\n                  annotate:\n                    type: boolean\n                  archive:\n                    type: boolean\n                  download_data:\n                    type: boolean\n                  modify_document_metadata:\n                    type: boolean\n                  modify_labels:\n                    type: boolean\n                  modify_users:\n                    type: boolean\n                  view:\n                    type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/by_id/{doc_id}':\n    get:\n      summary: Get Document\n      description: \u003e\n        Retrieve a document based on its ID.\n\n\n        Example: `curl\n        http://localhost:5000/documents/by_id/60c7453f5b72bf4ed65239ee --cookie\n        session.cookie`\n      operationId: documents_get\n      tags:\n        - documents\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: Successfully found the document based on the ID.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_25\n                  _id:\n                    type: string\n                  creator_id:\n                    type: string\n                  collection_id:\n                    type: string\n                  overlap:\n                    type: integer\n                    format: int64\n                  metadata:\n                    type: object\n                    additionalProperties: {}\n                  text:\n                    type: string\n                  has_annotated:\n                    type: object\n                    additionalProperties:\n                      type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        '500':\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n    delete:\n      summary: Delete Document\n      description: \u003e\n        Delete a document based on its ID.\n\n\n        This endpoint deletes a document and any annotations.  It also updates\n        any next_instances so\n\n        that the document will not be returned for annotation in any \"get next\n        instance\" calls in\n\n        the future.  It does NOT delete document data from any pipeline models\n        or update any IAA\n\n        reports or pipeline metrics.  These will be updated next time they are\n        requested.\n\n\n        Example: `curl -X DELETE\n        http://localhost:5000/documents/by_id/60c7453f5b72bf4ed65239ee --cookie\n        session.cookie`\n      operationId: documents_delete\n      tags:\n        - documents\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: 'Deletion successful, response has IDs of changed objects.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_24\n                  success:\n                    type: boolean\n                    description: Whether the operation was successful.\n                  changed_objs:\n                    type: object\n                    description: What database objects were changed during operation.\n                    properties:\n                      next_instances:\n                        type: object\n                        properties:\n                          updated:\n                            description: IDs of next_instance objects that were updated.\n                            type: array\n                            items:\n                              type: string\n                      annotations:\n                        type: object\n                        properties:\n                          deleted:\n                            description: IDs of annotation objects that were deleted.\n                            type: array\n                            items:\n                              type: string\n                      documents:\n                        type: object\n                        properties:\n                          deleted:\n                            description: IDs of document objects that were deleted.\n                            type: array\n                            items:\n                              type: string\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        '500':\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /documents/by_ids:\n    delete:\n      summary: Delete Documents\n      description: \u003e\n        Delete documents based on their IDs.\n\n\n        This endpoint deletes documents and any associated annotations.  It also\n        updates any next_instances so\n\n        that the documents will not be returned for annotation in any \"get next\n        instance\" calls in\n\n        the future.  It does NOT delete document data from any pipeline models\n        or update any IAA\n\n        reports or pipeline metrics.  These will be updated next time they are\n        requested.\n\n\n        Example: `curl -X DELETE\n        http://localhost:5000/documents/by_ids?ids=60c7453f5b72bf4ed65239ee,60c7453f5b72bf4ed65239ef\n        --cookie session.cookie`\n      operationId: documents_delete_multiple\n      tags:\n        - documents\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: 'The IDs of the document to delete, comma-separated.'\n          schema:\n            type: string\n          example: '60c7453f5b72bf4ed65239ee,60c7453f5b72bf4ed65239ef'\n      responses:\n        '200':\n          description: 'Deletion successful, response has IDs of changed objects.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_24\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        '500':\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/count_by_collection_id/{collection_id}':\n    get:\n      summary: Get Collection Document Count\n      description: \u003e\n        Count the number of documents in a collection.\n\n\n        Example: `curl\n        http://localhost:5000/documents/count_by_collection_id/60c7453d5b72bf4ed65239e9\n        --cookie session.cookie`\n      operationId: documents_count_by_collection\n      tags:\n        - documents\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: \u003e-\n            Successfully found collection and counted number of documents\n            inside.\n          content:\n            application/json:\n              schema:\n                type: integer\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/by_collection_id_all/{collection_id}':\n    get:\n      summary: Get All Collection Documents\n      description: \u003e\n        Get all documents that are in a collection with a given collection id.\n\n\n        Example: `curl\n        http://localhost:5000/documents/by_collection_id_all/60c7453d5b72bf4ed65239e9\n        --cookie session.cookie`\n      operationId: documents_get_by_collection\n      tags:\n        - documents\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully found collection and retrieved all related documents.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: \u0026ref_26\n                  _items:\n                    type: array\n                    items:\n                      type: object\n                      properties: *ref_25\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/by_collection_id_paginated/{collection_id}':\n    get:\n      summary: Get Paginated Collection Documents\n      description: \u003e\n        Get a variable page of variable size of documents.\n\n\n        Example: `curl\n        \"http://localhost:5000/documents/by_collection_id_paginated/60c7453d5b72bf4ed65239e9?page=1\u0026pageSize=5\"\n        --cookie session.cookie`\n      operationId: documents_get_by_collection_paginated\n      tags:\n        - documents\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n        - name: page\n          in: query\n          required: true\n          description: \u003e\n            The page number to get by 0 indexing (Will have documents\n            page_num*pageSize -\u003e page_num*pageSize+pageSize-1 in the collection\n            if there are any.)\n          schema:\n            type: integer\n        - name: pageSize\n          in: query\n          required: true\n          description: The number of documents to put in each page.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: \u003e\n            Successfully found collection and retrieved any (if any) associated\n            documents (Could return no documents if page number too high).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_26\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/user_permissions/{doc_id}':\n    get:\n      summary: Get User Document Permissions\n      description: \u003e\n        Get the permission that the logged in user has for this document.\n\n\n        Example: `curl\n        http://localhost:5000/documents/user_permissions/60c7453f5b72bf4ed65239ee\n        --cookie session.cookie`\n      operationId: documents_permissions\n      tags:\n        - documents\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: Successfully found document and retrieved user permissions.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_27\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/documents/metadata/{doc_id}':\n    put:\n      summary: Update Document Metadata\n      description: \u003e\n        Change/Replace the metadata of a certain document (does not add).\n\n\n        Example: `curl -X PUT\n        http://localhost:5000/documents/metadata/60c7453f5b72bf4ed65239ee -d\n        '{\"test\":\"this\"}' --cookie session.cookie -H\n        Content-Type:application/json`\n\n\n        Note: you need the content type header to specify json.\n      operationId: documents_update_metadata\n      tags:\n        - documents\n      parameters:\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      requestBody:\n        description: The metadata in json form in the body.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: {}\n      responses:\n        '200':\n          description: Successfully found document and changed the metadata.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Document with given ID was not found.\n          content: *ref_12\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /documents:\n    post:\n      summary: Create Document\n      description: \u003e\n        Create a new document in a collection.\n\n\n        Example: `curl -X POST http://localhost:5000/documents/ -d\n        '{\"collection_id\":\"6ada\", \"text\":\"blah\"}' --cookie session.cookie -H\n        Content-Type:application/json`\n      operationId: documents_create\n      tags:\n        - documents\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - description: \u003e-\n                    Arguments for the new document (at least collection_id,\n                    creator_id, text).\n                  type: object\n                  properties: \u0026ref_28\n                    collection_id:\n                      type: string\n                    creator_id:\n                      type: string\n                    text:\n                      type: string\n                    overlap:\n                      type: number\n                      format: double\n                    metadata:\n                      type: object\n                      additionalProperties: {}\n                    has_annotated:\n                      type: object\n                      additionalProperties:\n                        type: boolean\n                  required: \u0026ref_29\n                    - collection_id\n                    - creator_id\n                    - text\n                - type: array\n                  items:\n                    description: \u003e-\n                      Arguments for the new document (at least collection_id,\n                      creator_id, text).\n                    type: object\n                    properties: *ref_28\n                    required: *ref_29\n      responses:\n        '200':\n          description: Successfully created the new document in the collection.\n          content:\n            application/json:\n              schema:\n                description: \u003e\n                  This object is returned when doing actions like modifying a\n                  document or collection.  It contains the ID of the object and\n                  some other information from the database.\n                allOf: *ref_5\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/iaa_reports/by_collection_id/{collection_id}':\n    get:\n      summary: Get IAA Report for Collection\n      description: \u003e\n        Get the Inter-Annotator Agreement for a specified collection.\n\n\n        Note: This will not error with an invalid collection ID, it will give no\n        items.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/iaa_reports/by_collection_id/60df138b3f8fa7b2e1445bd7\n        --cookie ~/session.cookie -v`\n      operationId: iaa_get\n      tags:\n        - iaa_reports\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully got collection's IAA.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _items:\n                    type: array\n                    items:\n                      allOf: \u0026ref_58\n                        - allOf: *ref_30\n                        - type: object\n                          properties:\n                            _id:\n                              type: string\n                            collection_id:\n                              type: string\n                            num_of_annotators:\n                              type: integer\n                            num_of_agreement_docs:\n                              type: integer\n                            num_of_labels:\n                              type: integer\n                            per_doc_agreement:\n                              type: object\n                              properties:\n                                doc_id:\n                                  type: string\n                                avg:\n                                  type: number\n                                  format: double\n                                stddev:\n                                  type: integer\n                            per_label_agreement:\n                              type: array\n                              items:\n                                type: object\n                                properties:\n                                  label:\n                                    type: string\n                                  avg:\n                                    type: number\n                                    format: double\n                                  stddev:\n                                    type: integer\n                            overall_agreement:\n                              type: object\n                              properties:\n                                mean:\n                                  type: number\n                                  format: double\n                                sd:\n                                  type: integer\n                                heatmap_data:\n                                  type: object\n                                  properties:\n                                    matrix:\n                                      type: array\n                                      items:\n                                        type: array\n                                        items:\n                                          type: number\n                                          format: float\n                                        minItems: 2\n                                        maxItems: 2\n                                      example:\n                                        - 1\n                                        - 0.666666\n                                    annotators:\n                                      type: array\n                                      items:\n                                        type: string\n                                      example:\n                                        - ada\n                                        - margaret\n                            labels_per_annotator:\n                              type: object\n                              additionalProperties:\n                                type: object\n                                additionalProperties:\n                                  type: integer\n                              example:\n                                ada:\n                                  label1: 1\n                                  label2: 4\n                                margaret:\n                                  label1: 3\n                                  label2: 2\n                            _updated:\n                              type: string\n                              format: date-time\n                            _created:\n                              type: string\n                              format: date-time\n                  _links:\n                    type: object\n                    properties: *ref_9\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n    post:\n      summary: Create IAA Report for Collection\n      description: \u003e\n        Create an Inter-Annotator-Agreement for a collection.\n\n\n        Note: This will not error with an invalid collection ID (or not enough\n        annotators), it will\n\n        return false.\n\n\n        Example: `curl -X POST\n        http://localhost:5000/iaa_reports/by_collection_id/60df138b3f8fa7b2e1445bd7\n        --cookie ~/session.cookie -v`\n      operationId: iaa_create\n      tags:\n        - iaa_reports\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: |\n            Tried to create the IAA (success or fail).\n\n            False means invalid collection ID or not enough annotators.\n          content:\n            application/json:\n              schema:\n                type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /pipelines:\n    get:\n      summary: Get Pipelines\n      description: |\n        Get all pipelines.\n\n        Example: `curl -X GET http://localhost:5000/pipelines/\n                  --cookie session.cookie`\n      operationId: pipelines_get_all\n      tags:\n        - pipelines\n      responses:\n        '200':\n          description: Successfully got pipelines.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _items:\n                    type: array\n                    items:\n                      allOf: \u0026ref_31\n                        - type: object\n                          properties: *ref_8\n                        - type: object\n                          properties:\n                            _id:\n                              type: string\n                            title:\n                              type: string\n                            description:\n                              type: string\n                            name:\n                              type: string\n                            parameters:\n                              type: object\n                              additionalProperties: {}\n                              example:\n                                cutoff: integer\n                                iterations: ' integer'\n                                n_iter: integer\n                                dropout: float\n                                max_left: integer\n                                use_class_feature:\n                                  - true\n                                  - false\n                                use_word:\n                                  - true\n                                  - false\n                                use_ngrams:\n                                  - true\n                                  - false\n                                no_mid_ngrams:\n                                  - true\n                                  - false\n                                max_ngram_length: integer\n                                use_prev:\n                                  - true\n                                  - false\n                                use_next:\n                                  - true\n                                  - false\n                                use_disjunctive:\n                                  - true\n                                  - false\n                                use_sequences:\n                                  - true\n                                  - false\n                                use_prev_sequences:\n                                  - true\n                                  - false\n                                use_type_seqs:\n                                  - true\n                                  - false\n                                use_type_seqs2:\n                                  - true\n                                  - false\n                                use_type_y_sequences:\n                                  - true\n                                  - false\n                            _updated:\n                              type: string\n                              format: date-time\n                            _created:\n                              type: string\n                              format: date-time\n                  _links:\n                    type: object\n                    properties: *ref_9\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/by_id/{pipeline_id}':\n    get:\n      summary: Get Pipeline\n      description: \u003e\n        Get the pipeline with the given ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/by_id/5babb6ee4eb7dd2c39b9671f\n                  --cookie session.cookie -v`\n      operationId: pipelines_get\n      tags:\n        - pipelines\n      parameters:\n        - name: pipeline_id\n          in: path\n          required: true\n          description: The id of the pipeline on which to operate.\n          schema: \u0026ref_35\n            type: string\n      responses:\n        '200':\n          description: Successfully got specified pipeline.\n          content:\n            application/json:\n              schema:\n                allOf: *ref_31\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Pipeline with given ID was not found.\n          content: \u0026ref_36\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/classifiers/by_collection_id/{collection_id}':\n    get:\n      summary: Get Collection Classifier\n      description: \u003e\n        Get the classifier information for a collection.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/classifiers/by_collection_id/60db2cacdbfddb3ca87c845d\n                  --cookie session.cookie`\n      operationId: pipelines_get_collection_classifier\n      tags:\n        - pipelines\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: The id of the collection on which to operate.\n          schema: *ref_21\n      responses:\n        '200':\n          description: Successfully found collection and got information.\n          content:\n            application/json:\n              schema:\n                allOf: \u0026ref_52\n                  - allOf: *ref_30\n                  - type: object\n                    properties:\n                      _id:\n                        type: string\n                      _created:\n                        type: string\n                        format: date-time\n                      _updated:\n                        type: string\n                        format: date-time\n                      annotated_document_count:\n                        type: integer\n                      collection_id:\n                        type: string\n                      labels:\n                        type: array\n                        items:\n                          type: string\n                      overlap:\n                        type: number\n                        format: double\n                      parameters:\n                        type: object\n                        additionalProperties: {}\n                      pipeline_id:\n                        type: string\n                      train_every:\n                        type: integer\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Collection with given ID was not found.\n          content: *ref_23\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  /pipelines/metrics:\n    get:\n      summary: Get Collection Metrics\n      description: |\n        Get metrics for all available collections.\n\n        Example: `curl -X GET http://localhost:5000/pipelines/metrics\n                  --cookie session.cookie`\n      operationId: pipelines_get_metrics\n      tags:\n        - pipelines\n      responses:\n        '200':\n          description: Successfully got metrics.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _items:\n                    type: array\n                    items:\n                      type: object\n                      properties: \u0026ref_32\n                        _id:\n                          type: string\n                        collection_id:\n                          type: string\n                        classifier_id:\n                          type: string\n                        documents:\n                          type: array\n                          items: {}\n                        annotations:\n                          type: array\n                          items: {}\n                        folds:\n                          type: array\n                          items: {}\n                        metrics:\n                          type: array\n                          items: {}\n                        _updated:\n                          type: string\n                        _created:\n                          type: string\n                        _version:\n                          type: integer\n                        _etag:\n                          type: string\n                        _links:\n                          type: object\n                          properties:\n                            self:\n                              type: object\n                              properties:\n                                title:\n                                  type: string\n                                href:\n                                  type: string\n                  _links:\n                    type: object\n                    properties: *ref_9\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/metrics/by_classifier_id/{classifier_id}':\n    get:\n      summary: Get Classifier Metrics\n      description: \u003e\n        Get metric by classifier id.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/metrics/by_classifier_id/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_classifier_metrics\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: \u0026ref_33\n            type: string\n      responses:\n        '200':\n          description: Successfully got metric(s).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _items:\n                    type: array\n                    items:\n                      type: object\n                      properties: *ref_32\n                  _links:\n                    type: object\n                    properties: *ref_9\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: \u0026ref_34\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/next_document/by_classifier_id/{classifier_id}':\n    get:\n      summary: Get Next Document to Annotate\n      description: \u003e\n        Get the next document id to annotate based on classifier id (or null if\n        no un-annotated\n\n        documents).\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/next_document/by_classifier_id/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_next_document\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n      responses:\n        '200':\n          description: 'Got ID of next document to annotate, or null if all are complete.'\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/next_document/by_classifier_id/{classifier_id}/{doc_id}':\n    post:\n      summary: Advance Next Document\n      description: \u003e\n        Advance to next document by marking the given one as annotated.\n\n\n        Example: `curl -X POST\n        http://localhost:5000/pipelines/next_document/by_classifier_id/60df138b3f8fa7b2e1445bd8/60df13d73f8fa7b2e1445bdd\n                  --cookie session.cookie`\n\n        This will still give you a valid response with an invalid document ID.\n      operationId: pipelines_advance_next_document\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n        - name: doc_id\n          in: path\n          required: true\n          description: The id of the document on which to operate.\n          schema: *ref_10\n      responses:\n        '200':\n          description: Complete annotations on document.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  body:\n                    type: object\n                    nullable: true\n                  success:\n                    type: boolean\n                  trained:\n                    type: boolean\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/status/{pipeline_id}':\n    get:\n      summary: Get Pipeline Status\n      description: \u003e\n        Get the status of the pipeline with the given ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/status/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_status\n      tags:\n        - pipelines\n      parameters:\n        - name: pipeline_id\n          in: path\n          required: true\n          description: The id of the pipeline on which to operate.\n          schema: *ref_35\n      responses:\n        '200':\n          description: Returns the status for the given pipeline.\n          content:\n            application/json:\n              schema:\n                allOf: \u0026ref_37\n                  - type: object\n                    properties: \u0026ref_38\n                      job_id:\n                        type: string\n                      job_request:\n                        description: The job request data submitted to pipelines.\n                        type: object\n                        properties: \u0026ref_53\n                          job_id:\n                            description: The ID of this pipeline job.\n                            type: string\n                          job_queue:\n                            type: string\n                          job_type:\n                            type: string\n                          job_data:\n                            type: object\n                            properties:\n                              framework:\n                                type: string\n                              type:\n                                description: The type of job.\n                                type: string\n                              classifier_id:\n                                type: string\n                                nullable: true\n                            additionalProperties:\n                              description: Any additional job parameters.\n                  - type: object\n                    properties:\n                      service_details:\n                        description: Information about the pipeline service.\n                        type: object\n                        properties:\n                          channel:\n                            type: string\n                          framework:\n                            type: string\n                          framework_types:\n                            type: array\n                            items:\n                              type: string\n                          name:\n                            type: string\n                          version:\n                            type: string\n                            format: version\n                      job_response:\n                        description: The job request data received from pipelines.\n                        type: object\n                        properties:\n                          pipeline_name:\n                            type: string\n                          eve_entry_point:\n                            type: string\n                          model_dir:\n                            type: string\n                            format: path\n                          classifier:\n                            description: Status of the classifier.\n                            type: object\n                          has_trained:\n                            description: Whether the classifier has trained.\n                            type: boolean\n                          classifier_id:\n                            description: Will not be present for pipeline status.\n                            type: string\n                            nullable: true\n                          classifier_class:\n                            description: Python class for this classifier.\n                            type: string\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Pipeline with given ID was not found.\n          content: *ref_36\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/classifiers/status/{classifier_id}':\n    get:\n      summary: Get Classifier Status\n      description: \u003e\n        Get the status of the classifier with the given ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/classifiers/status/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_classifier_status\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n      responses:\n        '200':\n          description: Returns the status for the given classifier.\n          content:\n            application/json:\n              schema:\n                allOf: *ref_37\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/running_jobs/{classifier_id}':\n    get:\n      summary: Get Classifier Running Jobs\n      description: \u003e\n        Get any currently running jobs of the classifier with the given ID.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/running_jobs/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_running_jobs\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n      responses:\n        '200':\n          description: Returns the all currently running jobs for the classifier.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/job_results/{classifier_id}/{job_id}':\n    get:\n      summary: Get Classifier Job Results\n      description: \u003e\n        Gets the results of a job that ran and completed.\n\n\n        Results can only be returned once and then are removed from the internal\n        list of results.\n\n        Also, the results expire after an amount of time, configured when the\n        job was submitted, and\n\n        will expire and be removed after that time.\n\n\n        Example: `curl -X GET\n        http://localhost:5000/pipelines/job_results/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie`\n      operationId: pipelines_get_job_results\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n        - name: job_id\n          in: path\n          description: The ID of the job to get the results for.\n          required: true\n          schema:\n            type: string\n        - name: timeout_in_s\n          in: query\n          description: \u003e-\n            How long to wait to get results before giving up.  0 will wait\n            indefinitely.\n          required: false\n          schema:\n            type: integer\n            default: 1\n      responses:\n        '200':\n          description: Returns the results for the indicated job.\n          content:\n            application/json:\n              schema:\n                type: object\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier or job with given IDs was not found.\n          content: \u0026ref_60\n            application/json:\n              schema:\n                description: Error message from the server.\n                type: string\n                example: Error message from the server.\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/train/{classifier_id}':\n    post:\n      summary: Train Classifier\n      description: \u003e\n        Trains the classifier based on currently annotated documents in the\n        collection.\n\n\n        This endpoint can either be _SYNCHRONOUS_ (blocking until job\n        completion) or\n\n        _ASYNCHRONOUS_ (returns immediately).  For asynchronous requests, the\n        caller is responsible\n\n        for querying for running jobs using the returned job ID to check for\n        completion.  Once\n\n        completed, the caller is responsible for getting the job results before\n        the indicated\n\n        timeout.\n\n\n        The default mode is _ASYNCHRONOUS_ but can be controlled via input\n        parameter.\n\n\n        Example: `curl -X POST\n        http://localhost:5000/pipelines/train/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie\n                  --header 'Content-Type: application/json'\n                  --data '{\"model_name\":\"mymodel\"}'`\n      operationId: pipelines_train\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \u0026ref_54\n                model_name:\n                  description: Optional name to save the model for future reference.\n                  type: string\n                  default: auto-trained\n                async:\n                  description: \u003e\n                    Whether this job should be asynchronous or not.  If\n                    asynchronous, the job response will not be returned and the\n                    caller will have to query for running jobs and then get the\n                    job results when it is finished.\n                  type: boolean\n                  default: false\n                timeout_in_s:\n                  description: \u003e\n                    For _synchronous_ requests: this is the amount of time, in\n                    seconds,  that this call will wait before giving up.  For\n                    _asynchronous_ requests: this is the amount of time, in\n                    seconds,  that the job results will be available for\n                    querying after completion of the job before being removed. \n                    If a value is not provided, a default value of 36000 seconds\n                    will be used.  0 will wait indefinitely/not expire.\n                  type: integer\n                  default: 36000\n      responses:\n        '200':\n          description: Returns the job information.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: *ref_38\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\n  '/pipelines/predict/{classifier_id}':\n    post:\n      summary: Predict Using Classifier\n      description: \u003e\n        Uses the given classifier to predict annotations for the given\n        document(s).\n\n\n        Note that this will use the _last-trained_ model for this classifier.\n\n\n        This endpoint can either be _SYNCHRONOUS_ (blocking until job\n        completion) or\n\n        _ASYNCHRONOUS_ (returns immediately).  For asynchronous requests, the\n        caller is responsible\n\n        for querying for running jobs using the returned job ID to check for\n        completion.  Once\n\n        completed, the caller is responsible for getting the job results before\n        the indicated\n\n        timeout.\n\n\n        The default mode is _SYNCHRONOUS_ but can be controlled via input\n        parameter.\n\n\n        Example: `curl -X POST\n        http://localhost:5000/pipelines/predict/60df138b3f8fa7b2e1445bd8\n                  --cookie session.cookie\n                  --header 'Content-Type: application/json'\n                  --data '{\"document_ids\":[], \"texts\":[], \"async\": false}'`\n      operationId: pipelines_predict\n      tags:\n        - pipelines\n      parameters:\n        - name: classifier_id\n          in: path\n          required: true\n          description: The id of the classifier on which to operate.\n          schema: *ref_33\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Either document_ids or texts must be given and non-empty.\n              type: object\n              properties: \u0026ref_55\n                document_ids:\n                  description: IDs of documents to predict annotations for.\n                  type: array\n                  items:\n                    type: string\n                  default: []\n                texts:\n                  description: Text of documents to predict annotations for.\n                  type: array\n                  items:\n                    type: string\n                  default: []\n                async:\n                  description: \u003e\n                    Whether this job should be asynchronous or not.  If\n                    asynchronous, the job response will not be returned and the\n                    caller will have to query for running jobs and then get the\n                    job results when it is finished.\n                  type: boolean\n                  default: false\n                timeout_in_s:\n                  description: \u003e\n                    For _synchronous_ requests: this is the amount of time, in\n                    seconds,  that this call will wait before giving up.  For\n                    _asynchronous_ requests: this is the amount of time, in\n                    seconds,  that the job results will be available for\n                    querying after completion of the job before being removed. \n                    If a value is not provided, a default value of 36000 seconds\n                    will be used.  0 will wait indefinitely/not expire.\n                  type: integer\n                  default: 36000\n      responses:\n        '200':\n          description: Returns the predictions and other job information.\n          content:\n            application/json:\n              schema:\n                allOf: \u0026ref_56\n                  - type: object\n                    properties: *ref_38\n                  - description: Pipeline predictions and other job information.\n                    type: object\n                    properties:\n                      job_response:\n                        description: \u003e\n                          For _synchronous_ requests: this will hold the\n                          prediction job results.  For _asynchronous_ requests:\n                          this will be null and can later be retrieved by\n                          getting the job results..\n                        type: object\n                        properties:\n                          documents_by_id:\n                            description: \u003e-\n                              Predictions in a mapping from document ID to\n                              annotations.\n                            type: object\n                            additionalProperties:\n                              type: object\n                              properties: \u0026ref_39\n                                doc:\n                                  description: Document-level annotations.\n                                  type: array\n                                  items:\n                                    description: Annotation label.\n                                    type: string\n                                  example:\n                                    - label1\n                                    - label2\n                                ner:\n                                  description: \u003e-\n                                    NER annotations. [startIndex, endIndex,\n                                    label].\n                                  type: array\n                                  items:\n                                    type: array\n                                    items:\n                                      oneOf:\n                                        - type: string\n                                        - type: integer\n                                  example:\n                                    - 5\n                                    - 10\n                                    - label1\n                          texts:\n                            description: \u003e-\n                              Predictions for manual texts in the same order as\n                              they were in the input.\n                            type: array\n                            items:\n                              type: object\n                              properties: *ref_39\n        '400':\n          description: Input parameters are missing/invalid.\n          content: *ref_6\n        '401':\n          description: \u003e\n            Authentication failed: not logged in or user doesn't have the\n            permissions for this operation.\n          content: *ref_11\n        '404':\n          description: Classifier with given ID was not found.\n          content: *ref_34\n        default:\n          description: 'Unexpected error, check server logs.'\n          content: *ref_1\n      security:\n        - cookieAuth: []\n        - eveBasicAuth: []\n        - vegasBearerAuth: []\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      description: \u003e\n        This is the basic authentication mechanism for the PINE backend, used by\n        all auth modules.\n\n\n        This an example command to provision and print the session key using\n        eve:\n\n\n        `curl -X POST -H \"Content-Type:application/json\" -d\n        '{\"username\":\"ada@pine.jhuapl.edu\",\"password\":\"ada@pine.jhuapl.edu\"}'\n        http://localhost:5000/auth/login --cookie-jar - --output /dev/null\n        --silent | grep -o -P \"session\\s.+\" | sed -e 's/session\\s/session=/' -`\n\n\n        The easiest way to use this auth using the Swagger UI is to log in using\n        the normal PINE web\n\n        UI, which will set the cookie in the browser.  Then the Swagger UI will\n        use the same cookie\n\n        for all its calls.\n      type: apiKey\n      in: cookie\n      name: session\n    eveBasicAuth:\n      description: \u003e\n        If the eve auth module is used, you can use basic authentication via a\n        header and the\n\n        cookie/session will be created using that login information.  This is\n        basically the same as\n\n        logging in before each call.  It is less efficient than using the cookie\n        auth but also does\n\n        not rely on cookies or session state which can be difficult to use\n        outside a browser.\n      type: http\n      scheme: basic\n    vegasBearerAuth:\n      description: \u003e\n        If the vegas auth module is used, you can get a VEGAS access token\n        outside of PINE and set it\n\n        as an auth bearer header and the cookie/session will be created using\n        that login information.\n\n        This is basically the same as authenticating your token before each\n        call.  It is less\n\n        efficient than using the cookie auth but also does not rely on cookies\n        or session state which\n\n        can be difficult to use outside a browser.\n\n\n        An example call to get a VEGAS token might look like:\n\n        `curl -H \"Authentication: hmac \u003cencoded HMAC creds\u003e\" -H \"Date:\n        1629328547884\"\n\n        -d \"grant_type=client_credentials\" -X POST\n        https://slife.jh.edu/VEGAS/api/oauth2/accesstoken`.\n\n        This will return a JSON object of the form `{\"access_token\": \"...\",\n        \"refresh_token\": \"...\",\n\n        \"token_type\":\"bearer\",\"issued_at\":1629328554626,\"expires_in\":1800}`. \n        Grab the `access_token`\n\n        string and use it as an auth bearer header.\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    UserRoles:\n      description: The role (for permissions) of the user.\n      type: array\n      items: *ref_4\n    NewUserData:\n      type: object\n      properties: *ref_40\n      required: *ref_41\n    UpdateUserData:\n      type: object\n      properties: *ref_42\n      required: *ref_43\n    WrappedAnnotations:\n      type: object\n      properties: *ref_15\n    LoginForm:\n      description: Information needed to display a login form.\n      type: object\n      properties: *ref_44\n      example: *ref_45\n    EveLogin:\n      description: Only for eve login.\n      type: object\n      properties: *ref_46\n    EvePasswordChange:\n      type: object\n      properties: *ref_47\n    VegasAuthToken:\n      description: An auth token obtained by Vegas out-of-band from PINE.\n      type: object\n      properties: *ref_48\n      additionalProperties: *ref_49\n    WrappedCollections:\n      type: object\n      properties: *ref_20\n    NewCollection:\n      type: object\n      properties: *ref_50\n      required: *ref_51\n    WrappedDocuments:\n      type: object\n      properties: *ref_26\n    NewDocument:\n      description: \u003e-\n        Arguments for the new document (at least collection_id, creator_id,\n        text).\n      type: object\n      properties: *ref_28\n      required: *ref_29\n    Classifier:\n      allOf: *ref_52\n    PipelineJobRequest:\n      description: The job request data submitted to pipelines.\n      type: object\n      properties: *ref_53\n    PipelineJob:\n      type: object\n      properties: *ref_38\n    PipelineOrClassifierStatus:\n      allOf: *ref_37\n    PipelineTrainParameters:\n      type: object\n      properties: *ref_54\n    PipelinePredictParameters:\n      description: Either document_ids or texts must be given and non-empty.\n      type: object\n      properties: *ref_55\n    PipelineDocumentPredictions:\n      type: object\n      properties: *ref_39\n    PipelinePredictions:\n      allOf: *ref_56\n    ErrorResponse:\n      description: Error message from the server.\n      type: string\n      example: Error message from the server.\n    UserInfo:\n      type: object\n      properties: *ref_2\n    EveBase:\n      type: object\n      properties: *ref_8\n    EveLinks:\n      type: object\n      properties: *ref_9\n    IDInfo:\n      description: \u003e\n        This object is returned when doing actions like modifying a document or\n        collection.  It contains the ID of the object and some other information\n        from the database.\n      allOf: *ref_5\n    EveBaseWithVersion:\n      allOf: *ref_30\n    UserDocumentAnnotation:\n      description: \u003e\n        This is the log of annotations by a specific user.  A document might\n        have 0, 1, or multiple of these based on how many users annotated.\n      allOf: *ref_57\n    DocumentAnnotations:\n      type: object\n      properties: *ref_13\n      example: *ref_14\n    AuthUser:\n      type: object\n      properties: *ref_18\n      example: *ref_19\n    AuthUserDetails:\n      type: object\n      properties: *ref_16\n      example: *ref_17\n    Collection:\n      type: object\n      properties: *ref_22\n    UserPermissions:\n      type: object\n      properties: *ref_27\n    Document:\n      type: object\n      properties: *ref_25\n    DocumentDeletionResponse:\n      type: object\n      properties: *ref_24\n    InterAnnotatorAgreement:\n      allOf: *ref_58\n    Pipeline:\n      allOf: *ref_31\n    CollectionMetric:\n      type: object\n      properties: *ref_32\n  responses:\n    UnexpectedServerError:\n      description: 'Unexpected error, check server logs.'\n      content: *ref_1\n    NotAuthorizedOrNotAdmin:\n      description: 'Authentication failed, not logged in or not an admin.'\n      content: *ref_0\n    InvalidInputParameters:\n      description: Input parameters are missing/invalid.\n      content: *ref_6\n    MismatchedEtag:\n      description: Given etag did not match the most updated stored one.\n      content: *ref_59\n    Success:\n      description: Whether the operation succeeded or failed.\n      content: *ref_7\n    NotAuthorized:\n      description: \u003e\n        Authentication failed: not logged in or user doesn't have the\n        permissions for this operation.\n      content: *ref_11\n    DocumentNotFound:\n      description: Document with given ID was not found.\n      content: *ref_12\n    CollectionNotFound:\n      description: Collection with given ID was not found.\n      content: *ref_23\n    PipelineNotFound:\n      description: Pipeline with given ID was not found.\n      content: *ref_36\n    ClassifierNotFound:\n      description: Classifier with given ID was not found.\n      content: *ref_34\n    ClassifierOrJobNotFound:\n      description: Classifier or job with given IDs was not found.\n      content: *ref_60\n  parameters:\n    userIdParam:\n      name: user_id\n      in: path\n      required: true\n      description: ID of the user on which to operate.\n      schema: *ref_3\n    docIdParam:\n      name: doc_id\n      in: path\n      required: true\n      description: The id of the document on which to operate.\n      schema: *ref_10\n    collectionIdParam:\n      name: collection_id\n      in: path\n      required: true\n      description: The id of the collection on which to operate.\n      schema: *ref_21\n    pipelineIdParam:\n      name: pipeline_id\n      in: path\n      required: true\n      description: The id of the pipeline on which to operate.\n      schema: *ref_35\n    classifierIdParam:\n      name: classifier_id\n      in: path\n      required: true\n      description: The id of the classifier on which to operate.\n      schema: *ref_33\ntags:\n  - name: admin\n    description: \u003e\n      Operations in the \"admin\" blueprint.  These operations are generally only\n      available when the \"eve\" auth module is running and are only accessible to\n      logged-in users that are administrators.\n    x-displayName: admin\n  - name: annotations\n    description: Operations in the \"annotations\" blueprint.\n    x-displayName: annotations\n  - name: auth\n    description: Operations in the \"auth\" blueprint.\n    x-displayName: auth\n  - name: auth_eve\n    description: These operations are only available if using \"eve\" auth module.\n    x-displayName: auth_eve\n  - name: auth_vegas\n    description: These operations are only available if using \"vegas\" auth module.\n    x-displayName: auth_vegas\n  - name: collections\n    description: Operations in the \"collections\" blueprint.\n    x-displayName: collections\n  - name: documents\n    description: Operations in the \"documents\" blueprint.\n    x-displayName: documents\n  - name: iaa_reports\n    description: Operations in the \"iaa_reports\" blueprint.\n    x-displayName: iaa_reports\n  - name: pipelines\n    description: Operations in the \"pipelines\" blueprint.\n    x-displayName: pipelines\nx-tagGroups:\n  - name: openapi\n    tags:\n      - admin\n      - annotations\n      - auth\n      - auth_eve\n      - auth_vegas\n      - collections\n      - documents\n      - iaa_reports\n      - pipelines\n",
			"canonicalURL": "/github.com/JHUAPL/PINE@10fa7710576ff1e1b415406d0b9bf48dba813c81/-/blob/backend/pine/backend/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/JHUAPL/PINE/blob/10fa7710576ff1e1b415406d0b9bf48dba813c81/backend/pine/backend/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/annotations/by_document_id/{doc_id}\": get: responses: code 200: contents: media: \"application/json\": generate schema: field _items: item: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"cookie security",
		"unsupported content types"
	]
}