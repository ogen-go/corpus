{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nationalarchives/miiify"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "doc/swagger.yml",
			"byteSize": 24183,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Miiify API\n  version: \"v1\"\n  description: \"Miiify is W3C annotation server\"\nservers:\n  - url: http://miiify.rocks\npaths:\n  /:\n    get:\n      tags:\n        - welcome message\n      summary: Hello Miiify!\n      description: Displays a welcome message from root path.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n              examples:\n                html:\n                  summary: A welcome message\n                  value: \"Welcome to Miiify!\"\n\n  /version:\n    get:\n      tags:\n        - version message\n      summary: Miiify version!\n      description: Displays the current version.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n              examples:\n                html:\n                  summary: Version message\n                  value: \"0.1.0\"\n\n  /annotations/:\n    post:\n      tags:\n        - create container\n      summary: create a new container\n      description: Creates a new container to store annotations. Please refer to the Web Annotation Data Model for a description on the JSON that can be used. Currently miffy will only check the type field is valid.\n      parameters:\n        - in: header\n          name: Host\n          schema:\n            type: string\n            example: miiify.rocks\n            description: Override the default host sent from client.\n          required: false\n        - in: header\n          name: Slug\n          schema:\n            type: string\n            example: my-container\n            description: Specify the container name. If not supplied a system generated name with be used.\n          required: false\n      requestBody:\n        required: true\n        description: Basic container data\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/create_container\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_container_response\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n  /annotations/{container_id}/:\n    post:\n      tags:\n        - create annotation\n      summary: add annotation to collection\n      description: Creates a new annotation and adds it to the container collection. Please refer to the Web Annotation Data Model for a description on the JSON that can be used. Currently Miiify will only check the type field is valid and there is no id key supplied.\n      parameters:\n        - in: header\n          name: Host\n          schema:\n            type: string\n            example: miiify.rocks\n            description: Override the default host sent from client.\n          required: false\n        - in: header\n          name: Slug\n          schema:\n            type: string\n            example: annotation1\n            description: Specify the annotation name. If not supplied a system generated name with be used.\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n      requestBody:\n        required: true\n        description: Basic annotation data\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/create_annotation\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_annotation_response\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n    get:\n      tags:\n        - retrieve annotation collection\n      summary: \"retrieve annotation collection\"\n      description: \"Retrieve the annotations as a collection.\"\n      parameters:\n        - in: header\n          name: If-None-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for supporting caching.\"\n          required: false\n        - in: header\n          name: Prefer\n          schema:\n            type: string\n            default: return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n            enum:\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedIRIs\"\n              - return=representation;include=\"http://www.w3.org/ns/ldp#PreferMinimalContainer\"\n            description: \"ETag support for comparing uniqueness.\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"304\":\n          description: Not Modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n    delete:\n      tags:\n        - delete container\n      summary: delete container and its collection\n      description: Deletes a container including its entire collection.\n      parameters:\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for comparing uniqueness.\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"412\":\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: something went wrong!\n\n  /annotations/{container_id}:\n    get:\n      tags:\n        - retrieve annotation page\n      summary: \"retrieve annotation page\"\n      description: \"An annotation collection can be broken down into a series of pages based on the default limit of 200 annotations per page.\"\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: Access individual pages.\n        - in: header\n          name: If-None-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for supporting caching.\"\n          required: false\n        - in: header\n          name: Prefer\n          schema:\n            type: string\n            default: return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n            enum:\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedIRIs\"\n              - return=representation;include=\"http://www.w3.org/ns/ldp#PreferMinimalContainer\"\n            description: \"ETag support for comparing uniqueness.\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/page\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"304\":\n          description: Not Modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n  /annotations/{container_id}/{annotation_id}:\n    get:\n      tags:\n        - retrieve annotation\n      summary: \"retrieve annotation\"\n      description: \"Retrieve a single annotation from a container.\"\n      parameters:\n        - in: header\n          name: If-None-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for supporting caching.\"\n          required: false\n        - in: header\n          name: Prefer\n          schema:\n            type: string\n            default: return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n            enum:\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedDescriptions\"\n              - return=representation;include=\"http://www.w3.org/ns/oa#PreferContainedIRIs\"\n              - return=representation;include=\"http://www.w3.org/ns/ldp#PreferMinimalContainer\"\n            description: \"ETag support for comparing uniqueness.\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n        - name: annotation_id\n          in: path\n          required: true\n          description: the unique identifier of an annotation\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_annotation_response\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"304\":\n          description: Not Modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n    put:\n      tags:\n        - modify annotation\n      summary: \"modify annotation\"\n      description: \"Modify a single annotation within a container. The id field within the JSON payload must match the id field in the annotation being modified.\"\n      parameters:\n        - in: header\n          name: Host\n          schema:\n            type: string\n            example: miiify.rocks\n            description: Override the default host sent from client.\n          required: false\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for comparing uniqueness..\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n        - name: annotation_id\n          in: path\n          required: true\n          description: the unique identifier of an annotation\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/modify_annotation_response\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"412\":\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n    delete:\n      tags:\n        - delete annotation\n      summary: \"delete annotation\"\n      description: \"Delete a single annotation from a container.\"\n      parameters:\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for comparing uniqueness..\"\n          required: false\n        - name: container_id\n          in: path\n          required: true\n          description: the unique identifier of a container\n          schema:\n            type: string\n        - name: annotation_id\n          in: path\n          required: true\n          description: the unique identifier of an annotation\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"412\":\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n  /manifest/{key}:\n    post:\n      tags:\n        - create manifest\n      summary: \"add manifest\"\n      description: Creates a new manifest.\n      parameters:\n        - name: key\n          in: path\n          required: true\n          description: replace value with key\n          schema:\n            type: string\n      requestBody:\n        required: true\n        description: Manifest data\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/create_manifest\"\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_manifest\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n    put:\n      tags:\n        - modify manifest\n      summary: \"update manifest\"\n      description: \"Updates an existing manifest.\"\n      parameters:\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for comparing uniqueness..\"\n          required: false\n        - name: key\n          in: path\n          required: true\n          description: update value with key\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_manifest\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"412\":\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n    get:\n      tags:\n        - retrieve manifest\n      summary: \"retrieve manifest\"\n      description: \"Retrieve a manifest.\"\n      parameters:\n        - in: header\n          name: If-None-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for supporting caching.\"\n          required: false\n        - name: key\n          in: path\n          required: true\n          description: the key to retrieve value\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/create_manifest\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"304\":\n          description: Not Modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\n    delete:\n      tags:\n        - delete manifest\n      summary: \"delete manifest\"\n      description: \"Delete a manifest.\"\n      parameters:\n        - in: header\n          name: If-Match\n          schema:\n            type: string\n            example: \"caa80ca1e4cc5f2253df5ee35293236350b19194\"\n            description: \"ETag support for comparing uniqueness..\"\n          required: false\n        - name: key\n          in: path\n          required: true\n          description: the key to delete value\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"412\":\n          description: Precondition Failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            text/html:\n              schema:\n                type: string\n                example: Something went wrong!\n\ncomponents:\n  schemas:\n    error:\n      type: object\n      properties:\n        code:\n          type: integer\n          example: 400\n          description: The HTTP error code\n        reason:\n          type: string\n          example: \"something went wrong!\"\n          description: Human readable error message.\n\n    create_container:\n      type: object\n      properties:\n        type:\n          example:\n            - BasicContainer\n            - AnnotationCollection\n          description: A mandatory type for differentiating a container from an annotation.\n\n    create_container_response:\n      type: object\n      properties:\n        type:\n          example:\n            - BasicContainer\n            - AnnotationCollection\n          description: A mandatory array type for differentiating a container from an annotation.\n        created:\n          type: string\n          example: \"2021-10-02T15:57:29Z\"\n          description: The same data used to create a container but with a created key added.\n\n    create_annotation:\n      type: object\n      properties:\n        type:\n          type: string\n          example: Annotation\n          description: A mandatory type for differentiating an annotation from a container.\n\n    create_annotation_response:\n      type: object\n      properties:\n        type:\n          type: string\n          example: Annotation\n          description: A mandatory type for differentiating an annotation from a container.\n        created:\n          type: string\n          example: \"2021-10-02T15:57:29Z\"\n          description: The same data used to create a container but with a created key added.\n\n    modify_annotation_response:\n      type: object\n      properties:\n        type:\n          type: string\n          example: Annotation\n          description: A mandatory type for differentiating an annotation from a container.\n        modified:\n          type: string\n          example: \"2021-10-02T15:57:29Z\"\n          description: The same data used to create a container but with a modified key added.\n\n    collection:\n      type: object\n      properties:\n        type:\n          example:\n            - BasicContainer\n            - AnnotationCollection\n          description: A mandatory array type for differentiating a collection from an annotation.\n\n    page:\n      type: object\n      properties:\n        type:\n          example: AnnotationPage\n          description: A mandatory string type for differentiating a page from an annotation.\n\n    create_manifest:\n      type: object\n      properties:\n        type:\n          type: string\n          example: Manifest\n          description: A mandatory type for differentiating a manifest from an annotation or container.\n",
			"canonicalURL": "/github.com/nationalarchives/miiify@9d8337e9ddb84c3a6f8f7a711e565542f6fc434b/-/blob/doc/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/nationalarchives/miiify/blob/9d8337e9ddb84c3a6f8f7a711e565542f6fc434b/doc/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: anonymous type name conflict: \"AnnotationsContainerIDGetPrefer\""
}