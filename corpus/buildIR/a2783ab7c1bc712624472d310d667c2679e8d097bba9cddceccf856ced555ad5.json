{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cmu-sei/SCAIFE-API"
		},
		"file": {
			"name": "datahub.scaife_api_v_2.0.0.yaml",
			"size": 0,
			"path": "YAML/older_versions/datahub.scaife_api_v_2.0.0.yaml",
			"byteSize": 91670,
			"content": "openapi: 3.0.1\ninfo:\n  description: \"This is the API definition for a SCAIFE DataHub module.\n  SCAIFE facilitates auditing static analysis meta-alerts using\n  classifiers, optional adaptive heuristics, and meta-alert\n  prioritization. SCAIFE enables jump-starting labeled datasets using\n  test suites. It is intended to enable a wide range of users (with\n  widely varying datasets, static analysis tools, machine learning\n  expertise, and amount of labeled data) to benefit from using\n  classifiers and sophisticated prioritization to automatically triage\n  static analysis meta-alerts.\"\n  version: \"2.0.0\"\n  title: \"SCAIFE DataHub Module API Definition\"\n  contact:\n    name: SCAIFE Project\n    url: https://www.sei.cmu.edu/research-capabilities/all-work/display.cfm?customel_datapageid_4050=6453\n    email: lflynn@cert.org\n  license:\n    name: |-\n      SCAIFE API Copyright 2007-2021 Carnegie Mellon University. All Rights Reserved.\n\n      Redistribution and use in source and binary forms, with or\n      without modification, are permitted provided that the following\n      conditions are met:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, this list of conditions and the following disclaimer.\n\n      2. Redistributions in binary form must reproduce the above\n         copyright notice, this list of conditions and the following\n         disclaimer in the documentation and/or other materials provided\n         with the distribution.\n\n      3. Products derived from this software may not include ''Carnegie\n         Mellon University,'' ''SEI'' and/or ''Software Engineering\n         Institute'' in the name of such derived product, nor shall\n         ''Carnegie Mellon University,'' ''SEI'' and/or ''Software\n         Engineering Institute'' be used to endorse or promote products\n         derived from this software without prior written permission.\n         For written permission, please contact permission@sei.cmu.edu.\n\n      ACKNOWLEDGMENTS AND DISCLAIMERS:\n\n      This material is based upon work funded and supported by the\n      Department of Defense under Contract No. FA8702-15-D-0002 with\n      Carnegie Mellon University for the operation of the Software\n      Engineering Institute, a federally funded research and\n      development center.\n\n      The view, opinions, and/or findings contained in this material are\n      those of the author(s) and should not be construed as an official\n      Government position, policy, or decision, unless designated by\n      other documentation.\n\n      NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE\n      ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN ''AS-IS'' BASIS.\n      CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER\n      EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED\n      TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,\n      EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL.\n      CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND\n      WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT\n      INFRINGEMENT.\n\n      [DISTRIBUTION STATEMENT A] This material has been approved for\n      public release and unlimited distribution. Please see Copyright\n      notice for non-US Government use and distribution.\n\n      This material includes field names used in the Software Assurance\n      Marketplace (SWAMP), a service that provides continuous software\n      assurance capabilities to developers and researchers at\n      https://www.mir-swamp.org/#. Copyright Â© 2012-2021 The Morgridge\n      Institute for Research, Inc. All rights reserved.\n\n      This material includes field names used in the Software Assurance\n      Tool (SwAT), a tool that is used by analysts to analyze static\n      analysis alerts from multiple static analysis tools.\n      https://www.cerdec.army.mil/ Combat Capabilities Development\n      Command (CCDC) C5ISR Center. All rights reserved.\n\n      DM19-0572\nservers:\n- url: http://127.0.0.1:8084\n  description: Base URL for the DataHub Server\npaths:\n  /analyze/{package_id}:\n    post:\n      tags:\n      - CI_to_Datahub\n      summary: Submit static analysis results to SCAIFE\n      operationId: ci_analyze\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: ID of the SCAIFE package\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: ci_contents\n              $ref: '#/components/schemas/ci_contents'\n      responses:\n        \"200\":\n          description: Successfully submitted test results to SCAIFE for analysis\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ci_to_datahub_controller\n  /status:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Provides Server Status\n      operationId: get_status\n      responses:\n        \"200\":\n          description: Server Is Running\n        \"400\":\n          description: Database Connection Lost\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n  /status/tool-output/{task_id}:\n    get:\n      tags:\n      - Task_Status\n      summary: Provides the status of tool output uploads, and results when they are\n        available\n      operationId: get_tool_output_status\n      parameters:\n      - name: task_id\n        in: path\n        description: Task ID for the tool output upload process\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: OK, Tool Output Successfully Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tool_alert_mappings'\n        \"202\":\n          description: Task Pending, Not Completed\n        \"400\":\n          description: Unable to Upload Tool Output\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Invalid Task ID\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.task_status_controller\n  /languages:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a list of all the available languages.\n      operationId: list_languages\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Return a List of Languages Available in the Module\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/list_languages'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: No Languages Available\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Create a new language definition.\n      operationId: create_language\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Language information\n        content:\n          application/json:\n            schema:\n              x-body-name: language_version\n              $ref: '#/components/schemas/language_version'\n        required: true\n      responses:\n        \"200\":\n          description: Language Successfully Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/language_version_w_id'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /packages:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a list of all available packages.\n      operationId: list_packages\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Return a List of Available Packages\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/list_packages'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: No Packages Available\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Create a new package. This request will return the package_id used\n        to reference the package within the DataHub. Note, for metrics data uploads\n        use PUT /tools/{tool_id}.\n      operationId: create_package\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Data to the create package\n        content:\n          application/json:\n            schema:\n              x-body-name: package_metadata\n              $ref: '#/components/schemas/package_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: Package Successfully Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_package'\n        \"400\":\n          description: Unable to Create Package\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"422\":\n          description: Package Data Exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_package'\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /packages/{package_id}:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve an existing package in the DataHub Module.\n      operationId: get_package\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: ID of the package to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Return an Existing Package\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/package'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Package Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    put:\n      tags:\n      - UI_to_DataHub\n      summary: Update an existing package. Use this method to add new alerts for the\n        package. Note, for metrics data or tool output file uploads use POST /tools/{tool_id}/packages/{package_id}.\n      operationId: edit_package\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: ID of the package to update\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Package data to modify the existing package with\n        content:\n          application/json:\n            schema:\n              x-body-name: edit_package_metadata\n              $ref: '#/components/schemas/edit_package_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: Package Successfully Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/edited_package'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Unable to Update Package\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Upload a Source Code Archive and MetaData Files for the Package.\n      operationId: upload_codebase_for_package\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: ID of the package to update\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: package_contents\n              $ref: '#/components/schemas/package_contents'\n      responses:\n        \"200\":\n          description: Code Source Successfully Uploaded\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Unable to Upload Code Source Archive\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n    delete:\n      tags:\n      - UI_to_DataHub\n      summary: Delete an existing package.\n      operationId: delete_package\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: ID of the package to delete\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Package Successfully Deleted\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Unable to Delete Package\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a list of all available projects.\n      operationId: list_projects\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Return a List of Available Projects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/list_projects'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: No Projects Available\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Create a new project. The package and taxonomies should\n        be uploaded to the DataHub prior to creating a project. This\n        request will return the project_id to reference the project\n        within the DataHub.\n      operationId: create_project\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Data to a create project\n        content:\n          application/json:\n            schema:\n              x-body-name: project_metadata\n              $ref: '#/components/schemas/project_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: Project Successfully Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_project'\n        \"400\":\n          description: Unable to Create Project\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"422\":\n          description: Project Data Exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_project'\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects/{project_id}:\n    put:\n      tags:\n      - UI_to_DataHub\n      summary: Update an existing project. This method can also be used to send only\n        meta-alert determinations of an existing meta-alert to the DataHub, which\n        is most useful when a project has an open adaptive heuristic set.\n      operationId: edit_project\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project to update\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Project data to modify the existing project with\n        content:\n          application/json:\n            schema:\n              x-body-name: edit_project_metadata\n              $ref: '#/components/schemas/edit_project_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: Package was Successfully Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/edited_project'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Unable to Update Project\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Send a request to the DataHub to enable data forwarding for all future\n        updates to this project\n      operationId: enable_data_forwarding\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project to enable data forwarding\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Data Forwarding Successfully Enabled\n        \"400\":\n          description: Data Forwarding Failed\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Project Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n    delete:\n      tags:\n      - UI_to_DataHub\n      summary: Delete an existing project.\n      operationId: delete_project\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project to delete\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Project Successfully Deleted\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Project Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects/{project_id}/alerts:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve only the alerts and meta-alerts for a specific project.\n      operationId: get_alerts_for_project\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Return the Alerts and Meta-Alerts Associated with the Project\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/get_alerts_response'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Alerts and Meta-Alerts Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n  /projects/{project_id}/determinations:\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Send updated meta-alert determinations for a specific project.\n      operationId: send_meta_alerts_for_project\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: The list of meta-alert IDs and determinations\n        content:\n          application/json:\n            schema:\n              x-body-name: meta_alert_determinations\n              $ref: '#/components/schemas/meta_alert_determinations'\n        required: true\n      responses:\n        \"200\":\n          description: Meta Alerts Updated\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Project Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects/{project_id}/cascade:\n    get:\n      tags:\n      - UI_to_DataHub\n      summary: Get the last performance metrics for cascading determinations on this\n        project\n      operationId: get_cascade_performance\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Cascading Performance Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cascading_performance'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Project or Cascading Performance Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Cascade determinations from a source into the project at the DataHub\n      operationId: cascade_determinations\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: project_id\n        in: path\n        description: The ID of the project\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Information used to cascade the determination into the project\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: cascade_project\n              $ref: '#/components/schemas/cascade_project'\n        # TODO: this needs to be implemented later (RC-1694)\n        #required: true\n        required: false\n      responses:\n        \"200\":\n          description: Cascading Successfully Completed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cascading_performance'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Project Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects/retrieve:\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Retrieve projects from the DataHub. Send taxonomy information the requestor\n        already has, along with projects it is requesting. This way, a response from\n        the DataHub can efficiently leave out taxonomies that the requestor already\n        has information for.\n      operationId: get_projects\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: '''Taxonomy information the requesting module already has, along\n          with projects it is requesting.'''\n        content:\n          application/json:\n            schema:\n              x-body-name: projects_requested\n              $ref: '#/components/schemas/projects_requested'\n        required: true\n      responses:\n        \"200\":\n          description: Return Existing Projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/project'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Projects Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /projects/classifiers/retrieve:\n    post:\n      tags:\n      - Stats_to_DataHub\n      summary: Retrieve projects from the DataHub for Classification at the Stats\n        Module\n      operationId: get_projects_for_classifier\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: '''Tool and taxonomy information the requesting module already\n          has, along with projects it is requesting.'''\n        content:\n          application/json:\n            schema:\n              x-body-name: classifier_projects_requested\n              $ref: '#/components/schemas/classifier_projects_requested'\n        required: true\n      responses:\n        \"200\":\n          description: Return Existing Projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/classifier_project'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Projects Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.stats_to_data_hub_controller\n  /projects/adaptive_heuristics/close:\n    post:\n      tags:\n      - Stats_to_DataHub\n      summary: Send a list of project_ids to stop forwarding the project's alerts\n        to the Stats Module.\n      operationId: close_adaptive_heuristics\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: '''Multiple project_ids to close adaptive heuristic alert forwarding\n          request'''\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n              x-body-name: project_ids\n        required: true\n      responses:\n        \"200\":\n          description: Adaptive Heuristic Forwarding Successfully Closed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/adaptive_heuristic_close_response'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.stats_to_data_hub_controller\n  /taxonomies:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a list of available Taxonomy ID, Name and Versions Available\n        in the Module\n      operationId: list_taxonomies\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns a List of Taxonomy ID, Name and Versions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/taxonomy_heading'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Taxonomies Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Upload a new taxonomy to the DataHub Module. Returns the taxonomy_id\n        and condition_ids to reference this Taxonomy and its Conditions.\n      operationId: create_taxonomy\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Taxonomy information to upload\n        content:\n          application/json:\n            schema:\n              x-body-name: taxonomy_metadata\n              $ref: '#/components/schemas/taxonomy_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: OK, Taxonomy Successfully Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_taxonomy'\n        \"400\":\n          description: Unable to Create Taxonomy\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"422\":\n          description: Taxonomy Data Exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/created_taxonomy'\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /taxonomies/{taxonomy_id}:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve an existing taxonomy based on the name and version.\n      operationId: get_taxonomy\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: taxonomy_id\n        in: path\n        description: ID of the taxonomy to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns Data for a Specific Taxonomy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/taxonomy'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Taxonomy Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    put:\n      tags:\n      - UI_to_DataHub\n      summary: Edit a taxonomy, including uploads of additional conditions\n      operationId: edit_taxonomy\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: taxonomy_id\n        in: path\n        description: ID of the taxonomy to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Taxonomy information to upload\n        content:\n          application/json:\n            schema:\n              x-body-name: edit_taxonomy\n              $ref: '#/components/schemas/edit_taxonomy'\n        required: true\n      responses:\n        \"200\":\n          description: Returns Condition Information for a Specific Taxonomy\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/condition_response_w_id'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Taxonomy Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /taxonomies/{taxonomy_id}/languages:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve the languages associated with this taxonomy\n      operationId: get_taxonomy_languages\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: taxonomy_id\n        in: path\n        description: ID of the taxonomy to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns Languages for a Specific Taxonomy\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/language_version_w_id'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Taxonomy Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    put:\n      tags:\n      - UI_to_DataHub\n      summary: Add languages to the taxonomy condition objects\n      operationId: add_condition_languages\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: taxonomy_id\n        in: path\n        description: ID of the taxonomy to retrieve\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              x-body-name: condition_languages\n              $ref: '#/components/schemas/condition_languages'\n        required: true\n      responses:\n        \"200\":\n          description: Condition Languages Successfully Updated\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Taxonomy, Conditions or Language Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /test_suites:\n    get:\n      tags:\n      - DataHub_Server\n      summary: '''Retrieve a List of Test Suite ID, Name and Versions Available in\n        the Module'''\n      operationId: list_test_suites\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns a List of Test Suite ID, Name and Versions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/test_suite_heading'\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Test Suites Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Create a Test Suite in the DataHub Module.\n      operationId: create_test_suite\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        description: Test Suite information to upload\n        content:\n          application/json:\n            schema:\n              x-body-name: test_suite_metadata\n              $ref: '#/components/schemas/test_suite_metadata'\n        required: true\n      responses:\n        \"200\":\n          description: OK, Test Suite Successfully Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/test_suite_heading'\n        \"400\":\n          description: Unable to Upload Test Suite\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"422\":\n          description: Test Suite Data Exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/test_suite_heading'\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /test_suites/{test_suite_id}/packages/{package_id}:\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Upload Test Suite MetaData Files\n      operationId: upload_test_suite\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: test_suite_id\n        in: path\n        description: Test Suite ID to upload data files\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: Package ID to upload data files\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: test_suite_contents\n              $ref: '#/components/schemas/test_suite_contents'\n      responses:\n        \"200\":\n          description: Data Successfully Uploaded\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /tools:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a List of Tool ID, Name, and Versions Available in the Module\n      operationId: list_tools\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: '''Returns a List of Tool ID, Name, and Versions Available\n            in the Module'''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tool_heading'\n                x-body-name: list_tools\n                x-content-type: application/json\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Tools Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Upload a new Tool to the DataHub Module. Returns a tool_id to reference\n        the tool in the DataHub Module. For code metrics tools, upload a list of ordered\n        field names.\n      operationId: upload_tool\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        required: true\n        description: Tool information to upload\n        content:\n          application/json:\n            schema:\n              x-body-name: tool_metadata\n              $ref: '#/components/schemas/tool_metadata'\n      responses:\n        \"200\":\n          description: OK, Tool Successfully Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tool_response'\n        \"400\":\n          description: Unable to Upload Tool Information\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"422\":\n          description: Tool Exists, Return Tool ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tool_response'\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /tools/parsers:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve a List of Tool Parsers Available in the Module. The values\n        should be used to set the tool_parser parameter in the POST /tools API\n      operationId: get_tool_parsers\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: '''Returns a List of Tool Parsers Available in the Module'''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tool_parsers'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Tool Parsers Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n  /tools/{tool_id}:\n    get:\n      tags:\n      - DataHub_Server\n      summary: Retrieve an existing tool in the DataHub Module.\n      operationId: get_tool_data\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: tool_id\n        in: path\n        description: Tool ID to retrieve data\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Returns data for a particular tool\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/get_tool_response'\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Tool Information Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.data_hub_server_controller\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Edit metadata for a tool and/or upload a CSV with checker mappings\n      operationId: edit_tool\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: tool_id\n        in: path\n        description: Tool ID to update data\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        required: true\n        description: Tool information to upload\n        content:\n          multipart/form-data:\n            schema:\n              # all non-file parameters (even if not present in this\n              # schema) end up in the edit_tool_metadata kwarg\n              # structure.\n              #\n              # note: this workaround unfortunately eliminates the top\n              # level of automatic validation since 'edit_tool_metadata'\n              # isn't a first-class schema even though it is defined in\n              # the component schemas below-- here it's just the name of\n              # the body parameter. The schema for 'tool_metadata' *is*\n              # automatically applied, however. But by manually applying\n              # the 'edit_tool_metadata_outer' (which in turn applies\n              # 'edit_tool_metadata') model in the controller method we\n              # can catch undefined parameters adjacent to\n              # 'tool_metadata'.\n              x-body-name: edit_tool_metadata\n              type: object\n              properties:\n                tool_metadata:\n                  $ref: '#/components/schemas/base_tool'\n                checker_mappings_csv:\n                  type: string\n                  format: binary\n            encoding:\n              tool_metadata:\n                contentType: application/json\n                # https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#encoding-object\n                # note: explode and style:form have no effect\n                #explode: true\n                #style: form\n      responses:\n        \"200\":\n          description: OK, Tool Successfully Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tool_response'\n        \"400\":\n          description: Unable to Update Tool Information\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        \"404\":\n          description: Tool Unavailable\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\n  /tools/{tool_id}/packages/{package_id}:\n    post:\n      tags:\n      - UI_to_DataHub\n      summary: Upload Tool Output and Metrics Tool CSVs\n      operationId: upload_tool_output\n      parameters:\n      - name: x_access_token\n        in: header\n        description: Token that contains information about the user\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: tool_id\n        in: path\n        description: Tool ID to upload data\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: package_id\n        in: path\n        description: Package ID to upload data\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: tool_output_data\n              $ref: '#/components/schemas/tool_output_data'\n      responses:\n        \"200\":\n          description: OK, Tool Output Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/task_status'\n        \"400\":\n          description: Unable to Upload Tool Output\n        \"401\":\n          description: Invalid Token Request\n        \"403\":\n          description: Missing Required Token\n        default:\n          description: Unexpected Error\n      x-openapi-router-controller: swagger_server.controllers.ui_to_data_hub_controller\ncomponents:\n  schemas:\n    adaptive_heuristic_close_response:\n      required:\n      - project_status\n      type: object\n      properties:\n        project_status:\n          type: array\n          items:\n            $ref: '#/components/schemas/project_heuristic_message'\n    alert_mappings:\n      required:\n      - alert_id\n      - ui_alert_id\n      type: object\n      properties:\n        alert_id:\n          type: string\n        ui_alert_id:\n          type: string\n    alert_w_ui_id:\n      allOf:\n      - $ref: '#/components/schemas/base_alert'\n      - required:\n        - ui_alert_id\n        - code_language\n        type: object\n        properties:\n          ui_alert_id:\n            type: string\n          code_language:\n            $ref: '#/components/schemas/language_version'\n    alert_w_id:\n      allOf:\n      - $ref: '#/components/schemas/base_alert'\n      - required:\n        - alert_id\n        type: object\n        properties:\n          alert_id:\n            type: string\n          code_language_id:\n            type: string\n    base_alert:\n      required:\n      - checker_id\n      - primary_message\n      - tool_id\n      type: object\n      properties:\n        tool_id:\n          type: string\n        checker_id:\n          type: string\n        primary_message:\n          $ref: '#/components/schemas/message'\n        secondary_messages:\n          type: array\n          items:\n            $ref: '#/components/schemas/message'\n    base_meta_alert:\n      required:\n      - filepath\n      - line_number\n      type: object\n      properties:\n        condition_id:\n          type: string\n          description: Condition ID associated with a Taxonomy\n        checker_id:\n          type: string\n          description: Checker ID associated with a Tool\n        filepath:\n          type: string\n        line_number:\n          type: integer\n      description: Meta-alerts must have either a condition_id or checker_id\n    base_tool:\n      type: object\n      properties:\n        tool_name:\n          type: string\n        tool_version:\n          type: string\n        language_platforms:\n          type: array\n          description: List of abbreviated languages the tool analyzes\n          items:\n            type: string\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        checker_mappings:\n          type: array\n          description: JSON-formatted checker_mappings\n          items:\n            $ref: '#/components/schemas/checker_mappings_metadata'\n        checkers:\n          type: array\n          items:\n            type: string\n        code_metrics_headers:\n          type: array\n          description: Header fields expected for the metrics data\n          items:\n            type: string\n    cascading_data:\n      type: object\n      properties:\n        tool_output_data:\n          $ref: '#/components/schemas/tool_output_data'\n        sourcecode_archive:\n          $ref: '#/components/schemas/cascading_sourcecode'\n    cascading_performance:\n      type: object\n      properties:\n        project_id:\n          type: string\n        trues_cascaded:\n          type: integer\n          description: Number of True values that cascaded into the new project\n        falses_cascaded:\n          type: integer\n          description: Number of False values that cascaded into the new project\n        new_meta_alerts:\n          type: integer\n          description: Number of new meta-alerts that did not get a cascading value\n        old_meta_alerts:\n          type: integer\n          description: Number of old adjudications that did not cascade into the new\n            project\n        last_performed:\n          type: string\n          description: Date and time the cascading was performed\n          format: date-time\n    cascade_project:\n      type: object\n      properties:\n        cascading_type:\n          type: string\n          description: Type of cascading to perform for this upload. Uses default\n            if None provided.\n          enum:\n          - diff\n          - precise\n        cascading_project_id:\n          type: string\n          description: Use an existing DataHub project with this ID to perform the\n            cascading.\n        cascading_data:\n          $ref: '#/components/schemas/cascading_data'\n    cascading_sourcecode:\n      type: string\n      description: Source code archive upload to use when cascading.\n      format: binary\n    checker:\n      type: object\n      properties:\n        checker_id:\n          type: string\n        checker_name:\n          type: string\n    checker_condition:\n      type: object\n      properties:\n        checker_name:\n          type: string\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/checker_condition_map'\n    checker_condition_w_id:\n      type: object\n      properties:\n        checker_id:\n          type: string\n        checker_name:\n          type: string\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition_response_w_tax_id'\n    checker_condition_map:\n      allOf:\n      - $ref: '#/components/schemas/condition'\n      - required:\n        - taxonomy_name\n        type: object\n        properties:\n          taxonomy_name:\n            type: string\n          taxonomy_version:\n            type: string\n    checker_mappings:\n      type: object\n      properties:\n        checker_id:\n          type: string\n        checker_name:\n          type: string\n        tool_id:\n          type: string\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition_response'\n    checker_mappings_metadata:\n      type: object\n      properties:\n        mapping_source:\n          type: string\n          description: Source of the mapping, e.g., CERT wiki, scale.app, etc.\n        mapper_identity:\n          type: array\n          items:\n            type: string\n            description: Mapper of the checker mappings, e.g., Vendor, Public, SC-Team,\n              etc.\n        mapping_version:\n          type: string\n        publishable_public_or_not:\n          type: boolean\n        dod_publication:\n          type: boolean\n        deprecated_or_not:\n          type: boolean\n        license_information:\n          type: string\n        additional_notes:\n          type: string\n        description:\n          type: string\n        mapping_date:\n          type: string\n          format: date-time\n        mapping_filename:\n          type: string\n          description: '''Filename of the mappings CSV that this data describes and\n            will be uploaded in a subsequent call'''\n        mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/checker_condition'\n    ci_contents:\n      required:\n      - git_commit_hash\n      - tool_id\n      - tool_output\n      type: object\n      properties:\n        git_commit_hash:\n          type: string\n          description: Git hash triggering the SCAIFE analysis\n        tool_id:\n          type: string\n          description: Tool ID of tool matching the submitted output (eg. id of cppcheck) \n        tool_output:\n          type: string\n          description: Static analysis tool output\n          format: binary\n    classifier_package:\n      required:\n      - created_at\n      - package_id\n      - package_name\n      type: object\n      properties:\n        package_id:\n          type: string\n        package_name:\n          type: string\n        package_description:\n          type: string\n        code_languages:\n          $ref: '#/components/schemas/list_languages'\n        alerts:\n          $ref: '#/components/schemas/package_alerts_w_id'\n        test_suite_id:\n          type: string\n        tools:\n          type: array\n          items:\n            $ref: '#/components/schemas/classifier_tool'\n        source_files:\n          type: array\n          items:\n            $ref: '#/components/schemas/source_file'\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n    classifier_project:\n      type: object\n      properties:\n        project_id:\n          type: string\n        project_name:\n          type: string\n        project_description:\n          type: string\n        package:\n          $ref: '#/components/schemas/classifier_package'\n        meta_alerts:\n          type: array\n          items:\n            $ref: '#/components/schemas/meta_alert_w_id'\n        taxonomies:\n          type: array\n          items:\n            $ref: '#/components/schemas/taxonomy'\n        author_source:\n          type: string\n        adaptive_heuristic_is_active:\n          type: boolean\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n    classifier_projects_requested:\n      required:\n      - project_status\n      type: object\n      properties:\n        tool_taxonomies_present:\n          $ref: '#/components/schemas/tool_taxonomies_present'\n        project_status:\n          type: array\n          items:\n            $ref: '#/components/schemas/project_status'\n    classifier_tool:\n      required:\n      - category\n      - tool_id\n      - tool_name\n      - tool_version\n      type: object\n      properties:\n        tool_id:\n          type: string\n        tool_name:\n          type: string\n        tool_version:\n          type: string\n        category:\n          type: string\n        source_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/source_mappings_classifier'\n        metrics_data_headers:\n          type: object\n          properties: {}\n          description: Header fields expected for the metrics data\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    condition:\n      required:\n      - condition_name\n      - title\n      type: object\n      properties:\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        condition_name:\n          type: string\n        title:\n          type: string\n        platforms:\n          type: array\n          items:\n            type: string\n        condition_fields:\n          type: object\n          properties: {}\n          description: Fields associated with this condition, i.e., likelihood\n    condition_heading:\n      type: object\n      properties:\n        condition_id:\n          type: string\n        condition_name:\n          type: string\n        title:\n          type: string\n    condition_languages:\n      required:\n      - code_language_ids\n      - condition_ids\n      type: object\n      properties:\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        condition_ids:\n          type: array\n          items:\n            type: string\n    condition_response:\n      allOf:\n      - $ref: '#/components/schemas/condition_response_w_id'\n      - type: object\n        properties:\n          taxonomy:\n            $ref: '#/components/schemas/taxonomy_heading'\n    condition_response_w_id:\n      allOf:\n      - $ref: '#/components/schemas/condition'\n      - required:\n        - condition_id\n        type: object\n        properties:\n          condition_id:\n            type: string\n    condition_response_w_tax_id:\n      allOf:\n      - $ref: '#/components/schemas/condition_response_w_id'\n      - type: object\n        properties:\n          taxonomy_id:\n            type: string\n    created_package:\n      required:\n      - package_id\n      - package_name\n      type: object\n      properties:\n        package_id:\n          type: string\n        package_name:\n          type: string\n        alert_mappings:\n          type: array\n          description: Alert IDs created in the DataHub\n          items:\n            $ref: '#/components/schemas/alert_mappings'\n    created_project:\n      required:\n      - project_id\n      - project_name\n      type: object\n      properties:\n        project_id:\n          type: string\n        project_name:\n          type: string\n        meta_alert_mappings:\n          type: array\n          description: Meta-Alert IDs created in the DataHub\n          items:\n            $ref: '#/components/schemas/meta_alert_mappings'\n    created_taxonomy:\n      required:\n      - conditions\n      - taxonomy_id\n      type: object\n      properties:\n        taxonomy_id:\n          type: string\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition_heading'\n    determination:\n      type: object\n      properties:\n        flag_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_flag_list'\n        verdict_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_verdict_list'\n        ignored_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_ignored_list'\n        dead_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_dead_list'\n        inapplicable_environment_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_inapplicable_environment_list'\n        dangerous_construct_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_dangerous_construct_list'\n        notes_list:\n          type: array\n          items:\n            $ref: '#/components/schemas/determination_notes_list'\n    determination_dangerous_construct_list:\n      type: object\n      properties:\n        dangerous_construct:\n          type: string\n          description: Options for this field include Unknown, No Risk, Low Risk,\n            Medium Risk, and High Risk\n        timestamp:\n          type: string\n          format: date-time\n    determination_dead_list:\n      type: object\n      properties:\n        dead:\n          type: string\n        timestamp:\n          type: string\n          format: date-time\n    determination_flag_list:\n      type: object\n      properties:\n        flag:\n          type: boolean\n        timestamp:\n          type: string\n          format: date-time\n    determination_ignored_list:\n      type: object\n      properties:\n        ignored:\n          type: string\n        timestamp:\n          type: string\n          format: date-time\n    determination_inapplicable_environment_list:\n      type: object\n      properties:\n        inapplicable_environment:\n          type: string\n        timestamp:\n          type: string\n          format: date-time\n    determination_notes_list:\n      type: object\n      properties:\n        notes:\n          type: string\n        timestamp:\n          type: string\n          format: date-time\n    determination_verdict_list:\n      type: object\n      properties:\n        verdict:\n          type: string\n          description: '''Options for this field include Unknown, Complex, False,\n            Dependent, and True'\n        timestamp:\n          type: string\n          format: date-time\n    edit_package_metadata:\n      type: object\n      properties:\n        package_name:\n          type: string\n        package_description:\n          type: string\n        tool_ids:\n          type: array\n          description: List of new tools for this package\n          items:\n            type: string\n        alerts:\n          $ref: '#/components/schemas/package_alerts'\n    edit_project_metadata:\n      type: object\n      properties:\n        project_name:\n          type: string\n        project_description:\n          type: string\n        taxonomy_ids:\n          type: array\n          description: List of new taxonomies for this project\n          items:\n            type: string\n        meta_alerts:\n          $ref: '#/components/schemas/project_meta_alerts'\n    edit_taxonomy:\n      type: object\n      properties:\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition'\n    edit_tool_metadata_outer:\n      type: object\n      properties:\n        # all non-file parameter fields end up in this object; there is\n        # only one in this case, however:\n        edit_tool_metadata:\n          $ref: '#/components/schemas/edit_tool_metadata'\n        # file parameters all get their own fields; only one in\n        # this case:\n        checker_mapping_csv:\n          type: string\n          description: '''\n            CSV with checker mappings, the filename should match the\n            mapping_filename in tool_metadata\n            '''\n          format: binary\n    edit_tool_metadata:\n      type: object\n      properties:\n        tool_metadata:\n          $ref: '#/components/schemas/base_tool'\n    edited_package:\n      type: object\n      properties:\n        package_id:\n          type: string\n        alert_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/alert_mappings'\n    edited_project:\n      type: object\n      properties:\n        project_id:\n          type: string\n        meta_alert_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/meta_alert_mappings'\n    get_alerts_response:\n      type: object\n      properties:\n        meta_alerts:\n          type: array\n          items:\n            $ref: '#/components/schemas/meta_alert_w_id'\n        alerts:\n          type: array\n          items:\n            $ref: '#/components/schemas/alert_w_id'\n    get_tool_response:\n      required:\n      - category\n      - tool_id\n      - tool_name\n      - tool_version\n      type: object\n      properties:\n        tool_id:\n          type: string\n        tool_name:\n          type: string\n        tool_version:\n          type: string\n        category:\n          type: string\n        language_platforms:\n          type: array\n          items:\n            type: string\n        source_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/source_mappings'\n        code_metrics_headers:\n          type: array\n          description: Header fields expected for the metrics data\n          items:\n            type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    language_version:\n      required:\n      - language\n      type: object\n      properties:\n        language:\n          type: string\n        version:\n          type: string\n    language_version_w_id:\n      required:\n      - code_language_id\n      - language\n      type: object\n      properties:\n        code_language_id:\n          type: string\n        language:\n          type: string\n        version:\n          type: string\n    list_languages:\n      type: array\n      items:\n        $ref: '#/components/schemas/language_version_w_id'\n    list_packages:\n      type: array\n      items:\n        $ref: '#/components/schemas/package_heading'\n    list_projects:\n      type: array\n      items:\n        $ref: '#/components/schemas/project_heading'\n    message:\n      required:\n      - filepath\n      - line_start\n      - message_text\n      properties:\n        line_start:\n          type: integer\n        line_end:\n          type: integer\n        filepath:\n          type: string\n        message_text:\n          type: string\n    meta_alert_determination:\n      required:\n      - determination\n      - meta_alert_id\n      type: object\n      properties:\n        meta_alert_id:\n          type: string\n        determination:\n          $ref: '#/components/schemas/determination'\n    meta_alert_determinations:\n      type: array\n      items:\n        $ref: '#/components/schemas/meta_alert_determination'\n    meta_alert_mappings:\n      type: object\n      required:\n      - meta_alert_id\n      - ui_meta_alert_id\n      properties:\n        meta_alert_id:\n          type: \"string\"\n        ui_meta_alert_id:\n          type: \"string\"\n    meta_alert_no_id:\n      allOf:\n      - $ref: '#/components/schemas/base_meta_alert'\n      - required:\n        - alert_ids\n        - filepath\n        - line_number\n        type: object\n        properties:\n          ui_meta_alert_id:\n            type: string\n          alert_ids:\n            type: array\n            items:\n              type: string\n          determination:\n            $ref: '#/components/schemas/determination'\n          auto_verdict:\n            type: object\n            additionalProperties:\n              type: string\n    meta_alert_w_id:\n      allOf:\n      - $ref: '#/components/schemas/meta_alert_no_id'\n      - required:\n        - meta_alert_id\n        type: object\n        properties:\n          meta_alert_id:\n            type: string\n          ui_meta_alert_id:\n            type: string\n          ct_pm_verdict:\n            type: object\n            additionalProperties:\n              type: string\n    metrics:\n      type: object\n      additionalProperties: true\n      description: Metrics data of various types\n    package:\n      required:\n      - created_at\n      - package_id\n      - package_name\n      type: object\n      properties:\n        package_id:\n          type: string\n        package_name:\n          type: string\n        package_description:\n          type: string\n        code_languages:\n          $ref: '#/components/schemas/list_languages'\n        alerts:\n          $ref: '#/components/schemas/package_alerts_w_id'\n        source_files:\n          type: array\n          items:\n            $ref: '#/components/schemas/source_file'\n        test_suite_id:\n          type: string\n        file_extensions:\n          type: array\n          items:\n            type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n        tool_ids:\n          type: array\n          items:\n            type: string\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n    package_alerts_w_id:\n      type: array\n      items:\n        $ref: '#/components/schemas/alert_w_id'\n    package_alerts:\n      type: array\n      items:\n        $ref: '#/components/schemas/alert_w_ui_id'\n    package_contents:\n      required:\n      - sourcecode_archive\n      type: object\n      properties:\n        sourcecode_archive:\n          type: string\n          description: Source Code Archive for this package\n          format: binary\n        source_file_csv:\n          type: string\n          description: Source File CSV\n          format: binary\n        source_function_csv:\n          type: string\n          description: Source Function CSV\n          format: binary\n    package_heading:\n      required:\n      - package_description\n      - package_id\n      - package_name\n      type: object\n      properties:\n        package_id:\n          type: string\n        package_name:\n          type: string\n        package_description:\n          type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n        file_extensions:\n          type: array\n          items:\n            type: string\n        code__languages:\n          $ref: '#/components/schemas/list_languages'\n    package_metadata:\n      required:\n      - code_language_ids\n      - package_description\n      - package_name\n      - tool_ids\n      type: object\n      properties:\n        package_name:\n          type: string\n        package_description:\n          type: string\n        author_source:\n          type: string\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        code_source_url:\n          type: string\n          description: URL to Source Code Archive\n          format: uri\n        source_file_url:\n          type: string\n          format: uri\n        source_function_url:\n          type: string\n          format: uri\n        test_suite_id:\n          type: string\n          description: Test Suite Associated with this Package\n        alerts:\n          $ref: '#/components/schemas/package_alerts'\n        tool_ids:\n          type: array\n          description: ID of the tools used with this Package\n          items:\n            type: string\n        git_url:\n          type: string\n          format: uri\n          description: url to git repository\n        git_user:\n          type: string\n          description: User name of git user to clone repository (Read-only access)\n        git_access_token:\n          type: string\n          format: password\n          description: Access token for git user\n    project:\n      type: object\n      properties:\n        project_id:\n          type: string\n        project_name:\n          type: string\n        project_description:\n          type: string\n        package_id:\n          type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n        meta_alerts:\n          type: array\n          items:\n            $ref: '#/components/schemas/meta_alert_w_id'\n        taxonomies:\n          type: array\n          items:\n            $ref: '#/components/schemas/taxonomy'\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n    project_heading:\n      required:\n      - package_id\n      - project_id\n      - project_name\n      type: object\n      properties:\n        project_id:\n          type: string\n        project_name:\n          type: string\n        project_description:\n          type: string\n        package_id:\n          type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    project_heuristic_message:\n      type: object\n      properties:\n        project_id:\n          type: string\n        project_updated:\n          type: boolean\n        status_message:\n          type: string\n    project_meta_alerts:\n      type: array\n      items:\n        $ref: '#/components/schemas/meta_alert_no_id'\n    project_metadata:\n      required:\n      - package_id\n      - project_description\n      - project_name\n      type: object\n      properties:\n        project_name:\n          type: string\n        project_description:\n          type: string\n        author_source:\n          type: string\n        package_id:\n          type: string\n        use_checkers:\n          type: boolean\n          description: If true, the DataHub will use checkers to create\n            meta-alerts, instead of checker-to-condition mappings.\n            Default =\u003e False\n        cascading_type:\n          type: string\n          description: Default cascading type for the project. Default is 'diff'\n          enum:\n          - diff\n          - precise\n        meta_alerts:\n          $ref: '#/components/schemas/project_meta_alerts'\n        taxonomy_ids:\n          type: array\n          items:\n            type: string\n    projects_requested:\n      required:\n      - project_ids\n      type: object\n      properties:\n        taxonomies_present:\n          type: array\n          description: '''List of taxonomy ids for taxonomies already present at the\n            source module (Stats or UI). The destination module (DataHub) will use\n            this list to avoid sending duplicate taxonomy information.'''\n          items:\n            type: string\n        project_ids:\n          type: array\n          items:\n            type: string\n    project_status:\n      required:\n      - project_id\n      - set_adaptive_heuristic_open\n      type: object\n      properties:\n        project_id:\n          type: string\n        set_adaptive_heuristic_open:\n          type: boolean\n    source_file:\n      type: object\n      properties:\n        source_file_id:\n          type: string\n        filename:\n          type: string\n        filepath:\n          type: string\n        filepath_depth:\n          type: string\n        defect_info:\n          type: object\n          properties: {}\n        code_metrics_data:\n          type: array\n          items:\n            $ref: '#/components/schemas/metrics'\n        functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/source_function'\n    source_function:\n      type: object\n      properties:\n        source_function_id:\n          type: string\n        name:\n          type: string\n        line_start:\n          type: integer\n        line_end:\n          type: integer\n        code_metrics_data:\n          type: array\n          items:\n            $ref: '#/components/schemas/metrics'\n    source_mappings:\n      type: object\n      properties:\n        mapping_id:\n          type: string\n        mapping_source:\n          type: string\n        checker_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/checker_condition_w_id'\n    source_mappings_classifier:\n      type: object\n      properties:\n        mapping_id:\n          type: string\n        mapping_source:\n          type: string\n        checker_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/checker_mappings'\n    task_status:\n      required:\n      - task_id\n      - task_url\n      type: object\n      properties:\n        task_id:\n          type: string\n        task_url:\n          type: string\n    taxonomy:\n      required:\n      - taxonomy_id\n      - taxonomy_name\n      - taxonomy_version\n      type: object\n      properties:\n        taxonomy_id:\n          type: string\n        taxonomy_name:\n          type: string\n          description: Name of the taxonomy, i.e., CERT or CWE\n        taxonomy_version:\n          type: string\n        description:\n          type: string\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition_response_w_id'\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    taxonomy_heading:\n      required:\n      - taxonomy_id\n      - taxonomy_name\n      - taxonomy_version\n      type: object\n      properties:\n        taxonomy_id:\n          type: string\n        taxonomy_name:\n          type: string\n        taxonomy_version:\n          type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    taxonomy_metadata:\n      required:\n      - conditions\n      - description\n      - taxonomy_name\n      - taxonomy_version\n      type: object\n      properties:\n        taxonomy_name:\n          type: string\n        taxonomy_version:\n          type: string\n        description:\n          type: string\n        author_source:\n          type: string\n          description: Author/Agency source of the taxonomy information\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/condition'\n    test_suite_contents:\n      required:\n      - manifest_file\n      type: object\n      properties:\n        manifest_file:\n          type: string\n          description: Manifest for this test suite\n          format: binary\n        source_file_csv:\n          type: string\n          description: Source File CSV\n          format: binary\n        source_function_csv:\n          type: string\n          description: Source Function CSV\n          format: binary\n        use_license_file:\n          type: string\n          description: Use License for this test suite\n          format: binary\n    test_suite_heading:\n      required:\n      - test_suite_id\n      - test_suite_name\n      - test_suite_version\n      type: object\n      properties:\n        test_suite_id:\n          type: string\n        test_suite_name:\n          type: string\n        test_suite_version:\n          type: string\n        manifest_urls:\n          type: array\n          items:\n            type: string\n            description: Link to download the associated manifest\n            format: uri\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n          description: Author/Agency source of the test suite information\n        code_languages:\n          $ref: '#/components/schemas/list_languages'\n    test_suite_metadata:\n      required:\n      - test_suite_name\n      - test_suite_version\n      type: object\n      properties:\n        test_suite_name:\n          type: string\n        test_suite_version:\n          type: string\n        test_suite_type:\n          type: string\n          description: Options include 'juliet', 'stonesoup' etc.\n          enum:\n          - juliet\n          - stonesoup\n        manifest_urls:\n          type: array\n          items:\n            type: string\n            description: Link to download the associated manifests\n            format: uri\n        use_license_file_url:\n          type: string\n          format: uri\n        author_source:\n          type: string\n          description: Author/Agency source of the test suite information\n        code_languages:\n          type: array\n          items:\n            $ref: '#/components/schemas/language_version'\n    tool_alert_mappings:\n      type: array\n      items:\n        $ref: '#/components/schemas/alert_mappings'\n    tool_heading:\n      required:\n      - tool_id\n      - tool_name\n      - tool_version\n      type: object\n      properties:\n        tool_id:\n          type: string\n        tool_name:\n          type: string\n        tool_version:\n          type: string\n        language_platforms:\n          type: array\n          items:\n            type: string\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        uploader_id:\n          type: string\n        uploader_organization_id:\n          type: string\n        author_source:\n          type: string\n    tool_metadata:\n      allOf:\n      - $ref: '#/components/schemas/base_tool'\n      - required:\n        - category\n        - tool_name\n        - tool_version\n        type: object\n        properties:\n          author_source:\n            type: string\n          tool_parser:\n            type: string\n            description: Tool name from the GET /tool/parsers API of an available\n              SCAIFE parser\n          category:\n            type: string\n            description: The type of tool, e.g., FFSA or Metrics\n    tool_output_data:\n       type: object\n       properties:\n         metrics_tool_format:\n            type: string\n            description: Metrics tool used to produce the CSV\n            enum:\n            - ccsm\n            - lizard\n            - understand\n         ffsa_tool_format:\n           type: string\n           description: Format used in the FFSA tool output\n           enum:\n           - raw\n           - scarf\n           - swamp\n         tool_output_file:\n           type: string\n           description: Tool Output File to Upload to the DataHub\n           format: binary\n    tool_parsers:\n      type: array\n      items:\n        type: string\n    tool_response:\n      required:\n      - tool_id\n      - tool_name\n      - tool_version\n      type: object\n      properties:\n        tool_id:\n          type: string\n        tool_name:\n          type: string\n        tool_version:\n          type: string\n        category:\n          type: string\n        language_platforms:\n          type: array\n          items:\n            type: string\n        checkers:\n          type: array\n          items:\n            $ref: '#/components/schemas/checker'\n        code_language_ids:\n          type: array\n          items:\n            type: string\n        checker_mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/tool_response_mapping'\n    tool_response_mapping:\n      type: object\n      properties:\n        mapping_id:\n          type: string\n        mapping_source:\n          type: string\n        description:\n          type: string\n        mapping_date:\n          type: string\n          format: date-time\n    tool_taxonomies_present:\n      type: object\n      properties:\n        tool_ids:\n          type: array\n          description: '''List of tools already present at the source module (Stats).\n            The destination module (DataHub) will use this list to avoid sending duplicate\n            tool information.'''\n          items:\n            type: string\n        taxonomy_ids:\n          type: array\n          description: '''List of taxonomies already present at the source module\n            (Stats). The destination module (DataHub) will use this list to avoid\n            sending duplicate taxonomy information.'''\n          items:\n            type: string\n"
		}
	},
	"Error": "buildIR: make ir: path \"/projects/retrieve\": post: responses: 200: contents: application/json: generate schema: item: field meta_alerts: item: allOf: schema type mismatch:  and object"
}