{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/factset/enterprise-sdk"
		},
		"file": {
			"name": "FactSetConcordance.v2.yaml",
			"size": 0,
			"path": "specs/FactSetConcordance.v2.yaml",
			"byteSize": 162615,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2.0.0\n  title: FactSet Concordance API\n  description: \u003e\n    The FactSet Concordance API provides the ability to programmatically look up\n    several types of entities by their name and other attributes. It attempts to\n    match attributes that you supply for the entity and returns as many match\n    candidates as it can find. The result is a \"concorded\" FactSet Entity\n    Permanent identifier.  The Entity Identifier can then be used as input\n    throughout FactSet's Content soultions, such as Content APIs and Standard\n    DataFeeds.\u003cp\u003e There are two types of workflows supported in the API. The\n    first workflow type follows traditional API conventions in that a request is\n    accepted and a response is returned synchronously. The second workflow type\n    involves a background task. With this workflow, a task is created for\n    uploading a set of queries, and then the client polls for the task to\n    complete. Once the task has completed, the client retrieves the concordance\n    results throught the decisions endpoint.\u003c/p\u003e\n  contact:\n    name: FactSet Research Systems, Inc.\n    email: api@factset.com\nservers:\n  - url: https://api.factset.com/content\n    description: Production Server\nsecurity:\n  - FactSetApiKey: []\n  - FactSetOAuth2: []\ntags:\n  - name: Entity Match\n    description: Retrieve a list of Entity Matches and Candidates for up to 25 names.\n  - name: Entity Match - Bulk\n    description: \u003e-\n      Submit a file with a large list of entity names and attributes and\n      retrieve decisions once mapped.\n  - name: Universes\n    description: Create, View, and Manage Universes where mappings are saved.\n  - name: Mappings\n    description: \u003e-\n      View all Saved Mappings in a Universe or update and save mappings made of\n      ClientIds and Names to FactSet Entity Ids\n  - name: Snowflake\n    description: \u003e-\n      The response is formatted specifically for Snowflake environment and not\n      used by consumers outside of Snowflake.\n  - name: People Match\n    description: Retrieve a list of People Matches.\n  - name: People Mapping\n    description: Used to save a single People Mapping to a given universe\npaths:\n  /factset-concordance/v2/entity-match:\n    get:\n      summary: Get Entity Candidates and Matches for a single name and attributes.\n      description: \u003e\n        Finds the best candidate entities matching the given entity name.\n        Additional attributes can be supplied to narrow the search, such as\n        State, URL, and Entity Types. \u003cp\u003e**Max of 1 Name permitted in a single\n        GET request.** Use the POST method for /entity-match to fetch up to 25\n        names. Otherwise, use the \"Entity Match - Bulk\" workflow to submit\n        larger universes of names to be concorded via a file.\u003c/p\u003e\u003cp\u003e\n      tags:\n        - Entity Match\n      operationId: getEntityMatch\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/country'\n        - $ref: '#/components/parameters/state'\n        - $ref: '#/components/parameters/url'\n        - $ref: '#/components/parameters/includeEntityType'\n        - $ref: '#/components/parameters/excludeEntityType'\n        - $ref: '#/components/parameters/includeEntitySubType'\n        - $ref: '#/components/parameters/excludeEntitySubType'\n        - $ref: '#/components/parameters/addParent'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityMatchResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: \u003e-\n        Get a list of Entity Candidates and Matches for a requested list of up\n        to 25 names and attributes.\n      description: \u003e\n        Finds the best candidate entities matching the given entity name. If a\n        `universeId` is provided, any match for an input including a `clientId`\n        will be saved to that universe. Additional attributes can be supplied to\n        narrow the search, such as State, URL, and Entity Types. Finds the best\n        candidate entities matching the given company name. Additional\n        attributes can be supplied to narrow the search.  \u003cp\u003e**Max of 25 Names\n        inputted.** Use the \"Entity Match - Bulk\" workflow to submit larger\n        universes of names to be concorded via a file.\u003c/p\u003e\u003cp\u003e Supported types of\n        Entities in which the names can match to include -\n          * Corporations, Joint Ventures, and Holding Companies\n          * Fund Managers and various Fund Types (Open-end, Closed End, Hedge, Soverign Wealth, Pension, Exchange Traded, and more).\u003c/p\u003e\n      tags:\n        - Entity Match\n      operationId: getEntityMatchForList\n      requestBody:\n        $ref: '#/components/requestBodies/EntityMatchRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityMatchResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/entity-task:\n    post:\n      summary: Input a file with names and attributes, creating a taskId.\n      description: \u003e\n        Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list\n        of names and attributes and receive a `taskId`. The taskId is then used\n        for reference in the */entity-task-status* and */entity-decisions*\n        endpoints to receive results once the task is successful.\u003cp\u003eThis is the\n        first step in the overall \"Bulk\" workflow. Use the /entity-task-status\n        endpoint to check the status.\u003c/p\u003e \u003cp\u003e A universeId must be included in\n        request. If you do not have a universe created, reference the\n        `/universe` endpoint.\n      tags:\n        - Entity Match - Bulk\n      operationId: getEntityTaskForList\n      requestBody:\n        description: Entity Request object. Used to create an Entity Task.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                universeId:\n                  description: \u003e-\n                    The id of the universe that entities should be mapped to.\n                    Reference the `/universe` endpoint to create a universe, or\n                    view available universes via `/universes`.\n                  type: integer\n                  example: 1\n                taskName:\n                  description: \u003e-\n                    User defined name for the task that will be used to name the\n                    output files.\n                  type: string\n                  example: test31\n                inputFile:\n                  description: \u003e\n                    The UTF-8 encoded CSV File containing the entity names to be\n                    concorded to a FactSet Entity Identifier. The files first\n                    row **MUST** include headers as defined in the *Column\n                    parameters. Be mindful of casing and spacing in column\n                    headers. The input file is posted as a file object in the\n                    form. For this reason, the mime type of this post request\n                    must be multipart/form-data.\n                  type: string\n                  format: binary\n                  example: Name,Country\\nFactSet,US\\n\n                clientIdColumn:\n                  description: \u003e\n                    Header Name of the column in the input file that contains a\n                    unique identifier supplied by the user referred to as a\n                    \"clientId\". This clientId can be used to create custom\n                    mappings or references.\n                  type: string\n                  example: ClientId\n                nameColumn:\n                  description: \u003e\n                    Header name of the column in the input file that contains\n                    the Entity Name to be matched.\n                  type: string\n                  example: NAME\n                countryColumn:\n                  description: \u003e\n                    Header Name of the column in the input file that contains\n                    the country's ISO Code. This is used to filter the\n                    candidates before taking a match decision.\n                  type: string\n                  example: COUNTRY\n                urlColumn:\n                  description: \u003e\n                    Header Name of the column in the input file that contains\n                    the Entity's URL. URL corresponding to the entity name that\n                    is used when evaluating candidates for a match.\n                  type: string\n                  example: URL\n                stateColumn:\n                  description: \u003e\n                    Header Name of the column in the input file that contains\n                    the two letter State Code of the state or province where the\n                    Entity is located. Currently, only US state codes are\n                    supported.\n                  type: string\n                  example: STATE\n                includeEntityType:\n                  description: \u003e\n                    Three-character FactSet entity type code used to filter\n                    candidates in order to determine the final match result.\n                    Only candidates with an entity type specified will be\n                    considered for the final match result. Multiple types can be\n                    entered separated by commas. **Do not include within\n                    `inputFile`.**\n                  type: array\n                  items:\n                    type: string\n                    example: PUB\n                    maxLength: 3\n                    minLength: 3\n                excludeEntityType:\n                  description: \u003e\n                    Three-character FactSet entity type code used to filter\n                    candidates in order to determine the final match result.\n                    Entities with these types will be excluded from the\n                    decisions.\n\n                    It is a global option used to filter the candidates before\n                    taking a match decision.\n\n                    Candidates with an entity type specified will *not* be\n                    considered for the final match result.\n\n                    **Do not include within `inputFile`.**\n                  type: array\n                  items:\n                    type: string\n                    example: EXT\n                    maxLength: 3\n                    minLength: 3\n                includeEntitySubType:\n                  description: \u003e\n                    Two-character FactSet entity subtype code used to filter\n                    candidates in order to determine the final match result.\n                    Only candidates with an entity subtype specified will be\n                    considered for the final match result. Multiple types can be\n                    entered separated by commas. **Do not include within\n                    `inputFile`.**\n                  type: array\n                  items:\n                    type: string\n                    example: PR\n                    maxLength: 2\n                    minLength: 2\n                excludeEntitySubType:\n                  description: \u003e\n                    Two-character FactSet entity subtype code used to filter\n                    candidates in order to determine the final match result.\n                    Candidates with an entity subtype specified will *not* be\n                    considered for the final match result. Multiple types can be\n                    entered separated by commas.\n\n                    **Do not include within `inputFile`.**\n                  type: array\n                  items:\n                    type: string\n                    example: IB\n                    maxLength: 2\n                    minLength: 2\n              required:\n                - universeId\n                - taskName\n                - inputFile\n                - nameColumn\n                - clientIdColumn\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityTaskResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/entity-task-status:\n    get:\n      summary: Gets the status of the requested taskId or all tasks for a User\n      description: \u003e\n        Pulls the **status** for ALL the Entity Tasks submitted by a client\n        within the last 30 days, and related details such as task duration and\n        decision rates. Specific Tasks can also be retrieved by using the\n        _taskId_ parameter.\u003cp\u003eStatus types include -\n          * PENDING - The task has not yet started.\n          * IN_PROGRESS - The task is submitted and decisions are in progress.\n          * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.\n          * FAILURE - The task failed. Reach out to FactSet Support for assistance.\n          * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.\n          * ABORTED - The task was aborted.\n      tags:\n        - Entity Match - Bulk\n      operationId: getEntityTaskStatus\n      parameters:\n        - $ref: '#/components/parameters/taskStatusId'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/status'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityTaskStatusResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/entity-decisions:\n    get:\n      summary: Get the decisions of matches for the requested taskId.\n      description: \u003e\n        Retrieves the `Decision` objects for an Entity Task (taskId). The\n        decisions do not include all candidates, but rather the results of\n        concording the requested list of names included in the input file.\n        Mapped entities will include a FactSet Entity Identifier (-E). Results\n        will be saved to the `universeId` specified in the input file.\n      tags:\n        - Entity Match - Bulk\n      operationId: getEntityDecisions\n      parameters:\n        - $ref: '#/components/parameters/taskDecisionId'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityDecisionsResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/universe:\n    post:\n      summary: Create a new universe\n      description: |\n        Create a new universe that is distinct from any existing universe\n      tags:\n        - Universes\n      operationId: getUniverseForList\n      requestBody:\n        $ref: '#/components/requestBodies/CreateUniverseRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/UniverseMetaResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /factset-concordance/v2/entity-universe:\n    get:\n      summary: Retrieve all saved mappings within a requested universe\n      description: |\n        Retrieves all entity mappings within a requested universe.\n      tags:\n        - Mappings\n      operationId: getEntityUniverse\n      parameters:\n        - $ref: '#/components/parameters/universeIdRequired'\n        - $ref: '#/components/parameters/clientIdFilter'\n        - $ref: '#/components/parameters/mapStatus'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityUniverseResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: \u003e-\n        Retrieve all saved mappings within a requested universe or large list of\n        client ids\n      description: \u003e\n        Retrieves all entity mappings that were saved in a given universe.\n        Supports filtering by a large number of `clientId`s\n      tags:\n        - Mappings\n      operationId: getEntityUniverseForList\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUniverseRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityUniverseResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-universe:\n    get:\n      summary: Retrieve all saved mappings within a requested universe\n      description: |\n        Retrieves all people mappings within a requested universe.\n      tags:\n        - People Mapping\n      operationId: getPeopleUniverse\n      parameters:\n        - $ref: '#/components/parameters/universeIdRequired'\n        - $ref: '#/components/parameters/clientId'\n        - $ref: '#/components/parameters/mapStatus'\n        - $ref: '#/components/parameters/peopleOffset'\n        - $ref: '#/components/parameters/peopleLimit'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleUniverseResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: \u003e-\n        Retrieve all saved mappings within a requested universe or large list of\n        client ids\n      description: \u003e\n        Retrieves all people mappings that were saved in a given universe.\n        Supports filtering by a large number of `clientId`s\n      tags:\n        - People Mapping\n      operationId: getPeopleUniverseForList\n      requestBody:\n        $ref: '#/components/requestBodies/PeopleUniverseRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleUniverseResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/update-universe:\n    post:\n      summary: Update metadata for an existing universe\n      description: |\n        Update metadata for an existing universe\n      tags:\n        - Universes\n      operationId: getUpdateUniverseForList\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateUniverseRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/UniverseMetaResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /factset-concordance/v2/universes:\n    get:\n      summary: Fetch metadata for universes\n      description: \u003e\n        Fetch information on active universes for the current user. Optionally\n        filter for a specific universe given a `universeId`\n      tags:\n        - Universes\n      operationId: getUniverses\n      parameters:\n        - $ref: '#/components/parameters/universeId'\n        - $ref: '#/components/parameters/universeType'\n      responses:\n        '200':\n          $ref: '#/components/responses/UniversesResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /factset-concordance/v2/entity-universe-statistics:\n    get:\n      summary: Get statistics on a given universe\n      description: \u003e\n        Get the total number of mappings in a universe, as well as the number of\n        mapped, unmapped and indeterminate mappings\n      tags:\n        - Universes\n      operationId: getEntityUniverseStatistics\n      parameters:\n        - $ref: '#/components/parameters/universeIdRequired'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityUniverseStatisticsResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /factset-concordance/v2/universe-statistics:\n    get:\n      summary: Get statistics on a given universe\n      description: \u003e\n        Get the total number of mappings in a universe, as well as the number of\n        mapped, unmapped and indeterminate mappings\n      tags:\n        - Universes\n      operationId: getUniverseStatistics\n      parameters:\n        - $ref: '#/components/parameters/universeStatisticsRequired'\n      responses:\n        '200':\n          $ref: '#/components/responses/universeStatisticsResponse'\n        default:\n          $ref: '#/components/responses/ErrorResponse'\n  /factset-concordance/v2/entity-mapping:\n    post:\n      summary: Saves a single-mapping specified by the client.\n      description: \u003e\n        Saves a Concordance Mapping to the client universe. When making a post,\n        all exiting values are overwritten in the database with the values\n        passed in the request. clientId and clientName are required.\n      tags:\n        - Mappings\n      operationId: getEntityMappingForList\n      requestBody:\n        $ref: '#/components/requestBodies/EntityMappingRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-mapping:\n    post:\n      summary: Saves a single-mapping specified by the client.\n      description: \u003e\n        Saves a single Concordance People Mapping to a given universe. When\n        making a post, all exiting values are overwritten in the database with\n        the values passed in the request. clientId and clientName are required.\n      tags:\n        - People Mapping\n      operationId: getPeopleMappingForList\n      requestBody:\n        $ref: '#/components/requestBodies/PeopleMappingRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleMappingResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/entity-mapping-delete:\n    post:\n      summary: Deletes mapping specified by the client.\n      description: \u003e\n        Delete a Concordance Mapping to the client universe. When making a post,\n        all exiting values are overwritten in the database with the values\n        passed in the request. clientId and universeId are required.\n      tags:\n        - Mappings\n      operationId: getEntityMappingDeleteForList\n      requestBody:\n        $ref: '#/components/requestBodies/EntityMappingDeleteRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityMappingDeleteResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-mapping-delete:\n    post:\n      summary: Deletes mapping specified by the client.\n      description: \u003e\n        Delete a Concordance Mapping to the client universe. When making a post,\n        all exiting values are overwritten in the database with the values\n        passed in the request. clientId and universeId are required.\n      tags:\n        - People Mapping\n      operationId: getPeopleMappingDeleteForList\n      requestBody:\n        $ref: '#/components/requestBodies/PeopleMappingDeleteRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleMappingDeleteResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/snowflake-entity-match:\n    post:\n      summary: \u003e-\n        Perform an entity search and return a snowflake-friendly response. Up to\n        25 Names per request.\n      description: \u003e\n        Finds the best candidate entities matching the given company name.\n        Additional attributes can be supplied to narrow the search. *This\n        endpoint is used natively within Snowflake and is not to be consumed\n        directly by users. Reach out to your FactSet Account team to learn more\n        about Concordance in Snowflake.*\n      tags:\n        - Snowflake\n      operationId: getSnowflakeEntityMatchForList\n      requestBody:\n        $ref: '#/components/requestBodies/SnowflakeEntityMatchRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SnowflakeEntityMatchResponse'\n  /factset-concordance/v2/people-match:\n    get:\n      summary: \u003e-\n        Find potential people matches given a person's name.People matches can\n        be retrieved using person's name and other attributes like firstname,\n        middlename and lastname.\n      description: \u003e\n        Finds the best people candidates matching the given name. \u003cp\u003e**Max of 1\n        Name permitted in a single GET request.** Use the POST method for\n        /people-match to fetch up to  names. Otherwise, use the \"People Match -\n        Bulk\" workflow to submit larger universes of names to be concorded via a\n        file.\u003c/p\u003e\u003cp\u003e\n      tags:\n        - People Match\n      operationId: getPeopleMatch\n      parameters:\n        - $ref: '#/components/parameters/personName'\n        - $ref: '#/components/parameters/salutation'\n        - $ref: '#/components/parameters/firstName'\n        - $ref: '#/components/parameters/middleName'\n        - $ref: '#/components/parameters/lastName'\n        - $ref: '#/components/parameters/suffix'\n        - $ref: '#/components/parameters/entity'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleMatchResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      summary: Find potential people matches given a person's name.\n      description: \u003e\n        Finds the best candidate people matching the given people names.\n        Additional attributes can be supplied to narrow the search. If a\n        `universeId` is provided, any match for an input including a `clientId`\n        will be saved to that universe.\n      tags:\n        - People Match\n      operationId: getPeopleMatchForList\n      requestBody:\n        $ref: '#/components/requestBodies/PeopleMatchRequestV2'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleMatchResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-task:\n    post:\n      summary: Create a People Concordance Task.\n      description: \u003e\n        The \"Bulk\" workflow allows the user to create a People Concordance Task.\n        Uploading of a Comma-Separated List file (.csv / UTF-8 encoding) with a\n        list of names and attributes and creation of a task id is mandatory to\n        start the process.\n           The taskId is then used for reference in the /people-task-status and /people-decisions endpoints to receive results once the task is successful.The /people-task-status endpoint is to check the status of the Tasks as per the ids.\n            A universeId must be included in request. If you do not have a universe created, reference the /universe endpoint.The bulk workflow supports a two way approach for the user.\n          **The user can use these parameters in the following ways.**\n            1.Filling all the required fields including the `personNameColumn`.(do not include `firstNameColumn`,`lastNameColumn` \u0026 `middleNameColumn`)\n            2.Filling all the required fields excluding the `personNameColumn`.(Ensure atleast the `lastNameColumn` is filled)\n      tags:\n        - People Match - Bulk\n      operationId: getPeopleTaskForList\n      requestBody:\n        description: People Request object. Used to create an People Task.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                universeId:\n                  description: \u003e-\n                    The id of the universe that entities should be mapped to.\n                    Reference the `/universe` endpoint to create a universe, or\n                    view available universes via `/universes`.\n                  type: integer\n                  example: 1\n                taskName:\n                  description: \u003e-\n                    User defined name for the task that will be used to name the\n                    output files.\n                  type: string\n                  example: test31\n                inputFile:\n                  description: \u003e\n                    The UTF-8 encoded CSV File containing the entity names to be\n                    concorded to a FactSet Entity Identifier. The files first\n                    row **MUST** include headers as defined in the *Column\n                    parameters. Be mindful of casing and spacing in column\n                    headers. The input file is posted as a file object in the\n                    form. For this reason, the mime type of this post request\n                    must be multipart/form-data.\n                  type: string\n                  format: binary\n                  example: Name,Country\\nFactSet,US\\n\n                clientIdColumn:\n                  description: \u003e\n                    Header Name of the column in the input file that contains a\n                    unique identifier supplied by the user referred to as a\n                    \"clientId\". This clientId can be used to create custom\n                    mappings or references.\n                  type: string\n                  example: ClientId\n                entityColumn:\n                  description: \u003e\n                    Header name of the column in the input file that contains\n                    the Entity Name to be matched.\n                  type: string\n                  example: Microsoft\n                firstNameColumn:\n                  description: \u003e\n                    First name of the person.**Do not include with\n                    `personNameColumn`**. \n                  type: string\n                  example: Bill\n                lastNameColumn:\n                  description: \u003e\n                    Lat name of the person.**Do not include with\n                    `personNameColumn`**.\n                  type: string\n                  example: Gates\n                middleNameColumn:\n                  description: \u003e\n                    Middle name of the person.**Do not include within\n                    `personNameColumn`**.\n                  type: string\n                  example: Henry\n                personNameColumn:\n                  description: \u003e\n                    Header name of the column in the input file that contains\n                    the name of the person to be matched. **Do not include with\n                    `firstNameColumn` and `lastNameColumn`.**\n                  type: string\n                  example: Bill Gates\n                priorityColumn:\n                  description: \u003e\n                    Priority associated to the clientId. Used for manual\n                    mapping.\n                  type: string\n                  example: HIGH\n                salutationColumn:\n                  description: \u003e\n                    The salutation of the person.**Do not include with\n                    `personNameColumn`**.\n                  type: string\n                  example: Mr.\n                suffixColumn:\n                  description: \u003e\n                    A name suffix, that follows a person's full name and\n                    provides additional information about the person.**Do not\n                    include with `personNameColumn`**.\n                  type: string\n                  example: HIGH\n              required:\n                - universeId\n                - taskName\n                - inputFile\n                - entityColumn\n                - clientIdColumn\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleTaskResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-task-status:\n    get:\n      summary: Get the Status of the People Tasks.\n      description: \u003e\n        Pulls the **status** for ALL the People Tasks submitted by a client\n        within the last 30 days, and related details such as task duration and\n        decision rates. Specific Tasks can also be retrieved by using the\n        _taskId_ parameter.\u003cp\u003eStatus types include -\n          * PENDING - The task has not yet started.\n          * IN_PROGRESS - The task is submitted and decisions are in progress.\n          * SUCCESS - The task was successful! Move to the /people-decisions endpoint to retrieve decisions.\n          * FAILURE - The task failed. Reach out to FactSet Support for assistance.\n          * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.\n          * ABORTED - The task was aborted.\n      tags:\n        - People Match - Bulk\n      operationId: getPeopleTaskStatus\n      parameters:\n        - $ref: '#/components/parameters/peopleTaskStatusId'\n        - $ref: '#/components/parameters/peopleOffset'\n        - $ref: '#/components/parameters/peopleLimit'\n        - $ref: '#/components/parameters/peopleStatus'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleTaskStatusResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\n  /factset-concordance/v2/people-decisions:\n    get:\n      summary: Get the decisions of matches for the requested taskId.\n      description: \u003e\n        Retrieves the `Decision` objects for an People Task (taskId). The\n        decisions do not include all candidates, but rather the results of\n        concording the requested list of names included in the input file.\n        Mapped entities will include a FactSet Entity Identifier (-E). Results\n        will be saved to the `universeId` specified in the input file.\n      tags:\n        - People Match - Bulk\n      operationId: getPeopleDecisions\n      parameters:\n        - $ref: '#/components/parameters/peopleTaskDecisionId'\n        - $ref: '#/components/parameters/peopleOffset'\n        - $ref: '#/components/parameters/peopleLimit'\n      responses:\n        '200':\n          $ref: '#/components/responses/PeopleDecisionsResponse'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '403':\n          $ref: '#/components/responses/403'\n        '415':\n          $ref: '#/components/responses/415'\n        '500':\n          $ref: '#/components/responses/500'\ncomponents:\n  securitySchemes:\n    FactSetOAuth2:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://auth.factset.com/as/token.oauth2\n          scopes: {}\n    FactSetApiKey:\n      type: http\n      scheme: basic\n  parameters:\n    name:\n      name: name\n      description: Name of Entity to match.\n      in: query\n      schema:\n        type: string\n      required: true\n      example: FactSet\n    country:\n      name: country\n      description: \u003e-\n        ISO2 country code corresponding to the entity name that is used when\n        evaluating candidates for a match. For a list of ISO2 Country codes,\n        visit [OA 8754](https://my.apps.factset.com/oa/pages/8754).\n      in: query\n      schema:\n        type: string\n        maxLength: 2\n        minLength: 2\n      example: US\n    state:\n      name: state\n      description: \u003e-\n        Two-character state code corresponding to the entity name that is used\n        when evaluating candidates for a match. Currently, only US state codes\n        are supported.\n      in: query\n      schema:\n        type: string\n        maxLength: 2\n        minLength: 2\n      example: CT\n    url:\n      name: url\n      description: \u003e-\n        URL corresponding to the entity name that is used when evaluating\n        candidates for a match.\n      in: query\n      schema:\n        type: string\n    includeEntityType:\n      name: includeEntityType\n      description: \u003e\n        Three-character FactSet entity type code used to filter candidates in\n        order to determine the final match result. Only candidates with an\n        entity type specified will be considered for the final match result.\n        Multiple types can be entered separated by commas.\n          |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|\n          |---|---|---|---|\n          |ABS|Asset-Backed||MED|Broadcast Call Sign|\n          |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|\n          |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|\n          |CMD|Commodity||MUT|Mutual Fd-Open End|\n          |COL|College/University||NPO|Non-Profit Organization|\n          |CUR|Currency||OPD|Operating Division|\n          |ESP|Emp Stk Ownership Plan||OTH|Other|\n          |EXT|Extinct||PEF|Pension Fund|\n          |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|\n          |FND|Foundation/Endowment||PUB|Public Company|\n          |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|\n          |FRX|ForEx||PVT|Private Company|\n          |GOV|Government||SOV|Sovereign Wealth Fund|\n          |HED|Hedge Fund||SUB|Subsidiary|\n          |HOL|Holding Company||TRU|Trust/Trustee|\n          |IDX|Index||UMB|Umbrella Fund|\n          |VEN|Venture Capital Fund||JVT|Joint Venture|\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          maxLength: 3\n          minLength: 3\n          example: PUB\n    excludeEntityType:\n      name: excludeEntityType\n      description: \u003e\n        Three-character FactSet entity type code used to filter candidates in\n        order to determine the final match result. Candidates with an entity\n        type specified will *not* be considered for the final match result.\n        Multiple types can be entered separated by commas.\n          |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|\n          |---|---|---|---|\n        |ABS|Asset-Backed||MED|Broadcast Call Sign|\n\n        |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|\n\n        |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|\n\n        |CMD|Commodity||MUT|Mutual Fd-Open End|\n\n        |COL|College/University||NPO|Non-Profit Organization|\n\n        |CUR|Currency||OPD|Operating Division|\n\n        |ESP|Emp Stk Ownership Plan||OTH|Other|\n\n        |EXT|Extinct||PEF|Pension Fund|\n\n        |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|\n\n        |FND|Foundation/Endowment||PUB|Public Company|\n\n        |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|\n\n        |FRX|ForEx||PVT|Private Company|\n\n        |GOV|Government||SOV|Sovereign Wealth Fund|\n\n        |HED|Hedge Fund||SUB|Subsidiary|\n\n        |HOL|Holding Company||TRU|Trust/Trustee|\n\n        |IDX|Index||UMB|Umbrella Fund|\n\n        |VEN|Venture Capital Fund||JVT|Joint Venture|\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          maxLength: 3\n          minLength: 3\n          example: EXT\n    includeEntitySubType:\n      name: includeEntitySubType\n      description: \u003e\n        Two-character FactSet entity subtype code used to filter candidates in\n        order to determine the final match result. Only candidates with an\n        entity subtype specified will be considered for the final match result.\n        Multiple types can be entered separated by commas.\n          |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|\n          |---|---|---|---|\n          |AR|Arbitrage|IC|Investment Company|\n          |BM|Bank Investment Division|IN|Insurance Company|\n          |BR|Broker|MF|Mutual Fund Manager|\n          |CP|Corporate|ML|Master Ltd Part|\n          |CU|Custodial|MM|Market Maker|\n          |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|\n          |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|\n          |FO|Foundation/Endowment Manager|PP|Real Estate Manager|\n          |FS|Fund Distributor|RE|Research Firm|\n          |FU|Fund|SB|Subsidiary Branch|\n          |FY|Family Office|ST|Stock Borrowing/Lending|\n          |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|\n          |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|\n          |IA|Investment Adviser|\n          |IB|Investment Banking|\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          maxLength: 2\n          minLength: 2\n          example: PR\n    excludeEntitySubType:\n      name: excludeEntitySubType\n      description: \u003e\n        Two-character FactSet entity subtype code used to filter candidates in\n        order to determine the final match result. Candidates with an entity\n        subtype specified will not be considered for the final match result.\n        Multiple types can be entered separated by commas.\n\n        |Entity Subtype Code|Entity Subtype Description|Entity Subtype\n        Code|Entity Subtype Description|\n\n        |---|---|---|---|\n\n        |AR|Arbitrage|IC|Investment Company|\n\n        |BM|Bank Investment Division|IN|Insurance Company|\n\n        |BR|Broker|MF|Mutual Fund Manager|\n\n        |CP|Corporate|ML|Master Ltd Part|\n\n        |CU|Custodial|MM|Market Maker|\n\n        |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|\n\n        |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|\n\n        |FO|Foundation/Endowment Manager|PP|Real Estate Manager|\n\n        |FS|Fund Distributor|RE|Research Firm|\n\n        |FU|Fund|SB|Subsidiary Branch|\n\n        |FY|Family Office|ST|Stock Borrowing/Lending|\n\n        |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|\n\n        |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|\n\n        |IA|Investment Adviser|\n\n        |IB|Investment Banking|\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          example: HF\n          maxLength: 2\n          minLength: 2\n    addParent:\n      name: includeParent\n      description: \u003e-\n        Flag to include parent entities in the list of candidates. This\n        parameter does not influence the match result.\n      in: query\n      schema:\n        type: boolean\n        example: false\n        default: false\n    taskDecisionId:\n      name: taskId\n      description: \u003e-\n        Concordance Task Identifier. The taskId is created in response from the\n        /entity-task endpoint.\n      in: query\n      schema:\n        type: integer\n      example: 31589\n      required: true\n    taskStatusId:\n      name: taskId\n      description: \u003e-\n        Concordance Task Identifier. The taskId is created in response from the\n        /entity-task endpoint.\n      in: query\n      schema:\n        type: integer\n      example: 31589\n      required: false\n    offset:\n      name: offset\n      description: Starting row for records to return or rows to skip.\n      in: query\n      schema:\n        type: integer\n        default: 0\n    limit:\n      name: limit\n      in: query\n      description: Limits the number of records in the response.\n      schema:\n        type: integer\n      example: 10\n    status:\n      name: status\n      description: |\n        Filter on the status of the Concordance Tasks. Default is no filter.\n          * PENDING - The task has not yet started\n          * IN_PROGRESS - The task is submitted and decisions are in progress.\n          * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.\n          * FAILURE - The task failed. Reach out to FactSet Support for assistance.\n          * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.\n          * ABORTED - The task was aborted.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - SUCCESS\n            - FAILURE\n            - BAD_REQUEST\n            - ABORTED\n      explode: false\n    mapStatus:\n      name: mapStatus\n      description: \u003e\n        Filter by the Entity Decisions that have the specified mapStatus, where\n        -\n          * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n          * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n          * INDETERMINATE - The requested Entity Name was unable to make a mapping.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n        example: MAPPED\n    clientIdFilter:\n      name: clientId\n      description: |\n        Filter by the clientId(s) created by the user in a previous mapping.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          example: EXT\n      explode: false\n      example:\n        - abc-123\n        - def-456\n    clientId:\n      name: clientId\n      description: |\n        Filter by the clientId(s) created by the user in a previous mapping.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          example: EXT\n      explode: false\n      example:\n        - abc-123\n        - def-456\n    universeId:\n      name: universeId\n      required: false\n      description: \u003e-\n        Universe identifier. *To create a universe, use the `/universe'\n        endpoint.*\n      in: query\n      schema:\n        type: integer\n      example: 1\n    universeType:\n      name: universeType\n      description: Universe Type.\n      in: query\n      schema:\n        type: string\n        enum:\n          - ENTITY\n          - PEOPLE\n      example: ENTITY\n      explode: false\n    universeIdRequired:\n      name: universeId\n      required: true\n      description: \u003e-\n        Universe identifier. *To create a universe, use the `/universe'\n        endpoint.*\n      in: query\n      schema:\n        type: integer\n      example: 1\n    universeStatisticsRequired:\n      name: universeId\n      required: true\n      description: \u003e-\n        Universe identifier. *To create a universe, use the `/universe'\n        endpoint.*\n      in: query\n      schema:\n        type: integer\n      example: 1\n    personName:\n      name: personName\n      description: Name of Person to match.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: Bill Gates\n    salutation:\n      name: salutation\n      description: \u003e-\n        Title in person's name. This parameter should not be provided when the\n        person name is provided as the input.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: Mr\n    firstName:\n      name: firstName\n      description: \u003e-\n        First name of person. This parameter should not be provided when the\n        person name is provided as the input.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: Bill\n    middleName:\n      name: middleName\n      description: \u003e-\n        Middle name of person.This parameter should not be provided when the\n        person name is provided as the input.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: Henry\n    lastName:\n      name: lastName\n      description: \u003e-\n        Last name of person. This parameter should not be provided when the\n        person name is provided as the input.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: Gates\n    suffix:\n      name: suffix\n      description: \u003e-\n        Suffix in person's name. This parameter should not be provided when the\n        person name is provided as the input.\n      in: query\n      schema:\n        type: string\n      required: false\n      example: III\n    entity:\n      name: entity\n      description: \u003e-\n        Entity the person is associated with. It is used to filter the\n        candidates before taking a match decision. Can be entity ID or name. The\n        supported entity types match the what is supported via the /company\n        match.\n      in: query\n      schema:\n        type: string\n      required: true\n      example: Microsoft\n    peopleTaskDecisionId:\n      name: taskId\n      description: \u003e-\n        Concordance Task Identifier. The taskId is created in response from the\n        /people-task endpoint.\n      in: query\n      schema:\n        type: integer\n      example: 31589\n      required: true\n    peopleTaskStatusId:\n      name: taskId\n      description: \u003e-\n        Concordance Task Identifier. The taskId is created in response from the\n        /people-task endpoint.\n      in: query\n      schema:\n        type: integer\n      example: 31589\n      required: false\n    peopleOffset:\n      name: offset\n      description: Starting row for records to return or rows to skip.\n      in: query\n      schema:\n        type: integer\n        default: 0\n    peopleLimit:\n      name: limit\n      in: query\n      description: Limits the number of records in the response.\n      schema:\n        type: integer\n      example: 10\n    peopleStatus:\n      name: status\n      description: |\n        Filter on the status of the Concordance Tasks. Default is no filter.\n          * PENDING - The task has not yet started\n          * IN_PROGRESS - The task is submitted and decisions are in progress.\n          * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.\n          * FAILURE - The task failed. Reach out to FactSet Support for assistance.\n          * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.\n          * ABORTED - The task was aborted.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - SUCCESS\n            - FAILURE\n            - BAD_REQUEST\n            - ABORTED\n      explode: false\n  requestBodies:\n    EntityMatchRequestV2:\n      description: A request to match a Entity.\n      required: true\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/EntityMatchRequest'\n    EntityMappingRequestV2:\n      description: A request to create a single mapping.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityMappingRequest'\n    PeopleMappingRequestV2:\n      description: A request to create a single mapping.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PeopleMappingRequest'\n    EntityMappingDeleteRequestV2:\n      description: A request to delete entity mappings specified by the client\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityMappingDeleteRequest'\n    PeopleMappingDeleteRequestV2:\n      description: A request to delete entity mappings specified by the client\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityMappingDeleteRequest'\n    EntityUniverseRequest:\n      description: A request to fetch all entities of a given universe\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityUniverseRequest'\n    CreateUniverseRequest:\n      description: A request to create a user's universe\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreateUniverseRequest'\n    UpdateUniverseRequest:\n      description: A request to update a user's universe\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateUniverseRequest'\n    PeopleUniverseRequest:\n      description: A request to fetch all entities of a given universe\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PeopleUniverseRequest'\n    SnowflakeEntityMatchRequest:\n      description: A request to match an entity name and its attributes within Snowflake.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SnowflakeEntityMatchRequest'\n    PeopleMatchRequestV2:\n      description: A request to People match.\n      required: true\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/PeopleMatchRequest'\n  responses:\n    '400':\n      description: \u003e-\n        Bad Request. This can occur for several reasons. Please review the\n        \"message\" for more details.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n          examples:\n            Bad Request - Missing Required Parameter:\n              $ref: '#/components/examples/badRequestRequiredParameter'\n            Bad Request - Invalid Parameter:\n              $ref: '#/components/examples/badRequestInvalidParameters'\n            Bad Request - Malformed JSON:\n              $ref: '#/components/examples/badRequestMalformedJSON'\n            Bad Request - Read Timeout:\n              $ref: '#/components/examples/badRequestReadTimeout'\n    '401':\n      description: \u003e-\n        Unauthenticated USERNAME-SERIAL. Ensure you are logged in and have\n        successfully generated an API KEY for the IP range you are connecting\n        from. For more help, select the **Report Issue** in the top right corner\n        of this Developer Portal specification card and choose Connectivity 401\n        or 403 Responses.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n          examples:\n            Bad Request - Date Format:\n              $ref: '#/components/examples/unauthenticated'\n    '403':\n      description: \u003e-\n        The USERNAME-SERIAL attempted to request the endpoint is not authorized\n        to access. The request was a legal request, but the server is refusing\n        to respond. Please reach out to FactSet Account Team for assistance with\n        authorization.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n          examples:\n            Bad Request - forbidden:\n              $ref: '#/components/examples/forbidden'\n    '415':\n      description: \u003e-\n        Unsupported Media Type. This error may be returned when the caller sends\n        a resource in a format that is not accepted by the server. This can be\n        fixed by ensuring that Content-Type header is set to the correct value.\n        In this instance, \"application/json\" would be the appropriate value.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n          examples:\n            Bad Request - Unsupported Media Type:\n              $ref: '#/components/examples/unsupportedMediaType'\n    '500':\n      description: Internal Server Error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/errorResponse'\n          examples:\n            Internal Server Error - Not Writable:\n              $ref: '#/components/examples/notWritable'\n            Internal Server Error - General Exception:\n              $ref: '#/components/examples/generalException'\n    EntityMatchResponse:\n      description: Response containing Entity Match results.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/EntityMatchesResponse'\n          examples:\n            Entity Matches:\n              $ref: '#/components/examples/EntityMatches'\n    EntityTaskResponse:\n      description: OK. The Entity Task creation is submitted.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/EntityTaskResponse'\n          examples:\n            Pending Task:\n              $ref: '#/components/examples/PendingTask'\n    EntityTaskStatusResponse:\n      description: Response object for Task Status endpoint.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/EntityTaskStatusResponse'\n          examples:\n            Successful Entity Task:\n              $ref: '#/components/examples/SuccessfulEntityTasks'\n            Pending Task:\n              $ref: '#/components/examples/PendingTasks'\n            Bad Task:\n              $ref: '#/components/examples/BadTasks'\n            Failed Task:\n              $ref: '#/components/examples/FailedTasks'\n    EntityDecisionsResponse:\n      description: Response object for Entity Decisions endpoint.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/EntityDecisionsResponse'\n          examples:\n            Entity Decisions:\n              $ref: '#/components/examples/EntityDecisions'\n    EntityUniverseResponse:\n      description: Response object for FactSet Concordance Universe detail.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityUniverseResponse'\n          examples:\n            CompanyUniverse:\n              $ref: '#/components/examples/EntityUniverse'\n    PeopleUniverseResponse:\n      description: Response object for FactSet Concordance Universe detail.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PeopleUniverseResponse'\n          examples:\n            CompanyUniverse:\n              $ref: '#/components/examples/PeopleUniverse'\n    EntityUniverseStatisticsResponse:\n      description: Response object for mapping statistics for a universe\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityUniverseStatisticsResponse'\n    universeStatisticsResponse:\n      description: Response object for mapping statistics for a universe\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/universeStatisticsResponse'\n    UniversesResponse:\n      description: Metadata on multiple universes\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UniversesResponse'\n    UniverseMetaResponse:\n      description: Metadata on a single universe\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UniverseMetaResponse'\n    EntityMappingResponse:\n      description: Single entity mapping\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityMappingResponse'\n    PeopleMappingResponse:\n      description: Single people mapping\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PeopleMappingResponse'\n          examples:\n            PeopleResponse:\n              $ref: '#/components/examples/PeopleResponse'\n    EntityResponse:\n      description: Response object for FactSet Concordance Entity.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityResponse'\n          examples:\n            EntityResponse:\n              $ref: '#/components/examples/EntityResponse'\n    SnowflakeEntityMatchResponse:\n      description: \u003e-\n        Response object for the entity-match object in a snowflake friendly\n        response model.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SnowflakeEntityMatchResponse'\n    PeopleMatchResponse:\n      description: Response containing People Match results.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/PeopleMatchesResponse'\n          examples:\n            People Matches:\n              $ref: '#/components/examples/PeopleMatches'\n    EntityMappingDeleteResponse:\n      description: \u003e-\n        Response object for the entity-match object in a snowflake friendly\n        response model.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityMappingDeleteResponse'\n    PeopleMappingDeleteResponse:\n      description: \u003e-\n        Response object for the entity-match object in a snowflake friendly\n        response model.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PeopleMappingDeleteResponse'\n          examples:\n            PeopleResponse:\n              $ref: '#/components/examples/PeopleResponse'\n    PeopleTaskResponse:\n      description: OK. The People Task creation is submitted.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/PeopleTaskResponse'\n          examples:\n            Pending Task:\n              $ref: '#/components/examples/PeopleTask'\n    PeopleTaskStatusResponse:\n      description: Response object for People Task Status endpoint.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/PeopleTaskStatusResponse'\n          examples:\n            Successful Entity Task:\n              $ref: '#/components/examples/SuccessfulPeopleTasks'\n            Pending Task:\n              $ref: '#/components/examples/PendingTask1'\n            Bad Task:\n              $ref: '#/components/examples/BadTasks1'\n            Failed Task:\n              $ref: '#/components/examples/FailedTasks1'\n    PeopleDecisionsResponse:\n      description: Response object for Entity Decisions endpoint.\n      content:\n        application/json;charset=utf-8:\n          schema:\n            $ref: '#/components/schemas/PeopleDecisionsResponse'\n          examples:\n            People Decisions:\n              $ref: '#/components/examples/PeopleDecisions'\n    ErrorResponse:\n      description: Error Response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          examples:\n            Not Found:\n              $ref: '#/components/examples/NotFound'\n  schemas:\n    EntityMatchRequest:\n      title: Entity Match Request\n      description: Request object for a requesting multiple Entity Matches.\n      type: object\n      properties:\n        input:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                description: The Name of the entity to match.\n                type: string\n                example: Amazon\n              clientId:\n                description: \u003e\n                  A unique identifier supplied by the user. ClientId is saved to\n                  the user's Concordance universe and will be used as the\n                  identifier for that entity within the universe.\n                type: string\n                example: abc-123\n              country:\n                description: \u003e\n                  ISO2 country code corresponding to the entity name that is\n                  used when evaluating candidates for a match. For a list of ISO\n                  Country codes, visit [OA\n                  8754](https://my.apps.factset.com/oa/pages/8754).\n                type: string\n                maxLength: 2\n                minLength: 2\n                example: US\n              state:\n                description: \u003e\n                  Two-character state code corresponding to the entity name that\n                  is used when evaluating candidates for a match. Currently,\n                  only US state codes are supported.Two character state or\n                  province code to filter on.\n                type: string\n                maxLength: 2\n                minLength: 2\n                example: CT\n              url:\n                description: \u003e\n                  URL corresponding to the entity name that is used when\n                  evaluating candidates for a match.\n                type: string\n                example: www.amazon.com\n            required:\n              - name\n          minItems: 1\n          maxItems: 25\n        includeEntityType:\n          description: \u003e\n            Three-character FactSet entity type code used to filter candidates\n            in order to determine the final match result. Only candidates with\n            an entity type specified will be considered for the final match\n            result. Multiple types can be entered separated by commas\n              |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|\n              |---|---|---|---|\n              |ABS|Asset-Backed||MED|Broadcast Call Sign|\n              |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|\n              |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|\n              |CMD|Commodity||MUT|Mutual Fd-Open End|\n              |COL|College/University||NPO|Non-Profit Organization|\n              |CUR|Currency||OPD|Operating Division|\n              |ESP|Emp Stk Ownership Plan||OTH|Other|\n              |EXT|Extinct||PEF|Pension Fund|\n              |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|\n              |FND|Foundation/Endowment||PUB|Public Company|\n              |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|\n              |FRX|ForEx||PVT|Private Company|\n              |GOV|Government||SOV|Sovereign Wealth Fund|\n              |HED|Hedge Fund||SUB|Subsidiary|\n              |HOL|Holding Company||TRU|Trust/Trustee|\n              |IDX|Index||UMB|Umbrella Fund|\n              |VEN|Venture Capital Fund||JVT|Joint Venture|\n          type: array\n          items:\n            type: string\n            maxLength: 3\n            minLength: 3\n            example: PUB\n        excludeEntityType:\n          description: \u003e\n            Three-character FactSet entity type code used to filter candidates\n            in order to determine the final match result. Candidates with an\n            entity type specified will not be considered for the final match\n            result. Multiple types can be entered separated by commas.\n              |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|\n              |---|---|---|---|\n              |ABS|Asset-Backed||MED|Broadcast Call Sign|\n              |BAS|Business Association (JP)||MUC|Mutual Fd-Closed End|\n              |CAC|Consolidated Accounting||MUE|Mutual Fd-ETF|\n              |CMD|Commodity||MUT|Mutual Fd-Open End|\n              |COL|College/University||NPO|Non-Profit Organization|\n              |CUR|Currency||OPD|Operating Division|\n              |ESP|Emp Stk Ownership Plan||OTH|Other|\n              |EXT|Extinct||PEF|Pension Fund|\n              |FAF|Family of Fds (VC/Pvt EQ)||PRO|Real Property|\n              |FND|Foundation/Endowment||PUB|Public Company|\n              |FNS|Financing Subsidiary/SPE||PVF|Private Eq Fd/Alt Invt|\n              |FRX|ForEx||PVT|Private Company|\n              |GOV|Government||SOV|Sovereign Wealth Fund|\n              |HED|Hedge Fund||SUB|Subsidiary|\n              |HOL|Holding Company||TRU|Trust/Trustee|\n              |IDX|Index||UMB|Umbrella Fund|\n              |VEN|Venture Capital Fund||JVT|Joint Venture|\n          type: array\n          items:\n            type: string\n            example: EXT\n            maxLength: 3\n            minLength: 3\n        includeEntitySubType:\n          description: \u003e\n            Two-character FactSet entity subtype code used to filter candidates\n            in order to determine the final match result. Only candidates with\n            an entity subtype specified will be considered for the final match\n            result. Multiple types can be entered separated by commas.\n              |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|\n              |---|---|---|---|\n              |AR|Arbitrage|IC|Investment Company|\n              |BM|Bank Investment Division|IN|Insurance Company|\n              |BR|Broker|MF|Mutual Fund Manager|\n              |CP|Corporate|ML|Master Ltd Part|\n              |CU|Custodial|MM|Market Maker|\n              |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|\n              |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|\n              |FO|Foundation/Endowment Manager|PP|Real Estate Manager|\n              |FS|Fund Distributor|RE|Research Firm|\n              |FU|Fund|SB|Subsidiary Branch|\n              |FY|Family Office|ST|Stock Borrowing/Lending|\n              |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|\n              |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|\n              |IA|Investment Adviser|\n              |IB|Investment Banking|\n          type: array\n          items:\n            type: string\n            example: PR\n            maxLength: 2\n            minLength: 2\n        excludeEntitySubType:\n          description: \u003e\n            Two-character FactSet entity subtype code used to filter candidates\n            in order to determine the final match result. Candidates with an\n            entity subtype specified will not be considered for the final match\n            result. Multiple types can be entered separated by commas.\n              |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|\n              |---|---|---|---|\n              |AR|Arbitrage|IC|Investment Company|\n              |BM|Bank Investment Division|IN|Insurance Company|\n              |BR|Broker|MF|Mutual Fund Manager|\n              |CP|Corporate|ML|Master Ltd Part|\n              |CU|Custodial|MM|Market Maker|\n              |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|\n              |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|\n              |FO|Foundation/Endowment Manager|PP|Real Estate Manager|\n              |FS|Fund Distributor|RE|Research Firm|\n              |FU|Fund|SB|Subsidiary Branch|\n              |FY|Family Office|ST|Stock Borrowing/Lending|\n              |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|\n              |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|\n              |IA|Investment Adviser|\n              |IB|Investment Banking|\n          type: array\n          items:\n            type: string\n            example: HF\n            maxLength: 2\n            minLength: 2\n        includeParent:\n          description: \u003e\n            Flag to include parent entities in the list of candidates. This\n            parameter does not influence the match result.\n          type: boolean\n          default: false\n        universeId:\n          description: |\n            The universeId to save this set of inputs to\n          type: integer\n          example: 1\n      required:\n        - input\n    EntityMappingRequest:\n      type: object\n      required:\n        - universeId\n        - clientId\n        - clientName\n      properties:\n        universeId:\n          description: The universe to save this mapping to.\n          type: integer\n          example: 1\n        clientId:\n          description: \u003e-\n            A unique identifier supplied by the user. ClientId is saved to the\n            user's Concordance universe and will be used as the identifier for\n            that entity within the universe.\n          type: string\n          example: FDS-USA\n        entityId:\n          description: FactSet Entity Identifier mapped to the submitted entity.\n          type: string\n          example: 0016YD-E\n        clientName:\n          description: Name of entity to match.\n          type: string\n          example: FactSet\n        clientCountry:\n          description: ISO2 country code corresponding to the Entity name.\n          type: string\n          example: US\n          minLength: 2\n          maxLength: 2\n        clientState:\n          description: ISO Code of State or Province location to map Entity.\n          type: string\n          example: CT\n          minLength: 2\n          maxLength: 2\n        clientUrl:\n          description: URL corresponding to the entity name.\n          type: string\n          example: www.factset.com\n    PeopleMappingRequest:\n      type: object\n      required:\n        - universeId\n        - clientId\n        - clientName\n      properties:\n        clientEntity:\n          description: Used to describe the company of the person\n          type: string\n          example: Microsoft\n        clientFirstName:\n          description: Used to describe the first name of the person\n          type: string\n          example: William\n        clientId:\n          description: \u003e-\n            A unique identifier supplied by the user. ClientId is saved to the\n            user's Concordance universe and will be used as the identifier for\n            that entity within the universe.\n          type: string\n          example: BGA-123\n        clientLastName:\n          description: Used to describe the last name of the person.\n          type: string\n          example: Gates\n        clientMiddleName:\n          description: Used to describe the middle name of the person.\n          type: string\n          example: Henry\n        clientPersonName:\n          description: Used to describe the name of the person\n          type: string\n          example: Bill Gates\n        clientPriority:\n          description: Used to indicate the priority of the person\n          type: string\n          example: HIGH\n        clientSalutation:\n          description: Used to indicate the salutation of the person\n          type: string\n          example: Mr\n        clientSuffix:\n          description: Used to indicate the suffix for the person's name\n          type: string\n          example: III\n        personId:\n          description: A unique identifier used to identify a person.\n          type: string\n          example: 00118X-E\n        universeId:\n          description: \u003e-\n            A unique identifier supplied to a person to save the data into\n            his/her universe.\n          type: integer\n          example: 1\n    EntityMappingDeleteRequest:\n      type: object\n      required:\n        - universeId\n        - clientId\n      properties:\n        universeId:\n          description: The universe to save this mapping to.\n          type: integer\n          example: 1\n        clientId:\n          description: \u003e-\n            A unique identifier supplied by the user. ClientId is saved to the\n            user's Concordance universe and will be used as the identifier for\n            that entity within the universe.\n          type: array\n          items:\n            type: string\n          example:\n            - abc-123\n            - dfg-456\n    EntityUniverseRequest:\n      type: object\n      required:\n        - universeId\n      properties:\n        universeId:\n          description: the id of the universe that entities come from\n          type: integer\n          example: 1\n        offset:\n          description: starting row of the universe\n          type: integer\n          example: 0\n        limit:\n          description: Limits the number of records in the response.\n          type: integer\n          example: 10\n        mapStatus:\n          description: \u003e\n            Filter by the EPeople Decisions that have the specified mapStatus,\n            where -\n                  * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n                  * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n                  * INDETERMINATE - The requested Entity Name was unable to make a mapping.\n          type: array\n          items:\n            type: string\n            enum:\n              - MAPPED\n              - UNMAPPED\n              - INDETERMINATE\n          example: MAPPED\n        clientId:\n          description: \u003e-\n            fetch only the mappings that has client id included in the specified\n            list.\n          type: array\n          items:\n            type: string\n          example:\n            - abc-123\n            - dfg-456\n    CreateUniverseRequest:\n      type: object\n      required:\n        - universeName\n      properties:\n        universeName:\n          description: Universe name\n          type: string\n          example: My Universe\n        universeDescription:\n          description: Universe description\n          type: string\n          example: This is my universe\n        universeType:\n          description: Universe type\n          type: string\n          example: ENTITY\n    UpdateUniverseRequest:\n      type: object\n      required:\n        - universeId\n      properties:\n        universeName:\n          description: Universe name\n          type: string\n          example: My Universe\n        universeDescription:\n          description: Universe description\n          type: string\n          example: This is my universe\n        universeId:\n          description: Universe identifier\n          type: integer\n          example: 1\n    PeopleUniverseRequest:\n      type: object\n      required:\n        - universeId\n      properties:\n        universeId:\n          description: the id of the universe that entities come from\n          type: integer\n          example: 1\n        offset:\n          description: starting row of the universe\n          type: integer\n          example: 0\n        limit:\n          description: Limits the number of records in the response.\n          type: integer\n          example: 10\n        mapStatus:\n          description: \u003e\n            Filter by the People Decisions that have the specified mapStatus,\n            where -\n                  * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n                  * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n                  * INDETERMINATE - The requested Entity Name was unable to make a mapping.\n          type: array\n          items:\n            type: string\n            enum:\n              - MAPPED\n              - UNMAPPED\n              - INDETERMINATE\n          example:\n            - MAPPED\n        clientId:\n          description: \u003e-\n            fetch only the mappings that has client id included in the specified\n            list.\n          type: array\n          items:\n            type: string\n          example:\n            - abc-123\n            - dfg-456\n    SnowflakeEntityMatchRequest:\n      title: Snowflake Company Match Request\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          description: Array of input rows\n          type: array\n          items:\n            type: array\n            description: One search row from Snowflake\n            items:\n              type: object\n              example: 0\n            minItems: 7\n            maxItems: 7\n            example:\n              - 0\n              - FactSet\n              - US\n              - CT\n              - www.factset.com\n              - 1\n          minItems: 1\n          maxItems: 25\n    PeopleMatchRequest:\n      title: People Match Request\n      description: Request object for a requesting multiple People Matches.\n      type: object\n      properties:\n        input:\n          type: array\n          items:\n            type: object\n            properties:\n              personName:\n                description: The People name to match.\n                type: string\n                example: Bill Gates\n              clientId:\n                description: \u003e\n                  A unique identifier supplied by the user. ClientId is saved to\n                  the user's Concordance universe and will be used as the\n                  identifier for that entity within the universe.\n                type: string\n                example: abc-123\n              salutation:\n                description: \u003e\n                  The salutation is same as the normal salutation we use .The\n                  salutation can be Mr, Mrs.The salutation should not be given\n                  along with personName.\n                type: string\n                example: Mr\n              firstName:\n                description: \u003e\n                  The first name of the person. This field should not be given\n                  along with personName.\n                type: string\n                example: Bill\n              middleName:\n                description: \u003e\n                  The middle name of the person. This field should not be given\n                  along with personName.\n                type: string\n                example: Henry\n              lastName:\n                description: \u003e\n                  The last name of the person. This field should not be given\n                  along with personName.\n                type: string\n                example: Gates\n              suffix:\n                description: \u003e\n                  The suffix of person's name. This field should not be given\n                  along with personName.\n                type: string\n                example: III\n              entity:\n                description: |\n                  The enity of the Person.\n                type: string\n                example: Microsoft\n        universeId:\n          description: |\n            The universeId to save this set of inputs to\n          type: integer\n          example: 1\n    EntityMatchesResponse:\n      title: Entity Matches Response\n      description: Response object for Entity Matches.\n      type: object\n      properties:\n        data:\n          description: Candidate list of `Entity Match` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityMatch'\n    EntityTaskResponse:\n      title: Entity Task Response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/EntityTaskStatus'\n    PeopleTaskResponse:\n      title: People Task Response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/PeopleTask'\n    EntityTaskStatusResponse:\n      title: Entity Task Status Response\n      type: object\n      properties:\n        data:\n          description: Array of Concordance Entity Task `Status` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityTaskStatus'\n    EntityDecisionsResponse:\n      title: Entity Decisions Response\n      type: object\n      properties:\n        data:\n          description: Array of `Entity Match` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityMatch'\n    PeopleDecisionsResponse:\n      title: People Decisions Response\n      type: object\n      properties:\n        data:\n          description: Array of `People Match` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/PeopleDecisions'\n    EntityUniverseResponse:\n      title: Entity Universe Response\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityMapping'\n    PeopleUniverseResponse:\n      title: People Universe Response\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/PeopleMapping'\n    EntityResponse:\n      title: Entity Response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/EntityMapping'\n    EntityMappingResponse:\n      title: Entity Mapping Response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/EntityMapping'\n    PeopleMappingResponse:\n      title: People Mapping Response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/PeopleMapping'\n    UniverseMetaResponse:\n      title: Metadata for a single universe\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/Universe'\n    EntityUniverseStatisticsResponse:\n      title: Entity Mapping Statistics Response\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/UniverseStatistics'\n    universeStatisticsResponse:\n      title: Universe Statistics Response\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/universeStatistics'\n    UniversesResponse:\n      title: Metadata on multiple universes\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/UniverseMeta'\n    SnowflakeEntityMatchResponse:\n      title: Snowflake Entity Search Response\n      type: object\n      example:\n        data:\n          - clientCountry: us,\n            clientId: null,\n            clientName: apple,\n            clientState: ca,\n            clientUrl: www.apple.com,\n            confidenceScore: 1.0,\n            countryCode: us,\n            countryName: United States,\n            entityId: 000C7F-E,\n            entityName: Apple, Inc.,\n            entitySubTypeCode: CP,\n            entityTypeCode: PUB,\n            entityTypeDescription: Public Company,\n            factsetIndustryCode: 1320,\n            factsetIndustryName: Telecommunications Equipment,\n            factsetSectorCode: 1300,\n            factsetSectorName: Electronic Technology,\n            locationCity: Cupertino,\n            mapStatus: MAPPED,\n            matchFlag: true,\n            nameMatchSource: Proper/ Legal Name,\n            nameMatchString: apple inc,\n            parentMatchFlag: false,\n            parentName: null,\n            regionName: North America,\n            rowIndex: 0,\n            sicCode: 3663,\n            similarityScore: 1.0,\n            stateCode: ca,\n            stateName: California,\n            taskId: null,\n            url: www.apple.com,\n          - clientCountry: null,\n            clientId: null,\n            clientName: factset,\n            clientState: null,\n            clientUrl: null,\n            confidenceScore: 1.0,\n            countryCode: us,\n            countryName: United States,\n            entityId: 0016YD-E,\n            entityName: FactSet Research Systems, Inc.,\n            entitySubTypeCode: CP,\n            entityTypeCode: PUB,\n            entityTypeDescription: Public Company,\n            factsetIndustryCode: 3305,\n            factsetIndustryName: Data Processing Services,\n            factsetSectorCode: 3300,\n            factsetSectorName: Technology Services,\n            locationCity: Norwalk,\n            mapStatus: MAPPED,\n            matchFlag: true,\n            nameMatchSource: Domain Name,\n            nameMatchString: factset,\n            parentMatchFlag: false,\n            parentName: null,\n            regionName: North America,\n            rowIndex: 1,\n            sicCode: 7374,\n            similarityScore: 1.0,\n            stateCode: ct,\n            stateName: Connecticut,\n            taskId: null,\n            url: www.factset.com\n      properties:\n        data:\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n          description: JSON body to be parsed by snowflake\n    EntityMappingDeleteResponse:\n      title: Entity Delete Mapping Response\n      type: object\n      properties:\n        data:\n          description: \u003e-\n            Array of `Entity Mapping` objects that have been successfully\n            deleted.\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityMapping'\n    PeopleMappingDeleteResponse:\n      title: Entity Delete Mapping Response\n      type: object\n      properties:\n        data:\n          description: \u003e-\n            Array of `Entity Mapping` objects that have been successfully\n            deleted.\n          type: array\n          items:\n            $ref: '#/components/schemas/PeopleMapping'\n    PeopleMatchesResponse:\n      title: People Matches Response\n      description: Response object for People Matches.\n      type: object\n      properties:\n        data:\n          description: Candidate list of `People Match` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/PeopleMatch'\n    PeopleTaskStatusResponse:\n      title: People Task Status Response\n      type: object\n      properties:\n        data:\n          description: Array of Concordance People Task `Status` objects.\n          type: array\n          items:\n            $ref: '#/components/schemas/PeopleTaskStatus'\n    ErrorResponse:\n      title: Error Response\n      type: object\n      properties:\n        status:\n          description: Status.\n          type: string\n          example: Bad Request\n        timestamp:\n          description: Timestamp in yyyy-mm-ddThh:mm:ss.sss format.\n          type: string\n          example: '2019-11-01T11:09:41.918'\n          format: date-time\n        path:\n          description: The Endpoint path {package}/version/{endpoint}\n          type: string\n          example: /factset-concordance/v2/entity-match\n        message:\n          description: The plain text error message.\n          type: string\n          example: Validation Error\n        subErrors:\n          description: Sub-errors related to the error message. Null if not applicable.\n          type: object\n          properties:\n            object:\n              description: the operation ID\n              type: string\n            field:\n              description: Parameter Field Name\n              type: string\n            message:\n              description: Error message\n              type: string\n            rejectedValue:\n              description: Rejected Values in an Array\n              type: array\n              items:\n                type: string\n    EntityMatch:\n      title: Entity Match\n      description: |\n        Entity Match object showing the decision reached for each Entity.\n      type: object\n      properties:\n        universeId:\n          description: The id of the universe that entities should be mapped to\n          type: integer\n          example: 1\n          nullable: true\n        taskId:\n          description: \u003e\n            Identifier denoting a specific Concordance task submitted by the\n            user. This value will be null for /entity-match endpoint responses\n            and is only available when using the \"Bulk\" workflow.\n          type: integer\n          example: 31\n          nullable: true\n        rowIndex:\n          description: Row number for match in the request or input file.\n          type: integer\n          nullable: true\n        matchFlag:\n          description: Flag denoting if the row is a match.\n          type: boolean\n          nullable: true\n        entityId:\n          description: \u003e\n            FactSet Entity Identifier of the entity matched respective to the\n            requested Name submitted. For more detail, visit [FactSet Permanent\n            Security\n            Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881)\n          type: string\n          nullable: true\n        entityName:\n          description: Full name corresponding to the matched entity.\n          type: string\n          example: FactSet Research Systems, Inc.\n          nullable: true\n        url:\n          description: URL of the matched entity.\n          type: string\n          example: www.factset.com\n          nullable: true\n        mapStatus:\n          description: |\n            Concordance status of the submitted, where - \n              * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n              * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n              * INDETERMINATE - The requested Entity Name has unable to make a mapping.\n          type: string\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n          example: MAPPED\n          nullable: true\n        similarityScore:\n          description: \u003e\n            Probability of the match being similar to the entity requested as\n            determined by the Concordance algorithm. A similarityScore of 1 is\n            the highest level of similarity.\n          type: number\n          format: double\n          example: 1\n          nullable: true\n        confidenceScore:\n          description: \u003e\n            Additional statistic calculated by the algorithm that is used to\n            ensure the validity of the match result. A confidenceScore of 1 is\n            the highest level of confidence.\n          type: number\n          format: double\n          example: 1\n          nullable: true\n        countryCode:\n          description: \u003e-\n            ISO2 country code corresponding to the location of the matched\n            entity.\n          type: string\n          example: US\n          nullable: true\n        countryName:\n          description: Country name corresponding to the location of the matched entity\n          type: string\n          example: United States\n          nullable: true\n        stateCode:\n          description: \u003e-\n            Two character state code corresponding to the location of the\n            matched entity.\n          type: string\n          example: CT\n          nullable: true\n        stateName:\n          description: State name corresponding to the location of the matched entity.\n          type: string\n          example: Connecticut\n          nullable: true\n        sicCode:\n          description: Standard Industrial Classification (SIC) Code of the matched entity.\n          type: string\n          example: 7374\n          nullable: true\n        entityTypeCode:\n          description: \u003e-\n            Code representing the entity type of the matched entity. See the\n            related request parameter for a table of all Codes and their\n            respective descriptions.\n          type: string\n          example: PUB\n          nullable: true\n        entityTypeDescription:\n          description: Description of of the matched entity's type.\n          type: string\n          example: Public Company\n          nullable: true\n        entitySubTypeCode:\n          description: \u003e-\n            Code representing the entity subtype of the matched entity. See the\n            related request parameter for a table of all Codes and their\n            respective descriptions.\n          type: string\n          example: PR\n          nullable: true\n        locationCity:\n          type: string\n          example: Norwalk\n          nullable: true\n          description: City where the matched entity is located.\n        regionName:\n          description: Region where the matched entity is located.\n          type: string\n          example: North America\n          nullable: true\n        factsetIndustryCode:\n          description: FactSet Industry Classification Code of the matched entity.\n          type: string\n          example: 3305\n          nullable: true\n        factsetIndustryName:\n          description: Name of the matched entity's FactSet Industry Classification.\n          type: string\n          example: Data Processing Services\n          nullable: true\n        factsetSectorCode:\n          description: Name of the matched entity's FactSet Sector Classification Code.\n          type: string\n          example: 3300\n          nullable: true\n        factsetSectorName:\n          description: Name of the matched entity's FactSet Sector Classification.\n          type: string\n          example: Technology Services\n          nullable: true\n        parentName:\n          description: Name of the matched entity's parent entity.\n          type: string\n          nullable: true\n        parentMatchFlag:\n          description: \u003e-\n            Flag denoting that the matched entity is the parent of another\n            match.\n          type: boolean\n          example: false\n          nullable: true\n        clientId:\n          description: \u003e-\n            Unique Identifer provided by the user in the request to represent\n            the entity Name being requested.\n          type: string\n          example: abc-123\n          nullable: true\n        clientName:\n          description: Name of the entity to match as specified in the request\n          type: string\n          example: factset\n          nullable: true\n        clientCountry:\n          description: ISO2 country code specified in the request.\n          type: string\n          example: US\n          nullable: true\n        clientState:\n          description: State code specified in the request.\n          type: string\n          example: CT\n          nullable: true\n        clientUrl:\n          description: URL specified in the request.\n          type: string\n          example: www.factset.com\n          nullable: true\n        nameMatchString:\n          description: \u003e-\n            String on which the Concordance algorithm mapped the submitted\n            entity.\n          type: string\n          example: factset\n          nullable: true\n        nameMatchSource:\n          description: Type of name that the nameMatchString matched.\n          type: string\n          example: Domain Name\n          nullable: true\n    EntityTaskStatus:\n      title: Entity Task Status\n      description: \u003e\n        Concordance Entity Task Status object. Shows the settings and status of\n        a taskId and some statistics on the matches.\n      type: object\n      properties:\n        taskId:\n          description: \u003e-\n            Identifier denoting a specific Concordance task submitted by the\n            user.\n          type: integer\n          example: 31\n          nullable: true\n        taskName:\n          description: User-defined name for the task used to name the output file.\n          type: string\n          example: test31\n          nullable: true\n        taskAction:\n          description: Action status for the Concordance Task process.\n          type: string\n          example: processfile\n          nullable: true\n        status:\n          description: \u003e-\n            Status of the Concordance Task. If the value is \"SUCCESS\", you can\n            move to the subsequent /entity-decisions endpoint to retrieve the\n            results.\n          type: string\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - SUCCESS\n            - FAILURE\n            - BAD_REQUEST\n            - ABORTED\n          nullable: true\n        inputFile:\n          description: |\n            The input file is posted as a file object in the form.\n          type: string\n          example: test31.csv\n          nullable: true\n        clientIdColumn:\n          description: \u003e-\n            Name of the column in the input file that contains a unique\n            identifier supplied by the user.\n          type: string\n          example: ClientId\n          nullable: true\n        nameColumn:\n          description: \u003e-\n            Name of the column in the input file that contains the entity name\n            to be matched.\n          type: string\n          example: Name\n          nullable: true\n        countryColumn:\n          description: \u003e\n            Name of the column in the input file that contains the ISO2 country\n            code corresponding to the entity name.  The country code is used\n            when evaluating candidates for a match.\n          type: string\n          example: Country\n          nullable: true\n        stateColumn:\n          description: \u003e\n            Name of the column in the input file that contains the Two-character\n            state code corresponding to the entity name. The state code is used\n            when evaluating candidates for a match.\n          type: string\n          example: State\n          nullable: true\n        urlColumn:\n          description: \u003e\n            Name of the column in the input file that contains the URL\n            corresponding to the entity name. The URL is used when evaluating\n            candidates for a match.\n          type: string\n          example: URL\n          nullable: true\n        hasResult:\n          description: Flag denoting the taskId has a result.\n          type: boolean\n          example: true\n          nullable: true\n        taskSubmitTime:\n          description: Time the Task was submitted in UTC.\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        message:\n          description: Textual message for the status.\n          type: string\n          example: Waiting for the input file\n          nullable: true\n        inputCount:\n          description: Number of records in the Input File.\n          type: integer\n          example: 11\n          nullable: true\n        mappedCount:\n          description: Number of records with status of MAPPED the Input File.\n          type: integer\n          example: 8\n          nullable: true\n        unmappedCount:\n          description: Number of records with status of UNMAPPED the Input File.\n          type: integer\n          example: 2\n          nullable: true\n        indeterminateCount:\n          description: Number of records with status of INDETERMINATE the Input File.\n          type: integer\n          example: 1\n          nullable: true\n        processStartTime:\n          description: Process start time in UTC.\n          type: string\n          format: date-time\n          example: 2020-07-03T15:12:06.722Z\n          nullable: true\n        processDuration:\n          description: Process duration in seconds.\n          type: number\n          format: double\n          example: 1.51603\n          nullable: true\n        tryCount:\n          description: Number of tries made so far for the request.\n          type: integer\n          example: 3\n          nullable: true\n        decisionRate:\n          description: Percentage of mapped entities in the Input File.\n          type: number\n          format: double\n          example: 0.7272727272727273\n          nullable: true\n        error:\n          type: string\n          nullable: true\n        errorTitle:\n          type: string\n          nullable: true\n        includeEntityType:\n          description: |\n            Requested Entity types to include.\n          type: array\n          items:\n            type: string\n            example: PUB\n            nullable: true\n        excludeEntityType:\n          description: |\n            Requested Entity types to exclude.\n          type: array\n          items:\n            type: string\n            example: EXT\n            nullable: true\n        includeEntitySubType:\n          description: |\n            Requested Entity subtypes to include.\n          type: array\n          items:\n            type: string\n            example: PR\n            nullable: true\n        excludeEntitySubType:\n          description: |\n            Requested Entity subtypes to exclude.\n          type: array\n          items:\n            type: string\n            example: IB\n            nullable: true\n        userSerial:\n          description: user-serial of the person who initiated the entity task.\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n        userFullName:\n          description: |\n            Full name of the person associated with the `userSerial`.\n          type: string\n          example: Jane Smith\n          nullable: true\n        universeId:\n          description: |\n            The universe id this task was submitted to.\n          type: integer\n          example: 1\n          nullable: true\n        universeName:\n          description: |\n            The name of the universe this task was submitted to.\n          type: string\n          example: My Universe\n          nullable: true\n    EntityMapping:\n      title: Entity Mapping\n      description: \u003e\n        Concordance Company Entity Mapping object. Shows the mapping detail\n        related to user's universe.\n      type: object\n      properties:\n        entityId:\n          description: \u003e-\n            FactSet Entity Identifier of the entity matched to the submitted\n            entity\n          type: string\n          example: 00456-E\n          nullable: true\n        entityName:\n          description: Full name corresponding to the matched entity.\n          type: string\n          example: FactSet Inc.\n          nullable: true\n        clientId:\n          description: User-defined unique identifier provided by the user in the request\n          type: string\n          example: abc-1234\n          nullable: true\n        clientName:\n          description: Name of the entity to match as specified in the request.\n          type: string\n          example: factset\n          nullable: true\n        clientCountry:\n          description: ISO2 country code specified in the request\n          type: string\n          example: us\n          nullable: true\n        clientState:\n          description: State code specified in the request\n          type: string\n          example: ct\n          nullable: true\n        clientUrl:\n          description: URL specified in the request\n          type: string\n          example: www.factset.com\n          nullable: true\n        createdTime:\n          description: Time when entity was created in UTC.\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        updatedTime:\n          description: Time when the submitted entity was last updated in UTC.\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        mapStatus:\n          description: Current status of the entity mapping.\n          type: string\n          nullable: true\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n        universeId:\n          description: |\n            The universe this mapping belongs to. Only set in v2 endpoints\n          type: integer\n          example: 1\n          nullable: true\n    PeopleMapping:\n      title: People Mapping\n      description: \u003e\n        Concordance People Mapping object. Shows the mapping detail related to\n        user's universe.\n      type: object\n      properties:\n        clientEntity:\n          description: It describes the name of the company\n          type: string\n          example: Microsoft\n          nullable: true\n        clientFirstName:\n          description: It indicates the full name of the client.\n          type: string\n          example: William\n          nullable: true\n        clientId:\n          description: User-defined unique identifier provided by the user in the request\n          type: string\n          example: BGA-123\n          nullable: true\n        clientLastName:\n          description: It indicates last name of the client.\n          type: string\n          example: Gates\n          nullable: true\n        clientMiddleName:\n          description: It indicates middle name of the client.\n          type: string\n          example: Henry\n          nullable: true\n        clientPersonName:\n          description: It indiactes the name of the client\n          type: string\n          example: Bill Gates\n          nullable: true\n        clientPriority:\n          description: It indiactes the priority value of the client.\n          type: string\n          example: HIGH\n          nullable: true\n        clientSalutation:\n          description: It indicates the client's salutation.\n          type: string\n          example: Mr\n          nullable: true\n        clientSuffix:\n          description: It indicates the suffix for the client.\n          type: string\n          example: III\n          nullable: true\n        createdTime:\n          description: It indicates the time of the creation\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        mapStatus:\n          description: Current status of the people mapping.\n          type: string\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n          example: MAPPED\n          nullable: true\n        personId:\n          description: |\n            Helps to identify a person by using an unique indiactor\n          type: string\n          example: 00118X-E\n          nullable: true\n        personName:\n          description: It indiactes the full name of the client\n          type: string\n          example: GATES WILLIAM H III\n          nullable: true\n        universeId:\n          description: |\n            The universe this mapping belongs to. Only set in v2 endpoints\n          type: integer\n          example: 1\n          nullable: true\n        updatedTime:\n          description: It indicates the time of the updation\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n    UniverseStatistics:\n      title: Universe Statistics\n      description: Mapping statistics for a given universe\n      type: object\n      properties:\n        totalCount:\n          type: integer\n          example: 10\n          nullable: true\n        mappedCount:\n          type: integer\n          example: 8\n          nullable: true\n        unmappedCount:\n          type: integer\n          example: 1\n          nullable: true\n        indeterminateCount:\n          type: integer\n          example: 1\n          nullable: true\n        universeId:\n          type: integer\n          example: 1\n          nullable: true\n    universeStatistics:\n      title: Universe Statistics\n      description: Mapping statistics for a given universe\n      type: object\n      properties:\n        totalCount:\n          type: integer\n          example: 10\n          nullable: true\n        mappedCount:\n          type: integer\n          example: 8\n          nullable: true\n        unmappedCount:\n          type: integer\n          example: 1\n          nullable: true\n        indeterminateCount:\n          type: integer\n          example: 1\n          nullable: true\n        universeId:\n          type: integer\n          example: 1\n          nullable: true\n    MapStatus:\n      description: Status of an entity mapping\n      type: string\n      example: MAPPED\n      enum:\n        - MAPPED\n        - UNMAPPED\n        - INDETERMINATE\n    UniverseMeta:\n      title: Universe Meta\n      description: Metadata about a single universe\n      type: object\n      properties:\n        universeId:\n          description: The universe identifier\n          type: integer\n          example: 1\n          nullable: true\n        universeName:\n          description: The user specified universe name\n          type: string\n          example: My Universe\n          nullable: true\n        universeDescription:\n          description: The user specified universe description\n          type: string\n          example: This is a universe\n          nullable: true\n        universeType:\n          description: The user specified universe type.\n          type: string\n          example: ENTITY\n          nullable: true\n        selfManaged:\n          description: \u003e-\n            False if the universe is managed by FactSet Managed Service, True\n            otherwise\n          type: boolean\n          example: true\n          nullable: true\n        createdBy:\n          description: The user who created the universe\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n        createdOn:\n          description: When the universe was created\n          type: string\n          format: date-time\n          example: '2020-01-01T00:00:00.000'\n          nullable: true\n        updatedBy:\n          description: The user who most recently updated the universe metadata\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n        updatedOn:\n          description: When the universe metadata was most recently updated\n          type: string\n          format: date-time\n          example: '2020-01-01T00:00:00.000'\n          nullable: true\n    Universe:\n      title: Universe Meta\n      description: Metadata about a single universe\n      type: object\n      properties:\n        universeId:\n          description: The universe identifier\n          type: integer\n          example: 1\n          nullable: true\n        universeName:\n          description: The user specified universe name\n          type: string\n          example: My Universe\n          nullable: true\n        universeDescription:\n          description: The user specified universe description\n          type: string\n          example: This is a universe\n          nullable: true\n        universeType:\n          description: The user specified universe entity.\n          type: string\n          example: ENTITY\n          nullable: true\n        selfManaged:\n          description: \u003e-\n            False if the universe is managed by FactSet Managed Service, True\n            otherwise\n          type: boolean\n          example: true\n          nullable: true\n        createdBy:\n          description: The user who created the universe\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n        createdOn:\n          description: When the universe was created\n          type: string\n          format: date-time\n          example: '2020-01-01T00:00:00.000'\n          nullable: true\n        updatedBy:\n          description: The user who most recently updated the universe metadata\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n        updatedOn:\n          description: When the universe metadata was most recently updated\n          type: string\n          format: date-time\n          example: '2020-01-01T00:00:00.000'\n          nullable: true\n    PeopleMatch:\n      title: People Match\n      description: |\n        People Match object showing the decision reached for each Entity.\n      type: object\n      properties:\n        activeRole:\n          description: This tells whether the person is now active in the entity\n          type: string\n          example: true\n          nullable: true\n        clientEntity:\n          description: |\n            The entity for which the person is working.\n          type: string\n          example: Factset\n          nullable: true\n        clientFirstName:\n          description: \u003e-\n            First Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Elon\n          nullable: true\n        clientLastName:\n          description: \u003e-\n            Last Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Musk\n          nullable: true\n        clientMiddleName:\n          description: \u003e-\n            Middle Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Federick\n          nullable: true\n        clientSalutation:\n          description: \u003e-\n            Salutation provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Mr\n          nullable: true\n        clientSuffix:\n          description: \u003e-\n            Suffix provided in the input file which is used in the `people-task`\n            endpoint\n          type: string\n          example: Sir\n          nullable: true\n        clientPriority:\n          description: \u003e-\n            Priority provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: HIGH\n          nullable: true\n        clientPersonName:\n          description: The person name as provided in request.\n          type: string\n          example: Phil Snow\n          nullable: true\n        firstName:\n          description: The first name of the client.\n          type: string\n          example: Frederick\n          nullable: true\n        personId:\n          description: The id of the person.\n          type: string\n          example: 0DPHLH-E\n          nullable: true\n        lastName:\n          description: The last name of the person.\n          type: string\n          example: Snow\n          nullable: true\n        middleName:\n          description: The middle name of the client.\n          type: string\n          example: Philip\n          nullable: true\n        entity:\n          description: Full name corresponding to the matched entity.\n          type: string\n          example: FACTSET RESEARCH SYSTEMS INC.\n          nullable: true\n        mapStatus:\n          description: |\n            Concordance status of the submitted, where - \n              * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n              * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n              * INDETERMINATE - The requested Entity Name has unable to make a mapping.\n          type: string\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n          example: MAPPED\n          nullable: true\n        matchFlag:\n          description: \u003e\n            Probability of the match being similar to the entity requested as\n            determined by the Concordance algorithm. A similarityScore of 1 is\n            the highest level of similarity.\n          type: string\n          example: true\n          nullable: true\n        nameMatchSource:\n          description: \u003e\n            Additional statistic calculated by the algorithm that is used to\n            ensure the validity of the match result. A confidenceScore of 1 is\n            the highest level of confidence.\n          type: string\n          example: Presentation Name\n          nullable: true\n        nameMatchString:\n          description: \u003e-\n            String on which the Concordance algorithm mapped the submitted\n            entity.\n          type: string\n          example: philip snow\n          nullable: true\n        rowIndex:\n          description: Country name corresponding to the location of the matched entity\n          type: integer\n          format: double\n          example: 0\n          nullable: true\n        similarityScore:\n          description: \u003e\n            Probability of the match being similar to the entity requested as\n            determined by the Concordance algorithm. A similarityScore of 1 is\n            the highest level of similarity.\n          type: number\n          format: double\n          example: 1\n          nullable: true\n        title:\n          description: The title that the person is holding.\n          type: string\n          example: Chief Executive Officer \u0026 Director\n          nullable: true\n        universeId:\n          description: The universe identifier\n          type: integer\n          example: 1\n          nullable: true\n    PeopleTask:\n      title: People Task\n      description: |\n        People Match object showing the decision reached for each Entity.\n      type: object\n      properties:\n        clientIdColumn:\n          description: |\n            The number of columns of client.\n          type: string\n          example: id1\n          nullable: true\n        personNameColumn:\n          description: The person name as provided in request.\n          type: string\n          example: Phil Snow\n          nullable: true\n        firstNameColumn:\n          description: The first name of the client.\n          type: string\n          example: Frederick\n          nullable: true\n        lastNameColumn:\n          description: The last name of the person.\n          type: string\n          example: Snow\n          nullable: true\n        middleNameColumn:\n          description: The middle name of the client.\n          type: string\n          example: Philip\n          nullable: true\n        priorityColumn:\n          description: The middle name of the client.\n          type: string\n          example: null\n          nullable: true\n        salutationColumn:\n          description: The salutation of the person.\n          type: string\n          example: Mr\n          nullable: true\n        hasResult:\n          description: Whether the result is available.\n          type: boolean\n          example: true\n          nullable: true\n        taskAction:\n          description: Action status for the Concordance Task process.\n          type: string\n          example: processfile\n          nullable: true\n        inputFile:\n          description: |\n            The input file is posted as a file object in the form.\n          type: string\n          example: test31.csv\n          nullable: true\n        entityColumn:\n          description: Full name corresponding to the matched entity.\n          type: string\n          example: FACTSET RESEARCH SYSTEMS INC.\n          nullable: true\n        status:\n          description: \u003e-\n            Status of the Concordance Task. If the value is \"SUCCESS\", you can\n            move to the subsequent /entity-decisions endpoint to retrieve the\n            results.\n          type: string\n          nullable: true\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - SUCCESS\n            - FAILURE\n            - BAD_REQUEST\n            - ABORTED\n        suffixColumn:\n          description: \u003e\n            Name of the column in the input file that contains the person's\n            suffix.\n          type: string\n          example: Suffix\n          nullable: true\n        taskSubmitTime:\n          description: Time the Task was submitted in UTC.\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        taskId:\n          description: The task identifier\n          type: integer\n          example: 31\n          nullable: true\n        taskName:\n          description: The task name\n          type: string\n          example: Analysis1\n          nullable: true\n        universeId:\n          description: The universe identifier\n          type: integer\n          example: 1\n          nullable: true\n        universeName:\n          description: |\n            Full name of the person associated with the `userSerial`.\n          type: string\n          example: Jane Smith\n          nullable: true\n        userSerial:\n          description: user-serial of the person who initiated the entity task.\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n    PeopleTaskStatus:\n      title: People Task Status\n      description: \u003e\n        Concordance People Task Status object. Shows the settings and status of\n        a taskId and some statistics on the matches.\n      type: object\n      properties:\n        clientIdColumn:\n          description: \u003e-\n            Name of the column in the input file that contains a unique\n            identifier supplied by the user.\n          type: string\n          example: ClientId\n          nullable: true\n        decisionRate:\n          description: Percentage of mapped entities in the Input File.\n          type: integer\n          format: double\n          example: 0.7272727272727273\n          nullable: true\n        entityColumn:\n          description: |\n            Name of the column of the entity.\n          type: string\n          example: Entity\n          nullable: true\n        firstNameColumn:\n          description: Name of the column in the input file that contains the first name.\n          type: string\n          example: firstName\n          nullable: true\n        hasResult:\n          description: Whether the result is available.\n          type: boolean\n          example: true\n          nullable: true\n        inputCount:\n          description: Number of records in the Input File.\n          type: integer\n          example: 11\n          nullable: true\n        inputFile:\n          description: |\n            The input file is posted as a file object in the form.\n          type: string\n          example: test31.csv\n          nullable: true\n        lastNameColumn:\n          description: |\n            Name of the column in the input file that contains the first name.\n          type: string\n          example: lastName\n          nullable: true\n        mappedCount:\n          description: Number of records with status of MAPPED the Input File.\n          type: integer\n          example: 8\n          nullable: true\n        middleNameColumn:\n          description: |\n            Name of the column in the input file that contains the middle name.\n          type: string\n          example: middleName\n          nullable: true\n        personNameColumn:\n          description: |\n            Name of the column in the input file that contains the person name.\n          type: string\n          example: personName\n          nullable: true\n        priorityColumn:\n          description: |\n            Name of the column in the input file that contains the priority.\n          type: string\n          example: Priority\n          nullable: true\n        processStartTime:\n          description: Process start time in UTC.\n          type: string\n          format: date-time\n          example: 2020-07-03T15:12:06.722Z\n          nullable: true\n        processDuration:\n          description: Process duration in seconds.\n          type: number\n          format: double\n          example: 1.51603\n          nullable: true\n        salutationColumn:\n          description: \u003e\n            Name of the column in the input file that contains the person's\n            salutation.\n          type: string\n          example: Salutation\n          nullable: true\n        status:\n          description: \u003e-\n            Status of the Concordance Task. If the value is \"SUCCESS\", you can\n            move to the subsequent /entity-decisions endpoint to retrieve the\n            results.\n          type: string\n          nullable: true\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - SUCCESS\n            - FAILURE\n            - BAD_REQUEST\n            - ABORTED\n        suffixColumn:\n          description: \u003e\n            Name of the column in the input file that contains the person's\n            suffix.\n          type: string\n          example: Suffix\n          nullable: true\n        taskAction:\n          description: Action status for the Concordance Task process.\n          type: string\n          example: processfile\n          nullable: true\n        taskId:\n          description: \u003e-\n            Identifier denoting a specific Concordance task submitted by the\n            user.\n          type: integer\n          example: 31\n          nullable: true\n        taskName:\n          description: User-defined name for the task used to name the output file.\n          type: string\n          example: test31\n          nullable: true\n        taskSubmitTime:\n          description: Time the Task was submitted in UTC.\n          type: string\n          format: date-time\n          example: 2020-06-24T22:02:21.000Z\n          nullable: true\n        universeId:\n          description: The universe identifier\n          type: integer\n          example: 1\n          nullable: true\n        universeName:\n          description: |\n            Full name of the person associated with the `userSerial`.\n          type: string\n          example: Jane Smith\n          nullable: true\n        userFullName:\n          description: |\n            Full name of the person associated with the `userSerial`.\n          type: string\n          example: Jane Smith\n          nullable: true\n        userSerial:\n          description: user-serial of the person who initiated the entity task.\n          type: string\n          example: FDSQAR_C-000000\n          nullable: true\n    PeopleDecisions:\n      title: Entity Task Status\n      description: \u003e\n        Concordance Entity Task Status object. Shows the settings and status of\n        a taskId and some statistics on the matches.\n      type: object\n      properties:\n        activeRole:\n          description: If the role is active or not of the person.\n          type: boolean\n          example: true\n          nullable: true\n        clientEntity:\n          description: |\n            Name of the entity of the client.\n          type: string\n          example: Tesla\n          nullable: true\n        clientId:\n          description: \u003e-\n            Name of the column in the input file that contains a unique\n            identifier supplied by the user.\n          type: string\n          example: M7\n          nullable: true\n        clientFirstName:\n          description: \u003e-\n            First Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Elon\n          nullable: true\n        clientLastName:\n          description: \u003e-\n            Last Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Musk\n          nullable: true\n        clientMiddleName:\n          description: \u003e-\n            Middle Name provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Federick\n          nullable: true\n        clientSalutation:\n          description: \u003e-\n            Salutation provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: Mr\n          nullable: true\n        clientSuffix:\n          description: \u003e-\n            Suffix provided in the input file which is used in the `people-task`\n            endpoint\n          type: string\n          example: Sir\n          nullable: true\n        clientPriority:\n          description: \u003e-\n            Priority provided in the input file which is used in the\n            `people-task` endpoint\n          type: string\n          example: HIGH\n          nullable: true\n        clientPersonName:\n          description: The name provided by the client.\n          type: string\n          example: Elon Musk\n          nullable: true\n        email:\n          description: The email address of the client.\n          type: string\n          example: abc@email.com\n          nullable: true\n        entity:\n          description: Full name corresponding to the matched entity.\n          type: string\n          example: FACTSET RESEARCH SYSTEMS INC.\n          nullable: true\n        mapStatus:\n          description: |\n            Concordance status of the submitted, where - \n              * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)\n              * UNMAPPED - The requested Entity Name is unmapped by FactSet.\n              * INDETERMINATE - The requested Entity Name has unable to make a mapping.\n          type: string\n          enum:\n            - MAPPED\n            - UNMAPPED\n            - INDETERMINATE\n          example: MAPPED\n          nullable: true\n        firstName:\n          description: Name of the column in the input file that contains the first name.\n          type: string\n          example: firstName\n          nullable: true\n        lastName:\n          description: |\n            Name of the column in the input file that contains the first name.\n          type: string\n          example: lastName\n          nullable: true\n        middleName:\n          description: |\n            Name of the column in the input file that contains the middle name.\n          type: string\n          example: middleName\n          nullable: true\n        personId:\n          description: The id of the person.\n          type: string\n          example: 0DPHLH-E\n          nullable: true\n        nameMatchString:\n          description: \u003e-\n            String on which the Concordance algorithm mapped the submitted\n            entity.\n          type: string\n          example: factset\n          nullable: true\n        personName:\n          description: |\n            Name of the column in the input file that contains the person name.\n          type: string\n          example: personName\n          nullable: true\n        suffix:\n          description: \u003e\n            Name of the column in the input file that contains the person's\n            suffix.\n          type: string\n          example: Suffix\n          nullable: true\n        similarityScore:\n          description: \u003e\n            Probability of the match being similar to the entity requested as\n            determined by the Concordance algorithm. A similarityScore of 1 is\n            the highest level of similarity.\n          type: number\n          format: double\n          example: 1\n          nullable: true\n        rowIndex:\n          description: Row number for match in the request or input file.\n          type: integer\n          nullable: true\n        taskId:\n          description: \u003e-\n            Identifier denoting a specific Concordance task submitted by the\n            user.\n          type: integer\n          example: 31\n          nullable: true\n        title:\n          description: The title of the person.\n          type: string\n          example: Director.\n          nullable: true\n    errorResponse:\n      type: object\n      title: Error Response\n      properties:\n        status:\n          description: status\n          type: string\n          example: Bad Request\n        timestamp:\n          description: Timestamp in YYYY-MM-DD HH:MM:SS.SSS\n          type: string\n          example: '2019-11-01 11:09:41.918'\n          format: date-time\n        path:\n          description: The Endpoint path {package}/version/{endpoint}\n          type: string\n          example: /factset-concordance/v2/{endpoint}\n        message:\n          description: The plain text error message\n          type: string\n          example: Validation Error\n        subErrors:\n          description: Sub-Errors related to the error message. Null if not applicable.\n          type: object\n          properties:\n            object:\n              description: The operation ID\n              type: string\n            field:\n              description: Parameter Field Name\n              type: string\n            message:\n              description: Error message\n              type: string\n            rejectedValue:\n              description: Rejected Values in an Array\n              type: array\n              items:\n                type: string\n  examples:\n    EntityRequests:\n      summary: Entity Match Request\n      description: Example of a request to find a match for a list of Companies.\n      value:\n        input:\n          - clientId: abc-123\n            name: FactSet\n            country: US\n            state: CT\n            url: www.factset.com\n          - clientId: def-453\n            name: FactSet\n            country: DE\n        includeEntityType:\n          - SUB\n        excludeEntityType:\n          - PVT\n        includeParent: true\n    EntityMatches:\n      description: Entity Matches\n      value:\n        data:\n          - taskId: null\n            rowIndex: 0\n            matchFlag: true\n            entityId: 0016YD-E\n            entityName: FactSet Research Systems, Inc.\n            url: www.factset.com\n            mapStatus: MAPPED\n            similarityScore: 1\n            confidenceScore: 1\n            countryCode: US\n            countryName: United States\n            stateProvinceCode: CT\n            stateName: Connecticut\n            sicCode: 7374\n            entityTypeCode: PUB\n            entityTypeDescription: Public Company\n            entitySubTypeCode: CP\n            locationCity: Norwalk\n            regionName: North America\n            factsetIndustryCode: 3305\n            factsetIndustryName: Data Processing Services\n            factsetSectorCode: 3300\n            factsetSectorName: Technology Services\n            parentName: null,\n            parentMatchFlag: null\n            clientId: abc-123\n            clientName: factset\n            clientCountry: US\n            clientState: CT\n            clientUrl: www.factset.com\n            nameMatchString: factset\n            nameMatchSource: Domain Name\n    SuccessfulEntityTasks:\n      summary: Successful Entity Task\n      description: Example of the status of a successful Entity Concordance Task.\n      value:\n        data:\n          - taskId: 31\n            taskName: test\n            taskAction: processfile\n            status: SUCCESS\n            inputFile: test_427608.csv\n            clientIdColumn: id\n            nameColumn: name\n            countryColumn: country\n            stateColumn: state\n            urlColumn: url\n            includeEntityType:\n              - PUB\n            excludeEntityType: null\n            includeEntitySubType:\n              - CP\n            excludeEntitySubType: null\n            hasResult: true\n            taskSubmitTime: '2020-12-16T16:22:06Z'\n            message: null\n            inputCount: 4\n            mappedCount: 3\n            unmappedCount: 1\n            indeterminateCount: 0\n            processStartTime: '2020-12-16T16:22:09Z'\n            processDuration: 38.68899\n            tryCount: null\n            decisionRate: 0.75\n            error: null\n            errorTitle: null\n            userSerial: FDSQAR_C-000000\n            userFullName: Jane Smith\n            universeId: 1\n            universeName: My Universe\n    SuccessfulPeopleTasks:\n      summary: Successful People Task\n      description: Example of the status of a successful People Concordance Task.\n      value:\n        data:\n          - clientColumn: ClientId\n            decisionRate: 0.3334\n            entityColumn: Company1\n            firstNameColumn: null\n            hasResult: true\n            inputCount: 6\n            inputFile: test31.csv\n            lastNameColumn: null\n            mappedCount: 5\n            middleNameColumn: null\n            personNameColumn: PersonName\n            priorityColumn: null\n            processDuration: 0.98598\n            processStartTime: '2020-07-03T15:12:06.722000+00:00'\n            salutationColumn: null\n            status: SUCCESS\n            suffixColumn: null\n            taskAction: processfile\n            taskId: 31\n            taskName: test31\n            taskSubmitTime: '2020-06-24T22:02:21+00:00'\n            userFullName: Jane Smith\n            userSerial: FDSQAR_C-000000\n    PeopleTask:\n      value:\n        data:\n          clientIdColumn: id1,\n          entityColumn: Company,\n          firstNameColumn: null\n          hasResult: true\n          inputFile: Analysis14\n          lastNameColumn: null\n          middleNameColumn: null\n          personNameColumn: Bill Gates\n          priorityColumn: null\n          salutationColumn: Mr\n          status: PENDING\n          suffixColumn: null\n          taskAction: processfile\n          taskId: 354840\n          taskName: Analysis14\n          taskSubmitTime: '2022-03-01T04:27:32.000+00:00'\n          universeId: 735\n          universeName: Jane Smith\n          userSerial: FDSQAR_C-000000\n    PendingTask:\n      summary: Status pending input file\n      description: Example of the status of a Task pending input file.\n      value:\n        data:\n          taskId: 31\n          taskName: test\n          taskAction: processfile\n          status: PENDING\n          inputFile: test_427608.csv\n          clientIdColumn: id\n          nameColumn: name\n          countryColumn: country\n          stateColumn: state\n          urlColumn: url\n          includeEntityType:\n            - PUB\n          excludeEntityType: null\n          includeEntitySubType:\n            - CP\n          excludeEntitySubType: null\n          hasResult: false\n          taskSubmitTime: '2020-12-16T16:22:06Z'\n          message: null\n          inputCount: null\n          mappedCount: null\n          unmappedCount: null\n          indeterminateCount: null\n          processStartTime: null\n          processDuration: null\n          tryCount: null\n          decisionRate: null\n          error: null\n          errorTitle: null\n          userSerial: FDSQAR_C-000000\n          userFullName: Jane Smith\n          universeId: 1\n          universeName: My Universe\n    PendingTasks:\n      summary: Status pending input file\n      description: Example of the status of a Task pending input file.\n      value:\n        data:\n          - taskId: 31\n            taskName: test\n            taskAction: processfile\n            status: PENDING\n            inputFile: test_427608.csv\n            clientIdColumn: id\n            nameColumn: name\n            countryColumn: country\n            stateColumn: state\n            urlColumn: url\n            includeEntityType:\n              - PUB\n            excludeEntityType: null\n            includeEntitySubType:\n              - CP\n            excludeEntitySubType: null\n            hasResult: false\n            taskSubmitTime: '2020-12-16T16:22:06Z'\n            message: null\n            inputCount: null\n            mappedCount: null\n            unmappedCount: null\n            indeterminateCount: null\n            processStartTime: null\n            processDuration: null\n            tryCount: null\n            decisionRate: null\n            error: null\n            errorTitle: null\n            userSerial: FDSQAR_C-000000\n            userFullName: Jane Smith\n            universeId: 1\n            universeName: My Universe\n    PendingTask1:\n      summary: Status pending input file\n      description: Example of the status of a Task pending input file.\n      value:\n        data:\n          - clientColumn: ClientId\n            decisionRate: null\n            entityColumn: Entity\n            error: null\n            errorTitle: null\n            firstNameColumn: firstName\n            hasResult\": true\n            indeterminateCount: 1\n            inputCount: 11\n            inputFile: test31.csv\n            lastNameColumn: Lastname\n            mappedCount: 8\n            message: Waiting for the input file\n            middleNameColumn: Middlename\n            personNameColumn: PersonName\n            priorityColumn: Priority\n            processDuration: 1.51603\n            processStartTime: '2020-07-03T15:12:06.722000+00:00'\n            salutationColumn: Salutation\n            status: PENDING\n            suffixColumn: Suffix\n            taskAction: processfile\n            taskId: 31\n            taskName: test31\n            taskSubmitTime: '2020-06-24T22:02:21+00:00'\n            tryCount: 3\n            universeId: 1\n            universeName: My Universe\n            unmappedCount: 2\n            userFullName: Jane Smith\n            userSerial: FDSQAR_C-000000\n    BadTasks:\n      summary: Status for bad request\n      description: Example of the status of a Task with a bad request.\n      value:\n        data:\n          - taskId: 31\n            taskName: test\n            taskAction: processfile\n            status: BAD_REQUEST\n            inputFile: test_427608.csv\n            clientIdColumn: id\n            nameColumn: name\n            countryColumn: country\n            stateColumn: state\n            urlColumn: url\n            includeEntityType:\n              - PUB\n            excludeEntityType: null\n            includeEntitySubType:\n              - CP\n            excludeEntitySubType: null\n            hasResult: false\n            taskSubmitTime: '2020-12-17T20:43:42Z'\n            message: null\n            inputCount: null\n            mappedCount: null\n            unmappedCount: null\n            indeterminateCount: null\n            processStartTime: '2020-12-17T20:44:00Z'\n            processDuration: 0\n            tryCount: null\n            decisionRate: null\n            error: \u003e-\n              The Name column \"name\", passed as parameter, does not exist in the\n              input file.\n            errorTitle: Wrong parameter\n            userSerial: FDSQAR_C-000000\n            userFullName: Jane Smith\n            universeId: 1\n            universeName: My Universe\n    BadTasks1:\n      summary: Status for bad request\n      description: Example of the status of a Task with a bad request.\n      value:\n        data:\n          clientColumn: ClientId\n          decisionRate: null\n          entityColumn: Entity\n          error: null\n          errorTitle: null\n          firstNameColumn: firstName\n          hasResult\": true\n          indeterminateCount: 1\n          inputCount: 11\n          inputFile: test31.csv\n          lastNameColumn: Lastname\n          mappedCount: 8\n          message: Waiting for the input file\n          middleNameColumn: Middlename\n          personNameColumn: PersonName\n          priorityColumn: Priority\n          processDuration: 1.51603\n          processStartTime: '2020-07-03T15:12:06.722000+00:00'\n          salutationColumn: Salutation\n          status: PENDING\n          suffixColumn: Suffix\n          taskAction: processfile\n          taskId: 31\n          taskName: test31\n          taskSubmitTime: '2020-06-24T22:02:21+00:00'\n          tryCount: 3\n          universeId: 1\n          universeName: My Universe\n          unmappedCount: 2\n          userFullName: Jane Smith\n          userSerial: FDSQAR_C-000000\n    FailedTasks:\n      summary: Status for failed request\n      description: Example of the status of a Task with a failed request.\n      value:\n        data:\n          - taskId: 31\n            taskName: test\n            taskAction: processfile\n            status: FAILURE\n            inputFile: test_427608.csv\n            clientIdColumn: id\n            nameColumn: name\n            countryColumn: country\n            stateColumn: state\n            urlColumn: url\n            includeEntityType:\n              - PUB\n            excludeEntityType: null\n            includeEntitySubType:\n              - CP\n            excludeEntitySubType: null\n            hasResult: false\n            taskSubmitTime: '2020-12-17T20:43:42Z'\n            message: null\n            inputCount: null\n            mappedCount: null\n            unmappedCount: null\n            indeterminateCount: null\n            processStartTime: '2020-12-17T20:44:00Z'\n            processDuration: 0\n            tryCount: null\n            decisionRate: null\n            error: different refererence used by concordance service\n            errorTitle: compute_candidates\n            userSerial: FDSQAR_C-000000\n            userFullName: Jane Smith\n            universeId: 1\n            universeName: My Universe\n    FailedTasks1:\n      summary: Status for failed request\n      description: Example of the status of a Task with a failed request.\n      value:\n        data:\n          clientColumn: ClientId\n          decisionRate: null\n          entityColumn: Entity\n          error: null\n          errorTitle: null\n          firstNameColumn: firstName\n          hasResult\": false\n          indeterminateCount: 1\n          inputCount: 11\n          inputFile: test31.csv\n          lastNameColumn: Lastname\n          mappedCount: null\n          message: Waiting for the input file\n          middleNameColumn: Middlename\n          personNameColumn: PersonName\n          priorityColumn: Priority\n          processDuration: 1.51603\n          processStartTime: '2020-07-03T15:12:06.722000+00:00'\n          salutationColumn: Salutation\n          status: PENDING\n          suffixColumn: Suffix\n          taskAction: processfile\n          taskId: 31\n          taskName: test31\n          taskSubmitTime: '2020-06-24T22:02:21+00:00'\n          tryCount: 3\n          universeId: 1\n          universeName: My Universe\n          unmappedCount: 2\n          userFullName: Jane Smith\n          userSerial: FDSQAR_C-000000\n    EntityDecisionsFile:\n      description: An Entity Concordance Task Decision File.\n      value: \u003e\n        rowIndex,clientId,requestName,requestCountry,name,requestUrl,entityType,mapStatus,similarityScore,confidenceScore\n\n        0,FDS-US,FactSet,\"FactSet Research Systems,\n        Inc.\",US,www.factset.com,PUB,MATCHED,1.0,1.0\n\n        1,FDS-DE,FactSet,FactSet GmbH,DE,,SUB,MATCHED,1.0,1.0\n    EntityDecisions:\n      description: Entity Decisions\n      value:\n        data:\n          - taskId: 427749\n            rowIndex: 0\n            matchFlag: null\n            entityId: 0016YD-E\n            entityName: FactSet Research Systems, Inc.\n            url: www.factset.com\n            mapStatus: MAPPED\n            similarityScore: 1\n            confidenceScore: 1\n            countryCode: US\n            countryName: United States\n            stateProvinceCode: CT\n            stateName: Connecticut\n            sicCode: 7374\n            entityTypeCode: PUB\n            entityTypeDescription: Public Company\n            entitySubTypeCode: CP\n            locationCity: Norwalk\n            regionName: North America\n            factsetIndustryCode: 3305\n            factsetIndustryName: Data Processing Services\n            factsetSectorCode: 3300\n            factsetSectorName: Technology Services\n            parentName: null,\n            parentMatchFlag: null\n            clientId: abc-123\n            clientName: factset\n            clientCountry: US\n            clientState: CT\n            clientUrl: www.factset.com\n            nameMatchString: factset\n            nameMatchSource: Domain Name\n    NotFound:\n      description: 404 - Not Found\n      value:\n        status: Not Found\n        timestamp: 2019-11-01T11:09:41.918Z\n        path: /factset-concordance/v2/fakeendpoint\n        message: '''/factset-concordance/v2/fake-endpoint'' is not a valid endpoint'\n        subErrors: null\n    EntityUniverse:\n      description: Entity Universe response from v2 endpoint\n      value:\n        data:\n          - entityId: 00345-E\n            entityName: FactSet Inc.\n            clientId: abc-123\n            clientName: factset\n            clientCountry: us\n            clientState: ct\n            clientUrl: www.factset.com\n            createdTime: 2020-09-04T20:14:13.123Z\n            updatedTime: 2020-10-04T20:14:13.123Z\n            mapStatus: MAPPED\n            universeId: 1\n          - entityId: null\n            entityName: null\n            clientId: def-456\n            clientName: apple\n            clientCountry: us\n            clientState: ca\n            clientUrl: www.apple.com\n            createdTime: 2020-07-04T20:14:13.123Z\n            updatedTime: 2020-08-04T20:14:13.123Z\n            mapStatus: UNMAPPED\n            universeId: 1\n    PeopleUniverse:\n      description: People Universe response from v2 endpoint\n      value:\n        data:\n          - clientEntity: Microsoft\n            clientFirstName: William\n            clientId: BGA-123\n            clientLastName: Gates\n            clientMiddleName: Henry\n            clientPersonName: Bill Gates\n            clientPriority: HIGH\n            clientSalutation: Mr\n            clientSuffix: III\n            createdTime: 2020-06-24T22:02:21.000Z\n            mapStatus: MAPPED\n            personId: 00118X-E\n            personName: GATES WILLIAM H III\n            universeId: 1\n            updatedTime: 2020-06-24T22:02:21.000Z\n          - clientEntity: Microsoft\n            clientFirstName: William\n            clientId: BGA-123\n            clientLastName: Gates\n            clientMiddleName: Henry\n            clientPersonName: Bill Gates\n            clientPriority: HIGH\n            clientSalutation: Mr\n            clientSuffix: III\n            createdTime: 2020-06-24T22:02:21.000Z\n            mapStatus: MAPPED\n            personId: 00118X-E\n            personName: GATES WILLIAM H III\n            universeId: 1\n            updatedTime: 2020-06-24T22:02:21.000Z\n    EntityResponse:\n      description: Entity Response\n      value:\n        data:\n          entityId: 00345-E\n          entityName: FactSet Inc.\n          clientId: abc-123\n          clientName: factset\n          clientCountry: US\n          clientState: CT\n          clientUrl: www.factset.com\n          createdTime: 2020:09:04T20:14:13.123\n          updatedTime: 2020:10:04T20:14:13.123\n          mapStatus: MAPPED\n          universeId: 1\n    EntityMappingRequest:\n      description: Entity Mapping Request\n      value:\n        clientId: abc-123\n        entityId: 0016YD-E\n        clientName: FactSet\n        clientCountry: US\n        clientState: CT\n        clientUrl: www.factset.com\n    PeopleResponse:\n      description: People Response\n      value:\n        data:\n          clientEntity: Microsoft\n          clientFirstName: William\n          clientId: BGA-123\n          clientLastName: Gates\n          clientMiddleName: Henry\n          clientPersonName: Bill Gates\n          clientPriority: HIGH\n          clientSalutation: Mr\n          clientSuffix: III\n          createdTime: 2020:09:04T20:14:13.123\n          mapStatus: MAPPED\n          personId: 00118X-E\n          personName: GATES WILLIAM H III\n          universeId: 1\n          updatedTime: 2020:09:04T20:14:13.123\n    PeopleMappingRequest:\n      description: People Mapping Request\n      value:\n        clientEntity: Microsoft\n        clientFirstName: William\n        clientId: BGA-123\n        clientLastName: Gates\n        clientMiddleName: Henry\n        clientPriority: HIGH\n        clientSalutation: Mr\n        clientSuffix: III\n        personId: 00118X-E\n        universeId: 1\n    EntityUniverseStatsResponse:\n      description: |\n        Statistics on a universe\n      value:\n        data:\n          totalCount: 10\n          unmappedCount: 1\n          mappedCount: 8\n          indeterminateCount: 1\n          universeId: 1\n    PeopleMatches:\n      description: People Matches\n      value:\n        data:\n          - activeRole: true,\n            clientEntity: Microsoft,\n            clientPersonName: Phil Snow\n            entity: FACTSET RESEARCH SYSTEMS INC\n            firstName: Frederick\n            lastName: Snow\n            mapStatus: MAPPED\n            matchFlag: true\n            middleName: Philip\n            nameMatchSource: Presentation Name\n            nameMatchString: philip snow\n            personId: 0DPHLH-E\n            personName: SNOW FREDERICK PHILIP\n            rowIndex: 0\n            similarityScore: 1\n            universeId: 1\n    PeopleDecisions:\n      description: People Decisions\n      value:\n        data:\n          activeRole: false\n          clientEntity: Tesla\n          clientId: M7\n          clientPersonName: Elon Musk\n          email: ''\n          entity: TESLA INC\n          firstName: Elon\n          lastName: Musk\n          mapStatus: MAPPED\n          middleName: Reeve\n          nameMatchSource: Institutional Affliation\n          nameMatchString: Elon Reeve Musk\n          personId: 05H8B8-E\n          personName: MUSK ELON REEVE\n          rowIndex: 0\n          similarityScore: 1\n          suffix: ''\n          taskId: 353453\n          title: Technoking of Tesla\n    badRequestRequiredParameter:\n      summary: Bad Request - Required Parameter Missing\n      description: \u003e-\n        This error message occurs when the request does not include the required\n        parameters. Required parameters are indicated with a red asterisks\n        symbol in the specification file.\n      value:\n        status: Bad Request\n        timestamp: '2020-06-30 13:22:09.053'\n        path: /factset-concordance/v2/{endpoint}\n        message: The parameter 'name' is required and may not be empty.\n        subErrors: null\n    badRequestInvalidParameters:\n      summary: Bad Request - Passing Invalid Parameter\n      description: \u003e-\n        This error message occurs when a request parameter is not recognized by\n        the service. Please revise your request to include only the parameters\n        listed in the specification. Typical errors are spelling mistakes and\n        use of improper casing.\n      value:\n        status: Bad Request\n        timestamp: '2020-07-23 11:03:40.765'\n        path: /factset-concordance/v2/{endpoint}\n        message: \u003e-\n          Invalid Parameter (s): fakeParameterName1 fakeParameterName2. Please\n          modify your request to use parameters outlined in the specification\n          for this endpoint.\n        subErrors: null\n    badRequestMalformedJSON:\n      summary: Bad Request - Malformed JSON Request\n      description: \u003e-\n        This error may be returned when the request body is specified as JSON.\n        But is not in proper JSON format.\n      value:\n        status: Bad Request\n        timestamp: '2020-07-02 11:59:09.649'\n        path: /factset-concordance/v2/{endpoint}\n        message: Malformed JSON Request\n        subErrors: null\n    badRequestReadTimeout:\n      summary: Bad Request - Read Timeout\n      description: This error may be returned if it takes more than 29 seconds to complete.\n      value:\n        status: Bad Request\n        timestamp: '2020-07-02 16:18:38.949'\n        path: /factset-concordance/v2/{endpoint}\n        message: The request took too long. Try again with a smaller request.\n        subErrors: null\n    unauthenticated:\n      summary: User Authentication Failed\n      description: \u003e-\n        This occurs when a user is not properly authenticated or recognized by\n        the service. Please double check the USERNAME-SERIAL and API-Key used to\n        request and ensure you are within the IP range specified for the Key.\n        Report Issue under 401 error for help with troubleshooting.\n      value:\n        status: User Authentication Failed\n        timestamp: '2020-07-02 16:08:07.945'\n        path: /factset-concordance/v2/{endpoint}\n        message: User Authentication Failed.\n        subErrors: null\n    forbidden:\n      summary: Forbidden\n      description: \u003e-\n        The USERNAME-SERIAL attempted to request the endpoint which is not\n        authorized to access. The request was a legal request, but the server is\n        refusing to respond. Please reach out to FactSet Account Team for\n        assistance with authorization.\n      value:\n        status: Forbidden\n        timestamp: '2020-07-02 17:21:52.197'\n        path: /factset-concordance/v2/{endpoint}\n        message: \u003e-\n          User is not authorized for the id requested, please reach out to\n          FactSet for support\n        subErrors: null\n    unsupportedMediaType:\n      summary: Unsupported Media Type\n      description: \u003e-\n        This bad request occurs when the media type passed in the request is not\n        supported. Currently the APIs only support 'application/json'.\n      value:\n        status: Unsupported Media Type\n        timestamp: '2020-07-02 09:42:27.237'\n        path: /factset-concordance/v2/{endpoint}\n        message: \u003e-\n          text/html media type is not supported. Supported media types are\n          application/json.\n        subErrors: null\n    notWritable:\n      summary: Internal Server Error - Not Writable\n      description: \u003e-\n        This error may be returned when the server encounters an error writing\n        the JSON response.\n      value:\n        status: Internal Server Error\n        timestamp: '2020-07-02 09:48:29.18'\n        path: /factset-concordance/v2/{endpoint}\n        message: Error writing JSON output\n        subErrors: null\n    generalException:\n      summary: Internal Server Error - General Exception\n      description: \u003e-\n        This is the most general error that can be returned to by the service.\n        Please `Report Issue` to FactSet.\n      value:\n        status: Internal Server Error\n        timestamp: '2020-07-02 10:36:01.944'\n        path: /factset-concordance/v2/{endpoint}\n        message: Unexpected error\n        subErrors: null\n",
			"canonicalURL": "/github.com/factset/enterprise-sdk@dcf75a02daedc726c313912a349d2863114bc92c/-/blob/specs/FactSetConcordance.v2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/factset/enterprise-sdk/blob/dcf75a02daedc726c313912a349d2863114bc92c/specs/FactSetConcordance.v2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/factset-concordance/v2/universe\": post: responses: default: contents: application/json: generate schema: save schema types: save inlined type: schema name conflict: \"ErrorResponseSubErrors\""
}