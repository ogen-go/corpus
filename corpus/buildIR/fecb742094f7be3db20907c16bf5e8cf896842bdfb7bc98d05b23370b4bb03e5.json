{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tsuru/tsuru"
		},
		"file": {
			"name": "router_api.yaml",
			"size": 0,
			"path": "docs/reference/router_api.yaml",
			"byteSize": 11361,
			"content": "#\n# Tsuru Router API Specification\n#\nopenapi: 3.0.0\n\ninfo:\n  title: Tsuru Router API\n  description: Tsuru Router API integration to external routers\n  version: \"1.0.0\"\n\npaths:\n  /backend/{name}:\n    get:\n      summary: Application backend address\n      description: |\n        The backend endpoint returns the address that the\n        application is published.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An Address object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Address'\n        default:\n          $ref: '#/components/schemas/Error'\n          \n    delete:\n      summary: Delete application backend\n      description: |\n        The backend endpoint deletes the backend.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An Address object\n        404:\n          description: Backend not found\n        400:\n          description: Backend was swapped to other\n        default:\n          $ref: '#/components/schemas/Error'\n    post:\n      summary: Add application backend\n      description: |\n        The backend endpoint the backend.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An Address object\n        404:\n          description: Backend not found\n        409:\n          description: Backend already exists\n        default:\n          $ref: '#/components/schemas/Error'\n  \n  /backend/{name}/routes:\n    get:\n      summary: Application backend routes\n      description: |\n        The backend endpoint returns information about the\n        backends routes for a given application.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n        - name: route\n          in: path\n          description: Route name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An array of backends\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Addresses'\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /backend/{name}/routes/{route}:\n    post:\n      summary: Add application backend routes\n      description: |\n        The backend endpoint returns information about the\n        backends routes for a given application.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n        - name: route\n          in: path\n          description: Route name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An array of backends\n        404:\n          description: Backend not found\n        default:\n          $ref: '#/components/schemas/Error'\n    \n  /backend/{name}/swap:\n    post:\n      summary: Application backend\n      description: |\n        The backend endpoint returns information about the\n        backends for a given application.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Swap parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Swap'\n      tags:\n        - Backends\n      responses:\n        200:\n          description: Swapped backends\n        404:\n          description: Backend not found\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /healthcheck:\n    get:\n      summary: Application backend\n      description: |\n        Health check endpoint.\n      tags:\n        - Healthcheck\n      responses:\n        200:\n          description: Return OK\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /support/{type}:\n    get:\n      summary: CNAME Application backend\n      description: |\n        The backend endpoint returns information about the\n        application cname.\n      parameters:\n        - name: type\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Support\n      responses:\n        200:\n          description: Check if support types.\n          content:\n            text/plain:\n              schema:\n                type: string\n        default:\n          $ref: '#/components/schemas/Error'  \n            \n  /backend/{name}/cname:\n    get:\n      summary: Application backend cnames info\n      description: |\n        The backend endpoint returns information about the\n        application cname.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An array of cnames\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /backend/{name}/cname/{cnameAddr}:\n    post:\n      summary: CNAME Application backend\n      description: |\n        The backend endpoint adds CNAME to application.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n        - name: cnameAddr\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: Cname added ok\n        400:\n          description: Backend does not support CNAME\n        404:\n          description: Backend not found\n        409:\n          description: CNAME already exists\n        default:\n          $ref: '#/components/schemas/Error'  \n      \n  /backend/{name}/certificate/{cname}:\n    get:\n      summary: HTTPS Certificate management endpoint\n      description: |\n        The backend endpoint returns information about the\n        HTTPS certificate. \n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n        - name: cname\n          in: path\n          description: CNAME to get certificate.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Certificate\n      responses:\n        200:\n          description: Certificate Object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Certificate'\n        default:\n          $ref: '#/components/schemas/Error'\n    post:\n      summary: HTTPS Certificate management endpoint\n      description: |\n        The backend endpoint returns information about the\n        HTTPS certificate. \n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n        - name: cname\n          in: path\n          description: CNAME to get certificate.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Swap parameters\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Certificate'\n      tags:\n        - Certificate\n      responses:\n        200:\n          description: Certificate Object\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /backend/{name}/healthcheck:\n    put:\n      summary: Application backend healthcheck\n      description: |\n        The backend endpoint to set healthcheck.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Healthcheck\n      responses:\n        200:\n          description: Healthcheck setted properly.\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /info:\n    get:\n      summary: Application backend\n      description: |\n        The backend endpoint returns information about\n        the router.\n      tags:\n        - Info\n      responses:\n        200:\n          description: An array of backends\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/schemas/Error'\n            \n  /backend/{name}/status:\n    get:\n      summary: Application backend\n      description: |\n        The backend endpoint returns information about the backends\n        for a given application.\n      parameters:\n        - name: name\n          in: path\n          description: Application name.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Backends\n      responses:\n        200:\n          description: An array of backends\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Status'\n        default:\n          $ref: '#/components/schemas/Error'\n            \n# Object definitions          \ncomponents:\n  schemas:\n    Certificate:\n      type: object\n      properties:\n        certificate:\n          type: string\n          description: PEM encoded certificate\n        key:\n          type: string\n          description: PEM encoded key\n    Swap:\n      type: object\n      properties:\n        target:\n          type: string\n          description: Swap target to swap to.\n        cnameOnly:\n          type: boolean\n          description: Is the swap cname only.\n    Address:\n      type: object\n      properties:\n        address:\n          type: string\n          description: Address that the application is published.\n    Addresses:\n      type: object\n      properties:\n        addresses:\n          type: array\n          items:\n            type: string\n    Info:\n      type: object\n      additionalProperties:\n        type: string\n    Status:\n      type: object\n      properties:\n        status:\n          type: string\n        detail:\n          type: string\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        fields:\n          type: string\n",
			"canonicalURL": "/github.com/tsuru/tsuru@b0aca5fd8cb6fc0d6d3e94d7aa336d68659a9b3b/-/blob/docs/reference/router_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tsuru/tsuru/blob/b0aca5fd8cb6fc0d6d3e94d7aa336d68659a9b3b/docs/reference/router_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: reduce default: too complicated to reduce default error"
}