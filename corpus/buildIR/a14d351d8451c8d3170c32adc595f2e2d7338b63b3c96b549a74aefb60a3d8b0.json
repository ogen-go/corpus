{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/osbuild/osbuild-composer"
		},
		"file": {
			"name": "openapi.v2.yml",
			"size": 0,
			"path": "internal/cloudapi/v2/openapi.v2.yml",
			"byteSize": 35408,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  version: '2'\n  title: OSBuild Composer cloud api\n  description: Service to build and install images.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n\nservers:\n- url: https://api.openshift.com/api/image-builder-composer/v2\n  description: Main (production) server\n- url: https://api.stage.openshift.com/api/image-builder-composer/v2\n  description: Staging server\n- url: /api/image-builder-composer/v2\n  description: current domain\n\npaths:\n  /openapi:\n    get:\n      operationId: getOpenapi\n      summary: Get the openapi spec in json format\n      security:\n        - Bearer: []\n      responses:\n        '200':\n          description: openapi spec in json format\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /composes/{id}:\n    get:\n      operationId: getComposeStatus\n      summary: The status of a compose\n      security:\n        - Bearer: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: '123e4567-e89b-12d3-a456-426655440000'\n          required: true\n          description: ID of compose status to get\n      description: |-\n        Get the status of a running or completed compose.\n        This includes whether or not the compose succeeded.\n      responses:\n        '200':\n          description: compose status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeStatus'\n        '400':\n          description: Invalid compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /composes/{id}/metadata:\n    get:\n      operationId: getComposeMetadata\n      summary: Get the metadata for a compose.\n      security:\n        - Bearer: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: |-\n        Get the metadata of a finished compose.\n        The exact information returned depends on the requested image type.\n      responses:\n        '200':\n          description: The metadata for the given compose.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeMetadata'\n        '400':\n          description: Invalid compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/composes/{id}/logs':\n    get:\n      operationId: getComposeLogs\n      summary: Get logs for a compose.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: 'Get the status of a running or finished compose. This includes whether or not it succeeded, and also meta information about the result.'\n      responses:\n        '200':\n          description: The logs for the given compose, in no particular format (though valid JSON).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeLogs'\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n  '/composes/{id}/manifests':\n    get:\n      operationId: getComposeManifests\n      summary: Get the manifests for a compose.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: 'Get the manifests of a running or finished compose. Returns one manifest for each image in the request. Each manifest conforms to the format defined at https://www.osbuild.org/man/osbuild-manifest.5'\n      responses:\n        '200':\n          description: The manifest for the given compose.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeManifests'\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /composes/{id}/clone:\n    post:\n      operationId: postCloneCompose\n      summary: Clone an existing compose\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of the compose\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CloneComposeBody'\n      responses:\n        '201':\n          description: The new image is being created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloneComposeResponse'\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /clones/{id}:\n    get:\n      operationId: getCloneStatus\n      summary: The status of a cloned compose\n      security:\n        - Bearer: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: '123e4567-e89b-12d3-a456-426655440000'\n          required: true\n          description: ID of image status to get\n      description: |-\n        Get the status of a running or completed image from a compose.\n        This includes whether or not the image creation succeeded.\n      responses:\n        '200':\n          description: image status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CloneStatus'\n        '400':\n          description: Invalid compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /compose:\n    post:\n      operationId: postCompose\n      summary: Create compose\n      description: Create a new compose, potentially consisting of several images and upload each to their destinations.\n      security:\n        - Bearer: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComposeRequest'\n      responses:\n        '201':\n          description: Compose has started\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeId'\n        '400':\n          description: Invalid compose request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown compose id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /errors/{id}:\n    get:\n      operationId: getError\n      summary: Get error description\n      description: Get an instance of the error specified by id\n      security:\n        - Bearer: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            example: '13'\n          required: true\n          description: ID of the error\n      responses:\n        '200':\n          description: Error description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown error id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /errors:\n    get:\n      operationId: getErrorList\n      summary: Get a list of all possible errors\n      security:\n        - Bearer: []\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/size'\n      responses:\n        '200':\n          description: A list of errors\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorList'\n        '401':\n          description: Auth token is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to perform operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown error id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Unexpected error occurred\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  schemas:\n    ObjectReference:\n      type: object\n      required:\n        - id\n        - kind\n        - href\n      properties:\n        id:\n          type: string\n        kind:\n          type: string\n        href:\n          type: string\n\n    List:\n      type: object\n      properties:\n        kind:\n          type: string\n        page:\n          type: integer\n        size:\n          type: integer\n        total:\n          type: integer\n      required:\n        - kind\n        - page\n        - size\n        - total\n        - items\n\n    Error:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - code\n          - reason\n          - operation_id\n        properties:\n          code:\n            type: string\n          reason:\n            type: string\n          operation_id:\n            type: string\n          details: {}\n\n    ErrorList:\n      allOf:\n      - $ref: '#/components/schemas/List'\n      - type: object\n        required:\n          - items\n        properties:\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/Error'\n\n    ComposeStatus:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - status\n          - image_status\n        properties:\n          status:\n            $ref: '#/components/schemas/ComposeStatusValue'\n          image_status:\n            $ref: '#/components/schemas/ImageStatus'\n          image_statuses:\n            type: array\n            items:\n              $ref: '#/components/schemas/ImageStatus'\n          koji_status:\n            $ref: '#/components/schemas/KojiStatus'\n    ComposeStatusValue:\n      type: string\n      enum:\n        - success\n        - failure\n        - pending\n      example: success\n    ComposeLogs:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - image_builds\n        properties:\n          image_builds:\n            type: array\n            items:\n              type: object\n              x-go-type: interface{}\n          koji:\n            $ref: '#/components/schemas/KojiLogs'\n    KojiLogs:\n      type: object\n      required:\n        - init\n        - import\n      properties:\n        init: {}\n        import: {}\n    ComposeManifests:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - manifests\n        properties:\n          manifests:\n            type: array\n            items:\n              type: object\n              x-go-type: interface{}\n    ImageStatus:\n      required:\n       - status\n      properties:\n        status:\n          $ref: '#/components/schemas/ImageStatusValue'\n        upload_status:\n          $ref: '#/components/schemas/UploadStatus'\n        error:\n          $ref: '#/components/schemas/ComposeStatusError'\n    ComposeStatusError:\n      required:\n       - id\n       - reason\n      properties:\n        id:\n          type: integer\n        reason:\n          type: string\n        details: {}\n    ImageStatusValue:\n      type: string\n      enum: ['success', 'failure', 'pending', 'building', 'uploading', 'registering']\n    UploadStatus:\n      required:\n        - status\n        - type\n        - options\n      properties:\n        status:\n          $ref: '#/components/schemas/UploadStatusValue'\n        type:\n          $ref: '#/components/schemas/UploadTypes'\n        options:\n          oneOf:\n            - $ref: '#/components/schemas/AWSEC2UploadStatus'\n            - $ref: '#/components/schemas/AWSS3UploadStatus'\n            - $ref: '#/components/schemas/GCPUploadStatus'\n            - $ref: '#/components/schemas/AzureUploadStatus'\n            - $ref: '#/components/schemas/ContainerUploadStatus'\n    UploadStatusValue:\n      type: string\n      enum: ['success', 'failure', 'pending', 'running']\n    UploadTypes:\n      type: string\n      enum:\n        - aws\n        - aws.s3\n        - gcp\n        - azure\n        - container\n    AWSEC2UploadStatus:\n      type: object\n      required:\n        - ami\n        - region\n      properties:\n        ami:\n          type: string\n          example: 'ami-0c830793775595d4b'\n        region:\n          type: string\n          example: 'eu-west-1'\n    AWSS3UploadStatus:\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          type: string\n    GCPUploadStatus:\n      type: object\n      required:\n        - project_id\n        - image_name\n      properties:\n        project_id:\n          type: string\n          example: 'ascendant-braid-303513'\n        image_name:\n          type: string\n          example: 'my-image'\n    AzureUploadStatus:\n      type: object\n      required:\n        - image_name\n      properties:\n        image_name:\n          type: string\n          example: 'my-image'\n    KojiStatus:\n      type: object\n      properties:\n        build_id:\n          type: integer\n          example: 42\n    ContainerUploadStatus:\n      type: object\n      additionalProperties: false\n      required:\n        - url\n        - digest\n      properties:\n        url:\n          type: string\n          example: 'quay.io/myaccount/osbuild:latest'\n          description: |\n            FQDN of the uploaded image\n        digest:\n          type: string\n          description: |\n            Digest of the manifest of the uploaded container on the registry\n    ComposeMetadata:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        properties:\n          packages:\n            type: array\n            items:\n              $ref: '#/components/schemas/PackageMetadata'\n            description: 'Package list including NEVRA'\n          ostree_commit:\n            type: string\n            description: 'ID (hash) of the built commit'\n    PackageMetadata:\n      required:\n        - type\n        - name\n        - version\n        - release\n        - arch\n        - sigmd5\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        version:\n          type: string\n        release:\n          type: string\n        epoch:\n          type: string\n        arch:\n          type: string\n        sigmd5:\n          type: string\n        signature:\n          type: string\n\n    ComposeRequest:\n      required:\n        - distribution\n      properties:\n        distribution:\n          type: string\n          example: 'rhel-8'\n        image_request:\n          $ref: '#/components/schemas/ImageRequest'\n        image_requests:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageRequest'\n        customizations:\n          $ref: '#/components/schemas/Customizations'\n        koji:\n          $ref: '#/components/schemas/Koji'\n    ImageRequest:\n      required:\n        - architecture\n        - image_type\n        - repositories\n      properties:\n        architecture:\n          type: string\n          example: 'x86_64'\n        image_type:\n          $ref: '#/components/schemas/ImageTypes'\n        repositories:\n          type: array\n          items:\n            $ref: '#/components/schemas/Repository'\n        ostree:\n          $ref: '#/components/schemas/OSTree'\n        upload_options:\n          $ref: '#/components/schemas/UploadOptions'\n    ImageTypes:\n      type: string\n      enum:\n        - aws\n        - aws-rhui\n        - aws-ha-rhui\n        - aws-sap-rhui\n        - azure\n        - azure-rhui\n        - edge-commit\n        - edge-container\n        - edge-installer\n        - gcp\n        - gcp-rhui\n        - guest-image\n        - image-installer\n        - vsphere\n    Repository:\n      type: object\n      properties:\n        rhsm:\n          type: boolean\n          default: false\n          description: 'Determines whether a valid subscription is required to access this repository.'\n        baseurl:\n          type: string\n          format: uri\n          example: 'https://cdn.redhat.com/content/dist/rhel8/8/x86_64/baseos/os/'\n        mirrorlist:\n          type: string\n          format: uri\n          example: 'http://mirrorlist.centos.org/?release=8-stream\u0026arch=aarch64\u0026repo=BaseOS'\n        metalink:\n          type: string\n          format: uri\n          example: 'https://mirrors.fedoraproject.org/metalink?repo=fedora-32\u0026arch=x86_64'\n        gpgkey:\n          type: string\n          example: \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n\\nmQINBGAcScoBEADLf8YHkezJ6adlMYw7aGGIlJalt8Jj2x/B2K+hIfIuxGtpVj7e\\nLRgDU76jaT5pVD5mFMJ3pkeneR/cTmqqQkNyQshX2oQXwEzUSb1CNMCfCGgkX8Q2\\nzZkrIcCrF0Q2wrKblaudhU+iVanADsm18YEqsb5AU37dtUrM3QYdWg9R+XiPfV8R\\nKBjT03vVBOdMSsY39LaCn6Ip1Ovp8IEo/IeEVY1qmCOPAaK0bJH3ufg4Cueks+TS\\nwQWTeCLxuZL6OMXoOPKwvMQfxbg1XD8vuZ0Ktj/cNH2xau0xmsAu9HJpekvOPRxl\\nyqtjyZfroVieFypwZgvQwtnnM8/gSEu/JVTrY052mEUT7Ccb74kcHFTFfMklnkG/\\n0fU4ARa504H3xj0ktbe3vKcPXoPOuKBVsHSv00UGYAyPeuy+87cU/YEhM7k3SVKj\\n6eIZgyiMO0wl1YGDRKculwks9A+ulkg1oTb4s3zmZvP07GoTxW42jaK5WS+NhZee\\n860XoVhbc1KpS+jfZojsrEtZ8PbUZ+YvF8RprdWArjHbJk2JpRKAxThxsQAsBhG1\\n0Lux2WaMB0g2I5PcMdJ/cqjo08ccrjBXuixWri5iu9MXp8qT/fSzNmsdIgn8/qZK\\ni8Qulfu77uqhW/wt2btnitgRsqjhxMujYU4Zb4hktF8hKU/XX742qhL5KwARAQAB\\ntDFGZWRvcmEgKDM1KSA8ZmVkb3JhLTM1LXByaW1hcnlAZmVkb3JhcHJvamVjdC5v\\ncmc+iQJOBBMBCAA4FiEEeH6mrhFH7uVsQLMM20Y5cZhnxY8FAmAcScoCGw8FCwkI\\nBwIGFQoJCAsCBBYCAwECHgECF4AACgkQ20Y5cZhnxY+NYA/7BYpglySAZYHhjyKh\\n/+f6zPfVvbH20Eq3kI7OFBN0nLX+BU1muvS+qTuS3WLrB3m3GultpKREJKLtm5ED\\n1rGzXAoT1yp9YI8LADdMCCOyjAjsoWU87YUuC+/bnjrTeR2LROCfyPC76W985iOV\\nm5S+bsQDw7C2LrldAM4MDuoyZ1SitGaZ4KQLVt+TEa14isYSGCjzo7PY8V3JOk50\\ngqWg82N/bm2EzS7T83WEDb1lvj4IlvxgIqKeg11zXYxmrYSZJJCfvzf+lNS6uxgH\\njx/J0ylZ2LibGr6GAAyO9UWrAZSwSM0EcjT8wECnxkSDuyqmWwVvNBXuEIV8Oe3Y\\nMiU1fJN8sd7DpsFx5M+XdnMnQS+HrjTPKD3mWrlAdnEThdYV8jZkpWhDys3/99eO\\nhk0rLny0jNwkauf/iU8Oc6XvMkjLRMJg5U9VKyJuWWtzwXnjMN5WRFBqK4sZomMM\\nftbTH1+5ybRW/A3vBbaxRW2t7UzNjczekSZEiaLN9L/HcJCIR1QF8682DdAlEF9d\\nk2gQiYSQAaaJ0JJAzHvRkRJLLgK2YQYiHNVy2t3JyFfsram5wSCWOfhPeIyLBTZJ\\nvrpNlPbefsT957Tf2BNIugzZrC5VxDSKkZgRh1VGvSIQnCyzkQy6EU2qPpiW59G/\\nhPIXZrKocK3KLS9/izJQTRltjMA=\\n=PfT7\\n-----END PGP PUBLIC KEY BLOCK-----\\n\"\n          description: 'GPG key used to sign packages in this repository.'\n        check_gpg:\n          type: boolean\n        ignore_ssl:\n          type: boolean\n        package_sets:\n          type: array\n          example: [\"build\", \"os\"]\n          items:\n            type: string\n          description: |\n            Naming package sets for a repository assigns it to a specific part\n            (pipeline) of the build process.\n    UploadOptions:\n      anyOf:\n      - $ref: '#/components/schemas/AWSEC2UploadOptions'\n      - $ref: '#/components/schemas/AWSS3UploadOptions'\n      - $ref: '#/components/schemas/GCPUploadOptions'\n      - $ref: '#/components/schemas/AzureUploadOptions'\n      - $ref: '#/components/schemas/ContainerUploadOptions'\n      description: |\n        This should really be oneOf but AWSS3UploadOptions is a subset of\n        AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects\n        are also valid AWSS3UploadOptionas objects which violates the oneOf\n        rules. Therefore, we have to use anyOf here but be aware that it isn't\n        possible to mix and match more schemas together.\n    AWSEC2UploadOptions:\n      type: object\n      required:\n        - region\n        - share_with_accounts\n      properties:\n        region:\n          type: string\n          example: 'eu-west-1'\n        snapshot_name:\n          type: string\n          example: 'my-snapshot'\n        share_with_accounts:\n          type: array\n          example: ['123456789012']\n          items:\n            type: string\n    AWSS3UploadOptions:\n      type: object\n      required:\n        - region\n      properties:\n        region:\n          type: string\n          example: 'eu-west-1'\n    GCPUploadOptions:\n      type: object\n      required:\n        - region\n        - bucket\n      properties:\n        region:\n          type: string\n          example: 'eu'\n          description: |\n            The GCP region where the OS image will be imported to and shared from.\n            The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.\n            If not specified, the multi-region location closest to the source\n            (source Storage Bucket location) is chosen automatically.\n        bucket:\n          type: string\n          example: 'my-example-bucket'\n          description: 'Name of an existing STANDARD Storage class Bucket.'\n# don't expose the os type for now\n#        os:\n#          type: string\n#          example: 'rhel-8-byol'\n#          description: 'OS of the disk image being imported needed for installation of GCP guest tools.'\n        image_name:\n          type: string\n          example: 'my-image'\n          description: |\n            The name to use for the imported and shared Compute Engine image.\n            The image name must be unique within the GCP project, which is used\n            for the OS image upload and import. If not specified a random\n            'composer-api-\u003cuuid\u003e' string is used as the image name.\n        share_with_accounts:\n          type: array\n          example: [\n            'user:alice@example.com',\n            'serviceAccount:my-other-app@appspot.gserviceaccount.com',\n            'group:admins@example.com',\n            'domain:example.com'\n            ]\n          description: |\n            List of valid Google accounts to share the imported Compute Engine image with.\n            Each string must contain a specifier of the account type. Valid formats are:\n              - 'user:{emailid}': An email address that represents a specific\n                Google account. For example, 'alice@example.com'.\n              - 'serviceAccount:{emailid}': An email address that represents a\n                service account. For example, 'my-other-app@appspot.gserviceaccount.com'.\n              - 'group:{emailid}': An email address that represents a Google group.\n                For example, 'admins@example.com'.\n              - 'domain:{domain}': The G Suite domain (primary) that represents all\n                the users of that domain. For example, 'google.com' or 'example.com'.\n            If not specified, the imported Compute Engine image is not shared with any\n            account.\n          items:\n            type: string\n    AzureUploadOptions:\n      type: object\n      required:\n        - tenant_id\n        - subscription_id\n        - resource_group\n        - location\n      properties:\n        tenant_id:\n          type: string\n          example: '5c7ef5b6-1c3f-4da0-a622-0b060239d7d7'\n          description: |\n            ID of the tenant where the image should be uploaded.\n            How to find it in the Azure Portal:\n            https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant\n        subscription_id:\n          type: string\n          example: '4e5d8b2c-ab24-4413-90c5-612306e809e2'\n          description: |\n            ID of subscription where the image should be uploaded.\n        resource_group:\n          type: string\n          example: 'ToucanResourceGroup'\n          description: |\n            Name of the resource group where the image should be uploaded.\n        location:\n          type: string\n          example: 'westeurope'\n          description: |\n            Location where the image should be uploaded and registered.\n            How to list all locations:\n            https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'\n        image_name:\n          type: string\n          example: 'my-image'\n          description: |\n            Name of the uploaded image. It must be unique in the given resource group.\n            If name is omitted from the request, a random one based on a UUID is\n            generated.\n    ContainerUploadOptions:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          example: 'osbuild'\n          description: |\n            Name for the created container image\n        tag:\n          type: string\n          example: 'latest'\n          description: |\n            Tag for the created container image\n    Customizations:\n      type: object\n      properties:\n        containers:\n          type: array\n          items:\n             $ref: '#/components/schemas/Container'\n             description: Container images to embed into the final artfact\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n        packages:\n          type: array\n          example: ['postgres']\n          items:\n            type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        payload_repositories:\n          type: array\n          items:\n            $ref: '#/components/schemas/Repository'\n          description: |\n            Extra repositories for packages specified in customizations. These\n            repositories will only be used to depsolve and retrieve packages\n            for the OS itself (they will not be available for the build root or\n            any other part of the build process). The package_sets field for these\n            repositories is ignored.\n        filesystem:\n          type: array\n          items:\n            $ref: '#/components/schemas/Filesystem'\n        services:\n          type: object\n          additionalProperties: false\n          properties:\n            enabled:\n              description: List of services to enable by default\n              type: array\n              minItems: 1\n              items:\n                type: string\n                example: \"nftables\"\n            disabled:\n              description: List of services to disable by default\n              type: array\n              minItems: 1\n              items:\n                type: string\n                example: \"firewalld\"\n    Container:\n      type: object\n      required:\n        - source\n      properties:\n        source:\n          type: string\n          desription: Reference to the container to embed\n          example: 'registry.example.com/image:tag'\n        name:\n          type: string\n          description: Name to use for the container from the image\n        tls_verify:\n          type: boolean\n          description: Control TLS verifification\n          example: true\n    Filesystem:\n      type: object\n      required:\n        - mountpoint\n        - min_size\n      properties:\n        mountpoint:\n          type: string\n          example: '/var'\n        min_size:\n          x-go-type: uint64\n          example: 1024\n    OSTree:\n      type: object\n      properties:\n        url:\n          type: string\n        ref:\n          type: string\n          example: 'rhel/8/x86_64/edge'\n        parent:\n          type: string\n          description: \u003e\n            Can be either a commit (example:\n            02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like\n            reference (example: rhel/8/x86_64/edge)\n          example: 'rhel/8/x86_64/edge'\n    Subscription:\n      type: object\n      required:\n        - organization\n        - activation_key\n        - server_url\n        - base_url\n        - insights\n      properties:\n        organization:\n          type: string\n          example: '2040324'\n        activation_key:\n          type: string\n          format: password\n          example: 'my-secret-key'\n        server_url:\n          type: string\n          format: uri\n          example: 'subscription.rhsm.redhat.com'\n        base_url:\n          type: string\n          format: uri\n          example: 'http://cdn.redhat.com/'\n        insights:\n          type: boolean\n          example: true\n    User:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          example: \"user1\"\n        groups:\n          type: array\n          items:\n            type: string\n            example: \"group1\"\n        key:\n          type: string\n          example: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINrGKErMYi+MMUwuHaRAJmRLoIzRf2qD2dD5z0BTx/6x\"\n    Koji:\n      type: object\n      required:\n        - server\n        - task_id\n        - name\n        - version\n        - release\n      properties:\n        server:\n          type: string\n          format: uri\n          example: 'https://koji.fedoraproject.org/kojihub'\n        task_id:\n          type: integer\n          example: 42\n        name:\n          type: string\n          example: Fedora-Cloud-Base\n        version:\n          type: string\n          example: '31'\n        release:\n          type: string\n          example: '20200907.0'\n    ComposeId:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - id\n        properties:\n          id:\n            type: string\n            format: uuid\n            example: '123e4567-e89b-12d3-a456-426655440000'\n\n    CloneComposeBody:\n      oneOf:\n      - $ref: '#/components/schemas/AWSEC2CloneCompose'\n\n    AWSEC2CloneCompose:\n      type: object\n      required:\n        - region\n      properties:\n        region:\n          type: string\n        share_with_accounts:\n          type: array\n          example: ['123456789012']\n          items:\n            type: string\n\n    CloneComposeResponse:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - type: object\n        required:\n          - id\n        properties:\n          id:\n            type: string\n            format: uuid\n            example: '123e4567-e89b-12d3-a456-426655440000'\n\n    CloneStatus:\n      allOf:\n      - $ref: '#/components/schemas/ObjectReference'\n      - $ref: '#/components/schemas/UploadStatus'\n\n  parameters:\n    page:\n      name: page\n      in: query\n      description: Page index\n      required: false\n      schema:\n        type: string\n      examples:\n        page:\n          value: \"1\"\n    size:\n      name: size\n      in: query\n      description: Number of items in each page\n      required: false\n      schema:\n        type: string\n      examples:\n        size:\n          value: \"100\"\n\n  securitySchemes:\n    Bearer:\n      scheme: bearer\n      bearerFormat: JWT\n      type: http\n",
			"canonicalURL": "/github.com/osbuild/osbuild-composer@c685a0069463fb1380a2b015a3c0b829a8af8bf8/-/blob/internal/cloudapi/v2/openapi.v2.yml",
			"externalURLs": [
				{
					"url": "https://github.com/osbuild/osbuild-composer/blob/c685a0069463fb1380a2b015a3c0b829a8af8bf8/internal/cloudapi/v2/openapi.v2.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/composes/{id}/clone\": post: responses: code 201: contents: media: \"application/json\": generate schema: allOf: merge properties: try to merge conflicting property schemas: schema format mismatch: uuid and ",
	"NotImplemented": [
		"complex anyOf",
		"discriminator inference"
	]
}