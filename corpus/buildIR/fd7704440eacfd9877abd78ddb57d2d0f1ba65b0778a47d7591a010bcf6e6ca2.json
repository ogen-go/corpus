{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/manchenkoff/openapi3-parser"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "tests/data/swagger.yml",
			"byteSize": 6080,
			"content": "openapi: 3.0.0\n\nsecurity:\n  - Basic: [ ]\n\ninfo:\n  title: 'User example service'\n  version: 1.0.0\n  description: 'Example service specification to work with user storage'\n  license:\n    name: 'MIT'\n  contact:\n    name: 'manchenkoff'\n    email: 'artyom@manchenkoff.me'\n\nservers:\n  - url: 'https://users.app'\n    description: 'production'\n\n  - url: 'https://stage.users.app'\n    description: 'staging'\n\n  - url: 'https://users.local'\n    description: 'development'\n\ntags:\n  - name: Users\n    description: 'User operations'\n\npaths:\n  /users:\n    get:\n      summary: 'Get user list'\n      description: 'Method to get user list'\n      operationId: GetUserList\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Offset'\n      responses:\n        200:\n          $ref: '#/components/responses/GetUserListResponse'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      summary: 'Add new user'\n      description: 'Method to add new user'\n      operationId: AddUser\n      security:\n        - Basic: [ ]\n      tags:\n        - Users\n      requestBody:\n        $ref: '#/components/requestBodies/AddUserRequest'\n      responses:\n        201:\n          $ref: '#/components/responses/AddUserResponse'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/{uuid}:\n    parameters:\n      - $ref: '#/components/parameters/UserUUID'\n    get:\n      summary: 'Get user model'\n      description: 'Method to get user details'\n      operationId: GetUser\n      tags:\n        - Users\n      responses:\n        200:\n          $ref: '#/components/responses/UserResponse'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      summary: 'Update existed user model'\n      operationId: UpdateUser\n      tags:\n        - Users\n      responses:\n        200:\n          $ref: '#/components/responses/Empty'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\ncomponents:\n  securitySchemes:\n    Basic:\n      type: http\n      scheme: basic\n\n  parameters:\n    Limit:\n      name: limit\n      in: query\n      description: 'Result items limit'\n      allowEmptyValue: false\n      example: 10\n      required: true\n      schema:\n        type: integer\n\n    Offset:\n      name: offset\n      in: query\n      description: 'Result items start offset'\n      allowEmptyValue: false\n      example: 0\n      required: true\n      schema:\n        type: integer\n\n    UserUUID:\n      name: uuid\n      in: path\n      description: 'User unique id'\n      allowEmptyValue: false\n      example: '12345678-1234-5678-1234-567812345678'\n      required: true\n      schema:\n        type: string\n        format: uuid\n\n  requestBodies:\n    AddUserRequest:\n      description: 'New user model request'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n\n  responses:\n    BadRequest:\n      description: 'Bad request or parameters'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BadRequestError'\n\n    InternalServerError:\n      description: 'Internal error'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/InternalServerError'\n\n    Empty:\n      description: 'Empty successful response'\n\n    GetUserListResponse:\n      description: 'Successful user list response'\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - total_count\n              - users\n            properties:\n              total_count:\n                type: integer\n                description: 'Total count of users'\n              users:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n\n    AddUserResponse:\n      description: 'Successful addition user response'\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - user\n            properties:\n              user:\n                $ref: '#/components/schemas/User'\n\n    UserResponse:\n      description: 'Successful user response'\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - user\n            properties:\n              user:\n                $ref: '#/components/schemas/User'\n\n  schemas:\n    BadRequestError:\n      type: object\n      required:\n        - code\n        - error\n      properties:\n        code:\n          type: integer\n          example: 1044\n          description: 'Internal error code'\n        error:\n          type: string\n          example: 'Invalid user id value'\n          description: 'Error details'\n\n    InternalServerError:\n      type: object\n      required:\n        - code\n        - error\n      properties:\n        code:\n          type: integer\n          example: 1\n          description: 'Internal error code'\n        error:\n          type: string\n          example: 'Unexpected server error'\n          description: 'Error details'\n\n    UUIDObject:\n      type: object\n      required:\n        - uuid\n      properties:\n        uuid:\n          type: string\n          format: uuid\n          example: '12345678-1234-5678-1234-567812345678'\n          description: 'Unique object id'\n\n    User:\n      allOf:\n        - $ref: '#/components/schemas/UUIDObject'\n        - required:\n            - login\n            - email\n        - properties:\n            login:\n              type: string\n              example: 'super-admin'\n              description: 'User login or nickname'\n            email:\n              type: string\n              format: email\n              example: 'user@mail.com'\n              description: 'User E-mail address'\n"
		}
	},
	"Error": "buildIR: make ir: path \"/users\": get: responses: 200: contents: application/json: generate schema: field users: item: allOf: schema type mismatch: object and "
}