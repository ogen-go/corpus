{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ml-for-good/automl"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 117099,
			"content": "openapi: 3.0.2\ninfo:\n  title: AutoML\n  description: | \n    We are designing the AutoML platform that would make it easy for non-technical people to build custom AI solutions and AI-powered process automation.\n    \n    Please copy the entire content of this doc to the swagger editor (https://editor.swagger.io) to design the API\n    \n    Reference: [API design for JSON HTTP APIs](https://cloud.google.com/apis/design/errors) [error codes for RPC APIs](https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto)\n  termsOfService: https://automl.com/terms/\n  contact:\n    name: API Support\n    url: https://automl.com/support/\n    email: support@automl.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: v1beta1\nservers:\n- url: https://automl.com/v1beta1\n  description: Supports latest preview features.\n- url: https://automl.com/v1\n  description: Stable\nsecurity:\n  - oauth2:\n      - self\ntags:\n- name: Authorization\n  description: Authentication and Authorization\n  externalDocs:\n    url: https://stackoverflow.blog/2022/04/14/the-authorization-code-grant-in-excruciating-detail/\n- name: Namespace\n  description: provides namespace level isolation\n- name: Role\n  description: Roles can be defined or modified in the configuration file as a list of dictionaries.\n  externalDocs:\n    url: https://jupyterhub.readthedocs.io/en/stable/rbac/roles.html#define-role-target\n- name: User\n  externalDocs:\n    url: https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml\n- name: Group\n- name: Dataset\n- name: Model\n- name: TrainingJob\n- name: Evaluation\n- name: BatchPredictionJob\n- name: Endpoint\n- name: Operation\n- name: Experiment\n- name: Run\n- name: Datastore\npaths:\n  /oauth2/authorize:\n    get:\n      tags:\n      - Authorization\n      summary: OAuth 2.0 authorize endpoint\n      description: |\n        Redirect users to this URL to begin the OAuth process.\n        It is not an API endpoint.\n      parameters:\n        - name: client_id\n          in: query\n          description: The client id\n          required: true\n          schema:\n            type: string\n        - name: response_type\n          in: query\n          description: The response type (always 'code')\n          required: true\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: A state string\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          description: The redirect url\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content: {}\n        400:\n          description: OAuth2Error\n          content: {}\n    post:\n      tags:\n      - Authorization\n      summary: The OAuth server authenticates the user\n      description: The OAuth server will render a login form to gather login information, such as a username and password, then the user can enter credentials and the OAuth server authenticates the user.\n      operationId: login\n      requestBody:\n        description: Login Credentials\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Credentials'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n        400:\n          description: Invalid username/password supplied\n          content: {}\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n      x-codegen-request-body-name: body\n  /oauth2/token:\n    post:\n      tags:\n      - Authorization\n      summary: Request an OAuth2 token\n      description: |\n        Request an OAuth2 token from an authorization code \"Client credential grant type\".\n        This request completes the OAuth process.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              required:\n                - client_id\n                - client_secret\n                - code\n                - grant_type\n                - redirect_uri\n              properties:\n                client_id:\n                  type: string\n                  description: The client id\n                client_secret:\n                  type: string\n                  description: The client secret\n                grant_type:\n                  type: string\n                  description: The grant type (always 'authorization_code')\n                code:\n                  type: string\n                  description: The code provided by the authorization redirect. value = client_credentials or code\n                redirect_uri:\n                  type: string\n                  description: The redirect url\n        required: true\n      responses:\n        200:\n          description: JSON response including the token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                    description: The new API token for the user\n                  expires_in: \n                    default: 300\n                    type: integer\n                    description: The expires time (s).\n                  token_type:\n                    default: Bearer\n                    type: string\n                    description: Will always be 'Bearer'\n                  scopes:\n                    default: example_role_A example_role_B\n                    type: string\n                    description: space separated defined role for role-based access control\n  /namespaces/{namespace}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    put:\n      operationId: putNamespace\n      summary: Create a namespace\n      description: Creates a new namespace object. A namespace enables the contextual grouping of related jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`), underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`). A namespace is case-insensitive with a maximum length of `1024` characters. Note jobs and datasets will be unique within a namespace, but not across namespaces.\n      tags:\n        - Namespace\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Namespace'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n        default:\n          $ref: '#/components/responses/default'\n    get:\n      operationId: getNamespace\n      summary: Retrieve a namespace\n      description: Returns a namespace.\n      tags:\n        - Namespace\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Namespace'\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces:\n    get:\n      operationId: getNamespaces\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      summary: List all namespaces\n      description: Returns a list of namespaces.\n      tags:\n        - Namespace\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Namespace'\n        default:\n          $ref: '#/components/responses/default'\n  /roles:\n    get:\n      tags:\n      - Role\n      summary: List roles\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: The list of roles\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Role\"\n        default:\n          $ref: '#/components/responses/default'\n      security: []\n  /user:\n    get:\n      tags:\n      - User\n      summary: Return authenticated user's model\n      responses:\n        200:\n          description: |\n            The authenticated user's model is returned\n            with additional information about the permissions associated with the request token.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestIdentity\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n  /users:\n    get:\n      tags:\n      - User\n      summary: List users\n      responses:\n        200:\n          description: The Hub's user list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/User\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n    post:\n      tags:\n      - User\n      summary: Create multiple users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                usernames:\n                  type: array\n                  description: list of usernames to create\n                  items:\n                    type: string\n                admin:\n                  type: boolean\n                  description: whether the created users should be admins\n        required: true\n      responses:\n        201:\n          description: The users have been created\n          content:\n            application/json:\n              schema:\n                type: array\n                description: The created users\n                items:\n                  $ref: \"#/components/schemas/User\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /users/{user}:\n    parameters:\n      - $ref: '#/components/parameters/user'\n    get:\n      tags:\n      - User\n      summary: Get a user by user id\n      responses:\n        200:\n          description: The User model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - read:users\n            - read:users:name\n            - read:users:groups\n            - read:roles:users\n            - admin:auth_state\n    delete:\n      tags:\n      - User\n      summary: Delete a user\n      responses:\n        204:\n          description: The user has been deleted\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - admin:users\n    patch:\n      tags:\n      - User\n      summary: Modify a user\n      description: Change a user's name or admin status\n      requestBody:\n        description:\n          Updated user info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description:\n                    the new name (optional, if another key is updated i.e.\n                    admin)\n                admin:\n                  type: boolean\n                  description:\n                    update admin (optional, if another key is updated i.e.\n                    name)\n        required: true\n      responses:\n        200:\n          description: The updated user info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - admin:users\n      x-codegen-request-body-name: body\n  /groups:\n    get:\n      tags:\n      - Group\n      summary: List groups\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: The list of groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Group\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n    post:\n      tags:\n      - Group\n      summary: Create a group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        201:\n          description: The group has been created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - admin:groups\n  /groups/{group}:\n    parameters:\n      - $ref: '#/components/parameters/group'\n    get:\n      tags:\n      - Group\n      summary: Get a group \n      responses:\n        200:\n          description: The group model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - read:groups\n            - read:groups:name\n            - read:roles:groups\n    delete:\n      tags:\n      - Group\n      summary: Delete a group\n      responses:\n        204:\n          description: The group has been deleted\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - admin:groups\n  /groups/{group}/users:\n    parameters:\n      - $ref: '#/components/parameters/group'\n    post:\n      tags:\n      - Group\n      summary: Add users to a group\n      requestBody:\n        description: The users to add to the group\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                users:\n                  type: array\n                  description: List of usernames to add to the group\n                  items:\n                    type: string\n        required: true\n      responses:\n        200:\n          description: The users have been added to the group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n      - Group\n      summary: |\n        Remove users from a group\n      description: |\n        Body should be a JSON dictionary\n        where `users` is a list of usernames to remove from the groups.\n\n        ```json\n        {\n          \"users\": [\"name1\", \"name2\"]\n        }\n        ```\n      responses:\n        200:\n          description: The users have been removed from the group\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n      security:\n        - oauth2:\n            - groups\n      x-codegen-request-body-name: body\n  /namespaces/{namespace}/files/{filename}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Dataset\n      summary: upload files\n      operationId: automl.namespaces.files.create\n      parameters:\n      - name: filename\n        in: path\n        description: filename\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              description: the attachment content\n              format: binary\n          multipart/form-data:\n            schema:\n              required:\n              - file\n              properties:\n                file:\n                  type: string\n                  description: the attachment content\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: Upload was successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uri:\n                    $ref: \"#/components/schemas/URI\"\n        400:\n          description: Invalid input\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/datasets:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Dataset\n      summary: Creates a dataset\n      description: Tabular training data in MinIO Storage is not imported into platform. (When you import from local files, they are imported into MinIO Storage.) When you create a dataset with tabular data, the data is associated with the dataset. Changes you make to your data source in MinIO Storage after dataset creation are incorporated into models subsequently trained with that dataset. A snapshot of the dataset is taken when model training begins.\n      operationId: automl.namespaces.datasets.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Dataset\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dataset\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n    get:\n      tags:\n      - Dataset\n      description: Lists datasets in the namespace.\n      operationId: automl.namespaces.datasets.list\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Dataset\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/datasets/{dataset}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      operationId: getDataset\n      summary: Retrieve a dataset\n      description: Returns a dataset.\n      tags:\n        - Dataset\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dataset'\n        default:\n          $ref: '#/components/responses/default'\n    delete:\n      tags:\n      - Dataset\n      summary: Delete Dataset by Dataset Id\n      operationId: delete_dataset_by_id\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid dataset id value\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n    patch:\n      tags:\n      - Dataset\n      summary: Modify a dataset\n      operationId: patch_dataset_by_id\n      requestBody:\n        description:\n          Updated user info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Dataset\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dataset\"\n        400:\n          description: Invalid dataset id value\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/datasets/{dataset}/tableSpecs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n    get:\n      tags:\n      - Dataset\n      description: Lists table specs in a dataset.\n      operationId: automl.namespaces.datasets.tableSpecs.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/TableSpec\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/datasets/{dataset}/tableSpecs/{tableSpec}/columnSpecs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/tableSpec'\n    get:\n      tags:\n      - Dataset\n      description: Lists column specs in a table spec.\n      operationId: automl.projects.locations.datasets.tableSpecs.columnSpecs.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: The column specs read.\n                items:\n                  $ref: \"#/components/schemas/ColumnSpec\"\n                type: array\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/datasets/{dataset}/annotationSpecs/{annotationSpec}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/dataset'\n      - $ref: '#/components/parameters/annotationSpec'\n    get:\n      operationId: automl.namespaces.datasets.annotationSpecs.get\n      description: Gets an AnnotationSpec.\n      tags:\n        - Dataset\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnnotationSpec'\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    get:\n      tags:\n      - Model\n      description: Lists models in the namespace.\n      operationId: automl.namespaces.models.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Model\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n    post:\n      tags:\n      - Model\n      description: Creates a model which will later contain one or more versions\n      operationId: automl.namespaces.models.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Model\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Model\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models/{model}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/model'\n    get:\n      operationId: automl.namespaces.models.get\n      summary: Retrieve a model\n      description: Returns a model.\n      tags:\n        - Model\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Model'\n        default:\n          $ref: '#/components/responses/default'\n    patch:\n      tags:\n      - Model\n      summary: Modify a model\n      operationId: patch_model_by_id\n      requestBody:\n        description:\n          Updated model info. At least one key to be updated (name or admin)\n          is required.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Model\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Model\"\n        400:\n          description: Invalid dataset id value\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models/{model}/versions:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    get:\n      tags:\n      - Model\n      description: Lists versions\n      operationId: automl.namespaces.models.versions.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Version\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n    post:\n      tags:\n      - Model\n      description: Creates a new version of a model\n      operationId: automl.namespaces.models.versions.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models/{model}/versions/{version}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    get:\n      operationId: automl.namespaces.models.versions.get\n      summary: Retrieve a version\n      description: Returns a version.\n      tags:\n        - Model\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        default:\n          $ref: '#/components/responses/default'\n    patch:\n      tags:\n      - Model\n      summary: Modify a version\n      operationId: automl.namespaces.models.versions.patch\n      requestBody:\n        description:\n          Updated version info. At least one key to be updated\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Version\"\n        required: true\n      responses:\n        200:\n          description: The updated dataset info\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        400:\n          description: Invalid version id value\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n    delete:\n      tags:\n      - Model\n      summary: Delete version\n      operationId: automl.namespaces.models.versions.delete\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid id\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/trainingJob:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - TrainingJob\n      description: Creates a TrainingJob. A created TrainingJob right away will be attempted to be run. When you train a model, several model evaluations are created for it, a summary evaluation, and one evaluation for each annotation.\n      operationId: automl.namespaces.trainingJob.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TrainingJob\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TrainingJob\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/trainingJob/{job}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/job'\n    get:\n      tags:\n      - TrainingJob\n      description: Gets a TrainingJob\n      operationId: automl.namespaces.trainingJob.get\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrainingJob'\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    get:\n      tags:\n        - Evaluation\n      description: Lists model evaluations.\n      operationId: automl.projects.locations.models.version.evaluations.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Evaluation\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/models/{model}/versions/{version}/evaluations/{evaluation}/slices:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/model'\n    - $ref: '#/components/parameters/version'\n    - $ref: '#/components/parameters/evaluation'\n    get:\n      tags:\n        - Evaluation\n      description: Lists ModelEvaluationSlices in a ModelEvaluation. Tabular forecasting models do not have evaluation metric slices. Tabular regression models do not have evaluation metric slices.\n      operationId: automl.projects.locations.models.version.evaluations.slices.list\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/EvaluationSlice\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/batchPredictionJobs:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - BatchPredictionJob\n      description: Creates a batchPredictionJobs.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BatchPredictionJob\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BatchPredictionJob\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/batchPredictionJob/{job}:\n    parameters:\n    - $ref: '#/components/parameters/namespace'\n    - $ref: '#/components/parameters/job'\n    get:\n      tags:\n      - BatchPredictionJob\n      description: Gets a batchPredictionJob\n      operationId: automl.namespaces.batchPredictionJob.get\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchPredictionJob'\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/endpoints:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    post:\n      tags:\n      - Endpoint\n      description: Creates an Endpoint, If successful, the response body contains a newly created instance of Operation.\n      operationId: automl.namespaces.endpoints.create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Endpoint\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n    get:\n      tags:\n      - Endpoint\n      description: Lists endpoints in the namespace.\n      operationId: automl.namespaces.endpoints.list\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Endpoint\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/endpoints/{endpoint}:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/endpoint'\n    delete:\n      tags:\n      - Endpoint\n      description: Deletes an Endpoint.\n      operationId: automl.namespaces.endpoints.delete\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/endpoints/{endpoint}/predict:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n      - $ref: '#/components/parameters/endpoint'\n    post:\n      tags:\n      - Endpoint\n      description: Perform an online prediction.\n      operationId: automl.namespaces.endpoints.predict\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PredictRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PredictResponse\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/operations/{operation}:\n    get:\n      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.\n      operationId: automl.namespaces.operations.get\n      parameters:\n        - $ref: '#/components/parameters/namespace'\n        - $ref: '#/components/parameters/operation'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Operation\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n      tags:\n        - Operation\n  /namespaces/{namespace}/operations/{operation}/cancel:\n    post:\n      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a Status.code corresponding to Code.CANCELLED.\n      operationId: automl.namespaces.operations.cancel\n      parameters:\n        - $ref: '#/components/parameters/namespace'\n        - $ref: '#/components/parameters/operation'\n      responses:\n        200:\n          description: If successful, the response body is empty.\n          content: {}\n        default:\n          $ref: '#/components/responses/default'\n      tags:\n        - Operation\n  /namespaces/{namespace}/experiments:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    get:\n      tags:\n        - Experiment\n      description: Finds all experiments.\n      operationId: automl.namespaces.experiments.get\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\n  /namespaces/{namespace}/runs:\n    parameters:\n      - $ref: '#/components/parameters/namespace'\n    get:\n      tags:\n        - Run\n      description: Finds all runs. An experiment will typically contain multiple runs. A run can have zero or more child runs.\n      operationId: automl.namespaces.runs.get\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n          description: Successful response\n        default:\n          $ref: '#/components/responses/default'\ncomponents:\n  schemas:\n    ID:\n      type: integer\n      format: int64\n      description: the unique identifier of that resource\n    DateTime:\n      type: string\n      format: date-time\n      description: Output only.\n      example: \"2021-04-13T01:00:54.091953Z\"\n    Namespace:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          description: The name of the namespace.\n          type: string\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        ownerId:\n          description: The owner of the namespace.\n          $ref: \"#/components/schemas/ID\"\n        description:\n          description: The description of the namespace.\n          type: string\n    State:\n      enum:\n        - UNSPECIFIED\n        - QUEUED\n        - PENDING\n        - RUNNING\n        - SUCCEEDED\n        - FAILED\n        - CANCELLING\n        - CANCELLED\n        - PAUSED\n      type: string\n      description: |\n         * `UNSPECIFIED` - The job state is unspecified.\n         * `QUEUED` - The job has been just created or resumed and processing has not yet begun.\n         * `PENDING` - The service is preparing to run the job.\n         * `RUNNING` -   The job is in progress.\n         * `SUCCEEDED` - The job completed successfully.\n         * `FAILED` - The job failed.\n         * `CANCELLING` - The job is being cancelled. From this state the job may only go to either SUCCEEDED, FAILED or CANCELLED.\n         * `CANCELLED` - The job has been cancelled.\n         * `PAUSED` - The job has been stopped, and can be resumed.\n    TrainingJob:\n      type: object\n      properties:\n        jobId:\n          $ref: \"#/components/schemas/ID\"\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        startTime:\n          $ref: \"#/components/schemas/DateTime\"\n          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.\n        endTime:\n          $ref: \"#/components/schemas/DateTime\"\n          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        state:\n          $ref: '#/components/schemas/State'\n        error:\n          $ref: '#/components/schemas/Status'\n        jobPosition:\n          type: integer\n          format: int64\n          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.\n        trainingInput:\n          $ref: '#/components/schemas/ModelMetadata'\n        trainingOnput:\n          type: object\n    BatchPredictionJob:\n      type: object\n      properties:\n        jobId:\n          $ref: \"#/components/schemas/ID\"\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        startTime:\n          $ref: \"#/components/schemas/DateTime\"\n          description: Output only. Time when the Job for the first time entered the JOB_STATE_RUNNING state.\n        endTime:\n          $ref: \"#/components/schemas/DateTime\"\n          description: Output only. Time when the Job entered any of the following states - SUCCEEDED, FAILED, CANCELLED.\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        state:\n          $ref: '#/components/schemas/State'\n        error:\n          $ref: '#/components/schemas/Status'\n        jobPosition:\n          type: integer\n          format: int64\n          description: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.\n        batchPredictionJob:\n          $ref: '#/components/schemas/BatchPredictionInput'\n        batchPredictionOutput:\n          $ref: '#/components/schemas/BatchPredictionOutput'\n    DataFormat:\n      type: string\n      description: |\n         The format used to separate data instances in the source and destination files. \n         * `UNSPECIFIED` - Unspecified format.\n         * `JSON` - Each line of the file is a JSON dictionary representing one record.\n         * `TF_RECORD` - The source file is a TFRecord file. Currently available only for input data.\n         * `TF_RECORD_GZIP` - The source file is a GZIP-compressed TFRecord file. Currently available only for input data.\n         * `CSV` -   Values are comma-separated rows, with keys in a separate file. Currently available only for output data.\n      enum:\n        - UNSPECIFIED\n        - JSON\n        - TF_RECORD\n        - TF_RECORD_GZIP\n        - CSV\n    DedicatedResources:\n      type: object\n      description: The config of resources used by the Model during the batch prediction. If the Model supports DEDICATED_RESOURCES this config may be provided (and the job will use these resources), if the Model doesn't support AUTOMATIC_RESOURCES, this config must be provided.\n      properties:\n        startingReplicaCount:\n          type: integer\n          description: Immutable. The number of machine replicas used at the start of the batch operation. If not set, platform decides starting number, not greater than maxReplicaCount\n        maxReplicaCount:\n          type: integer\n          description: Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.\n        machineSpec:\n          type: object\n          description: Required. Immutable. The specification of a single machine.\n          properties:\n            machineType:\n              description: Immutable. The type of the machine.\n              type: string\n              enum:\n                - standard-2\n                - standard-4\n                - highmem-2\n                - highmem-4\n                - highcpu-2\n                - highcpu-4\n            acceleratorCount:\n              description: The number of accelerators to attach to the machine.\n              type: integer\n            acceleratorType:\n              description: Immutable. The type of accelerator(s) that may be attached to the machine as per acceleratorCount.\n              type: string\n              enum:\n                - UNSPECIFIED\n                - NVIDIA_TESLA_K80\n                - NVIDIA_TESLA_A100\n                - TPU_V2\n    BatchPredictionInput:\n      type: object\n      properties:\n        instancesFormat:\n          # Required. The format of the input data files.\n          $ref: \"#/components/schemas/DataFormat\"\n        inputPaths:\n          $ref: \"#/components/schemas/URI\"\n        predictionsFormat:\n          # Format of the output data files, defaults to JSON.\n          $ref: \"#/components/schemas/DataFormat\"\n        outputPaths:\n          $ref: \"#/components/schemas/URI\"\n        modelId:\n          # description: The id of the Model resoure that produces the predictions via this job\n          $ref: \"#/components/schemas/ID\"\n        versionId:\n          # description: specify a version of the model to use. \n          $ref: \"#/components/schemas/ID\"\n        dedicatedResources:\n          $ref: \"#/components/schemas/DedicatedResources\"\n    DoubleRange:\n      description: A range between two double numbers.\n      properties:\n        end:\n          description: End of the range, exclusive.\n          format: double\n          type: number\n        start:\n          description: Start of the range, inclusive.\n          format: double\n          type: number\n      type: object\n    TablesAnnotation:\n      description: Contains annotation details specific to Tables.\n      properties:\n        baselineScore:\n          description: Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.\n          format: float\n          type: number\n        predictionInterval:\n          $ref: \"#/components/schemas/DoubleRange\"\n          description: Output only. Only populated when target_column_spec has FLOAT64 data type. An interval in which the exactly correct target value has 95% chance to be in.\n        score:\n          description: Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.\n          format: float\n          type: number\n        tablesModelColumnInfo:\n          description: Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.\n          items:\n            $ref: \"#/components/schemas/TablesModelColumnInfo\"\n          type: array\n        value:\n          description: \"The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.\"\n      type: object\n    Row:\n      description: A representation of a row in a relational table.\n      properties:\n        columnSpecIds:\n          description: \"The resource IDs of the column specs describing the columns of the row. If set must contain, but possibly in a different order, all input feature column_spec_ids of the Model this row is being passed to. Note: The below `values` field must match order of this field, if this field is set.\"\n          items:\n            type: string\n          type: array\n        values:\n          description: Required. The values of the row cells, given in the same order as the column_spec_ids, or, if not set, then in the same order as input feature column_specs of the Model this row is being passed to.\n          items: {}\n          type: array\n      type: object\n    TablesModelColumnInfo:\n      description: An information specific to given column and Tables Model, in context of the Model and the predictions created by it.\n      properties:\n        columnDisplayName:\n          description: Output only. The display name of the column (same as the display_name of its ColumnSpec).\n          type: string\n        columnSpecName:\n          description: Output only. The name of the ColumnSpec describing the column. Not populated when this proto is outputted to BigQuery.\n          type: string\n        featureImportance:\n          description: \"Output only. When given as part of a Model (always populated): Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict (populated iff feature_importance param is set) or Batch Predict (populated iff feature_importance param is set): Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method.\"\n          format: float\n          type: number\n      type: object\n    BatchPredictionOutput:\n      type: object\n    Credentials:\n      type: object\n      properties:\n        userId:\n          type: integer\n          format: int64\n        password:\n          type: string\n          format: encrypted string\n    User:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          type: string\n          description: The user's name\n        admin:\n          type: boolean\n          description: Whether the user is an admin\n        roles:\n          type: array\n          description: The names of roles this user has\n          items:\n            type: string\n        groups:\n          type: array\n          description: The names of groups where this user is a member\n          items:\n            type: string\n        pending:\n          type: string\n          description: The currently pending action, if any\n          enum:\n            - spawn\n            - stop\n        auth_state:\n          type: object\n          properties: {}\n          description: |\n            Authentication state of the user. Only available with admin:users:auth_state\n            scope. None otherwise.\n    Group:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          type: string\n          description: The group's name\n        users:\n          type: array\n          description: The names of users who are members of this group\n          items:\n            type: string\n        roles:\n          type: array\n          description: The names of roles this group has\n          items:\n            type: string\n    Role:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          type: string\n          description: The role's name\n        description:\n          type: string\n          description: The role's description\n        scopes:\n          type: array\n          description: Roles are collections of scopes that specify the level of what a client is allowed to do\n          items:\n            type: string\n    RequestIdentity:\n      description: |\n        The model for the entity making the request.\n        Extends User model to add information about the specific credentials (e.g. session).\n      allOf:\n        - type: object\n          oneOf:\n            - $ref: \"#/components/schemas/User\"\n          discriminator:\n            propertyName: kind\n            mapping:\n              user: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            session_id:\n              type: string\n              nullable: true\n              description: |\n                The session id associated with the request's OAuth token, if any.\n                null, if the request token not associated with a session id.\n\n                Added in 2.0.\n            scopes:\n              type: array\n              description: |\n                The list of all expanded scopes the request credentials have access to.\n\n                Added in 2.0.\n              items:\n                type: string\n              example:\n                - \"read:users\"\n    URI:\n      oneOf:\n        - type: string\n          description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.\n          example: s3://datasets/train.csv\n        - type: array\n          description: multiple files\n          items:\n            type: string\n            description: Paths (URIs) to the Minio buckets containing the training data. There can be more than one.\n            example: s3://datasets/train.csv\n    Dataset:\n      description: A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        description:\n          description: User-provided description of the dataset. The description can be up to 25000 characters long.\n          type: string\n        namespaceId:\n          # description: Output only. The namespace id of the dataset.\n          $ref: \"#/components/schemas/ID\"\n        name:\n          description: Required. The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.\n          type: string\n        uri:\n          # description: Paths (URIs) to the MinIO buckets containing the training data. There can be more than one. Each URI has the form, s3://datasets/train.csv\n          $ref: \"#/components/schemas/URI\"\n      type: object\n    TableSpec:\n      description: A specification of a relational table. The table's schema is represented via its child column specs. \n      properties:\n        columnCount:\n          description: Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.\n          format: int64\n          type: string\n        id:\n          $ref: \"#/components/schemas/ID\"\n        rowCount:\n          description: Output only. The number of rows (i.e. examples) in the table.\n          format: int64\n          type: string\n        validRowCount:\n          description: Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).\n          format: int64\n          type: string\n        uri:\n          $ref: \"#/components/schemas/URI\"\n      type: object\n    ColumnSpec:\n      type: object\n      description: A representation of a column in a relational table. \n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        dataType:\n          enum:\n            - UNSPECIFIED\n            - FLOAT64\n            - TIMESTAMP\n            - STRING\n            - CATEGORY\n          type: string\n          description: The data type of elements stored in the column.\n    AnnotationSpec:\n      description: A definition of an annotation spec.\n      properties:\n        name:\n          description: Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.\n          type: string\n        id:\n          $ref: \"#/components/schemas/ID\"\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n      type: object\n    FractionSplit:\n      type: object\n      description: The fractionSplit object is not supported for forecasting models.\n      properties:\n        trainingFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to train the Model.\n        validationFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to validate the Model.\n        testFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to evaluate the Model\n    PredefinedSplit:\n      type: object\n      description: Optional. The column containing the data split values (TRAIN, VALIDATION, TEST). The predefinedSplit object is not supported for forecasting models.\n      properties:\n        key:\n          type: string\n          description: Required. The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {training, validation, test}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline.\n          enum:\n            - TRAIN\n            - VALIDATION\n            - TEST\n    TimestampSplit:\n      type: object\n      description: The fractionSplit object is not supported for forecasting models. The youngest data pieces are assigned to training set, next to validation set, and the oldest to the test set.\n      properties:\n        trainingFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to train the Model.\n        validationFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to validate the Model.\n        testFraction:\n          format: float\n          type: number\n          description: The fraction of the input data that is to be used to evaluate the Model.\n        key:\n          type: string\n          description: Required. The key is a name of one of the Dataset's data columns. The values of the key (the values in the column) must be in  date-time format. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline.\n    ModelMetadata:\n      description: Union field model_metadata. The model metadata that is specific to the problem type. Must match the metadata type of the dataset used to train the model. model_metadata can be only one of the following\n      oneOf:\n        - $ref: '#/components/schemas/RegressionModelMetadata'\n        - $ref: '#/components/schemas/ClassficationModelMetadata'\n        - $ref: '#/components/schemas/ForecastingModelMetadata'\n    TabularModelMetadata:\n      type: object\n      description: Metadata for Tabular models, metadata is used to train the model. When you train an AutoML model using a tabular dataset, the platform selects a default optimization objective based on your model type and the data type used for your target column.\n      properties:\n        modelId:\n          # description: The resource id of the Model.\n          $ref: \"#/components/schemas/ID\"\n        modelType:\n          description: The model type that is specific to the problem type. Must match the metadata type of the dataset used to train the model. \n          enum:\n            - Tabular\n          type: string\n        versionId:\n          # description: The resource id of the Version.\n          $ref: \"#/components/schemas/ID\"\n        datasetId:\n          description: Optional. The resource ID of the dataset used to create the model. The dataset must come from the same namespace.\n          type: integer\n          format: int64\n        disableEarlyStopping:\n          description: This disables the early stopping feature. By default, the early stopping feature is enabled, which means ends model training when detects that no more improvents can be made.\n          type: boolean\n        split:\n          description: Union field split. The instructions how the input data should be split between the training, validation and test sets. split can be only one of the following\n          oneOf:\n            - $ref: '#/components/schemas/FractionSplit'\n            - $ref: '#/components/schemas/PredefinedSplit'\n            - $ref: '#/components/schemas/TimestampSplit'\n        targetColumn:\n          type: string\n          description: The name of the column to train as the label.\n        weightColumn:\n          type: string\n          description: (Optional) The name of the weight column.\n        predictionType:\n          enum: \n            - classification\n            - regression\n            - forecasting\n          type: string\n        trainBudgetMilliNodeHours:\n          type: number\n          format: int32\n          description: \"The maximum amount of time you want the model to train, in milli node hours (1,000 milli node hours equals one node hour).\"\n        transformations:\n          type: array\n          description: \u003e\n            Transformations to apply to the input columns (i.e. columns other\n            than the targetColumn). Each transformation may produce multiple\n            result values from the column's value, and all are used for training.\n            If an input column has no transformations on it, such a column is\n            ignored by the training, except for the targetColumn, which should have\n            no transformations defined on.\n          items:\n            oneOf:\n            - type: object\n              description: \u003e\n                The training task will infer a single best transformation for\n                the column, based on the statistics of the Dataset, with invalid\n                values not allowed where applicable.\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [auto]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n            - type: object\n              description: |\n                'Treats the column as numeric and performs following\n                transformation functions on its values:\n                * Converts to float32.\n                * Computes z_score.\n                * Computes log(value + 1) if the value is at least 0.\n                  Otherwise, this transformation function is not applied and\n                  this output is considered missing.\n                * Computes z_score of log(value+1) if the value is at least 0.\n                  Otherwise, this transformation function is not applied and\n                  this output is considered missing.\n                * Outputs TRUE if values is NULL, FALSE otherwise.\n                This transformation fails for values which do not represent\n                valid float32 numbers. Valid, but extreme or outlier values,\n                receive no special treatment.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [numeric]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n                invalidValuesAllowed:\n                  type: boolean\n                  description: \u003e\n                    If true, the training task will create an additional\n                    boolean feature indicating whether the value is valid.\n                    Otherwise input rows with invalid values will be discarded.\n                  default: false\n            - type: object\n              description: |\n                'Treats the column as categorical (i.e. values are from\n                discrete finite space, and have no order defined between them)\n                and performs following transformation funcitons on its values:\n                * Outputs the value verbatim as is, as string.\n                * Assigns a dictionary lookup index to the value (all equal\n                  values receive the same index), and outputs an embedding of\n                  the value.\n                If a value is present less than 5 times in the training set,\n                it is always treated as it equaled \"unknown\" for the purposes\n                of this transformation.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [categorical]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n            - type: object\n              description: |\n                'Treats the column as a timestamp and performs following\n                transformation functions on its values:\n                * Performs all numeric transformation functions.\n                * Extracts year, month, day and weekday from the timestamp,\n                  and performs on each all the categorical transformation\n                  functions as if they were separate categorical values.\n                The whole transformation fails for values that are not\n                valid timestamps, but unlikely timestamp values (e.g. far in\n                the past or future) are treated as all other values.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [timestamp]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n                timeFormat:\n                  type: string\n                  description: \u003e\n                    'The format in which this time field is expressed. The\n                    timeFormat must either be one of:\n                    * `unix-seconds`\n                    * `unix-milliseconds`\n                    * `unix-microseconds`\n                    * `unix-nanoseconds`\n                    (for respectively number of seconds, milliseconds\n                    microseconds and nanoseconds since start of the Unix epoch);\n                    or be written in `strftime` syntax. If timeFormat is not\n                    set, then the default format is RFC 3339 `date-time` format,\n                    where `time-offset` = `\"Z\"` (e.g. 1985-04-12T23:20:50.52Z)'\n                invalidValuesAllowed:\n                  type: boolean\n                  description: \u003e\n                    Iff true, the training task will create an additional\n                    boolean feature indicating whether the value is valid.\n                    Otherwise input rows with invalid values will be discarded.\n            - type: object\n              description: |\n                'Treats the column as text and performs following\n                transformation funcitons on its values:\n                * Outputs the value verbatim as is, as string.\n                * Tokenizes text to words, using unicode script boundaries,\n                  assigns a dictionary lookup index to each word and generates\n                  its embedding, as well as a mean embedding. Outputs the mean\n                  embedding. Missing values also get an index and an\n                  embedding. Stop-words are processed same way as all other\n                  words.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [text]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n            - type: object\n              description: |\n                'Treats the columns as an array of numeric values, and\n                performs following transformation functions on its values:\n                * Computes average of the values in the arrays, and then\n                  performs on it all the numeric transformation functions.\n                  Average of an empty array is 0.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [numeric-array]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n                invalidValuesAllowed:\n                  type: boolean\n                  description: \u003e\n                    Iff true, the training task will create an additional\n                    boolean feature indicating whether the value is valid.\n                    Otherwise input rows with invalid values will be discarded.\n            - type: object\n              description: |\n                'Treats the columns as an array of categorical values, and\n                performs following transformation funcitons on its values:\n                * Assigns a dictionary lookup index for each value in the\n                  array, generates its embedding then takes the mean of all\n                  embeddings to generate an overall one which is outputted.\n                  Empty arrays generate an all-zero embedding.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [categorical-array]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n            - type: object\n              description: |\n                'Treats the columns as an array of text values, and performs\n                following transformation functions on its values:\n                * Concatenates all text values in an array into a single text\n                  value using the space (` `) as a delimiter, and then\n                  performs on it all the text transformation functionss.\n                  Empty arrays are treated as empty texts.'\n              required:\n              - columnName\n              properties:\n                type:\n                  type: string\n                  enum: [text-array]\n                columnName:\n                  type: string\n                  description: \u003e\n                    The name of an input column on which to perform the\n                    transformation.\n            discriminator:\n              propertyName: type\n    RegressionModelMetadata:\n      allOf:\n        - $ref: \"#/components/schemas/TabularModelMetadata\"\n        - type: object\n          properties:\n            optimizationObjective:\n              type: string\n              enum:\n                - minimize-rmse\n                - minimize-mae\n                - minimize-rmsle\n              description: | \n                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.\n                * `minimize-rmse` RMSE - Minimize root-mean-squared error (RMSE). Captures more extreme values accurately. Default value.\n                * `minimize-mae` MAE - Minimize mean-absolute error (MAE). Views extreme values as outliers with less impact on model.\n                * `minimize-rmsle` RMSLE - Minimize root-mean-squared log error (RMSLE). Penalizes error on relative size rather than absolute value. Useful when both predicted and actual values can be quite large.\n    ClassficationModelMetadata:\n      allOf:\n        - $ref: \"#/components/schemas/TabularModelMetadata\"\n        - type: object\n          properties:\n            optimizationObjective:\n              type: string\n              enum:\n                - maximize-au-roc\n                - minimize-log-loss\n                - maximize-au-prc\n                - maximize-precision-at-recall\n                - maximize-recall-at-precision\n              description: | \n                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.\n                * `maximize-au-roc` AUC ROC - Maximize the area under the receiver operating characteristic (ROC) curve. Distinguishes between classes. Default value for binary classification.\n                * `minimize-log-loss` Log loss - Keep prediction probabilities as accurate as possible. Only supported objective for multi-class classification.\n                * `maximize-au-prc` AUC PR -   Maximize the area under the precision-recall curve. Optimizes results for predictions for the less common class.\n                * `maximize-precision-at-recall` Precision at Recall - Optimize precision at a specific recall value.\n                * `maximize-recall-at-precision` Recall at Precision - Optimize recall at a specific precision value.\n            optimizationObjectivePrecisionValue:\n              description: Required when optimizationObjective is \"maximize-recall-at-precision\". Must be between 0 and 1, inclusive.\n              format: float\n              type: number\n            optimizationObjectiveRecallValue:\n              description: Required when optimizationObjective is \"maximize-precision-at-recall\". Must be between 0 and 1, inclusive.\n              format: float\n              type: number\n    ForecastingModelMetadata:\n      allOf:\n        - $ref: \"#/components/schemas/TabularModelMetadata\"\n        - type: object\n          properties:\n            timeColumn:\n              description: You must specify a time column and it must have a value for every row. The time column is used to place the observation represented by that row in time.\n              type: string\n            timeSeriesIdentifierColumn:\n              type: string\n              description: One of your columns in your training data for a forecasting model must be specified as the time series identifier. Forecasting training data usually includes multiple time series, and the identifier tells Platform which time series a given observation in the training data is part of. All of the rows in a given time series have the same value in the time series identifier column.Some common time series identifiers might be the product ID, a store ID, or a region. When you have multiple time series in your training data, there should be a specific column that differentiates them.\n            dataGranularity:\n              type: object\n              properties:\n                unit:\n                  type: string\n                  description: The unit to use for the granularity of your training data and your forecast horizon and context window. Can be minute, hour, day, week, month, or year. Select day if you would like to use holiday effect modeling.\n                  enum:\n                    - minute\n                    - hour\n                    - day \n                    - week\n                    - month\n                    - year\n                quantity:\n                  type: number\n                  format: int32\n                  description: The number of granularity units that make up the interval between observations in your training data. Must be one for all units except minutes, which can be 1, 5, 10, 15, or 30.\n            hierarchyConfig:\n              type: object\n              description: https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting/hierarchical\n              properties:\n                groupColumns:\n                  type: array\n                  items:\n                    type: string\n                    description: Column names in your training input table that identify the grouping for the hierarchy level. The column(s) must be `time_series_attribute_columns`.\n                groupTotalWeight:\n                  type: number\n                  format: int32\n                  description: Weight of the group aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set. If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series. \n                temporalTotalWeight:\n                  type: number\n                  format: int32\n                  description: Weight of the time aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set.\n                groupTemporalTotalWeight:\n                  type: number\n                  format: int32\n                  description: Weight of the total (group x time) aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set. If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series.\n            holidayRegions:\n              type: array\n              description:  (Optional) One or more geographical regions based on which the holiday effect is applied in modeling. During training, Vertex AI creates holiday categorical features within the model based on the date from the time column and the specified geographical regions. To enable it, set dataGranularity.unit to day and specify one or more regions in the holidayRegions field. By default, holiday effect modeling is disabled.\n              items:\n                type: string\n                description: \"https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-time-series#holiday_region\"\n            forecastHorizon:\n              type: number\n              format: int32\n              description: The size of the forecast horizon, specified in granularity units. The forecast horizon is the period of time the model should forecast results for.\n            contextWindow:\n              type: number\n              format: int32\n              description: The number of granularity units the model should look backward to include at training time. \n            timeSeriesAttributeColumns:\n              type: array\n              description: The name or names of the columns that are time series attributes. \n              items:\n                type: string\n            availableAtForecastColumns:\n              type: array\n              description: The name or names of the covariate columns whose value is known at forecast time. \n              items:\n                type: string\n            unavailableAtForecastColumns:\n              type: array\n              description: The name or names of the covariate columns whose value is unknown at forecast time.\n              items:\n                type: string\n            optimizationObjective:\n              type: string\n              enum:\n                - minimize-rmse\n                - minimize-mae\n                - minimize-rmsle\n                - minimize-rmspe\n                - minimize-wape-mae\n                - minimize-quantile-loss\n              description: | \n                When you train a model, Platform selects a default optimization objective based on your model type and the data type used for your target column.\n                * `minimize-rmse` RMSE - Minimize root-mean-squared error (RMSE). Captures more extreme values accurately and is less biased when aggregating predictions. Default value.\n                * `minimize-mae` MAE - Minimize mean-absolute error (MAE). Views extreme values as outliers with less impact on model.\n                * `minimize-rmsle` RMSLE -   Minimize root-mean-squared log error (RMSLE). Penalizes error on relative size rather than absolute value. Useful when both predicted and actual values can be quite large.\n                * `minimize-rmspe` RMSPE - Minimize root-mean-squared percentage error (RMSPE). Captures a large range of values accurately. Similar to RMSE, but relative to target magnitude. Useful when the range of values is large.\n                * `minimize-wape-mae` WAPE - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). Useful when the actual values are low.\n                * `minimize-quantile-loss` Quantile loss - Minimize the scaled pinball loss of the defined quantiles to quantify uncertainty in estimates.\n              \n    Model:\n      type: object\n      description: Represents a machine learning solution.\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          type: string\n          description: The name specified for the model when it was created. The model name must be unique within the namespace it is created in.\n        description:\n          type: string\n          description: Optional. The description specified for the model when it was created.\n        defaultVersion:\n          type: string\n          description: Output only. The default version of the model. This version will be used to handle prediction requests that do not specify a version.\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        deploymentState:\n          description: Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.\n          enum:\n            - DEPLOYMENT_STATE_UNSPECIFIED\n            - DEPLOYED\n            - UNDEPLOYED\n          type: string\n        experimentId:\n          $ref: \"#/components/schemas/ID\"\n        modelMetadata:\n          $ref: '#/components/schemas/ModelMetadata'\n    Version:\n      type: object\n      description: Represents a version of the model.\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          type: string\n          description: Required. The name of the Version. \n        description:\n          type: string\n          description: Optional. The description specified for the model when it was created.\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        error:\n          $ref: '#/components/schemas/Status'\n        state:\n          enum:\n            - Draft\n            - Training\n            - Ready\n            - Failed\n          type: string\n          description: |\n             * `Draft` - The version state is unspecified.\n             * `Ready` - The version is ready for prediction.\n             * `Training` - The version is being trained. New versions.patch and versions.delete requests will fail if a version is in the Training state.\n             * `Failed` - error should contain the details of the failure.\n        modelMetadata:\n          $ref: '#/components/schemas/ModelMetadata'\n    ConfusionMatrix:\n      type: object\n      description: \u003e\n        OPTIONAL. Confusion matrix of the evaluation for this confidenceThreshold. A confusion matrix shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is \"confusing\" two results.\n      properties:\n        annotationSpecs:\n          type: array\n          description: \u003e\n            AnnotationSpecs used in the confusion matrix.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: \u003e\n                  OPTIONAL. ID of the AnnotationSpec.\n              displayName:\n                type: string\n                description: \u003e\n                  Display name of the AnnotationSpec.\n          example: \n            - displayName: '1'\n            - displayName: '2'\n        rows:\n          type: array\n          description: \u003e\n            Rows in the confusion matrix. The number of rows is equal to the size of `annotationSpecs`.\n            `row[i][j]` is the number of DataItems that have ground truth of the `annotationSpecs[i]`\n            and are predicted as `annotationSpecs[j]` by the Model being evaluated.\n          items:\n            type: object\n            properties:\n              row:\n                type: array\n                items:\n                  type: integer\n                  format: int64\n          example:\n            - - 3817\n              - 140\n            - - 266\n              - 244\n    ModelExplanation:\n      type: object\n      description: Aggregated explanation metrics for the Model's prediction output over the data this ModelEvaluation uses. This field is populated only if the Model is evaluated with explanations, and only for AutoML tabular Models.\n      properties:\n        meanAttributions:\n          type: array\n          description: Aggregated attributions explaining the Model's prediction outputs over the set of instances. The attributions are grouped by outputs.For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item.\n          items:\n            type: object\n            properties:\n              featureAttributions:\n                type: object\n                description: Attributions of each explained feature. Automl platform shows you how much each feature impacts a model. The values are provided as a percentage for each feature, the higher the percentage, the more strongly that feature impacted model training. Review this information to ensure that all of the most important features make sense for your data and business problem.\n                example:\n                  Age: 0.022972771897912025\n                  Job: 0.03154255077242851\n                  MaritalStatus: 0.015506803058087826\n                  Education: 0.01918913424015045\n                  Default: 0.00021766019926872104\n                  Balance: 0.031217793002724648\n                  Housing: 0.06786702573299408\n                  Loan: 0.007259220816195011\n                  Contact: 0.08356624096632004\n                  Day: 0.07489492744207382\n                  Month: 0.19679982960224152\n                  Duration: 0.35500210523605347\n                  Campaign: 0.03342504799365997\n                  PDays: 0.013902961276471615\n                  Previous: 0.006168586667627096\n                  POutcome: 0.04046733304858208\n    Evaluation:\n      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.\n      oneOf:\n        - $ref: '#/components/schemas/RegressionEvaluation'\n        - $ref: '#/components/schemas/ClassficationEvaluation'\n        - $ref: '#/components/schemas/ForecastingEvaluation'\n    TabularEvaluation:\n      type: object\n      description: A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        performance:\n          type: string\n          description: model performance rating\n          enum:\n            - Excellent\n            - Great\n            - Good\n            - Okay\n            - Poor\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n    RegressionEvaluation:\n      allOf:\n        - $ref: \"#/components/schemas/TabularEvaluation\"\n        - type: object\n          properties:\n            modelExplanation:\n              $ref: '#/components/schemas/ModelExplanation'\n            metrics:\n              title: RegressionEvaluationMetrics\n              type: object\n              properties:\n                rootMeanSquaredError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The root-mean-squared error is the square root of the average squared difference between the target and predicted values. RMSE is more sensitive to outliers than MAE,so if you're concerned about large errors, then RMSE can be a more useful metric to evaluate. Similar to MAE, a smaller value indicates a higher quality model (0 represents a perfect predictor).\n                meanAbsoluteError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The mean absolute error (MAE) is the average absolute difference between the target values and the predicted values. This metric ranges from zero to infinity; a lower value indicates a higher quality model.\n                meanAbsolutePercentageError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Mean absolute percentage error (MAPE) is the average absolute percentage difference between the labels and the predicted values. This metric ranges between zero and infinity; a lower value indicates a higher quality model. MAPE is not shown if the target column contains any 0 values. In this case, MAPE is undefined.\n                rSquared:\n                  type: number\n                  format: float\n                  description: \u003e\n                    r squared (r^2) is the square of the Pearson correlation coefficient between the labels and predicted values. This metric ranges between zero and one; a higher value indicates a higher quality model.\n                rootMeanSquaredLogError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The root-mean-squared logarithmic error metric is similar to RMSE, except that it uses the natural logarithm of the predicted and actual values plus 1. RMSLE penalizes under-prediction more heavily than over-prediction. It can also be a good metric when you don't want to penalize differences for large prediction values more heavily than for small prediction values. This metric ranges from zero to infinity; a lower value indicates a higher quality model. The RMSLE evaluation metric is returned only if all label and predicted values are non-negative.\n              example:\n                rootMeanSquaredError: 2553.6309\n                meanAbsoluteError: 1373.3932\n                meanAbsolutePercentageError: \"Infinity\"\n                rSquared: 0.060764354\n                rootMeanSquaredLogError: \"NaN\"\n    ClassficationEvaluation:\n      allOf:\n        - $ref: \"#/components/schemas/TabularEvaluation\"\n        - type: object\n          properties:\n            sliceDimensions:\n              type: array\n              description: Output only. All possible dimensions of ModelEvaluationSlices. \n              items:\n                type: string\n                example: AnnotationSpec\n            modelExplanation:\n              $ref: '#/components/schemas/ModelExplanation'\n            metrics:\n              title: ClassificationEvaluationMetrics\n              type: object\n              properties:\n                auPrc:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The area under the precision-recall (PR) curve, also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.\n                  example: 0.97762364\n                auRoc:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The area under receiver operating characteristic curve. This ranges from zero to one, where a higher value indicates a higher-quality model.\n                  example: 0.97566897\n                logLoss:\n                  type: number\n                  format: float\n                  description: \u003e\n                    The cross-entropy between the model predictions and the target values. This ranges from zero to infinity, where a lower value indicates a higher-quality model.\n                  example: 0.19153881\n                confidenceMetrics:\n                  type: array\n                  description: \u003e\n                    Metrics for each confidenceThreshold in 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and\n                    `positionThreshold` = INT32_MAX_VALUE.\n                    ROC and precision-recall curves, and other aggregated metrics are derived from them. . \n                  items:\n                    type: object\n                    properties:\n                      confidenceThreshold:\n                        type: number\n                        format: float\n                        description: \u003e\n                          Metrics are computed with an assumption that the Model never returns predictions with\n                          score lower than this value.  A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Platform returns confidence metrics at different threshold values to show how the threshold affects precision and recall.\n                        example: 0.003269856\n                      recall:\n                        type: number\n                        format: float\n                        description: \u003e\n                          Recall (True Positive Rate) for the given confidence threshold. The fraction of predictions with this class that the model correctly predicted. \n                        example: 0.9997761\n                      precision:\n                        type: number\n                        format: float\n                        description: \u003e\n                          Precision for the given confidence threshold. The fraction of classification predictions produced by the model that were correct.\n                        example: 0.56993365\n                      falsePositiveRate:\n                        type: number\n                        format: float\n                        description: \u003e\n                          False Positive Rate for the given confidence threshold. The fraction of incorrectly predicted results out of all predicted results.\n                        example: 0.7544213\n                      f1Score:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The harmonic mean of recall and precision. F1 is a useful metric if you're looking for a balance between precision and recall and there's an uneven class distribution.\n                        example: 0.7260018\n                      recallAt1:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The Recall (True Positive Rate) when only considering the\n                          label that has the highest prediction score and not below the confidence\n                          threshold for each example.\n                        example: 0.90911126\n                      precisionAt1:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The precision when only considering the label that has the\n                          highest prediction score and not below the confidence threshold for each example.\n                        example: 0.90911126\n                      falsePositiveRateAt1:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The False Positive Rate when only considering the label that\n                          has the highest prediction score and not below the confidence threshold\n                          for each example.\n                        example: 0.09088874\n                      f1ScoreAt1:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The harmonic mean of recallAt1 and precisionAt1.\n                        example: 0.90911126\n                      truePositiveCount:\n                        type: integer\n                        format: int64\n                        description: \u003e\n                          The number of times a model correctly predicted a positive class.\n                        example: 4466\n                      falsePositiveCount:\n                        type: integer\n                        format: int64\n                        description: \u003e\n                          The number of times a model mistakenly predicted a positive class.\n                        example: 3370\n                      falseNegativeCount:\n                        type: integer\n                        format: int64\n                        description: \u003e\n                          The number of times a model mistakenly predicted a negative class.\n                        example: 1\n                      trueNegativeCount:\n                        type: integer\n                        format: int64\n                        description: \u003e\n                          The number of times a model correctly predicted a negative class.\n                        example: 1097\n                confusionMatrix:\n                  $ref: \"#/components/schemas/ConfusionMatrix\"\n    ForecastingEvaluation:\n      allOf:\n        - $ref: \"#/components/schemas/TabularEvaluation\"\n        - type: object\n          properties:\n            metrics:\n              title: ForecastingEvaluationMetrics\n              type: object\n              properties:\n                rootMeanSquaredError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Root Mean Squared Error (RMSE).\n                  example: 719.0045\n                meanAbsoluteError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Mean Absolute Error (MAE).\n                  example: 487.0792\n                meanAbsolutePercentageError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Mean absolute percentage error. Infinity when there are zeros in the ground truth.\n                  example: \"Infinity\"\n                rSquared:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Coefficient of determination as Pearson correlation coefficient. Undefined when ground truth\n                    or predictions are constant or near constant.\n                  example: 0.8837288\n                rootMeanSquaredLogError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Root mean squared log error. Undefined when there are negative ground truth values or\n                    predictions.\n                  example: \"NaN\"\n                quantileMetrics:\n                  type: array\n                  description: \u003e\n                    The metrics at each quantile point. Only populated if the optimization objective is\n                    minimize-quantile-loss.\n                  items:\n                    type: object\n                    properties:\n                      quantile:\n                        type: number\n                        format: double\n                        description: \u003e\n                          The percent quantile for this point.\n                        # exclusiveMinimum: 0.0\n                        # exclusiveMaximum: 1.0\n                      scaledPinballLoss:\n                        type: number\n                        format: float\n                        description: \u003e\n                          The scaled pinball loss at the given quantile.\n                      observedQuantile:\n                        type: number\n                        format: double\n                        description: \u003e\n                          This is a custom metric that calculates the percentage of true values that were less\n                          than the predicted value for that quantile. Only populated when optimizationObjective\n                          in TrainingPipeline.training_task_input is minimize-quantile-loss and each entry\n                          corresponds to an entry in quantiles in TrainingPipeline.training_task_input.\n                        minimum: 0.0\n                        maximum: 1.0\n                    example:\n                      \"quantile\": 0.2\n                      \"scaledPinballLoss\": 157.34422\n                      \"observedQuantile\": 0.15918367346938775\n                weightedAbsolutePercentageError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Weighted absolute percentage error (WAPE). Not calculated using weight column values.\n                rootMeanSquaredPercentageError:\n                  type: number\n                  format: float\n                  description: \u003e\n                    Root mean sqaured percentage error (RMSPE).\n    EvaluationSlice:\n      allOf:\n        - $ref: '#/components/schemas/Evaluation'\n        - type: object\n          properties:\n            slice:\n              type: object\n              description: Output only. The slice of the test data that is used to evaluate the Model.\n              properties:\n                dimension:\n                  description: Output only. The dimension of the slice. Well-known dimensions are, annotationSpec, This slice is on the test data that has either ground truth or prediction with AnnotationSpec.display_name equals to value.\n                  type: string\n                  example: annotationSpec\n                value:\n                  description: Output only. The value of the dimension in this slice.\n                  type: string\n    Endpoint:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        modelId:\n          # description: The id of the Model resoure that produces the predictions via this job\n          $ref: \"#/components/schemas/ID\"\n        versionId:\n          # description: specify a version of the model to use. \n          $ref: \"#/components/schemas/ID\"\n        dedicatedResources:\n          $ref: \"#/components/schemas/DedicatedResources\"\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n    Status:\n      description: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs. Each `Status` message contains three pieces of data - error code, error message, and error details. \n      properties:\n        code:\n          description: The status code, which should be an enum value.\n          format: int32\n          type: integer\n        details:\n          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.\n          items:\n            additionalProperties:\n              description: Properties of the object. \n            type: object\n          type: array\n        message:\n          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the Status.details field, or localized by the client.\n          type: string\n      type: object\n    Operation:\n      description: This resource represents a long-running operation that is the result of a network API call. Some requests start long-running operations that require time to complete. These requests return an operation name, which you can use to view the operation's status or cancel the operation. Most of the API call return as quickly as possible, and provide a complete response. However, there are two kinds of asynchronous operations that you should understand - jobs and long-running operations. When you start an asynchronous operation, you usually want to know when it completes. The process for getting status is different for jobs and long-running operations\n      properties:\n        done:\n          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.\n          type: boolean\n        error:\n          # description: The error result of the operation in case of failure or cancellation.\n          $ref: '#/components/schemas/Status'\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        id:\n          description: The resource id of the operation\n          type: integer\n          format: int64\n        response:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type URL.\n          description: | \n            'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is empty. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.\n            \n            An object containing fields of an arbitrary type. An additional field \"@type\" contains a URI identifying the type. Example: { \"id\": 1234, \"@type\": \"TakeSnapshotResponse\" }.'\n          type: object\n      type: object\n    ExamplePayload:\n      description: Example data used for training or prediction.\n      properties:\n        row:\n          $ref: \"#/components/schemas/Row\"\n          description: Example relational table row.\n      type: object\n    AnnotationPayload:\n      description: Contains annotation information that is relevant to AutoML.\n      properties:\n        annotationSpecId:\n          description: Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.\n          type: integer\n          format: int64\n        displayName:\n          description: Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.\n          type: string\n        tables:\n          $ref: \"#/components/schemas/TablesAnnotation\"\n          description: Annotation details for Tables.\n      type: object\n    PredictRequest:\n      description: Request message for PredictionService.Predict.\n      properties:\n        parameters:\n          additionalProperties:\n            type: string\n          description: \"Additional domain-specific parameters, any string must be up to 25000 characters long. * For Image Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for an image, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Object Detection: `score_threshold` - (float) When Model detects objects on the image, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be returned in the response. Default is 100, the requested value may be limited by server. * For Tables: feature_importance - (boolean) Whether feature importance should be populated in the returned TablesAnnotation. The default is false.\"\n          type: object\n        payload:\n          $ref: \"#/components/schemas/ExamplePayload\"\n          description: Required. Payload to perform a prediction on. The payload must match the problem type that the model was trained to solve.\n      type: object\n    PredictResponse:\n      description: Response message for PredictionService.Predict.\n      properties:\n        payload:\n          description: Prediction result. Translation and Text Sentiment will return precisely one payload.\n          items:\n            $ref: \"#/components/schemas/AnnotationPayload\"\n          type: array\n      type: object\n    Experiment:\n      type: object\n      description: An experiment is a grouping of many runs\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          description: Unique experiment name provided by user.\n          type: string\n        description:\n          type: string\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n    Run:\n      type: object\n      description: A run is a single execution. The model trained in the child run with the best score will be selected as the AutoML model\n      properties:\n        id:\n          $ref: \"#/components/schemas/ID\"\n        name:\n          description: Name provided by user, or auto generated if run is created by scheduled job. Not unique.\n          type: string\n        description:\n          type: string\n        createTime:\n          $ref: \"#/components/schemas/DateTime\"\n        updateTime:\n          $ref: \"#/components/schemas/DateTime\"\n        modelMetadata:\n          $ref: '#/components/schemas/ModelMetadata'\n        experimentId:\n          $ref: \"#/components/schemas/ID\"\n        state:\n          $ref: '#/components/schemas/State'\n        error:\n          $ref: '#/components/schemas/Status'\n        evaluation:\n          $ref: '#/components/schemas/Evaluation'\n        parentId:\n          # description: Optional. Runs can have an optional parent\n          $ref: \"#/components/schemas/ID\"\n  parameters:\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: The number of results to return from offset\n      required: false\n      schema:\n        type: integer\n        example: 25\n        default: 100\n    offset:\n      name: offset\n      in: query\n      description: The initial position from which to return results\n      required: false\n      schema:\n        type: integer\n        default: 0\n    namespace:\n      name: namespace\n      in: path\n      description: The id of the namespace.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    user:\n      name: user\n      in: path\n      description: The id of the user.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    group:\n      name: group\n      in: path\n      description: The id of the group.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-group\n    job:\n      name: job\n      in: path\n      description: The id of the job.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    dataset:\n      name: dataset\n      in: path\n      description: The resource id of the dataset.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    tableSpec:\n      name: tableSpec\n      in: path\n      description: The resource id of the tableSpec.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    annotationSpec:\n      name: annotationSpec\n      in: path\n      description: The resource id of the annotationSpec.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    model:\n      name: model\n      in: path\n      description: The resource id of the model.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n        example: my-model\n    version:\n      name: version\n      in: path\n      description: The resource id of the version.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    evaluation:\n      name: evaluation\n      in: path\n      description: The resource id of the evaluation.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    slice:\n      name: slice\n      in: path\n      description: The resource id of the slice.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    endpoint:\n      name: endpoint\n      in: path\n      description: The resource id of the endpoint.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n    operation:\n      name: operation\n      in: path\n      description: The resource id of the operation.\n      required: true\n      schema:\n        type: string\n        maxLength: 1024\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content: {}\n    Unauthorized:\n      description: Authentication/Authorization error\n      content: {}\n    IllegalInput:\n      description: Illegal input for operation.\n    default:\n        description: Unexpected error\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                error:\n                  # description: the error schema for JSON HTTP APIs\n                  $ref: '#/components/schemas/Status'\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://hub.example/hub/api/oauth2/authorize\n          tokenUrl: https://hub.example/hub/api/oauth2/token\n          scopes:\n            (openapi-reference): https://github.com/jupyterhub/jupyterhub/blob/main/docs/source/_static/rest-api.yml\n            (rbac-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/index.html\n            (scope-reference): https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html\n            self:\n              The user’s own resources\n            all:\n              Contains all available scopes and grants full rights to all actions.\n            admin:users:\n              Read, write, create and delete users and their authentication\n              state.\n            admin:auth_state: Read a user’s authentication state.\n            users:\n              Read and write permissions to user models (excluding authentication state).\n            delete:users: Delete users.\n            list:users: List users, including at least their names.\n            read:users:\n              Read user models (excluding authentication state).\n            read:users:name: Read names of users.\n            read:users:groups: Read users’ group membership.\n            read:roles: Read role assignments.\n            read:roles:users: Read user role assignments.\n            read:roles:groups: Read group role assignments.\n            admin:groups: Read and write group information, create and delete groups.\n            groups: Read and write group information, including adding/removing users\n              to/from groups.\n            list:groups: List groups, including at least their names.\n            read:groups: Read group models.\n            read:groups:name: Read group names.\n            delete:groups: Delete groups.\n            read:metrics: Read prometheus metrics.\n",
			"canonicalURL": "/github.com/ml-for-good/automl@db1c9a06fb94adc1569d9368b693c09cf938a581/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ml-for-good/automl/blob/db1c9a06fb94adc1569d9368b693c09cf938a581/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/namespaces/{namespace}/models/{model}/versions/{version}/evaluations/{evaluation}/slices\": get: responses: code 200: contents: media: \"application/json\": generate schema: field results: item: allOf: schema type mismatch:  and object",
	"NotImplemented": [
		"discriminator inference",
		"oauth2 security"
	]
}