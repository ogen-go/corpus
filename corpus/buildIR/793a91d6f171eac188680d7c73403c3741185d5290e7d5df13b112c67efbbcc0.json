{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ivamuno/redoc-asyncapi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "demo/openapi.yaml",
			"byteSize": 36853,
			"content": "openapi: 3.0.0\nservers:\n  - url: //petstore.swagger.io/v2\n    description: Default server\n  - url: //petstore.swagger.io/sandbox\n    description: Sandbox server\ninfo:\n  description: |\n    This is a sample server Petstore server.\n    You can find out more about Swagger at\n    [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\n    For this sample, you can use the api key `special-key` to test the authorization filters.\n\n    # Introduction\n    This API is documented in **OpenAPI format** and is based on\n    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\n    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\n    tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\n    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n    # OpenAPI Specification\n    This API is documented in **OpenAPI format** and is based on\n    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\n    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\n    tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\n    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n    # Cross-Origin Resource Sharing\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\n    And that allows cross-domain communication from the browser.\n    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n    # Authentication\n\n    Petstore offers two forms of authentication:\n      - API Key\n      - OAuth2\n    OAuth2 - an open protocol to allow secure authorization in a simple\n    and standard method from web, mobile and desktop applications.\n\n    \u003cSecurityDefinitions /\u003e\n\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    name: API Support\n    email: apiteam@swagger.io\n    url: https://github.com/Redocly/redoc\n  x-logo:\n    url: 'https://redocly.github.io/redoc/petstore-logo.png'\n    altText: Petstore logo\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nexternalDocs:\n  description: Find out how to create Github repo for your OpenAPI spec.\n  url: 'https://github.com/Rebilly/generator-openapi-repo'\ntags:\n  - name: pet\n    description: Everything about your Pets\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n  - name: pet_model\n    x-displayName: The Pet Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Pet\" /\u003e\n  - name: store_model\n    x-displayName: The Order Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Order\" exampleRef=\"#/components/examples/Order\" showReadOnly={true} showWriteOnly={true} /\u003e\nx-tagGroups:\n  - name: General\n    tags:\n      - pet\n      - store\n  - name: User Management\n    tags:\n      - user\n  - name: Models\n    tags:\n      - pet_model\n      - store_model\npaths:\n  /pet:\n    parameters:\n      - name: Accept-Language\n        in: header\n        description: \"The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US\"\n        example: en-US\n        required: false\n        schema:\n          type: string\n          default: en-AU\n      - name: cookieParam\n        in: cookie\n        description: Some cookie\n        required: true\n        schema:\n          type: integer\n          format: int64\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add new pet to the store inventory.\n      operationId: addPet\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      x-codeSamples:\n        - lang: 'C#'\n          source: |\n            PetStore.v1.Pet pet = new PetStore.v1.Pet();\n            pet.setApiKey(\"your api key\");\n            pet.petType = PetStore.v1.Pet.TYPE_DOG;\n            pet.name = \"Rex\";\n            // set other fields\n            PetStoreResponse response = pet.create();\n            if (response.statusCode == HttpStatusCode.Created)\n            {\n              // Successfully created\n            }\n            else\n            {\n              // Something wrong -- check response for errors\n              Console.WriteLine(response.getRawResponse());\n            }\n        - lang: PHP\n          source: |\n            $form = new \\PetStore\\Entities\\Pet();\n            $form-\u003esetPetType(\"Dog\");\n            $form-\u003esetName(\"Rex\");\n            // set other fields\n            try {\n                $pet = $client-\u003epets()-\u003ecreate($form);\n            } catch (UnprocessableEntityException $e) {\n                var_dump($e-\u003egetErrors());\n            }\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      x-codeSamples:\n        - lang: PHP\n          source: |\n            $form = new \\PetStore\\Entities\\Pet();\n            $form-\u003esetPetId(1);\n            $form-\u003esetPetType(\"Dog\");\n            $form-\u003esetName(\"Rex\");\n            // set other fields\n            try {\n                $pet = $client-\u003epets()-\u003eupdate($form);\n            } catch (UnprocessableEntityException $e) {\n                var_dump($e-\u003egetErrors());\n            }\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          deprecated: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n          example: \"Bearer \u003cTOKEN\u003e\"\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          style: form\n          schema:\n            type: array\n            minItems: 1\n            maxItems: 3\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: \u003e-\n        Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      deprecated: true\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid Order\n          content:\n            application/json:\n              example:\n                status: 400\n                message: \"Invalid Order\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 5\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: string\n            minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /store/subscribe:\n    post:\n      tags:\n        - store\n      summary: Subscribe to the Store events\n      description: Add subscription for a store events\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                callbackUrl:\n                  type: string\n                  format: uri\n                  description: This URL will be called by the server when the desired event will occur\n                  example: https://myserver.com/send/callback/here\n                eventName:\n                  type: string\n                  description: Event name for the subscription\n                  enum:\n                    - orderInProgress\n                    - orderShipped\n                    - orderDelivered\n                  example: orderInProgress\n              required:\n                - callbackUrl\n                - eventName\n      responses:\n        '201':\n          description: Subscription added\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  subscriptionId:\n                    type: string\n                    example: AAA-123-BBB-456\n      callbacks:\n        orderInProgress:\n          '{$request.body#/callbackUrl}?event={$request.body#/eventName}':\n            servers:\n              - url: //callback-url.path-level/v1\n                description: Path level server 1\n              - url: //callback-url.path-level/v2\n                description: Path level server 2\n            post:\n              summary: Order in Progress (Summary)\n              description: A callback triggered every time an Order is updated status to \"inProgress\" (Description)\n              externalDocs:\n                description: Find out more\n                url: 'https://more-details.com/demo'\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                        timestamp:\n                          type: string\n                          format: date-time\n                          example: '2018-10-19T16:46:45Z'\n                        status:\n                          type: string\n                          example: 'inProgress'\n                  application/xml:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                    example: |\n                      \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                      \u003croot\u003e\n                        \u003corderId\u003e123\u003c/orderId\u003e\n                        \u003cstatus\u003einProgress\u003c/status\u003e\n                        \u003ctimestamp\u003e2018-10-19T16:46:45Z\u003c/timestamp\u003e\n                      \u003c/root\u003e\n              responses:\n                '200':\n                  description: Callback successfully processed and no retries will be performed\n                  content:\n                    application/json:\n                      schema:\n                        type: object\n                        properties:\n                          someProp:\n                            type: string\n                            example: '123'\n                '299':\n                  description: Response for cancelling subscription\n                '500':\n                  description: Callback processing failed and retries will be performed\n              x-codeSamples:\n                - lang: 'C#'\n                  source: |\n                    PetStore.v1.Pet pet = new PetStore.v1.Pet();\n                    pet.setApiKey(\"your api key\");\n                    pet.petType = PetStore.v1.Pet.TYPE_DOG;\n                    pet.name = \"Rex\";\n                    // set other fields\n                    PetStoreResponse response = pet.create();\n                    if (response.statusCode == HttpStatusCode.Created)\n                    {\n                      // Successfully created\n                    }\n                    else\n                    {\n                      // Something wrong -- check response for errors\n                      Console.WriteLine(response.getRawResponse());\n                    }\n                - lang: PHP\n                  source: |\n                    $form = new \\PetStore\\Entities\\Pet();\n                    $form-\u003esetPetType(\"Dog\");\n                    $form-\u003esetName(\"Rex\");\n                    // set other fields\n                    try {\n                        $pet = $client-\u003epets()-\u003ecreate($form);\n                    } catch (UnprocessableEntityException $e) {\n                        var_dump($e-\u003egetErrors());\n                    }\n            put:\n              description: Order in Progress (Only Description)\n              servers:\n                - url: //callback-url.operation-level/v1\n                  description: Operation level server 1 (Operation override)\n                - url: //callback-url.operation-level/v2\n                  description: Operation level server 2 (Operation override)\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                        timestamp:\n                          type: string\n                          format: date-time\n                          example: '2018-10-19T16:46:45Z'\n                        status:\n                          type: string\n                          example: 'inProgress'\n                  application/xml:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                    example: |\n                      \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n                      \u003croot\u003e\n                        \u003corderId\u003e123\u003c/orderId\u003e\n                        \u003cstatus\u003einProgress\u003c/status\u003e\n                        \u003ctimestamp\u003e2018-10-19T16:46:45Z\u003c/timestamp\u003e\n                      \u003c/root\u003e\n              responses:\n                '200':\n                  description: Callback successfully processed and no retries will be performed\n                  content:\n                    application/json:\n                      schema:\n                        type: object\n                        properties:\n                          someProp:\n                            type: string\n                            example: '123'\n        orderShipped:\n          '{$request.body#/callbackUrl}?event={$request.body#/eventName}':\n            post:\n              description: |\n                Very long description\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n                incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n                nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n                fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                culpa qui officia deserunt mollit anim id est laborum.\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                        timestamp:\n                          type: string\n                          format: date-time\n                          example: '2018-10-19T16:46:45Z'\n                        estimatedDeliveryDate:\n                          type: string\n                          format: date-time\n                          example: '2018-11-11T16:00:00Z'\n              responses:\n                '200':\n                  description: Callback successfully processed and no retries will be performed\n        orderDelivered:\n          'http://notificationServer.com?url={$request.body#/callbackUrl}\u0026event={$request.body#/eventName}':\n            post:\n              deprecated: true\n              summary: Order delivered\n              description: A callback triggered every time an Order is delivered to the recipient\n              requestBody:\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          example: '123'\n                        timestamp:\n                          type: string\n                          format: date-time\n                          example: '2018-10-19T16:46:45Z'\n              responses:\n                '200':\n                  description: Callback successfully processed and no retries will be performed\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                response:\n                  value: OK\n            application/xml:\n              schema:\n                type: string\n              examples:\n                response:\n                  value:  \u003cMessage\u003e OK \u003c/Message\u003e\n            text/plain:\n              examples:\n                response:\n                  value:  OK\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\ncomponents:\n  schemas:\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Cat:\n      description: A representation of a cat\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            huntingSkill:\n              type: string\n              description: The measured skill for hunting\n              default: lazy\n              example: adventurous\n              enum:\n                - clueless\n                - lazy\n                - adventurous\n                - aggressive\n          required:\n            - huntingSkill\n    Category:\n      type: object\n      properties:\n        id:\n          description: Category ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Category name\n          type: string\n          minLength: 1\n        sub:\n          description: Test Sub Category\n          type: object\n          properties:\n            prop1:\n              type: string\n              description: Dumb Property\n      xml:\n        name: Category\n    Dog:\n      description: A representation of a dog\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            packSize:\n              type: integer\n              format: int32\n              description: The size of the pack the dog is from\n              default: 1\n              minimum: 1\n          required:\n            - packSize\n    HoneyBee:\n      description: A representation of a honey bee\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          properties:\n            honeyPerDay:\n              type: number\n              description: Average amount of honey produced per day in ounces\n              example: 3.14\n              multipleOf: .01\n          required:\n            - honeyPerDay\n    Id:\n      type: integer\n      format: int64\n      readOnly: true\n    Order:\n      type: object\n      properties:\n        id:\n          description: Order ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        petId:\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        quantity:\n          type: integer\n          format: int32\n          minimum: 1\n          default: 1\n        shipDate:\n          description: Estimated ship date\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          description: Indicates whenever order was completed or not\n          type: boolean\n          default: false\n          readOnly: true\n        requestId:\n          description: Unique Request Id\n          type: string\n          writeOnly: true\n      xml:\n        name: Order\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      discriminator:\n        propertyName: petType\n        mapping:\n          cat: '#/components/schemas/Cat'\n          dog: '#/components/schemas/Dog'\n          bee: '#/components/schemas/HoneyBee'\n      properties:\n        id:\n          externalDocs:\n            description: \"Find more info here\"\n            url: \"https://example.com\"\n          description: Pet ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        category:\n          description: Categories this pet belongs to\n          allOf:\n            - $ref: '#/components/schemas/Category'\n        name:\n          description: The name given to a pet\n          type: string\n          example: Guru\n        photoUrls:\n          description: The list of URL to a cute photos featuring pet\n          type: array\n          maxItems: 20\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n            format: url\n        friend:\n          allOf:\n            - $ref: '#/components/schemas/Pet'\n        tags:\n          description: Tags attached to the pet\n          type: array\n          minItems: 1\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: Pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n        petType:\n          description: Type of a pet\n          type: string\n      xml:\n        name: Pet\n    Tag:\n      type: object\n      properties:\n        id:\n          description: Tag ID\n          allOf:\n            - $ref: '#/components/schemas/Id'\n        name:\n          description: Tag name\n          type: string\n          minLength: 1\n      xml:\n        name: Tag\n    User:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        pet:\n          oneOf:\n            - $ref: '#/components/schemas/Pet'\n            - $ref: '#/components/schemas/Tag'\n        username:\n          description: User supplied username\n          type: string\n          minLength: 4\n          example: John78\n        firstName:\n          description: User first name\n          type: string\n          minLength: 1\n          example: John\n        lastName:\n          description: User last name\n          type: string\n          minLength: 1\n          example: Smith\n        email:\n          description: User email address\n          type: string\n          format: email\n          example: john.smith@example.com\n        password:\n          type: string\n          description: \u003e-\n            User password, MUST contain a mix of upper and lower case letters,\n            as well as digits\n          format: password\n          minLength: 8\n          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'\n          example: drowssaP123\n        phone:\n          description: User phone number in international format\n          type: string\n          pattern: '/^\\+(?:[0-9]-?){6,14}[0-9]$/'\n          example: +1-202-555-0192\n        userStatus:\n          description: User status\n          type: integer\n          format: int32\n      xml:\n        name: User\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            allOf:\n              - description: My Pet\n                title: Pettie\n              - $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            type: 'object'\n            properties:\n              name:\n                type: string\n                description: hooray\n      description: Pet object that needs to be added to the store\n      required: true\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n  securitySchemes:\n    petstore_auth:\n      description: |\n        Get access to data while protecting your account credentials.\n        OAuth2 is also a safer and more secure way to give you access.\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      description: \u003e\n        For this sample, you can use the api key `special-key` to test the\n        authorization filters.\n      type: apiKey\n      name: api_key\n      in: header\n  examples:\n    Order:\n      value:\n        quantity: 1\n        shipDate: '2018-10-19T16:46:45Z'\n        status: placed\n        complete: false\nx-webhooks:\n  newPet:\n    post:\n      summary: New pet\n      description: Information about a new pet in the systems\n      operationId: newPet\n      tags: \n        - pet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully"
		}
	},
	"Error": "buildIR: make ir: path \"/user\": post: requestBody: contents: application/json: schema: field password: string validator: pattern: error parsing regexp: invalid or unsupported Perl syntax: `(?=`",
	"NotImplemented": [
		"allOf"
	]
}