{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/BenjaminHae/modern-password-manager"
		},
		"file": {
			"name": "OpenAPIDescription.yaml",
			"size": 0,
			"path": "OpenAPIDescription.yaml",
			"byteSize": 16340,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a password manager server.\n  version: 0.0.1\n  title: Password Manager\n  termsOfService: \"\"\n  contact:\n    email: test@te.st\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: user\n    description: Creating users, signing in/out\n  - name: accounts\n    description: Access to accounts stored in the password manager\n  - name: maintenance\n    description: General information\npaths:\n  /info:\n    get:\n      tags:\n        - maintenance\n      summary: get information about the server for the client\n      description: \"\"\n      operationId: serverInformation\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerInformation\"\n  /user:\n    put:\n      tags:\n        - user\n      summary: registration\n      description: \"\"\n      operationId: registerUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegistrationInformation\"\n        description: Registration Object\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericSuccessMessage\"\n        \"405\":\n          description: Invalid input\n      security:\n        - csrf: []\n  /user/login:\n    post:\n      tags:\n        - user\n      summary: login\n      description: \"\"\n      operationId: loginUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LogonInformation\"\n        description: Logon Object\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: SESSIONID=1234567890; Path=/; HttpOnly; Secure; SameSite\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LogonResult\"\n        \"405\":\n          description: Invalid input\n      security:\n        - csrf: []\n  /user/login/webauthn:\n    get:\n      tags:\n        - user\n      summary: \"get a WebAuthN challenge\"\n      description: \"\"\n      operationId: loginUserWebAuthnChallenge\n      responses: \n        \"200\":\n          description: returns a challenge that can be used exactly once and is only valid until a new challenge is generated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWebAuthnChallenge\"\n    post:\n      tags:\n        - user\n      summary: \"login user with WebAuthn\"\n      description: \"add webauthn\"\n      operationId: loginUserWebAuthnGet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserWebAuthnGet\"\n        description: WebAuthnGet Object\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: SESSIONID=1234567890; Path=/; HttpOnly; Secure; SameSite\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWebAuthnLogonResult\"\n        \"405\":\n          description: Invalid input\n      security:\n        - csrf: []\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericSuccessMessage\"\n  /user/changepassword:\n    post:\n      tags:\n        - user\n      summary: \"change user password\"\n      description: \"change password of current user and upload reencrypted accounts\"\n      operationId: changePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChangePassword\"\n        description: ChangePassword Object\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericSuccessMessage\"\n        \"403\":\n          description: Unauthorized\n      security:\n        - csrf: []\n  /user/webauthn:\n    get:\n      tags:\n        - user\n      summary: \"get all registered WebAuthn credentials for the user\"\n      description: \"\"\n      operationId: getUserWebAuthnCreds\n      responses: \n        \"200\":\n          description: list of stored WebAuthn credentials\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWebAuthnCreds\"\n        \"403\":\n          description: Unauthorized\n    post:\n      tags:\n        - user\n      summary: \"add a webauthn credential\"\n      description: \"add webauthn\"\n      operationId: createUserWebAuthn\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserWebAuthnCreateWithKey\"\n        description: WebAuthnCreate Object\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericSuccessMessage\"\n        \"403\":\n          description: Unauthorized\n      security:\n        - csrf: []\n  /user/webauthn/{id}:\n    delete:\n      tags:\n        - user\n      summary: Delete a stored WebAuthn Public Key\n      description: \"\"\n      operationId: deleteUserWebAuthn\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The index of the WebAuthn Public Key to delete (not the public key id)\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWebAuthnCreds\"\n        \"400\":\n          description: Invalid status value\n        \"403\":\n          description: Unauthorized\n  /user/settings:\n    get:\n      tags:\n        - user\n      summary: Returns the client settings of the current user\n      description: \"\"\n      operationId: getUserSettings\n      responses: \n        \"200\":\n          description: stored client values (encrypted string that contains a JSON)\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserSettings\"\n        \"403\":\n          description: Unauthorized\n    post:\n      tags:\n        - user\n      summary: \"change client settings of current user\"\n      description: \"parameter contains encrypted client settings\"\n      operationId: setUserSettings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserSettings\"\n        description: Settings Object\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GenericSuccessMessage\"\n        \"403\":\n          description: Unauthorized\n      security:\n        - csrf: []\n  /user/history:\n    get:\n      tags:\n        - user\n      summary: Returns a history of successful and failed logins\n      description: \"\"\n      operationId: getUserHistory\n      responses: \n        \"200\":\n          description: Array of logins\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserHistory\"\n        \"403\":\n          description: Unauthorized\n  /accounts:\n    get:\n      tags:\n        - accounts\n      summary: Returns the accounts stored by the current user\n      description: \"\"\n      operationId: getAccounts\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n        \"400\":\n          description: Invalid status value\n        \"403\":\n          description: Unauthorized\n    put:\n      tags:\n        - accounts\n      summary: Add Account\n      description: \"\"\n      operationId: addAccounts\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewAccounts\"\n        description: Account Values\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n        \"400\":\n          description: Invalid status value\n        \"403\":\n          description: Unauthorized\n      security:\n        - csrf: []\n  /accounts/{id}:\n    post:\n      tags:\n        - accounts\n      summary: Update a stored account\n      description: \"\"\n      operationId: updateAccount\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the account\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Account\"\n        description: Account Object\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n        \"400\":\n          description: Invalid status value\n        \"403\":\n          description: Unauthorized\n      security:\n        - csrf: []\n    delete:\n      tags:\n        - accounts\n      summary: Delete a stored Account\n      description: \"\"\n      operationId: deleteAccount\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the account\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n        \"400\":\n          description: Invalid status value\n        \"403\":\n          description: Unauthorized\nexternalDocs:\n  description: Repository\n  url: http://github.com/zeruniverse/PasswordManager\ncomponents:\n  securitySchemes:\n    csrf:\n      type: apiKey\n      in: header\n      name: X-CSRF-TOKEN\n  schemas:\n    RegistrationInformation:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/LogonInformation\"\n        - $ref: \"#/components/schemas/UserInformation\"\n    LogonInformation:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n    LogonResult:\n        type: object\n        allOf:\n          - $ref: \"#/components/schemas/GenericSuccessMessage\"\n          - $ref: \"#/components/schemas/LogonSecurityInformation\"\n    DecryptionKey:\n      type: object\n      properties:\n        decryptionKey:\n          type: string\n      required:\n      - decryptionKey\n    LogonSecurityInformation:\n      type: object\n      properties:\n        lastLogin:\n          type: string\n          format: date-time\n          nullable: true\n        failedLogins:\n          type: integer\n    UserInformation:\n      type: object\n      properties:\n        email:\n          type: string\n    UserHistory:\n      type: array\n      items:\n        $ref: \"#/components/schemas/HistoryItem\"\n    HistoryItem:\n      type: object\n      required:\n        - UserAgent\n        - IP\n        - Time\n        - Event\n        - EventResult\n      properties:\n        UserAgent:\n          type: string\n        IP:\n          type: string\n        Time:\n          type: string\n          format: date-time\n        Event:\n          type: string\n          enum:\n            - Login\n            - ChangePassword\n            - Registration\n        EventResult:\n          type: string\n    UserSettings:\n      type: object\n      required:\n        - encryptedUserSettings\n      properties:\n        encryptedUserSettings:\n          type: string\n    UserWebAuthnChallenge:\n      type: object\n      required:\n        - challenge\n      properties:\n        challenge:\n          type: string\n    UserWebAuthnCred:\n      type: object\n      required:\n        - name\n        - id\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n        lastUsed:\n          type: string\n          format: date-time\n    UserWebAuthnCreds:\n      type: array\n      items:\n        $ref: \"#/components/schemas/UserWebAuthnCred\"\n    UserWebAuthnCreate:\n      type: object\n      required:\n        - id\n        - response\n        - name\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        response:\n          $ref: \"#/components/schemas/UserWebAuthnCreateResponse\"\n    UserWebAuthnCreateWithKey:\n      type: object\n      allOf:\n       - $ref: \"#/components/schemas/UserWebAuthnCreate\"\n       - $ref: \"#/components/schemas/DecryptionKey\"\n    UserWebAuthnCreateResponse:\n      type: object\n      required:\n        - attestationObject\n        - clientDataJSON\n        - type\n      properties:\n        attestationObject:\n          type: string\n        clientDataJSON:\n          type: string\n        type:\n          type: string\n    UserWebAuthnGet:\n      type: object\n      required:\n        - id\n        - response\n      properties:\n        id:\n          type: string\n        response:\n          $ref: \"#/components/schemas/UserWebAuthnGetResponse\"\n    UserWebAuthnGetResponse:\n      type: object\n      required:\n        - authenticatorData\n        - clientDataJSON\n        - type\n        - signature\n      properties:\n        authenticatorData:\n          type: string\n        clientDataJSON:\n          type: string\n        type:\n          type: string\n        signature:\n          type: string\n    UserWebAuthnLogonResult:\n      type: object\n      allOf:\n      - $ref: \"#/components/schemas/LogonResult\"\n      - $ref: \"#/components/schemas/DecryptionKey\"\n    ChangePassword:\n      type: object\n      required:\n        - oldPassword\n        - newPassword\n        - accounts\n      properties:\n        oldPassword:\n          type: string\n        newPassword:\n          type: string\n        accounts:\n          $ref: \"#/components/schemas/Accounts\"\n    AccountId:\n      allOf:\n        - $ref: \"#/components/schemas/Index\"\n        - $ref: \"#/components/schemas/Account\"\n    Account:\n      type: object\n      required:\n        - name\n        - additional\n        - password\n      properties:\n        name:\n          type: string\n        additional:\n          type: string\n        password:\n          type: string\n    Accounts:\n      type: array\n      items:\n        $ref: \"#/components/schemas/AccountId\"\n    NewAccounts:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Account\"\n    Index:\n      type: object\n      required:\n        - index\n      properties:\n        index:\n          type: integer\n    File:\n      type: object\n      required:\n        - index\n        - name\n        - key\n      properties:\n        index:\n          type: integer\n        name:\n          type: string\n        key:\n          type: string\n    Files:\n      type: array\n      items:\n        $ref: \"#/components/schemas/File\"\n    ServerInformation:\n      type: object\n      required:\n        - csrfToken\n      properties:\n        csrfToken:\n          type: string\n        allowRegistration:\n          type: boolean\n        idleTimeout:\n          type: integer\n        defaultUserConfiguration:\n          type: string\n        webAuthNChallenge:\n          type: string\n    GenericSuccessMessage:\n      type: object\n      required:\n        - success\n        - message\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/BenjaminHae/modern-password-manager@d92a4b0a46f9a39d18283068a447fab47261ecae/-/blob/OpenAPIDescription.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/BenjaminHae/modern-password-manager/blob/d92a4b0a46f9a39d18283068a447fab47261ecae/OpenAPIDescription.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/user/login/webauthn\": post: responses: 200: contents: application/json: generate schema: allOf: schema type mismatch:  and object"
}