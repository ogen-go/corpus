{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amazonaws.com/appmesh/2018-10-01/openapi.yaml",
			"byteSize": 100340,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2018-10-01'\n  x-release: v4\n  title: AWS App Mesh\n  description: |-\n    \u003cp\u003eAWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and\n             control containerized microservices. App Mesh standardizes how your microservices\n             communicate, giving you end-to-end visibility and helping to ensure high-availability for\n             your applications.\u003c/p\u003e\n             \u003cp\u003eApp Mesh gives you consistent visibility and network traffic controls for every\n             microservice in an application. You can use App Mesh with Amazon ECS\n             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.\u003c/p\u003e\n             \u003cnote\u003e\n                \u003cp\u003eApp Mesh supports containerized microservice applications that use service discovery\n                naming for their components. To use App Mesh, you must have a containerized application\n                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For\n                more information about service discovery on Amazon ECS, see \u003ca href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\"\u003eService Discovery\u003c/a\u003e in the\n                   \u003ci\u003eAmazon Elastic Container Service Developer Guide\u003c/i\u003e. Kubernetes \u003ccode\u003ekube-dns\u003c/code\u003e is supported.\n                For more information, see \u003ca href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\"\u003eDNS\n                   for Services and Pods\u003c/a\u003e in the Kubernetes documentation.\u003c/p\u003e\n             \u003c/note\u003e\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: appmesh\n  x-aws-signingName: appmesh\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2018-10-01.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: false\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/appmesh/'\nservers:\n  - url: 'http://appmesh.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS App Mesh multi-region endpoint\n  - url: 'https://appmesh.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The AWS App Mesh multi-region endpoint\n  - url: 'http://appmesh.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://appmesh.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)\npaths:\n  /meshes:\n    put:\n      operationId: CreateMesh\n      description: |-\n        \u003cp\u003eCreates a new service mesh. A service mesh is a logical boundary for network traffic\n                 between the services that reside within it.\u003c/p\u003e\n                 \u003cp\u003eAfter you create your service mesh, you can create virtual nodes, virtual routers, and\n                 routes to distribute traffic between the applications in your mesh.\u003c/p\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateMeshOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - meshName\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                meshName:\n                  description: The name to use for the service mesh.\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListMeshes\n      description: Returns a list of existing service meshes.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListMeshesOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          description: |-\n            The maximum number of mesh results returned by \u003ccode\u003eListMeshes\u003c/code\u003e in paginated\n                     output. When this parameter is used, \u003ccode\u003eListMeshes\u003c/code\u003e only returns\n                        \u003ccode\u003elimit\u003c/code\u003e results in a single page along with a \u003ccode\u003enextToken\u003c/code\u003e response\n                     element. The remaining results of the initial request can be seen by sending another\n                        \u003ccode\u003eListMeshes\u003c/code\u003e request with the returned \u003ccode\u003enextToken\u003c/code\u003e value. This\n                     value can be between 1 and 100. If this parameter is not\n                     used, then \u003ccode\u003eListMeshes\u003c/code\u003e returns up to 100 results and a\n                        \u003ccode\u003enextToken\u003c/code\u003e value if applicable.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: nextToken\n          in: query\n          required: false\n          description: |-\n            \u003cp\u003eThe \u003ccode\u003enextToken\u003c/code\u003e value returned from a previous paginated\n                     \u003ccode\u003eListMeshes\u003c/code\u003e request where \u003ccode\u003elimit\u003c/code\u003e was used and the\n                     results exceeded the value of that parameter. Pagination continues from the end of the\n                     previous results that returned the \u003ccode\u003enextToken\u003c/code\u003e value.\u003c/p\u003e\n                     \u003cnote\u003e\n                        \u003cp\u003eThis token should be treated as an opaque identifier that is only used to\n                            retrieve the next items in a list and not for other programmatic purposes.\u003c/p\u003e\n                    \u003c/note\u003e\n          schema:\n            type: string\n  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':\n    put:\n      operationId: CreateRoute\n      description: |-\n        \u003cp\u003eCreates a new route that is associated with a virtual router.\u003c/p\u003e\n                 \u003cp\u003eYou can use the \u003ccode\u003eprefix\u003c/code\u003e parameter in your route specification for path-based\n                 routing of requests. For example, if your virtual router service name is\n                    \u003ccode\u003emy-service.local\u003c/code\u003e, and you want the route to match requests to\n                    \u003ccode\u003emy-service.local/metrics\u003c/code\u003e, then your prefix should be\n                 \u003ccode\u003e/metrics\u003c/code\u003e.\u003c/p\u003e\n                 \u003cp\u003eIf your route matches a request, you can distribute traffic to one or more target\n                 virtual nodes with relative weighting.\u003c/p\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateRouteOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to create the route.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router in which to create the route.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - routeName\n                - spec\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                routeName:\n                  description: The name to use for the route.\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n                spec:\n                  description: An object representing the specification of a route.\n                  type: object\n                  properties:\n                    httpRoute:\n                      allOf:\n                        - $ref: '#/components/schemas/HttpRoute'\n                        - description: The HTTP routing information for the route.\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListRoutes\n      description: Returns a list of existing routes in a service mesh.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListRoutesOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          description: |-\n            The maximum number of mesh results returned by \u003ccode\u003eListRoutes\u003c/code\u003e in paginated\n                     output. When this parameter is used, \u003ccode\u003eListRoutes\u003c/code\u003e only returns\n                        \u003ccode\u003elimit\u003c/code\u003e results in a single page along with a \u003ccode\u003enextToken\u003c/code\u003e response\n                     element. The remaining results of the initial request can be seen by sending another\n                        \u003ccode\u003eListRoutes\u003c/code\u003e request with the returned \u003ccode\u003enextToken\u003c/code\u003e value. This\n                     value can be between 1 and 100. If this parameter is not\n                     used, then \u003ccode\u003eListRoutes\u003c/code\u003e returns up to 100 results and a\n                        \u003ccode\u003enextToken\u003c/code\u003e value if applicable.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to list routes.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: nextToken\n          in: query\n          required: false\n          description: |-\n            The \u003ccode\u003enextToken\u003c/code\u003e value returned from a previous paginated\n                     \u003ccode\u003eListRoutes\u003c/code\u003e request where \u003ccode\u003elimit\u003c/code\u003e was used and the\n                     results exceeded the value of that parameter. Pagination continues from the end of the\n                     previous results that returned the \u003ccode\u003enextToken\u003c/code\u003e value.\n          schema:\n            type: string\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router in which to list routes.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n  '/meshes/{meshName}/virtualNodes':\n    put:\n      operationId: CreateVirtualNode\n      description: |-\n        \u003cp\u003eCreates a new virtual node within a service mesh.\u003c/p\u003e\n                 \u003cp\u003eA virtual node acts as logical pointer to a particular task group, such as an Amazon ECS\n                 service or a Kubernetes deployment. When you create a virtual node, you must specify the\n                 DNS service discovery name for your task group.\u003c/p\u003e\n                 \u003cp\u003eAny inbound traffic that your virtual node expects should be specified as a\n                    \u003ccode\u003elistener\u003c/code\u003e. Any outbound traffic that your virtual node expects to reach\n                 should be specified as a \u003ccode\u003ebackend\u003c/code\u003e.\u003c/p\u003e\n                 \u003cp\u003eThe response metadata for your new virtual node contains the \u003ccode\u003earn\u003c/code\u003e that is\n                 associated with the virtual node. Set this value (either the full ARN or the truncated\n                 resource name, for example, \u003ccode\u003emesh/default/virtualNode/simpleapp\u003c/code\u003e, as the\n                    \u003ccode\u003eAPPMESH_VIRTUAL_NODE_NAME\u003c/code\u003e environment variable for your task group's Envoy\n                 proxy container in your task definition or pod spec. This is then mapped to the\n                    \u003ccode\u003enode.id\u003c/code\u003e and \u003ccode\u003enode.cluster\u003c/code\u003e Envoy parameters.\u003c/p\u003e\n                 \u003cnote\u003e\n                    \u003cp\u003eIf you require your Envoy stats or tracing to use a different name, you can override\n                    the \u003ccode\u003enode.cluster\u003c/code\u003e value that is set by\n                       \u003ccode\u003eAPPMESH_VIRTUAL_NODE_NAME\u003c/code\u003e with the\n                       \u003ccode\u003eAPPMESH_VIRTUAL_NODE_CLUSTER\u003c/code\u003e environment variable.\u003c/p\u003e\n                 \u003c/note\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateVirtualNodeOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to create the virtual node.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - spec\n                - virtualNodeName\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                spec:\n                  description: An object representing the specification of a virtual node.\n                  type: object\n                  properties:\n                    backends:\n                      allOf:\n                        - $ref: '#/components/schemas/Backends'\n                        - description: The backends to which the virtual node is expected to send outbound traffic.\n                    listeners:\n                      allOf:\n                        - $ref: '#/components/schemas/Listeners'\n                        - description: The listeners from which the virtual node is expected to receive inbound traffic.\n                    serviceDiscovery:\n                      allOf:\n                        - $ref: '#/components/schemas/ServiceDiscovery'\n                        - description: The service discovery information for the virtual node.\n                virtualNodeName:\n                  description: The name to use for the virtual node.\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListVirtualNodes\n      description: Returns a list of existing virtual nodes.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListVirtualNodesOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          description: |-\n            The maximum number of mesh results returned by \u003ccode\u003eListVirtualNodes\u003c/code\u003e in\n                     paginated output. When this parameter is used, \u003ccode\u003eListVirtualNodes\u003c/code\u003e only returns\n                     \u003ccode\u003elimit\u003c/code\u003e results in a single page along with a \u003ccode\u003enextToken\u003c/code\u003e\n                     response element. The remaining results of the initial request can be seen by sending\n                     another \u003ccode\u003eListVirtualNodes\u003c/code\u003e request with the returned \u003ccode\u003enextToken\u003c/code\u003e\n                     value. This value can be between 1 and 100. If this\n                     parameter is not used, then \u003ccode\u003eListVirtualNodes\u003c/code\u003e returns up to\n                     100 results and a \u003ccode\u003enextToken\u003c/code\u003e value if applicable.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to list virtual nodes.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: nextToken\n          in: query\n          required: false\n          description: |-\n            The \u003ccode\u003enextToken\u003c/code\u003e value returned from a previous paginated\n                     \u003ccode\u003eListVirtualNodes\u003c/code\u003e request where \u003ccode\u003elimit\u003c/code\u003e was used and the\n                     results exceeded the value of that parameter. Pagination continues from the end of the\n                     previous results that returned the \u003ccode\u003enextToken\u003c/code\u003e value.\n          schema:\n            type: string\n  '/meshes/{meshName}/virtualRouters':\n    put:\n      operationId: CreateVirtualRouter\n      description: |-\n        \u003cp\u003eCreates a new virtual router within a service mesh.\u003c/p\u003e\n                 \u003cp\u003eVirtual routers handle traffic for one or more service names within your mesh. After you\n                 create your virtual router, create and associate routes for your virtual router that direct\n                 incoming requests to different virtual nodes.\u003c/p\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateVirtualRouterOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to create the virtual router.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - spec\n                - virtualRouterName\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                spec:\n                  description: An object representing the specification of a virtual router.\n                  type: object\n                  properties:\n                    serviceNames:\n                      allOf:\n                        - $ref: '#/components/schemas/ServiceNames'\n                        - description: The service mesh service names to associate with the virtual router.\n                virtualRouterName:\n                  description: The name to use for the virtual router.\n                  type: string\n                  minLength: 1\n                  maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: ListVirtualRouters\n      description: Returns a list of existing virtual routers in a service mesh.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListVirtualRoutersOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: limit\n          in: query\n          required: false\n          description: |-\n            The maximum number of mesh results returned by \u003ccode\u003eListVirtualRouters\u003c/code\u003e in\n                     paginated output. When this parameter is used, \u003ccode\u003eListVirtualRouters\u003c/code\u003e only returns\n                     \u003ccode\u003elimit\u003c/code\u003e results in a single page along with a \u003ccode\u003enextToken\u003c/code\u003e\n                     response element. The remaining results of the initial request can be seen by sending\n                     another \u003ccode\u003eListVirtualRouters\u003c/code\u003e request with the returned \u003ccode\u003enextToken\u003c/code\u003e\n                     value. This value can be between 1 and 100. If this\n                     parameter is not used, then \u003ccode\u003eListVirtualRouters\u003c/code\u003e returns up to\n                     100 results and a \u003ccode\u003enextToken\u003c/code\u003e value if applicable.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to list virtual routers.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: nextToken\n          in: query\n          required: false\n          description: |-\n            The \u003ccode\u003enextToken\u003c/code\u003e value returned from a previous paginated\n                     \u003ccode\u003eListVirtualRouters\u003c/code\u003e request where \u003ccode\u003elimit\u003c/code\u003e was used and the\n                     results exceeded the value of that parameter. Pagination continues from the end of the\n                     previous results that returned the \u003ccode\u003enextToken\u003c/code\u003e value.\n          schema:\n            type: string\n  '/meshes/{meshName}':\n    delete:\n      operationId: DeleteMesh\n      description: |-\n        \u003cp\u003eDeletes an existing service mesh.\u003c/p\u003e\n                 \u003cp\u003eYou must delete all resources (routes, virtual routers, virtual nodes) in the service\n                 mesh before you can delete the mesh itself.\u003c/p\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteMeshOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ResourceInUseException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceInUseException'\n        '485':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '486':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh to delete.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: DescribeMesh\n      description: Describes an existing service mesh.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeMeshOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh to describe.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n  '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':\n    delete:\n      operationId: DeleteRoute\n      description: Deletes an existing route.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteRouteOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ResourceInUseException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceInUseException'\n        '485':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '486':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to delete the route.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: routeName\n          in: path\n          required: true\n          description: The name of the route to delete.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router in which to delete the route.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: DescribeRoute\n      description: Describes an existing route.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeRouteOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the route resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: routeName\n          in: path\n          required: true\n          description: The name of the route to describe.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router with which the route is associated.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    put:\n      operationId: UpdateRoute\n      description: Updates an existing route for a specified service mesh and virtual router.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateRouteOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the route resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: routeName\n          in: path\n          required: true\n          description: The name of the route to update.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router with which the route is associated.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - spec\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                spec:\n                  description: An object representing the specification of a route.\n                  type: object\n                  properties:\n                    httpRoute:\n                      allOf:\n                        - $ref: '#/components/schemas/HttpRoute'\n                        - description: The HTTP routing information for the route.\n  '/meshes/{meshName}/virtualNodes/{virtualNodeName}':\n    delete:\n      operationId: DeleteVirtualNode\n      description: Deletes an existing virtual node.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteVirtualNodeOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ResourceInUseException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceInUseException'\n        '485':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '486':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to delete the virtual node.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualNodeName\n          in: path\n          required: true\n          description: The name of the virtual node to delete.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: DescribeVirtualNode\n      description: Describes an existing virtual node.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeVirtualNodeOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the virtual node resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualNodeName\n          in: path\n          required: true\n          description: The name of the virtual node to describe.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    put:\n      operationId: UpdateVirtualNode\n      description: Updates an existing virtual node in a specified service mesh.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateVirtualNodeOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the virtual node resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualNodeName\n          in: path\n          required: true\n          description: The name of the virtual node to update.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - spec\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                spec:\n                  description: An object representing the specification of a virtual node.\n                  type: object\n                  properties:\n                    backends:\n                      allOf:\n                        - $ref: '#/components/schemas/Backends'\n                        - description: The backends to which the virtual node is expected to send outbound traffic.\n                    listeners:\n                      allOf:\n                        - $ref: '#/components/schemas/Listeners'\n                        - description: The listeners from which the virtual node is expected to receive inbound traffic.\n                    serviceDiscovery:\n                      allOf:\n                        - $ref: '#/components/schemas/ServiceDiscovery'\n                        - description: The service discovery information for the virtual node.\n  '/meshes/{meshName}/virtualRouters/{virtualRouterName}':\n    delete:\n      operationId: DeleteVirtualRouter\n      description: |-\n        \u003cp\u003eDeletes an existing virtual router.\u003c/p\u003e\n                 \u003cp\u003eYou must delete any routes associated with the virtual router before you can delete the\n                 router itself.\u003c/p\u003e\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteVirtualRouterOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ResourceInUseException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceInUseException'\n        '485':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '486':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which to delete the virtual router.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router to delete.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: DescribeVirtualRouter\n      description: Describes an existing virtual router.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeVirtualRouterOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '482':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '483':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '484':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '485':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the virtual router resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router to describe.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n    put:\n      operationId: UpdateVirtualRouter\n      description: Updates an existing virtual router in a specified service mesh.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateVirtualRouterOutput'\n        '480':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '481':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '482':\n          description: ForbiddenException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ForbiddenException'\n        '483':\n          description: InternalServerErrorException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerErrorException'\n        '484':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '485':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '486':\n          description: ServiceUnavailableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUnavailableException'\n        '487':\n          description: TooManyRequestsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyRequestsException'\n      parameters:\n        - name: meshName\n          in: path\n          required: true\n          description: The name of the service mesh in which the virtual router resides.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n        - name: virtualRouterName\n          in: path\n          required: true\n          description: The name of the virtual router to update.\n          schema:\n            type: string\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - spec\n              properties:\n                clientToken:\n                  description: |-\n                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n                  type: string\n                spec:\n                  description: An object representing the specification of a virtual router.\n                  type: object\n                  properties:\n                    serviceNames:\n                      allOf:\n                        - $ref: '#/components/schemas/ServiceNames'\n                        - description: The service mesh service names to associate with the virtual router.\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    CreateMeshOutput:\n      type: object\n      properties:\n        mesh:\n          allOf:\n            - $ref: '#/components/schemas/MeshData'\n            - description: The full description of your service mesh following the create call.\n      description: ''\n    BadRequestException: {}\n    ConflictException: {}\n    ForbiddenException: {}\n    InternalServerErrorException: {}\n    LimitExceededException: {}\n    NotFoundException: {}\n    ServiceUnavailableException: {}\n    TooManyRequestsException: {}\n    CreateRouteOutput:\n      type: object\n      properties:\n        route:\n          allOf:\n            - $ref: '#/components/schemas/RouteData'\n            - description: The full description of your mesh following the create call.\n      description: ''\n    HttpRoute:\n      type: object\n      properties:\n        action:\n          allOf:\n            - $ref: '#/components/schemas/HttpRouteAction'\n            - description: The action to take if a match is determined.\n        match:\n          allOf:\n            - $ref: '#/components/schemas/HttpRouteMatch'\n            - description: The criteria for determining an HTTP request match.\n      description: An object representing the HTTP routing specification for a route.\n    CreateVirtualNodeOutput:\n      type: object\n      properties:\n        virtualNode:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeData'\n            - description: The full description of your virtual node following the create call.\n      description: ''\n    Backends:\n      type: array\n      items:\n        $ref: '#/components/schemas/ServiceName'\n    Listeners:\n      type: array\n      items:\n        $ref: '#/components/schemas/Listener'\n    ServiceDiscovery:\n      type: object\n      properties:\n        dns:\n          allOf:\n            - $ref: '#/components/schemas/DnsServiceDiscovery'\n            - description: Specifies the DNS service name for the virtual node.\n      description: An object representing the service discovery information for a virtual node.\n    CreateVirtualRouterOutput:\n      type: object\n      properties:\n        virtualRouter:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterData'\n            - description: The full description of your virtual router following the create call.\n      description: ''\n    ServiceNames:\n      type: array\n      items:\n        $ref: '#/components/schemas/ServiceName'\n      maxItems: 10\n    DeleteMeshOutput:\n      type: object\n      properties:\n        mesh:\n          allOf:\n            - $ref: '#/components/schemas/MeshData'\n            - description: The service mesh that was deleted.\n      description: ''\n    ResourceInUseException: {}\n    DeleteRouteOutput:\n      type: object\n      properties:\n        route:\n          allOf:\n            - $ref: '#/components/schemas/RouteData'\n            - description: The route that was deleted.\n      description: ''\n    DeleteVirtualNodeOutput:\n      type: object\n      properties:\n        virtualNode:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeData'\n            - description: The virtual node that was deleted.\n      description: ''\n    DeleteVirtualRouterOutput:\n      type: object\n      properties:\n        virtualRouter:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterData'\n            - description: The virtual router that was deleted.\n      description: ''\n    DescribeMeshOutput:\n      type: object\n      properties:\n        mesh:\n          allOf:\n            - $ref: '#/components/schemas/MeshData'\n            - description: The full description of your service mesh.\n      description: ''\n    DescribeRouteOutput:\n      type: object\n      properties:\n        route:\n          allOf:\n            - $ref: '#/components/schemas/RouteData'\n            - description: The full description of your route.\n      description: ''\n    DescribeVirtualNodeOutput:\n      type: object\n      properties:\n        virtualNode:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeData'\n            - description: The full description of your virtual node.\n      description: ''\n    DescribeVirtualRouterOutput:\n      type: object\n      properties:\n        virtualRouter:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterData'\n            - description: The full description of your virtual router.\n      description: ''\n    ListMeshesOutput:\n      type: object\n      required:\n        - meshes\n      properties:\n        meshes:\n          allOf:\n            - $ref: '#/components/schemas/MeshList'\n            - description: The list of existing service meshes.\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                The \u003ccode\u003enextToken\u003c/code\u003e value to include in a future \u003ccode\u003eListMeshes\u003c/code\u003e\n                         request. When the results of a \u003ccode\u003eListMeshes\u003c/code\u003e request exceed\n                         \u003ccode\u003elimit\u003c/code\u003e, this value can be used to retrieve the next page of\n                         results. This value is \u003ccode\u003enull\u003c/code\u003e when there are no more results to\n                         return.\n      description: ''\n    ListRoutesOutput:\n      type: object\n      required:\n        - routes\n      properties:\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                The \u003ccode\u003enextToken\u003c/code\u003e value to include in a future \u003ccode\u003eListRoutes\u003c/code\u003e\n                         request. When the results of a \u003ccode\u003eListRoutes\u003c/code\u003e request exceed\n                         \u003ccode\u003elimit\u003c/code\u003e, this value can be used to retrieve the next page of\n                         results. This value is \u003ccode\u003enull\u003c/code\u003e when there are no more results to\n                         return.\n        routes:\n          allOf:\n            - $ref: '#/components/schemas/RouteList'\n            - description: The list of existing routes for the specified service mesh and virtual router.\n      description: ''\n    ListVirtualNodesOutput:\n      type: object\n      required:\n        - virtualNodes\n      properties:\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                The \u003ccode\u003enextToken\u003c/code\u003e value to include in a future \u003ccode\u003eListVirtualNodes\u003c/code\u003e\n                         request. When the results of a \u003ccode\u003eListVirtualNodes\u003c/code\u003e request exceed\n                         \u003ccode\u003elimit\u003c/code\u003e, this value can be used to retrieve the next page of\n                         results. This value is \u003ccode\u003enull\u003c/code\u003e when there are no more results to\n                         return.\n        virtualNodes:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeList'\n            - description: The list of existing virtual nodes for the specified service mesh.\n      description: ''\n    ListVirtualRoutersOutput:\n      type: object\n      required:\n        - virtualRouters\n      properties:\n        nextToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                The \u003ccode\u003enextToken\u003c/code\u003e value to include in a future \u003ccode\u003eListVirtualRouters\u003c/code\u003e\n                         request. When the results of a \u003ccode\u003eListVirtualRouters\u003c/code\u003e request exceed\n                         \u003ccode\u003elimit\u003c/code\u003e, this value can be used to retrieve the next page of\n                         results. This value is \u003ccode\u003enull\u003c/code\u003e when there are no more results to\n                         return.\n        virtualRouters:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterList'\n            - description: The list of existing virtual routers for the specified service mesh.\n      description: ''\n    UpdateRouteOutput:\n      type: object\n      properties:\n        route:\n          allOf:\n            - $ref: '#/components/schemas/RouteData'\n            - description: A full description of the route that was updated.\n      description: ''\n    UpdateVirtualNodeOutput:\n      type: object\n      properties:\n        virtualNode:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeData'\n            - description: A full description of the virtual node that was updated.\n      description: ''\n    UpdateVirtualRouterOutput:\n      type: object\n      properties:\n        virtualRouter:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterData'\n            - description: A full description of the virtual router that was updated.\n      description: ''\n    ServiceName:\n      type: string\n    HealthCheckThreshold:\n      type: integer\n      minimum: 2\n      maximum: 10\n    MeshData:\n      type: object\n      required:\n        - meshName\n        - metadata\n      properties:\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh.\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/ResourceMetadata'\n            - description: The associated metadata for the service mesh.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/MeshStatus'\n            - description: The status of the service mesh.\n      description: An object representing a service mesh returned by a describe operation.\n    Long:\n      type: integer\n    VirtualRouterData:\n      type: object\n      required:\n        - meshName\n        - virtualRouterName\n      properties:\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the virtual router resides.\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/ResourceMetadata'\n            - description: The associated metadata for the virtual router.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterSpec'\n            - description: The specifications of the virtual router.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterStatus'\n            - description: The current status of the virtual router.\n        virtualRouterName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the virtual router.\n      description: An object representing a virtual router returned by a describe operation.\n    MeshStatusCode:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n        - INACTIVE\n    PortNumber:\n      type: integer\n      minimum: 1\n      maximum: 65535\n    ResourceName:\n      type: string\n      minLength: 1\n      maxLength: 255\n    PercentInt:\n      type: integer\n      minimum: 0\n      maximum: 100\n    WeightedTarget:\n      type: object\n      properties:\n        virtualNode:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The virtual node to associate with the weighted target.\n        weight:\n          allOf:\n            - $ref: '#/components/schemas/PercentInt'\n            - description: The relative weight of the weighted target.\n      description: |-\n        An object representing a target and its relative weight. Traffic is distributed across\n                 targets according to their relative weight. For example, a weighted target with a relative\n                 weight of 50 receives five times as much traffic as one with a relative weight of\n                 10.\n    VirtualNodeRef:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The full Amazon Resource Name (ARN) for the virtual node.\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the virtual node resides.\n        virtualNodeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the virtual node.\n      description: An object representing a virtual node returned by a list operation.\n    VirtualNodeList:\n      type: array\n      items:\n        $ref: '#/components/schemas/VirtualNodeRef'\n    RouteData:\n      type: object\n      required:\n        - meshName\n        - routeName\n        - virtualRouterName\n      properties:\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the route resides.\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/ResourceMetadata'\n            - description: The associated metadata for the route.\n        routeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the route.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/RouteSpec'\n            - description: The specifications of the route.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/RouteStatus'\n            - description: The status of the route.\n        virtualRouterName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The virtual router with which the route is associated.\n      description: An object representing a route returned by a describe operation.\n    RouteRef:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The full Amazon Resource Name (ARN) for the route.\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the route resides.\n        routeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the route.\n        virtualRouterName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The virtual router with which the route is associated.\n      description: An object representing a route returned by a list operation.\n    RouteList:\n      type: array\n      items:\n        $ref: '#/components/schemas/RouteRef'\n    DeleteVirtualNodeInput:\n      type: object\n      title: DeleteVirtualNodeInput\n      properties: {}\n      description: ''\n    ListVirtualRoutersLimit:\n      type: integer\n      minimum: 1\n      maximum: 100\n    DnsServiceDiscovery:\n      type: object\n      properties:\n        serviceName:\n          allOf:\n            - $ref: '#/components/schemas/ServiceName'\n            - description: The DNS service name for your virtual node.\n      description: The DNS service discovery information for your virtual node.\n    HealthCheckIntervalMillis:\n      type: integer\n      minimum: 5000\n      maximum: 300000\n    Arn:\n      type: string\n    MeshStatus:\n      type: object\n      properties:\n        status:\n          allOf:\n            - $ref: '#/components/schemas/MeshStatusCode'\n            - description: The current mesh status.\n      description: An object representing the status of a service mesh.\n    ResourceMetadata:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: |-\n                \u003cp\u003eThe full Amazon Resource Name (ARN) for the resource.\u003c/p\u003e\n                         \u003cnote\u003e\n                            \u003cp\u003eAfter you create a virtual node, set this value (either the full ARN or the\n                            truncated resource name, for example, \u003ccode\u003emesh/default/virtualNode/simpleapp\u003c/code\u003e,\n                            as the \u003ccode\u003eAPPMESH_VIRTUAL_NODE_NAME\u003c/code\u003e environment variable for your task group's\n                            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n                               \u003ccode\u003enode.id\u003c/code\u003e and \u003ccode\u003enode.cluster\u003c/code\u003e Envoy parameters.\u003c/p\u003e\n                            \u003cp\u003eIf you require your Envoy stats or tracing to use a different name, you can override\n                            the \u003ccode\u003enode.cluster\u003c/code\u003e value that is set by\n                               \u003ccode\u003eAPPMESH_VIRTUAL_NODE_NAME\u003c/code\u003e with the\n                               \u003ccode\u003eAPPMESH_VIRTUAL_NODE_CLUSTER\u003c/code\u003e environment variable.\u003c/p\u003e\n                         \u003c/note\u003e\n        createdAt:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: The Unix epoch timestamp in seconds for when the resource was created.\n        lastUpdatedAt:\n          allOf:\n            - $ref: '#/components/schemas/Timestamp'\n            - description: The Unix epoch timestamp in seconds for when the resource was last updated.\n        uid:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The unique identifier for the resource.\n        version:\n          allOf:\n            - $ref: '#/components/schemas/Long'\n            - description: |-\n                The version of the resource. Resources are created at version 1, and this version is\n                         incremented each time they are updated.\n      description: An object representing metadata for a resource.\n    VirtualNodeSpec:\n      type: object\n      properties:\n        backends:\n          allOf:\n            - $ref: '#/components/schemas/Backends'\n            - description: The backends to which the virtual node is expected to send outbound traffic.\n        listeners:\n          allOf:\n            - $ref: '#/components/schemas/Listeners'\n            - description: The listeners from which the virtual node is expected to receive inbound traffic.\n        serviceDiscovery:\n          allOf:\n            - $ref: '#/components/schemas/ServiceDiscovery'\n            - description: The service discovery information for the virtual node.\n      description: An object representing the specification of a virtual node.\n    VirtualNodeStatus:\n      type: object\n      properties:\n        status:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeStatusCode'\n            - description: The current status of the virtual node.\n      description: An object representing the current status of the virtual node.\n    VirtualNodeData:\n      type: object\n      required:\n        - meshName\n        - virtualNodeName\n      properties:\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the virtual node resides.\n        metadata:\n          allOf:\n            - $ref: '#/components/schemas/ResourceMetadata'\n            - description: The associated metadata for the virtual node.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeSpec'\n            - description: The specifications of the virtual node.\n        status:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeStatus'\n            - description: The current status for the virtual node.\n        virtualNodeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the virtual node.\n      description: An object representing a virtual node returned by a describe operation.\n    MeshRef:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The full Amazon Resource Name (ARN) of the service mesh.\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh.\n      description: An object representing a service mesh returned by a list operation.\n    DescribeVirtualRouterInput:\n      type: object\n      title: DescribeVirtualRouterInput\n      properties: {}\n      description: ''\n    WeightedTargets:\n      type: array\n      items:\n        $ref: '#/components/schemas/WeightedTarget'\n    HttpRouteAction:\n      type: object\n      properties:\n        weightedTargets:\n          allOf:\n            - $ref: '#/components/schemas/WeightedTargets'\n            - description: |-\n                The targets that traffic is routed to when a request matches the route. You can specify\n                         one or more targets and their relative weights with which to distribute traffic.\n      description: |-\n        An object representing the traffic distribution requirements for matched HTTP\n                 requests.\n    HealthCheckTimeoutMillis:\n      type: integer\n      minimum: 2000\n      maximum: 60000\n    String:\n      type: string\n    VirtualRouterSpec:\n      type: object\n      properties:\n        serviceNames:\n          allOf:\n            - $ref: '#/components/schemas/ServiceNames'\n            - description: The service mesh service names to associate with the virtual router.\n      description: An object representing the specification of a virtual router.\n    CreateVirtualRouterInput:\n      type: object\n      required:\n        - spec\n        - virtualRouterName\n      title: CreateVirtualRouterInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterSpec'\n            - description: The virtual router specification to apply.\n        virtualRouterName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name to use for the virtual router.\n      description: ''\n    RouteStatusCode:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n        - INACTIVE\n    RouteStatus:\n      type: object\n      properties:\n        status:\n          allOf:\n            - $ref: '#/components/schemas/RouteStatusCode'\n            - description: The current status for the route.\n      description: An object representing the current status of a route.\n    ListMeshesLimit:\n      type: integer\n      minimum: 1\n      maximum: 100\n    ListMeshesInput:\n      type: object\n      title: ListMeshesInput\n      properties: {}\n      description: ''\n    VirtualRouterStatusCode:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n        - INACTIVE\n    VirtualRouterStatus:\n      type: object\n      properties:\n        status:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterStatusCode'\n            - description: The current status of the virtual router.\n      description: 'An object representing the status of a virtual router. '\n    MeshList:\n      type: array\n      items:\n        $ref: '#/components/schemas/MeshRef'\n    RouteSpec:\n      type: object\n      properties:\n        httpRoute:\n          allOf:\n            - $ref: '#/components/schemas/HttpRoute'\n            - description: The HTTP routing information for the route.\n      description: An object representing the specification of a route.\n    UpdateVirtualNodeInput:\n      type: object\n      required:\n        - spec\n      title: UpdateVirtualNodeInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeSpec'\n            - description: The new virtual node specification to apply. This overwrites the existing data.\n      description: ''\n    DeleteRouteInput:\n      type: object\n      title: DeleteRouteInput\n      properties: {}\n      description: ''\n    Listener:\n      type: object\n      properties:\n        healthCheck:\n          allOf:\n            - $ref: '#/components/schemas/HealthCheckPolicy'\n            - description: The health check information for the listener.\n        portMapping:\n          allOf:\n            - $ref: '#/components/schemas/PortMapping'\n            - description: The port mapping information for the listener.\n      description: An object representing a listener for a virtual node.\n    ListRoutesLimit:\n      type: integer\n      minimum: 1\n      maximum: 100\n    ListRoutesInput:\n      type: object\n      title: ListRoutesInput\n      properties: {}\n      description: ''\n    HttpRouteMatch:\n      type: object\n      properties:\n        prefix:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Specifies the path with which to match requests. This parameter must always start with\n                            \u003ccode\u003e/\u003c/code\u003e, which by itself matches all requests to the virtual router service name.\n                         You can also match for path-based routing of requests. For example, if your virtual router\n                         service name is \u003ccode\u003emy-service.local\u003c/code\u003e, and you want the route to match requests to\n                            \u003ccode\u003emy-service.local/metrics\u003c/code\u003e, then your prefix should be\n                         \u003ccode\u003e/metrics\u003c/code\u003e.\n      description: |-\n        An object representing the requirements for a route to match HTTP requests for a virtual\n                 router.\n    Timestamp:\n      type: string\n      format: date-time\n    DescribeVirtualNodeInput:\n      type: object\n      title: DescribeVirtualNodeInput\n      properties: {}\n      description: ''\n    VirtualRouterRef:\n      type: object\n      properties:\n        arn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: The full Amazon Resource Name (ARN) for the virtual router.\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the service mesh in which the virtual router resides.\n        virtualRouterName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name of the virtual router.\n      description: An object representing a virtual router returned by a list operation.\n    UpdateVirtualRouterInput:\n      type: object\n      required:\n        - spec\n      title: UpdateVirtualRouterInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualRouterSpec'\n            - description: The new virtual router specification to apply. This overwrites the existing data.\n      description: ''\n    DescribeRouteInput:\n      type: object\n      title: DescribeRouteInput\n      properties: {}\n      description: ''\n    VirtualRouterList:\n      type: array\n      items:\n        $ref: '#/components/schemas/VirtualRouterRef'\n    PortProtocol:\n      type: string\n      enum:\n        - http\n        - tcp\n    CreateMeshInput:\n      type: object\n      required:\n        - meshName\n      title: CreateMeshInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        meshName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name to use for the service mesh.\n      description: ''\n    PortMapping:\n      type: object\n      properties:\n        port:\n          allOf:\n            - $ref: '#/components/schemas/PortNumber'\n            - description: The port used for the port mapping.\n        protocol:\n          allOf:\n            - $ref: '#/components/schemas/PortProtocol'\n            - description: The protocol used for the port mapping.\n      description: An object representing a virtual node listener port mapping.\n    VirtualNodeStatusCode:\n      type: string\n      enum:\n        - ACTIVE\n        - DELETED\n        - INACTIVE\n    DeleteVirtualRouterInput:\n      type: object\n      title: DeleteVirtualRouterInput\n      properties: {}\n      description: ''\n    UpdateRouteInput:\n      type: object\n      required:\n        - spec\n      title: UpdateRouteInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/RouteSpec'\n            - description: The new route specification to apply. This overwrites the existing data.\n      description: ''\n    DescribeMeshInput:\n      type: object\n      title: DescribeMeshInput\n      properties: {}\n      description: ''\n    HealthCheckPolicy:\n      type: object\n      required:\n        - healthyThreshold\n        - intervalMillis\n        - protocol\n        - timeoutMillis\n        - unhealthyThreshold\n      properties:\n        healthyThreshold:\n          allOf:\n            - $ref: '#/components/schemas/HealthCheckThreshold'\n            - description: |-\n                The number of consecutive successful health checks that must occur before declaring\n                         listener healthy.\n        intervalMillis:\n          allOf:\n            - $ref: '#/components/schemas/HealthCheckIntervalMillis'\n            - description: The time period in milliseconds between each health check execution.\n        path:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                The destination path for the health check request. This is only required if the\n                         specified protocol is HTTP; if the protocol is TCP, then this parameter is ignored.\n        port:\n          allOf:\n            - $ref: '#/components/schemas/PortNumber'\n            - description: |-\n                The destination port for the health check request. This port must match the port defined\n                         in the \u003ca\u003ePortMapping\u003c/a\u003e for the listener.\n        protocol:\n          allOf:\n            - $ref: '#/components/schemas/PortProtocol'\n            - description: The protocol for the health check request.\n        timeoutMillis:\n          allOf:\n            - $ref: '#/components/schemas/HealthCheckTimeoutMillis'\n            - description: |-\n                The amount of time to wait when receiving a response from the health check, in\n                         milliseconds.\n        unhealthyThreshold:\n          allOf:\n            - $ref: '#/components/schemas/HealthCheckThreshold'\n            - description: |-\n                The number of consecutive failed health checks that must occur before declaring a\n                         virtual node unhealthy. \n      description: An object representing the health check policy for a virtual node's listener.\n    ListVirtualRoutersInput:\n      type: object\n      title: ListVirtualRoutersInput\n      properties: {}\n      description: ''\n    CreateVirtualNodeInput:\n      type: object\n      required:\n        - spec\n        - virtualNodeName\n      title: CreateVirtualNodeInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/VirtualNodeSpec'\n            - description: The virtual node specification to apply.\n        virtualNodeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name to use for the virtual node.\n      description: ''\n    ListVirtualNodesLimit:\n      type: integer\n      minimum: 1\n      maximum: 100\n    DeleteMeshInput:\n      type: object\n      title: DeleteMeshInput\n      properties: {}\n      description: ''\n    CreateRouteInput:\n      type: object\n      required:\n        - routeName\n        - spec\n      title: CreateRouteInput\n      properties:\n        clientToken:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: |-\n                Unique, case-sensitive identifier that you provide to ensure the idempotency of the\n                request. Up to 36 letters, numbers, hyphens, and underscores are allowed.\n        routeName:\n          allOf:\n            - $ref: '#/components/schemas/ResourceName'\n            - description: The name to use for the route.\n        spec:\n          allOf:\n            - $ref: '#/components/schemas/RouteSpec'\n            - description: The route specification to apply.\n      description: ''\n    ListVirtualNodesInput:\n      type: object\n      title: ListVirtualNodesInput\n      properties: {}\n      description: ''\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@cafd364eceab1026372ac69bd0ef670c5fe491bb/-/blob/APIs/amazonaws.com/appmesh/2018-10-01/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/cafd364eceab1026372ac69bd0ef670c5fe491bb/APIs/amazonaws.com/appmesh/2018-10-01/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/meshes/{meshName}/virtualRouters/{virtualRouterName}\": get: responses: 200: contents: application/json: generate schema: field virtualRouter: allOf: schema type mismatch: object and "
}