{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kiwigrid/helm-charts"
		},
		"file": {
			"name": "ditto-api-2.yml",
			"size": 0,
			"path": "charts/ditto-digital-twins/openapi/ditto-api-2.yml",
			"byteSize": 180481,
			"content": "# Copyright (c) 2017 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Eclipse Public License 2.0 which is available at\n# http://www.eclipse.org/legal/epl-2.0\n#\n# SPDX-License-Identifier: EPL-2.0\nopenapi: 3.0.0\ninfo:\n  title: Eclipse Ditto HTTP API\n  description: JSON-based, REST-like API for Eclipse Ditto\n  version: \"2\"\nservers:\n  - url: https://ditto.eclipse.org/api/2\n    description: \"online Ditto Sandbox\"\n  - url: /api/2\n    description: \"local Ditto\"\ntags:\n  - name: Things\n    description: Manage every Thing\n  - name: Features\n    description: Structure the Features of your Things\n  - name: Policies\n    description: Control access to your Things\n  - name: Things-Search\n    description: Find every Thing\n  - name: Messages\n    description: Talk with your Things\nsecurity:\n  #  - Google:\n  #    - openid\n  - basicAuth: []\n  - bearerAuth: []\npaths:\n  ###\n  ### Things\n  ###\n  /things:\n    get:\n      summary: List all available Things\n      description: |-\n        Returns all Things passed in by the required parameter `ids`. Optionally\n        you can use field selectors (see parameter `fields`) to only get the\n        specified fields.\n      tags:\n        - Things\n      parameters:\n        - name: ids\n          in: query\n          description: |-\n            Contains a comma separated list of `thingId`s to retrieve in one\n            single request.\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n      responses:\n        '200':\n          description: |-\n            The successfully completed request contains as its result the first\n            200 for the user available Things, sorted by their `thingId`.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Thing'\n        '400':\n          description: |-\n            The request could not be completed. At least one of the defined\n            query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '414':\n          description: |-\n            The request could not be completed due to an URI length exceeding 8k\n            characters.\n    post:\n      summary: Create a new Thing\n      description: |-\n        Creates the Thing defined in the optional JSON body.\n\n        The ID of the created Thing is a UUID generated by the service with the default namespace `org.eclipse.ditto`.\n        Any `thingId` specified in the request body is\n        therefore ignored. The Policy must include at least one entry with\n        `WRITE` permission on the `policy:/` resource. If no Policy is provided,\n        a default Policy will be created which grants all permissions to the\n        authorized subject on the root thing and policy resource.\n      tags:\n        - Things\n      responses:\n        '201':\n          description: The Thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '400':\n          description: |-\n            The request could not be completed. Possible reasons:\n\n              * the `thingId` was wrongly set in the request body\n              * the JSON of the Thing to be created was invalid\n\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed. Either\n              * as the caller would not have access to the thing after creating it with the given policy.\n              * as the caller had insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed as either:\n              * the referenced thing does not exist.\n              * the caller had insufficient permissions to read the referenced thing.\n              * the Policy that should be copied does not exist.\n              * the caller had insufficient permissions to read the Policy that should be copied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example: {}\n        description: JSON representation of the Thing to be created.\n  '/things/{thingId}':\n    get:\n      summary: Retrieve a specific Thing\n      description: |-\n        Returns the Thing identified by the `thingId` path parameter. The\n        response includes details about the Thing. Note that the Thing's Policy\n        is not included in the response per default. Optionally you can use\n        field selectors (see parameter `fields`) to only get the specified\n        fields. E.g., you can get the Thing's Policy by using a field selector.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned the specific Thing.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a Thing with a specified ID\n      description: |-\n        Create or update the Thing specified by the `thingId` path parameter and\n        the optional JSON body. The `thingId` has to:\n\n          * contain a mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character\n          * conform to RFC-2396 (URI)\n\n        #### Valid examples\n\n          * `com.bosch.myproject:myFridge1`\n          * `mynamespace:myFridge1`\n\n        #### Invalid examples\n\n          * `42:myFridge1`\n          * `.foo:myFridge1`\n          * `bar.:myFridge1`\n\n        The ID of a Thing can't be changed after creation. Any `thingId`\n        specified in the request body is therefore ignored.\n\n        ### Creation of a new Thing\n\n        The Policy must include at least one entry with `WRITE` permission on\n        the `policy:/` resource. If no Policy is provided, a default Policy will\n        be created which grants all permissions to the authorized subject on the\n        root thing and policy resource.\n\n        ### Permissions for updating an existing Thing\n\n        For updating an existing Thing the authorized subject has to have an\n        unrestricted `WRITE` permission on the Thing's root resource.\n\n        ### Partially updating an existing Thing\n\n        When updating an existing Thing already containing `attributes`, `policyId` or `features` the already existing fields\n        must not explicitly be provided again. For this \"PUT Thing\" request (and only for this top-level update on the\n        Thing) the top-level field to update is merged with the existing top-level fields of the Thing.\n\n\n        For example: A Thing already exists with this content:\n\n        ```\n\n        {\n          \"thingId\": \"namespace:thing-name\",\n          \"policyId\": \"namespace:policy-name\",\n          \"attributes\": {\n            \"foo\": 1\n          },\n          \"features\": {...}\n        }\n\n        ```\n\n        The Thing's `attributes` may be modified without having to pass the `policyId` or the `features` in again. The content\n        of the request's body would be sufficient for updating the `attributes`:\n\n        ```\n\n        {\n          \"attributes\": {\n            \"foo\": 2,\n            \"bar\": false\n          }\n        }\n\n        ```\n\n        The `policyId` and `features` of the Thing will not be overwritten, the Thing will be merged as one would expect it:\n\n        ```\n\n        {\n          \"thingId\": \"namespace:thing-name\",\n          \"policyId\": \"namespace:policy-name\",\n          \"attributes\": {\n            \"foo\": 2,\n            \"bar\": false\n          },\n          \"features\": {...}\n        }\n\n        ```\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Thing was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Thing resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thing'\n        '204':\n          description: The Thing was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON of the Thing to be created/modified was either invalid\n            or did contain a `thingId` which did not match the ID in the URL.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed. Either\n              * as the caller would not have access to the thing after creating it with the given policy.\n              * as the caller had insufficient permissions.\n                For modifying an existing Thing an unrestricted `WRITE` permission on the Thing's root resource is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed as either:\n              * the referenced thing does not exist.\n              * the caller had insufficient permissions to read the referenced thing.\n              * the Policy that should be copied does not exist.\n              * the caller had insufficient permissions to read the Policy that should be copied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewThing'\n            example: {}\n        description: JSON representation of the Thing to be modified.\n    delete:\n      summary: Delete a specific Thing\n      description: |-\n        Deletes the Thing identified by the `thingId` path parameter. This will\n        not delete the Policy used for controlling access to this Thing managed\n        by resource `/policies/{policyId}`.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Thing was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting an existing Thing an unrestricted `WRITE` permission on the Thing's root resource is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/policyId':\n    get:\n      summary: Retrieve the Policy ID of a Thing\n      description: |-\n        Returns the Policy ID of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned the Policy ID.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: The request could not be completed. The Thing with the given ID was not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update the Policy ID of a Thing\n      description: |-\n        Create or update the Policy ID of the Thing identified by the `thingId`\n        path parameter. If the Thing had not yet a `policyId` set it was\n        considered to be in API version 1, access controlled by the `acl`\n        mechanism. In that case PUTing a `policyId` will create the Policy ID.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: |-\n            The Policy ID was successfully created - the Thing was migrated to API version 2.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: string\n        '204':\n          description: The Policy ID was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '\u003cnamespace\u003e:\u003cpolicyName\u003e'\n        description: |-\n          The Policy ID used for controlling access to this Thing. Managed by\n          resource `/policies/{policyId}`.\n\n            * contain the mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character\n            * conform to RFC-2396 (URI)\n        required: true\n  '/things/{thingId}/attributes':\n    get:\n      summary: List all Attributes of a specific Thing\n      description: |-\n        Returns all Attributes of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributesFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Attributes of the specific Thing were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update all Attributes of a specific Thing at once\n      description: |-\n        Create or update the Attributes of a Thing identified by the `thingId`\n        path parameter at once. The Attributes will be replaced by the request\n        body's JSON.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Attributes were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Attribute resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attributes'\n        '204':\n          description: The Attributes were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid or was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying the Attributes of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Attributes'\n    delete:\n      summary: Delete all Attributes of a specific Thing at once\n      description: |-\n        Deletes all Attributes of the Thing identified by the `thingId` path\n        parameter at once.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Attributes were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting all Attributes of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID or\n            its Attributes were not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/attributes/{attributePath}':\n    get:\n      summary: Retrieve a specific Attribute of a specific Thing\n      description: |-\n        Returns a specific Attribute of the Thing identified by the `thingId`\n        path parameter. The Attribute (JSON) can be referenced hierarchically by\n        applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to retrieve the\n        `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Attribute was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID or\n            the Attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a specific Attribute of a specific Thing\n      description: |-\n        Create or update a specific Attribute of the Thing identified by the\n        `thingId` path parameter. The Attribute will be created if it doesn't\n        exist or else updated. The Attribute (JSON) can be referenced\n        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to create/update\n        the `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Attribute was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Attribute resource\n              schema:\n                type: string\n        '204':\n          description: The Attribute was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a single Attribute of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    delete:\n      summary: Delete a specific Attribute of a specific Thing\n      description: |-\n        Deletes a specific Attribute of the Thing identified by the `thingId`\n        path parameter. The Attribute (JSON) can be referenced hierarchically by\n        applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/attributes/address/city` in order to delete the\n        `city` field of an `address` object.\n      tags:\n        - Things\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/attributePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Attribute was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a single Attribute of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID or\n            the Attribute at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  ###\n  ### Features\n  ###\n  '/things/{thingId}/features':\n    get:\n      summary: List all Features of a specific Thing\n      description: |-\n        Returns all Features of the Thing identified by the `thingId` path\n        parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featuresFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The list of Features of the specific Thing were successfully\n            retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example:\n                {\n                  \"featureId1\": {\n                    \"definition\": [ \"namespace:definition1:v1.0\" ],\n                    \"properties\": { \"property1\": \"value1\" }\n                  },\n                  \"featureId2\": {\n                    \"definition\": [ \"namespace:definition2:v1.0\" ],\n                    \"properties\": { \"property2\": \"value2\" }\n                  }\n                }\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found or the Features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify all Features of a specific Thing at once\n      description: |-\n        Create or modify the Features of a Thing identified by the `thingId`\n        path parameter at once. The list of Features will be replaced by the\n        request body's JSON.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Features were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Features resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Features'\n              example:\n                {}\n        '204':\n          description: The Features were successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid or was not a JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying all features of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Features'\n            example: {}\n        description: |-\n          JSON object of the Features to be modified at once. It can be also\n          `null` or an empty object `{}` (all features cleared).\n        required: true\n    delete:\n      summary: Delete all Features of a specific Thing\n      description: |-\n        Deletes all features of the Thing identified by the `thingId` path\n        parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Features were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting all features of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found or the Features have not been defined.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}':\n    get:\n      summary: Retrieve a specific Feature of a specific Thing\n      description: |-\n        Returns a specific Feature identified by the `featureId` path parameter\n        of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/featureFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Feature was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID or\n            the Feature with the specified `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify a specific Feature of a specific Thing\n      description: |-\n        Create or modify a specific Feature identified by the `featureId` path\n        parameter of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Feature was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Feature resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature'\n        '204':\n          description: The Feature was successfully modified.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON of the Feature to be created was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a single feature of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID was\n            not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Feature'\n            example: {}\n        description: |-\n          JSON representation of the Feature to be created/modified. It can also\n          be `null` or an empty object `{}`.\n        required: true\n    delete:\n      summary: Delete a specific Feature of a specific Thing\n      description: |-\n        Deletes a specific Feature identified by the `featureId` path parameter\n        of the Thing identified by the `thingId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Feature was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a single feature of an existing Thing `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing with the given ID or\n            the Feature at the specified path was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}/definition':\n    get:\n      summary: List the Definition of a Feature\n      description: |-\n        Returns the complete Definition of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Definition was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Definition or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update the Definition of a Feature\n      description: |-\n        Create or update the complete Definition of a Feature identified by the `thingId`\n        and `featureId` path parameter at once. The Definition will be replaced\n        by the request body's JSON array.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Definition was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Definition resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureDefinition'\n        '204':\n          description: The Definition was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying the Definition of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing or the Feature with\n            the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureDefinition'\n            example: {}\n        description: |-\n          JSON array of the complete Definition to be updated. Consider that the\n          value has to be a JSON array or `null`. The content of the JSON array\n          are strings in the format `\"namespace:name:version\"` which is\n          enforced.\n        required: true\n    delete:\n      summary: Delete the Definition of a Feature\n      description: |-\n        Deletes the complete Definition of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Definition was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting the Definition of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Definition or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}/properties':\n    get:\n      summary: List all Properties of a Feature\n      description: |-\n        Returns all Properties of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertiesFieldsQueryParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Properties were successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined query parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Properties or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update all Properties of a Feature at once\n      description: |-\n        Create or update the Properties of a Feature identified by the `thingId`\n        and `featureId` path parameter at once. The Properties will be replaced\n        by the request body's JSON.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Properties were successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureProperties'\n        '204':\n          description: The Properties were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying the Properties of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing or the Feature with\n            the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FeatureProperties'\n            example: {}\n        description: |-\n          JSON object of all Properties to be updated at once. Consider that the\n          value has to be a JSON object or `null`. We strongly recommend to use\n          a restricted set of characters for the key (identifier). Currently\n          these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n        required: true\n    delete:\n      summary: Delete all Properties of a Feature\n      description: |-\n        Deletes all Properties of the Feature identified by the `thingId` and\n        `featureId` path parameter.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Properties were successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting the Properties of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The specified Feature has no\n            Properties or the Thing with the specified `thingId` or the Feature\n            with `featureId` was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/things/{thingId}/features/{featureId}/properties/{propertyPath}':\n    get:\n      summary: Retrieve a specific Property of a Feature\n      description: |-\n        Returns the Property of the Feature identified by the `thingId` and\n        `featureId` path parameter. The Property (JSON) can be referenced\n        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in\n        order to retrieve the `latitude` field of an `location` Property.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The Property was successfully retrieved.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The specified Property or the\n            Thing with the specified `thingId` or the Feature with `featureId`\n            was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a specific Property of a Feature\n      description: |-\n        Create or update a specific Property of a Feature identified by the\n        `thingId` and `featureId` path parameter. The Property will be created\n        if it doesn't exist or else updated. The Property (JSON) can be\n        referenced hierarchically by applying JSON Pointer notation (RFC-6901),\n        e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in\n        order to create/update the `latitude` field of an `location` object.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Property was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '204':\n          description: The Property was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For creating/updating a Property of an existing Feature `WRITE` permission is required.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Thing or the Feature with\n            the given ID was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Value'\n    delete:\n      summary: Delete a specific Property of a Feature\n      description: |-\n        Deletes a specific Property of the Feature identified by the `thingId`\n        and `featureId` path parameter.  The Property (JSON) can be referenced\n        hierarchically by applying JSON Pointer notation (RFC-6901), e.g.:\n        `/things/{thingId}/features/{featureId}/properties/location/latitude` in\n        order to delete the `latitude` field of an `location` Property.\n      tags:\n        - Features\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/propertyPathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Property was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The specified Property or the\n            Thing with the specified `thingId` or the Feature with `featureId`\n            was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  ###\n  ### Messages\n  ###\n  '/things/{thingId}/inbox/claim':\n    post:\n      summary: Initiates claiming a specific Thing in order to gain access\n      description: |-\n        Send a Claim message to the Thing identified by the `thingId` path\n        parameter in order to gain access to it. The Claim message is forwarded\n        together with the request body and `Content-Type` header to client(s)\n        which registered for Claim messages of the specific Thing.\n\n\n        The decision whether to grant access (by setting permissions) is\n        completely up to the client(s) which handle the Claim message.\n\n\n        The HTTP request blocks until a response to the issued Claim message is\n        available or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n        No special permissions are required to issue a Claim message.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageClaimTimeoutParam'\n      responses:\n        '200':\n          description: |-\n            The Claim message was processed successfully and the response body\n            contains the custom response. The response body may contain\n            arbitrary data chosen by the recipient. The response code defaults\n            to `200` but may be chosen by the recipient too.\n        '204':\n          description: |-\n            The Claim message was processed successfully and no custom response\n            body was set. The response code defaults to `204` but may be chosen\n            by the recipient.\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n        '429':\n          description: |-\n            The user has sent too many requests in a given amount of time (\"rate\n            limiting\").\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/inbox/messages/{messageSubject}':\n    post:\n      summary: Send a message TO a specific Thing\n      description: |-\n        Send a message with the subject `messageSubject` `TO` the Thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type. The\n        API does not provide any kind of acknowledgement that the message was\n        received by the Thing. In order to send a message, the user needs `WRITE`\n        permission at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: |-\n            The message was sent but not necessarily received by the Thing (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/inbox/messages/`messageSubject`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/outbox/messages/{messageSubject}':\n    post:\n      summary: Send a message FROM a specific Thing\n      description: |-\n        Send a message with the subject `messageSubject` `FROM` the Thing\n        identified by the `thingId` path parameter. The request body contains\n        the message payload and the `Content-Type` header defines its type.\n        In order to send a message, the user needs `WRITE` permission at the\n        Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/outbox/messages/`messageSubject`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/features/{featureId}/inbox/messages/{messageSubject}':\n    post:\n      summary: Send a message TO a specific Feature of a specific Thing\n      description: |-\n        Send a message with the subject `messageSubject` `TO` the Feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type. The API does not provide any kind of acknowledgement that the\n        message was received by the Feature. In order to send a message, the user needs `WRITE` permission at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: |-\n            The message was sent but not necessarily received by the Feature\n            (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/features/`featureId`/inbox/messages/`messageSubject`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  '/things/{thingId}/features/{featureId}/outbox/messages/{messageSubject}':\n    post:\n      summary: Send a message FROM a specific Feature of a specific Thing\n      description: |-\n        Send a message with the subject `messageSubject` `FROM` the Feature\n        specified by the `featureId` and `thingId` path parameter. The request\n        body contains the message payload and the `Content-Type` header defines\n        its type. In order to send a message, the user needs `WRITE` permission\n        at the Thing level.\n\n        The HTTP request blocks until a response to the message is available\n        or until the `timeout` is expired. If many clients respond to\n        the issued message, the first response will complete the HTTP request.\n\n        In order to handle the message in a fire and forget manner, add\n        a query-parameter `timeout=0` to the request.\n      tags:\n        - Messages\n      parameters:\n        - $ref: '#/components/parameters/thingIdPathParam'\n        - $ref: '#/components/parameters/featureIdPathPathParam'\n        - $ref: '#/components/parameters/messageSubjectPathParam'\n        - $ref: '#/components/parameters/messageTimeoutParam'\n      responses:\n        '202':\n          description: The message was sent (fire and forget).\n        '400':\n          description: |-\n            The request could not be completed. The `thingId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or at least one of the defined path parameters was invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller does not have `WRITE` permission on the resource message:/features/`featureId`/outbox/messages/`messageSubject`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '413':\n          $ref: '#/components/responses/messageTooLarge'\n      requestBody:\n        $ref: '#/components/requestBodies/Payload'\n  ###\n  ### Policies\n  ###\n  '/policies/{policyId}':\n    get:\n      summary: Retrieve a specific Policy\n      description: |-\n        Returns the Policy identified by the `policyId` path parameter. The\n        response contains the Policy as JSON object consisting of Policy\n        Entries.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Policy.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or update a Policy with a specified ID\n      description: |-\n        Modify the complete Policy identified by the `policyId` path parameter. The `policyId` has to:\n\n          * contain a mandatory namespace prefix (java package notation + `:` colon) - periods (`.`) may be used in namespace but not as first or last character\n          * conform to RFC-2396 (URI)\n\n        #### Valid examples\n\n          * `com.bosch.myproject:myPolicy1`\n          * `mynamespace:myPolicy1`\n\n        #### Invalid examples\n\n          * `42:myFridge1`\n          * `.foo:myFridge1`\n          * `bar.:myFridge1`\n\n        The ID of a Policy can't be changed after creation. Any `policyId` specified in the request body is therefore\n        ignored.\n\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Policy was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Policy resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n        '204':\n          description: The Policy was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Policy JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a complete Policy, `WRITE` permission on the resource `policy:/` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n            example: {}\n        description: |-\n          JSON representation of the Policy.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n    delete:\n      summary: Delete a specific Policy\n      description: |-\n        Deletes the Policy identified by the `policyId` path parameter. Deleting\n        a Policy does not implicitly delete other entities (e.g. Things) which\n        use this Policy. Those have to be deleted in advance of deleting the\n        Policy.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Policy was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Policy JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting an existing Policy, `WRITE` permission on the resource `policy:/` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/policies/{policyId}/entries':\n    get:\n      summary: Retrieve the entries of a specific Policy\n      description: |-\n        Returns the Policy entries of the Policy identified by the `policyId`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned are the\n            Policy entries.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntries'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Modify the entries of a specific Policy\n      description: |-\n        Modify the Policy entries of the Policy identified by the `policyId`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Policy entries were successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Policy entry JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying the Policy entries of an existing Policy, `WRITE` permission on the resource `policy:/entries` is required is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyEntries'\n            example: {}\n        description: |-\n          JSON representation of the Policy entries.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n  '/policies/{policyId}/entries/{label}':\n    get:\n      summary: Retrieve one Policy entry of a Policy for a specific label\n      description: |-\n        Returns one Policy entry of the Policy identified by the `policyId` path\n        parameter and for the label identified by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Policy entry.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntry'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify one Policy entry of a Policy for a specific label\n      description: |-\n        Create or modify the Policy entry of the Policy identified by the\n        `policyId` path parameter and with the label identified by the `label`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Policy entry was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Policy entry\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEntry'\n        '204':\n          description: The Policy entry was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Policy entry JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a Policy entry of an existing Policy, `WRITE` permission on the resource `policy:/entries/{label}` is required is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PolicyEntry'\n            example: {}\n        description: |-\n          JSON representation of the Policy entry.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n    delete:\n      summary: Delete one Policy entry of a Policy for a specific label\n      description: |-\n        Deletes the Policy entry of the Policy identified by the `policyId` path\n        parameter and with the label identified by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Policy entry was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a Policy entry of an existing Policy, `WRITE` permission on the resource `policy:/entries/{label}` is required is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/policies/{policyId}/entries/{label}/subjects':\n    get:\n      summary: Retrieve all Subjects of a Policy entry\n      description: |-\n        Returns all Subjects of the Policy entry of the Policy identified by the\n        `policyId` path parameter and for the label identified by the `label`\n        path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned. The subjects are returned.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subjects'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify all Subjects of a Policy Entry\n      description: |-\n        Create or modify all Subjects of the Policy entry of the Policy\n        identified by the `policyId` path parameter and with the label\n        identified by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Subjects were successfully created or updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Subjects JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying Subjects of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects` is required is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID was\n            not found in the context of the authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n            example: {}\n        description: |-\n          JSON representation of the Subjects.\n\n\n          Use the placeholder `{{ request:subjectId }}` in order to let the\n          backend insert the authenticated subjectId of the HTTP request.\n        required: true\n  '/policies/{policyId}/entries/{label}/subjects/{subjectId}':\n    get:\n      summary: Retrieve one specific Subject of a Policy entry\n      description: |-\n        Returns the Subject with ID `subjectId` of the Policy entry identified\n        by the `label` path parameter belonging to the Policy identified by the\n        `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/subjectIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Subject.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubjectEntry'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID,\n            the Policy entry or the Subject was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify one specific Subject of a Policy entry\n      description: |-\n        Create or modify the Subject with ID `subjectId` of the Policy entry\n        identified by the `label` path parameter belonging to the Policy\n        identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/subjectIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Subject was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Subject\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubjectEntry'\n        '204':\n          description: The Subject was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Subject JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a Subject of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects/{subjectId}` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubjectEntry'\n            example: {}\n        description: JSON representation of the Subject\n        required: true\n    delete:\n      summary: Delete one specific Subject of a Policy entry\n      description: |-\n        Deletes the Subject with ID `subjectId` of the Policy entry identified\n        by the `label` path parameter belonging to the Policy identified by the\n        `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/subjectIdPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Subject was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a Subject of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/subjects/{subjectId}` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID,\n            the Policy entry or the Subject was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  '/policies/{policyId}/entries/{label}/resources':\n    get:\n      summary: Retrieve all Resources of a Policy entry\n      description: |-\n        Returns all Resources of the Policy entry of the Policy identified by\n        the `policyId` path parameter and for the label identified by the\n        `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: The request successfully returned. The resources are returned.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resources'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify all Resources of a Policy Entry\n      description: |-\n        Create or modify all Resources of the Policy entry of the Policy\n        identified by the `policyId` path parameter and with the label\n        identified by the `label` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Resources were successfully created or updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Resources JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying Resources of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Resources'\n            example: {}\n        description: JSON representation of the Resources\n        required: true\n  '/policies/{policyId}/entries/{label}/resources/{resourcePath}':\n    get:\n      summary: Retrieve one specific Resource of a Policy entry\n      description: |-\n        Returns the Resource with path `resourcePath` of the Policy entry\n        identified by the `label` path parameter belonging to the Policy\n        identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/resourcePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '200':\n          description: |-\n            The request successfully returned completed and returned is the\n            Resource.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceEntry'\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID,\n            the Policy entry or the Resource was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n    put:\n      summary: Create or modify one specific Resource of a Policy entry\n      description: |-\n        Create or modify the Resource with path `resourcePath` of the Policy\n        entry identified by the `label` path parameter belonging to the Policy\n        identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/resourcePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '201':\n          description: The Resource was successfully created.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n            Location:\n              description: The location of the created Resource\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceEntry'\n        '204':\n          description: The Resource was successfully updated.\n          headers:\n            ETag:\n              description: |-\n                The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n                \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n              schema:\n                type: string\n        '304':\n          $ref: '#/components/responses/notModified'\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n\n            Or the JSON was invalid, or no valid Resource JSON object.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For modifying a Resource of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources/{resourcePath}` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID or\n            the Policy entry was not found in the context of the authenticated\n            user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n        '413':\n          $ref: '#/components/responses/entityTooLarge'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourceEntry'\n            example: {}\n        description: JSON representation of the Resource\n        required: true\n    delete:\n      summary: Delete one Resource of a Policy entry\n      description: |-\n        Deletes the Resource with path `resourcePath` of the Policy entry\n        identified by the `label` path parameter belonging to the Policy\n        identified by the `policyId` path parameter.\n      tags:\n        - Policies\n      parameters:\n        - $ref: '#/components/parameters/policyIdPathParam'\n        - $ref: '#/components/parameters/labelPathParam'\n        - $ref: '#/components/parameters/resourcePathPathParam'\n        - $ref: '#/components/parameters/ifMatchHeaderParam'\n        - $ref: '#/components/parameters/ifNoneMatchHeaderParam'\n      responses:\n        '204':\n          description: The Resource was successfully deleted.\n        '400':\n          description: |-\n            The request could not be completed. The `policyId` either\n\n              * does not contain the mandatory namespace prefix (java package notation + `:` colon)\n              * does not conform to RFC-2396 (URI)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: |-\n            The request could not be completed as the caller had insufficient permissions. For deleting a Resource of an existing Policy entry, `WRITE` permission on the resource `policy:/entries/{label}/resources/{resourcePath}` is required without having any revoke.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '404':\n          description: |-\n            The request could not be completed. The Policy with the given ID,\n            the Policy entry or the Resource was not found in the context of the\n            authenticated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '412':\n          $ref: '#/components/responses/preconditionFailed'\n  ###\n  ### Things-Search\n  ###\n  /search/things:\n    get:\n      summary: Search for Things\n      description: |-\n        This resource can be used to search for things.\n\n        The query parameter `filter` is not mandatory. If it is not set there\n        are returned all things which the logged in user is allowed to read. The\n        resource supports sorting and paging. If paging is not explicitly\n        specified by means of the `limit` option, a default count of `25`\n        documents is returned.\n\n        To search for nested properties, we use JSON Pointer notation\n        (RFC-6901). See the following example how to search for the sub property\n        `location` of the parent property `attributes` with a forward slash as\n        separator:\n\n        ```eq(attributes/location,\"kitchen\")```\n      parameters:\n        - $ref: '#/components/parameters/searchFilter'\n        - $ref: '#/components/parameters/namespacesFilter'\n        - $ref: '#/components/parameters/thingFieldsQueryParam'\n        - name: option\n          in: query\n          description: |-\n            Possible values for the parameter:\n\n            ###### Sort operations\n\n            * ```sort([+|-]{property})```\n            * ```sort([+|-]{property},[+|-]{property},...)```\n\n            ###### Paging operations\n\n            * ```size({page-size})```  Maximum allowed page-size is `200`.\n            * ```cursor({cursor-id})```  Start the search from the cursor location. Specify the cursor ID without\n            quotation marks. Cursor IDs are given in responses and mark the position after the final search result.\n            The meaning of cursor IDs is unspecified and may change without notice.\n\n            The paging option `limit({offset},{count})` is deprecated.\n            It may result in slow queries, time-outs and will be removed eventually.\n\n            ##### Examples:\n\n            * ```sort(+thingId)```\n            * ```sort(-attributes/manufacturer)```\n            * ```sort(+thingId,-attributes/manufacturer)```\n            * ```size(10)``` return 10 results\n            * ```cursor(LOREMIPSUM)```  return results after the position of the cursor `LOREMIPSUM`.\n\n            ##### Combine:\n\n            If you need to specify multiple options, when using the swagger UI just write each option in a new line.\n            When using the plain REST API programmatically,\n            you will need to separate the options using a comma (,) character.\n\n            ```size(200),cursor(LOREMIPSUM)```\n\n            The deprecated paging option `limit` may not combine with the other paging options `size` and `cursor`.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: An array of the matching things.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultThings'\n        '400':\n          description: |-\n            The request could not be completed. A provided parameter was in a\n            wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n  /search/things/count:\n    get:\n      summary: Count Things\n      description: |-\n        This resource can be used to count things.\n\n        The query parameter `filter` is not mandatory. If it is not set there is\n        returned the total amount of things which the logged in user is allowed\n        to read.\n\n        To search for nested properties, we use JSON Pointer notation\n        (RFC-6901). See the following example how to search for the sub property\n        `location` of the parent property `attributes` with a forward slash as\n        separator:\n\n        ```eq(attributes/location,\"kitchen\")```\n      parameters:\n        - $ref: '#/components/parameters/searchFilter'\n        - $ref: '#/components/parameters/namespacesFilter'\n      tags:\n        - Things-Search\n      responses:\n        '200':\n          description: A number indicating the amount of matched things\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultThingsCount'\n        '400':\n          description: |-\n            The request could not be completed. A provided parameter was in a\n            wrong format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '401':\n          description: The request could not be completed due to missing authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '403':\n          description: The request could not be completed due to an invalid authentication.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\n        '504':\n          description: The request ran out of time to execute on the the back-end. Optimize your query and try again.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdvancedError'\ncomponents:\n  schemas:\n    Error:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - message\n    AdvancedError:\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of the error\n        error:\n          type: string\n          description: The error code of the occurred exception\n        message:\n          type: string\n          description: The message of the error - what went wrong\n        description:\n          type: string\n          description: A description how to fix the error or more details\n        href:\n          type: string\n          description: A link to further information about the error and how to fix it\n      required:\n        - status\n        - error\n        - message\n    Attributes:\n      type: object\n      description: An arbitrary JSON object.\n    FeatureDefinition:\n      type: array\n      items:\n        type: string\n        description: \"A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'\"\n        pattern: ([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+)\n    FeatureProperties:\n      type: object\n      description: An arbitrary JSON object.\n    Feature:\n      type: object\n      properties:\n        definition:\n          $ref: '#/components/schemas/FeatureDefinition'\n          description: The Definition of this Feature\n        properties:\n          $ref: '#/components/schemas/FeatureProperties'\n          description: The Properties of this Feature\n    SearchResultThings:\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Thing'\n        cursor:\n          type: string\n    SearchResultThingsCount:\n      type: integer\n    NewThing:\n      type: object\n      properties:\n        _policy:\n          $ref: '#/components/schemas/Policy'\n          description: |-\n            The initial Policy to create for this Thing. This will create a separate Policy entity managed by resource `/policies/{thingId}`.\n\n\n            Use the placeholder `{{ request:subjectId }}` in order to let the backend insert the authenticated subjectId of the HTTP request.\n        _copyPolicyFrom:\n          type: string\n          description: |-\n            This field may contain the Policy ID of an existing Policy.\n            The Policy is copied and used for this newly created Thing. This field may also contain a placeholder\n            reference to a Thing in the format `{{ ref:things/[thingId]/policyId }}` where you need to replace `[thingId]`\n            with a valid Thing ID. The newly created Thing will then obtain a copy of the Policy of the referenced Thing.\n            In the case of using a reference, the caller needs to have READ access to both the Thing and the Policy of the Thing.\n            In the case of using an explicit policy id to copy from, the caller needs to have READ access to the Policy.\n            If you want to specify a Policy ID for the copied policy, use the policyId field.\n            This field must not be used together with the field `_policy`. If you specify both `_policy` and\n            `_copyPolicyFrom` this will lead to an error response.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Thing. Managed by\n            resource `/policies/{policyId}`.\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n          description: The attributes of this Thing\n        features:\n          $ref: '#/components/schemas/Features'\n          description: The Features of this Thing\n    Thing:\n      type: object\n      required:\n        - thingId\n        - policyId\n        - attributes\n        - features\n      properties:\n        thingId:\n          type: string\n          description: Unique identifier representing the thing\n        policyId:\n          type: string\n          description: The policy ID used for controlling access to this thing, managed by resource `/policies/{policyId}`\n        attributes:\n          $ref: '#/components/schemas/Attributes'\n          description: The attributes of this thing\n        features:\n          $ref: '#/components/schemas/Features'\n          description: The features of this thing\n    Policy:\n      type: object\n      description: Policy consisting of PolicyEntries\n      properties:\n        entries:\n          $ref: '#/components/schemas/PolicyEntries'\n    PolicyEntries:\n      type: object\n      description: PolicyEntries containing one PolicyEntry for each arbitrary `label` key\n      properties:\n        label1:\n          $ref: '#/components/schemas/PolicyEntry'\n        labelN:\n          $ref: '#/components/schemas/PolicyEntry'\n    PolicyEntry:\n      type: object\n      description: Single Policy entry containing Subjects and Resources.\n      required:\n        - subjects\n        - resources\n      properties:\n        subjects:\n          $ref: '#/components/schemas/Subjects'\n        resources:\n          $ref: '#/components/schemas/Resources'\n    Subjects:\n      type: object\n      description: |-\n        (Authorization) Subjects containing one SubjectEntry for each arbitrary\n        `issuer:subjectId` key. `issuer` being one of the following\n        `iot-permissions`, `iot-things`\n      properties:\n        'iot-permissions:subjectId1':\n          $ref: '#/components/schemas/SubjectEntry'\n        'iot-permissions:subjectIdN':\n          $ref: '#/components/schemas/SubjectEntry'\n    SubjectEntry:\n      type: object\n      description: Single (Authorization) Subject entry holding its type.\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: the type of the (Authorization) Subject\n          enum:\n            - iot-permissions-sid\n            - iot-permissions-userid\n            - iot-permissions-groupid\n            - iot-permissions-roleid\n            - iot-things-clientid\n            - jwt\n    Resources:\n      type: object\n      description: |-\n        (Authorization) Resources containing one ResourceEntry for each\n        `type:path` key, `type` being one of the following `thing`, `policy`,\n        `message`\n      properties:\n        'thing:/':\n          $ref: '#/components/schemas/ResourceEntry'\n        'thing:/attributes/some/path':\n          $ref: '#/components/schemas/ResourceEntryRestricted'\n        'policy:/':\n          $ref: '#/components/schemas/ResourceEntry'\n        'message:/':\n          $ref: '#/components/schemas/ResourceEntry'\n    ResourceEntry:\n      type: object\n      description: |-\n        Single (Authorization) Resource entry defining permissions per effect.\n        Allowed effects are `grant` and `revoke`.\n      properties:\n        grant:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n        revoke:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    ResourceEntryRestricted:\n      type: object\n      description: |-\n        Single (Authorization) Resource entry defining permissions per effect.\n        Allowed effects are `grant` and `revoke`.\n      properties:\n        grant:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n        revoke:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    Permission:\n      type: string\n      description: A Permission allows a certain action on an entity\n      enum:\n        - READ\n        - WRITE\n    Features:\n      type: object\n      description: |-\n        List of Features where the key represents the `featureId` of each Feature.\n        The `featureId` key must be unique in the list.\n      additionalProperties:\n        $ref: '#/components/schemas/Feature'\n    TagTopologyResponse:\n      type: object\n      properties:\n        tag:\n          type: string\n          description: Tag name of the saved Topology snapshot.\n        tagTimestamp:\n          type: string\n          description: Timestamp of the saved Topology snapshot.\n    GraphQLExecutionError:\n      type: object\n      properties:\n        status:\n          type: integer\n          description: The HTTP status of unprocessable entity (422)\n        error:\n          type: string\n          description: |-\n            The error code of GraphQL execution error\n            `\"topologoes:graphql.execution.error\"`\n        message:\n          type: string\n          description: |-\n            A description of what happened `\"GraphQL execution failed with\n            errors.\"`\n        graphql_errors:\n          type: array\n          items:\n            type: string\n          description: A list of error messages from the GraphQL engine.\n      required:\n        - status\n        - error\n        - message\n        - graphql_errors\n    GraphQLRequest:\n      type: object\n    GraphQLResponse:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          description: The result of the GraphQL query.\n    GraphQLSchema:\n      type: string\n      description: The GraphQL schema.\n      example: |\n        schema @expand(template: \"Topology\") { query: Ignored }\n\n        type Campus implements Topology {\n        id:         ID!\n        campusName: String\n        buildings:  [Building]\n        companies:  [Company]\n        }\n\n        type Building implements Referenceable {\n          buildingName: String\n          rooms:        [Room]\n        }\n\n        type Room implements Referenceable {\n          roomName: String\n          area:     Float\n        }\n\n        type Company {\n          name:  String\n          units: [Referenceable]\n        }\n    Topology:\n      type: object\n      required:\n        - topologyId\n        - policyId\n        - schemaId\n      properties:\n        topologyId:\n          type: string\n          description: The ID of the Topology.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology. Managed by\n            resource `/policies/{policyId}`.\n        schemaId:\n          type: string\n          description: |-\n            The Topology Schema ID defining this Topology. Managed by resource `/topology-schemas/{schemaId}`.\n    NewTopology:\n      type: object\n      required:\n        - policyId\n        - schemaId\n      properties:\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology. Managed by\n            resource `/policies/{policyId}`.\n        schemaId:\n          type: string\n          description: |-\n            The Topology Schema ID defining this Topology. Managed by\n            resource `/topology-schemas/{schemaId}`.\n        _content:\n          $ref: '#/components/schemas/NewTopologyContent'\n    NewTopologyContent:\n      type: object\n      properties:\n        query:\n          type: string\n          description: Only `create` mutation allowed here.\n        variables:\n          type: object\n    NewTopologyResponse:\n      type: object\n      required:\n        - topologyId\n        - policyId\n        - schemaId\n      properties:\n        topologyId:\n          type: string\n          description: The ID of the modified Topology.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology. Managed by\n            resource `/policies/{policyId}`.\n        schemaId:\n          type: string\n          description: |-\n            The Topology Schema ID defining this Topology. Managed by\n            resource `/topology-schemas/{schemaId}`.\n        data:\n          type: object\n          description: GraphQL operation result if `_content` was provided with the request body.\n    SearchResultTopologies:\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Topology'\n    TopologySchema:\n      type: object\n      required:\n        - schemaId\n        - policyId\n      properties:\n        schemaId:\n          type: string\n          description: The ID of the Topology Schema.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology Schema. Managed by\n            resource `/policies/{policyId}`.\n        content:\n          $ref: '#/components/schemas/GraphQLSchema'\n    NewTopologySchema:\n      type: object\n      required:\n        - schemaId\n        - policyId\n      properties:\n        schemaId:\n          type: string\n          description: The ID of the Topology Schema.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology Schema. Managed by\n            resource `/policies/{policyId}`.\n        content:\n          $ref: '#/components/schemas/GraphQLSchema'\n    NewTopologySchemaResponse:\n      type: object\n      required:\n        - schemaId\n        - policyId\n      properties:\n        schemaId:\n          type: string\n          description: The ID of the modified Topology Schema.\n        policyId:\n          type: string\n          description: |-\n            The Policy ID used for controlling access to this Topology Schema. Managed by\n            resource `/policies/{policyId}`.\n        content:\n          $ref: '#/components/schemas/GraphQLSchema'\n\n  responses:\n    entityTooLarge:\n      description: |-\n        The created or modified entity is larger than the accepted limit of 100 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    messageTooLarge:\n      description: |-\n        The size of the send message is larger than the accepted limit of 250 kB.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n    notModified:\n      description: |-\n        The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which\n         matches the current ETag of the (sub-)resource.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n          schema:\n            type: string\n    preconditionFailed:\n      description: |-\n        A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, when you\n        specified an If-Match or If-None-Match header which fails the precondition check against the current ETag of\n        the (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a\n        failing If-None-Match header for a read request, status 304 will be returned instead.\n      headers:\n        ETag:\n          description: |-\n            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format\n            \"rev:[revision]\", for sub-resources it has the format \"hash:[calculated-hash]\".\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AdvancedError'\n\n  parameters:\n    ifMatchHeaderParam:\n      name: If-Match\n      in: header\n      description:  \u003e-\n        The `If-Match` header which has to conform to RFC-7232 (Conditional Requests). Common usages are:\n          * optimistic locking by specifying the `ETag` from a previous GET response, e.g. `If-Match: \"rev:4711\"`\n          * retrieving or modifying a resource only if it already exists, e.g. `If-Match: *`\n      required: false\n      schema:\n        type: string\n    ifNoneMatchHeaderParam:\n      name: If-None-Match\n      in: header\n      description:  \u003e-\n        The `If-None-Match` header which has to conform to RFC-7232 (Conditional Requests). A common usage scenario is to\n        modify a resource only if it does not yet exist, thus to create it, by specifying `If-None-Match: *`.\n      required: false\n      schema:\n        type: string\n    featureIdPathPathParam:\n      name: featureId\n      in: path\n      description: The ID of the Feature - has to conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    attributePathPathParam:\n      name: attributePath\n      in: path\n      description: The path to the Attribute\n      required: true\n      schema:\n        type: string\n    thingIdPathParam:\n      name: thingId\n      in: path\n      description: |-\n        The ID of the Thing - has to:\n\n          * contain the mandatory namespace prefix (java package notation + `:` colon)\n          * conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    policyIdPathParam:\n      name: policyId\n      in: path\n      description: |-\n        The ID of the Policy - has to:\n\n          * contain the mandatory namespace prefix (java package notation + `:` colon)\n          * conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    topologyIdPathParam:\n      name: topologyId\n      in: path\n      description: |-\n        The ID of the Topology - has to:\n         * contain the mandatory namespace prefix (java package notation + `:` colon)\n         * conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    topologyTagPathParam:\n      name: tagId\n      in: path\n      description: |-\n        A Tag of a Topology - has to:\n\n          * contain 0 or more unreserved URI characters (letters, digits, `-`, `.`, `_`, `~`)\n           * `1.1`\n           * `~topo-1_MILESTONE`\n\n          * Invalid examples:\n           * `%22topo:logy/+5`\n           * `!(x=42+y=z)`\n      required: true\n      schema:\n        type: string\n    topologyTagQueryParam:\n      name: tag\n      in: query\n      description: |-\n        A tag of a topology - has to:\n\n          * contain 1 or more unreserved URI characters (letters, digits, `-`, `.`, `_`, `~`)\n           * `1.1`\n           * `topo1-MILESTONE`\n\n          * Invalid examples:\n           * `%22topo:logy/+5`\n           * `topo?x=42\u0026y=x`\n      required: false\n      schema:\n        type: string\n    topologyTimestampQueryParam:\n      name: tag_timestamp\n      in: query\n      description: |-\n        Timestamp of a Topology tagged in the past - has to:\n\n        * conform to the ISO 8601 calendar date and time format with mandatory\n        time zone designation.\n          The date must be a fully specified calendar date. Week and ordinal dates are not supported. The time may be\n          accurate up to hours, minutes, seconds or milliseconds. The separator `T` between the date and the time is\n          mandatory. We support both the expanded format `YYYY-MM-DDThh:mm:ss.sTZD` and the basic format\n          `YYYYMMDDThhmmss.sTZD`, where `TZD` is a URL-encoded time zone designator (`Z`, `%2Bhh:mm`, `-hh:mm`,\n          `%2Bhhmm`, or `-hhmm`).\n\n          Valid examples are:\n             * `2017-01-03T10:15:30.013Z`\n             * `20170103T101530.013Z`\n             * `2017-02-03T10:15:30%2B01:00`\n             * `2017-02-03T10:15:30-01:00`\n      required: false\n      schema:\n        type: string\n    topologyQueryQueryParam:\n      name: query\n      in: query\n      description: |-\n        A URL-encoded GraphQL query string. Suitable for small queries only: The\n        size of the entire URL should not exceed 8 kilobyte.\n      required: true\n      schema:\n        type: string\n    topologyVariablesQueryParam:\n      name: variables\n      in: query\n      description: |-\n        A URL-encoded JSON object containing exactly the variables used in the\n        GraphQL query.\n      required: false\n      schema:\n        type: string\n    topologyOperationNameQueryParam:\n      name: operationName\n      in: query\n      required: false\n      description: |-\n        If several named operations are defined in a GraphQL query, this parameter\n        names the operation to be executed.\n      schema:\n        type: string\n    schemaIdPathParam:\n      name: schemaId\n      in: path\n      description: |-\n        The ID of the Schema:\n\n          * has to follow the pattern `namespace`:`name`:`version`\n          * `namespace` must conform to java package notation\n          * `name` and `version` must conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    schemaFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields to be included in the returned JSON.\n\n        #### Selectable fields\n\n        * `schemaId`\n\n        * `policyId`\n\n        * `content`\n\n        * `_revision`\n\n          Specifically selects the revision of the Schema. The revision is a counter which is incremented on each\n          modification of a Schema.\n\n        #### Example\n\n        * `?fields=schemaId,_revision`\n      required: false\n      schema:\n        type: string\n    topologyFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields to be included in the returned JSON.\n\n        #### Selectable fields\n\n        * `topologyId`\n\n        * `policyId`\n\n        * `schemaId`\n\n        * `_revision`\n\n          Specifically selects the revision of the Topology. The revision is a counter which is incremented on each\n          modification of a Topology.\n\n        #### Example\n\n        * `?fields=topologyId,_revision`\n      required: false\n      schema:\n        type: string\n    messageSubjectPathParam:\n      name: messageSubject\n      in: path\n      description: The subject of the Message - has to conform to RFC-2396 (URI)\n      required: true\n      schema:\n        type: string\n    messageClaimTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the Claim response and therefore block the\n        HTTP request. Default value (if omitted): 60 seconds. Maximum value: 600 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n    messageTimeoutParam:\n      name: timeout\n      in: query\n      description: |-\n        Contains an optional timeout (in seconds) of how long to wait for the message response and therefore block the\n        HTTP request. Default value (if omitted): 10 seconds. Maximum value: 60 seconds. A value of 0 seconds applies\n        fire and forget semantics for the message.\n      required: false\n      schema:\n        type: integer\n\n\n    labelPathParam:\n      name: label\n      in: path\n      description: The label of a Policy entry\n      required: true\n      schema:\n        type: string\n    subjectIdPathParam:\n      name: subjectId\n      in: path\n      description: The ID of an (Authorization) Subject\n      required: true\n      schema:\n        type: string\n    resourcePathPathParam:\n      name: resourcePath\n      in: path\n      description: The path of an (Authorization) Resource\n      required: true\n      schema:\n        type: string\n    propertyPathPathParam:\n      name: propertyPath\n      in: path\n      description: The path to the Property\n      required: true\n      schema:\n        type: string\n    thingFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields to be included in the returned\n        JSON. Attributes can be selected in the same manner.\n\n        #### Selectable fields\n\n        * `thingId`\n\n        * `policyId`\n\n        * `_policy`\n\n         Specifically selects the policy of the Thing. (The policy is not contained in the returned JSON per default.)\n\n        * `attributes`\n\n          Supports selecting arbitrary sub-fields by using a comma separated list:\n            * several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=attributes/model` would select only `model` attribute value (if present)\n                * `?fields=attributes/model,attributes/make` would select only `model` and `make` attribute values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=attributes(model,make)` would select only `model` and `make` attribute values (if present)\n               * `?fields=attributes(location/longitude)` would select the `longitude` value inside the `location` object\n               * `?fields=attributes/address/postal(city,street)` would select the `city` and `street` values inside the `postal` object inside the `address` object\n\n\n        * `features`\n\n          Supports selecting arbitrary fields in features similar to `attributes` (see also Features documentation for more details)\n\n        * `_namespace`\n\n          Specifically selects the namespace also contained in the `thingId`\n\n        * `_revision`\n\n          Specifically selects the revision of the Thing. The revision is a counter which is incremented on each modification of a Thing.\n\n        * `_modified`\n\n          Specifically selects the modified timestamp of the Thing in ISO-8601 UTC format. The timestamp is set on each modification of a Thing.\n\n        #### Examples\n\n        * `?fields=thingId,attributes,features`\n\n        * `?fields=attributes(model,make),features`\n\n        *\n        `?fields=thingId,attributes/location/longitude,attributes/address(city,street)`\n      required: false\n      schema:\n        type: string\n    attributesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the attributes to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the attributes by\n        using a comma separated list:\n          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=model` would select only `model` attribute value (if present)\n              * `?fields=model,make` would select only `model` and `make` attribute values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields\n        inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` attribute\n\n        #### Examples\n\n        * `?fields=model,make,location(longitude,latitude)`\n\n        * `?fields=listOfAddresses/postal(city,street))`\n      required: false\n      schema:\n        type: string\n    propertiesFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the properties to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        Supports selecting arbitrary sub-fields as defined in the properties by\n        using a comma separated list:\n          * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n            For example:\n              * `?fields=temperature` would select only `temperature` property value (if present)\n              * `?fields=temperature,humidity` would select only `temperature` and `humidity` property values (if present)\n\n        Supports selecting arbitrary sub-fields of objects by wrapping sub-fields\n        inside parentheses `( )`:\n          * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n          * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n            For example:\n             * `?fields=location(longitude,latitude)` would select the `longitude` and `latitude` value inside the `location` property\n\n        #### Examples\n\n        * `?fields=temperature,humidity,location(longitude,latitude)`\n\n        * `?fields=configuration,status(powerConsumption/watts)`\n      required: false\n      schema:\n        type: string\n    featuresFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from one or more Features to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        * `{featureId}` The ID of the Feature to select properties in\n\n          * `properties`\n\n            Supports selecting arbitrary sub-fields by using a comma separated list:\n              * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n                For example:\n                  * `?fields={featureId}/properties/color` would select only `color` property value (if present) of the Feature identified with `{featureId}`\n                  * `?fields={featureId}/properties/color,properties/brightness` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`\n\n            Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n              * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n              * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n                For example:\n                 * `?fields={featureId}/properties(color,brightness)` would select only `color` and `brightness` property values (if present) of the Feature identified with `{featureId}`\n                 * `?fields={featureId}/properties(location/longitude)` would select the `longitude` value inside the `location` object of the Feature identified with `{featureId}`\n\n\n        #### Examples\n\n        * `?fields=EnvironmentScanner/properties(temperature,humidity)`\n\n        *\n        `?fields=EnvironmentScanner/properties(temperature,humidity),Vehicle/properties/configuration`\n      required: false\n      schema:\n        type: string\n    featureFieldsQueryParam:\n      name: fields\n      in: query\n      description: |-\n        Contains a comma separated list of fields from the selected Feature to be\n        included in the returned JSON.\n\n        #### Selectable fields\n\n        * `properties`\n\n          Supports selecting arbitrary sub-fields by using a comma separated list:\n            * several properties paths can be passed as a comma separated list of JSON pointers (RFC-6901)\n\n              For example:\n                * `?fields=properties/color` would select only `color` property value (if present)\n                * `?fields=properties/color,properties/brightness` would select only `color` and `brightness` property values (if present)\n\n          Supports selecting arbitrary sub-fields of objects by wrapping sub-fields inside parentheses `( )`:\n            * a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with `/`) to select\n            * sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses `( )` after a selected subfield\n\n              For example:\n               * `?fields=properties(color,brightness)` would select only `color` and `brightness` property values (if present)\n               * `?fields=properties(location/longitude)` would select the `longitude` value inside the `location` object\n\n        #### Examples\n\n        * `?fields=properties(color,brightness)`\n      required: false\n      schema:\n        type: string\n    searchFilter:\n      name: filter\n      in: query\n      description: |-\n\n        ##### Filter operations:\n\n        * ```eq({property},{value})```\n\n        * ```ne({property},{value})```\n\n        * ```gt({property},{value})```\n\n        * ```ge({property},{value})```\n\n        * ```lt({property},{value})```\n\n        * ```le({property},{value})```\n\n        * ```in({property},{value},{value},...)```\n\n        * ```like({property},{value})```\n\n        * ```exists({property})```\n\n\n        Note: When using filter operations, only things with the specified properties are returned.\n        For example, the filter `ne(attributes/owner, \"SID123\")` will only return things that do have\n        the `owner` attribute.\n\n\n        ##### Logical operations:\n\n\n        * ```and({query},{query},...)```\n\n        * ```or({query},{query},...)```\n\n        * ```not({query})```\n\n\n        ##### Examples:\n\n        * ```eq(attributes/location,\"kitchen\")```\n\n        * ```exists(features/featureId)```\n\n        * ```and(eq(attributes/location,\"kitchen\"),eq(attributes/color,\"red\"))```\n\n        * ```or(eq(attributes/location,\"kitchen\"),eq(attributes/location,\"living-room\"))```\n      required: false\n      schema:\n        type: string\n    namespacesFilter:\n      name: namespaces\n      in: query\n      description: |-\n        A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces\n        only. When this parameter is omitted, all namespaces will be queried.\n\n\n        #### Examples:\n\n        * `?namespaces=com.example.namespace`\n\n        * `?namespaces=com.example.namespace1,com.example.namespace2`\n      required: false\n      schema:\n        type: string\n\n  requestBodies:\n    Payload:\n      content:\n        application/json:\n          schema:\n            type: string\n            example: ''\n        application/octet-stream:\n          schema:\n            type: string\n            example: ''\n        text/plain:\n          schema:\n            type: string\n            example: ''\n      description: |-\n        Payload of the message with max size of 250 kB. It can be any HTTP\n        supported content, including binary content.\n    Attributes:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Attributes'\n          example: {}\n      description: |-\n        JSON object of all Attributes to be modified at once. Consider that the\n        value has to be a JSON object or `null`, examples:\n\n          * an object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n          * an empty object: `{}`\n      required: true\n    Value:\n      content:\n        application/json:\n          schema:\n            type: object\n            example: {}\n      description: |-\n        JSON representation of the value to be created/updated. This may be as\n        well `null` or an empty object.\n\n        Consider that the value has to be a JSON value, examples:\n\n          * for a number, the JSON value is the number: `42`\n\n          * for a string, the JSON value must be quoted: `\"aString\"`\n\n          * for a boolean, the JSON value is the boolean: `true`\n\n          * for an object, the JSON value is the object: `{ \"key\": \"value\"}` -} We strongly recommend to use a restricted set of characters for the key (identifier). Currently these identifiers should follow the pattern: [_a-zA-Z][_a-zA-Z0-9\\-]*\n\n          * for an list, the JSON value is the list: `[ 1,2,3 ]`\n      required: true\n\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: |-\n        Eclipse Ditto sandbox demo user (demo1 ... demo9) + password (demo)\n      scheme: basic\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |-\n        A JSON Web Token issued by a supported OAuth 2.0 Identity Provider, e.g. a Google \"id_token\"\n"
		}
	},
	"Error": "buildIR: make ir: path \"/things/{thingId}/inbox/messages/{messageSubject}\": post: requestBody: contents: application/octet-stream: octet stream with schema not supported"
}