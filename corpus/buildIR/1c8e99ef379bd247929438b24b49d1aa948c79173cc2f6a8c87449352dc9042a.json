{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/phoenixnap/go-sdk-bmc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "billingapi/api/openapi.yaml",
			"byteSize": 48039,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: support@phoenixnap.com\n    name: PhoenixNAP Team\n    url: https://phoenixnap.com/\n  description: \"Automate your infrastructure billing with the Bare Metal Cloud Billing\\\n    \\ API. Reserve your server instances to\\nensure guaranteed resource availability\\\n    \\ for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a\\ngiven period\\\n    \\ and enable or disable auto-renewals.\u003cbr\u003e\\n\u003cbr\u003e\\n\u003cspan class='pnap-api-knowledge-base-link'\u003e\\n\\\n    Knowledge base articles to help you can be found\\n\u003ca href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models'\\\n    \\ target='_blank'\u003ehere\u003c/a\u003e\\n\u003c/span\u003e\u003cbr\u003e\\n\u003cbr\u003e\\n\u003cb\u003eAll URLs are relative to (https://api.phoenixnap.com/billing/v1/)\u003c/b\u003e\\n\"\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://phoenixnap.com/infrastructure-solutions/legal-it/privacy-shield-compliant-privacy-policy\n  title: Billing API\n  version: \"0.1\"\nservers:\n- url: https://api.phoenixnap.com/billing/v1\nsecurity:\n- OAuth2:\n  - bmc\n  - bmc.read\ntags:\n- description: Rated Usage operations\n  name: Rated Usage\n- description: Product operations\n  name: Products\n- description: Reservation operations\n  name: Reservations\n- description: Account Billing Configuration operations\n  name: Billing Configurations\npaths:\n  /rated-usage:\n    get:\n      description: Retrieves all rated usage for given time period. The information\n        is presented as a list of rated usage records. Every record corresponds to\n        a charge. All date \u0026 times are in UTC.\n      operationId: ratedUsageGet\n      parameters:\n      - description: From year month (inclusive) to filter rated usage records by.\n        example: 2020-03\n        explode: true\n        in: query\n        name: fromYearMonth\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: To year month (inclusive) to filter rated usage records by.\n        example: 2020-04\n        explode: true\n        in: query\n        name: toYearMonth\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: The product category\n        example: SERVER\n        explode: true\n        in: query\n        name: productCategory\n        required: false\n        schema:\n          $ref: '#/components/schemas/ProductCategoryEnum'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ratedUsageGet_200_response_inner'\n                type: array\n          description: List of all the rated usage records for given period of months.\n            If productCategory filter is not used returns all records.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: List the rated usage.\n      tags:\n      - Rated Usage\n  /rated-usage/month-to-date:\n    get:\n      description: Retrieves all rated usage for the current calendar month. The information\n        is presented as a list of rated usage records. Every record corresponds to\n        a charge. All date \u0026 times are in UTC.\n      operationId: ratedUsageMonthToDateGet\n      parameters:\n      - description: The product category\n        example: SERVER\n        explode: true\n        in: query\n        name: productCategory\n        required: false\n        schema:\n          $ref: '#/components/schemas/ProductCategoryEnum'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ratedUsageGet_200_response_inner'\n                type: array\n          description: List of all the rated usage records.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: List the rated usage records for the current calendar month.\n      tags:\n      - Rated Usage\n  /products:\n    get:\n      description: Retrieves all Products.\n      operationId: productsGet\n      parameters:\n      - example: s1.c1.small\n        explode: true\n        in: query\n        name: productCode\n        required: false\n        schema:\n          type: string\n        style: form\n      - example: SERVER\n        explode: true\n        in: query\n        name: productCategory\n        required: false\n        schema:\n          type: string\n        style: form\n      - example: xxx-xxx-xxx\n        explode: true\n        in: query\n        name: skuCode\n        required: false\n        schema:\n          type: string\n        style: form\n      - example: PHX\n        explode: true\n        in: query\n        name: location\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/productsGet_200_response_inner'\n                type: array\n          description: List of all the products.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to wrong data. Please check the provided\n            parameters and try again.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: List all Products.\n      tags:\n      - Products\n  /reservations:\n    get:\n      description: Retrieves all reservations associated with the authenticated account.\n        All date \u0026 times are in UTC.\n      operationId: reservationsGet\n      parameters:\n      - description: The product category\n        example: SERVER\n        explode: true\n        in: query\n        name: productCategory\n        required: false\n        schema:\n          $ref: '#/components/schemas/ProductCategoryEnum'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Reservation'\n                type: array\n          description: List of all reservations is returned if productCategory parameter\n            is not specified.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: List all Reservations.\n      tags:\n      - Reservations\n    post:\n      description: Creates new package reservation for authenticated account.\n      operationId: reservationsPost\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReservationRequest'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservation'\n          description: Returns created reservation instance.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource could not been found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc\n      summary: Create a reservation.\n      tags:\n      - Reservations\n  /reservations/{reservationId}:\n    get:\n      description: Retrieves the reservations with the specified identifier. All date\n        \u0026 times are in UTC.\n      operationId: reservationsReservationIdGet\n      parameters:\n      - description: The reservation's ID.\n        example: e6afba51-7de8-4080-83ab-0f915570659c\n        explode: false\n        in: path\n        name: reservationId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservation'\n          description: The matched reservation.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to wrong data. Please check the provided\n            parameters and try again.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource could not been found.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource was not in the correct\n            state.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: Get a reservation.\n      tags:\n      - Reservations\n  /reservations/{reservationId}/actions/auto-renew/disable:\n    description: Disable auto-renewal for reservation by the reservation id.\n    post:\n      description: Disable auto-renewal for reservation by reservation id.\n      operationId: reservationsReservationIdActionsAutoRenewDisablePost\n      parameters:\n      - description: The reservation's ID.\n        example: e6afba51-7de8-4080-83ab-0f915570659c\n        explode: false\n        in: path\n        name: reservationId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReservationAutoRenewDisableRequest'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservation'\n          description: Reservation with auto-renewal disabled\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource could not been found.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource was not in the correct\n            state.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc\n      summary: Disable auto-renewal for reservation by id.\n      tags:\n      - Reservations\n  /reservations/{reservationId}/actions/auto-renew/enable:\n    description: Enable auto-renewal for reservation by the reservation id.\n    post:\n      description: Enable auto-renewal for unexpired reservation by reservation id.\n      operationId: reservationsReservationIdActionsAutoRenewEnablePost\n      parameters:\n      - description: The reservation's ID.\n        example: e6afba51-7de8-4080-83ab-0f915570659c\n        explode: false\n        in: path\n        name: reservationId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservation'\n          description: Reservation with auto-renewal enabled.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource could not been found.\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource was not in the correct\n            state.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc\n      summary: Enable auto-renewal for unexpired reservation by reservation id.\n      tags:\n      - Reservations\n  /reservations/{reservationId}/actions/convert:\n    description: Convert reservation pricing model.\n    post:\n      description: Convert reservation pricing model by reservation id.\n      operationId: reservationsReservationIdActionsConvertPost\n      parameters:\n      - description: The reservation's ID.\n        example: e6afba51-7de8-4080-83ab-0f915570659c\n        explode: false\n        in: path\n        name: reservationId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReservationRequest'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservation'\n          description: Converted reservation.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since the resource could not been found.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc\n      summary: Convert reservation pricing model by reservation ID.\n      tags:\n      - Reservations\n  /account-billing-configurations/me:\n    description: Retrieves billing configuration associated with the authenticated\n      account.\n    get:\n      description: Retrieves billing configuration associated with the authenticated\n        account.\n      operationId: accountBillingConfigurationMeGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationDetails'\n          description: Billing configuration details for the account\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to invalid credentials. Please check\n            the provided credentials and try again.\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed since this resource cannot be accessed by\n            the provided credentials.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: Retrieves billing configuration associated with the authenticated account.\n      tags:\n      - Billing Configurations\n  /product-availability:\n    description: Retrieves all product availabilities.\n    get:\n      description: Retrieves the list of product availability details.\n      operationId: productAvailabilityGet\n      parameters:\n      - description: Product category. Currently only SERVER category is supported.\n        example:\n        - SERVER\n        explode: true\n        in: query\n        name: productCategory\n        required: false\n        schema:\n          items:\n            enum:\n            - SERVER\n            type: string\n          type: array\n        style: form\n      - example:\n        - d1.c1.small\n        explode: true\n        in: query\n        name: productCode\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - description: Show only locations where product with requested quantity is\n          available or all locations where product is offered.\n        example: true\n        explode: true\n        in: query\n        name: showOnlyMinQuantityAvailable\n        required: false\n        schema:\n          default: true\n          type: boolean\n        style: form\n      - example:\n        - PHX\n        explode: true\n        in: query\n        name: location\n        required: false\n        schema:\n          items:\n            $ref: '#/components/schemas/LocationEnum'\n          type: array\n        style: form\n      - example:\n        - SERVER_RANCHER\n        explode: true\n        in: query\n        name: solution\n        required: false\n        schema:\n          items:\n            enum:\n            - SERVER_RANCHER\n            type: string\n          type: array\n        style: form\n      - description: \"Minimal quantity of product needed. Minimum, maximum and default\\\n          \\ values might differ for different products. For servers, they are 1, 10\\\n          \\ and 1 respectively.\"\n        example: 2\n        explode: true\n        in: query\n        name: minQuantity\n        required: false\n        schema:\n          type: number\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ProductAvailability'\n                type: array\n          description: List of all product availabilities.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The request failed due to wrong data. Please check the provided\n            parameters and try again.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: The server encountered an unexpected condition that prevented\n            it from fulfilling the request.\n      security:\n      - OAuth2:\n        - bmc.read\n      summary: List all Product availabilities.\n      tags:\n      - Products\ncomponents:\n  responses:\n    BadRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request failed due to wrong data. Please check the provided\n        parameters and try again.\n    NotFound:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request failed since the resource could not been found.\n    Conflict:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request failed since the resource was not in the correct state.\n    Unauthorized:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request failed due to invalid credentials. Please check the\n        provided credentials and try again.\n    Forbidden:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The request failed since this resource cannot be accessed by the\n        provided credentials.\n    InternalServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: The server encountered an unexpected condition that prevented it\n        from fulfilling the request.\n  schemas:\n    RatedUsageRecord:\n      description: Rated usage record.\n      properties:\n        id:\n          description: The unique identifier of the rated usage record.\n          example: ec4a9d49-1cef-49e9-b85e-b560f88bcd26\n          type: string\n        productCategory:\n          description: The category of the product associated with this usage record.\n          enum:\n          - bmc-server\n          - bandwidth\n          - operating-system\n          - public-ip\n          - storage\n          example: bmc-server\n          type: string\n        productCode:\n          description: The code identifying the product associated to this usage record.\n          example: s1.c1.small\n          type: string\n        location:\n          $ref: '#/components/schemas/LocationEnum'\n        yearMonth:\n          description: Year and month of the usage record.\n          example: 2020-03\n          type: string\n        startDateTime:\n          description: The point in time (in UTC) when usage has started.\n          example: 2020-03-19T16:39:00Z\n          format: date-time\n          type: string\n        endDateTime:\n          description: The point in time (in UTC) until usage has been rated.\n          example: 2020-03-20T17:00:00Z\n          format: date-time\n          type: string\n        cost:\n          description: The rated usage in cents.\n          example: 384\n          format: int64\n          type: integer\n        costDescription:\n          description: The rated usage cost description.\n          example: 24 Hour(s) @ $0.16 /Hour\n          type: string\n        priceModel:\n          description: The price model applied to this usage record.\n          example: hourly\n          type: string\n        unitPrice:\n          description: The unit price.\n          example: 0.16\n          type: number\n        unitPriceDescription:\n          description: User friendly description of the unit price.\n          example: per hour\n          type: string\n        quantity:\n          description: The number of units being charged.\n          example: 24.0\n          type: number\n        active:\n          description: A flag indicating whether the rated usage record is still active.\n          example: true\n          type: boolean\n        usageSessionId:\n          description: \"The usage session ID is used to correlate rated usage records\\\n            \\ across periods of time. For example, a server used for over a month\\\n            \\ will generate multiple rated usage records. The entire usage session\\\n            \\ cost can be computed by aggregating the records having the same usage\\\n            \\ session ID. It is usual to have one rated usage record per month or\\\n            \\ invoice.\"\n          example: ec4a9d49-1cef-49e9-b85e-b560f88bcd26\n          type: string\n        correlationId:\n          description: Holds usage record id\n          example: ec4a9d49-1cef-49e9-b85e-b560f88bcd26\n          type: string\n        reservationId:\n          description: Reservation id associated with this rated usage record.\n          example: c32a24a1-5949-4b60-99c0-c8aaa3a92b04\n          type: string\n      required:\n      - active\n      - correlationId\n      - cost\n      - endDateTime\n      - id\n      - location\n      - priceModel\n      - productCategory\n      - productCode\n      - quantity\n      - startDateTime\n      - unitPrice\n      - unitPriceDescription\n      - usageSessionId\n      type: object\n    ServerRecord:\n      allOf:\n      - $ref: '#/components/schemas/RatedUsageRecord'\n      - $ref: '#/components/schemas/ServerRecord_allOf'\n    ServerDetails:\n      description: Details of the server associated with this rated usage record.\n      properties:\n        id:\n          description: The server identifier as returned by the BMC API.\n          example: 83604275-bdba-490a-b87a-978e8dffdb14\n          type: string\n        hostname:\n          description: The server hostname.\n          example: example-server\n          type: string\n      required:\n      - hostname\n      - id\n      type: object\n    OperatingSystemRecord:\n      allOf:\n      - $ref: '#/components/schemas/RatedUsageRecord'\n      - $ref: '#/components/schemas/OperatingSystemRecord_allOf'\n    OperatingSystemDetails:\n      description: Details of the operating system associated with this rated usage\n        record.\n      properties:\n        cores:\n          description: Number of cores.\n          example: 2\n          format: int32\n          type: integer\n        correlationId:\n          description: \"Correlation is used to associate Operating System License\\\n            \\ charges and the Server on which it was installed. In this scenario,\\\n            \\ the correlation ID will be equal to the rated usage record ID representing\\\n            \\ the charge for the Server.\"\n          example: ec4a9d49-1cef-49e9-b85e-b560f88bcd26\n          type: string\n      required:\n      - cores\n      - correlationId\n      type: object\n    BandwidthRecord:\n      allOf:\n      - $ref: '#/components/schemas/RatedUsageRecord'\n      - $ref: '#/components/schemas/BandwidthRecord_allOf'\n    BandwidthDetails:\n      description: Details of the bandwidth associated with this rated usage record.\n      properties:\n        ingressGb:\n          description: The amount of GB consumed in ingress (IN).\n          example: 1.33\n          type: number\n        egressGb:\n          description: The amount of GB consumed in egress (OUT).\n          example: 1.33\n          type: number\n        packageQuantity:\n          description: Package size per month.\n          example: 15\n          type: number\n        packageUnit:\n          description: Package size unit.\n          enum:\n          - GB\n          - TB\n          type: string\n      required:\n      - egressGb\n      - ingressGb\n      type: object\n    PublicSubnetRecord:\n      allOf:\n      - $ref: '#/components/schemas/RatedUsageRecord'\n      - $ref: '#/components/schemas/PublicSubnetRecord_allOf'\n    PublicSubnetDetails:\n      description: Details of public subnets.\n      properties:\n        id:\n          description: Public Subnet identifier as returned by the BMC API.\n          example: 83604275-bdba-490a-b87a-978e8dffdb14\n          type: string\n        cidr:\n          description: Classless Inter-Domain Routing\n          example: 192.168.0.15/24\n          type: string\n        size:\n          description: CIDR size\n          example: /24\n          type: string\n      required:\n      - cidr\n      - size\n      type: object\n    StorageRecord:\n      allOf:\n      - $ref: '#/components/schemas/RatedUsageRecord'\n      - $ref: '#/components/schemas/StorageRecord_allOf'\n    StorageDetails:\n      description: Details of the storage associated with this rated usage record.\n      properties:\n        networkStorageId:\n          description: Network storage ID.\n          example: 123asd239-323las2d2-123123a\n          type: string\n        networkStorageName:\n          description: Network storage name.\n          example: First network storage.\n          type: string\n        volumeId:\n          description: Volume ID.\n          example: 123asd239-323las2d2-123123a\n          type: string\n        volumeName:\n          description: Volume name.\n          example: First volume.\n          type: string\n        capacityInGb:\n          description: Capacity in GB.\n          example: 150000\n          format: int64\n          type: integer\n        createdOn:\n          description: Timestamp when the record was created.\n          example: 2020-03-19T16:39:00Z\n          format: date-time\n          type: string\n      required:\n      - capacityInGb\n      - createdOn\n      - networkStorageId\n      - networkStorageName\n      - volumeId\n      - volumeName\n      type: object\n    Product:\n      description: Product details\n      properties:\n        productCode:\n          description: The code identifying the product. This code has significant\n            across all locations.\n          example: s1.c1.small\n          type: string\n        productCategory:\n          description: The product category.\n          example: SERVER\n          type: string\n        plans:\n          description: The pricing plans available for this product.\n          items:\n            $ref: '#/components/schemas/PricingPlan'\n          type: array\n      required:\n      - productCategory\n      - productCode\n      type: object\n    PricingPlan:\n      description: Pricing plan details.\n      properties:\n        sku:\n          description: The SKU identifying this pricing plan.\n          example: XXX-XXX-XXX\n          type: string\n        skuDescription:\n          description: Description of this pricing plan.\n          example: Hourly Rate for s1.c1.small in Phoenix\n          type: string\n        location:\n          description: The code identifying the location.\n          enum:\n          - PHX\n          - ASH\n          - NLD\n          - SGP\n          - CHI\n          - SEA\n          - AUS\n          - GLOBAL\n          example: PHX\n          type: string\n        pricingModel:\n          description: The pricing model.\n          enum:\n          - HOURLY\n          - METERED\n          - ONE_MONTH_RESERVATION\n          - TWELVE_MONTHS_RESERVATION\n          - TWENTY_FOUR_MONTHS_RESERVATION\n          - THIRTY_SIX_MONTHS_RESERVATION\n          - MONTHLY_PACKAGE\n          - FREE_TIER\n          example: HOURLY\n          type: string\n        price:\n          description: The price per unit.\n          example: 0.22\n          type: number\n        priceUnit:\n          $ref: '#/components/schemas/PriceUnitEnum'\n        correlatedProductCode:\n          description: Product code of the product this product is correlated with\n          example: s1.c1.small\n          type: string\n        packageQuantity:\n          description: Package size per month.\n          example: 50\n          type: number\n        packageUnit:\n          description: Package size unit.\n          enum:\n          - GB\n          - TB\n          type: string\n      required:\n      - location\n      - price\n      - priceUnit\n      - pricingModel\n      - sku\n      type: object\n    ServerProduct:\n      allOf:\n      - $ref: '#/components/schemas/Product'\n      - $ref: '#/components/schemas/ServerProduct_allOf'\n    ServerProductMetadata:\n      description: Details of the server product.\n      properties:\n        ramInGb:\n          description: RAM in GB.\n          example: 256\n          type: number\n        cpu:\n          description: CPU name.\n          example: Dual Gold 6258R\n          type: string\n        cpuCount:\n          description: Number of CPUs.\n          example: 56\n          type: number\n        coresPerCpu:\n          description: The number of physical cores present on each CPU.\n          example: 2\n          type: number\n        cpuFrequency:\n          description: CPU frequency in GHz.\n          example: 2.7\n          type: number\n        network:\n          description: Server network.\n          example: 2x 25Gbps\n          type: string\n        storage:\n          description: Server storage.\n          example: 2x 2TB NVMe\n          type: string\n      required:\n      - coresPerCpu\n      - cpu\n      - cpuCount\n      - cpuFrequency\n      - network\n      - ramInGb\n      - storage\n      type: object\n    Reservation:\n      description: Reservation details\n      example:\n        priceUnit: MONTH\n        nextBillingDate: 2020-04-19T00:00:00.000+00:00\n        initialInvoiceModel: null\n        endDateTime: 2020-04-19T16:39:00Z\n        productCategory: server\n        lastRenewalDateTime: 2020-03-19T16:39:00Z\n        productCode: s1.c1.small\n        startDateTime: 2020-03-19T16:39:00Z\n        price: 175.0\n        reservationModel: null\n        autoRenew: true\n        location: null\n        id: 83604275-bdba-490a-b87a-978e8dffdb14\n        assignedResourceId: 83604275-bdba-490a-b87a-978e8dffdb14\n        sku: XXX-XXX-XXX\n        nextRenewalDateTime: 2020-04-19T16:39:00Z\n      properties:\n        id:\n          description: The reservation identifier.\n          example: 83604275-bdba-490a-b87a-978e8dffdb14\n          type: string\n        productCode:\n          description: The code identifying the product. This code has significant\n            across all locations.\n          example: s1.c1.small\n          type: string\n        productCategory:\n          description: The product category.\n          enum:\n          - server\n          - bandwidth\n          - operating-system\n          example: server\n          type: string\n        location:\n          $ref: '#/components/schemas/LocationEnum'\n        reservationModel:\n          $ref: '#/components/schemas/ReservationModelEnum'\n        initialInvoiceModel:\n          $ref: '#/components/schemas/ReservationInvoicingModelEnum'\n        startDateTime:\n          description: The point in time (in UTC) when the reservation starts.\n          example: 2020-03-19T16:39:00Z\n          format: date-time\n          type: string\n        endDateTime:\n          description: The point in time (in UTC) when the reservation end.\n          example: 2020-04-19T16:39:00Z\n          format: date-time\n          type: string\n        lastRenewalDateTime:\n          description: The point in time (in UTC) when the reservation was renewed\n            last.\n          example: 2020-03-19T16:39:00Z\n          format: date-time\n          type: string\n        nextRenewalDateTime:\n          description: The point in time (in UTC) when the reservation will be renewed\n            if auto renew is set to true.\n          example: 2020-04-19T16:39:00Z\n          format: date-time\n          type: string\n        autoRenew:\n          description: A flag indicating whether the reservation will auto-renew (default\n            is true).\n          example: true\n          type: boolean\n        sku:\n          description: The sku that will be applied to this reservation. It is useful\n            to find out the price by querying the /product endpoint.\n          example: XXX-XXX-XXX\n          type: string\n        price:\n          description: Reservation price.\n          example: 175.0\n          type: number\n        priceUnit:\n          $ref: '#/components/schemas/PriceUnitEnum'\n        assignedResourceId:\n          description: The resource ID currently being assigned to Reservation.\n          example: 83604275-bdba-490a-b87a-978e8dffdb14\n          type: string\n        nextBillingDate:\n          description: Next billing date for Reservation.\n          example: 2020-04-19\n          format: date\n          type: string\n      required:\n      - autoRenew\n      - id\n      - location\n      - price\n      - priceUnit\n      - productCategory\n      - productCode\n      - reservationModel\n      - sku\n      - startDateTime\n      type: object\n    ConfigurationDetails:\n      description: Billing configuration details.\n      example:\n        thresholdConfiguration:\n          thresholdAmount: 100.0\n      properties:\n        thresholdConfiguration:\n          $ref: '#/components/schemas/ThresholdConfigurationDetails'\n      type: object\n    ThresholdConfigurationDetails:\n      description: Threshold billing configuration.\n      example:\n        thresholdAmount: 100.0\n      properties:\n        thresholdAmount:\n          description: Threshold billing amount.\n          example: 100.0\n          type: number\n      required:\n      - thresholdAmount\n      type: object\n    ProductAvailability:\n      description: Product availability details.\n      example:\n        productCode: d1.c1.small\n        locationAvailabilityDetails:\n        - availableQuantity: 5\n          minQuantityRequested: 2\n          minQuantityAvailable: true\n          solutions:\n          - SERVER_RANCHER\n          - SERVER_RANCHER\n          location: null\n        - availableQuantity: 5\n          minQuantityRequested: 2\n          minQuantityAvailable: true\n          solutions:\n          - SERVER_RANCHER\n          - SERVER_RANCHER\n          location: null\n        productCategory: SERVER\n      properties:\n        productCode:\n          description: Product code.\n          example: d1.c1.small\n          type: string\n        productCategory:\n          description: Product category.\n          example: SERVER\n          type: string\n        locationAvailabilityDetails:\n          items:\n            $ref: '#/components/schemas/LocationAvailabilityDetail'\n          type: array\n      required:\n      - locationAvailabilityDetails\n      - productCategory\n      - productCode\n      type: object\n    LocationAvailabilityDetail:\n      description: \"Info about location, solutions and availability for a product.\"\n      example:\n        availableQuantity: 5\n        minQuantityRequested: 2\n        minQuantityAvailable: true\n        solutions:\n        - SERVER_RANCHER\n        - SERVER_RANCHER\n        location: null\n      properties:\n        location:\n          $ref: '#/components/schemas/LocationEnum'\n        minQuantityRequested:\n          description: Requested quantity.\n          example: 2\n          type: number\n        minQuantityAvailable:\n          description: Is product available in specific location for requested quantity\n          example: true\n          type: boolean\n        availableQuantity:\n          description: Total available quantity of product in specific location. Max\n            value is 10.\n          example: 5\n          type: number\n        solutions:\n          description: Solutions supported in specific location for a product.\n          items:\n            enum:\n            - SERVER_RANCHER\n            type: string\n          type: array\n      required:\n      - availableQuantity\n      - location\n      - minQuantityAvailable\n      - minQuantityRequested\n      - solutions\n      type: object\n    ReservationAutoRenewDisableRequest:\n      description: Disabling auto-renewal for reservation request.\n      example:\n        autoRenewDisableReason: autoRenewDisableReason\n      properties:\n        autoRenewDisableReason:\n          type: string\n      type: object\n    ReservationRequest:\n      description: Reservation request.\n      example:\n        sku: XXX-XXX-XXX\n      properties:\n        sku:\n          description: The sku code of product pricing plan.\n          example: XXX-XXX-XXX\n          type: string\n      required:\n      - sku\n      type: object\n    LocationEnum:\n      description: The location code.\n      enum:\n      - PHX\n      - ASH\n      - NLD\n      - SGP\n      - CHI\n      - SEA\n      - AUS\n      type: string\n    ReservationModelEnum:\n      description: The reservation model.\n      enum:\n      - ONE_MONTH_RESERVATION\n      - TWELVE_MONTHS_RESERVATION\n      - TWENTY_FOUR_MONTHS_RESERVATION\n      - THIRTY_SIX_MONTHS_RESERVATION\n      - FREE_TIER\n      type: string\n    ReservationInvoicingModelEnum:\n      description: Reservations created with initial invoice model ON_CREATION will\n        be invoiced on same date when reservation is created. Reservation created\n        with CALENDAR_MONTH initial invoice model will be invoiced at the beginning\n        of next month.\n      enum:\n      - ON_CREATION\n      - CALENDAR_MONTH\n      type: string\n    ProductCategoryEnum:\n      description: The product category.\n      enum:\n      - SERVER\n      - BANDWIDTH\n      - OPERATING_SYSTEM\n      - PUBLIC_IP\n      - STORAGE\n      type: string\n    PriceUnitEnum:\n      description: The unit to which the price applies.\n      enum:\n      - HOUR\n      - MONTH\n      - GB\n      - UNIT\n      - FLAT\n      - TB_PER_HOUR\n      example: MONTH\n      type: string\n    Error:\n      properties:\n        message:\n          description: The description detailing the cause of the error code.\n          readOnly: true\n          type: string\n        validationErrors:\n          description: \"Validation errors, if any.\"\n          items:\n            type: string\n          readOnly: true\n          type: array\n      required:\n      - message\n      type: object\n    ratedUsageGet_200_response_inner:\n      discriminator:\n        mapping:\n          bmc-server: '#/components/schemas/ServerRecord'\n          bandwidth: '#/components/schemas/BandwidthRecord'\n          operating-system: '#/components/schemas/OperatingSystemRecord'\n          public-ip: '#/components/schemas/PublicSubnetRecord'\n          storage: '#/components/schemas/StorageRecord'\n        propertyName: productCategory\n      oneOf:\n      - $ref: '#/components/schemas/ServerRecord'\n      - $ref: '#/components/schemas/BandwidthRecord'\n      - $ref: '#/components/schemas/OperatingSystemRecord'\n      - $ref: '#/components/schemas/PublicSubnetRecord'\n      - $ref: '#/components/schemas/StorageRecord'\n    productsGet_200_response_inner:\n      discriminator:\n        mapping:\n          SERVER: '#/components/schemas/ServerProduct'\n          BANDWIDTH: '#/components/schemas/Product'\n          OPERATING_SYSTEM: '#/components/schemas/Product'\n          STORAGE: '#/components/schemas/Product'\n          PUBLIC_IP: '#/components/schemas/Product'\n        propertyName: productCategory\n      oneOf:\n      - $ref: '#/components/schemas/Product'\n      - $ref: '#/components/schemas/ServerProduct'\n    ServerRecord_allOf:\n      description: Server usage record.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ServerDetails'\n      required:\n      - metadata\n      type: object\n    OperatingSystemRecord_allOf:\n      description: Operating system usage record.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/OperatingSystemDetails'\n      required:\n      - metadata\n      type: object\n    BandwidthRecord_allOf:\n      description: Bandwidth usage record.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/BandwidthDetails'\n      required:\n      - metadata\n      type: object\n    PublicSubnetRecord_allOf:\n      description: Public IP record.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/PublicSubnetDetails'\n      required:\n      - metadata\n      type: object\n    StorageRecord_allOf:\n      description: Storage usage record.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/StorageDetails'\n      required:\n      - metadata\n      type: object\n    ServerProduct_allOf:\n      description: Server product.\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ServerProductMetadata'\n      required:\n      - metadata\n      type: object\n  securitySchemes:\n    OAuth2:\n      flows:\n        clientCredentials:\n          scopes:\n            bmc: Grants full access to bmc-api.\n            bmc.read: Grants read only access to bmc-api.\n          tokenUrl: https://auth.phoenixnap.com/auth/realms/BMC/protocol/openid-connect/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/phoenixnap/go-sdk-bmc@1b7570be156fa3ddfcbd2059faa8566b4e289e35/-/blob/billingapi/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/phoenixnap/go-sdk-bmc/blob/1b7570be156fa3ddfcbd2059faa8566b4e289e35/billingapi/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: operations: path \"/products\": get: responses: code 200: contents: media: \"application/json\": generate schema: item: oneOf: discriminator: unable to map \"SERVER\" to \"https://raw.githubusercontent.com/phoenixnap/go-sdk-bmc/1b7570be156fa3ddfcbd2059faa8566b4e289e35/billingapi/api/openapi.yaml#/components/schemas/ServerProduct\"",
	"NotImplemented": [
		"oauth2 security"
	]
}