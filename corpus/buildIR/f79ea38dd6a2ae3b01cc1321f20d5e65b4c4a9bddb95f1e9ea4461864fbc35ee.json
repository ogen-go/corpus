{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sciebo-RDS/Sciebo-RDS"
		},
		"file": {
			"name": "interface_port_file_storage.yml",
			"size": 0,
			"path": "RDS/layer2_use_cases/interface_port_file_storage.yml",
			"byteSize": 5632,
			"content": "openapi: 3.0.0\ninfo:\n  title: Interface for Ports used as file storage\n  version: '1.0'\n  description: \u003e-\n    This document describes the interface of the port owncloud from the\n    innermost circle of the rds architecture to the second circle.\n  contact:\n    name: Peter Heiss\n    email: peter.heiss@uni-muenster.de\n    url: 'https://www.research-data-services.org'\nservers:\n  - url: 'http://port:3000/storage'\npaths:\n  /file:\n    parameters: []\n    get:\n      summary: Get file\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n      description: Returns the file\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filepath:\n                  type: string\n                userId:\n                  $ref: '#/components/schemas/portusername'\n              required:\n                - filepath\n    post:\n      summary: Create the file in filepath\n      responses:\n        '200':\n          description: OK\n      description: Create the file\n      parameters: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filepath:\n                  type: string\n                userId:\n                  $ref: '#/components/schemas/portusername'\n                files:\n                  type: object\n              required:\n                - filepath\n    delete:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      description: Delete the file\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filepath:\n                  type: string\n                userId:\n                  $ref: '#/components/schemas/portusername'\n              required:\n                - filepath\n        description: ''\n    patch:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      description: Update the file\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filepath:\n                  type: string\n                userId:\n                  $ref: '#/components/schemas/portusername'\n              required:\n                - filepath\n  /folder:\n    get:\n      summary: Returns all filenames in filepath\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  files:\n                    type: array\n                    items:\n                      type: string\n              examples:\n                requests \"/\":\n                  value:\n                    files:\n                      - /folder1/\n                      - /folder2/\n                      - /file1\n                requests \"/folder1\":\n                  value:\n                    files:\n                      - /folder1/file1\n                      - /folder1/file2\n                      - /folder1/innerFolder1/\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filepath:\n                  type: string\n                userId:\n                  $ref: '#/components/schemas/portusername'\n      description: \u003e-\n        Returns all files and folders within filepath, if it is a folder.\n        Otherwise the array is empty.\n\n\n        The paths needs to be absolute, so the user can request the returned\n        elements without any string modifcations.\n\n        Folders are marked with slash / at the end. Files does not have this\n        slash. \n\n        The lookup for files and folders is not recursive. The user make a\n        request by himself for the recursive folder lookup for your returned\n        array. \n    parameters: []\ntags:\n  - name: deposit\n    description: All about depositions\n  - name: creator\n    description: All about user and deposition creators\n  - name: misc\n    description: Everything else.\ncomponents:\n  schemas:\n    portusername:\n      title: username for port\n      type: string\n      description: \u003e-\n        This field is very special, because this helps very much to work with\n        ports. So it has 2 different styles: The session and the normal format.\n        The normal format will be used, when the port have to make the search by\n        themself for example against the token storage.\n\n        The session format will be used to provide the login credentials through\n        the RDS system directly to the port, without the need to lookup from\n        port. The first part \u003cport-name\u003e symbolize, which port should parse the\n        following credentials and is equal to the name, which set the port by\n        themself in the registration-process at startup. It can be ignored by\n        the port, but should not. The username and password are the user inputs\n        from the web ui provided by token storage.\n\n        Beware: Do not use a token (e.g. for oauth) as password, because this is\n        used in the token field.\n\n\n        session format:\n\n        \u003cport-name\u003e://\u003cusername\u003e:\u003cpassword\u003e\n\n\n        normal format:\n\n        \u003cusername\u003e\n"
		}
	},
	"Error": "buildIR: make ir: path \"/file\": get: responses: 200: contents: application/octet-stream: octet stream with schema not supported"
}