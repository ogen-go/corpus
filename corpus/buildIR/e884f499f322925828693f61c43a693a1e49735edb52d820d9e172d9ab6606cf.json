{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dgruber/drmaa2os"
		},
		"file": {
			"name": "jobtracker_1_0_0_openapi_v3.yaml",
			"size": 0,
			"path": "pkg/jobtracker/remote/jobtracker_1_0_0_openapi_v3.yaml",
			"byteSize": 15591,
			"content": "iopenapi: 3.0.0\ninfo:\n  description: 'DRMAA2OS JobTracker API allows to manage batch jobs using various backend interfaces. It implements the JobTracker interface from the DRMAA2OS project. It does not implement the wait() call which must be implemented on the client side by other means.'\n  version: \"1.0.0\"\n  title: \"JobTracker API\"\n  contact:\n    name: 'Daniel Gruber'\n    url: 'https://github.com/dgruber/drmaa2os'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - description: 'JobTracker API'\n    url: https://virtserver.swaggerhub.com/dgruber7/jobtracker/1.0.0\n  - description: 'host location'\n    url: '{server}/v1'\n    variables:\n      server:\n        default: https://api.example.com\n        enum:\n          - https://localhost:32320\n          - http://localhost:32321\n          - https://master:32320\n          - http://master:32321\npaths:\n  /listjobs:\n    get:\n      summary: 'lists jobs managed by jobtracker'\n      operationId: listJobs\n      description: |\n        Returns all jobs managed by the JobTracker independent of the state. That might get enhanced by a filter.\n      parameters:\n        - in: query\n          name: skip\n          description: number of records to skip for pagination\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - in: query\n          name: limit\n          description: maximum number of records to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 100000\n      responses:\n        '200':\n          description: 'jobs visible to jobtracker'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/JobID'\n        '400':\n          description: bad input parameter\n  /listarrayjobs:\n    get:\n      summary: 'lists job IDs for a given array job ID'\n      operationId: listArrayJobs\n      description: |\n        Returns all job IDs for a given array job ID which can be used in the job ID based API calls.\n      parameters:\n        - in: query\n          name: arrayJobID\n          description: 'array job ID'\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: skip\n          description: 'number of records to skip for pagination'\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - in: query\n          name: limit\n          description: | \n            Maximum number of records to return. If not given the number of records are not limited.\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 100000\n      responses:\n        '200':\n          description: |\n            Job IDs representing the single task of the given job array.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/JobID'\n        '400':\n          description: 'bad input parameter'\n        '404':\n          description: 'job not found'\n  /addjob:\n    post:\n      summary: 'submits a job based on a job template'\n      operationId: addJob\n      description: |\n        Submits a batch job described by a DRMAA2 job template to the remote backend.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobTemplate'\n      responses:\n        '200':\n          description: 'job submission accepted but there might be an error hence Error must be checked in the reponse'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddJobOutput'\n        '400':\n          description: 'bad input parameter'\n  /addarrayjob:\n    post:\n      summary: 'submits a set of jobs sharing the same job template'\n      operationId: addArrayJob\n      description: |\n        Submits an array of jobs based on the same job template. The amount of tasks depends on begin, end, and step. For example begin = 1, end = 10, step = 1 runs 10 tasks with task IDs ranging from 1 to 10.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n              - $ref: '#/components/schemas/JobTemplate'\n              - type: object\n                required:\n                  - begin\n                  - end\n                properties:\n                  begin:\n                    type: integer\n                    format: int64\n                  end:\n                    type: integer\n                    format: int64\n                  step:\n                    type: integer\n                    format: int64\n                  maxParallel:\n                    type: integer\n                    format: int64\n      responses:\n        '200':\n          description: 'returns the job array ID or an error if something went wrong'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddArrayJobOutput'\n        '400':\n          description: bad input parameter\n  /jobstate:\n    get:\n      summary: 'returns the state of a job'\n      operationId: jobState\n      description: |\n        Returns the state of the job represented by the given job ID. Depending on the backend it might also return a job substate with a more granular backend specific state.\n      parameters:\n        - in: query\n          name: jobID\n          required: true\n          description: 'job ID the current job state should be queried for'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'state of the given job'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobStateOutput'\n        '404':\n          description: 'job ID not found or internal error'\n  /jobinfo:\n    get:\n      summary: 'retuns detailed information about a job' \n      operationId: jobInfo\n      description: |\n        Returns a description based on DRMAA2's JobInfo specification about the detailed state of a job or an error string in case of an error.\n      parameters:\n        - in: query\n          name: jobID\n          required: true\n          description: 'ID if the job for which the JobInfo should be returned'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'DRMAA2 job info about a specific job'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobInfoOutput'\n        '404':\n          description: 'job ID not found'\n  /jobcontrol:\n    get:\n      summary: 'changes the state of a job'\n      operationId: jobControl\n      description: |\n        Returns all jobs managed by the JobTracker independent of the state. That might get enhanced by a filter.\n      parameters:\n        - in: query\n          name: jobID\n          required: true\n          description: 'ID of the job to manipulate'\n          schema:\n            type: string\n        - in: query\n          name: action\n          required: true\n          description: 'action to perform (suspend, resume, hold, release, terminate)'\n          schema:\n            type: string\n            enum: [suspend, resume, hold, release, terminate]\n      responses:\n        '200':\n          description: 'job control execution result'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: 'bad input parameter'\n        '404':\n          description: 'job ID not found'\n  /deletejob:\n    get:\n      summary: 'removes a finished job from interal DB'\n      operationId: deleteJob\n      description: |\n        If there is not automatic reaping of finished jobs of the execution backend\n        they might get stored for an infinit amount of time. This delete method removes\n        a job from the backend. For doing so the job must be in an end state (done,\n        failed).\n      parameters:\n        - in: query\n          name: jobID\n          required: true\n          description: 'ID of the job to manipulate'\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Job deletion result might indicate an internal error. If the error is unset the job was deleted.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: bad input parameter\n        '404':\n          description: 'job ID not found'\n  /listjobcategories:\n    get:\n      summary: 'returns available job categories'\n      operationId: listJobCategories\n      description: |\n        Returns available job categories. Job categories are translated to the means of the workload manager. They can be container image names, job classes, etc.\n      responses:\n        '200':\n          description: jobs visible to jobtracker\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example: [\"busybox:latest\", \"myjob:latest\"]\n        '400':\n          description: bad input parameter\ncomponents:\n  schemas:\n    AddJobOutput:\n      allOf:\n      - $ref: '#/components/schemas/JobID'\n      - $ref: '#/components/schemas/Error'\n    AddArrayJobOutput:\n      allOf:\n      - $ref: '#/components/schemas/JobID'\n      - $ref: '#/components/schemas/Error'\n    Error:\n      description: \"error string\"\n      type: string\n      nullable: true\n    JobTemplate:\n      description: \"DRMAA2 job template definition\"\n      type: object\n      required:\n        - remoteCommand\n        - args\n        - submitAsHold\n        - reRunnable\n        - jobEnvironment\n        - workingDirectory\n        - jobCategory\n        - email\n        - emailOnStarted\n        - emailOnTerminated\n        - jobName\n        - inputPath\n        - outputPath\n        - errorPath\n        - joinFiles\n        - reservationID\n        - queueName\n        - minSlots\n        - maxSlots\n        - priority\n        - candidateMachines\n        - minPhysMemory\n        - machineOs\n        - machineArch\n        - startTime\n        - deadlineTime\n        - stageInFiles\n        - stageOutFiles\n        - resourceLimits\n        - accountingID\n      properties:\n        remoteCommand:\n          type: string\n          example: \"/bin/sleep\"\n        args:\n          type: array\n          items:\n            type: string\n        submitAsHold:\n          type: boolean\n        reRunnable:\n          type: boolean\n        jobEnvironment:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            MY_ENV: Content\n            MY_OTHER_ENV: Content2\n        workingDirectory:\n          type: string\n        jobCategory:\n          type: string\n        email:\n          type: array\n          items:\n            type: string\n        emailOnStarted:\n          type: boolean\n        emailOnTerminated:\n          type: boolean\n        jobName:\n          type: string\n        inputPath:\n          type: string\n        outputPath:\n          type: string\n        errorPath:\n          type: string\n        joinFiles:\n          type: boolean\n        reservationID:\n          type: string\n        queueName:\n          type: string\n        minSlots:\n          type: integer\n          format: int64\n        maxSlots:\n          type: integer\n          format: int64\n        priority:\n          type: integer\n          format: int64\n        candidateMachines:\n          type: array\n          items:\n            type: string\n        minPhysMemory:\n          type: integer\n          format: int64\n        machineOs:\n          type: string\n          example: 'BSD'\n        machineArch:\n          type: string\n          example: 'ARM64'\n        startTime:\n          type: string\n          format: date-time\n        deadlineTime:\n          type: string\n          format: date-time\n        stageInFiles:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            '/remote/destinationfile1': 'base64:content'\n            '/remote/destinationfile2': '/source/file'\n        stageOutFiles:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            '/local/destinationfile1': '/remote/output.sta'\n        resourceLimits:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            'a100': '1'\n        accountingID:\n          type: string\n          example: 'uniqueAccountingID1'\n        extension:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            \"DRMAA2_NODE_LABEL_EXTENSION\": \"spot\"\n            \"DRMAA2_NODE_HT\": \"off\"\n    JobID:\n      type: string\n      example: job123456\n    JobStateOutput:\n      allOf:\n      - $ref: '#/components/schemas/JobState'\n      - $ref: '#/components/schemas/JobSubState'      \n    JobState:\n      type: string\n      enum: [unset, undetermined, queued, queuedHeld, running, suspended, requeued, requeuedHeld, done, failed]\n      example: \"running\"\n    JobSubState:\n      type: string\n      example: \"stopping instance\"\n    JobInfoOutput:\n      allOf:\n      - $ref: '#/components/schemas/JobInfo'\n      - $ref: '#/components/schemas/Error'\n    JobInfo:\n      required:\n        - id\n        - exitStatus\n        - terminatingSignal\n        - annotation\n        - state\n        - subState\n        - allocatedMachines\n        - submissionMachine\n        - jobOwner\n        - slots\n        - queueName\n        - wallclockTime\n        - cpuTime\n        - submissionTime\n        - dispatchTime\n        - finishTime\n      properties:\n        id:\n          type: string\n          example: job123456\n        exitStatus:\n          type: integer\n          minimum: 0\n          maximum: 255\n          example: 0\n        terminatingSignal:\n          type: string\n          example: \"SIGKILL\"\n        annotation:\n          type: string\n          example: \"\"\n        state:\n          type: string\n          example: \"RUNNING\"\n        subState:\n          type: string\n          example: \"user preempted\"\n        allocatedMachines:\n          type: array\n          items:\n            type: string\n        submissionMachine:\n          type: string\n          example: \"1.10.1.13\"        \n        jobOwner:\n          type: string\n          example: \"user1\"\n        slots:\n          type: integer\n          example: \"1\"\n        queueName:\n          type: string\n          example: \"highpriority\" \n        wallclockTime:\n          type: integer\n          format: int64\n          example: \"120\" \n        cpuTime:\n          type: integer\n          format: int64\n          example: \"120\" \n        submissionTime:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:32:28Z\" \n        dispatchTime:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:33:28Z\" \n        finishTime:\n          type: string\n          format: date-time\n          example: \"2017-07-21T17:34:28Z\"\n        extension:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            \"implementation_specific_measurement\": \"xyz\"\n      type: object\n\n",
			"canonicalURL": "/github.com/dgruber/drmaa2os@e824616ebbc463e93f2e0bdf1319f921345d9f90/-/blob/pkg/jobtracker/remote/jobtracker_1_0_0_openapi_v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dgruber/drmaa2os/blob/e824616ebbc463e93f2e0bdf1319f921345d9f90/pkg/jobtracker/remote/jobtracker_1_0_0_openapi_v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/jobinfo\": get: responses: code 200: contents: application/json: generate schema: allOf: schema type mismatch: object and string"
}