{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/amazonaws.com/runtime.lex/2016-11-28/openapi.yaml",
			"byteSize": 75573,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2016-11-28'\n  x-release: v4\n  title: Amazon Lex Runtime Service\n  description: 'Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . '\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: runtime.lex\n  x-aws-signingName: lex\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/lex/'\nservers:\n  - url: 'http://runtime.lex.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Amazon Lex Runtime Service multi-region endpoint\n  - url: 'https://runtime.lex.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Amazon Lex Runtime Service multi-region endpoint\n  - url: 'http://runtime.lex.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://runtime.lex.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China (Ningxia)\npaths:\n  '/bot/{botName}/alias/{botAlias}/user/{userId}/session':\n    delete:\n      operationId: DeleteSession\n      description: 'Removes session information for a specified bot, alias, and user ID. '\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteSessionResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '483':\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalFailureException'\n        '484':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: The identifier of the user associated with the session data.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    post:\n      operationId: PutSession\n      description: '\u003cp\u003eCreates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\"\u003eManaging Sessions\u003c/a\u003e.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PutSessionResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '483':\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalFailureException'\n        '484':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '485':\n          description: NotAcceptableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotAcceptableException'\n        '486':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '487':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: 'The ID of the client application user. Amazon Lex uses this to identify a user''s conversation with your bot. '\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n        - name: Accept\n          in: header\n          required: false\n          description: '\u003cp\u003eThe message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003etext/plain; charset=utf-8\u003c/code\u003e, Amazon Lex returns text in the response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the value begins with \u003ccode\u003eaudio/\u003c/code\u003e, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify \u003ccode\u003eaudio/mpeg\u003c/code\u003e as the value, Amazon Lex returns speech in the MPEG format.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003eaudio/pcm\u003c/code\u003e, the speech is returned as \u003ccode\u003eaudio/pcm\u003c/code\u003e in 16-bit, little endian format.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe following are the accepted values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eaudio/mpeg\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eaudio/ogg\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eaudio/pcm\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eaudio/*\u003c/code\u003e (defaults to mpeg)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003etext/plain; charset=utf-8\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                sessionAttributes:\n                  description: Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/String'\n                dialogAction:\n                  description: 'Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the \u003ccode\u003eDialogAction\u003c/code\u003e data type to set the interaction to a specific state, or to return the interaction to a previous state.'\n                  type: object\n                  properties:\n                    type:\n                      allOf:\n                        - $ref: '#/components/schemas/DialogActionType'\n                        - description: '\u003cp\u003eThe next action that the bot should take in its interaction with the user. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eClose\u003c/code\u003e - Indicates that the there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDelegate\u003c/code\u003e - The next action is determined by Amazon Lex.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e - The next action is to determine the intent that the user wants to fulfill.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e - The next action is to elicit a slot value from the user.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n                    intentName:\n                      allOf:\n                        - $ref: '#/components/schemas/IntentName'\n                        - description: The name of the intent.\n                    slots:\n                      allOf:\n                        - $ref: '#/components/schemas/StringMap'\n                        - description: 'Map of the slots that have been gathered and their values. '\n                    slotToElicit:\n                      allOf:\n                        - $ref: '#/components/schemas/String'\n                        - description: The name of the slot that should be elicited from the user.\n                    fulfillmentState:\n                      allOf:\n                        - $ref: '#/components/schemas/FulfillmentState'\n                        - description: '\u003cp\u003eThe fulfillment state of the intent. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e - The Lambda function associated with the intent failed to fulfill the intent.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e - The intent has fulfilled by the Lambda function associated with the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n                    message:\n                      allOf:\n                        - $ref: '#/components/schemas/Text'\n                        - description: 'The message that should be shown to the user. If you don''t specify a message, Amazon Lex will use the message configured for the intent.'\n                    messageFormat:\n                      allOf:\n                        - $ref: '#/components/schemas/MessageFormatType'\n                        - description: '\u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePlainText\u003c/code\u003e - The message contains plain UTF-8 text.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCustomPayload\u003c/code\u003e - The message is a custom format for the client.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSSML\u003c/code\u003e - The message contains text formatted for voice output.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eComposite\u003c/code\u003e - The message contains an escaped JSON object containing one or more messages. For more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\"\u003eMessage Groups\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n                recentIntentSummaryView:\n                  description: '\u003cp\u003eA summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.\u003c/p\u003e \u003cp\u003eAn intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eintentName\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eslot names\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslotToElict\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you send the \u003ccode\u003erecentIntentSummaryView\u003c/code\u003e parameter in a \u003ccode\u003ePutSession\u003c/code\u003e request, the contents of the new summary view replaces the old summary view. For example, if a \u003ccode\u003eGetSession\u003c/code\u003e request returns three intents in the summary view and you call \u003ccode\u003ePutSession\u003c/code\u003e with one intent in the summary view, the next call to \u003ccode\u003eGetSession\u003c/code\u003e will only return one intent.\u003c/p\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/IntentSummary'\n                  minItems: 0\n                  maxItems: 3\n                activeContexts:\n                  description: '\u003cp\u003eA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\u003c/p\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ActiveContext'\n                  minItems: 0\n                  maxItems: 20\n  '/bot/{botName}/alias/{botAlias}/user/{userId}/session/':\n    get:\n      operationId: GetSession\n      description: 'Returns session information for a specified bot, alias, and user ID.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSessionResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '483':\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalFailureException'\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: 'The ID of the client application user. Amazon Lex uses this to identify a user''s conversation with your bot. '\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n        - name: checkpointLabelFilter\n          in: query\n          required: false\n          description: '\u003cp\u003eA string used to filter the intents returned in the \u003ccode\u003erecentIntentSummaryView\u003c/code\u003e structure. \u003c/p\u003e \u003cp\u003eWhen you specify a filter, only intents with their \u003ccode\u003echeckpointLabel\u003c/code\u003e field set to that string are returned.\u003c/p\u003e'\n          schema:\n            type: string\n            pattern: '[a-zA-Z0-9-]+'\n            minLength: 1\n            maxLength: 255\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type':\n    post:\n      operationId: PostContent\n      description: '\u003cp\u003e Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. \u003c/p\u003e \u003cp\u003eThe \u003ccode\u003ePostContent\u003c/code\u003e operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. \u003c/p\u003e \u003cp\u003e In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message eliciting slot data (for example, \u003ccode\u003ePizzaSize\u003c/code\u003e): \"What size pizza would you like?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \"Order the pizza?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the \u003ccode\u003emessage\u003c/code\u003e, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If the message is to elicit slot data, Amazon Lex returns the following context information: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-dialog-state\u003c/code\u003e header set to \u003ccode\u003eElicitSlot\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-intent-name\u003c/code\u003e header set to the intent name in the current context \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-slot-to-elicit\u003c/code\u003e header set to the slot name for which the \u003ccode\u003emessage\u003c/code\u003e is eliciting information \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-slots\u003c/code\u003e header set to a map of slots configured for the intent with their current values \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a confirmation prompt, the \u003ccode\u003ex-amz-lex-dialog-state\u003c/code\u003e header is set to \u003ccode\u003eConfirmation\u003c/code\u003e and the \u003ccode\u003ex-amz-lex-slot-to-elicit\u003c/code\u003e header is omitted. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the \u003ccode\u003ex-amz-dialog-state\u003c/code\u003e header is set to \u003ccode\u003eElicitIntent\u003c/code\u003e and the \u003ccode\u003ex-amz-slot-to-elicit\u003c/code\u003e header is omitted. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e In addition, Amazon Lex also returns your application-specific \u003ccode\u003esessionAttributes\u003c/code\u003e. For more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\u003eManaging Conversation Context\u003c/a\u003e. \u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostContentResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '483':\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalFailureException'\n        '484':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '485':\n          description: UnsupportedMediaTypeException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnsupportedMediaTypeException'\n        '486':\n          description: NotAcceptableException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotAcceptableException'\n        '487':\n          description: RequestTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestTimeoutException'\n        '488':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '489':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n        '490':\n          description: LoopDetectedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoopDetectedException'\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: Name of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: Alias of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: '\u003cp\u003eThe ID of the client application user. Amazon Lex uses this to identify a user''s conversation with your bot. At runtime, each request must contain the \u003ccode\u003euserID\u003c/code\u003e field.\u003c/p\u003e \u003cp\u003eTo decide the user ID to use for your application, consider the following factors.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eThe \u003ccode\u003euserID\u003c/code\u003e field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eA user can''t have two independent conversations with two different versions of the same bot. For example, a user can''t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n        - name: x-amz-lex-session-attributes\n          in: header\n          required: false\n          description: '\u003cp\u003eYou pass this value as the \u003ccode\u003ex-amz-lex-session-attributes\u003c/code\u003e HTTP header.\u003c/p\u003e \u003cp\u003eApplication-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the \u003ccode\u003esessionAttributes\u003c/code\u003e and \u003ccode\u003erequestAttributes\u003c/code\u003e headers is limited to 12 KB.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\u003eSetting Session Attributes\u003c/a\u003e.\u003c/p\u003e'\n          schema:\n            type: string\n            format: password\n        - name: x-amz-lex-request-attributes\n          in: header\n          required: false\n          description: '\u003cp\u003eYou pass this value as the \u003ccode\u003ex-amz-lex-request-attributes\u003c/code\u003e HTTP header.\u003c/p\u003e \u003cp\u003eRequest-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the \u003ccode\u003erequestAttributes\u003c/code\u003e and \u003ccode\u003esessionAttributes\u003c/code\u003e headers is limited to 12 KB.\u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\u003eSetting Request Attributes\u003c/a\u003e.\u003c/p\u003e'\n          schema:\n            type: string\n            format: password\n        - name: Content-Type\n          in: header\n          required: true\n          description: '\u003cp\u003e You pass this value as the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003e Indicates the audio format or text. The header value must start with one of the following prefixes: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ePCM format, audio data must be in little-endian byte order.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/l16; rate=16000; channels=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/x-l16; sample-rate=16000; channel-count=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eOpus format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eText format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n        - name: Accept\n          in: header\n          required: false\n          description: '\u003cp\u003e You pass this value as the \u003ccode\u003eAccept\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003e The message Amazon Lex returns in the response can be either text or speech based on the \u003ccode\u003eAccept\u003c/code\u003e HTTP header value in the request. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If the value is \u003ccode\u003etext/plain; charset=utf-8\u003c/code\u003e, Amazon Lex returns text in the response. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the value begins with \u003ccode\u003eaudio/\u003c/code\u003e, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the \u003ccode\u003eAccept\u003c/code\u003e header). For example, if you specify \u003ccode\u003eaudio/mpeg\u003c/code\u003e as the value, Amazon Lex returns speech in the MPEG format.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003eaudio/pcm\u003c/code\u003e, the speech returned is \u003ccode\u003eaudio/pcm\u003c/code\u003e in 16-bit, little endian format. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe following are the accepted values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/mpeg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/ogg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/pcm\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/* (defaults to mpeg)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n        - name: x-amz-lex-active-contexts\n          in: header\n          required: false\n          description: '\u003cp\u003eA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\u003c/p\u003e'\n          schema:\n            type: string\n            format: password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - inputStream\n              properties:\n                inputStream:\n                  description: '\u003cp\u003e User input in PCM or Opus audio format or text format as described in the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003eYou can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.\u003c/p\u003e'\n                  type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/bot/{botName}/alias/{botAlias}/user/{userId}/text':\n    post:\n      operationId: PostText\n      description: '\u003cp\u003eSends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. \u003c/p\u003e \u003cp\u003e In response, Amazon Lex returns the next \u003ccode\u003emessage\u003c/code\u003e to convey to the user an optional \u003ccode\u003eresponseCard\u003c/code\u003e to display. Consider the following example messages: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e For a user input \"I would like a pizza\", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\" \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \"Proceed with the pizza order?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \"yes\" or \"no\" user response. In addition to the \u003ccode\u003emessage\u003c/code\u003e, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the \u003ccode\u003eslotToElicit\u003c/code\u003e, \u003ccode\u003edialogState\u003c/code\u003e, \u003ccode\u003eintentName\u003c/code\u003e, and \u003ccode\u003eslots\u003c/code\u003e fields in the response. Consider the following examples: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the message is to elicit slot data, Amazon Lex returns the following context information:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003edialogState\u003c/code\u003e set to ElicitSlot \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eintentName\u003c/code\u003e set to the intent name in the current context \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslotToElicit\u003c/code\u003e set to the slot name for which the \u003ccode\u003emessage\u003c/code\u003e is eliciting information \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslots\u003c/code\u003e set to a map of slots, configured for the intent, with currently known values \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a confirmation prompt, the \u003ccode\u003edialogState\u003c/code\u003e is set to ConfirmIntent and \u003ccode\u003eSlotToElicit\u003c/code\u003e is set to null. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the \u003ccode\u003edialogState\u003c/code\u003e is set to ElicitIntent and \u003ccode\u003eslotToElicit\u003c/code\u003e is set to null. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e In addition, Amazon Lex also returns your application-specific \u003ccode\u003esessionAttributes\u003c/code\u003e. For more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\u003eManaging Conversation Context\u003c/a\u003e. \u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostTextResponse'\n        '480':\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundException'\n        '481':\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequestException'\n        '482':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '483':\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalFailureException'\n        '484':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '485':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '486':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n        '487':\n          description: LoopDetectedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoopDetectedException'\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: '\u003cp\u003eThe ID of the client application user. Amazon Lex uses this to identify a user''s conversation with your bot. At runtime, each request must contain the \u003ccode\u003euserID\u003c/code\u003e field.\u003c/p\u003e \u003cp\u003eTo decide the user ID to use for your application, consider the following factors.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eThe \u003ccode\u003euserID\u003c/code\u003e field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eA user can''t have two independent conversations with two different versions of the same bot. For example, a user can''t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - inputText\n              properties:\n                sessionAttributes:\n                  description: '\u003cp\u003eApplication-specific information passed between Amazon Lex and a client application.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\u003eSetting Session Attributes\u003c/a\u003e.\u003c/p\u003e'\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/String'\n                requestAttributes:\n                  description: '\u003cp\u003eRequest-specific information passed between Amazon Lex and a client application.\u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\u003eSetting Request Attributes\u003c/a\u003e.\u003c/p\u003e'\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/String'\n                inputText:\n                  description: The text that the user entered (Amazon Lex interprets this text).\n                  type: string\n                  minLength: 1\n                  maxLength: 1024\n                  format: password\n                activeContexts:\n                  description: '\u003cp\u003eA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\u003c/p\u003e'\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/ActiveContext'\n                  minItems: 0\n                  maxItems: 20\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    DeleteSessionResponse:\n      type: object\n      properties:\n        botName:\n          allOf:\n            - $ref: '#/components/schemas/BotName'\n            - description: The name of the bot associated with the session data.\n        botAlias:\n          allOf:\n            - $ref: '#/components/schemas/BotAlias'\n            - description: The alias in use for the bot associated with the session data.\n        userId:\n          allOf:\n            - $ref: '#/components/schemas/UserId'\n            - description: The ID of the client application user.\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The unique identifier for the session.\n    NotFoundException: {}\n    BadRequestException: {}\n    LimitExceededException: {}\n    InternalFailureException: {}\n    ConflictException: {}\n    GetSessionResponse:\n      type: object\n      properties:\n        recentIntentSummaryView:\n          allOf:\n            - $ref: '#/components/schemas/IntentSummaryList'\n            - description: '\u003cp\u003eAn array of information about the intents used in the session. The array can contain a maximum of three summaries. If more than three intents are used in the session, the \u003ccode\u003erecentIntentSummaryView\u003c/code\u003e operation contains information about the last three intents used.\u003c/p\u003e \u003cp\u003eIf you set the \u003ccode\u003echeckpointLabelFilter\u003c/code\u003e parameter in the request, the array contains only the intents with the specified label.\u003c/p\u003e'\n        sessionAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: A unique identifier for the session.\n        dialogAction:\n          allOf:\n            - $ref: '#/components/schemas/DialogAction'\n            - description: Describes the current state of the bot.\n        activeContexts:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextsList'\n            - description: '\u003cp\u003eA list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the \u003ccode\u003ePostContent\u003c/code\u003e, \u003ccode\u003ePostText\u003c/code\u003e, or \u003ccode\u003ePutSession\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eYou can use a context to control the intents that can follow up an intent, or to modify the operation of your application.\u003c/p\u003e'\n    PostContentResponse:\n      type: object\n      properties:\n        audioStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: 'The prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the \u003ccode\u003eclarificationPrompt\u003c/code\u003e configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the \u003ccode\u003econfirmationPrompt\u003c/code\u003e. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response. '\n    UnsupportedMediaTypeException: {}\n    NotAcceptableException: {}\n    RequestTimeoutException: {}\n    DependencyFailedException: {}\n    BadGatewayException: {}\n    LoopDetectedException: {}\n    PostTextResponse:\n      type: object\n      properties:\n        intentName:\n          allOf:\n            - $ref: '#/components/schemas/IntentName'\n            - description: The current user intent that Amazon Lex is aware of.\n        nluIntentConfidence:\n          allOf:\n            - $ref: '#/components/schemas/IntentConfidence'\n            - description: '\u003cp\u003eProvides a score that indicates how confident Amazon Lex is that the returned intent is the one that matches the user''s intent. The score is between 0.0 and 1.0. For more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\"\u003eConfidence Scores\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eThe score is a relative score, not an absolute score. The score may change based on improvements to Amazon Lex.\u003c/p\u003e'\n        alternativeIntents:\n          allOf:\n            - $ref: '#/components/schemas/IntentList'\n            - description: \u003cp\u003eOne to four alternative intents that may be applicable to the user's intent.\u003c/p\u003e \u003cp\u003eEach alternative includes a score that indicates how confident Amazon Lex is that the intent matches the user's intent. The intents are sorted by the confidence score.\u003c/p\u003e\n        slots:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: '\u003cp\u003e The intent slots that Amazon Lex detected from the user input in the conversation. \u003c/p\u003e \u003cp\u003eAmazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the \u003ccode\u003evalueSelectionStrategy\u003c/code\u003e selected when the slot type was created or updated. If \u003ccode\u003evalueSelectionStrategy\u003c/code\u003e is set to \u003ccode\u003eORIGINAL_VALUE\u003c/code\u003e, the value provided by the user is returned, if the user value is similar to the slot values. If \u003ccode\u003evalueSelectionStrategy\u003c/code\u003e is set to \u003ccode\u003eTOP_RESOLUTION\u003c/code\u003e Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don''t specify a \u003ccode\u003evalueSelectionStrategy\u003c/code\u003e, the default is \u003ccode\u003eORIGINAL_VALUE\u003c/code\u003e.\u003c/p\u003e'\n        sessionAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: A map of key-value pairs representing the session-specific context information.\n        message:\n          allOf:\n            - $ref: '#/components/schemas/Text'\n            - description: '\u003cp\u003eThe message to convey to the user. The message can come from the bot''s configuration or from a Lambda function.\u003c/p\u003e \u003cp\u003eIf the intent is not configured with a Lambda function, or if the Lambda function returned \u003ccode\u003eDelegate\u003c/code\u003e as the \u003ccode\u003edialogAction.type\u003c/code\u003e its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot''s configuration based on the current interaction context. For example, if Amazon Lex isn''t able to understand user input, it uses a clarification prompt message.\u003c/p\u003e \u003cp\u003eWhen you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see \u003ca\u003emsg-prompts-formats\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eIf the Lambda function returns a message, Amazon Lex passes it to the client in its response.\u003c/p\u003e'\n        sentimentResponse:\n          allOf:\n            - $ref: '#/components/schemas/SentimentResponse'\n            - description: '\u003cp\u003eThe sentiment expressed in and utterance.\u003c/p\u003e \u003cp\u003eWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\u003c/p\u003e'\n        messageFormat:\n          allOf:\n            - $ref: '#/components/schemas/MessageFormatType'\n            - description: '\u003cp\u003eThe format of the response message. One of the following values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePlainText\u003c/code\u003e - The message contains plain UTF-8 text.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCustomPayload\u003c/code\u003e - The message is a custom format defined by the Lambda function.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSSML\u003c/code\u003e - The message contains text formatted for voice output.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eComposite\u003c/code\u003e - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        dialogState:\n          allOf:\n            - $ref: '#/components/schemas/DialogState'\n            - description: '\u003cp\u003e Identifies the current state of the user interaction. Amazon Lex returns one of the following values as \u003ccode\u003edialogState\u003c/code\u003e. The client can optionally use this information to customize the user interface. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e - Amazon Lex wants to elicit user intent. \u003c/p\u003e \u003cp\u003eFor example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e - Amazon Lex is expecting a \"yes\" or \"no\" response. \u003c/p\u003e \u003cp\u003e For example, Amazon Lex wants user confirmation before fulfilling an intent. \u003c/p\u003e \u003cp\u003eInstead of a simple \"yes\" or \"no,\" a user might respond with additional information. For example, \"yes, but make it thick crust pizza\" or \"no, I want to order a drink\". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e - Amazon Lex is expecting a slot value for the current intent. \u003c/p\u003e \u003cp\u003eFor example, suppose that in the response Amazon Lex sends this message: \"What size pizza would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might also provide additional information in the response (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional information appropriately. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e - Conveys that the client has to fulfill the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e - Conveys that the conversation with the user failed. \u003c/p\u003e \u003cp\u003e This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        slotToElicit:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: 'If the \u003ccode\u003edialogState\u003c/code\u003e value is \u003ccode\u003eElicitSlot\u003c/code\u003e, returns the name of the slot for which Amazon Lex is eliciting a value. '\n        responseCard:\n          allOf:\n            - $ref: '#/components/schemas/ResponseCard'\n            - description: 'Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). '\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: A unique identifier for the session.\n        botVersion:\n          allOf:\n            - $ref: '#/components/schemas/BotVersion'\n            - description: The version of the bot that responded to the conversation. You can use this information to help determine if one version of a bot is performing better than another version.\n        activeContexts:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextsList'\n            - description: '\u003cp\u003eA list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the \u003ccode\u003ePostContent\u003c/code\u003e, \u003ccode\u003ePostText\u003c/code\u003e, or \u003ccode\u003ePutSession\u003c/code\u003e operation.\u003c/p\u003e \u003cp\u003eYou can use a context to control the intents that can follow up an intent, or to modify the operation of your application.\u003c/p\u003e'\n    String:\n      type: string\n    ActiveContext:\n      type: object\n      required:\n        - name\n        - timeToLive\n        - parameters\n      properties:\n        name:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextName'\n            - description: The name of the context.\n        timeToLive:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTimeToLive'\n            - description: The length of time or number of turns that a context remains active.\n        parameters:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextParametersMap'\n            - description: State variables for the current context. You can use these values as default values for slots in subsequent events.\n      description: 'A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the \u003ccode\u003ePutContent\u003c/code\u003e, \u003ccode\u003ePutText\u003c/code\u003e, or \u003ccode\u003ePutSession\u003c/code\u003e operation.'\n    PutSessionResponse:\n      type: object\n      properties:\n        audioStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: The audio version of the message to convey to the user.\n    DialogActionType:\n      type: string\n      enum:\n        - ElicitIntent\n        - ConfirmIntent\n        - ElicitSlot\n        - Close\n        - Delegate\n    IntentName:\n      type: string\n    StringMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/String'\n    FulfillmentState:\n      type: string\n      enum:\n        - Fulfilled\n        - Failed\n        - ReadyForFulfillment\n    Text:\n      type: string\n      minLength: 1\n      maxLength: 1024\n      format: password\n    MessageFormatType:\n      type: string\n      enum:\n        - PlainText\n        - CustomPayload\n        - SSML\n        - Composite\n    IntentSummary:\n      type: object\n      required:\n        - dialogActionType\n      properties:\n        intentName:\n          allOf:\n            - $ref: '#/components/schemas/IntentName'\n            - description: The name of the intent.\n        checkpointLabel:\n          allOf:\n            - $ref: '#/components/schemas/IntentSummaryCheckpointLabel'\n            - description: \u003cp\u003eA user-defined label that identifies a particular intent. You can use this label to return to a previous intent. \u003c/p\u003e \u003cp\u003eUse the \u003ccode\u003echeckpointLabelFilter\u003c/code\u003e parameter of the \u003ccode\u003eGetSessionRequest\u003c/code\u003e operation to filter the intents returned by the operation to those with only the specified label.\u003c/p\u003e\n        slots:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: 'Map of the slots that have been gathered and their values. '\n        confirmationStatus:\n          allOf:\n            - $ref: '#/components/schemas/ConfirmationStatus'\n            - description: '\u003cp\u003eThe status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to \u003ccode\u003eConfirmed\u003c/code\u003e. If the user denies the intent, Amazon Lex sets this value to \u003ccode\u003eDenied\u003c/code\u003e. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmed\u003c/code\u003e - The user has responded \"Yes\" to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDenied\u003c/code\u003e - The user has responded \"No\" to the confirmation prompt.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eNone\u003c/code\u003e - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        dialogActionType:\n          allOf:\n            - $ref: '#/components/schemas/DialogActionType'\n            - description: '\u003cp\u003eThe next action that the bot should take in its interaction with the user. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eClose\u003c/code\u003e - Indicates that the there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e - The next action is to determine the intent that the user wants to fulfill.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e - The next action is to elicit a slot value from the user.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        fulfillmentState:\n          allOf:\n            - $ref: '#/components/schemas/FulfillmentState'\n            - description: '\u003cp\u003eThe fulfillment state of the intent. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e - The Lambda function associated with the intent failed to fulfill the intent.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e - The intent has fulfilled by the Lambda function associated with the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        slotToElicit:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: 'The next slot to elicit from the user. If there is not slot to elicit, the field is blank.'\n      description: 'Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.'\n    Accept:\n      type: string\n    ActiveContextName:\n      type: string\n      pattern: '^([A-Za-z]_?)+$'\n      minLength: 1\n      maxLength: 100\n    ActiveContextTimeToLive:\n      type: object\n      properties:\n        timeToLiveInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTimeToLiveInSeconds'\n            - description: 'The number of seconds that the context should be active after it is first sent in a \u003ccode\u003ePostContent\u003c/code\u003e or \u003ccode\u003ePostText\u003c/code\u003e response. You can set the value between 5 and 86,400 seconds (24 hours).'\n        turnsToLive:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTurnsToLive'\n            - description: The number of conversation turns that the context should be active. A conversation turn is one \u003ccode\u003ePostContent\u003c/code\u003e or \u003ccode\u003ePostText\u003c/code\u003e request and the corresponding response from Amazon Lex.\n      description: The length of time or number of turns that a context remains active.\n    ActiveContextParametersMap:\n      type: object\n      minProperties: 0\n      maxProperties: 10\n      additionalProperties:\n        $ref: '#/components/schemas/Text'\n    ActiveContextTimeToLiveInSeconds:\n      type: integer\n      minimum: 5\n      maximum: 86400\n    ActiveContextTurnsToLive:\n      type: integer\n      minimum: 1\n      maximum: 20\n    ActiveContextsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ActiveContext'\n      minItems: 0\n      maxItems: 20\n    ActiveContextsString:\n      type: string\n      format: password\n    AttributesString:\n      type: string\n      format: password\n    BlobStream:\n      type: string\n    BotAlias:\n      type: string\n    BotName:\n      type: string\n    BotVersion:\n      type: string\n      pattern: '[0-9]+|\\$LATEST'\n      minLength: 1\n      maxLength: 64\n    ButtonTextStringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 15\n    ButtonValueStringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 1000\n    Button:\n      type: object\n      required:\n        - text\n        - value\n      properties:\n        text:\n          allOf:\n            - $ref: '#/components/schemas/ButtonTextStringWithLength'\n            - description: Text that is visible to the user on the button.\n        value:\n          allOf:\n            - $ref: '#/components/schemas/ButtonValueStringWithLength'\n            - description: 'The value sent to Amazon Lex when a user chooses the button. For example, consider button text \"NYC.\" When the user chooses the button, the value sent can be \"New York City.\"'\n      description: 'Represents an option to be shown on the client platform (Facebook, Slack, etc.)'\n    ConfirmationStatus:\n      type: string\n      enum:\n        - None\n        - Confirmed\n        - Denied\n    ContentType:\n      type: string\n      enum:\n        - application/vnd.amazonaws.card.generic\n    UserId:\n      type: string\n      pattern: '[0-9a-zA-Z._:-]+'\n      minLength: 2\n      maxLength: 100\n    DeleteSessionRequest:\n      type: object\n      title: DeleteSessionRequest\n      properties: {}\n    DialogAction:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          allOf:\n            - $ref: '#/components/schemas/DialogActionType'\n            - description: '\u003cp\u003eThe next action that the bot should take in its interaction with the user. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eClose\u003c/code\u003e - Indicates that the there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDelegate\u003c/code\u003e - The next action is determined by Amazon Lex.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e - The next action is to determine the intent that the user wants to fulfill.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e - The next action is to elicit a slot value from the user.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        intentName:\n          allOf:\n            - $ref: '#/components/schemas/IntentName'\n            - description: The name of the intent.\n        slots:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: 'Map of the slots that have been gathered and their values. '\n        slotToElicit:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the slot that should be elicited from the user.\n        fulfillmentState:\n          allOf:\n            - $ref: '#/components/schemas/FulfillmentState'\n            - description: '\u003cp\u003eThe fulfillment state of the intent. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e - The Lambda function associated with the intent failed to fulfill the intent.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e - The intent has fulfilled by the Lambda function associated with the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        message:\n          allOf:\n            - $ref: '#/components/schemas/Text'\n            - description: 'The message that should be shown to the user. If you don''t specify a message, Amazon Lex will use the message configured for the intent.'\n        messageFormat:\n          allOf:\n            - $ref: '#/components/schemas/MessageFormatType'\n            - description: '\u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePlainText\u003c/code\u003e - The message contains plain UTF-8 text.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eCustomPayload\u003c/code\u003e - The message is a custom format for the client.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSSML\u003c/code\u003e - The message contains text formatted for voice output.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eComposite\u003c/code\u003e - The message contains an escaped JSON object containing one or more messages. For more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\"\u003eMessage Groups\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n      description: 'Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the \u003ccode\u003eDialogAction\u003c/code\u003e data type to set the interaction to a specific state, or to return the interaction to a previous state.'\n    DialogState:\n      type: string\n      enum:\n        - ElicitIntent\n        - ConfirmIntent\n        - ElicitSlot\n        - Fulfilled\n        - ReadyForFulfillment\n        - Failed\n    Double:\n      type: number\n      format: double\n    StringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 80\n    StringUrlWithLength:\n      type: string\n      minLength: 1\n      maxLength: 2048\n    listOfButtons:\n      type: array\n      items:\n        $ref: '#/components/schemas/Button'\n      minItems: 0\n      maxItems: 5\n    GenericAttachment:\n      type: object\n      properties:\n        title:\n          allOf:\n            - $ref: '#/components/schemas/StringWithLength'\n            - description: The title of the option.\n        subTitle:\n          allOf:\n            - $ref: '#/components/schemas/StringWithLength'\n            - description: The subtitle shown below the title.\n        attachmentLinkUrl:\n          allOf:\n            - $ref: '#/components/schemas/StringUrlWithLength'\n            - description: The URL of an attachment to the response card.\n        imageUrl:\n          allOf:\n            - $ref: '#/components/schemas/StringUrlWithLength'\n            - description: The URL of an image that is displayed to the user.\n        buttons:\n          allOf:\n            - $ref: '#/components/schemas/listOfButtons'\n            - description: The list of options to show to the user.\n      description: 'Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. '\n    IntentSummaryCheckpointLabel:\n      type: string\n      pattern: '[a-zA-Z0-9-]+'\n      minLength: 1\n      maxLength: 255\n    GetSessionRequest:\n      type: object\n      title: GetSessionRequest\n      properties: {}\n    IntentSummaryList:\n      type: array\n      items:\n        $ref: '#/components/schemas/IntentSummary'\n      minItems: 0\n      maxItems: 3\n    HttpContentType:\n      type: string\n    IntentConfidence:\n      type: object\n      properties:\n        score:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: A score that indicates how confident Amazon Lex is that an intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n      description: Provides a score that indicates the confidence that Amazon Lex has that an intent is the one that satisfies the user's intent.\n    PredictedIntent:\n      type: object\n      properties:\n        intentName:\n          allOf:\n            - $ref: '#/components/schemas/IntentName'\n            - description: The name of the intent that Amazon Lex suggests satisfies the user's intent.\n        nluIntentConfidence:\n          allOf:\n            - $ref: '#/components/schemas/IntentConfidence'\n            - description: Indicates how confident Amazon Lex is that an intent satisfies the user's intent.\n        slots:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: The slot and slot values associated with the predicted intent.\n      description: 'An intent that Amazon Lex suggests satisfies the user''s intent. Includes the name of the intent, the confidence that Amazon Lex has that the user''s intent is satisfied, and the slots defined for the intent.'\n    IntentList:\n      type: array\n      items:\n        $ref: '#/components/schemas/PredictedIntent'\n      maxItems: 4\n    ParameterName:\n      type: string\n      minLength: 1\n      maxLength: 100\n    PostContentRequest:\n      type: object\n      required:\n        - inputStream\n      title: PostContentRequest\n      properties:\n        inputStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: '\u003cp\u003e User input in PCM or Opus audio format or text format as described in the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003eYou can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.\u003c/p\u003e'\n    SensitiveString:\n      type: string\n      minLength: 1\n      maxLength: 1366\n      format: password\n    SensitiveStringUnbounded:\n      type: string\n      format: password\n    PostTextRequest:\n      type: object\n      required:\n        - inputText\n      title: PostTextRequest\n      properties:\n        sessionAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: '\u003cp\u003eApplication-specific information passed between Amazon Lex and a client application.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\u003eSetting Session Attributes\u003c/a\u003e.\u003c/p\u003e'\n        requestAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: '\u003cp\u003eRequest-specific information passed between Amazon Lex and a client application.\u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\u003eSetting Request Attributes\u003c/a\u003e.\u003c/p\u003e'\n        inputText:\n          allOf:\n            - $ref: '#/components/schemas/Text'\n            - description: The text that the user entered (Amazon Lex interprets this text).\n        activeContexts:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextsList'\n            - description: '\u003cp\u003eA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\u003c/p\u003e'\n    SentimentResponse:\n      type: object\n      properties:\n        sentimentLabel:\n          allOf:\n            - $ref: '#/components/schemas/SentimentLabel'\n            - description: The inferred sentiment that Amazon Comprehend has the highest confidence in.\n        sentimentScore:\n          allOf:\n            - $ref: '#/components/schemas/SentimentScore'\n            - description: The likelihood that the sentiment was correctly inferred.\n      description: '\u003cp\u003eThe sentiment expressed in an utterance.\u003c/p\u003e \u003cp\u003eWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field structure contains the result of the analysis.\u003c/p\u003e'\n    ResponseCard:\n      type: object\n      properties:\n        version:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The version of the response card format.\n        contentType:\n          allOf:\n            - $ref: '#/components/schemas/ContentType'\n            - description: The content type of the response.\n        genericAttachments:\n          allOf:\n            - $ref: '#/components/schemas/genericAttachmentList'\n            - description: An array of attachment objects representing options.\n      description: 'If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( \u003ccode\u003edialogCodeHook\u003c/code\u003e and \u003ccode\u003efulfillmentActivity\u003c/code\u003e on an intent).'\n    PutSessionRequest:\n      type: object\n      title: PutSessionRequest\n      properties:\n        sessionAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.\n        dialogAction:\n          allOf:\n            - $ref: '#/components/schemas/DialogAction'\n            - description: Sets the next action that the bot should take to fulfill the conversation.\n        recentIntentSummaryView:\n          allOf:\n            - $ref: '#/components/schemas/IntentSummaryList'\n            - description: '\u003cp\u003eA summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.\u003c/p\u003e \u003cp\u003eAn intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eintentName\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eslot names\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslotToElict\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you send the \u003ccode\u003erecentIntentSummaryView\u003c/code\u003e parameter in a \u003ccode\u003ePutSession\u003c/code\u003e request, the contents of the new summary view replaces the old summary view. For example, if a \u003ccode\u003eGetSession\u003c/code\u003e request returns three intents in the summary view and you call \u003ccode\u003ePutSession\u003c/code\u003e with one intent in the summary view, the next call to \u003ccode\u003eGetSession\u003c/code\u003e will only return one intent.\u003c/p\u003e'\n        activeContexts:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextsList'\n            - description: '\u003cp\u003eA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\u003c/p\u003e'\n    genericAttachmentList:\n      type: array\n      items:\n        $ref: '#/components/schemas/GenericAttachment'\n      minItems: 0\n      maxItems: 10\n    SentimentLabel:\n      type: string\n    SentimentScore:\n      type: string\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@3237843a76543b0ee2c1e5f65e28ec6b526e8700/-/blob/APIs/amazonaws.com/runtime.lex/2016-11-28/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/3237843a76543b0ee2c1e5f65e28ec6b526e8700/APIs/amazonaws.com/runtime.lex/2016-11-28/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildIR: make ir: path \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\": post: responses: 200: contents: application/json: generate schema: field audioStream: allOf: schema type mismatch: string and "
}