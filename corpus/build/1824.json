{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PacktPublishing/Modern-API-Development-with-Spring-and-Spring-Boot"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "Chapter08/src/main/resources/api/openapi.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: Sample Ecommerce App\n  description: \u003e\n    'This is a ***sample ecommerce app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io).\n    Description supports markdown markup. For example, you can use the `inline code` using back ticks.'\n  termsOfService: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-and-Spring-Boot/blob/master/LICENSE\n  contact:\n    email: support@packtpub.com\n  license:\n    name: MIT\n    url: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-and-Spring-Boot/blob/master/LICENSE\n  version: 1.0.0\nexternalDocs:\n  description: Any document link you want to generate along with API.\n  url: http://swagger.io\nservers:\n  - url: https://ecommerce.swagger.io/v2\ntags:\n  - name: cart\n    description: Everything about cart\n    externalDocs:\n      description: Find out more (extra document link)\n      url: http://swagger.io\n  - name: order\n    description: Operation about orders\n  - name: customer\n    description: Operations about user's persona customer\n  - name: address\n    description: Operations about user's address\n  - name: payment\n    description: Operations about payments\n  - name: shipment\n    description: Operations about shippings\n  - name: product\n    description: Operations about products\n  - name: user\n    description: Operations about signup, signin and so on\n\npaths:\n  /api/v1/carts/{customerId}:\n    get:\n      tags:\n        - cart\n      summary: Returns the shopping cart\n      description: Returns the shopping cart of given customer\n      operationId: getCartByCustomerId\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Cart'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cart'\n        404:\n          description: Given customer ID doesn't exist\n          content: { }\n    delete:\n      tags:\n        - cart\n      summary: Delete the shopping cart\n      description: Deletes the shopping cart of given customer\n      operationId: deleteCart\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: successful operation\n        404:\n          description: Given customer ID doesn't exist\n          content: { }\n  /api/v1/carts/{customerId}/items:\n    get:\n      tags:\n        - cart\n      summary: Returns the list of products in user's shopping cart\n      description: Returns the items in shopping cart of given customer\n      operationId: getCartItemsByCustomerId\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n        404:\n          description: Given customer ID doesn't exist\n          content: { }\n    post:\n      tags:\n        - cart\n      summary: Adds an item in shopping cart\n      description: Adds an item to the shopping cart if it doesn't already exist, or increment quantity by the specified number of items if it does.\n      operationId: addCartItemsByCustomerId\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Item object\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Item'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Item'\n      responses:\n        201:\n          description: Item added successfully\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n        404:\n          description: Given customer ID doesn't exist\n          content: { }\n    put:\n      tags:\n        - cart\n      summary: Replace/add an item in shopping cart\n      description: Adds an item to the shopping cart if it doesn't already exist, or replace with given item if it does.\n      operationId: addOrReplaceItemsByCustomerId\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Item object\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Item'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Item'\n      responses:\n        201:\n          description: Item added successfully\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Item'\n        404:\n          description: Given customer ID doesn't exist\n          content: { }\n  /api/v1/carts/{customerId}/items/{itemId}:\n    get:\n      tags:\n        - cart\n      summary: Returns given item from user's shopping cart\n      description: Returns given item from shopping cart of given customer\n      operationId: getCartItemsByItemId\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n        - name: itemId\n          in: path\n          description: Item (product) Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: If item exists in cart\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Item'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Item'\n        404:\n          description: Given item (product) ID doesn't exist\n          content: { }\n    delete:\n      tags:\n        - cart\n      summary: Delete the item from shopping cart\n      description: Deletes the item from shopping cart of given customer\n      operationId: deleteItemFromCart\n      parameters:\n        - name: customerId\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n        - name: itemId\n          in: path\n          description: Item (product) Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: Accepts the request, regardless of whether the specified item exists in the cart or not.\n  /api/v1/orders:\n    post:\n      tags:\n        - order\n      summary: Creates a new order for the given order request\n      description: Creates a new order for the given order request.\n      operationId: addOrder\n      requestBody:\n        description: New Order Request object\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/NewOrder'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewOrder'\n      responses:\n        201:\n          description: Order added successfully\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        406:\n          description: If payment is not authorized.\n          content: { }\n    get:\n      tags:\n        - order\n      summary: Returns the orders of given user\n      description: Returns orders of given user\n      operationId: getOrdersByCustomerId\n      parameters:\n        - name: customerId\n          in: query\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: If order exists.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Order'\n        404:\n          description: Order doesn't exist for given user.\n          content: { }\n  /api/v1/orders/{id}:\n    get:\n      tags:\n        - order\n      summary: Returns the order of given order ID\n      description: Returns orders of given order ID\n      operationId: getByOrderId\n      parameters:\n        - name: id\n          in: path\n          description: Order Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: If order exists.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        404:\n          description: Order doesn't exist for given user.\n          content: { }\n  /api/v1/customers:\n    get:\n      tags:\n        - customer\n      summary: Returns all customers\n      description: Returns all customers, or empty collection if no use found\n      operationId: getAllCustomers\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /api/v1/customers/{id}:\n    get:\n      tags:\n        - customer\n      summary: Returns a customer\n      description: Returns a customers identifiable by given ID\n      operationId: getCustomerById\n      parameters:\n        - name: id\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      tags:\n        - customer\n      summary: Deletes the customer\n      description: Deletes the customer identifiable by given ID\n      operationId: deleteCustomerById\n      parameters:\n        - name: id\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: Request accepted, returns this status even if user does not exist\n          content: { }\n  /api/v1/customers/{id}/cards:\n    get:\n      tags:\n        - customer\n      summary: Returns all customer's cards\n      description: Returns all customer's cards based on given customer ID\n      operationId: getCardByCustomerId\n      parameters:\n        - name: id\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Card'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n  /api/v1/customers/{id}/addresses:\n    get:\n      tags:\n        - customer\n      summary: Returns all customer's addresses\n      description: Returns all customer's addresses based on given customer ID\n      operationId: getAddressesByCustomerId\n      parameters:\n        - name: id\n          in: path\n          description: Customer Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Address'\n  /api/v1/addresses:\n    get:\n      tags:\n        - address\n      summary: Returns all user's addresses\n      description: Returns all user's addresses, else empty collection\n      operationId: getAllAddresses\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n    post:\n      tags:\n        - address\n      summary: Creates a new user addresses\n      description: Creates a new user addresses. Does nothing if address already exists.\n      operationId: createAddress\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddAddressReq'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddAddressReq'\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Address'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Address'\n  /api/v1/addresses/{id}:\n    get:\n      tags:\n        - address\n      summary: Returns user's address\n      description: Returns user's address based on given address ID.\n      operationId: getAddressesById\n      parameters:\n        - name: id\n          in: path\n          description: address Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Address'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Address'\n    delete:\n      tags:\n        - address\n      summary: Deletes user's address\n      description: Deletes user's address based on given address ID.\n      operationId: deleteAddressesById\n      parameters:\n        - name: id\n          in: path\n          description: address Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: Accepts the deletion request and perform deletion. If ID does not exist, does nothing.\n          content: { }\n  /api/v1/cards:\n    get:\n      tags:\n        - card\n      summary: Returns all user's cards\n      description: Returns all user's cards, else empty collection\n      operationId: getAllCards\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Card'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Card'\n    post:\n      tags:\n        - card\n      summary: Creates a new user addresses\n      description: Creates a new user addresses. Does nothing if address already exists.\n      operationId: registerCard\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddCardReq'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddCardReq'\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Card'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n  /api/v1/cards/{id}:\n    get:\n      tags:\n        - card\n      summary: Returns user's card\n      description: Returns user's card based on given card ID.\n      operationId: getCardById\n      parameters:\n        - name: id\n          in: path\n          description: card Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Card'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n    delete:\n      tags:\n        - card\n      summary: Deletes card's address\n      description: Deletes card's address based on given card ID.\n      operationId: deleteCardById\n      parameters:\n        - name: id\n          in: path\n          description: card Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: Accepts the deletion request and perform deletion. If ID does not exist, does nothing.\n          content: { }\n  /api/v1/payments:\n    post:\n      tags:\n        - payment\n      summary: Authorize a payment request\n      description: Authorize a payment request.\n      operationId: authorize\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/PaymentReq'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaymentReq'\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n    get:\n      tags:\n        - payment\n      summary: Returns the payment authorization\n      description: Return the payment authorization for the specified order\n      operationId: getOrdersPaymentAuthorization\n      parameters:\n        - name: orderId\n          in: query\n          description: Order Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n  /api/v1/shipping:\n    post:\n      tags:\n        - shipping\n      summary: Ship the specified shipping request\n      description: Ship the specified shipping request\n      operationId: shipOrder\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/ShippingReq'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShippingReq'\n      responses:\n        201:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n  /api/v1/shipping/{id}:\n    get:\n      tags:\n        - shipment\n      summary: Return the Shipment\n      description: Return the Shipment for the specified order\n      operationId: getShipmentByOrderId\n      parameters:\n        - name: id\n          in: path\n          description: Order Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Shipment'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Shipment'\n  /api/v1/products:\n    get:\n      tags:\n        - product\n      summary: Returns all the matched products\n      description: Returns the products that matches the given query criteria\n      operationId: queryProducts\n      parameters:\n        - name: tag\n          in: query\n          description: Product tag\n          required: false\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: Product name\n          required: false\n          schema:\n            type: string\n        - name: page\n          in: query\n          description: Query page number\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 1\n        - name: size\n          in: query\n          description: Query page size\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 10\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Product'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Product'\n  /api/v1/products/{id}:\n    get:\n      tags:\n        - product\n      summary: Returns a product\n      description: Returns the product that matches the given product ID\n      operationId: getProduct\n      parameters:\n        - name: id\n          in: path\n          description: Product Identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: For successful fetch.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Product'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n  /api/v1/users:\n    post:\n      tags:\n        - user\n      summary: Signup the a new customer (user)\n      description: Creates a new customer (user), who can login and do the shopping.\n      operationId: signUp\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        201:\n          description: For successful user creation.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\n  /api/v1/auth/token:\n    post:\n      tags:\n        - user\n      summary: Signin the customer (user)\n      description: Signin the customer (user) that generates the JWT (access token) and refresh token, which can be used for accessing APIs.\n      operationId: signIn\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/SignInReq'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SignInReq'\n      responses:\n        200:\n          description: For user sign-in. Once successful, user receives the access and refresh token.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\n    delete:\n      tags:\n        - user\n      summary: Signouts the customer (user)\n      description: Signouts the customer (user). It removes the refresh token from DB. Last issued JWT should be removed from client end that if not removed last for given expiration time.\n      operationId: signOut\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/RefreshToken'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefreshToken'\n      responses:\n        202:\n          description: Accepts the request for logout.\n  /api/v1/auth/token/refresh:\n    post:\n      tags:\n        - user\n      summary: Provides new JWT based on valid refresh token.\n      description: Provides new JWT based on valid refresh token.\n      operationId: getAccessToken\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/RefreshToken'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefreshToken'\n      responses:\n        200:\n          description: For successful operation.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SignedInUser'\ncomponents:\n  schemas:\n    Cart:\n      description: Shopping Cart of the user\n      type: object\n      properties:\n        id:\n          description: Cart Identifier\n          type: string\n        customerId:\n          description: Id of the customer who possesses the cart\n          type: string\n        items:\n          description: Collection of items in cart.\n          type: array\n          items:\n            $ref: '#/components/schemas/Item'\n    Item:\n      description: Items in shopping cart\n      type: object\n      properties:\n        id:\n          description: Item Identifier\n          type: string\n        name:\n          description: Item name\n          type: string\n        description:\n          description: Item description\n          type: string\n        imageUrl:\n          description: Item image URL\n          type: string\n        quantity:\n          description: The item quantity\n          type: integer\n          format: int32\n        unitPrice:\n          description: The item's price per unit\n          type: BigDecimal\n    Order:\n      description: Represents an order\n      type: object\n      properties:\n        id:\n          description: Order identifier\n          type: string\n        customer:\n          $ref: '#/components/schemas/User'\n        address:\n          $ref: '#/components/schemas/Address'\n        card:\n          $ref: '#/components/schemas/Card'\n        date:\n          description: Order's data and time details\n          type: string\n          format: date-time\n        items:\n          description: Collection of order items.\n          type: array\n          items:\n            $ref: '#/components/schemas/Item'\n        total:\n          description: Order total\n          type: BigDecimal\n        payment:\n          $ref: '#/components/schemas/Payment'\n        shipment:\n          $ref: '#/components/schemas/Shipment'\n        status:\n          description: Order Status\n          type: string\n          enum:\n            - CREATED\n            - PAID\n            - SHIPPED\n            - PAYMENT_FAILED\n            - SHIPMENT_FAILED\n            - COMPLETED\n      xml:\n        name: Order\n    AddAddressReq:\n      allOf:\n        - $ref: '#/components/schemas/Address'\n        - type: object\n          properties:\n            userId:\n              type: string\n\n      xml:\n        name: AddAddressReq\n    Address:\n      type: object\n      properties:\n        id:\n          description: Order identifier\n          type: string\n        number:\n          description: house of flat number\n          type: string\n        residency:\n          description: Socieity or building name\n          type: string\n        street:\n          description: street name\n          type: string\n        city:\n          description: city name\n          type: string\n        state:\n          description: state name\n          type: string\n        country:\n          description: country name\n          type: string\n        pincode:\n          description: postal code\n          type: string\n      xml:\n        name: Address\n    Card:\n      type: object\n      properties:\n        id:\n          description: Order identifier\n          type: string\n        cardNumber:\n          description: Card Number\n          type: string\n        expires:\n          description: Expiration date\n          type: string\n        cvv:\n          description: CVV code\n          type: string\n        userId:\n          type: string\n      xml:\n        name: Card\n    AddCardReq:\n      description: Request object for new card registration.\n      allOf:\n        - $ref: '#/components/schemas/Card'\n        - type: object\n          properties:\n            userId:\n              type: string\n      xml:\n        name: AddCardReq\n    Payment:\n      type: object\n      properties:\n        id:\n          description: Order identifier\n          type: string\n        authorized:\n          description: Flag that specified whether payment is authorized or not\n          type: boolean\n        message:\n          description: Approval or rejection message\n          type: string\n      xml:\n        name: Payment\n    Shipment:\n      type: object\n      properties:\n        id:\n          description: Shipment Identifier\n          type: string\n        carrier:\n          description: Shipping Carrier\n          type: string\n        trackingNumber:\n          description: Shipping Tracking Number\n          type: string\n        estDeliveryDate:\n          description: Estimated Delivery Date\n          type: string\n          format: date\n      xml:\n        name: Shipment\n    ShippingReq:\n      description: Contains information required for Shipping request\n      type: object\n      properties:\n        orderId:\n          description: Order Identifier\n          type: string\n        address:\n          $ref: '#/components/schemas/Address'\n        itemCount:\n          description: The number of items in the order\n          type: integer\n          format: int32\n      xml:\n        name: ShippingReq\n\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: string\n        addressId:\n          type: string\n        cardId:\n          type: string\n      xml:\n        name: User\n    NewOrder:\n      description: Contains the new order request information\n      type: object\n      properties:\n        customerId:\n          type: string\n        address:\n          $ref: '#/components/schemas/Address'\n        card:\n          $ref: '#/components/schemas/Card'\n        items:\n          description: Items in shopping cart\n          type: array\n          items:\n            $ref: '#/components/schemas/Item'\n      xml:\n        name: NewOrder\n    URI:\n      type: object\n      xml:\n        name: URI\n    Authorization:\n      type: object\n      properties:\n        orderId:\n          description: Order Identification\n          type: string\n        time:\n          description: Timestamp when this authorization was created\n          type: string\n          format: date-time\n        authorized:\n          description: Flat that specify whether the payment is authorized\n          type: boolean\n        message:\n          description: Approavl or rejection message\n          type: string\n        error:\n          description: Processing error description, if any\n          type: string\n      xml:\n        name: Authorization\n    PaymentReq:\n      description: Contains the payment request information\n      type: object\n      properties:\n        orderId:\n          description: Order Identifier\n          type: string\n        customer:\n          $ref: '#/components/schemas/CustomerInfoOnCard'\n        address:\n          $ref: '#/components/schemas/Address'\n        card:\n          $ref: '#/components/schemas/Card'\n        amount:\n          description: Payment amount\n          type: BigDecimal\n      xml:\n        name: PaymentReq\n    CustomerInfoOnCard:\n      description: Customer information required for payment processing\n      type: object\n      properties:\n        firstName:\n          description: Customer first name\n          type: string\n        lastName:\n          description: Customer last name\n          type: string\n      xml:\n        name: CustomerInfoOnCard\n    Product:\n      description: Product information\n      type: object\n      properties:\n        id:\n          description: Product identifier\n          type: string\n        name:\n          description: Product Name\n          type: string\n        description:\n          description: Prodcut's description\n          type: string\n        imageUrl:\n          description: Product image's URL\n          type: string\n        price:\n          description: Product price\n          type: BigDecimal\n        count:\n          description: Product count\n          type: integer\n          format: int32\n        tag:\n          description: Tags associated with the product\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n    Tag:\n      description: Tag information\n      type: object\n      properties:\n        id:\n          description: Tag identifier\n          type: string\n        name:\n          description: Tag Name\n          type: string\n    SignInReq:\n      description: Request body for Sign-in\n      type: object\n      properties:\n        username:\n          description: username of the User\n          type: string\n        password:\n          description: password of the User\n          type: string\n    SignedInUser:\n      description: Signed-in user information\n      type: object\n      properties:\n        refreshToken:\n          description: Refresh Token\n          type: string\n        accessToken:\n          description: JWT Token aka access token\n          type: string\n        username:\n          description: User Name\n          type: string\n        userId:\n          description: User Identifier\n          type: string\n    RefreshToken:\n      description: Contains the refresh token\n      type: object\n      properties:\n        refreshToken:\n          description: Refresh Token\n          type: string\n"
		}
	},
	"Error": "parse: paths: /api/v1/products/{id}: get: getProduct: responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/Product\": parse schema: price: parse schema: unexpected schema type: \"BigDecimal\""
}