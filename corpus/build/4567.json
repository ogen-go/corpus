{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vineyardkoeln/churchtools-api"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "src/ChurchTools/Tools/openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: ChurchTools REST API\n  version: 0.1.0\n  description: 'The ChurchTools REST API is the best entry point for developers to access ChurchTools. \u003cbr\u003e\u003cbr\u003e **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `login_token` as query parameter or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. \u003cbr\u003e\u003cbr\u003e **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.'\n  contact:\n    name: German ChurchTools Forum\n    url: 'https://forum.church.tools/category/22/churchtools-schnittstellen'\nservers:\n  - url: /api\n    description: ChurchTools\ntags:\n  - name: General\n    description: Endpoints of general purpose\n  - name: Person\n    description: Find out about persons in ChurchTools\n  - name: Group\n    description: Groups we love\n  - name: Status\n    description: CRUD methods for status field\n  - name: Campus\n    description: CRUD methods for campus field\n  - name: Field\n    description: CRUD methods for db fields\n  - name: Service \u0026 Service Groups\n    description: CRUD methods for services \u0026 Service Groups\n  - name: Tag\n    description: Create and Update Tags for Persons \u0026 Groups or songs\n  - name: Department\n    description: CRUD methods for department field\n  - name: Admin\n    description: Admin relevant endpoints\n  - name: Calendar\n    description: Endpoint to list and create appointment templates\n  - name: Event\n    description: Endpoints for event module\n  - name: MasterData\n    description: Master data endpoints for each module\npaths:\n  /info:\n    get:\n      summary: Information about API\n      description: The API envoles and dependes on the ChurchTools version. This endpoint provides the build version and CT version.\n      operationId: getApiInfo\n      tags:\n        - General\n      responses:\n        '200':\n          description: API Information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  build:\n                    type: string\n                  version:\n                    type: string\n                example:\n                  build: '31255'\n                  version: 3.40.0-RC6\n  /whoami:\n    get:\n      summary: Currently logged in user.\n      description: 'This endpoint returns the current user. If the request is unauthorized, the anonymous user (aka public user) is returned.'\n      operationId: getCurrentUser\n      tags:\n        - General\n      responses:\n        '200':\n          description: Current user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Person'\n  /campuses:\n    get:\n      summary: Get all campuses\n      description: Returns an array of all campuses defined in ChurchTools. Campuses are sorted by its `sortKey` by default.\n      operationId: getAllCampuses\n      tags:\n        - Campus\n      responses:\n        '200':\n          description: All campuses\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Campus'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see campuses\n      security:\n        - login_token: []\n    post:\n      summary: Save new campus\n      operationId: createNewCampus\n      tags:\n        - Campus\n      requestBody:\n        description: Campus to add\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - shorty\n              properties:\n                name:\n                  type: string\n                shorty:\n                  type: string\n                sortKey:\n                  type: integer\n                  default: 10\n              example:\n                name: Stuttgart\n                shorty: S\n                sortKey: 10\n      responses:\n        '201':\n          description: Successfuly created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Campus'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '400':\n          description: Validation error\n        '402':\n          $ref: '#/paths/~1persons/post/responses/402'\n      security:\n        - login_token: []\n  '/campuses/{id}':\n    get:\n      summary: Get a specific campus\n      tags:\n        - Campus\n      parameters:\n        - $ref: '#/paths/~1campuses~1%7Bid%7D/put/parameters/0'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Campus'\n        '403':\n          description: Forbidden to see campus\n        '404':\n          description: Campus not found\n      security:\n        - login_token: []\n    put:\n      summary: Update campus\n      tags:\n        - Campus\n      parameters:\n        - name: id\n          in: path\n          description: ID of campus\n          required: true\n          schema:\n            type: integer\n            example: 1\n      requestBody:\n        description: New values for campus\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - shorty\n                - sortKey\n              properties:\n                name:\n                  type: string\n                shorty:\n                  type: string\n                sortKey:\n                  type: integer\n              example:\n                name: Augsburg\n                shorty: A\n                sortKey: 10\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1campuses~1%7Bid%7D/put/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          description: Successfully updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Campus'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete a campus\n      tags:\n        - Campus\n      parameters:\n        - $ref: '#/paths/~1campuses~1%7Bid%7D/put/parameters/0'\n      responses:\n        '204':\n          description: Successful deleted\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - login_token: []\n  /fields:\n    get:\n      summary: Get all fields\n      description: Returns an array of all fields defined in ChurchTools.\n      operationId: getAllFields\n      tags:\n        - Field\n      responses:\n        '200':\n          description: All Fields\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                          description: ID of field\n                        key:\n                          type: string\n                          description: The key of the field. This is the name that is also used when using the person or group api\n                        name:\n                          type: string\n                          description: Field name\n                        shorty:\n                          type: string\n                          description: Abbreviation\n                        fieldCategoryCode:\n                          type: string\n                          description: The intern code of the field category the field belongs to\n                        fieldTypeCode:\n                          type: string\n                          description: The intern code of the field type the field belongs to\n                        isActive:\n                          type: boolean\n                          description: Active Flag\n                        isNewPersonField:\n                          type: boolean\n                          description: Defines if the field can be used as parameter when creating new persons\n                        lineEnding:\n                          type: string\n                          description: The line ending that should be used when displaying the field\n                        secLevel:\n                          type: integer\n                          description: The security level necessary to see this field\n                        length:\n                          type: integer\n                          description: The max length of the field\n                          nullable: true\n                        deleteOnArchive:\n                          type: boolean\n                          description: Whether the field should be deleted on person archive or not\n                        nullable:\n                          type: boolean\n                          description: Should define if a field can be null. This is sadly not really enforced in the application right now. So don't bet on it.\n                        sortKey:\n                          type: integer\n                          description: Used to sort all campuses\n                      example:\n                        id: 2\n                        key: street\n                        name: strasse\n                        shorty: st\n                        fieldCategoryCode: f_address\n                        fieldTypeCode: text\n                        isActive: true\n                        isNewPersonField: false\n                        lineEnding: \u003c/br\u003e\n                        secLevel: 1\n                        length: 30\n                        deleteOnArchive: false\n                        nullable: false\n                        sortKey: 5\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see fields\n      security:\n        - login_token: []\n  /statuses:\n    get:\n      summary: Get all statuses\n      description: Returns an array of all statuses defined in ChurchTools. Statuses are sorted by its `sortKey` by default.\n      operationId: getAllStatuses\n      tags:\n        - Status\n      responses:\n        '200':\n          description: All statuses\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Status'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see statuses\n      security:\n        - login_token: []\n    post:\n      summary: Save new status\n      operationId: createNewStatus\n      tags:\n        - Status\n      requestBody:\n        description: Status to add\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - shorty\n                - isMember\n              properties:\n                name:\n                  type: string\n                shorty:\n                  type: string\n                isMember:\n                  type: boolean\n                isSearchable:\n                  type: boolean\n                  default: true\n                sortKey:\n                  type: integer\n                  default: 10\n                securityLevelId:\n                  type: integer\n                  default: 1\n              example:\n                name: Member\n                shorty: M\n                isMember: true\n                isSearchable: true\n                sortKey: 10\n                securityLevelId: 1\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1statuses/post/requestBody/content/application~1json/schema'\n      responses:\n        '201':\n          description: Successfuly created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Status'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '400':\n          description: Validation error\n      security:\n        - login_token: []\n  '/statuses/{id}':\n    get:\n      summary: Get a specific status\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/paths/~1statuses~1%7Bid%7D/put/parameters/0'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Status'\n        '403':\n          description: Forbidden to see status\n        '404':\n          description: Status not found\n      security:\n        - login_token: []\n    put:\n      summary: Update status\n      tags:\n        - Status\n      parameters:\n        - name: id\n          in: path\n          description: ID of status\n          required: true\n          schema:\n            type: integer\n            example: 1\n      requestBody:\n        description: New values for status\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - shorty\n                - isMember\n                - isSearchable\n                - sortKey\n                - securityLevelId\n              properties:\n                name:\n                  type: string\n                shorty:\n                  type: string\n                isMember:\n                  type: boolean\n                isSearchable:\n                  type: boolean\n                sortKey:\n                  type: integer\n                securityLevelId:\n                  type: integer\n              example:\n                name: Member\n                shorty: M\n                isMember: true\n                isSearchable: true\n                sortKey: 10\n                securityLevelId: 1\n      responses:\n        '200':\n          description: Successfully updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Status'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete a status\n      tags:\n        - Status\n      parameters:\n        - $ref: '#/paths/~1statuses~1%7Bid%7D/put/parameters/0'\n      responses:\n        '204':\n          description: Successful deleted\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - login_token: []\n  /persons:\n    get:\n      summary: Get all persons\n      description: 'This endpoint gives you all the people you are allowed to see. Each person object holds only those fields you may see. You will get at least an empty array even if you cannot see any person.\u003cbr\u003e\u003cbr\u003e We distinguish between `date` and `date-time` fields. `date` is a ISO representation like `YYYY-MM-DD`. On the other hand, for `date-time` we return and accept a \u003ca href=\"https://www.w3.org/TR/NOTE-datetime\"\u003eW3C Zulu date string\u003c/a\u003e. Example `1994-11-05T08:15:30Z`'\n      operationId: getAllPersons\n      tags:\n        - Person\n      parameters:\n        - name: ids\n          in: query\n          description: Array of person ids\n          schema:\n            type: array\n            items:\n              type: integer\n          style: deepObject\n        - name: status_ids\n          in: query\n          description: Filter by status id\n          schema:\n            type: array\n            items:\n              type: integer\n          style: deepObject\n        - name: campus_ids\n          in: query\n          description: Filter by campus id\n          schema:\n            type: array\n            items:\n              type: integer\n          style: deepObject\n        - name: birthday_before\n          in: query\n          description: 'Filter by birthdays before that date (Format: YYYY-MM-DD)'\n          schema:\n            type: string\n            format: date\n        - name: birthday_after\n          in: query\n          description: 'Filter by birthdays after that date (Format: YYYY-MM-DD)'\n          schema:\n            type: string\n            format: date\n        - name: is_archived\n          in: query\n          description: Show only archived or not archived people\n          schema:\n            type: boolean\n        - $ref: '#/paths/~1logs/get/parameters/5'\n        - $ref: '#/paths/~1logs/get/parameters/6'\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Person'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n                      pagination:\n                        $ref: '#/paths/~1logs/get/responses/200/content/application~1json/schema/properties/meta/properties/pagination'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    post:\n      summary: Create new person\n      description: 'Endpoint to save a new person in ChurchTools. Generally, you can provide any information to save, but be aware that you can only save information for fields you have write access to. If the request fails because a duplicate is found (person with same name) use the `force` flag to create this person even if a duplicate is found.'\n      operationId: createPerson\n      tags:\n        - Person\n      parameters:\n        - name: force\n          in: query\n          description: 'Force the action, which would otherwise fail.'\n          schema:\n            type: boolean\n            example: 'true'\n      requestBody:\n        description: Include those fields you want to add and are allowed to write.\n        required: true\n        content:\n          application/json:\n            schema:\n              description: The default values are used if no value is provides.\n              type: object\n              properties:\n                title:\n                  type: string\n                  nullable: true\n                  default: null\n                firstName:\n                  type: string\n                  nullable: true\n                  example: Alfred\n                lastName:\n                  type: string\n                  nullable: true\n                  example: API Tester\n                nickname:\n                  type: string\n                  nullable: true\n                job:\n                  type: string\n                  nullable: true\n                street:\n                  type: string\n                  nullable: true\n                addressAddition:\n                  type: string\n                  nullable: true\n                zip:\n                  type: string\n                  nullable: true\n                city:\n                  type: string\n                  nullable: true\n                country:\n                  type: string\n                  nullable: true\n                phonePrivate:\n                  type: string\n                  nullable: true\n                phoneWork:\n                  type: string\n                  nullable: true\n                mobile:\n                  type: string\n                  nullable: true\n                fax:\n                  type: string\n                  nullable: true\n                birthName:\n                  type: string\n                  nullable: true\n                birthday:\n                  type: string\n                  format: date\n                  nullable: true\n                birthplace:\n                  type: string\n                  nullable: true\n                sexId:\n                  type: integer\n                  nullable: true\n                  example: 1\n                email:\n                  type: string\n                  nullable: true\n                cmsUserId:\n                  type: string\n                  nullable: true\n                optigemId:\n                  type: integer\n                  nullable: true\n                privacyPolicyAgreement:\n                  description: This object can be optional or required. Depending on your ChurchTools data security settings.\n                  type: object\n                  properties:\n                    date:\n                      type: string\n                      format: date\n                      nullable: true\n                    typeId:\n                      type: integer\n                      nullable: true\n                    whoId:\n                      type: integer\n                      nullable: true\n                nationalityId:\n                  type: integer\n                  nullable: true\n                  example: 3\n                familyStatusId:\n                  type: integer\n                  nullable: true\n                weddingDate:\n                  type: string\n                  format: date\n                  nullable: true\n                campusId:\n                  type: integer\n                  example: 0\n                statusId:\n                  type: integer\n                  example: 5\n                firstContact:\n                  type: string\n                  format: date-time\n                  nullable: true\n                dateOfBelonging:\n                  type: string\n                  format: date\n                  nullable: true\n                dateOfEntry:\n                  type: string\n                  format: date-time\n                  nullable: true\n                dateOfResign:\n                  type: string\n                  format: date-time\n                  nullable: true\n                dateOfBaptism:\n                  type: string\n                  format: date\n                  nullable: true\n                placeOfBaptism:\n                  type: string\n                  nullable: true\n                baptisedBy:\n                  type: string\n                  nullable: true\n                referredBy:\n                  type: string\n                  nullable: true\n                referredTo:\n                  type: string\n                  nullable: true\n                growPathId:\n                  type: integer\n                  nullable: true\n      responses:\n        '200':\n          description: New person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Person'\n        '400':\n          description: Bad Request / Duplicate Person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: Duplicate found. Use force flag to create person with same name.\n                  translatedMessage:\n                    type: string\n                    example: Duplikat gefunden. Nutze das force Flag um die Person trotzdem anzulegen.\n                  messageKey:\n                    type: string\n                    example: forbidden.duplicate.person\n                  args:\n                    type: array\n                    items:\n                      type: string\n                    example: []\n                  errors:\n                    type: array\n                    items:\n                      type: string\n                    example: []\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '402':\n          description: License limit reached. Update your license to perform this action.\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /persons/properties:\n    post:\n      summary: 'Retrieve people''s properties, whether they own an email adress'\n      operationId: getPersonProperties\n      tags:\n        - Person\n      requestBody:\n        description: 'List all person IDs for which you want the property information. If empty, all person IDs are used'\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  items:\n                    type: integer\n                  example:\n                    - 1\n                    - 2\n                    - 3\n      responses:\n        '200':\n          description: 'Get properties for people. Key = Person ID, Value = Object with person properties'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      '1':\n                        type: object\n                        properties:\n                          hasEmail:\n                            type: boolean\n                            example: true\n        '401':\n          description: Unauthorized\n      security:\n        - login_token: []\n  '/persons/{id}':\n    get:\n      summary: Get a person by ID\n      description: Each person as a unique numeric ID in ChurchTools. This ID is used all over in ChurchTools and in the API.\n      operationId: getPersonById\n      tags:\n        - Person\n      parameters:\n        - name: id\n          in: path\n          description: ID or GUID of person\n          required: true\n          schema:\n            type: string\n            example: 42\n      responses:\n        '200':\n          description: The person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Person'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n        '404':\n          $ref: '#/paths/~1tags/get/responses/404'\n      security:\n        - login_token: []\n    patch:\n      summary: Updates a person\n      description: 'Endpoint to update a person in ChurchTools. Generally, you can provide any information to save, but be aware that you can only save information for fields you have write access to. Beware, that not all fields which are listed in the Person schema can be updated. E.g. `imageUrl` or `familyUrl`.'\n      operationId: patchPerson\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n      requestBody:\n        description: Include those fields you want to update and are allowed to write.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1persons/post/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          description: The updated person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Person'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: There are validation errors\n                  translatedMessage:\n                    type: string\n                    example: Die eingegebenen Daten waren nicht korrekt.\n                  messageKey:\n                    type: string\n                    example: validation.error\n                  args:\n                    type: array\n                    items:\n                      type: string\n                    example: []\n                  errors:\n                    type: array\n                    items:\n                      type: string\n                    example: []\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete person\n      operationId: deletePerson\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n      responses:\n        '204':\n          description: Successful deleted\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - login_token: []\n  '/persons/{id}/tags':\n    get:\n      summary: Get all tags attached to a person\n      operationId: getPersonTags\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n      responses:\n        '200':\n          description: Tags of person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Tag'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - login_token: []\n  '/persons/{id}/relationships':\n    get:\n      summary: Get all relationships linked to this person\n      description: 'This endpoint returns all relationships of this person. The result is sorted by 1. the `sortkey` of the relationship type, 2. last name, and 3. first name of a person.'\n      operationId: getPersonRelationships\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n      responses:\n        '200':\n          description: Relationships of person\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      description: 'Relationship information of a person. Notice, that a relationship has a security level. That means you only see those relationships, you are allowed to see.'\n                      type: object\n                      properties:\n                        relationshipName:\n                          type: string\n                          example: Parent/Child\n                        degreeOfRelationship:\n                          type: string\n                          example: Parent\n                        relative:\n                          $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - login_token: []\n  '/persons/{id}/settings':\n    get:\n      summary: Get all person settings\n      description: Use this endpoint to get all person settings for this user.\n      operationId: getAllPersonSettings\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n      responses:\n        '200':\n          description: All person settings\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PersonSetting'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  '/persons/{id}/settings/{module}':\n    get:\n      summary: Get all person settings of a module\n      description: Person settings are grouped per module. This endpoint returns an array of all user settings for a person of this module.\n      operationId: getPersonModuleSettings\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n        - name: module\n          in: path\n          required: true\n          description: Module name like `churchdb` or `churchservice`\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Array of person settings for this module\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PersonSetting'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  '/persons/{id}/settings/{module}/{attribute}':\n    get:\n      summary: Get person setting\n      description: 'To retrieve a specific person setting, use this endpoint. A setting is identifies by `module` and `attribute`.'\n      operationId: getPersonSetting\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n        - $ref: '#/paths/~1persons~1%7Bid%7D~1settings~1%7Bmodule%7D/get/parameters/1'\n        - $ref: '#/paths/~1persons~1%7Bid%7D~1settings~1%7Bmodule%7D~1%7Battribute%7D/put/parameters/2'\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PersonSetting'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    put:\n      summary: Create/Update person setting\n      description: '\u003cstrong\u003eImportant:\u003c/strong\u003e Not all settings are supported to update over this endpoint. The API will tell you if you are allowed to update a setting.\u003cbr\u003eThis endpoint can be used to update a value of an existing setting or create it if it does not exists, yet.'\n      operationId: updatePersonSetting\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n        - $ref: '#/paths/~1persons~1%7Bid%7D~1settings~1%7Bmodule%7D/get/parameters/1'\n        - name: attribute\n          in: path\n          required: true\n          description: Attribute name of setting\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully created/updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/PersonSetting'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete a person setting\n      description: Deleting settings is sometimes useful or necessary. This endpoint can be used to delete one specific setting.\n      operationId: deletePersonSetting\n      tags:\n        - Person\n      parameters:\n        - $ref: '#/paths/~1persons~1%7Bid%7D/get/parameters/0'\n        - $ref: '#/paths/~1persons~1%7Bid%7D~1settings~1%7Bmodule%7D/get/parameters/1'\n        - $ref: '#/paths/~1persons~1%7Bid%7D~1settings~1%7Bmodule%7D~1%7Battribute%7D/put/parameters/2'\n      responses:\n        '204':\n          description: Successfully deleted\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  '/persons/{id}/events':\n    get:\n      summary: Get events that person is involved with\n      description: Gets a list of all events that a person is involved\n      operationId: getPersonEvents\n      tags:\n        - Event\n        - Person\n      parameters:\n        - name: id\n          in: path\n          description: ID of person\n          required: true\n          schema:\n            type: string\n            example: 42\n        - name: from\n          in: query\n          description: 'Start date from when events are returned. Default value: today'\n          required: false\n          schema:\n            type: string\n            format: date\n            example: '2019-08-08'\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Event'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /groups:\n    get:\n      summary: Get all groups\n      description: This endpoint returns an array with all groups the user can see. This includes groups the user is a member off as well as subordinate groups the user is allowed to see.\n      operationId: getAllGroups\n      tags:\n        - Group\n      parameters:\n        - name: ids\n          in: query\n          description: Array of group ids\n          schema:\n            type: array\n            items:\n              type: integer\n          style: deepObject\n        - $ref: '#/paths/~1logs/get/parameters/5'\n        - $ref: '#/paths/~1logs/get/parameters/6'\n      responses:\n        '200':\n          description: Your groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Group'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n                      pagination:\n                        $ref: '#/paths/~1logs/get/responses/200/content/application~1json/schema/properties/meta/properties/pagination'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see groups\n      security:\n        - login_token: []\n  '/groups/{id}':\n    get:\n      summary: Get a group\n      tags:\n        - Group\n      parameters:\n        - name: id\n          in: path\n          description: ID of group\n          required: true\n          schema:\n            type: integer\n            example: 42\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Group'\n        '403':\n          description: Forbidden to see group\n        '404':\n          description: Group not found\n      security:\n        - login_token: []\n  '/groups/{id}/members':\n    get:\n      summary: Get all group members\n      description: This endpoint returns an array with all group members of one group.\n      operationId: getAllGroupMembers\n      tags:\n        - Group\n      parameters:\n        - name: id\n          in: path\n          description: ID of group\n          required: true\n          schema:\n            type: integer\n            example: 42\n        - $ref: '#/paths/~1logs/get/parameters/5'\n        - $ref: '#/paths/~1logs/get/parameters/6'\n      responses:\n        '200':\n          description: The group members\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/GroupMember'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n                      pagination:\n                        $ref: '#/paths/~1logs/get/responses/200/content/application~1json/schema/properties/meta/properties/pagination'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see group members\n      security:\n        - login_token: []\n  /servicegroups:\n    get:\n      summary: Get all service groups\n      description: This endpoint returns an array with all service groups.\n      operationId: getAllServiceGroups\n      tags:\n        - Service \u0026 Service Groups\n      responses:\n        '200':\n          description: The service groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ServiceGroup'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see service groups\n      security:\n        - login_token: []\n  /services:\n    get:\n      summary: Get all services\n      description: This endpoint returns an array with all services.\n      operationId: getAllServices\n      tags:\n        - Service \u0026 Service Groups\n      responses:\n        '200':\n          description: The service\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Service'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see services\n      security:\n        - login_token: []\n  /tags:\n    get:\n      summary: Get all tags of a type\n      description: Returns all tags of type persons or songs\n      operationId: getTags\n      tags:\n        - Tag\n      parameters:\n        - name: type\n          in: query\n          description: Type of tags\n          required: true\n          schema:\n            type: string\n            example: persons\n      responses:\n        '200':\n          description: Array with all tags of a type\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n        '401':\n          description: Unauthorized\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Session expired!\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n        '404':\n          description: Resource not found\n      security:\n        - login_token: []\n    post:\n      summary: Create new tag\n      operationId: saveTag\n      tags:\n        - Tag\n      requestBody:\n        description: Tax rate data\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                type:\n                  type: string\n              example:\n                name: Neuer TAG\n                type: persons\n      responses:\n        '200':\n          description: return new tag with ID\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Tag'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /departments:\n    get:\n      summary: Get all departments\n      description: Returns an array of all departments defined in ChurchTools. Departments are sorted by its `sortKey` by default.\n      operationId: getAllDepartments\n      tags:\n        - Department\n      responses:\n        '200':\n          description: All departments\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Department'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see departments\n      security:\n        - login_token: []\n  '/files/{domainType}/{domainIdentifier}':\n    post:\n      summary: Upload files\n      operationId: uploadFiles\n      tags:\n        - File\n      parameters:\n        - name: domainType\n          in: path\n          description: 'The domain type. Currently supported are ''avatar'', ''groupimage'', ''logo'', ''attatchments'', ''html_template'', ''service'', ''song_arrangement'', ''importtable'', ''person'', ''familyavatar'', ''wiki_.?''.'\n          required: true\n          schema:\n            type: string\n            example: logo\n        - name: domainIdentifier\n          in: path\n          description: the domain identifier\n          required: true\n          schema:\n            type: string\n            example: 35\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        '200':\n          description: return new files\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/File'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete files that are matching the domainType and domainIdentifier\n      operationId: deleteFiles\n      tags:\n        - File\n      parameters:\n        - $ref: '#/paths/~1files~1%7BdomainType%7D~1%7BdomainIdentifier%7D/post/parameters/0'\n        - $ref: '#/paths/~1files~1%7BdomainType%7D~1%7BdomainIdentifier%7D/post/parameters/1'\n      responses:\n        '204':\n          description: Successful deleted\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /logs:\n    get:\n      summary: Get all log messages\n      description: The response is a collection of all log messages you may see and is limited to a specific number of messages. You can use the `page` parameter to browse the list of log messages. The logs are ordered by date.\n      operationId: getAllLogs\n      tags:\n        - Admin\n      parameters:\n        - name: message\n          in: query\n          description: Filter by text\n          schema:\n            type: string\n            example: Person updated\n        - name: levels\n          in: query\n          description: Filter by log level\n          schema:\n            type: array\n            items:\n              type: integer\n          style: deepObject\n        - name: before\n          in: query\n          description: 'Filter log messages before that date. (Format: YYYY-MM-DD\\Thh:mm:ssZ)'\n          schema:\n            type: string\n            format: date-time\n        - name: after\n          in: query\n          description: 'Filter log messages after that date. (Format: YYYY-MM-DD\\Thh:mm:ssZ)'\n          schema:\n            type: string\n            format: date-time\n        - name: person_id\n          in: query\n          description: Filter by person\n          schema:\n            type: integer\n        - name: page\n          in: query\n          description: 'Page number to show page in pagenation. If empty, start at first page.'\n          schema:\n            type: integer\n            example: 34\n            default: 1\n        - name: limit\n          in: query\n          description: Number of results per page.\n          schema:\n            type: integer\n            example: 50\n            default: 10\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Log'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n                      pagination:\n                        type: object\n                        properties:\n                          total:\n                            type: integer\n                            description: Total number of results.\n                            example: 21\n                          current:\n                            type: integer\n                            description: Current page.\n                            example: 1\n                          limit:\n                            type: integer\n                            description: Number of results per page.\n                            example: 10\n                          lastPage:\n                            type: integer\n                            description: Number of last page.\n                            example: 3\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          description: 'Forbidden to see, create, update, or delete resource'\n      security:\n        - login_token: []\n  '/logs/{id}':\n    get:\n      summary: Get a log message\n      description: Fetch one specific log message by its ID.\n      operationId: getLogById\n      tags:\n        - Admin\n      parameters:\n        - name: id\n          in: path\n          description: ID of log\n          required: true\n          schema:\n            type: integer\n            example: 12\n      responses:\n        '200':\n          description: The log\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Log'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /calendars/appointments/templates:\n    get:\n      summary: get all appointment templates\n      operationId: getAllTemplates\n      tags:\n        - Calendar\n      responses:\n        '200':\n          description: get all appointment templates\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AppointmentTemplate'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n    post:\n      summary: Create new appointment template\n      operationId: createTemplate\n      tags:\n        - Calendar\n      requestBody:\n        description: appointment template data\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - title\n                - startTime\n                - duration\n              properties:\n                title:\n                  type: string\n                comment:\n                  type: string\n                startTime:\n                  type: string\n                duration:\n                  type: integer\n                allDay:\n                  type: boolean\n                note:\n                  type: string\n                isInternal:\n                  type: boolean\n                categoryId:\n                  type: integer\n                repeatId:\n                  type: integer\n              example:\n                title: Kids Service\n                comment: With supervising\n                startTime: '10:00'\n                duration: 3600\n                allDay: false\n                note: ''\n                link: ''\n                isInternal: false\n                categoryId: 1\n                repeatId: 4\n      responses:\n        '200':\n          description: new appointment template\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AppointmentTemplate'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  '/calendars/appointments/templates/{templateId}':\n    get:\n      summary: get a appointment template\n      operationId: getTemplateById\n      tags:\n        - Calendar\n      parameters:\n        - $ref: '#/paths/~1calendars~1appointments~1templates~1%7BtemplateId%7D/put/parameters/0'\n      responses:\n        '200':\n          description: get appointment template\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AppointmentTemplate'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n        '404':\n          $ref: '#/paths/~1tags/get/responses/404'\n      security:\n        - login_token: []\n    put:\n      summary: update a appointment template identified by id\n      operationId: updateTemplate\n      tags:\n        - Calendar\n      parameters:\n        - name: templateId\n          in: path\n          description: ID of appointment template\n          required: true\n          schema:\n            type: integer\n            example: 1\n      requestBody:\n        description: appointment template data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/paths/~1calendars~1appointments~1templates/post/requestBody/content/application~1json/schema'\n      responses:\n        '200':\n          description: Updated appointment template\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/AppointmentTemplate'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n        '404':\n          $ref: '#/paths/~1tags/get/responses/404'\n      security:\n        - login_token: []\n    delete:\n      summary: Delete a appointment template identified by id\n      operationId: deleteTemplate\n      tags:\n        - Calendar\n      parameters:\n        - $ref: '#/paths/~1calendars~1appointments~1templates~1%7BtemplateId%7D/put/parameters/0'\n      responses:\n        '204':\n          description: Successful deleted\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n        '404':\n          $ref: '#/paths/~1tags/get/responses/404'\n      security:\n        - login_token: []\n  '/events/{eventId}/agenda':\n    get:\n      summary: Get agenda for event\n      description: Fetch all agenda items.\n      operationId: getAgendaForEvent\n      tags:\n        - Event\n      parameters:\n        - name: eventId\n          in: path\n          description: ID of corresponding event\n          required: true\n          schema:\n            type: integer\n            example: 12\n      responses:\n        '200':\n          description: Successful request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Agenda'\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /agendas/send:\n    post:\n      summary: Send agenda email to recipients\n      description: 'A agenda can be sent to multiple people at once. Recipients can be participants of one of the events, whereby the user sending the mail MUST see the service groups, or the user can add additional recipients from the list of people the user can see. To send a mail the user MUST see the agenda.'\n      operationId: sendAgendaEmail\n      tags:\n        - Event\n      requestBody:\n        description: E-Mail information and recipients\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - eventIds\n                - recipients\n                - subject\n                - body\n              properties:\n                eventIds:\n                  description: 'Array of event IDs. Multiple event IDs MUST be integrated events, i.e. all events share the same agenda.'\n                  type: array\n                  items:\n                    type: integer\n                recipients:\n                  description: Array of person IDs.\n                  type: array\n                  items:\n                    type: integer\n                sendCopyToMe:\n                  description: Flag if a mail should be send to the user sending the request.\n                  type: boolean\n                  default: false\n                subject:\n                  description: E-Mail subject.\n                  type: string\n                body:\n                  description: E-Mail body.\n                  type: string\n              example:\n                eventIds:\n                  - 31\n                  - 32\n                recipients:\n                  - 40\n                  - 41\n                  - 116\n                sendCopyToMe: true\n                subject: Agenda Updated\n                body: I have a updated the agenda for the upcoming service. Please review the changes.\n      responses:\n        '200':\n          description: Successfully sent mails to some recipients.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  translatedMessage:\n                    type: string\n                  messageKey:\n                    type: string\n                  args:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                  errors:\n                    description: 'Array of DomainObjects with people, who have no eMail Addresses.'\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        titel:\n                          type: string\n                        domainType:\n                          type: string\n                          enum:\n                            - person\n                        domainIdentifier:\n                          type: string\n                        apiUrl:\n                          type: string\n                        frontendUrl:\n                          type: string\n                        imageUrl:\n                          type: string\n                        domainAttributes:\n                          type: object\n                          properties:\n                            firstName:\n                              type: string\n                            lastName:\n                              type: string\n                      example:\n                        title: John Smith\n                        domainType: person\n                        domainIdentifier: '116'\n                        apiUrl: 'http://churchtools.test/api/persons/116'\n                        frontendUrl: 'http://churchtools.test/?q=churchdb#PersonView/searchEntry:%23116/'\n                        imageUrl: ''\n                        domainAttributes:\n                          - firstName: John\n                            lastName: Smith\n                example:\n                  message: 5 recipients have no eMail address. No eMail is sent to them.\n                  translatedMessage: 5 Empfänger haben keine E-Mail Adresse. Keine E-Mail wurde an sie geschickt.\n                  messageKey: agenda.mail.missing.email\n                  args:\n                    count: 5\n                  errors:\n                    - $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items/example'\n        '204':\n          description: Successfully sent mails to all recipients the user can see.\n        '400':\n          description: Validation errors. See response for details\n        '401':\n          $ref: '#/paths/~1tags/get/responses/401'\n        '403':\n          $ref: '#/paths/~1logs/get/responses/403'\n      security:\n        - login_token: []\n  /masterdata/person/roles:\n    get:\n      summary: Get all group type roles\n      description: This endpoint returns an array with all roles of a group type.\n      operationId: getAllGroupTypeRoles\n      tags:\n        - MasterData\n      responses:\n        '200':\n          description: All group type roles\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Role'\n                  meta:\n                    type: object\n                    properties:\n                      count:\n                        type: integer\n                        example: 1\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden to see group type roles\n      security:\n        - login_token: []\n  '/masterdata/person/roles/{roleId}':\n    get:\n      summary: Get a group type role\n      tags:\n        - MasterData\n      parameters:\n        - name: roleId\n          in: path\n          description: ID of group type role\n          required: true\n          schema:\n            type: integer\n            example: 1\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/Role'\n                example:\n                  data:\n                    $ref: '#/components/schemas/Role/example/0'\n        '403':\n          description: Forbidden to see group type role\n        '404':\n          description: Role not found\n      security:\n        - login_token: []\ncomponents:\n  securitySchemes:\n    login_token:\n      type: apiKey\n      name: login_token\n      in: query\n  schemas:\n    Person:\n      description: 'A person object includes all fields the logged in user may see depending on the security level. Additional DB fields, created by the admin, are also part of the response. Those fields have the same name as the column name.'\n      type: object\n      properties:\n        id:\n          type: integer\n        securityLevelForPerson:\n          type: integer\n          description: Security level of the current user. The user sees fields upto this level.\n        editSecurityLevelForPerson:\n          type: integer\n          description: Eidt security level of the current user. The user can edit fields upto this level.\n        title:\n          type: string\n          nullable: true\n        firstName:\n          type: string\n          nullable: true\n        lastName:\n          type: string\n          nullable: true\n        nickname:\n          type: string\n          nullable: true\n        job:\n          type: string\n          nullable: true\n        street:\n          type: string\n          nullable: true\n        addressAddition:\n          type: string\n          nullable: true\n        zip:\n          type: string\n          nullable: true\n        city:\n          type: string\n          nullable: true\n        country:\n          type: string\n          nullable: true\n        latitude:\n          type: number\n          format: float\n          nullable: true\n        longitude:\n          type: number\n          format: float\n          nullable: true\n        latitudeLoose:\n          type: number\n          format: float\n          nullable: true\n        longitudeLoose:\n          type: number\n          format: float\n          nullable: true\n        phonePrivate:\n          type: string\n          nullable: true\n        phoneWork:\n          type: string\n          nullable: true\n        mobile:\n          type: string\n          nullable: true\n        fax:\n          type: string\n          nullable: true\n        birthName:\n          type: string\n          nullable: true\n        birthday:\n          type: string\n          format: date\n          nullable: true\n        birthplace:\n          type: string\n          nullable: true\n        imageUrl:\n          type: string\n          nullable: true\n        familyImageUrl:\n          type: string\n          nullable: true\n        sexId:\n          type: integer\n          nullable: true\n        email:\n          type: string\n          nullable: true\n        cmsUserId:\n          type: string\n          nullable: true\n        optigemId:\n          type: integer\n          nullable: true\n        privacyPolicyAgreement:\n          type: object\n          properties:\n            date:\n              type: string\n              format: date\n              nullable: true\n            typeId:\n              type: integer\n              nullable: true\n            whoId:\n              type: integer\n              nullable: true\n        nationalityId:\n          type: integer\n          nullable: true\n        familyStatusId:\n          type: integer\n          nullable: true\n        weddingDate:\n          type: string\n          format: date\n          nullable: true\n        campusId:\n          type: integer\n        statusId:\n          type: integer\n        firstContact:\n          type: string\n          format: date-time\n          nullable: true\n        dateOfBelonging:\n          type: string\n          format: date\n          nullable: true\n        dateOfEntry:\n          type: string\n          format: date-time\n          nullable: true\n        dateOfResign:\n          type: string\n          format: date-time\n          nullable: true\n        dateOfBaptism:\n          type: string\n          format: date\n          nullable: true\n        placeOfBaptism:\n          type: string\n          nullable: true\n        baptisedBy:\n          type: string\n          nullable: true\n        referredBy:\n          type: string\n          nullable: true\n        referredTo:\n          type: string\n          nullable: true\n        growPathId:\n          type: integer\n          nullable: true\n        isArchived:\n          type: boolean\n      example:\n        id: 1\n        firstName: Alfred\n        lastName: API Tester\n        sexId: 1\n        nationalityId: 3\n        campusId: 0\n        statusId: 5\n    PersonSetting:\n      description: 'Piece of meta information about a person, like is this person using two factor authentication or does she want service remind mails.'\n      type: object\n      properties:\n        module:\n          type: string\n        attribute:\n          type: string\n        value:\n          description: Mixed content. Each setting has its own type.\n          oneOf:\n            - type: string\n            - type: integer\n            - type: array\n            - type: object\n      example:\n        module: churchcore\n        attribute: saml-id\n        value: 99\n    Group:\n      type: object\n      description: 'The group model structures all information in different objects: `information`, `settings`, `followUp`, and `roles`. Custom group fields are added to the root level of this model.'\n      properties:\n        id:\n          type: integer\n          example: 42\n        name:\n          type: string\n          example: Smallgroup West\n        securityLevelForGroup:\n          type: integer\n          description: You can see group fields up to this security level.\n          example: 3\n        information:\n          type: object\n          properties:\n            imageUrl:\n              default: null\n              nullable: true\n              type: string\n            dateOfFoundation:\n              type: string\n              format: date\n              nullable: true\n            endDate:\n              type: string\n              format: date\n              nullable: true\n            meetingTime:\n              type: string\n              nullable: true\n            weekday:\n              type: integer\n              nullable: true\n              description: 'The number of the weekday. Starting with 0 = Sunday, 1 = Monday, ...'\n            groupCategoryId:\n              nullable: true\n              type: integer\n            ageGroups:\n              type: array\n              items:\n                type: integer\n              example:\n                - 1\n                - 2\n            targetGroupId:\n              nullable: true\n              type: integer\n            maxMembers:\n              type: integer\n              nullable: true\n            groupTypeId:\n              type: integer\n            groupStatusId:\n              type: integer\n            note:\n              type: string\n            campusId:\n              nullable: true\n              type: integer\n        settings:\n          type: object\n          properties:\n            isHidden:\n              type: boolean\n            isOpenForMembers:\n              description: Indicator if people can apply for participation.\n              type: boolean\n            autoAccept:\n              description: Indicator if applications are accepted automatically.\n              type: boolean\n            isPublic:\n              type: boolean\n            inStatistic:\n              description: Show in statistics.\n              type: boolean\n            groupMeeting:\n              type: object\n              properties:\n                autoCreate:\n                  description: Create weekly group meetings.\n                  type: boolean\n                templateId:\n                  description: Group template used for meetings.\n                  type: integer\n                  nullable: true\n            informLeader:\n              description: Inform leader via e-mail about changes.\n              type: boolean\n            newMember:\n              description: 'Campus, Status, Department for newly created persons.'\n              type: object\n              nullable: true\n              properties:\n                campusId:\n                  nullable: true\n                  type: integer\n                statusId:\n                  nullable: true\n                  type: integer\n                departmentId:\n                  nullable: true\n                  type: integer\n        followUp:\n          type: object\n          properties:\n            typeId:\n              type: integer\n              example: 1\n            targetTypeId:\n              type: integer\n              example: 0\n            targetObjectId:\n              type: integer\n              nullable: true\n              example: null\n            targetGroupMemberStatusId:\n              type: integer\n              nullable: true\n              example: null\n            sendReminderMails:\n              type: boolean\n              example: true\n        roles:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: integer\n                description: ID of this group role.\n              groupTypeRoleId:\n                type: integer\n                description: ID of the corresponding group type role.\n              groupTypeId:\n                type: integer\n                description: ID of corresponding group type.\n              name:\n                type: string\n                description: Name of role.\n              shorty:\n                type: string\n                description: Abbreviation of the name.\n              sortKey:\n                type: integer\n                description: Number used for sorting roles.\n              toDelete:\n                type: boolean\n                description: 'Flag, if members of this role can be deleted or removed from the group.'\n              hasRequested:\n                type: boolean\n                description: 'Flag, if group member is requesting group access.'\n              isLeader:\n                type: boolean\n                description: 'Flag, this role is a leader.'\n              isDefault:\n                type: boolean\n                description: Indicator of default roles.\n              isHidden:\n                type: boolean\n                description: 'Flag, if this role is hidden in groups.'\n              growPathId:\n                type: integer\n                nullable: true\n                description: ID of the grow path. The id is either given from the group type role. But a group can override the grow path. In this case the group role specific ID is used.\n              forceTwoFactorAuth:\n                type: boolean\n                description: 'Flag, if members with this role have to use two factor authentication.'\n              isActive:\n                type: boolean\n                description: 'Flag, if this role is active in this group.'\n            example:\n              - id: 5\n                groupTypeRoleId: 3\n                groupTypeId: 2\n                name: Member\n                shorty: M\n                sortKey: 4\n                toDelete: false\n                hasRequested: false\n                isLeader: false\n                isDefault: true\n                isHidden: false\n                growPathId: null\n                forceTwoFactorAuth: false\n                isActive: true\n              - id: 6\n                groupTypeRoleId: 4\n                groupTypeId: 2\n                name: Leader\n                shorty: L\n                sortKey: 2\n                toDelete: false\n                hasRequested: false\n                isLeader: true\n                isDefault: false\n                isHidden: false\n                growPathId: 2\n                forceTwoFactorAuth: true\n                isActive: true\n          example:\n            $ref: '#/components/schemas/Group/properties/roles/items/example'\n    Role:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of this group type role.\n        groupTypeId:\n          type: integer\n          description: ID of corresponding group type.\n        name:\n          type: string\n          description: Name of role.\n        shorty:\n          type: string\n          description: Abbreviation of the name.\n        sortKey:\n          type: integer\n          description: Number used for sorting roles.\n        toDelete:\n          type: boolean\n          description: 'Flag, if members of this role can be deleted or removed from the group.'\n        hasRequested:\n          type: boolean\n          description: 'Flag, if group member is requesting group access.'\n        isLeader:\n          type: boolean\n          description: 'Flag, this role is a leader.'\n        isDefault:\n          type: boolean\n          description: Indicator of default roles.\n        isHidden:\n          type: boolean\n          description: 'Flag, if this role is hidden in groups.'\n        growPathId:\n          type: integer\n          nullable: true\n          description: ID of the grow path.\n      example:\n        - id: 5\n          groupTypeId: 2\n          name: Member\n          shorty: M\n          sortKey: 4\n          toDelete: false\n          hasRequested: false\n          isLeader: false\n          isDefault: true\n          isHidden: false\n          growPathId: null\n        - id: 6\n          groupTypeId: 2\n          name: Leader\n          shorty: L\n          sortKey: 2\n          toDelete: false\n          hasRequested: false\n          isLeader: true\n          isDefault: false\n          isHidden: false\n          growPathId: 2\n    GroupMember:\n      type: object\n      properties:\n        personId:\n          type: integer\n        roleId:\n          type: integer\n        comment:\n          type: string\n        memberStartDate:\n          type: string\n          format: date\n        memberEndDate:\n          type: string\n          format: date\n          nullable: true\n    Status:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of status\n        name:\n          type: string\n          description: Status name\n        shorty:\n          type: string\n          description: Abbreviation of name.\n        isMember:\n          type: boolean\n          description: Flag if status is member of the church\n        isSearchable:\n          type: boolean\n          description: Flag if that status is searchable\n        sortKey:\n          type: integer\n          description: Used to sort all statuses\n        securityLevelId:\n          type: integer\n          description: Only persons with that securitylevel can edit/select/delete that status\n      example:\n        id: 1\n        name: Mitglied\n        shorty: M\n        isMember: true\n        isSearchable: true\n        sortKey: 10\n        securityLevelId: 1\n    Campus:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of campus\n        name:\n          type: string\n          description: Campus name\n        shorty:\n          type: string\n          description: Abbreviation\n        sortKey:\n          type: integer\n          description: Used to sort all campuses\n      example:\n        id: 1\n        name: Gersthofen\n        shorty: G\n        sortKey: 10\n    ServiceGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        sortKey:\n          type: integer\n        viewAll:\n          type: boolean\n        campusId:\n          type: integer\n          nullable: true\n        onlyVisibleInCampusFilter:\n          type: boolean\n      example:\n        id: 2\n        name: Program\n        sortKey: 20\n        viewAll: true\n        campusId: 1\n        onlyVisibleInCampusFilter: false\n    Service:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        serviceGroupId:\n          type: integer\n        commentOnConfirmation:\n          type: boolean\n        sortKey:\n          type: integer\n        allowDecline:\n          type: boolean\n        allowExchange:\n          type: boolean\n        comment:\n          type: string\n        standard:\n          type: boolean\n        hidePersonName:\n          type: boolean\n        sendReminderMails:\n          type: boolean\n        sendServiceRequestEmails:\n          type: boolean\n        allowControlLiveAgenda:\n          type: boolean\n        groupIds:\n          type: string\n          nullable: true\n          description: Comma separated list of group ids\n        tagIds:\n          type: string\n          nullable: true\n          description: Comma separated list of tag ids\n        calTextTemplate:\n          type: string\n      example:\n        id: 2\n        name: Preaching\n        serviceGroupId: 1\n        commentOnConfirmation: false\n        sortKey: 20\n        allowDecline: true\n        allowExchange: true\n        comment: ''\n        standard: true\n        hidePersonName: false\n        sendReminderMails: true\n        sendServiceRequestEmails: true\n        allowControlLiveAgenda: false\n        groupIds: '6'\n        tagIds: '8,10'\n        calTextTemplate: ''\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        count:\n          type: integer\n      example:\n        id: 1\n        name: Super Tag\n        count: 2\n    Department:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of department\n        name:\n          type: string\n          description: Department name\n        shorty:\n          type: string\n          description: Abbreviation\n        sortKey:\n          type: integer\n          description: Used to sort all departments\n      example:\n        id: 1\n        name: Gemeindeliste\n        shorty: G\n        sortKey: 10\n    File:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        filename:\n          type: string\n        url:\n          type: string\n        relativeUrl:\n          type: string\n        size:\n          type: integer\n          description: The file size in byte\n        domainType:\n          type: string\n        domainIdentifier:\n          type: string\n      example:\n        id: 12\n        name: Bild.png\n        filename: 34567890987654566000\n        url: 'https://tets.church.tools?q=file\u0026id=12'\n        relativeUrl: '?q=file\u0026id=12'\n        size: 45678\n        domainType: avatar\n        domainIdentifier: 56\n    Log:\n      description: ChurchTools writes log messages for many events and changes. This can be an update for a person or the deletion of an event. You can use the log to debug your system and follow error messages. This is a versitile tool.\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 2\n        level:\n          type: integer\n          description: 'The log level indicates the importance. 1 = Warning, 2 = Notice, 3 = Info.'\n          example: 1\n        date:\n          type: string\n          description: Timestamp of log\n          format: date-time\n          example: '2018-05-06 19:33'\n        personId:\n          type: integer\n          description: 'If the person ID is `-1`, that means, no person but the system itself has logged that message.'\n          example: 2\n        simultePersonId:\n          type: integer\n          description: 'If a person is simulated by an administrator, we log the personId as well. This makes it possible to see if a person did the action or an admin, who simulated that person.'\n          example: 5\n          nullable: true\n        domainType:\n          type: string\n          description: 'The domain type tells us, where in ChurchTools the action was performed.'\n          example: mail\n        domainId:\n          type: integer\n          description: 'Analog to the domain type, the ID is the explicit resource.'\n          example: 1\n        message:\n          type: string\n          example: 'Help page called: 0:main (1)'\n    AppointmentTemplate:\n      type: object\n      properties:\n        id:\n          type: integer\n        title:\n          type: string\n        comment:\n          type: string\n        startTime:\n          type: string\n        duration:\n          type: integer\n          description: Duration in seconds\n        allDay:\n          type: boolean\n        note:\n          type: string\n        isInternal:\n          type: boolean\n        categoryId:\n          type: integer\n        repeatId:\n          type: integer\n        repeatFrequence:\n          type: integer\n        repeatOptionId:\n          type: integer\n        repeatDuration:\n          type: integer\n      example:\n        id: 1\n        title: Service\n        comment: with sacrament\n        startTime: '10:00'\n        duration: 3600\n        allDay: false\n        note: ''\n        link: ''\n        isInternal: false\n        categoryId: 1\n        repeatId: 4\n        repeatFrequence: null\n        repeatOptionId: null\n        repeatDuration: null\n    Agenda:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        series:\n          type: string\n        isFinal:\n          type: boolean\n        calendarId:\n          type: integer\n        total:\n          type: integer\n          description: Total of agenda items (without headers)\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: integer\n              position:\n                type: integer\n              type:\n                type: string\n                enum:\n                  - normal\n                  - song\n                  - header\n              title:\n                type: string\n              note:\n                type: string\n              duration:\n                type: integer\n                description: Duration of agenda item in seconds.\n              start:\n                type: string\n                format: date-time\n                description: The start time of a position is dynamically calculated based on previous items and the start time of the event.\n              isBeforeEvent:\n                type: boolean\n              responsible:\n                type: object\n                properties:\n                  text:\n                    type: string\n                    description: Raw text string. You need to search-replace the placeholders yourself.\n                  persons:\n                    description: 'Array of all persons, who could be resolved from the text string. If a service has multiple positions, multiple objects are in the array with the same `service` text string. If a service is not yet set the `person` object will be null.'\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        service:\n                          type: string\n                          description: 'Name of the service, which is also the placeholder in the raw text string.'\n                        approved:\n                          type: boolean\n                          description: Flat to indicate if the person has approved the service or is requested.\n                        person:\n                          $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items'\n                          nullable: true\n              serviceGroupNotes:\n                description: 'Array of notes per service group. You will only see the service groups, you are allowed to see.'\n                type: array\n                items:\n                  type: object\n                  properties:\n                    serviceGroupId:\n                      type: integer\n                    note:\n                      type: string\n                  example:\n                    - serviceGroupId: 13\n                      note: Start with synthy pad in background\n                    - serviceGroupId: 11\n                      note: Light off at beginning\n              song:\n                type: object\n                description: If the type is `song` the song object is added to this item. `normal` and `header` items do not include this object.\n                properties:\n                  songId:\n                    type: integer\n                  arrangementId:\n                    type: integer\n                  title:\n                    type: string\n                  arrangement:\n                    type: string\n                  category:\n                    type: string\n                  key:\n                    type: string\n                  bpm:\n                    type: string\n                  defaultArrangement:\n                    type: string\n            example:\n              id: 345\n              position: 1\n              title: Start of Worship\n              type: song\n              note: Praise the Lord\n              duration: 315\n              start: '2019-05-25T11:00:00Z'\n              isBeforeEvent: false\n              responsible:\n                text: '[Worshipleader]'\n                persons:\n                  - service: '[Worshipleader]'\n                    approved: true\n                    person:\n                      $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items/example'\n              serviceGroupNotes:\n                $ref: '#/components/schemas/Agenda/properties/items/items/properties/serviceGroupNotes/items/example'\n              song:\n                songId: 11\n                arrangementId: 22\n                title: Bless the Lord\n                arrangement: For Man Voice\n                category: Worship\n                key: G-Major\n                bpm: '80'\n                defaultArrangement: Original\n      example:\n        id: 10\n        name: 11.00 Service 25.05.2019\n        series: Prophets\n        isFinal: false\n        calendarId: 1\n        total: 24\n        items:\n          - $ref: '#/components/schemas/Agenda/properties/items/items/example'\n    Event:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        startDate:\n          type: string\n          format: date\n        endDate:\n          type: string\n          format: date\n        eventServices:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: integer\n              person:\n                $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items'\n                nullable: true\n              name:\n                type: string\n              serviceId:\n                type: integer\n              agreed:\n                type: boolean\n              isValid:\n                type: boolean\n              requestedDate:\n                type: string\n                format: date\n              requesterPerson:\n                $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items'\n                nullable: true\n              comment:\n                type: string\n              counter:\n                type: integer\n            example:\n              id: 77\n              person:\n                $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items/example'\n              name: John Smith\n              serviceId: 8\n              agreed: true\n              isValid: true\n              requestedDate: '2019-08-01 16:16:54'\n              requesterPerson:\n                $ref: '#/paths/~1agendas~1send/post/responses/200/content/application~1json/schema/properties/errors/items/example'\n              comment: I\"m in\n              counter: 0\n      example:\n        id: 10\n        name: Sunday Service\n        description: We celebrate\n        startDate: '2019-08-06 11:00:00'\n        endDate: '2019-08-06 12:30:00'\n        items:\n          - $ref: '#/components/schemas/Event/properties/eventServices/items/example'\n"
		}
	},
	"Error": "parse: paths: /tags: get: getTags: responses: 403: resolve \"#/paths/~1logs/get/responses/403\" reference: invalid response reference: \"#/paths/~1logs/get/responses/403\""
}