{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/amazonaws.com/runtime.lex.v2/2020-08-07/openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  version: '2020-08-07'\n  x-release: v4\n  title: Amazon Lex Runtime V2\n  description: \u003cp/\u003e\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: runtime.lex.v2\n  x-aws-signingName: lex\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex.v2-2020-08-07.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/runtime-v2-lex/'\nservers:\n  - url: 'http://runtime-v2-lex.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Lex Runtime V2 multi-region endpoint\n  - url: 'https://runtime-v2-lex.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The Lex Runtime V2 multi-region endpoint\n  - url: 'http://runtime-v2-lex.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Lex Runtime V2 endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://runtime-v2-lex.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Lex Runtime V2 endpoint for China (Beijing) and China (Ningxia)\npaths:\n  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}':\n    delete:\n      operationId: DeleteSession\n      description: '\u003cp\u003eRemoves session information for a specified bot, alias, and user ID. \u003c/p\u003e \u003cp\u003eYou can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again.\u003c/p\u003e \u003cp\u003eYou don''t need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours.\u003c/p\u003e \u003cp\u003eIf you specify a bot or alias ID that doesn''t exist, you receive a \u003ccode\u003eBadRequestException.\u003c/code\u003e \u003c/p\u003e \u003cp\u003eIf the locale doesn''t exist in the bot, or if the locale hasn''t been enables for the alias, you receive a \u003ccode\u003eBadRequestException\u003c/code\u003e.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteSessionResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n      parameters:\n        - name: botId\n          in: path\n          required: true\n          description: The identifier of the bot that contains the session data.\n          schema:\n            type: string\n            pattern: '^[0-9a-zA-Z]+$'\n            minLength: 10\n            maxLength: 10\n        - name: botAliasId\n          in: path\n          required: true\n          description: The alias identifier in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: localeId\n          in: path\n          required: true\n          description: The locale where the session is in use.\n          schema:\n            type: string\n            minLength: 1\n        - name: sessionId\n          in: path\n          required: true\n          description: The identifier of the session to delete.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n    get:\n      operationId: GetSession\n      description: '\u003cp\u003eReturns session information for a specified bot, alias, and user.\u003c/p\u003e \u003cp\u003eFor example, you can use this operation to retrieve session information for a user that has left a long-running session in use.\u003c/p\u003e \u003cp\u003eIf the bot, alias, or session identifier doesn''t exist, Amazon Lex V2 returns a \u003ccode\u003eBadRequestException\u003c/code\u003e. If the locale doesn''t exist or is not enabled for the alias, you receive a \u003ccode\u003eBadRequestException\u003c/code\u003e.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSessionResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n      parameters:\n        - name: botId\n          in: path\n          required: true\n          description: The identifier of the bot that contains the session data.\n          schema:\n            type: string\n            pattern: '^[0-9a-zA-Z]+$'\n            minLength: 10\n            maxLength: 10\n        - name: botAliasId\n          in: path\n          required: true\n          description: The alias identifier in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: localeId\n          in: path\n          required: true\n          description: The locale where the session is in use.\n          schema:\n            type: string\n            minLength: 1\n        - name: sessionId\n          in: path\n          required: true\n          description: The identifier of the session to return.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n    post:\n      operationId: PutSession\n      description: Creates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PutSessionResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '486':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '487':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n      parameters:\n        - name: botId\n          in: path\n          required: true\n          description: The identifier of the bot that receives the session data.\n          schema:\n            type: string\n            pattern: '^[0-9a-zA-Z]+$'\n            minLength: 10\n            maxLength: 10\n        - name: botAliasId\n          in: path\n          required: true\n          description: The alias identifier of the bot that receives the session data.\n          schema:\n            type: string\n        - name: localeId\n          in: path\n          required: true\n          description: The locale where the session is in use.\n          schema:\n            type: string\n            minLength: 1\n        - name: sessionId\n          in: path\n          required: true\n          description: The identifier of the session that receives the session data.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n        - name: ResponseContentType\n          in: header\n          required: false\n          description: '\u003cp\u003eThe message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003etext/plain; charset=utf-8\u003c/code\u003e, Amazon Lex V2 returns text in the response.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            minLength: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - sessionState\n              properties:\n                messages:\n                  description: A list of messages to send to the user. Messages are sent in the order that they are defined in the list.\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Message'\n                  maxItems: 10\n                sessionState:\n                  description: The state of the user's session with Amazon Lex V2.\n                  type: object\n                  properties:\n                    dialogAction:\n                      allOf:\n                        - $ref: '#/components/schemas/DialogAction'\n                        - description: The next step that Amazon Lex V2 should take in the conversation with a user.\n                    intent:\n                      allOf:\n                        - $ref: '#/components/schemas/Intent'\n                        - description: The active intent that Amazon Lex V2 is processing.\n                    activeContexts:\n                      allOf:\n                        - $ref: '#/components/schemas/ActiveContextsList'\n                        - description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'\n                    sessionAttributes:\n                      allOf:\n                        - $ref: '#/components/schemas/StringMap'\n                        - description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n                    originatingRequestId:\n                      allOf:\n                        - $ref: '#/components/schemas/NonEmptyString'\n                        - description: \u003cp/\u003e\n                requestAttributes:\n                  description: '\u003cp\u003eRequest-specific information passed between Amazon Lex V2 and the client application.\u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e'\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/String'\n  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text':\n    post:\n      operationId: RecognizeText\n      description: '\u003cp\u003eSends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot.\u003c/p\u003e \u003cp\u003eIn response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecognizeTextResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '486':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '487':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n      parameters:\n        - name: botId\n          in: path\n          required: true\n          description: The identifier of the bot that processes the request.\n          schema:\n            type: string\n            pattern: '^[0-9a-zA-Z]+$'\n            minLength: 10\n            maxLength: 10\n        - name: botAliasId\n          in: path\n          required: true\n          description: The alias identifier in use for the bot that processes the request.\n          schema:\n            type: string\n        - name: localeId\n          in: path\n          required: true\n          description: The locale where the session is in use.\n          schema:\n            type: string\n            minLength: 1\n        - name: sessionId\n          in: path\n          required: true\n          description: The identifier of the user session that is having the conversation.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - text\n              properties:\n                text:\n                  description: The text that the user entered. Amazon Lex V2 interprets this text.\n                  type: string\n                  minLength: 1\n                  maxLength: 1024\n                  format: password\n                sessionState:\n                  description: The state of the user's session with Amazon Lex V2.\n                  type: object\n                  properties:\n                    dialogAction:\n                      allOf:\n                        - $ref: '#/components/schemas/DialogAction'\n                        - description: The next step that Amazon Lex V2 should take in the conversation with a user.\n                    intent:\n                      allOf:\n                        - $ref: '#/components/schemas/Intent'\n                        - description: The active intent that Amazon Lex V2 is processing.\n                    activeContexts:\n                      allOf:\n                        - $ref: '#/components/schemas/ActiveContextsList'\n                        - description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'\n                    sessionAttributes:\n                      allOf:\n                        - $ref: '#/components/schemas/StringMap'\n                        - description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n                    originatingRequestId:\n                      allOf:\n                        - $ref: '#/components/schemas/NonEmptyString'\n                        - description: \u003cp/\u003e\n                requestAttributes:\n                  description: '\u003cp\u003eRequest-specific information passed between the client application and Amazon Lex V2 \u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e'\n                  type: object\n                  additionalProperties:\n                    $ref: '#/components/schemas/String'\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  '/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance#Content-Type':\n    post:\n      operationId: RecognizeUtterance\n      description: '\u003cp\u003eSends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot.\u003c/p\u003e \u003cp\u003eThe following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003erequestAttributes\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003esessionState\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003einputTranscript\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003einterpretations\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003emessages\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003erequestAttributes\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003esessionState\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecognizeUtteranceResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '482':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '483':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '484':\n          description: InternalServerException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerException'\n        '485':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n        '486':\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DependencyFailedException'\n        '487':\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadGatewayException'\n      parameters:\n        - name: botId\n          in: path\n          required: true\n          description: The identifier of the bot that should receive the request.\n          schema:\n            type: string\n            pattern: '^[0-9a-zA-Z]+$'\n            minLength: 10\n            maxLength: 10\n        - name: botAliasId\n          in: path\n          required: true\n          description: The alias identifier in use for the bot that should receive the request.\n          schema:\n            type: string\n        - name: localeId\n          in: path\n          required: true\n          description: The locale where the session is in use.\n          schema:\n            type: string\n            minLength: 1\n        - name: sessionId\n          in: path\n          required: true\n          description: The identifier of the session in use.\n          schema:\n            type: string\n            pattern: '[0-9a-zA-Z._:-]+'\n            minLength: 2\n            maxLength: 100\n        - name: x-amz-lex-session-state\n          in: header\n          required: false\n          description: '\u003cp\u003eSets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003esessionState\u003c/code\u003e field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.\u003c/p\u003e'\n          schema:\n            type: string\n            format: password\n        - name: x-amz-lex-request-attributes\n          in: header\n          required: false\n          description: '\u003cp\u003eRequest-specific information passed between the client application and Amazon Lex V2 \u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes for prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003erequestAttributes\u003c/code\u003e field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.\u003c/p\u003e'\n          schema:\n            type: string\n            format: password\n        - name: Content-Type\n          in: header\n          required: true\n          description: '\u003cp\u003eIndicates the format for audio input or that the content is text. The header must start with one of the following prefixes:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ePCM format, audio data must be in little-endian byte order.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/l16; rate=16000; channels=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/x-l16; sample-rate=16000; channel-count=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eOpus format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eText format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            minLength: 1\n        - name: Response-Content-Type\n          in: header\n          required: false\n          description: '\u003cp\u003eThe message that Amazon Lex V2 returns in the response can be either text or speech based on the \u003ccode\u003eresponseContentType\u003c/code\u003e value.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003etext/plain;charset=utf-8\u003c/code\u003e, Amazon Lex V2 returns text in the response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the value begins with \u003ccode\u003eaudio/\u003c/code\u003e, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the \u003ccode\u003erequestContentType\u003c/code\u003e parameter. For example, if you specify \u003ccode\u003eaudio/mpeg\u003c/code\u003e as the value, Amazon Lex V2 returns speech in the MPEG format.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the value is \u003ccode\u003eaudio/pcm\u003c/code\u003e, the speech returned is \u003ccode\u003eaudio/pcm\u003c/code\u003e at 16 KHz in 16-bit, little-endian format.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe following are the accepted values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/mpeg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/ogg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/pcm (16 KHz)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/* (defaults to mpeg)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e'\n          schema:\n            type: string\n            minLength: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                inputStream:\n                  description: User input in PCM or Opus audio format or text format as described in the \u003ccode\u003erequestContentType\u003c/code\u003e parameter.\n                  type: string\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    DeleteSessionResponse:\n      type: object\n      properties:\n        botId:\n          allOf:\n            - $ref: '#/components/schemas/BotIdentifier'\n            - description: The identifier of the bot that contained the session data.\n        botAliasId:\n          allOf:\n            - $ref: '#/components/schemas/BotAliasIdentifier'\n            - description: The alias identifier in use for the bot that contained the session data.\n        localeId:\n          allOf:\n            - $ref: '#/components/schemas/LocaleId'\n            - description: The locale where the session was used.\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/SessionId'\n            - description: The identifier of the deleted session.\n    AccessDeniedException: {}\n    ResourceNotFoundException: {}\n    ValidationException: {}\n    ThrottlingException: {}\n    InternalServerException: {}\n    ConflictException: {}\n    GetSessionResponse:\n      type: object\n      properties:\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The identifier of the returned session.\n        messages:\n          allOf:\n            - $ref: '#/components/schemas/Messages'\n            - description: 'A list of messages that were last sent to the user. The messages are ordered based on the order that your returned the messages from your Lambda function or the order that messages are defined in the bot. '\n        interpretations:\n          allOf:\n            - $ref: '#/components/schemas/Interpretations'\n            - description: '\u003cp\u003eA list of intents that Amazon Lex V2 determined might satisfy the user''s utterance. \u003c/p\u003e \u003cp\u003eEach interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.\u003c/p\u003e'\n        sessionState:\n          allOf:\n            - $ref: '#/components/schemas/SessionState'\n            - description: \u003cp\u003eRepresents the current state of the dialog between the user and the bot.\u003c/p\u003e \u003cp\u003eYou can use this to determine the progress of the conversation and what the next action might be.\u003c/p\u003e\n    PutSessionResponse:\n      type: object\n      properties:\n        audioStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: 'If the requested content type was audio, the audio version of the message to convey to the user.'\n    Message:\n      type: object\n      required:\n        - contentType\n      properties:\n        content:\n          allOf:\n            - $ref: '#/components/schemas/Text'\n            - description: The text of the message.\n        contentType:\n          allOf:\n            - $ref: '#/components/schemas/MessageContentType'\n            - description: Indicates the type of response.\n        imageResponseCard:\n          $ref: '#/components/schemas/ImageResponseCard'\n      description: Container for text that is returned to the customer..\n    DialogAction:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          allOf:\n            - $ref: '#/components/schemas/DialogActionType'\n            - description: '\u003cp\u003eThe next action that the bot should take in its interaction with the user. The possible values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eClose\u003c/code\u003e - Indicates that there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eDelegate\u003c/code\u003e - The next action is determined by Amazon Lex V2.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e - The next action is to elicit a slot value from the user.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        slotToElicit:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The name of the slot that should be elicited from the user.\n      description: The next action that Amazon Lex V2 should take.\n    Intent:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The name of the intent.\n        slots:\n          allOf:\n            - $ref: '#/components/schemas/Slots'\n            - description: 'A map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.'\n        state:\n          allOf:\n            - $ref: '#/components/schemas/IntentState'\n            - description: 'Contains fulfillment information for the intent. '\n        confirmationState:\n          allOf:\n            - $ref: '#/components/schemas/ConfirmationState'\n            - description: Contains information about whether fulfillment of the intent has been confirmed.\n      description: The current intent that Amazon Lex V2 is attempting to fulfill.\n    ActiveContextsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ActiveContext'\n      minItems: 0\n      maxItems: 20\n    StringMap:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/String'\n    NonEmptyString:\n      type: string\n      minLength: 1\n    String:\n      type: string\n    DependencyFailedException: {}\n    BadGatewayException: {}\n    RecognizeTextResponse:\n      type: object\n      properties:\n        messages:\n          allOf:\n            - $ref: '#/components/schemas/Messages'\n            - description: A list of messages last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.\n        sessionState:\n          allOf:\n            - $ref: '#/components/schemas/SessionState'\n            - description: \u003cp\u003eRepresents the current state of the dialog between the user and the bot. \u003c/p\u003e \u003cp\u003eUse this to determine the progress of the conversation and what the next action may be.\u003c/p\u003e\n        interpretations:\n          allOf:\n            - $ref: '#/components/schemas/Interpretations'\n            - description: '\u003cp\u003eA list of intents that Amazon Lex V2 determined might satisfy the user''s utterance. \u003c/p\u003e \u003cp\u003eEach interpretation includes the intent, a score that indicates now confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.\u003c/p\u003e'\n        requestAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: The attributes sent in the request.\n        sessionId:\n          allOf:\n            - $ref: '#/components/schemas/SessionId'\n            - description: The identifier of the session in use.\n    RecognizeUtteranceResponse:\n      type: object\n      properties:\n        audioStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: 'The prompt or statement to send to the user. This is based on the bot configuration and context. For example, if Amazon Lex V2 did not understand the user intent, it sends the \u003ccode\u003eclarificationPrompt\u003c/code\u003e configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the \u003ccode\u003econfirmationPrompt\u003c/code\u003e. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex V2 sends that message in the response.'\n    ActiveContextName:\n      type: string\n      pattern: '^([A-Za-z]_?)+$'\n      minLength: 1\n      maxLength: 100\n    ActiveContextTimeToLive:\n      type: object\n      required:\n        - timeToLiveInSeconds\n        - turnsToLive\n      properties:\n        timeToLiveInSeconds:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTimeToLiveInSeconds'\n            - description: The number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).\n        turnsToLive:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTurnsToLive'\n            - description: The number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.\n      description: The time that a context is active. You can specify the time to live in seconds or in conversation turns.\n    ActiveContextParametersMap:\n      type: object\n      minProperties: 0\n      maxProperties: 10\n      additionalProperties:\n        $ref: '#/components/schemas/Text'\n    ActiveContext:\n      type: object\n      required:\n        - name\n        - timeToLive\n        - contextAttributes\n      properties:\n        name:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextName'\n            - description: The name of the context.\n        timeToLive:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextTimeToLive'\n            - description: 'Indicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.'\n        contextAttributes:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextParametersMap'\n            - description: '\u003cp\u003eA lis tof contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.\u003c/p\u003e \u003cp\u003eIf you don''t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared. \u003c/p\u003e'\n      description: '\u003cp\u003eContains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.\u003c/p\u003e \u003cp\u003eUse a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is \u003ccode\u003eorder-fulfilled\u003c/code\u003e, only intents that have \u003ccode\u003eorder-fulfilled\u003c/code\u003e configured as a trigger are considered for follow up.\u003c/p\u003e'\n    Text:\n      type: string\n      minLength: 1\n      maxLength: 1024\n      format: password\n    ActiveContextTimeToLiveInSeconds:\n      type: integer\n      minimum: 5\n      maximum: 86400\n    ActiveContextTurnsToLive:\n      type: integer\n      minimum: 1\n      maximum: 20\n    AttachmentTitle:\n      type: string\n      minLength: 1\n      maxLength: 250\n    AttachmentUrl:\n      type: string\n      minLength: 1\n      maxLength: 250\n    BlobStream:\n      type: string\n    BotAliasIdentifier:\n      type: string\n    BotIdentifier:\n      type: string\n      pattern: '^[0-9a-zA-Z]+$'\n      minLength: 10\n      maxLength: 10\n    ButtonText:\n      type: string\n      minLength: 1\n      maxLength: 50\n    ButtonValue:\n      type: string\n      minLength: 1\n      maxLength: 50\n    Button:\n      type: object\n      required:\n        - text\n        - value\n      properties:\n        text:\n          allOf:\n            - $ref: '#/components/schemas/ButtonText'\n            - description: The text that is displayed on the button.\n        value:\n          allOf:\n            - $ref: '#/components/schemas/ButtonValue'\n            - description: The value returned to Amazon Lex V2 when a user chooses the button.\n      description: A button that appears on a response card show to the user.\n    ButtonsList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Button'\n      minItems: 0\n      maxItems: 5\n    Double:\n      type: number\n      format: double\n    ConfidenceScore:\n      type: object\n      properties:\n        score:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: A score that indicates how confident Amazon Lex V2 is that an intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n      description: Provides a score that indicates the confidence that Amazon Lex V2 has that an intent is the one that satisfies the user's intent.\n    ConfirmationState:\n      type: string\n      enum:\n        - Confirmed\n        - Denied\n        - None\n    LocaleId:\n      type: string\n      minLength: 1\n    SessionId:\n      type: string\n      pattern: '[0-9a-zA-Z._:-]+'\n      minLength: 2\n      maxLength: 100\n    DeleteSessionRequest:\n      type: object\n      title: DeleteSessionRequest\n      properties: {}\n    DialogActionType:\n      type: string\n      enum:\n        - Close\n        - ConfirmIntent\n        - Delegate\n        - ElicitIntent\n        - ElicitSlot\n    GetSessionRequest:\n      type: object\n      title: GetSessionRequest\n      properties: {}\n    Messages:\n      type: array\n      items:\n        $ref: '#/components/schemas/Message'\n      maxItems: 10\n    Interpretations:\n      type: array\n      items:\n        $ref: '#/components/schemas/Interpretation'\n      maxItems: 5\n    SessionState:\n      type: object\n      properties:\n        dialogAction:\n          allOf:\n            - $ref: '#/components/schemas/DialogAction'\n            - description: The next step that Amazon Lex V2 should take in the conversation with a user.\n        intent:\n          allOf:\n            - $ref: '#/components/schemas/Intent'\n            - description: The active intent that Amazon Lex V2 is processing.\n        activeContexts:\n          allOf:\n            - $ref: '#/components/schemas/ActiveContextsList'\n            - description: 'One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.'\n        sessionAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n        originatingRequestId:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: \u003cp/\u003e\n      description: The state of the user's session with Amazon Lex V2.\n    ImageResponseCard:\n      type: object\n      required:\n        - title\n      properties:\n        title:\n          allOf:\n            - $ref: '#/components/schemas/AttachmentTitle'\n            - description: The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n        subtitle:\n          allOf:\n            - $ref: '#/components/schemas/AttachmentTitle'\n            - description: The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n        imageUrl:\n          allOf:\n            - $ref: '#/components/schemas/AttachmentUrl'\n            - description: The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n        buttons:\n          allOf:\n            - $ref: '#/components/schemas/ButtonsList'\n            - description: A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n      description: '\u003cp\u003eA card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. \u003c/p\u003e \u003cp\u003eWhen you use a response card, the response from the user is constrained to the text associated with a button on the card.\u003c/p\u003e'\n    Slots:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/Slot'\n    IntentState:\n      type: string\n      enum:\n        - Failed\n        - Fulfilled\n        - InProgress\n        - ReadyForFulfillment\n        - Waiting\n    SentimentResponse:\n      type: object\n      properties:\n        sentiment:\n          allOf:\n            - $ref: '#/components/schemas/SentimentType'\n            - description: The overall sentiment expressed in the user's response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.\n        sentimentScore:\n          $ref: '#/components/schemas/SentimentScore'\n      description: '\u003cp\u003eProvides information about the sentiment expressed in a user''s response in a conversation. Sentiments are determined using Amazon Comprehend. Sentiments are only returned if they are enabled for the bot.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html\"\u003e Determine Sentiment \u003c/a\u003e in the \u003ci\u003eAmazon Comprehend developer guide\u003c/i\u003e.\u003c/p\u003e'\n    Interpretation:\n      type: object\n      properties:\n        nluConfidence:\n          allOf:\n            - $ref: '#/components/schemas/ConfidenceScore'\n            - description: 'Determines the threshold where Amazon Lex V2 will insert the \u003ccode\u003eAMAZON.FallbackIntent\u003c/code\u003e, \u003ccode\u003eAMAZON.KendraSearchIntent\u003c/code\u003e, or both when returning alternative intents in a response. \u003ccode\u003eAMAZON.FallbackIntent\u003c/code\u003e and \u003ccode\u003eAMAZON.KendraSearchIntent\u003c/code\u003e are only inserted if they are configured for the bot.'\n        sentimentResponse:\n          allOf:\n            - $ref: '#/components/schemas/SentimentResponse'\n            - description: '\u003cp\u003eThe sentiment expressed in an utterance. \u003c/p\u003e \u003cp\u003eWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\u003c/p\u003e'\n        intent:\n          allOf:\n            - $ref: '#/components/schemas/Intent'\n            - description: A list of intents that might satisfy the user's utterance. The intents are ordered by the confidence score.\n      description: 'An intent that Amazon Lex V2 determined might satisfy the user''s utterance. The intents are ordered by the confidence score. '\n    MessageContentType:\n      type: string\n      enum:\n        - CustomPayload\n        - ImageResponseCard\n        - PlainText\n        - SSML\n    ParameterName:\n      type: string\n      minLength: 1\n      maxLength: 100\n    PutSessionRequest:\n      type: object\n      required:\n        - sessionState\n      title: PutSessionRequest\n      properties:\n        messages:\n          allOf:\n            - $ref: '#/components/schemas/Messages'\n            - description: A list of messages to send to the user. Messages are sent in the order that they are defined in the list.\n        sessionState:\n          allOf:\n            - $ref: '#/components/schemas/SessionState'\n            - description: 'Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.'\n        requestAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: '\u003cp\u003eRequest-specific information passed between Amazon Lex V2 and the client application.\u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e'\n    RecognizeTextRequest:\n      type: object\n      required:\n        - text\n      title: RecognizeTextRequest\n      properties:\n        text:\n          allOf:\n            - $ref: '#/components/schemas/Text'\n            - description: The text that the user entered. Amazon Lex V2 interprets this text.\n        sessionState:\n          allOf:\n            - $ref: '#/components/schemas/SessionState'\n            - description: The current state of the dialog between the user and the bot.\n        requestAttributes:\n          allOf:\n            - $ref: '#/components/schemas/StringMap'\n            - description: '\u003cp\u003eRequest-specific information passed between the client application and Amazon Lex V2 \u003c/p\u003e \u003cp\u003eThe namespace \u003ccode\u003ex-amz-lex:\u003c/code\u003e is reserved for special attributes. Don''t create any request attributes with the prefix \u003ccode\u003ex-amz-lex:\u003c/code\u003e.\u003c/p\u003e'\n    SensitiveNonEmptyString:\n      type: string\n      format: password\n    RecognizeUtteranceRequest:\n      type: object\n      title: RecognizeUtteranceRequest\n      properties:\n        inputStream:\n          allOf:\n            - $ref: '#/components/schemas/BlobStream'\n            - description: User input in PCM or Opus audio format or text format as described in the \u003ccode\u003erequestContentType\u003c/code\u003e parameter.\n    SentimentType:\n      type: string\n      enum:\n        - MIXED\n        - NEGATIVE\n        - NEUTRAL\n        - POSITIVE\n    SentimentScore:\n      type: object\n      properties:\n        positive:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the \u003ccode\u003ePOSITIVE\u003c/code\u003e sentiment.\n        negative:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the \u003ccode\u003eNEGATIVE\u003c/code\u003e sentiment.\n        neutral:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the \u003ccode\u003eNEUTRAL\u003c/code\u003e sentiment.\n        mixed:\n          allOf:\n            - $ref: '#/components/schemas/Double'\n            - description: The level of confidence that Amazon Comprehend has in the accuracy of its detection of the \u003ccode\u003eMIXED\u003c/code\u003e sentiment.\n      description: The individual sentiment responses for the utterance.\n    Shape:\n      type: string\n      enum:\n        - Scalar\n        - List\n    Value:\n      type: object\n      required:\n        - interpretedValue\n      properties:\n        originalValue:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: The text of the utterance from the user that was entered for the slot.\n        interpretedValue:\n          allOf:\n            - $ref: '#/components/schemas/NonEmptyString'\n            - description: 'The value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the \u003ccode\u003eresolvedValues\u003c/code\u003e list.'\n        resolvedValues:\n          allOf:\n            - $ref: '#/components/schemas/StringList'\n            - description: A list of additional values that have been recognized for the slot.\n      description: The value of a slot.\n    Values:\n      type: array\n      items:\n        $ref: '#/components/schemas/Slot'\n    Slot:\n      type: object\n      properties:\n        value:\n          allOf:\n            - $ref: '#/components/schemas/Value'\n            - description: The current value of the slot.\n        values:\n          allOf:\n            - $ref: '#/components/schemas/Values'\n            - description: 'A list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\" '\n      description: 'A value that Amazon Lex V2 uses to fulfill an intent. '\n    StringList:\n      type: array\n      items:\n        $ref: '#/components/schemas/NonEmptyString'\nsecurity:\n  - hmac: []\n"
		}
	},
	"Error": "parse: paths: /bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}: get: GetSession: responses: 484: unknown status code: 484"
}