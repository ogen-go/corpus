{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Trials_GET_POST.yaml",
			"path": "Specification/BrAPI-Core/Trials/Trials_GET_POST.yaml",
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /trials:\n    get:\n      summary: Get a filtered list of Trials\n      description: Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies\n      parameters:\n      - name: active\n        description: Filter active status true/false.\n        in: query\n        required: false\n        schema:\n          type: boolean\n      - name: commonCropName\n        description: Common name for the crop associated with this trial\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: contactDbId\n        description: Contact entities associated with this trial\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: programDbId\n        description: Program filter to only return trials associated with given program id.\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: locationDbId\n        description: Filter by location\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: searchDateRangeStart\n        description: |-\n            The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n            \n            Return a Trial entity if any of the following cases are true\n            \n            - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n            \n            - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n            \n            - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n            \n            - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`\n        in: query\n        required: false\n        schema:\n          type: string\n          format: date\n      - name: searchDateRangeEnd\n        description: |-\n            The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n            \n            Return a Trial entity if any of the following cases are true\n            \n            - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n            \n            - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n            \n            - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n            \n            - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`\n        in: query\n        required: false\n        schema:\n          type: string\n          format: date\n      - name: studyDbId\n        description: Filter by connected studyDbId\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: trialDbId\n        description: Filter by trialDbId\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: trialName\n        description: Filter by trial name\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: trialPUI\n        description: Filter by trial PUI\n        in: query\n        required: false\n        schema:\n          type: string\n      - name: sortBy\n        description: Sort order. Name of the field to sort by.\n        in: query\n        required: false\n        schema:\n          enum:\n          - trialDbId\n          - trialName\n          - programDbId\n          - programName\n          - locationDbId\n          - startDate\n          - endDate\n          type: string\n      - name: sortOrder\n        description: 'Sort order direction: asc/desc'\n        in: query\n        required: false\n        schema:\n          enum:\n          - asc\n          - ASC\n          - desc\n          - DESC\n          type: string\n      - $ref: '#/components/parameters/externalReferenceID'\n      - $ref: '#/components/parameters/externalReferenceSource'\n      - $ref: '#/components/parameters/page'\n      - $ref: '#/components/parameters/pageSize'\n      - $ref: '#/components/parameters/authorizationHeader'\n      responses:\n        '200':\n          $ref: '#/components/responses/TrialListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Trials\n    post:\n      summary: Create new trials\n      description: Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.\n      parameters:\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items: \n                $ref: '#/components/schemas/TrialNewRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/TrialListResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n      tags:\n      - Trials\n\ncomponents:\n  responses:\n    TrialListResponse:\n      content:\n        application/json:\n          schema:\n            title: TrialListResponse\n            properties:\n              '@context':\n                $ref: '#/components/schemas/Context'\n              metadata:\n                $ref: '#/components/schemas/metadata'\n              result:\n                properties:\n                  data:\n                    items:\n                      $ref: '#/components/schemas/Trial'\n                    type: array\n                required:\n                - data\n                type: object\n            required:\n            - metadata\n            - result\n            type: object\n      description: OK\n      headers: {}"
		}
	},
	"Error": "parse: paths: /trials: get: : parameters: parse parameter \"\": resolve \"#/components/parameters/externalReferenceID\" reference: component by reference \"#/components/parameters/externalReferenceID\" not found"
}