{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ccouzens/keycloak-openapi"
		},
		"file": {
			"name": "15.0.yml",
			"path": "keycloak/15.0.yml",
			"content": "openapi: 3.0.2\ninfo:\n  title: Keycloak Admin REST API\n  description: This is a REST API reference for the Keycloak Admin\n  version: '1'\npaths:\n  /:\n    get:\n      tags:\n        - Root\n      summary: Get themes, social providers, auth providers, and event listeners available\n        on this server\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerInfoRepresentation'\n    post:\n      tags:\n        - Realms Admin\n      summary: Import a realm   Imports a realm from a full representation of that\n        realm.\n      requestBody:\n        description: JSON representation of the realm\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n  /{id}/name:\n    get:\n      tags:\n        - User Storage Provider\n      summary: Need this for admin console to display simple name of provider when\n        displaying client detail   KEYCLOAK-4328\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get the top-level representation of the realm   It will not include\n        nested information like User and Client representations.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    put:\n      tags:\n        - Realms Admin\n      summary: Update the top-level information of the realm   Any user, roles or\n        client information in the representation  will be ignored.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      summary: Delete the realm\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/admin-events:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get admin events   Returns all admin events, or filters events based\n        on URL query parameters listed here\n      parameters:\n        - in: query\n          name: authClient\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: authIpAddress\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: authRealm\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: authUser\n          description: user id\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateFrom\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateTo\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: first\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: operationTypes\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n        - in: query\n          name: resourcePath\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: resourceTypes\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    delete:\n      tags:\n        - Realms Admin\n      summary: Delete all admin events\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/attack-detection/brute-force/users:\n    delete:\n      tags:\n        - Attack Detection\n      summary: Clear any user login failures for all users   This can release temporary\n        disabled users\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/attack-detection/brute-force/users/{userId}:\n    get:\n      tags:\n        - Attack Detection\n      summary: Get status of a username in brute force detection\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    delete:\n      tags:\n        - Attack Detection\n      summary: Clear any user login failures for the user   This can release temporary\n        disabled user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/authenticator-providers:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authenticator providers   Returns a stream of authenticator providers.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/client-authenticator-providers:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get client authenticator providers   Returns a stream of client authenticator\n        providers.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/config-description/{providerId}:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authenticator providerâ€™s configuration description\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigInfoRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: providerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/config/{id}:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authenticator configuration\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n    put:\n      tags:\n        - Authentication Management\n      summary: Update authenticator configuration\n      requestBody:\n        description: JSON describing new state of authenticator configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Authentication Management\n      summary: Delete authenticator configuration\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: Configuration id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/executions:\n    post:\n      tags:\n        - Authentication Management\n      summary: Add new authentication execution\n      requestBody:\n        description: JSON model describing authentication execution\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/executions/{executionId}:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get Single Execution\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Authentication Management\n      summary: Delete execution\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: executionId\n        description: Execution id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/executions/{executionId}/config:\n    post:\n      tags:\n        - Authentication Management\n      summary: Update execution with new configuration\n      requestBody:\n        description: JSON with new configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: executionId\n        description: Execution id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/executions/{executionId}/lower-priority:\n    post:\n      tags:\n        - Authentication Management\n      summary: Lower executionâ€™s priority\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: executionId\n        description: Execution id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/executions/{executionId}/raise-priority:\n    post:\n      tags:\n        - Authentication Management\n      summary: Raise executionâ€™s priority\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: executionId\n        description: Execution id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authentication flows   Returns a stream of authentication flows.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Authentication Management\n      summary: Create a new authentication flow\n      requestBody:\n        description: Authentication flow representation\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows/{flowAlias}/copy:\n    post:\n      tags:\n        - Authentication Management\n      summary: Copy existing authentication flow under a new name   The new name is\n        given as 'newName' attribute of the passed JSON object\n      requestBody:\n        description: JSON containing 'newName' attribute\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: flowAlias\n        description: Name of the existing authentication flow\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows/{flowAlias}/executions:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authentication executions for a flow\n      responses:\n        2XX:\n          description: success\n    put:\n      tags:\n        - Authentication Management\n      summary: Update authentication executions of a Flow\n      requestBody:\n        description: AuthenticationExecutionInfoRepresentation\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationExecutionInfoRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: flowAlias\n        description: Flow alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows/{flowAlias}/executions/execution:\n    post:\n      tags:\n        - Authentication Management\n      summary: Add new authentication execution to a flow\n      requestBody:\n        description: New execution JSON data containing 'provider' attribute\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: flowAlias\n        description: Alias of parent flow\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows/{flowAlias}/executions/flow:\n    post:\n      tags:\n        - Authentication Management\n      summary: Add new flow with new execution to existing flow\n      requestBody:\n        description: New authentication flow / execution JSON data containing 'alias',\n          'type', 'provider', and 'description' attributes\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: flowAlias\n        description: Alias of parent authentication flow\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/flows/{id}:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get authentication flow for id\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n    put:\n      tags:\n        - Authentication Management\n      summary: Update an authentication flow\n      requestBody:\n        description: Authentication flow representation\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Authentication Management\n      summary: Delete an authentication flow\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: Flow id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/form-action-providers:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get form action providers   Returns a stream of form action providers.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/form-providers:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get form providers   Returns a stream of form providers.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/per-client-config-description:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get configuration descriptions for all clients\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/register-required-action:\n    post:\n      tags:\n        - Authentication Management\n      summary: Register a new required actions\n      requestBody:\n        description: JSON containing 'providerId', and 'name' attributes.\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/required-actions:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get required actions   Returns a stream of required actions.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/required-actions/{alias}:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get required action for alias\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n    put:\n      tags:\n        - Authentication Management\n      summary: Update required action\n      requestBody:\n        description: JSON describing new state of required action\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Authentication Management\n      summary: Delete required action\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/required-actions/{alias}/lower-priority:\n    post:\n      tags:\n        - Authentication Management\n      summary: Lower required actionâ€™s priority\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/required-actions/{alias}/raise-priority:\n    post:\n      tags:\n        - Authentication Management\n      summary: Raise required actionâ€™s priority\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        description: Alias of required action\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/authentication/unregistered-required-actions:\n    get:\n      tags:\n        - Authentication Management\n      summary: Get unregistered required actions   Returns a stream of unregistered\n        required actions.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clear-keys-cache:\n    post:\n      tags:\n        - Realms Admin\n      summary: Clear cache of external public keys (Public keys of clients or Identity\n        providers)\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clear-realm-cache:\n    post:\n      tags:\n        - Realms Admin\n      summary: Clear realm cache\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clear-user-cache:\n    post:\n      tags:\n        - Realms Admin\n      summary: Clear user cache\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-description-converter:\n    post:\n      tags:\n        - Realms Admin\n      summary: Base path for importing clients under this realm.\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-policies/policies:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientPoliciesRepresentation'\n    put:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientPoliciesRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-policies/profiles:\n    get:\n      tags:\n        - Realms Admin\n      parameters:\n        - in: query\n          name: include-global-profiles\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientProfilesRepresentation'\n    put:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientProfilesRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-registration-policy/providers:\n    get:\n      tags:\n        - Client Registration Policy\n      summary: Base path for retrieve providers with the configProperties properly\n        filled\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes:\n    get:\n      tags:\n        - Client Scopes\n      summary: Get client scopes belonging to the realm   Returns a list of client\n        scopes belonging to the realm\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Client Scopes\n      summary: Create a new client scope   Client Scopeâ€™s name must be unique!\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mapper by id\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - Protocol Mappers\n      summary: Update the mapper\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Protocol Mappers\n      summary: Delete the mapper\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id1\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id2\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}:\n    get:\n      tags:\n        - Client Scopes\n      summary: Get representation of the client scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientScopeRepresentation'\n    put:\n      tags:\n        - Client Scopes\n      summary: Update the client scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientScopeRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Client Scopes\n      summary: Delete the client scope\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/protocol-mappers/add-models:\n    post:\n      tags:\n        - Protocol Mappers\n      summary: Create multiple mappers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/protocol-mappers/models:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mappers\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Protocol Mappers\n      summary: Create a mapper\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mappers by name for a specific protocol\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: protocol\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get the roles associated with a clientâ€™s scope   Returns roles for\n        the client.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Scope Mappings\n      summary: Add client-level roles to the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Scope Mappings\n      summary: Remove client-level roles from the clientâ€™s scope.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available:\n    get:\n      tags:\n        - Scope Mappings\n      summary: The available client-level roles   Returns the roles for the client\n        that can be associated with the clientâ€™s scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get effective client roles   Returns the roles for the client that\n        are associated with the clientâ€™s scope.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/realm:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get realm-level roles associated with the clientâ€™s scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Scope Mappings\n      summary: Add a set of realm-level roles to the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Scope Mappings\n      summary: Remove a set of realm-level roles from the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/realm/available:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get realm-level roles that are available to attach to this clientâ€™s\n        scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-scopes/{id}/scope-mappings/realm/composite:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get effective realm-level roles associated with the clientâ€™s scope   What\n        this does is recurse  any composite roles associated with the clientâ€™s scope\n        and adds the roles to this lists.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client scope (not name)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/client-session-stats:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get client session stats   Returns a JSON map.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients:\n    get:\n      tags:\n        - Clients\n      summary: Get clients belonging to the realm   Returns a list of clients belonging\n        to the realm\n      parameters:\n        - in: query\n          name: clientId\n          description: filter by clientId\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: first\n          description: the first result\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: the max results to return\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: q\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: search\n          description: whether this is a search query or a getClientById query\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: viewableOnly\n          description: filter clients that cannot be viewed in full by admin\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Clients\n      summary: Create a new client   Clientâ€™s client_id must be unique!\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients-initial-access:\n    get:\n      tags:\n        - Client Initial Access\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Client Initial Access\n      summary: Create a new initial access token.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientInitialAccessCreatePresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientInitialAccessPresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients-initial-access/{id}:\n    delete:\n      tags:\n        - Client Initial Access\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id1}/protocol-mappers/models/{id2}:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mapper by id\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    put:\n      tags:\n        - Protocol Mappers\n      summary: Update the mapper\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Protocol Mappers\n      summary: Delete the mapper\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id1\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id2\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}:\n    get:\n      tags:\n        - Clients\n      summary: Get representation of the client\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    put:\n      tags:\n        - Clients\n      summary: Update the client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Clients\n      summary: Delete the client\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}:\n    get:\n      tags:\n        - Client Attribute Certificate\n      summary: Get key info\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}/download:\n    post:\n      tags:\n        - Client Attribute Certificate\n      summary: Get a keystore file for the client, containing private key and public\n        certificate\n      requestBody:\n        description: Keystore configuration as JSON\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: byte\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}/generate:\n    post:\n      tags:\n        - Client Attribute Certificate\n      summary: Generate a new certificate with new key pair\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}/generate-and-download:\n    post:\n      tags:\n        - Client Attribute Certificate\n      summary: Generate a new keypair and certificate, and get the private key file   Generates\n        a keypair and certificate and serves the private key in a specified keystore\n        format.\n      requestBody:\n        description: Keystore configuration as JSON\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyStoreConfig'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: byte\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}/upload:\n    post:\n      tags:\n        - Client Attribute Certificate\n      summary: Upload certificate and eventually private key\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/certificates/{attr}/upload-certificate:\n    post:\n      tags:\n        - Client Attribute Certificate\n      summary: Upload only certificate, not private key\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/client-secret:\n    get:\n      tags:\n        - Clients\n      summary: Get the client secret\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    post:\n      tags:\n        - Clients\n      summary: Generate a new secret for the client\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/default-client-scopes:\n    get:\n      tags:\n        - Clients\n      summary: Get default client scopes.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/default-client-scopes/{clientScopeId}:\n    put:\n      tags:\n        - Clients\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Clients\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/generate-example-access-token:\n    get:\n      tags:\n        - Clients\n      summary: Create JSON with payload of example access token\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: userId\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/generate-example-id-token:\n    get:\n      tags:\n        - Clients\n      summary: Create JSON with payload of example id token\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: userId\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IDToken'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo:\n    get:\n      tags:\n        - Clients\n      summary: Create JSON with payload of example user info\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: userId\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/protocol-mappers:\n    get:\n      tags:\n        - Clients\n      summary: Return list of all protocol mappers, which will be used when generating\n        tokens issued for particular client.\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted:\n    get:\n      tags:\n        - Clients\n      summary: Get effective scope mapping of all roles of particular role container,\n        which this client is defacto allowed to have in the accessToken issued for\n        him.\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: roleContainerId\n        description: either realm name OR client UUID\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted:\n    get:\n      tags:\n        - Clients\n      summary: Get roles, which this client doesnâ€™t have scope for and canâ€™t have\n        them in the accessToken issued for him.\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: roleContainerId\n        description: either realm name OR client UUID\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/installation/providers/{providerId}:\n    get:\n      tags:\n        - Clients\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: providerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/management/permissions:\n    get:\n      tags:\n        - Clients\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Clients\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/nodes:\n    post:\n      tags:\n        - Clients\n      summary: Register a cluster node with the client   Manually register cluster\n        node to this client - usually itâ€™s not needed to call this directly as adapter\n        should handle  by sending registration request to Keycloak\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/nodes/{node}:\n    delete:\n      tags:\n        - Clients\n      summary: Unregister a cluster node from the client\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: node\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/offline-session-count:\n    get:\n      tags:\n        - Clients\n      summary: 'Get application offline session count   Returns a number of offline\n        user sessions associated with this client   {      \"count\": number  }'\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/offline-sessions:\n    get:\n      tags:\n        - Clients\n      summary: Get offline sessions for client   Returns a list of offline user sessions\n        associated with this client\n      parameters:\n        - in: query\n          name: first\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/optional-client-scopes:\n    get:\n      tags:\n        - Clients\n      summary: Get optional client scopes.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/optional-client-scopes/{clientScopeId}:\n    put:\n      tags:\n        - Clients\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Clients\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/protocol-mappers/add-models:\n    post:\n      tags:\n        - Protocol Mappers\n      summary: Create multiple mappers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/protocol-mappers/models:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mappers\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Protocol Mappers\n      summary: Create a mapper\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/protocol-mappers/protocol/{protocol}:\n    get:\n      tags:\n        - Protocol Mappers\n      summary: Get mappers by name for a specific protocol\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: protocol\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/push-revocation:\n    post:\n      tags:\n        - Clients\n      summary: Push the clientâ€™s revocation policy to its admin URL   If the client\n        has an admin URL, push revocation policy to it.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GlobalRequestResult'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/registration-access-token:\n    post:\n      tags:\n        - Clients\n      summary: Generate a new registration access token for the client\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles:\n    get:\n      tags:\n        - Roles\n      summary: Get all roles for the realm or client\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Roles\n      summary: Create a new role for the realm or client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}:\n    get:\n      tags:\n        - Roles\n      summary: Get a role by name\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    put:\n      tags:\n        - Roles\n      summary: Update a role by name\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles\n      summary: Delete a role by name\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/composites:\n    get:\n      tags:\n        - Roles\n      summary: Get composites of the role\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Roles\n      summary: Add a composite to the role\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles\n      summary: Remove roles from the roleâ€™s composite\n      requestBody:\n        description: roles to remove\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}:\n    get:\n      tags:\n        - Roles\n      summary: Get client-level roles for the client that are in the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientUuid\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/composites/realm:\n    get:\n      tags:\n        - Roles\n      summary: Get realm-level roles of the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/groups:\n    get:\n      tags:\n        - Roles\n      summary: Returns a stream of groups that have the specified role name\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return a full representation of the {@code GroupRepresentation}\n            objects.\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          description: first result to return. Ignored if negative or {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: maximum number of results to return. Ignored if negative or\n            {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: the role name.\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/management/permissions:\n    get:\n      tags:\n        - Roles\n      summary: Return object stating whether role Authorization permissions have been\n        initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Roles\n      summary: Return object stating whether role Authorization permissions have been\n        initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/roles/{role-name}/users:\n    get:\n      tags:\n        - Roles\n      summary: Returns a stream of users that have the specified role name.\n      parameters:\n        - in: query\n          name: first\n          description: first result to return. Ignored if negative or {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: maximum number of results to return. Ignored if negative or\n            {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: the role name.\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/clients/{client}:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get the roles associated with a clientâ€™s scope   Returns roles for\n        the client.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Scope Mappings\n      summary: Add client-level roles to the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Scope Mappings\n      summary: Remove client-level roles from the clientâ€™s scope.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/clients/{client}/available:\n    get:\n      tags:\n        - Scope Mappings\n      summary: The available client-level roles   Returns the roles for the client\n        that can be associated with the clientâ€™s scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/clients/{client}/composite:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get effective client roles   Returns the roles for the client that\n        are associated with the clientâ€™s scope.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/realm:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get realm-level roles associated with the clientâ€™s scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Scope Mappings\n      summary: Add a set of realm-level roles to the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Scope Mappings\n      summary: Remove a set of realm-level roles from the clientâ€™s scope\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/realm/available:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get realm-level roles that are available to attach to this clientâ€™s\n        scope\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/scope-mappings/realm/composite:\n    get:\n      tags:\n        - Scope Mappings\n      summary: Get effective realm-level roles associated with the clientâ€™s scope   What\n        this does is recurse  any composite roles associated with the clientâ€™s scope\n        and adds the roles to this lists.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/service-account-user:\n    get:\n      tags:\n        - Clients\n      summary: Get a user dedicated to the service account\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/session-count:\n    get:\n      tags:\n        - Clients\n      summary: 'Get application session count   Returns a number of user sessions\n        associated with this client   {      \"count\": number  }'\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/test-nodes-available:\n    get:\n      tags:\n        - Clients\n      summary: Test if registered cluster nodes are available   Tests availability\n        by sending 'ping' request to all cluster nodes.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GlobalRequestResult'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/clients/{id}/user-sessions:\n    get:\n      tags:\n        - Clients\n      summary: Get user sessions for client   Returns a list of user sessions associated\n        with this client\n      parameters:\n        - in: query\n          name: first\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: id of client (not client-id)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/components:\n    get:\n      tags:\n        - Component\n      parameters:\n        - in: query\n          name: name\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: parent\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: type\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Component\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/components/{id}:\n    get:\n      tags:\n        - Component\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComponentRepresentation'\n    put:\n      tags:\n        - Component\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Component\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/components/{id}/sub-component-types:\n    get:\n      tags:\n        - Component\n      summary: List of subcomponent types that are available to configure for a particular\n        parent component.\n      parameters:\n        - in: query\n          name: type\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/credential-registrators:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-default-client-scopes:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get realm default client scopes.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-default-client-scopes/{clientScopeId}:\n    put:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-groups:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get group hierarchy.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-groups/{groupId}:\n    put:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-optional-client-scopes:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get realm optional client scopes.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/default-optional-client-scopes/{clientScopeId}:\n    put:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/events:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get events   Returns all events, or filters them based on URL query\n        parameters listed here\n      parameters:\n        - in: query\n          name: client\n          description: App or oauth client name\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateFrom\n          description: From date\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateTo\n          description: To date\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: first\n          description: Paging offset\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: ipAddress\n          description: IP address\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: type\n          description: The types of events to return\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n        - in: query\n          name: user\n          description: User id\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    delete:\n      tags:\n        - Realms Admin\n      summary: Delete all events\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/events/config:\n    get:\n      tags:\n        - Realms Admin\n      summary: Get the events provider configuration   Returns JSON object with events\n        provider configuration\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n    put:\n      tags:\n        - Realms Admin\n      summary: Update the events provider   Change the events provider and/or its\n        configuration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RealmEventsConfigRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/group-by-path/{path}:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: path\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups:\n    get:\n      tags:\n        - Groups\n      summary: Get group hierarchy.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Groups\n      summary: create or add a top level realm groupSet or create child.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/count:\n    get:\n      tags:\n        - Groups\n      summary: Returns the groups counts.\n      parameters:\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: top\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}:\n    get:\n      tags:\n        - Groups\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupRepresentation'\n    put:\n      tags:\n        - Groups\n      summary: Update group, ignores subgroups.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Groups\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/children:\n    post:\n      tags:\n        - Groups\n      summary: Set or create child.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/management/permissions:\n    get:\n      tags:\n        - Groups\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Groups\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/members:\n    get:\n      tags:\n        - Groups\n      summary: Get users   Returns a stream of users, filtered according to query\n        parameters\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: \"Only return basic information (only guaranteed to return id,\\\n            \\ username, created, first and last name,\\n email, enabled state, email\\\n            \\ verification state, federation link, and access.\\n Note that it means\\\n            \\ that namely user attributes, required actions, and not before are not\\\n            \\ returned.)\"\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          description: Pagination offset\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get role mappings\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/clients/{client}:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get client-level role mappings for the user, and the app\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Client Role Mappings\n      summary: Add client-level roles to the user role mapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Client Role Mappings\n      summary: Delete client-level roles from user role mapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/clients/{client}/available:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get available client-level roles that can be mapped to the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/clients/{client}/composite:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get effective client-level role mappings   This recurses any composite\n        roles\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/realm:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get realm-level role mappings\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Role Mapper\n      summary: Add realm-level role mappings to the user\n      requestBody:\n        description: Roles to add\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Role Mapper\n      summary: Delete realm-level role mappings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/realm/available:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get realm-level roles that can be mapped\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/groups/{id}/role-mappings/realm/composite:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get effective realm-level role mappings   This will recurse all composite\n        roles to get the result.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/import-config:\n    post:\n      tags:\n        - Identity Providers\n      summary: Import identity provider from uploaded JSON file\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get identity providers\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Identity Providers\n      summary: Create a new identity provider\n      requestBody:\n        description: JSON body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get the identity provider\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderRepresentation'\n    put:\n      tags:\n        - Identity Providers\n      summary: Update the identity provider\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Identity Providers\n      summary: Delete the identity provider\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}/export:\n    get:\n      tags:\n        - Identity Providers\n      summary: Export public broker configuration for identity provider\n      parameters:\n        - in: query\n          name: format\n          description: Format to use\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}/management/permissions:\n    get:\n      tags:\n        - Identity Providers\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Identity Providers\n      summary: Return object stating whether client Authorization permissions have\n        been initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}/mapper-types:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get mapper types for identity provider\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}/mappers:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get mappers for identity provider\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Identity Providers\n      summary: Add a mapper to identity provider\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/instances/{alias}/mappers/{id}:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get mapper by id for the identity provider\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n    put:\n      tags:\n        - Identity Providers\n      summary: Update a mapper for the identity provider\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Identity Providers\n      summary: Delete a mapper for the identity provider\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: Mapper id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/identity-provider/providers/{provider_id}:\n    get:\n      tags:\n        - Identity Providers\n      summary: Get identity providers\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: provider_id\n        description: Provider id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/keys:\n    get:\n      tags:\n        - Key\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeysMetadataRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/ldap-server-capabilities:\n    post:\n      tags:\n        - Realms Admin\n      summary: Get LDAP supported extensions.\n      requestBody:\n        description: LDAP configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestLdapConnectionRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/localization:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/localization/{locale}:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    post:\n      tags:\n        - Realms Admin\n      summary: Import localization from uploaded JSON file\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    patch:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: locale\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/localization/{locale}/{key}:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            text/plain:\n              schema:\n                type: string\n    put:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: locale\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: key\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/logout-all:\n    post:\n      tags:\n        - Realms Admin\n      summary: Removes all user sessions.\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/partial-export:\n    post:\n      tags:\n        - Realms Admin\n      summary: Partial export of existing realm into a JSON file.\n      parameters:\n        - in: query\n          name: exportClients\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: exportGroupsAndRoles\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RealmRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/partialImport:\n    post:\n      tags:\n        - Realms Admin\n      summary: Partial import from a JSON file to an existing realm.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartialImportRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/push-revocation:\n    post:\n      tags:\n        - Realms Admin\n      summary: Push the realmâ€™s revocation policy to any client that has an admin\n        url associated with it.\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles:\n    get:\n      tags:\n        - Roles\n      summary: Get all roles for the realm or client\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Roles\n      summary: Create a new role for the realm or client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles-by-id/{role-id}:\n    get:\n      tags:\n        - Roles (by ID)\n      summary: Get a specific roleâ€™s representation\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    put:\n      tags:\n        - Roles (by ID)\n      summary: Update the role\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles (by ID)\n      summary: Delete the role\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        description: id of role\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles-by-id/{role-id}/composites:\n    get:\n      tags:\n        - Roles (by ID)\n      summary: Get roleâ€™s children   Returns a set of roleâ€™s children provided the\n        role is a composite.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Roles (by ID)\n      summary: Make the role a composite role by associating some child roles\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles (by ID)\n      summary: Remove a set of roles from the roleâ€™s composite\n      requestBody:\n        description: A set of roles to be removed\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        description: Role id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}:\n    get:\n      tags:\n        - Roles (by ID)\n      summary: Get client-level roles for the client that are in the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientUuid\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles-by-id/{role-id}/composites/realm:\n    get:\n      tags:\n        - Roles (by ID)\n      summary: Get realm-level roles that are in the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles-by-id/{role-id}/management/permissions:\n    get:\n      tags:\n        - Roles (by ID)\n      summary: Return object stating whether role Authoirzation permissions have been\n        initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Roles (by ID)\n      summary: Return object stating whether role Authoirzation permissions have been\n        initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}:\n    get:\n      tags:\n        - Roles\n      summary: Get a role by name\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleRepresentation'\n    put:\n      tags:\n        - Roles\n      summary: Update a role by name\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles\n      summary: Delete a role by name\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/composites:\n    get:\n      tags:\n        - Roles\n      summary: Get composites of the role\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Roles\n      summary: Add a composite to the role\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Roles\n      summary: Remove roles from the roleâ€™s composite\n      requestBody:\n        description: roles to remove\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/composites/clients/{clientUuid}:\n    get:\n      tags:\n        - Roles\n      summary: Get client-level roles for the client that are in the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientUuid\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/composites/realm:\n    get:\n      tags:\n        - Roles\n      summary: Get realm-level roles of the roleâ€™s composite\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: roleâ€™s name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/groups:\n    get:\n      tags:\n        - Roles\n      summary: Returns a stream of groups that have the specified role name\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return a full representation of the {@code GroupRepresentation}\n            objects.\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          description: first result to return. Ignored if negative or {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: maximum number of results to return. Ignored if negative or\n            {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: the role name.\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/management/permissions:\n    get:\n      tags:\n        - Roles\n      summary: Return object stating whether role Authorization permissions have been\n        initialized or not and a reference\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Roles\n      summary: Return object stating whether role Authorization permissions have been\n        initialized or not and a reference\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/roles/{role-name}/users:\n    get:\n      tags:\n        - Roles\n      summary: Returns a stream of users that have the specified role name.\n      parameters:\n        - in: query\n          name: first\n          description: first result to return. Ignored if negative or {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          description: maximum number of results to return. Ignored if negative or\n            {@code null}.\n          schema:\n            type: integer\n            format: int32\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        description: the role name.\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/sessions/{session}:\n    delete:\n      tags:\n        - Realms Admin\n      summary: Remove a specific user session.\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: session\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/testLDAPConnection:\n    post:\n      tags:\n        - Realms Admin\n      summary: Test LDAP connection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestLdapConnectionRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/testSMTPConnection:\n    post:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/user-storage/{id}/name:\n    get:\n      tags:\n        - User Storage Provider\n      summary: Need this for admin console to display simple name of provider when\n        displaying user detail   KEYCLOAK-4328\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/user-storage/{id}/remove-imported-users:\n    post:\n      tags:\n        - User Storage Provider\n      summary: Remove imported users\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/user-storage/{id}/sync:\n    post:\n      tags:\n        - User Storage Provider\n      summary: Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"\n      parameters:\n        - in: query\n          name: action\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SynchronizationResult'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/user-storage/{id}/unlink-users:\n    post:\n      tags:\n        - User Storage Provider\n      summary: Unlink imported users from a storage provider\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/user-storage/{parentId}/mappers/{id}/sync:\n    post:\n      tags:\n        - User Storage Provider\n      summary: Trigger sync of mapper data related to ldap mapper (roles, groups,\n        â€¦â€‹)   direction is \"fedToKeycloak\" or \"keycloakToFed\"\n      parameters:\n        - in: query\n          name: direction\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SynchronizationResult'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: parentId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users:\n    get:\n      tags:\n        - Users\n      summary: Get users   Returns a stream of users, filtered according to query\n        parameters\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: 'Boolean which defines whether brief representations are returned\n            (default: false)'\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: email\n          description: A String contained in email, or the complete email, if param\n            \"exact\" is true\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: emailVerified\n          description: whether the email has been verified\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: enabled\n          description: Boolean representing if user is enabled or not\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: exact\n          description: Boolean which defines whether the params \"last\", \"first\", \"email\"\n            and \"username\" must match exactly\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          description: Pagination offset\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: firstName\n          description: A String contained in firstName, or the complete firstName,\n            if param \"exact\" is true\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: idpAlias\n          description: The alias of an Identity Provider linked to the user\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: idpUserId\n          description: The userId at an Identity Provider linked to the user\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: lastName\n          description: A String contained in lastName, or the complete lastName, if\n            param \"exact\" is true\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: max\n          description: Maximum results size (defaults to 100)\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: search\n          description: A String contained in username, first or last name, or email\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: username\n          description: A String contained in username, or the complete username, if\n            param \"exact\" is true\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Users\n      summary: Create a new user   Username must be unique.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users-management-permissions:\n    get:\n      tags:\n        - Realms Admin\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    put:\n      tags:\n        - Realms Admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ManagementPermissionReference'\n        required: true\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ManagementPermissionReference'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/count:\n    get:\n      tags:\n        - Users\n      summary: Returns the number of users that match the given criteria.\n      parameters:\n        - in: query\n          name: email\n          description: email filter\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: emailVerified\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: firstName\n          description: first name filter\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: lastName\n          description: last name filter\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: search\n          description: arbitrary search string for all the fields below\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: username\n          description: username filter\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/profile:\n    get:\n      tags:\n        - Users\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      tags:\n        - Users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}:\n    get:\n      tags:\n        - Users\n      summary: Get representation of the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserRepresentation'\n    put:\n      tags:\n        - Users\n      summary: Update the user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Users\n      summary: Delete the user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/configured-user-storage-credential-types:\n    get:\n      tags:\n        - Users\n      summary: Return credential types, which are provided by the user storage where\n        user is stored.\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/consents:\n    get:\n      tags:\n        - Users\n      summary: Get consents granted by the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/consents/{client}:\n    delete:\n      tags:\n        - Users\n      summary: Revoke consent and offline tokens for particular client from user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        description: Client id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/credentials:\n    get:\n      tags:\n        - Users\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/credentials/{credentialId}:\n    delete:\n      tags:\n        - Users\n      summary: Remove a credential for a user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}:\n    post:\n      tags:\n        - Users\n      summary: Move a credential to a position behind another credential\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: newPreviousCredentialId\n        description: The credential that will be the previous element in the list.\n          If set to null, the moved credential will be the first element in the list.\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/credentials/{credentialId}/moveToFirst:\n    post:\n      tags:\n        - Users\n      summary: Move a credential to a first position in the credentials list of the\n        user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        description: The credential to move\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/credentials/{credentialId}/userLabel:\n    put:\n      tags:\n        - Users\n      summary: Update a credential label for a user\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/disable-credential-types:\n    put:\n      tags:\n        - Users\n      summary: Disable all credentials for a user of a specific type\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/execute-actions-email:\n    put:\n      tags:\n        - Users\n      summary: Send a update account email to the user   An email contains a link\n        the user can click to perform a set of required actions.\n      parameters:\n        - in: query\n          name: client_id\n          description: Client id\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: lifespan\n          description: Number of seconds after which the generated token expires\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: redirect_uri\n          description: Redirect uri\n          schema:\n            type: string\n          style: form\n      requestBody:\n        description: required actions the user needs to complete\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/federated-identity:\n    get:\n      tags:\n        - Users\n      summary: Get social logins associated with the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/federated-identity/{provider}:\n    post:\n      tags:\n        - Users\n      summary: Add a social login provider to the user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FederatedIdentityRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Users\n      summary: Remove a social login provider from user\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: provider\n        description: Social login provider id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/groups:\n    get:\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: max\n          schema:\n            type: integer\n            format: int32\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/groups/count:\n    get:\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/groups/{groupId}:\n    put:\n      tags:\n        - Users\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Users\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/impersonation:\n    post:\n      tags:\n        - Users\n      summary: Impersonate the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/logout:\n    post:\n      tags:\n        - Users\n      summary: Remove all user sessions associated with the user   Also send notification\n        to all clients that have an admin URL to invalidate the sessions for the particular\n        user.\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/offline-sessions/{clientUuid}:\n    get:\n      tags:\n        - Users\n      summary: Get offline sessions associated with the user and client\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientUuid\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/reset-password:\n    put:\n      tags:\n        - Users\n      summary: Set up a new password for the user.\n      requestBody:\n        description: The representation must contain a rawPassword with the plain-text\n          password\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CredentialRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get role mappings\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MappingsRepresentation'\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/clients/{client}:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get client-level role mappings for the user, and the app\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Client Role Mappings\n      summary: Add client-level roles to the user role mapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Client Role Mappings\n      summary: Delete client-level roles from user role mapping\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/clients/{client}/available:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get available client-level roles that can be mapped to the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/clients/{client}/composite:\n    get:\n      tags:\n        - Client Role Mappings\n      summary: Get effective client-level role mappings   This recurses any composite\n        roles\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/realm:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get realm-level role mappings\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    post:\n      tags:\n        - Role Mapper\n      summary: Add realm-level role mappings to the user\n      requestBody:\n        description: Roles to add\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    delete:\n      tags:\n        - Role Mapper\n      summary: Delete realm-level role mappings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RoleRepresentation'\n        required: true\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/realm/available:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get realm-level roles that can be mapped\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/role-mappings/realm/composite:\n    get:\n      tags:\n        - Role Mapper\n      summary: Get effective realm-level role mappings   This will recurse all composite\n        roles to get the result.\n      parameters:\n        - in: query\n          name: briefRepresentation\n          description: if false, return roles with their attributes\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/send-verify-email:\n    put:\n      tags:\n        - Users\n      summary: Send an email-verification email to the user   An email contains a\n        link the user can click to verify their email address.\n      parameters:\n        - in: query\n          name: client_id\n          description: Client id\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: redirect_uri\n          description: Redirect uri\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\n  /{realm}/users/{id}/sessions:\n    get:\n      tags:\n        - Users\n      summary: Get sessions associated with the user\n      responses:\n        2XX:\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: true\n    parameters:\n      - in: path\n        name: realm\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        description: User id\n        required: true\n        schema:\n          type: string\n        style: simple\ncomponents:\n  securitySchemes:\n    access_token:\n      type: http\n      scheme: bearer\n      bearerFormat: null\n  schemas:\n    AccessToken:\n      type: object\n      properties:\n        acr:\n          type: string\n        address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        allowed-origins:\n          type: array\n          items:\n            type: string\n        at_hash:\n          type: string\n        auth_time:\n          type: integer\n          format: int64\n        authorization:\n          $ref: '#/components/schemas/AccessToken-Authorization'\n        azp:\n          type: string\n        birthdate:\n          type: string\n        c_hash:\n          type: string\n        category:\n          type: string\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n        claims_locales:\n          type: string\n        cnf:\n          $ref: '#/components/schemas/AccessToken-CertConf'\n        email:\n          type: string\n        email_verified:\n          type: boolean\n        exp:\n          type: integer\n          format: int64\n        family_name:\n          type: string\n        gender:\n          type: string\n        given_name:\n          type: string\n        iat:\n          type: integer\n          format: int64\n        iss:\n          type: string\n        jti:\n          type: string\n        locale:\n          type: string\n        middle_name:\n          type: string\n        name:\n          type: string\n        nbf:\n          type: integer\n          format: int64\n        nickname:\n          type: string\n        nonce:\n          type: string\n        otherClaims:\n          type: object\n          additionalProperties: true\n        phone_number:\n          type: string\n        phone_number_verified:\n          type: boolean\n        picture:\n          type: string\n        preferred_username:\n          type: string\n        profile:\n          type: string\n        realm_access:\n          $ref: '#/components/schemas/AccessToken-Access'\n        s_hash:\n          type: string\n        scope:\n          type: string\n        session_state:\n          type: string\n        sid:\n          type: string\n        sub:\n          type: string\n        trusted-certs:\n          type: array\n          items:\n            type: string\n        typ:\n          type: string\n        updated_at:\n          type: integer\n          format: int64\n        website:\n          type: string\n        zoneinfo:\n          type: string\n    AccessToken-Access:\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: string\n        verify_caller:\n          type: boolean\n    AccessToken-Authorization:\n      type: object\n      properties:\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Permission'\n    AccessToken-CertConf:\n      type: object\n      properties:\n        x5t#S256:\n          type: string\n    AddressClaimSet:\n      type: object\n      properties:\n        country:\n          type: string\n        formatted:\n          type: string\n        locality:\n          type: string\n        postal_code:\n          type: string\n        region:\n          type: string\n        street_address:\n          type: string\n    AuthenticationExecutionExportRepresentation:\n      type: object\n      properties:\n        authenticator:\n          type: string\n        authenticatorConfig:\n          type: string\n        authenticatorFlow:\n          type: boolean\n        flowAlias:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        requirement:\n          type: string\n        userSetupAllowed:\n          type: boolean\n    AuthenticationExecutionInfoRepresentation:\n      type: object\n      properties:\n        alias:\n          type: string\n        authenticationConfig:\n          type: string\n        authenticationFlow:\n          type: boolean\n        configurable:\n          type: boolean\n        description:\n          type: string\n        displayName:\n          type: string\n        flowId:\n          type: string\n        id:\n          type: string\n        index:\n          type: integer\n          format: int32\n        level:\n          type: integer\n          format: int32\n        providerId:\n          type: string\n        requirement:\n          type: string\n        requirementChoices:\n          type: array\n          items:\n            type: string\n    AuthenticationExecutionRepresentation:\n      type: object\n      properties:\n        authenticator:\n          type: string\n        authenticatorConfig:\n          type: string\n        authenticatorFlow:\n          type: boolean\n        flowId:\n          type: string\n        id:\n          type: string\n        parentFlow:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        requirement:\n          type: string\n    AuthenticationFlowRepresentation:\n      type: object\n      properties:\n        alias:\n          type: string\n        authenticationExecutions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationExecutionExportRepresentation'\n        builtIn:\n          type: boolean\n        description:\n          type: string\n        id:\n          type: string\n        providerId:\n          type: string\n        topLevel:\n          type: boolean\n    AuthenticatorConfigInfoRepresentation:\n      type: object\n      properties:\n        helpText:\n          type: string\n        name:\n          type: string\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigPropertyRepresentation'\n        providerId:\n          type: string\n    AuthenticatorConfigRepresentation:\n      type: object\n      properties:\n        alias:\n          type: string\n        config:\n          type: object\n          additionalProperties: true\n        id:\n          type: string\n    CertificateRepresentation:\n      type: object\n      properties:\n        certificate:\n          type: string\n        kid:\n          type: string\n        privateKey:\n          type: string\n        publicKey:\n          type: string\n    ClientInitialAccessCreatePresentation:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int32\n        expiration:\n          type: integer\n          format: int32\n    ClientInitialAccessPresentation:\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int32\n        expiration:\n          type: integer\n          format: int32\n        id:\n          type: string\n        remainingCount:\n          type: integer\n          format: int32\n        timestamp:\n          type: integer\n          format: int32\n        token:\n          type: string\n    ClientMappingsRepresentation:\n      type: object\n      properties:\n        client:\n          type: string\n        id:\n          type: string\n        mappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n    ClientPoliciesRepresentation:\n      type: object\n      properties:\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientPolicyRepresentation'\n    ClientPolicyConditionRepresentation:\n      type: object\n      properties:\n        condition:\n          type: string\n        configuration:\n          $ref: '#/components/schemas/JsonNode'\n    ClientPolicyExecutorRepresentation:\n      type: object\n      properties:\n        configuration:\n          $ref: '#/components/schemas/JsonNode'\n        executor:\n          type: string\n    ClientPolicyRepresentation:\n      type: object\n      properties:\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientPolicyConditionRepresentation'\n        description:\n          type: string\n        enabled:\n          type: boolean\n        name:\n          type: string\n        profiles:\n          type: array\n          items:\n            type: string\n    ClientProfileRepresentation:\n      type: object\n      properties:\n        description:\n          type: string\n        executors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientPolicyExecutorRepresentation'\n        name:\n          type: string\n    ClientProfilesRepresentation:\n      type: object\n      properties:\n        globalProfiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n        profiles:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientProfileRepresentation'\n    ClientRepresentation:\n      type: object\n      properties:\n        access:\n          type: object\n          additionalProperties: true\n        adminUrl:\n          type: string\n        alwaysDisplayInConsole:\n          type: boolean\n        attributes:\n          type: object\n          additionalProperties: true\n        authenticationFlowBindingOverrides:\n          type: object\n          additionalProperties: true\n        authorizationServicesEnabled:\n          type: boolean\n        authorizationSettings:\n          $ref: '#/components/schemas/ResourceServerRepresentation'\n        baseUrl:\n          type: string\n        bearerOnly:\n          type: boolean\n        clientAuthenticatorType:\n          type: string\n        clientId:\n          type: string\n        consentRequired:\n          type: boolean\n        defaultClientScopes:\n          type: array\n          items:\n            type: string\n        description:\n          type: string\n        directAccessGrantsEnabled:\n          type: boolean\n        enabled:\n          type: boolean\n        frontchannelLogout:\n          type: boolean\n        fullScopeAllowed:\n          type: boolean\n        id:\n          type: string\n        implicitFlowEnabled:\n          type: boolean\n        name:\n          type: string\n        nodeReRegistrationTimeout:\n          type: integer\n          format: int32\n        notBefore:\n          type: integer\n          format: int32\n        oauth2DeviceAuthorizationGrantEnabled:\n          type: boolean\n        optionalClientScopes:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n        protocol:\n          type: string\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        publicClient:\n          type: boolean\n        redirectUris:\n          type: array\n          items:\n            type: string\n        registeredNodes:\n          type: object\n          additionalProperties: true\n        registrationAccessToken:\n          type: string\n        rootUrl:\n          type: string\n        secret:\n          type: string\n        serviceAccountsEnabled:\n          type: boolean\n        standardFlowEnabled:\n          type: boolean\n        surrogateAuthRequired:\n          type: boolean\n        webOrigins:\n          type: array\n          items:\n            type: string\n    ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation:\n      type: object\n      properties:\n        containerId:\n          type: string\n        containerName:\n          type: string\n        containerType:\n          type: string\n        mapperId:\n          type: string\n        mapperName:\n          type: string\n        protocolMapper:\n          type: string\n    ClientScopeRepresentation:\n      type: object\n      properties:\n        attributes:\n          type: object\n          additionalProperties: true\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        protocol:\n          type: string\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n    ComponentExportRepresentation:\n      type: object\n      properties:\n        config:\n          $ref: '#/components/schemas/MultivaluedHashMap'\n        id:\n          type: string\n        name:\n          type: string\n        providerId:\n          type: string\n        subComponents:\n          $ref: '#/components/schemas/MultivaluedHashMap'\n        subType:\n          type: string\n    ComponentRepresentation:\n      type: object\n      properties:\n        config:\n          $ref: '#/components/schemas/MultivaluedHashMap'\n        id:\n          type: string\n        name:\n          type: string\n        parentId:\n          type: string\n        providerId:\n          type: string\n        providerType:\n          type: string\n        subType:\n          type: string\n    ConfigPropertyRepresentation:\n      type: object\n      properties:\n        defaultValue:\n          type: object\n        helpText:\n          type: string\n        label:\n          type: string\n        name:\n          type: string\n        options:\n          type: array\n          items:\n            type: string\n        secret:\n          type: boolean\n        type:\n          type: string\n    CredentialRepresentation:\n      type: object\n      properties:\n        createdDate:\n          type: integer\n          format: int64\n        credentialData:\n          type: string\n        id:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        secretData:\n          type: string\n        temporary:\n          type: boolean\n        type:\n          type: string\n        userLabel:\n          type: string\n        value:\n          type: string\n    FederatedIdentityRepresentation:\n      type: object\n      properties:\n        identityProvider:\n          type: string\n        userId:\n          type: string\n        userName:\n          type: string\n    GlobalRequestResult:\n      type: object\n      properties:\n        failedRequests:\n          type: array\n          items:\n            type: string\n        successRequests:\n          type: array\n          items:\n            type: string\n    GroupRepresentation:\n      type: object\n      properties:\n        access:\n          type: object\n          additionalProperties: true\n        attributes:\n          type: object\n          additionalProperties: true\n        clientRoles:\n          type: object\n          additionalProperties: true\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n        realmRoles:\n          type: array\n          items:\n            type: string\n        subGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n    IDToken:\n      type: object\n      properties:\n        acr:\n          type: string\n        address:\n          $ref: '#/components/schemas/AddressClaimSet'\n        at_hash:\n          type: string\n        auth_time:\n          type: integer\n          format: int64\n        azp:\n          type: string\n        birthdate:\n          type: string\n        c_hash:\n          type: string\n        category:\n          type: string\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n            - LOGOUT\n            - AUTHORIZATION_RESPONSE\n        claims_locales:\n          type: string\n        email:\n          type: string\n        email_verified:\n          type: boolean\n        exp:\n          type: integer\n          format: int64\n        family_name:\n          type: string\n        gender:\n          type: string\n        given_name:\n          type: string\n        iat:\n          type: integer\n          format: int64\n        iss:\n          type: string\n        jti:\n          type: string\n        locale:\n          type: string\n        middle_name:\n          type: string\n        name:\n          type: string\n        nbf:\n          type: integer\n          format: int64\n        nickname:\n          type: string\n        nonce:\n          type: string\n        otherClaims:\n          type: object\n          additionalProperties: true\n        phone_number:\n          type: string\n        phone_number_verified:\n          type: boolean\n        picture:\n          type: string\n        preferred_username:\n          type: string\n        profile:\n          type: string\n        s_hash:\n          type: string\n        session_state:\n          type: string\n        sid:\n          type: string\n        sub:\n          type: string\n        typ:\n          type: string\n        updated_at:\n          type: integer\n          format: int64\n        website:\n          type: string\n        zoneinfo:\n          type: string\n    IdentityProviderMapperRepresentation:\n      type: object\n      properties:\n        config:\n          type: object\n          additionalProperties: true\n        id:\n          type: string\n        identityProviderAlias:\n          type: string\n        identityProviderMapper:\n          type: string\n        name:\n          type: string\n    IdentityProviderRepresentation:\n      type: object\n      properties:\n        addReadTokenRoleOnCreate:\n          type: boolean\n        alias:\n          type: string\n        config:\n          type: object\n          additionalProperties: true\n        displayName:\n          type: string\n        enabled:\n          type: boolean\n        firstBrokerLoginFlowAlias:\n          type: string\n        internalId:\n          type: string\n        linkOnly:\n          type: boolean\n        postBrokerLoginFlowAlias:\n          type: string\n        providerId:\n          type: string\n        storeToken:\n          type: boolean\n        trustEmail:\n          type: boolean\n    JsonNode:\n      type: object\n      properties:\n        array:\n          type: boolean\n        bigDecimal:\n          type: boolean\n        bigInteger:\n          type: boolean\n        binary:\n          type: boolean\n        boolean:\n          type: boolean\n        containerNode:\n          type: boolean\n        double:\n          type: boolean\n        empty:\n          type: boolean\n        float:\n          type: boolean\n        floatingPointNumber:\n          type: boolean\n        int:\n          type: boolean\n        integralNumber:\n          type: boolean\n        long:\n          type: boolean\n        missingNode:\n          type: boolean\n        nodeType:\n          type: string\n          enum:\n            - ARRAY\n            - BINARY\n            - BOOLEAN\n            - MISSING\n            - 'NULL'\n            - NUMBER\n            - OBJECT\n            - POJO\n            - STRING\n        'null':\n          type: boolean\n        number:\n          type: boolean\n        object:\n          type: boolean\n        pojo:\n          type: boolean\n        short:\n          type: boolean\n        textual:\n          type: boolean\n        valueNode:\n          type: boolean\n    KeyStoreConfig:\n      type: object\n      properties:\n        format:\n          type: string\n        keyAlias:\n          type: string\n        keyPassword:\n          type: string\n        realmAlias:\n          type: string\n        realmCertificate:\n          type: boolean\n        storePassword:\n          type: string\n    KeysMetadataRepresentation:\n      type: object\n      properties:\n        active:\n          type: object\n          additionalProperties: true\n        keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/KeysMetadataRepresentation-KeyMetadataRepresentation'\n    KeysMetadataRepresentation-KeyMetadataRepresentation:\n      type: object\n      properties:\n        algorithm:\n          type: string\n        certificate:\n          type: string\n        kid:\n          type: string\n        providerId:\n          type: string\n        providerPriority:\n          type: integer\n          format: int64\n        publicKey:\n          type: string\n        status:\n          type: string\n        type:\n          type: string\n        use:\n          type: string\n          enum:\n            - SIG\n            - ENC\n    ManagementPermissionReference:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n        resource:\n          type: string\n        scopePermissions:\n          type: object\n          additionalProperties: true\n    MappingsRepresentation:\n      type: object\n      properties:\n        clientMappings:\n          type: object\n          additionalProperties: true\n        realmMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n    MemoryInfoRepresentation:\n      type: object\n      properties:\n        free:\n          type: integer\n          format: int64\n        freeFormated:\n          type: string\n        freePercentage:\n          type: integer\n          format: int64\n        total:\n          type: integer\n          format: int64\n        totalFormated:\n          type: string\n        used:\n          type: integer\n          format: int64\n        usedFormated:\n          type: string\n    MultivaluedHashMap:\n      type: object\n      properties:\n        empty:\n          type: boolean\n        loadFactor:\n          type: number\n          format: float\n        threshold:\n          type: integer\n          format: int32\n    PartialImportRepresentation:\n      type: object\n      properties:\n        clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        identityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        ifResourceExists:\n          type: string\n        policy:\n          type: string\n          enum:\n            - SKIP\n            - OVERWRITE\n            - FAIL\n        roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n    PasswordPolicyTypeRepresentation:\n      type: object\n      properties:\n        configType:\n          type: string\n        defaultValue:\n          type: string\n        displayName:\n          type: string\n        id:\n          type: string\n        multipleSupported:\n          type: boolean\n    Permission:\n      type: object\n      properties:\n        claims:\n          type: object\n          additionalProperties: true\n        rsid:\n          type: string\n        rsname:\n          type: string\n        scopes:\n          type: array\n          items:\n            type: string\n    PolicyRepresentation:\n      type: object\n      properties:\n        config:\n          type: object\n          additionalProperties: true\n        decisionStrategy:\n          type: string\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n        description:\n          type: string\n        id:\n          type: string\n        logic:\n          type: string\n          enum:\n            - POSITIVE\n            - NEGATIVE\n        name:\n          type: string\n        owner:\n          type: string\n        policies:\n          type: array\n          items:\n            type: string\n        resources:\n          type: array\n          items:\n            type: string\n        resourcesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        scopes:\n          type: array\n          items:\n            type: string\n        scopesData:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        type:\n          type: string\n    ProfileInfoRepresentation:\n      type: object\n      properties:\n        disabledFeatures:\n          type: array\n          items:\n            type: string\n        experimentalFeatures:\n          type: array\n          items:\n            type: string\n        name:\n          type: string\n        previewFeatures:\n          type: array\n          items:\n            type: string\n    ProtocolMapperRepresentation:\n      type: object\n      properties:\n        config:\n          type: object\n          additionalProperties: true\n        id:\n          type: string\n        name:\n          type: string\n        protocol:\n          type: string\n        protocolMapper:\n          type: string\n    ProviderRepresentation:\n      type: object\n      properties:\n        operationalInfo:\n          type: object\n          additionalProperties: true\n        order:\n          type: integer\n          format: int32\n    RealmEventsConfigRepresentation:\n      type: object\n      properties:\n        adminEventsDetailsEnabled:\n          type: boolean\n        adminEventsEnabled:\n          type: boolean\n        enabledEventTypes:\n          type: array\n          items:\n            type: string\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          type: integer\n          format: int64\n        eventsListeners:\n          type: array\n          items:\n            type: string\n    RealmRepresentation:\n      type: object\n      properties:\n        accessCodeLifespan:\n          type: integer\n          format: int32\n        accessCodeLifespanLogin:\n          type: integer\n          format: int32\n        accessCodeLifespanUserAction:\n          type: integer\n          format: int32\n        accessTokenLifespan:\n          type: integer\n          format: int32\n        accessTokenLifespanForImplicitFlow:\n          type: integer\n          format: int32\n        accountTheme:\n          type: string\n        actionTokenGeneratedByAdminLifespan:\n          type: integer\n          format: int32\n        actionTokenGeneratedByUserLifespan:\n          type: integer\n          format: int32\n        adminEventsDetailsEnabled:\n          type: boolean\n        adminEventsEnabled:\n          type: boolean\n        adminTheme:\n          type: string\n        attributes:\n          type: object\n          additionalProperties: true\n        authenticationFlows:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticationFlowRepresentation'\n        authenticatorConfig:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticatorConfigRepresentation'\n        browserFlow:\n          type: string\n        browserSecurityHeaders:\n          type: object\n          additionalProperties: true\n        bruteForceProtected:\n          type: boolean\n        clientAuthenticationFlow:\n          type: string\n        clientOfflineSessionIdleTimeout:\n          type: integer\n          format: int32\n        clientOfflineSessionMaxLifespan:\n          type: integer\n          format: int32\n        clientPolicies:\n          $ref: '#/components/schemas/JsonNode'\n        clientProfiles:\n          $ref: '#/components/schemas/JsonNode'\n        clientScopeMappings:\n          type: object\n          additionalProperties: true\n        clientScopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientScopeRepresentation'\n        clientSessionIdleTimeout:\n          type: integer\n          format: int32\n        clientSessionMaxLifespan:\n          type: integer\n          format: int32\n        clients:\n          type: array\n          items:\n            $ref: '#/components/schemas/ClientRepresentation'\n        components:\n          $ref: '#/components/schemas/MultivaluedHashMap'\n        defaultDefaultClientScopes:\n          type: array\n          items:\n            type: string\n        defaultGroups:\n          type: array\n          items:\n            type: string\n        defaultLocale:\n          type: string\n        defaultOptionalClientScopes:\n          type: array\n          items:\n            type: string\n        defaultRole:\n          $ref: '#/components/schemas/RoleRepresentation'\n        defaultSignatureAlgorithm:\n          type: string\n        directGrantFlow:\n          type: string\n        displayName:\n          type: string\n        displayNameHtml:\n          type: string\n        dockerAuthenticationFlow:\n          type: string\n        duplicateEmailsAllowed:\n          type: boolean\n        editUsernameAllowed:\n          type: boolean\n        emailTheme:\n          type: string\n        enabled:\n          type: boolean\n        enabledEventTypes:\n          type: array\n          items:\n            type: string\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          type: integer\n          format: int64\n        eventsListeners:\n          type: array\n          items:\n            type: string\n        failureFactor:\n          type: integer\n          format: int32\n        federatedUsers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupRepresentation'\n        id:\n          type: string\n        identityProviderMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderMapperRepresentation'\n        identityProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProviderRepresentation'\n        internationalizationEnabled:\n          type: boolean\n        keycloakVersion:\n          type: string\n        loginTheme:\n          type: string\n        loginWithEmailAllowed:\n          type: boolean\n        maxDeltaTimeSeconds:\n          type: integer\n          format: int32\n        maxFailureWaitSeconds:\n          type: integer\n          format: int32\n        minimumQuickLoginWaitSeconds:\n          type: integer\n          format: int32\n        notBefore:\n          type: integer\n          format: int32\n        oAuth2DeviceCodeLifespan:\n          type: integer\n          format: int32\n        oAuth2DevicePollingInterval:\n          type: integer\n          format: int32\n        oauth2DeviceCodeLifespan:\n          type: integer\n          format: int32\n        oauth2DevicePollingInterval:\n          type: integer\n          format: int32\n        offlineSessionIdleTimeout:\n          type: integer\n          format: int32\n        offlineSessionMaxLifespan:\n          type: integer\n          format: int32\n        offlineSessionMaxLifespanEnabled:\n          type: boolean\n        otpPolicyAlgorithm:\n          type: string\n        otpPolicyDigits:\n          type: integer\n          format: int32\n        otpPolicyInitialCounter:\n          type: integer\n          format: int32\n        otpPolicyLookAheadWindow:\n          type: integer\n          format: int32\n        otpPolicyPeriod:\n          type: integer\n          format: int32\n        otpPolicyType:\n          type: string\n        otpSupportedApplications:\n          type: array\n          items:\n            type: string\n        passwordPolicy:\n          type: string\n        permanentLockout:\n          type: boolean\n        protocolMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProtocolMapperRepresentation'\n        quickLoginCheckMilliSeconds:\n          type: integer\n          format: int64\n        realm:\n          type: string\n        refreshTokenMaxReuse:\n          type: integer\n          format: int32\n        registrationAllowed:\n          type: boolean\n        registrationEmailAsUsername:\n          type: boolean\n        registrationFlow:\n          type: string\n        rememberMe:\n          type: boolean\n        requiredActions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RequiredActionProviderRepresentation'\n        resetCredentialsFlow:\n          type: string\n        resetPasswordAllowed:\n          type: boolean\n        revokeRefreshToken:\n          type: boolean\n        roles:\n          $ref: '#/components/schemas/RolesRepresentation'\n        scopeMappings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeMappingRepresentation'\n        smtpServer:\n          type: object\n          additionalProperties: true\n        sslRequired:\n          type: string\n        ssoSessionIdleTimeout:\n          type: integer\n          format: int32\n        ssoSessionIdleTimeoutRememberMe:\n          type: integer\n          format: int32\n        ssoSessionMaxLifespan:\n          type: integer\n          format: int32\n        ssoSessionMaxLifespanRememberMe:\n          type: integer\n          format: int32\n        supportedLocales:\n          type: array\n          items:\n            type: string\n        userFederationMappers:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationMapperRepresentation'\n        userFederationProviders:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserFederationProviderRepresentation'\n        userManagedAccessAllowed:\n          type: boolean\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRepresentation'\n        verifyEmail:\n          type: boolean\n        waitIncrementSeconds:\n          type: integer\n          format: int32\n        webAuthnPolicyAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyCreateTimeout:\n          type: integer\n          format: int32\n        webAuthnPolicyPasswordlessAcceptableAaguids:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyPasswordlessAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyPasswordlessAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyPasswordlessCreateTimeout:\n          type: integer\n          format: int32\n        webAuthnPolicyPasswordlessRequireResidentKey:\n          type: string\n        webAuthnPolicyPasswordlessRpEntityName:\n          type: string\n        webAuthnPolicyPasswordlessRpId:\n          type: string\n        webAuthnPolicyPasswordlessSignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyPasswordlessUserVerificationRequirement:\n          type: string\n        webAuthnPolicyRequireResidentKey:\n          type: string\n        webAuthnPolicyRpEntityName:\n          type: string\n        webAuthnPolicyRpId:\n          type: string\n        webAuthnPolicySignatureAlgorithms:\n          type: array\n          items:\n            type: string\n        webAuthnPolicyUserVerificationRequirement:\n          type: string\n    RequiredActionProviderRepresentation:\n      type: object\n      properties:\n        alias:\n          type: string\n        config:\n          type: object\n          additionalProperties: true\n        defaultAction:\n          type: boolean\n        enabled:\n          type: boolean\n        name:\n          type: string\n        priority:\n          type: integer\n          format: int32\n        providerId:\n          type: string\n    ResourceRepresentation:\n      type: object\n      properties:\n        id:\n          type: string\n        attributes:\n          type: object\n          additionalProperties: true\n        displayName:\n          type: string\n        icon_uri:\n          type: string\n        name:\n          type: string\n        ownerManagedAccess:\n          type: boolean\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n        type:\n          type: string\n        uris:\n          type: array\n          items:\n            type: string\n    ResourceServerRepresentation:\n      type: object\n      properties:\n        allowRemoteResourceManagement:\n          type: boolean\n        clientId:\n          type: string\n        decisionStrategy:\n          type: string\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n        id:\n          type: string\n        name:\n          type: string\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        policyEnforcementMode:\n          type: string\n          enum:\n            - ENFORCING\n            - PERMISSIVE\n            - DISABLED\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n        scopes:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScopeRepresentation'\n    RoleRepresentation:\n      type: object\n      properties:\n        attributes:\n          type: object\n          additionalProperties: true\n        clientRole:\n          type: boolean\n        composite:\n          type: boolean\n        composites:\n          $ref: '#/components/schemas/RoleRepresentation-Composites'\n        containerId:\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n    RoleRepresentation-Composites:\n      type: object\n      properties:\n        client:\n          type: object\n          additionalProperties: true\n        realm:\n          type: array\n          items:\n            type: string\n    RolesRepresentation:\n      type: object\n      properties:\n        client:\n          type: object\n          additionalProperties: true\n        realm:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleRepresentation'\n    ScopeMappingRepresentation:\n      type: object\n      properties:\n        client:\n          type: string\n        clientScope:\n          type: string\n        roles:\n          type: array\n          items:\n            type: string\n        self:\n          type: string\n    ScopeRepresentation:\n      type: object\n      properties:\n        displayName:\n          type: string\n        iconUri:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        policies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyRepresentation'\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResourceRepresentation'\n    ServerInfoRepresentation:\n      type: object\n      properties:\n        builtinProtocolMappers:\n          type: object\n          additionalProperties: true\n        clientImporters:\n          type: array\n          items:\n            type: object\n            additionalProperties: true\n        clientInstallations:\n          type: object\n          additionalProperties: true\n        componentTypes:\n          type: object\n          additionalProperties: true\n        enums:\n          type: object\n          additionalProperties: true\n        identityProviders:\n          type: array\n          items:\n            type: object\n            additionalProperties: true\n        memoryInfo:\n          $ref: '#/components/schemas/MemoryInfoRepresentation'\n        passwordPolicies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PasswordPolicyTypeRepresentation'\n        profileInfo:\n          $ref: '#/components/schemas/ProfileInfoRepresentation'\n        protocolMapperTypes:\n          type: object\n          additionalProperties: true\n        providers:\n          type: object\n          additionalProperties: true\n        socialProviders:\n          type: array\n          items:\n            type: object\n            additionalProperties: true\n        systemInfo:\n          $ref: '#/components/schemas/SystemInfoRepresentation'\n        themes:\n          type: object\n          additionalProperties: true\n    SpiInfoRepresentation:\n      type: object\n      properties:\n        internal:\n          type: boolean\n        providers:\n          type: object\n          additionalProperties: true\n    SynchronizationResult:\n      type: object\n      properties:\n        added:\n          type: integer\n          format: int32\n        failed:\n          type: integer\n          format: int32\n        ignored:\n          type: boolean\n        removed:\n          type: integer\n          format: int32\n        status:\n          type: string\n        updated:\n          type: integer\n          format: int32\n    SystemInfoRepresentation:\n      type: object\n      properties:\n        fileEncoding:\n          type: string\n        javaHome:\n          type: string\n        javaRuntime:\n          type: string\n        javaVendor:\n          type: string\n        javaVersion:\n          type: string\n        javaVm:\n          type: string\n        javaVmVersion:\n          type: string\n        osArchitecture:\n          type: string\n        osName:\n          type: string\n        osVersion:\n          type: string\n        serverTime:\n          type: string\n        uptime:\n          type: string\n        uptimeMillis:\n          type: integer\n          format: int64\n        userDir:\n          type: string\n        userLocale:\n          type: string\n        userName:\n          type: string\n        userTimezone:\n          type: string\n        version:\n          type: string\n    TestLdapConnectionRepresentation:\n      type: object\n      properties:\n        action:\n          type: string\n        authType:\n          type: string\n        bindCredential:\n          type: string\n        bindDn:\n          type: string\n        componentId:\n          type: string\n        connectionTimeout:\n          type: string\n        connectionUrl:\n          type: string\n        startTls:\n          type: string\n        useTruststoreSpi:\n          type: string\n    UserConsentRepresentation:\n      type: object\n      properties:\n        clientId:\n          type: string\n        createdDate:\n          type: integer\n          format: int64\n        grantedClientScopes:\n          type: array\n          items:\n            type: string\n        lastUpdatedDate:\n          type: integer\n          format: int64\n    UserFederationMapperRepresentation:\n      type: object\n      properties:\n        config:\n          type: object\n          additionalProperties: true\n        federationMapperType:\n          type: string\n        federationProviderDisplayName:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n    UserFederationProviderRepresentation:\n      type: object\n      properties:\n        changedSyncPeriod:\n          type: integer\n          format: int32\n        config:\n          type: object\n          additionalProperties: true\n        displayName:\n          type: string\n        fullSyncPeriod:\n          type: integer\n          format: int32\n        id:\n          type: string\n        lastSync:\n          type: integer\n          format: int32\n        priority:\n          type: integer\n          format: int32\n        providerName:\n          type: string\n    UserRepresentation:\n      type: object\n      properties:\n        access:\n          type: object\n          additionalProperties: true\n        attributes:\n          type: object\n          additionalProperties: true\n        clientConsents:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserConsentRepresentation'\n        clientRoles:\n          type: object\n          additionalProperties: true\n        createdTimestamp:\n          type: integer\n          format: int64\n        credentials:\n          type: array\n          items:\n            $ref: '#/components/schemas/CredentialRepresentation'\n        disableableCredentialTypes:\n          type: array\n          items:\n            type: string\n        email:\n          type: string\n        emailVerified:\n          type: boolean\n        enabled:\n          type: boolean\n        federatedIdentities:\n          type: array\n          items:\n            $ref: '#/components/schemas/FederatedIdentityRepresentation'\n        federationLink:\n          type: string\n        firstName:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n        id:\n          type: string\n        lastName:\n          type: string\n        notBefore:\n          type: integer\n          format: int32\n        origin:\n          type: string\n        realmRoles:\n          type: array\n          items:\n            type: string\n        requiredActions:\n          type: array\n          items:\n            type: string\n        self:\n          type: string\n        serviceAccountClientId:\n          type: string\n        username:\n          type: string\nsecurity:\n  - access_token: []\nexternalDocs:\n  description: Schema source code\n  url: https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations\n"
		}
	},
	"Error": "make ir: path \"/{realm}/authentication/executions\": post: responses: parse response status code: strconv.Atoi: parsing \"2XX\": invalid syntax"
}