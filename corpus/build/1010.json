{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/axesso.de/1.0.0/openapi.yaml",
			"content": "openapi: 3.0.0\nservers:\n  - url: http://api.axesso.de\ninfo:\n  contact:\n    email: support@axesso.de\n  description: Use this api to fetch information to Amazon products and more.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Axesso Api\n  version: 1.0.0\n  x-apisguru-categories:\n    - ecommerce\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/Axesso/axesso-java-client/master/swagger/axessor_api_def_swagger.yaml\n      version: \"3.0\"\n  x-providerName: axesso.de\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://api-doc.axesso.de/\ntags:\n  - description: APIs for request on Amazon\n    externalDocs:\n      description: Find out more\n      url: http://api.axesso.de/\n    name: amz\npaths:\n  /amz/amazon-lookup-buy-recommendations:\n    get:\n      description: \"\"\n      operationId: requestBuyRecommendation\n      parameters:\n        - description: The url of the requested product.\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BuyRecommendationResponse\"\n          description: successful operation\n        \"400\":\n          description: Bad Request - Missing parameter\n        \"404\":\n          description: Not Found - Product not Found\n        \"406\":\n          description: Not Acceptable - Wrong parameter\n      summary: request buy recommendations to a given product\n      tags:\n        - amz\n  /amz/amazon-lookup-product:\n    get:\n      description: \"\"\n      operationId: requestProduct\n      parameters:\n        - description: The url of the requested product.\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n        - description: Size parameter if available.\n          in: query\n          name: size\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProductDetailsResponse\"\n          description: successful operation\n        \"400\":\n          description: Bad Request - Missing parameter\n        \"404\":\n          description: Not Found - Product not Found\n        \"406\":\n          description: Not Acceptable - Wrong parameter\n      security: []\n      summary: lookup product information\n      tags:\n        - amz\n  /amz/amazon-search-by-keyword:\n    get:\n      description: \"\"\n      operationId: keywordSearch\n      parameters:\n        - description: keyword to search\n          in: query\n          name: keyword\n          required: true\n          schema:\n            type: string\n        - description: domain for the search\n          in: query\n          name: domainCode\n          required: true\n          schema:\n            type: string\n        - description: sort option\n          in: query\n          name: sortBy\n          schema:\n            default: relevanceblender\n            type: string\n        - description: number of the results (max 20)\n          in: query\n          name: numberOfProducts\n          schema:\n            default: \"20\"\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/KeywordSearchResponse\"\n          description: successful operation\n        \"400\":\n          description: Bad Request - Missing parameter\n        \"404\":\n          description: Not Found - Product not Found\n      security: []\n      summary: fetch results auf a keyword search on Amazon\n      tags:\n        - amz\n  /amz/sort-options:\n    get:\n      description: \"\"\n      operationId: sortOptions\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SortOptionResponse\"\n          description: successful operation\n      summary: request available sort options to use in keyword search\n      tags:\n        - amz\ncomponents:\n  schemas:\n    BuyRecommendationResponse:\n      properties:\n        buyRecommendations:\n          items:\n            type: string\n          type: array\n        numberOfProducts:\n          format: int64\n          type: integer\n        responseMessage:\n          example: Product successfully found!\n          type: string\n        responseStatus:\n          example: PRODUCT_FOUND_RESPONSE\n          type: string\n      type: object\n    KeywordSearchResponse:\n      properties:\n        domainCode:\n          example: com\n          type: string\n        foundProducts:\n          items:\n            type: string\n          type: array\n        keyword:\n          example: Playstation 4\n          type: string\n        numberOfProducts:\n          format: int64\n          type: integer\n        responseMessage:\n          example: Product successfully found!\n          type: string\n        responseStatus:\n          example: PRODUCT_FOUND_RESPONSE\n          type: string\n        sortStrategy:\n          example: date-desc-rank\n          type: string\n      type: object\n    ProductDetailsResponse:\n      properties:\n        answeredQuestions:\n          format: int64\n          type: integer\n        asin:\n          example: B077Q3YRP5\n          type: string\n        countReview:\n          format: int64\n          type: integer\n        features:\n          items:\n            type: string\n          type: array\n        fulfilledBy:\n          example: Amazon\n          type: string\n        manufacturer:\n          example: Sony\n          type: string\n        price:\n          type: number\n        priceSaving:\n          example: \"You Save: $59,58 (43%)\"\n          type: string\n        priceShippingInformation:\n          example: free\n          type: string\n        prime:\n          type: boolean\n        productRating:\n          example: 4.4 out of 5 stars\n          type: string\n        productTitle:\n          example: Playstation 4\n          type: string\n        responseMessage:\n          example: Product successfully found!\n          type: string\n        responseStatus:\n          example: PRODUCT_FOUND_RESPONSE\n          type: string\n        retailPrice:\n          type: number\n        sizeSelection:\n          items:\n            type: string\n          type: array\n        soldBy:\n          example: Sony\n          type: string\n        warehouseAvailability:\n          example: In Stock\n          type: string\n      type: object\n    SortOptionResponse:\n      properties:\n        responseMessage:\n          example: Product successfully found!\n          type: string\n        responseStatus:\n          example: PRODUCT_FOUND_RESPONSE\n          type: string\n        resultSize:\n          format: int64\n          type: integer\n        sortOptions:\n          items:\n            properties:\n              order:\n                format: int64\n                type: integer\n              sortName:\n                example: relevanceblender\n                type: string\n              strategy:\n                example: AMAZON_FEATURED\n                type: string\n            type: object\n          type: array\n      type: object\n"
		}
	},
	"Error": "parse: paths: /amz/amazon-search-by-keyword: get: keywordSearch: parameters: parse parameter \"numberOfProducts\": schema: parse default: expected type \"integer\", got \"string\""
}