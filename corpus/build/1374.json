{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DLHub-Argonne/dlhub_service"
		},
		"file": {
			"name": "api.yaml",
			"path": "openapi/api.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: DLHub REST API\n  description: REST API for interacting with the [Data and Learning Hub for Science](https://dlhub.org)\n  version: 0.1.0\nservers:\n  - url: \"https://api.dlhub.org/api/v1\"\npaths:\n  /namespace:\n    get:\n      summary: Get the user name of logged in user\n      responses:\n        '200':\n          description: Username of the logged in user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  namespace:\n                    type: string\n                    description: Namespace of the user\n  /publish:\n    post:\n      summary: Publish a servable to DLHub\n      requestBody:\n        required: true\n        description: Servable description with all required files\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                json:\n                  $ref: https://raw.githubusercontent.com/DLHub-Argonne/dlhub_schemas/master/schemas/servable.json#\n                file:\n                  description: ZIP file containing any content for the servable\n                  type: string\n                  format: application/zip\n          application/json:\n            schema:\n              $ref: https://raw.githubusercontent.com/DLHub-Argonne/dlhub_schemas/master/schemas/servable.json#\n\n      responses:\n        '200':\n          description: Servable was successfully submitted to DLHub\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task_id:\n                    type: string\n                    format: uuid\n                    description: Task ID for DLHub servable\n  /publish_repo:\n    post:\n      summary: Create a servable from a GitHub repository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                repository:\n                  type: string\n                  description: URL of a git repository\n      responses:\n        '200':\n          description: Servable was successfully submitted to DLHub\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  task_id:\n                    type: string\n                    format: uuid\n                    description: Task ID for DLHub servable\n  /{task_id}/status:\n    get:\n      summary: Get the status of a servable\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: ID of task to be checked\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Status of requested task\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum: ['RUNNING', 'COMPLETE']\n  /servables:\n    get:\n      summary: Get a list of all servables available through DLHub\n      responses:\n        '200':\n          description: List of servables in DLHub\n          content:\n            application/json:\n              schema:\n                type: array\n                description: List of all servable names\n                items:\n                  type: string\n                  description: Shortname of DLHub servable\n\n  /servables/{servable_namespace}/{servable_name}:\n    delete:\n      summary: Delete a servable\n      parameters:\n        - name: servable_namespace\n          in: path\n          required: true\n          description: Username of the servable owner\n          schema:\n            type: string\n        - name: servable_name\n          in: path\n          required: true\n          description: Name of the servable\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful deletion\n\n  /servables/\u003cservable_namespace\u003e/\u003cservable_name\u003e/run:\n    post:\n      summary: Run a servable on new data\n      parameters:\n        - name: servable_namespace\n          in: path\n          required: true\n          description: Username of the servable owner\n          schema:\n            type: string\n        - name: servable_name\n          in: path\n          required: true\n          description: Name of the servable\n          schema:\n            type: string\n      requestBody:\n        description: Data to used as input into the model, any options for invoking it\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ascynchronous:\n                  type: boolean\n                  description: Whether to invoke the function asynchronously\n              oneOf:\n                - type: object\n                  properties:\n                    data:\n                      description: Data supplied as a JSON document\n                - type: object\n                  properties:\n                    python:\n                      type: object\n                      description: Data supplied as a Python object serialized using jsonpickle\n      responses:\n        '200':\n          description: Run completed successfully\n          content:\n            application/json:\n              schema:\n                description: Results of the output, JSON-encoded\n        '202':\n          description: Asynchronous execution has started\n          content:\n            application/json:\n              schema:\n                properties:\n                  task_id:\n                    type: string\n                    format: uuid\n                    description: Task ID of the submission request\n"
		}
	},
	"Error": "parse: paths: /publish: post: : requestBody: content: application/json: parse schema: parse schema: reference \"https://raw.githubusercontent.com/DLHub-Argonne/dlhub_schemas/master/schemas/servable.json#\": resolve reference \"https://raw.githubusercontent.com/DLHub-Argonne/dlhub_schemas/master/schemas/servable.json#\": invalid schema reference \"https://raw.githubusercontent.com/DLHub-Argonne/dlhub_schemas/master/schemas/servable.json#\""
}