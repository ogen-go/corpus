{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"path": "core/services/user-management/apiDoc/openapi.yml",
			"content": "openapi: 3.0.0\ninfo:\n  description: \"User Management Service is responsible for all CRUD operations on users and user images and handles the\n    authentication\"\n  version: 1.0.0\n  title: User Management API\ntags:\n  - name: users\n    description: Operations about users\n  - name: userImages\n    description: Operations on users image. Only PNG and JPEG supported.\npaths:\n  /users:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    post:\n      tags:\n        - users\n      summary: Create user\n      description: Create mew user with the provided `username`, `e-mail` and `password`.\n        The operations resutrns created user id on success\n      operationId: createUser\n      requestBody:\n        $ref: \"#/components/requestBodies/UsersCreate\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/UserAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    get:\n      tags:\n        - users\n      summary: Get list of users\n      description: To get the list of users you can specify projection with `fields` paramter and set the\n        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`\n        parameter. The cursor to the next page will be included in the response body. There is nore further pages, if\n        the `cursor` is not included in the response\n      operationId: getUsers\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          example: \"username,email,creationDate\"\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          schema:\n            type: string\n        - name: email\n          in: query\n          description: Filter by email\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n            format: email\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          schema:\n            type: integer\n            default: 30\n            format: int32\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    description: Number of users returned in current response\n                    type: integer\n                  collection:\n                    type: array\n                    description: The array of users objects\n                    items:\n                      $ref: \"#/components/schemas/UserResponse\"\n                  cursor:\n                    type: string\n                    description: Cursor to the next page. Set the returned cursor as `cursor` query parameter in the\n                      next request to retrive following page\n                  total:\n                    description: Total number of users that could be returned by current query\n                    type: number\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\n  /users/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n      - $ref: \"#/components/parameters/userIdParam\"\n    get:\n      tags:\n        - users\n      summary: Get user by id\n      description: Projection can be specified with `fields` paramter\n      operationId: getUserById\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - users\n      summary: Update user\n      description: New user is created if no user with\n        the provided `id` exists. Note that in this operation you can replace **all** fields (except `id`). At least `username` and `e-mail`\n        must be provided.\n      operationId: updateUser\n      parameters:\n        - $ref: \"#/components/parameters/userIdParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UsersUpdate\"\n      responses:\n        \"204\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/UserAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    patch:\n      tags:\n        - users\n      summary: Patch user\n      description: Use this method to do a partial updated of the user document. In the request provided fields\n        will be merged with the existing user object.\n      operationId: patchUser\n      requestBody:\n        $ref: \"#/components/requestBodies/UsersPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/UserAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - users\n      summary: Post user (alias for PATCH)\n      description: Use this method to do a partial updated of the user document. In the request provided fields\n        will be merged with the existing user object.\n      operationId: patchUser\n      requestBody:\n        $ref: \"#/components/requestBodies/UsersPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"409\":\n          $ref: \"#/components/responses/UserAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - users\n      summary: Delete user\n      description: Delete existing user and user image by id\n      operationId: deleteUser\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /users/login:\n    post:\n      tags:\n        - users\n      summary: Logs user into the system\n      description: Logs user into the system with the provided E-Mail and password and generates JWT\n      operationId: loginUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - password\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                password:\n                  type: string\n      responses:\n        \"200\":\n          description: User verified\n          content:\n            application/json:\n              schema:\n                description: User Response schema\n                type: object\n                additionalProperties: false\n                required:\n                  - id\n                  - username\n                  - email\n                  - password\n                  - create\n                  - modified\n                  - token\n                properties:\n                  username:\n                    type: string\n                  id:\n                    type: string\n                  email:\n                    type: string\n                    format: email\n                  imageId:\n                    type: string\n                    description: ID of the profile image\n                  imageUrl:\n                    type: string\n                    description: URL to external profile image\n                  created:\n                    type: string\n                    format: date-time\n                    description: User creation date\n                  modified: \n                    type: string\n                    format: date-time\n                    description: User last modified date  \n                  token:\n                    type: string\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /users/register:\n    post:\n      tags:\n        - users\n      summary: Register user\n      description: Register new user with at least `username`, `e-mail` and `password`. This method is supposed to be used\n        for clients like web browser and does not require the `x-actorid` header or further authentication!\n      operationId: registerUser\n      requestBody:\n        $ref: \"#/components/requestBodies/UsersCreate\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"409\":\n          $ref: \"#/components/responses/UserAlreadyExistsError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /users/verify:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    post:\n      tags:\n        - users\n      summary: Verify user token\n      description: Verify the in header provided user JWT\n      operationId: verifyUser\n      parameters:\n        - name: Authorization\n          in: header\n          description: user JWT in the request header\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: User verified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /userImages:\n    parameters:\n      - $ref: \"#/components/parameters/actoridParam\"\n    post:\n      tags:\n        - userImages\n      summary: Add user image\n      description: Creates uploaded user image. The operation returns image `id`. Note that you have to set users `imageId`\n        to the uploaded image `id` manually.\n      operationId: addUserImage\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /userImages/{id}:\n    get:\n      tags:\n        - userImages\n      summary: Get user image\n      description: Get uploaded user profile image by image ID. You can obtain the image ID from the\n        corresponding user document\n      operationId: getUserImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the users image\n          required: true\n          explode: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - userImages\n      summary: Update user image\n      description: Upload and update user image by image ID. Please note that in fact the old image will be deleted and a\n        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API users.\n        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response\n      operationId: updateUserImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the users image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actoridParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - userImages\n      summary: Delete user image\n      description: Delete uploaded user profile image by image ID\n      operationId: deleteUserImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the users image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actoridParam\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\nservers:\n  - url: http://localhost:3007\ncomponents:\n  requestBodies:\n    UsersCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            additionalProperties: false\n            required:\n              - username\n              - email\n              - password\n            properties:\n              username:\n                type: string\n              email:\n                type: string\n                format: email\n              password:\n                type: string\n              imageId:\n                type: string\n              imageUrl:\n                type: string\n                format: url\n    UsersUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            additionalProperties: true\n            description: Minimal required properties to update the user. To see the comlete set of possible attributes please\n              refer to the corresponsing schema\n            required:\n              - username\n              - email\n            properties:\n              username:\n                type: string\n              email:\n                type: string\n                format: email\n    UsersPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            additionalProperties: true\n            properties:\n              username:\n                type: string\n              email:\n                type: string\n                format: email\n              password:\n                type: string\n              imageId:\n                type: string\n              imageUrl:\n                type: string\n                format: url\n            minProperties: 1\n    Image:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            additionalProperties: false\n            required:\n              - image\n            properties:\n              image:\n                type: string\n                format: binary\n          encoding:\n            image:\n              contentType: image/png, image/jpeg\n  schemas:\n    User:\n      title: User\n      description: General User schema\n      type: object\n      additionalProperties: true\n      required:\n        - username\n        - id\n        - email\n        - password\n        - creationDate\n      properties:\n        username:\n          type: string\n        id:\n          $ref: \"#/components/schemas/UserId\"\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n        imageId:\n          type: string\n          description: ID of the profile image\n        imageUrl:\n          type: string\n          description: URL to external profile image\n        creationDate:\n          type: string\n          format: date-time\n          description: User creation date\n    UserId:\n      title: User id\n      description: Unique user identifier\n      type: string\n      example: \"user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\"\n      pattern: \"^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n\n    UserResponse:\n      title: User response\n      description: User response with essential attributes. For full list of possible attributes pleease refer to\n        te corresponsing schema.\n      type: object\n      additionalProperties: true\n      properties:\n        username:\n          type: string\n        id:\n          type: string\n        email:\n          type: string\n          format: email\n        imageId:\n          type: string\n          description: ID of the profile image\n        imageUrl:\n          type: string\n          description: URL to external profile image\n        created:\n          type: string\n          format: date-time\n          description: User creation date\n    Error:\n      type: object\n      additionalProperties: false\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          description: Description of the error type\n          type: string\n        message:\n          description: Description of the error\n          type: string\n        code:\n          description: Erro status code\n          type: number\n          format: int32\n        errors:\n          description: JSON Schema validation errors\n          type: array\n          items:\n            type: object\n  responses:\n    Success:\n      description: Succesful operation with response data\n      content:\n        text/html:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Succesful operation\n    Verification:\n      description: User verified\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/UserResponse\"\n              - type: object\n                properties:\n                  token:\n                    type: string\n    UnexpectedError:\n      description: Internal error\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n    NotFoundError:\n      description: Entity not found\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n    InvalidDataError:\n      description: Invalid data supplied\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n    NotAuthorizedError:\n      description: Wrong credentials supplied\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n    UserAlreadyExistsError:\n      description: User with the given email already exists\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n    RequestValidationError:\n      description: Request violates API Specification\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n  parameters:\n    actoridParam:\n      in: header\n      description: The id of the origin that produces action/message. Can be an user or a service\n      name: x-actorid\n      schema:\n        type: string\n        minLength: 1\n        pattern: \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n      required: true\n    userIdParam:\n      in: path\n      description: Existing identifier of the user that should be affected by the operation\n      name: id\n      schema:\n        $ref: \"#/components/schemas/UserId\"\n      required: true\n"
		}
	},
	"Error": "parse: paths: /users/{id}: patch: duplicate operationId: \"patchUser\""
}