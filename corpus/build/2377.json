{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ofux/deluge"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "api/openapi.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Deluge API\n  description: 'Deluge API lets you create, configure and launch load tests.\n    You can find out more about Deluge\n    at [https://github.com/ofux/deluge](https://github.com/ofux/deluge).'\n  #termsOfService: http://swagger.io/terms/\n  #contact:\n  #  email: apiteam@swagger.io\n  license:\n    name: GNU Affero General Public License v3.0\n    url: https://www.gnu.org/licenses/agpl-3.0.html\n  version: 1.0.0\nexternalDocs:\n  description: Github\n  url: https://github.com/ofux/deluge\n#servers:\n#  - url: https://petstore.swagger.io/v2\n#  - url: http://petstore.swagger.io/v2\ntags:\n  - name: job\n    description: A job is a run/running deluge\n  - name: deluge\n    description: A deluge defines which scenario(s) to execute and their respective configuration\n  - name: scenario\n    description: A scenario defines the script to execute from each virtual user\n\n\n\npaths:\n  /deluges:\n    get:\n      tags:\n        - deluge\n      summary: Get all your deluges metadata\n      description: Returns metadata of all your deluges\n      operationId: getAllDeluges\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  elements:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DelugeMetadata'\n    put:\n      tags:\n        - deluge\n      summary: Update an existing deluge\n      operationId: updateDeluge\n      requestBody:\n        description: Deluge script written in DelugeDSL that needs to be updated\n        content:\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/Deluge'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid deluge (fails to compile)\n          content: {}\n        404:\n          description: Invalid ID supplied\n          content: {}\n    post:\n      tags:\n        - deluge\n      summary: Add a new deluge\n      operationId: addDeluge\n      requestBody:\n        description: Deluge script written in DelugeDSL that needs to be added\n        content:\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/Deluge'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid deluge (fails to compile)\n          content: {}\n        409:\n          description: Supplied ID already exists\n          content: {}\n  /deluges/{delugeId}:\n    get:\n      tags:\n        - deluge\n      summary: Find deluge by ID\n      description: Returns a single deluge\n      operationId: getDelugeById\n      parameters:\n        - name: delugeId\n          in: path\n          description: ID of deluge to return\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Deluge'\n        404:\n          description: Deluge not found\n          content: {}\n    delete:\n      tags:\n        - deluge\n      summary: Delete deluge by ID\n      description: Deletes a single deluge\n      operationId: deleteDelugeById\n      parameters:\n        - name: delugeId\n          in: path\n          description: ID of deluge to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        404:\n          description: Deluge not found\n          content: {}\n\n\n  /scenarios:\n    get:\n      tags:\n        - scenario\n      summary: Get all your scenarios metadata\n      description: Returns metadata of all your scenarios\n      operationId: getAllScenarios\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  elements:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ScenarioMetadata'\n    put:\n      tags:\n        - scenario\n      summary: Update an existing scenario\n      operationId: updateScenario\n      requestBody:\n        description: Scenario script written in DelugeDSL that needs to be updated\n        content:\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/Scenario'\n        required: true\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid scenario (fails to compile)\n          content: {}\n        404:\n          description: Invalid ID supplied\n          content: {}\n    post:\n      tags:\n        - scenario\n      summary: Add a new scenario\n      operationId: addScenario\n      requestBody:\n        description: Scenario script written in DelugeDSL that needs to be added\n        content:\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/Scenario'\n        required: true\n      responses:\n        201:\n          description: successful operation\n          content: {}\n        400:\n          description: Invalid scenario (fails to compile)\n          content: {}\n        409:\n          description: Supplied ID already exists\n          content: {}\n  /scenarios/{scenarioId}:\n    get:\n      tags:\n        - scenario\n      summary: Find scenario by ID\n      description: Returns a single scenario\n      operationId: getScenarioById\n      parameters:\n        - name: scenarioId\n          in: path\n          description: ID of scenario to return\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Scenario'\n        404:\n          description: Scenario not found\n          content: {}\n    delete:\n      tags:\n        - scenario\n      summary: Delete scenario by ID\n      description: Deletes a single scenario\n      operationId: deleteScenarioById\n      parameters:\n        - name: scenarioId\n          in: path\n          description: ID of scenario to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content: {}\n        404:\n          description: Scenario not found\n          content: {}\n\n\n  /jobs:\n    get:\n      tags:\n        - job\n      summary: Get all your jobs metadata\n      description: Returns metadata of all your jobs\n      operationId: getAllJobs\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/JobMetadata'\n    post:\n      tags:\n        - job\n      summary: Start a new job\n      operationId: startJob\n      requestBody:\n        description: Job description\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobCreation'\n        required: true\n      responses:\n        202:\n          description: job started\n          $ref: '#/components/schemas/JobMetadata'\n        400:\n          description: Invalid job\n          content: {}\n        404:\n          description: Job's deluge not found\n          content: {}\n  /jobs/{jobId}:\n    get:\n      tags:\n        - job\n      summary: Get job report\n      description: Returns a single job report\n      operationId: getJobById\n      parameters:\n        - name: jobId\n          in: path\n          description: ID of job to return\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Job report was successfully and fully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobReport'\n        206:\n          description: Job report was successfully retrieved but is partial. This happens if job is still running, or if job's associated deluge and/or scenarios have been deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JobReport'\n        404:\n          description: Job not found or no report was created yet\n          content: {}\n  /jobs/interrupt/{jobId}:\n    put:\n      tags:\n        - job\n      summary: Interrupt Job by ID\n      description: Interrupts a Job\n      operationId: interruptJobById\n      parameters:\n        - name: jobId\n          in: path\n          description: ID of job to interrupt\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: job is being interrupted\n          content: {}\n\n\n\ncomponents:\n  schemas:\n    Deluge:\n      type: string\n      description: Deluge script written in DelugeDSL\n      format: Deluge DSL\n      example: |\n        deluge(\"delugeId\", \"Deluge name\", \"20s\", {\n          \"scenario1Id\": {\n           \"concurrent\": 100,\n           \"delay\": \"100ms\"\n          },\n          \"scenario2Id\": {\n           \"concurrent\": 20,\n           \"delay\": \"1000ms\"\n          }\n        });\n    DelugeMetadata:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    Scenario:\n      type: string\n      description: Scenario script written in DelugeDSL\n      format: Deluge DSL\n      example: |\n        scenario(\"scenarioId\", \"Scenario name\", function () {\n          http(\"My request\", {\n            \"url\": \"http://localhost:8080/hello/foo\"\n          });\n        });\n    ScenarioMetadata:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n    JobCreation:\n      type: object\n      properties:\n        delugeId:\n          type: string\n        webhook:\n          type: string\n    JobMetadata:\n      type: object\n      properties:\n        id:\n          type: string\n        delugeId:\n          type: string\n        webhook:\n          type: string\n    JobReport:\n      type: object\n      properties:\n        id:\n          type: string\n        delugeId:\n          type: string\n        delugeName:\n          type: string\n        status:\n          $ref: '#/components/schemas/DelugeStatus'\n        globalDuration:\n          $ref: '#/components/schemas/Duration'\n        scenarios:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/JobScenarioReport'\n    JobScenarioReport:\n      type: object\n      properties:\n        scenarioId:\n          type: string\n        name:\n          type: string\n        status:\n          $ref: '#/components/schemas/ScenarioStatus'\n        iterationDuration:\n          $ref: '#/components/schemas/Duration'\n        report:\n          type: object\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              message:\n                type: string\n              stacktrace:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    Type:\n                      type: string\n                    Line:\n                      type: integer\n                    Column:\n                      type: integer\n                    Literal:\n                      type: string\n    DelugeStatus:\n      type: string\n      enum:\n        - \"notStarted\"\n        - \"inProgress\"\n        - \"doneSuccess\"\n        - \"interrupted\"\n        - \"doneError\"\n    ScenarioStatus:\n      type: string\n      enum:\n        - \"notStarted\"\n        - \"inProgress\"\n        - \"doneSuccess\"\n        - \"interrupted\"\n        - \"doneError\"\n    Duration:\n      type: string\n      example: \"100ms\"\n  securitySchemes:\n    apikey:\n      type: apiKey\n      name: apikey\n      in: header\n"
		}
	},
	"Error": "parse: paths: /jobs: post: operation \"startJob\": responses: 202: resolve \"#/components/schemas/JobMetadata\" reference: invalid response reference: \"#/components/schemas/JobMetadata\""
}