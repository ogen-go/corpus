{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/google/gnostic-grpc"
		},
		"file": {
			"name": "parameters.yaml",
			"path": "generator/testfiles/parameters.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: Test API for GSoC project\n  version: \"1.0.0\"\n  description: |\n    This is a OpenAPI description for testing my GSoC project. The name of the path defines what\n    will be tested and the operation object will be set accordingly.\n    Structure of tests:\n    /testParameter*   --\u003e To test everything related to path/query parameteres\n    /testResponse*    --\u003e To test everything related to respones\n    /testRequestBody* --\u003e To test everything related to request bodies\n    others            --\u003e Other stuff\n\npaths:\n  ########################## PARAMETER ##########################\n  /testParameterQuery:\n    get:\n      operationId: testParameterQuery\n      parameters:\n        - name: param1\n          in: query\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: success\n  /testParameterQueryEnum: #TODO: Generates invalid proto for integer enums\n    get:\n      operationId: testParameterQueryEnum\n      parameters:\n        - name: param2\n          in: query\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - Dingo\n                - Husky\n                - Retriever\n              default: Husky\n      responses:\n        200:\n          description: success\n  /testParameterPath/{param1}:\n    get:\n      operationId: testParameterPath\n      parameters:\n        - name: param3\n          in: path\n          schema:\n            type: string\n      responses:\n        200:\n          description: success\n  /testParameterPathEnum/{param1}: #TODO: Generates invalid proto for integer enums\n    get:\n      operationId: testParameterPathEnum\n      parameters:\n        - name: param4\n          in: path\n          schema:\n            type: string\n            enum:\n              - Dingo\n              - Husky\n            default: Dingo\n      responses:\n        200:\n          description: success\n\n  /testParameterMultiplePath/{param1}/{param2}:\n    get:\n      operationId: testParameterMultiplePath\n      parameters:\n        - name: param5\n          in: path\n          schema:\n            type: string\n        - name: param6\n          in: path\n          schema:\n            type: string\n      responses:\n        200:\n          description: success\n\n  /testParameterReference:\n    get:\n      operationId: testParameterReference\n      parameters:\n        - $ref: '#/components/parameters/Parameter1'\n      responses:\n        200:\n          description: success\ncomponents:\n  parameters:\n    Parameter1:\n      name: param7\n      in: query\n      schema:\n        type: integer\n        format: int64\n    Parameter2:\n      name: param8\n      in: path\n      schema:\n        type: integer\n        format: int64"
		}
	},
	"Error": "parse: paths: /testParameterMultiplePath/{param1}/{param2}: get: operation \"testParameterMultiplePath\": parameters: parse parameter \"param5\": path parameters must be required"
}