{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"path": "openapi/spotto/openapi.yml",
			"content": "openapi: 3.0.2\ninfo:\n  title: Spotto-API\n  description: |\n    This is a generated connector for [Spotto API v1.0.0](https://api-reference.spotto.io) OpenAPI specification.\n    The Spotto API provides a broad set of operations and resources that allow you to:\n    - Access and manage the Spotto registry of assets, locations and readers\n    - Control levels of access to Spotto applications and APIs across your account\n    - Query the Spotto event log to gain valuable insights into your historical data\n    - Setup event based hooks when something significant changes in Spotto.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [Spotto account](https://www.spotto.io/developers) and obtain tokens by following [this guide](https://www.spotto.io/developers/using-the-spotto-api).\n  x-ballerina-display:\n    label: Spotto\n    iconPath: \"icon.png\"\n  version: 1.0.0\n  x-logo:\n    url: https://uploads-ssl.webflow.com/5e264918496ea05957137f62/5f39f489fb8e3e51d7d3cb23_brand%20combo%20black.svg\n    altText: Spotto logo\n    href: http://www.spotto.io\npaths:\n  /assets:\n    post:\n      tags:\n        - Assets\n      description: |-\n        Add one or more assets into the Spotto Asset registry. You can pass either a single object,\n        or an array of objects. If you already know the ID of one or more tags that will be used\n        to identify this asset, you can add them to the `tagIds` array.\n      operationId: PostAssets\n      parameters: []\n      requestBody:\n        description: PostAssets request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostAssetsRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostAssetsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostAssetsErrorResponse'\n    get:\n      tags:\n        - Assets\n      description: |-\n        Get the list of assets that belong to your account. This request will only return the first 20 assets,\n        unless otherwise specified using the `pagination` parameters below. To enrich the response with\n        additional data such as tag identifiers, location state and created/updated timestamps, check out\n        the `embed` parameter.\n      operationId: GetAssets\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: ids\n          in: query\n          description: Lookup specific assets by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: tagIds\n          in: query\n          description: Lookup assets with specific tag IDs e.g. Beacon MAC addresses and RFID EPC codes.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hasTags\n          in: query\n          description: Only return assets that have tags registered.\n          required: false\n          schema:\n            type: boolean\n        - name: archived\n          in: query\n          description: Return deleted assets, the default is false.\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with `sortOrder`, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SearchableSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: search\n          in: query\n          description: Search query string, for lucene based full text search.\n          required: false\n          schema:\n            type: string\n        - name: searchFuzzy\n          in: query\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n          required: false\n          schema:\n            type: boolean\n        - name: searchFields\n          in: query\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AssetSearchField'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional asset information:\n\n            - **meta** includes basic CRUD status information.\n            - **tags** includes the tag IDs connected to this asset.\n            - **lastLocation** includes the last known time and location the asset was seen.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/AssetEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAssetsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /assets/{id}:\n    patch:\n      tags:\n        - Assets\n      description: |-\n        To update asset information, we utilise a PATCH request to support partial updates.\n        This enables any number of fields to be updated in a single request.\n      operationId: UpdateAsset\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateAsset request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAssetRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAssetResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateAssetErrorResponse'\n    get:\n      tags:\n        - Assets\n      description: |-\n        Get the detailed information of a particular asset. Unlike the [GetAssets](/#operation/GetAssets) request,\n        this automatically attaches location state information, tag identifiers and created/updated timestamps.\n      operationId: GetAsset\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAssetResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /assets/{id}/location:\n    get:\n      tags:\n        - Assets\n      description: |-\n        Fetch the last location of a given asset. This is essentially the same as the [GetAsset](/#operation/GetAsset) request,\n        however is optimised to return faster without resolving the additional information.\n      operationId: GetAssetLastLocation\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAssetLastLocationResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /events:\n    get:\n      tags:\n        - Events\n      description: |-\n        Get the list of all events for your organisations. This request will only\n        return the first 20 events, unless otherwise specified using the pagination\n        parameters below. To enrich the response with the names of any connected entities,\n        check out the `embed` parameter.\n\n        ⚠️ **Warning**: Embedding the names of entities significantly impacts query time if the\n        `limit` is adjusted to return large quantities of events.\n      operationId: GetEvents\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: readers\n          in: query\n          description: Lookup events for specific readers by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: locations\n          in: query\n          description: Lookup events for specific locations by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: assets\n          in: query\n          description: Lookup events for specific assets by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: type\n          in: query\n          description: Lookup events for specific event types, e.g. only show Reader Online/Offline events.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/EventType'\n        - name: timeFrom\n          in: query\n          description: |-\n            Filter events from a given timestamp. It will yield events up until the\n            current server time, unless otherwise specified by `timeTo`.\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: timeTo\n          in: query\n          description: |-\n            Filter events until a given timestamp. It will yield all events prior to the specified time,\n            unless otherwise specified by `timeFrom`.\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetEventsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /integrations/mqtt:\n    get:\n      tags:\n        - Integrations\n      description: |-\n        Get the credentials required to connect to the Spotto MQTT broker.\n        There is only a single set of credentials for your account, however you may connect\n        many MQTT clients by using the same username/password.\n\n        Your MQTT credentials should be enabled by default, but if for any reason the request\n        returns without credentials, [get in touch](https://www.spotto.io/contact) and we'll get you online.\n      operationId: GetMQTTSettings\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MQTTSettings'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /organisations/levels:\n    post:\n      tags:\n        - Levels\n      description: |-\n        Adds a single level to your account. Levels allow locations to be categorised and helps\n        Readers better assign locations to assets, especially when readers between floors are\n        competing for the best signal.\n      operationId: PostLevel\n      parameters: []\n      requestBody:\n        description: PostLevel request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostLevelRequest'\n        required: true\n      responses:\n        '201':\n          description: 201 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostLevelResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    put:\n      tags:\n        - Levels\n      description: |-\n        Updates the entire list of levels in your account. Levels allow locations to be categorised and helps\n        Readers better assign locations to assets, especially when readers between floors are\n        competing for the best signal.\n\n        ⚠️ **Warning**: This will overwrite the existing list of Levels, so make sure that you're starting with\n        the current list of Levels, using the [GetLevels](/#operation/GetLevels) request.\n      operationId: PutLevels\n      parameters: []\n      requestBody:\n        description: PutLevels request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutLevelsRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PutLevelsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Levels\n      description: |-\n        Gets the list of levels connected to your organisation.\n        Levels allow locations to be categorised and helps Readers better assign locations to assets,\n        especially when readers between floors are competing for the best signal.\n      operationId: GetLevels\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetLevelsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /locations:\n    post:\n      tags:\n        - Locations\n      description: |-\n        Add one or more locations into the Spotto Location registry. You can pass either a single object,\n        or an array of objects. If you already know the ID of one or more tags that will be used\n        to identify this location, you can add them to the `tagIds` array.\n      operationId: PostLocations\n      parameters: []\n      requestBody:\n        description: PostLocations request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostLocationsRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostLocationsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostLocationsErrorResponse'\n    get:\n      tags:\n        - Locations\n      description: |-\n        Get the list of locations that belong to your account. This request will only return the first 20 locations,\n        unless otherwise specified using the `pagination` parameters below. To enrich the response with\n        additional data such as tag identifiers, connected readers and created/updated timestamps, check out\n        the `embed` parameter.\n      operationId: GetLocations\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: ids\n          in: query\n          description: Lookup specific locations by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: tagIds\n          in: query\n          description: Lookup locations with specific tag IDs e.g. Beacon MAC addresses and RFID EPC codes.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: levels\n          in: query\n          description: Lookup locations at specific floor levels, e.g. Ground and Level 1 ONLY.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hasTags\n          in: query\n          description: Only return locations that have tags registered.\n          required: false\n          schema:\n            type: boolean\n        - name: hasReaders\n          in: query\n          description: Only return locations that have readers attached.\n          required: false\n          schema:\n            type: boolean\n        - name: setupComplete\n          in: query\n          description: Only return locations that either have tags OR readers attached\n          required: false\n          schema:\n            type: boolean\n        - name: archived\n          in: query\n          description: Return deleted locations, the default is false.\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with `sortOrder`, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SearchableSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: search\n          in: query\n          description: Search query string, for lucene based full text search.\n          required: false\n          schema:\n            type: string\n        - name: searchFuzzy\n          in: query\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n          required: false\n          schema:\n            type: boolean\n        - name: searchFields\n          in: query\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/LocationSearchField'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional location information:\n\n            - **meta** includes basic CRUD status information.\n            - **tags** includes the tag IDs connected to this location.\n            - **readers** includes any readers configured at the given location.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/LocationEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetLocationsResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /locations/{id}:\n    patch:\n      tags:\n        - Locations\n      description: |-\n        To update location information, we utilise a PATCH request to support partial updates.\n        This enables any number of fields to be updated in a single request.\n      operationId: UpdateLocation\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateLocation request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateLocationRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetLocationResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateLocationErrorResponse'\n    get:\n      tags:\n        - Locations\n      description: |-\n        Get the detailed information of a particular location. Unlike the [GetLocations](/#operation/GetLocations) request,\n        this automatically attaches tag identifiers, any connected readers and created/updated timestamps.\n      operationId: GetLocation\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetLocationResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /locations/{id}/inventory:\n    get:\n      tags:\n        - Locations\n      description: |-\n        Fetches the list of assets that were last seen at this location. Use the timestamps against each item\n        in the response to determine if the asset is still being seen at this location.\n      operationId: GetLocationInventory\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetLocationInventoryResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /readers:\n    post:\n      tags:\n        - Readers\n      description: |-\n        Add one or more readers into the Spotto Reader registry. You can pass either a single object,\n        or an array of objects. Adding readers into the system requires a bit more information than\n        Assets or Locations. See below for more details.\n      operationId: PostReaders\n      parameters: []\n      requestBody:\n        description: PostReaders request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostReadersRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostReadersResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Readers\n      description: |-\n        Get the list of readers that belong to your account. This request will only return the first 20 readers,\n        unless otherwise specified using the `pagination` parameters below. To enrich the response with\n        additional data such as reader state information and created/updated timestamps, check out\n        the `embed` parameter.\n      operationId: GetReaders\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: ids\n          in: query\n          description: Lookup specific readers by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: locationIds\n          in: query\n          description: Lookup readers that are positioned at specific location IDs\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: deviceIds\n          in: query\n          description: |-\n            Lookup specific readers by passing an array of device IDs.\n            These are typically the MAC address of the reader.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: types\n          in: query\n          description: Filter based on the reader behavioural type.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ReaderType'\n        - name: deviceTypes\n          in: query\n          description: Lookup readers belonging to specific device types.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/DeviceType'\n        - name: archived\n          in: query\n          description: Return deleted readers, the default is false.\n          required: false\n          schema:\n            type: boolean\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with `sortOrder`, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SearchableSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: search\n          in: query\n          description: Search query string, for Lucene based full text search.\n          required: false\n          schema:\n            type: string\n        - name: searchFuzzy\n          in: query\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n          required: false\n          schema:\n            type: boolean\n        - name: searchFields\n          in: query\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ReaderSearchField'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional reader information:\n\n            - **meta** includes basic CRUD status information.\n            - **status** includes dynamic status information about the reader such as\n            the time it came online and when we last heard from it.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ReaderEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReadersResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /readers/{id}:\n    get:\n      tags:\n        - Readers\n      description: |-\n        Get the detailed information of a particular reader. Unlike the [GetReaders](/#operation/GetReaders) request,\n        this automatically attaches reader state information and created/updated timestamps.\n      operationId: GetReader\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReaderResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    patch:\n      tags:\n        - Readers\n      description: |-\n        To update reader information, we utilise a PATCH request to support partial updates.\n        This enables any number of fields to be updated in a single request.\n      operationId: UpdateReader\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateReader request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateReaderRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReaderResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /readers/{id}/inventory:\n    get:\n      tags:\n        - Readers\n      description: |-\n        Fetches the list of assets that were last seen by this reader. Use the timestamps against each item\n        in the response to determine if the asset is still being seen by this reader. You can pass in an optional\n        query to set the threshold for how recent assets must be seen to be included in the inventory.\n      operationId: GetReaderInventory\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n        - name: windowSize\n          in: query\n          description: Time in seconds to consider assets to be within the readers inventory\n          required: false\n          schema:\n            type: number\n            format: float\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReaderInventoryResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /readers/{id}/status:\n    get:\n      tags:\n        - Readers\n      description: |-\n        Fetch the status of a given reader. This is essentially the same as the [GetReader](/#operation/GetReader) request,\n        however is optimised to return faster without resolving the additional information.\n      operationId: GetReaderStatus\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReaderStatusResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /roles:\n    get:\n      tags:\n        - Roles\n      description: |-\n        Get the list of roles that belong to your account. This request will return all roles, without pagination.\n        It will typically only return the default roles that your account has access e.g. if you are 'Admin' it will\n        return 'Admin', 'Power User' and 'User'. If your account has custom roles it will return these instead.\n        [Get in touch](https://spotto.io/contact) if you need custom fine grained access control for your account.\n        To enrich the response with additional data such as created/updated timestamps, check out the `embed` parameter.\n      operationId: GetRoles\n      parameters:\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with *sortOrder*, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/StandardSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with *sort* to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional user information:\n\n            **meta** includes basic CRUD status information.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/RoleEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRolesResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /triggers:\n    post:\n      tags:\n        - Triggers\n      description: |-\n        Add one or more triggers into the Spotto Trigger registry. You can pass either a single object,\n        or an array of objects. Triggers allow people and systems outside of Spotto to be notified when\n        something significant occurs in Spotto. We call these significant state changes **Events**\n        (see [GetEvents](/#operation/GetEvents)) that we can hook into using Triggers. Adding a trigger\n        requires us to choose which Event type we want to respond to. Each event type will have a different\n        set of rules we can apply. These are explained below:\n\n        - **WentOffline**: Spotto hasn't heard from a reader in a while so is transitioned to offline.\n        - **WentOnline**: Spotto heard from a reader that hadn't reported in a while so was transitioned to online.\n        - **ArrivedAt**: An asset moved to a specific location or group of locations.\n        - **Moved**: An asset moved to any location.\n\n        Each trigger will have `subjectRules` which allow us to filter the subject of the event either by name or ID.\n        Matching on name uses a case insensitive regular expression so we can match on multiple objects that share\n        similar names e.g. 'chair' could match names 'Wheelchair', 'M1 Shower Chair'.\n        The subject of **WentOffline** and **WentOnline** events are always the Reader (that's turning online/offline).\n        The subject of **ArrivedAt** and **Moved** can either be an Asset, or a ROVING reader moving locations.\n\n        **ArrivedAt** triggers also call for `locationRules` which allow us to specify either the name or ID of locations.\n        These operate in the same way as `subjectRules` and allow us to filter the range of locations that cause the trigger to fire.\n\n        We must also specify `actions` that fire when all the conditions are satisfied. We can add multiple actions to a trigger.\n      operationId: PostTriggers\n      parameters: []\n      requestBody:\n        description: PostTriggers request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostTriggersRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostTriggersResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Triggers\n      description: |-\n        Get the list of triggers that belong to your account. This request will only return the first 20 triggers,\n        unless otherwise specified using the `pagination` parameters below. To enrich the response with\n        additional data such as the created/updated timestamps, check out the `embed` parameter.\n      operationId: GetTriggers\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: ids\n          in: query\n          description: Lookup specific triggers by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: enabled\n          in: query\n          description: Lookup triggers that are only enabled or disabled.\n          required: false\n          schema:\n            type: boolean\n        - name: type\n          in: query\n          description: Filter based on the trigger type.\n          required: false\n          schema:\n            $ref: '#/components/schemas/TriggerType'\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with `sortOrder`, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/StandardSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional trigger information:\n            - **meta** includes basic CRUD status information.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/TriggerEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTriggersResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /triggers/{id}:\n    delete:\n      tags:\n        - Triggers\n      description: |-\n        Unlike a number of the other requests, triggers does not have an impact on the\n        event log so we allow the permanent deletion of triggers. It takes no query parameters\n        or body, and returns with the standard REST deletion response of an empty object.\n      operationId: DeleteTrigger\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Triggers\n      description: |-\n        Get the detailed information of a particular trigger. Unlike the [GetTriggers](/#operation/GetTriggers)\n        request, this automatically attaches the created/updated timestamps.\n      operationId: GetTrigger\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTriggerResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    patch:\n      tags:\n        - Triggers\n      description: |-\n        To update trigger information, we utilise a PATCH request to support partial updates.\n        This enables any number of fields to be updated in a single request.\n      operationId: UpdateTrigger\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateTrigger request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateTriggerRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTriggerResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /users:\n    post:\n      tags:\n        - Users\n      description: |-\n        Add one or more users into the Spotto User registry. You can only send a single object at a time\n        as there a number of provisioning steps that must occur per user.\n\n        You can add **EXTERNAL** users to create additional API users of varying access levels by setting the `role`.\n        **EXTERNAL** users cannot access Spotto applications and only have access to the Spotto REST API.\n\n        **INTERNAL** users have access to Spotto applications and require an email address for logging in.\n        A random password will be generated and sent to the elected address, unless a custom password is specified.\n        **INTERNAL** users cannot access the Spotto API, instead an **EXTERNAL** user must be created.\n      operationId: PostUser\n      parameters: []\n      requestBody:\n        description: PostUser request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Users\n      description: |-\n        Get the list of users that belong to your account. This request will only return the first 20 users,\n        unless otherwise specified using the `pagination` parameters below. To enrich the response with\n        additional data such as the created/updated timestamps, check out the `embed` parameter.\n      operationId: GetUsers\n      parameters:\n        - name: page\n          in: query\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: limit\n          in: query\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n          required: false\n          schema:\n            type: number\n            format: float\n        - name: ids\n          in: query\n          description: Lookup specific users by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: role\n          in: query\n          description: Lookup users belonging to specific roles by passing an array of valid Spotto IDs.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: type\n          in: query\n          description: Lookup only internal or external API users.\n          required: false\n          schema:\n            $ref: '#/components/schemas/UserType'\n        - name: sort\n          in: query\n          description: |-\n            **Sorting:** Which field the results are to be sorted by.\n            Use in combination with `sortOrder`, the default is ascending.\n          required: false\n          schema:\n            $ref: '#/components/schemas/StandardSortFields'\n        - name: sortOrder\n          in: query\n          description: |-\n            **Sorting:** Whether to sort the results in ascending or descending order.\n            Use in combination with `sort` to determine the field this is acting on.\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrders'\n        - name: embed\n          in: query\n          description: |-\n            Attach additional user information:\n            - **meta** includes basic CRUD status information.\n          style: form\n          explode: false\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/UserEmbedField'\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUsersResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /users/{id}:\n    delete:\n      tags:\n        - Users\n      description: |-\n        Unlike a number of the other requests, users do not have an impact on the\n        event log so we allow the permanent deletion of users. It takes no query parameters\n        or body, and returns with the standard REST deletion response of an empty object.\n      operationId: DeleteUser\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    get:\n      tags:\n        - Users\n      description: |-\n        Get the detailed information of a particular user. Unlike the [GetUsers](/#operation/GetUsers) request,\n        this automatically attaches the created/updated timestamps.\n      operationId: GetUser\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n        - name: withKey\n          in: query\n          description: |-\n            If you have the API admin permissions you can view the API key\n            of external users.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n    patch:\n      tags:\n        - Users\n      description: |-\n        To update user information, we utilise a PATCH request to support partial updates.\n        This enables any number of fields to be updated in a single request.\n      operationId: UpdateUser\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateUser request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\n  /users/{id}/key:\n    get:\n      tags:\n        - Users\n      description: Access the API key for a specific **EXTERNAL** user. This request takes no query parameters.\n      operationId: GetKey\n      parameters:\n        - name: id\n          in: path\n          description: 'Spotto ID for this object, should look something like this: `6161acddc5a257c8c7d6b60e`'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetKeyResponse'\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultError'\ncomponents:\n  schemas:\n    PostAssetRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the new asset, try to be descriptive to make it easy for people find it when searching.\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: Array of tag identifiers, these will typically be BLE tag MAC addresses e.g. 00:11:22:33:44:55.\n      required:\n        - name\n    PostAssetsRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/PostAssetRequest'\n    IEntityMeta:\n      type: object\n      properties:\n        created:\n          type: number\n          format: float\n          description: Created timestamp\n        updated:\n          type: number\n          format: float\n          description: Last updated timestamp\n        deleted:\n          type: number\n          format: float\n          description: Deletion timestamp\n      required:\n        - created\n      description: Metadata, holding important timestamps of this object's lifecycle.\n    ILastLocation:\n      type: object\n      properties:\n        firstSeen:\n          type: number\n          format: float\n          description: When the asset was first seen at this location.\n        lastSeen:\n          type: number\n          format: float\n          description: When the asset was last seen at this location.\n        id:\n          type: string\n          description: Unique Spotto ID of this object.\n        name:\n          type: string\n          description: Human readable name of this object.\n      required:\n        - firstSeen\n        - lastSeen\n        - id\n        - name\n    GetAssetResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID of this Asset.\n        name:\n          type: string\n          description: 'Human readable asset name NOTE: We do not enforce unique names for assets, instead we rely on the `id` for uniqueness.'\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: List of connected tag identifiers, these will typically be  BLE tag MAC addresses e.g. 00:11:22:33:44:55.\n        score:\n          type: number\n          format: float\n          description: Lucene based search score, added as an optional meta field when searching.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n        lastLocation:\n          $ref: '#/components/schemas/ILastLocation'\n      required:\n        - id\n        - name\n    PostAssetsResponse:\n      type: object\n      properties:\n        inserted:\n          type: number\n          format: float\n          description: Total number of records that were inserted.\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetAssetResponse'\n          description: The list of inserted items.\n      required:\n        - inserted\n        - items\n    DefaultError:\n      type: object\n      properties:\n        message:\n          type: string\n      required:\n        - message\n    TagsExistConflict:\n      type: object\n      properties:\n        tagId:\n          type: string\n          description: Tag ID causing the conflict\n        type:\n          type: string\n          enum:\n            - LOCATION\n            - ASSET\n          description: Type of entity the tag ID exists on\n        id:\n          type: string\n          description: ID of the entity the tag ID exists on\n      required:\n        - tagId\n        - type\n        - id\n      description: A single conflict with a new tag ID existing on an existing entity\n    TagsExistError:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - TagsExistError\n          description: Type\n        message:\n          type: string\n          description: Message\n        conflicts:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagsExistConflict'\n          description: Conflicts\n      required:\n        - type\n        - message\n        - conflicts\n      description: Error structure for revealing tag ID conflicts\n    TagsDuplicatedConflict:\n      type: object\n      properties:\n        tagId:\n          type: string\n          description: Tag ID causing the conflict\n        index:\n          type: number\n          format: float\n          description: Index in this request the tag ID was first found\n      required:\n        - tagId\n        - index\n      description: A single conflict with a new tag ID existing on a previous item in the request\n    TagsDuplicatedError:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - TagsDuplicatedError\n          description: Type\n        message:\n          type: string\n          description: Message\n        conflicts:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagsDuplicatedConflict'\n          description: Conflicts\n      required:\n        - type\n        - message\n        - conflicts\n      description: Error structure for revealing tag ID conflicts within the request\n    TagErrorInList:\n      type: object\n      properties:\n        index:\n          type: number\n          format: float\n          description: Index within the request that errors occurred\n        errors:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/TagsExistError'\n              - $ref: '#/components/schemas/TagsDuplicatedError'\n            discriminator:\n              propertyName: type\n              mapping:\n                TagsExistError: '#/components/schemas/TagsExistError'\n                TagsDuplicatedError: '#/components/schemas/TagsDuplicatedError'\n          description: List of errors for the asset at the given index of the request body\n      required:\n        - index\n        - errors\n    PostAssetsError:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagErrorInList'\n        message:\n          type: string\n      required:\n        - data\n        - message\n    PostAssetsErrorResponse:\n      oneOf:\n        - $ref: '#/components/schemas/DefaultError'\n        - $ref: '#/components/schemas/PostAssetsError'\n    StandardSortFields:\n      type: string\n      enum:\n        - name\n        - updated\n        - created\n      description: Common sort fields across most GET endpoints\n    SearchableSortFields:\n      oneOf:\n        - $ref: '#/components/schemas/StandardSortFields'\n        - type: string\n          enum:\n            - relevancy\n    SortOrders:\n      type: string\n      enum:\n        - asc\n        - desc\n      description: Sort orders - ascending and descending\n    AssetSearchField:\n      type: string\n      enum:\n        - name\n        - tagIds\n    AssetEmbedField:\n      type: string\n      enum:\n        - meta\n        - tagIds\n        - lastLocation\n    GetAssetsQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        ids:\n          type: array\n          items:\n            type: string\n          description: Lookup specific assets by passing an array of valid Spotto IDs.\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: Lookup assets with specific tag IDs e.g. Beacon MAC addresses and RFID EPC codes.\n        hasTags:\n          type: boolean\n          description: Only return assets that have tags registered.\n        archived:\n          type: boolean\n          description: Return deleted assets, the default is false.\n        sort:\n          $ref: '#/components/schemas/SearchableSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        search:\n          type: string\n          description: Search query string, for lucene based full text search.\n        searchFuzzy:\n          type: boolean\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n        searchFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetSearchField'\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetEmbedField'\n          description: |-\n            Attach additional asset information:\n\n            - **meta** includes basic CRUD status information.\n            - **tags** includes the tag IDs connected to this asset.\n            - **lastLocation** includes the last known time and location the asset was seen.\n    GetAssetsResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetAssetsQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetAssetResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    UpdateAssetRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Update the name of the asset, perhaps because of a typo or to be more descriptive.\n        archived:\n          type: boolean\n          description: |-\n            Setting the archived status to true hides the asset from view, you can reveal\n            archived assets by using the [GetAssets](/#operation/GetAssets) request.\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: New list of tag identifiers, perhaps adding a new tag if the original tag is low on battery.\n    UpdateAssetError:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/TagsExistError'\n        message:\n          type: string\n      required:\n        - data\n        - message\n    UpdateAssetErrorResponse:\n      oneOf:\n        - $ref: '#/components/schemas/DefaultError'\n        - $ref: '#/components/schemas/UpdateAssetError'\n    GetAssetLastLocationResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID of this Asset.\n        lastLocation:\n          $ref: '#/components/schemas/ILastLocation'\n          nullable: true\n      required:\n        - id\n        - lastLocation\n    EventType:\n      type: string\n      enum:\n        - ReaderArrived\n        - ReaderExited\n        - Arrived\n        - ExplicitArrived\n        - Exited\n        - ReaderOnline\n        - ReaderOffline\n    GetEventsQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        readers:\n          type: array\n          items:\n            type: string\n          description: Lookup events for specific readers by passing an array of valid Spotto IDs.\n        locations:\n          type: array\n          items:\n            type: string\n          description: Lookup events for specific locations by passing an array of valid Spotto IDs.\n        assets:\n          type: array\n          items:\n            type: string\n          description: Lookup events for specific assets by passing an array of valid Spotto IDs.\n        type:\n          type: array\n          items:\n            $ref: '#/components/schemas/EventType'\n          description: Lookup events for specific event types, e.g. only show Reader Online/Offline events.\n        timeFrom:\n          type: number\n          format: float\n          description: |-\n            Filter events from a given timestamp. It will yield events up until the\n            current server time, unless otherwise specified by `timeTo`.\n        timeTo:\n          type: number\n          format: float\n          description: |-\n            Filter events until a given timestamp. It will yield all events prior to the specified time,\n            unless otherwise specified by `timeFrom`.\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n    IEmbeddedEntity:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique Spotto ID of this object.\n        name:\n          type: string\n          description: Human readable name of this object.\n      required:\n        - id\n        - name\n    GetEventResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID of this Event.\n        timestamp:\n          type: number\n          format: float\n          description: Unix numeric timestamp (milliseconds) of when the event was recorded.\n        type:\n          $ref: '#/components/schemas/EventType'\n        asset:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        location:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        reader:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n      required:\n        - id\n        - timestamp\n        - type\n    GetEventsResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetEventsQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetEventResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    MQTTEnabledWithDetails:\n      type: object\n      properties:\n        password:\n          type: string\n          description: Password for accessing the Spotto MQTT broker.\n        host:\n          type: string\n          description: Host URL of Spotto MQTT broker.\n        rootTopic:\n          type: string\n          description: MQTT Topic that will subscribe to all events for this organisation.\n        enabled:\n          type: boolean\n          enum:\n            - true\n          description: Enabled\n        username:\n          type: string\n          description: Username for accessing the Spotto MQTT broker.\n      required:\n        - password\n        - host\n        - rootTopic\n        - enabled\n        - username\n      description: |-\n        Extends the base shape returned in the integrations list with\n        additional information about the integration.\n    MQTTDisabled:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          enum:\n            - false\n          description: Enabled\n      required:\n        - enabled\n      description: '==== INTEGRATIONS ===='\n    MQTTSettings:\n      oneOf:\n        - $ref: '#/components/schemas/MQTTEnabledWithDetails'\n        - $ref: '#/components/schemas/MQTTDisabled'\n    PostLevelRequest:\n      type: object\n      properties:\n        level:\n          type: string\n          description: Name of the new level to be inserted.\n      required:\n        - level\n    PostLevelResponse:\n      type: object\n    PutLevelsRequest:\n      type: object\n      properties:\n        levels:\n          type: array\n          items:\n            type: string\n          description: New list of levels to save against the account.\n      required:\n        - levels\n    PutLevelsResponse:\n      type: object\n      properties:\n        levels:\n          type: array\n          items:\n            type: string\n          description: The new list of levels for this organisation.\n      required:\n        - levels\n    GetLevelsResponse:\n      type: object\n      properties:\n        levels:\n          type: array\n          items:\n            type: string\n          description: List of levels saved against the account.\n      required:\n        - levels\n    PostLocationsRequest:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n            description: Name of the new location, try to be descriptive to make it easy for people find it when searching.\n          level:\n            type: string\n            description: Attach a building level to the location if appropriate, this should match an existing level from [GetLevels](/#operation/GetLevels)\n          tagIds:\n            type: array\n            items:\n              type: string\n            description: |-\n              If this location can be sensed by a mobile reader, you can add identifiers so it can be seen.\n              It accepts an array of tag identifiers, these will typically be BLE tag MAC addresses e.g. 00:11:22:33:44:55.\n          address:\n            type: string\n            description: ⚠️ Experimental - You can assign an address to a Location however this is not used in any Spotto interfaces\n          geoLocation:\n            type: string\n            enum:\n              - GeoJSON\n            description: |-\n              ⚠️ Experimental - You can assign coordinates to a Location however this is not used in any Spotto interfaces.\n              For brevity this option has been set to a string. Any valid GeoJSON object\n              will be accepted for this field. Check https://geojson.org/ for details.\n        required:\n          - name\n    GetLocationResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID of this Location.\n        name:\n          type: string\n          description: 'Human readable location name NOTE: We do not enforce unique names, instead relying on `id` for uniqueness.'\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: List of connected tag identifiers, these will typically be  BLE tag MAC addresses e.g. 00:11:22:33:44:55.\n        readers:\n          type: array\n          items:\n            $ref: '#/components/schemas/IEmbeddedEntity'\n          description: List of readers configured at this location.\n        level:\n          type: string\n          description: The name of the building level the location is on. This should match an existing level from [GetLevels](/#operation/GetLevels).\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - id\n        - name\n    PostLocationsResponse:\n      type: object\n      properties:\n        inserted:\n          type: number\n          format: float\n          description: Total number of records that were inserted\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetLocationResponse'\n          description: The list of inserted items\n      required:\n        - inserted\n        - items\n    PostLocationsError:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/TagErrorInList'\n        message:\n          type: string\n      required:\n        - data\n        - message\n    PostLocationsErrorResponse:\n      oneOf:\n        - $ref: '#/components/schemas/DefaultError'\n        - $ref: '#/components/schemas/PostLocationsError'\n    LocationSearchField:\n      type: string\n      enum:\n        - name\n    LocationEmbedField:\n      type: string\n      enum:\n        - meta\n        - tagIds\n        - readers\n    GetLocationsQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        ids:\n          type: array\n          items:\n            type: string\n          description: Lookup specific locations by passing an array of valid Spotto IDs.\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: Lookup locations with specific tag IDs e.g. Beacon MAC addresses and RFID EPC codes.\n        levels:\n          type: array\n          items:\n            type: string\n          description: Lookup locations at specific floor levels, e.g. Ground and Level 1 ONLY.\n        hasTags:\n          type: boolean\n          description: Only return locations that have tags registered.\n        hasReaders:\n          type: boolean\n          description: Only return locations that have readers attached.\n        setupComplete:\n          type: boolean\n          description: Only return locations that either have tags OR readers attached\n        archived:\n          type: boolean\n          description: Return deleted locations, the default is false.\n        sort:\n          $ref: '#/components/schemas/SearchableSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        search:\n          type: string\n          description: Search query string, for lucene based full text search.\n        searchFuzzy:\n          type: boolean\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n        searchFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/LocationSearchField'\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/LocationEmbedField'\n          description: |-\n            Attach additional location information:\n\n            - **meta** includes basic CRUD status information.\n            - **tags** includes the tag IDs connected to this location.\n            - **readers** includes any readers configured at the given location.\n    GetLocationsResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetLocationsQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetLocationResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    UpdateLocationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Update the name of the location, perhaps because of a typo or to be more descriptive.\n        level:\n          type: string\n          description: Update the building level of the location. This should match an existing level from [GetLevels](/#operation/GetLevels).\n        tagIds:\n          type: array\n          items:\n            type: string\n          description: New list of tag identifiers, perhaps adding a new tag if the original tag is low on battery.\n        archived:\n          type: boolean\n          description: |-\n            Setting the archived status to true hides the location from view, you can reveal\n            archived assets by using the [GetLocations](/#operation/GetLocations) request.\n        address:\n          type: string\n          description: ⚠️ Experimental - You can edit a Locations address however this is not used in any Spotto interfaces.\n        geoLocation:\n          type: string\n          enum:\n            - GeoJSON\n          description: |-\n            ⚠️ Experimental - You can edit Location coordinates however this is not used in any Spotto interfaces.\n            NOTE: For brevity this option has been set to a string. Any valid GeoJSON object\n            will be accepted for this field. Check https://geojson.org/ for details.\n    UpdateLocationError:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/TagsExistError'\n        message:\n          type: string\n      required:\n        - data\n        - message\n    UpdateLocationErrorResponse:\n      oneOf:\n        - $ref: '#/components/schemas/DefaultError'\n        - $ref: '#/components/schemas/UpdateLocationError'\n    IInventoryItem:\n      type: object\n      properties:\n        firstSeen:\n          type: number\n          format: float\n          description: When the asset was first seen at this location.\n        lastSeen:\n          type: number\n          format: float\n          description: When the asset was last seen at this location.\n        id:\n          type: string\n          description: Unique Spotto ID of this object.\n        name:\n          type: string\n          description: Human readable name of this object.\n      required:\n        - firstSeen\n        - lastSeen\n        - id\n        - name\n    GetLocationInventoryResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/IInventoryItem'\n    ReaderType:\n      type: string\n      enum:\n        - FIXED\n        - ROVING\n        - VIRTUAL\n        - PORTAL\n      description: |-\n        The reader behaviour type:\n        - **FIXED** - regular non-moving readers.\n        - **ROVING** - readers that move around and look for location tags, assigning nearby assets to the locations it sees.\n        - **VIRTUAL** -  allow different antennas plugged into a reader to report as their own readers.\n        - **PORTAL** - similar to virtual but for differentiating 2 adjacent zones e.g. IN/OUT.\n    DeviceType:\n      type: string\n      enum:\n        - B1\n        - RF1A4\n        - RF1F\n        - HD1\n        - ZEBRA\n        - IMPINJ\n        - TURCK\n        - OTHER\n        - APPLICATION\n      description: |-\n        The physical reader device type:\n        - **B1** - Spotto B1 Bluetooth Reader.\n        - **RF1A4** - Spotto RF1A4 4 Port RFID Reader.\n        - **RF1F** - Spotto RF1F FEIG Reader.\n        - **HD1** - Spotto HD1 HID Reader.\n        - **ZEBRA** - Zebra RFID Reader.\n        - **IMPINJ** - Impinj RFID Reader.\n        - **TURCK** - Turck Handheld RFID Reader.\n        - **OTHER** - Custom Reader (BYO Device).\n        - **APPLICATION** - Spotto Detector Application.\n    IUpsertedLocation:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name\n        level:\n          type: string\n          description: Level\n      required:\n        - name\n      description: |-\n        If a location object is specified, a new location will be created and\n        added to the locations list.\n    INetworkRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: SSID of the network.\n        username:\n          type: string\n          description: Optional network username, this is only required for WPA2 Enterprise networks.\n        password:\n          type: string\n          description: Optional network password, this is not required for open networks.\n      required:\n        - name\n      description: WiFi network credentials.\n    IAntennaRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        port:\n          type: number\n          format: float\n        locationId:\n          type: string\n        location:\n          type: object\n          properties:\n            name:\n              type: string\n            level:\n              type: string\n          required:\n            - name\n      required:\n        - port\n    DefaultReaderRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |-\n            Name of the new reader, try to be descriptive to make it easy for\n            people find it when searching.\n            \u003cbr\u003e\n            This field is optional for **FIXED** readers, see *IFixedReaderRequest*.\n        type:\n          $ref: '#/components/schemas/ReaderType'\n        deviceType:\n          $ref: '#/components/schemas/DeviceType'\n        locationId:\n          type: string\n          description: locationId is used for specifying an already existing location.\n        location:\n          $ref: '#/components/schemas/IUpsertedLocation'\n        deviceId:\n          type: string\n          description: |-\n            Reader Device ID. This will typically be a MAC address e.g. *00:11:22:33:44:55*.\n            \u003cbr\u003e\n            It is only applicable to IoTX3 readers.\n        network:\n          $ref: '#/components/schemas/INetworkRequest'\n        saveNetwork:\n          type: boolean\n          description: |-\n            When this flag is true, it will save any provided WiFi details to the account.\n            It will be ignored if no networks are present.\n        antennas:\n          type: array\n          items:\n            $ref: '#/components/schemas/IAntennaRequest'\n          description: Additional antenna config. This is only applicable to VIRTUAL or PORTAL readers.\n      required:\n        - name\n        - type\n        - deviceType\n    IFixedReaderRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - FIXED\n        name:\n          type: string\n          description: |-\n            Name is optional for FIXED reader. This field is appended to the\n            location name separated by a ' - '.\n        deviceType:\n          $ref: '#/components/schemas/DeviceType'\n        locationId:\n          type: string\n          description: locationId is used for specifying an already existing location.\n        location:\n          $ref: '#/components/schemas/IUpsertedLocation'\n        deviceId:\n          type: string\n          description: |-\n            Reader Device ID. This will typically be a MAC address e.g. *00:11:22:33:44:55*.\n            \u003cbr\u003e\n            It is only applicable to IoTX3 readers.\n        network:\n          $ref: '#/components/schemas/INetworkRequest'\n        saveNetwork:\n          type: boolean\n          description: |-\n            When this flag is true, it will save any provided WiFi details to the account.\n            It will be ignored if no networks are present.\n        antennas:\n          type: array\n          items:\n            $ref: '#/components/schemas/IAntennaRequest'\n          description: Additional antenna config. This is only applicable to VIRTUAL or PORTAL readers.\n      required:\n        - type\n        - deviceType\n    PostReaderRequest:\n      oneOf:\n        - $ref: '#/components/schemas/DefaultReaderRequest'\n        - $ref: '#/components/schemas/IFixedReaderRequest'\n    PostReadersRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/PostReaderRequest'\n    IFixedReaderLocation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - FIXED\n        id:\n          type: string\n          description: Unique Spotto ID of this object.\n        name:\n          type: string\n          description: Human readable name of this object.\n      required:\n        - type\n        - id\n        - name\n    IRovingReaderLocation:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - ROVING\n        firstSeen:\n          type: number\n          format: float\n          description: First time the location was seen by this reader\n        lastSeen:\n          type: number\n          format: float\n          description: Last time the location was seen by this reader\n        id:\n          type: string\n          description: Unique Spotto ID of this object.\n        name:\n          type: string\n          description: Human readable name of this object.\n      required:\n        - type\n        - firstSeen\n        - lastSeen\n        - id\n        - name\n    ReaderLocation:\n      oneOf:\n        - $ref: '#/components/schemas/IFixedReaderLocation'\n        - $ref: '#/components/schemas/IRovingReaderLocation'\n      discriminator:\n        propertyName: type\n        mapping:\n          FIXED: '#/components/schemas/IFixedReaderLocation'\n          ROVING: '#/components/schemas/IRovingReaderLocation'\n      description: |-\n        Reader Locations can either be:\n\n        FIXED: Are static and don't have a timestamp\u003cbr\u003e\n        ROVING: Are dynamic and have a lastSeen timestamp\n    IReaderStatus:\n      type: object\n      properties:\n        online:\n          type: boolean\n          description: Whether or not the reader is currently online.\n        onlineTime:\n          type: number\n          format: float\n          description: Unix numeric timestamp (milliseconds) of when the reader came online.\n        lastReportedTime:\n          type: number\n          format: float\n          description: Unix numeric timestamp (milliseconds) of when the reader last reported.\n      required:\n        - online\n        - onlineTime\n        - lastReportedTime\n      description: |-\n        Reader online status information.\n\n        Note: Other IoT style status information will ultimately end up here\n        e.g. Temperature, WiFi signal, Battery level (for portable readers).\n    GetReaderResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique ID of this Reader.\n        name:\n          type: string\n          description: 'Human readable reader name NOTE: We do not enforce unique names, instead we rely on `id` for uniqueness.'\n        type:\n          $ref: '#/components/schemas/ReaderType'\n        deviceType:\n          $ref: '#/components/schemas/DeviceType'\n        deviceId:\n          type: string\n          description: Reader Device ID. This will typically be a MAC address e.g. 00:11:22:33:44:55.\n        endpoint:\n          type: string\n          description: |-\n            Endpoint this reader will POST reads to. This is only needed when manually setting\n            up a reader, or when using a BYO device.\n        network:\n          type: string\n          description: SSID of the network the reader is connected to, if any.\n        location:\n          $ref: '#/components/schemas/ReaderLocation'\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n        status:\n          $ref: '#/components/schemas/IReaderStatus'\n      required:\n        - id\n        - name\n        - type\n        - deviceType\n        - endpoint\n    PostReadersResponse:\n      type: object\n      properties:\n        inserted:\n          type: number\n          format: float\n          description: Total number of records that were inserted\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetReaderResponse'\n          description: The list of inserted items\n      required:\n        - inserted\n        - items\n    ReaderSearchField:\n      type: string\n      enum:\n        - name\n        - deviceId\n    ReaderEmbedField:\n      type: string\n      enum:\n        - meta\n        - status\n    GetReadersQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        ids:\n          type: array\n          items:\n            type: string\n          description: Lookup specific readers by passing an array of valid Spotto IDs.\n        locationIds:\n          type: array\n          items:\n            type: string\n          description: Lookup readers that are positioned at specific location IDs\n        deviceIds:\n          type: array\n          items:\n            type: string\n          description: |-\n            Lookup specific readers by passing an array of device IDs.\n            These are typically the MAC address of the reader.\n        types:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReaderType'\n          description: Filter based on the reader behavioural type.\n        deviceTypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/DeviceType'\n          description: Lookup readers belonging to specific device types.\n        archived:\n          type: boolean\n          description: Return deleted readers, the default is false.\n        sort:\n          $ref: '#/components/schemas/SearchableSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        search:\n          type: string\n          description: Search query string, for Lucene based full text search.\n        searchFuzzy:\n          type: boolean\n          description: |-\n            Whether or not to run the search in *fuzzy* mode. The level of fuzziness\n            depends on the character length of search terms:\n\n            - 1-2: Must match exactly.\n            - 3-5: Off by at most 1 character.\n            - 6+: Off by at most 2 characters.\n        searchFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReaderSearchField'\n          description: |-\n            Reduce the scope of fields to perform the search on.\n            When left blank it will search all of these fields.\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReaderEmbedField'\n          description: |-\n            Attach additional reader information:\n\n            - **meta** includes basic CRUD status information.\n            - **status** includes dynamic status information about the reader such as\n            the time it came online and when we last heard from it.\n    GetReadersResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetReadersQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetReaderResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    GetReaderInventoryResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/IInventoryItem'\n    UpdateReaderRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Update the name of the reader, perhaps because of a typo or to be more descriptive.\n        archived:\n          type: boolean\n          description: |-\n            Setting the archived status to true hides the reader from view, you can reveal\n            archived readers by using the [GetReaders](/#operation/GetReaders) request.\n        locationId:\n          type: string\n          description: locationId is used for specifying an already existing location.\n        location:\n          $ref: '#/components/schemas/IUpsertedLocation'\n        deviceId:\n          type: string\n          description: |-\n            Reader Device ID. This will typically be a MAC address e.g. *00:11:22:33:44:55*.\n            \u003cbr\u003e\n            It is only applicable to IoTX3 readers.\n        network:\n          $ref: '#/components/schemas/INetworkRequest'\n        saveNetwork:\n          type: boolean\n          description: |-\n            When this flag is true, it will save any provided WiFi details to the account.\n            It will be ignored if no networks are present.\n        antennas:\n          type: array\n          items:\n            $ref: '#/components/schemas/IAntennaRequest'\n          description: Additional antenna config. This is only applicable to VIRTUAL or PORTAL readers.\n    GetReaderStatusResponse:\n      type: object\n      properties:\n        location:\n          $ref: '#/components/schemas/IRovingReaderLocation'\n        status:\n          $ref: '#/components/schemas/IReaderStatus'\n      required:\n        - status\n    RoleEmbedField:\n      type: string\n      enum:\n        - meta\n    GetRolesQuery:\n      type: object\n      properties:\n        sort:\n          $ref: '#/components/schemas/StandardSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/RoleEmbedField'\n          description: |-\n            Attach additional user information:\n\n            **meta** includes basic CRUD status information.\n    GetRoleResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique Spotto ID of the role.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n        name:\n          type: string\n          description: Human readable name of the role.\n        description:\n          type: string\n          description: Short description of the role including the scope of access.\n        permissions:\n          type: array\n          items:\n            type: string\n          description: |-\n            List of permissions this role has access to, following\n            the entity:action pattern.\n        default:\n          type: boolean\n          description: Whether or not this role is a default system role, available to all organisations.\n      required:\n        - id\n        - name\n        - description\n        - permissions\n    GetRolesResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetRolesQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetRoleResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    MatchNameRule:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - MatchName\n        match:\n          type: string\n          description: Case insensitive name or substring to match on the event subject.\n      required:\n        - type\n        - match\n    StrictMatchIdRule:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - StrictMatchId\n        match:\n          type: string\n          description: Case sensitive exact Spotto ID of the event subject.\n      required:\n        - type\n        - match\n    Rule:\n      oneOf:\n        - $ref: '#/components/schemas/MatchNameRule'\n        - $ref: '#/components/schemas/StrictMatchIdRule'\n      discriminator:\n        propertyName: type\n        mapping:\n          MatchName: '#/components/schemas/MatchNameRule'\n          StrictMatchId: '#/components/schemas/StrictMatchIdRule'\n    WebhookAction:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Webhook\n        endpoint:\n          type: string\n          description: Endpoint URL to POST the event payload to.\n      required:\n        - type\n        - endpoint\n    MQTTAction:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - MQTT\n        topic:\n          type: string\n          description: Custom MQTT topic to publish the event payload to.\n      required:\n        - type\n        - topic\n    EmailAction:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Email\n        address:\n          type: string\n          description: Email address of the trigger recipient.\n      required:\n        - type\n        - address\n    Action:\n      oneOf:\n        - $ref: '#/components/schemas/WebhookAction'\n        - $ref: '#/components/schemas/MQTTAction'\n        - $ref: '#/components/schemas/EmailAction'\n      discriminator:\n        propertyName: type\n        mapping:\n          Webhook: '#/components/schemas/WebhookAction'\n          MQTT: '#/components/schemas/MQTTAction'\n          Email: '#/components/schemas/EmailAction'\n    PostArrivedAtTriggerRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - ArrivedAt\n          description: Type\n        locationRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Location rules filter the possible events that cause this\n            trigger to fire.\n        name:\n          type: string\n          description: |-\n            The name of the trigger, for easily identifying the trigger\n            and its purpose.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n      required:\n        - type\n        - locationRules\n        - name\n        - actions\n        - subjectRules\n      description: Asset or Reader moved in relation to selected locations\n    PostMovedTriggerRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Moved\n          description: Type\n        name:\n          type: string\n          description: |-\n            The name of the trigger, for easily identifying the trigger\n            and its purpose.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n      required:\n        - type\n        - name\n        - actions\n        - subjectRules\n      description: Asset or Reader moved anywhere (No location rules).\n    PostWentOnlineTriggerRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - WentOnline\n          description: Type\n        name:\n          type: string\n          description: |-\n            The name of the trigger, for easily identifying the trigger\n            and its purpose.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n      required:\n        - type\n        - name\n        - actions\n        - subjectRules\n      description: Reader went online after a given threshold.\n    PostWentOfflineTriggerRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - WentOffline\n          description: Type\n        name:\n          type: string\n          description: |-\n            The name of the trigger, for easily identifying the trigger\n            and its purpose.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n      required:\n        - type\n        - name\n        - actions\n        - subjectRules\n      description: Reader went online after a given threshold.\n    PostTriggerRequest:\n      oneOf:\n        - $ref: '#/components/schemas/PostArrivedAtTriggerRequest'\n        - $ref: '#/components/schemas/PostMovedTriggerRequest'\n        - $ref: '#/components/schemas/PostWentOnlineTriggerRequest'\n        - $ref: '#/components/schemas/PostWentOfflineTriggerRequest'\n      discriminator:\n        propertyName: type\n        mapping:\n          ArrivedAt: '#/components/schemas/PostArrivedAtTriggerRequest'\n          Moved: '#/components/schemas/PostMovedTriggerRequest'\n          WentOnline: '#/components/schemas/PostWentOnlineTriggerRequest'\n          WentOffline: '#/components/schemas/PostWentOfflineTriggerRequest'\n    PostTriggersRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/PostTriggerRequest'\n    GetArrivedAtTriggerResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - ArrivedAt\n          description: Type\n        locationRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Location rules filter the possible events that cause this\n            trigger to fire.\n        id:\n          type: string\n          description: Unique ID of the Trigger.\n        name:\n          type: string\n          description: |-\n            The human readable name of the trigger, for easily identifying the trigger\n            and its purpose.\n        enabled:\n          type: boolean\n          description: Status of the trigger, disabled triggers will not fire.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - locationRules\n        - id\n        - name\n        - enabled\n        - actions\n        - subjectRules\n      description: Asset or Reader moved in relation to selected locations\n    GetMovedTriggerResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Moved\n          description: Type\n        id:\n          type: string\n          description: Unique ID of the Trigger.\n        name:\n          type: string\n          description: |-\n            The human readable name of the trigger, for easily identifying the trigger\n            and its purpose.\n        enabled:\n          type: boolean\n          description: Status of the trigger, disabled triggers will not fire.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - id\n        - name\n        - enabled\n        - actions\n        - subjectRules\n      description: Asset or Reader moved anywhere (No location rules)\n    GetWentOnlineTriggerResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - WentOnline\n          description: Type\n        id:\n          type: string\n          description: Unique ID of the Trigger.\n        name:\n          type: string\n          description: |-\n            The human readable name of the trigger, for easily identifying the trigger\n            and its purpose.\n        enabled:\n          type: boolean\n          description: Status of the trigger, disabled triggers will not fire.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - id\n        - name\n        - enabled\n        - actions\n        - subjectRules\n      description: Reader went online after a given threshold\n    GetWentOfflineTriggerResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - WentOffline\n          description: Type\n        id:\n          type: string\n          description: Unique ID of the Trigger.\n        name:\n          type: string\n          description: |-\n            The human readable name of the trigger, for easily identifying the trigger\n            and its purpose.\n        enabled:\n          type: boolean\n          description: Status of the trigger, disabled triggers will not fire.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: The list of actions that fire for this trigger.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Subject rules filter the possible events that cause this\n            trigger to fire.\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - id\n        - name\n        - enabled\n        - actions\n        - subjectRules\n      description: Reader went online after a given threshold\n    GetTriggerResponse:\n      oneOf:\n        - $ref: '#/components/schemas/GetArrivedAtTriggerResponse'\n        - $ref: '#/components/schemas/GetMovedTriggerResponse'\n        - $ref: '#/components/schemas/GetWentOnlineTriggerResponse'\n        - $ref: '#/components/schemas/GetWentOfflineTriggerResponse'\n      discriminator:\n        propertyName: type\n        mapping:\n          ArrivedAt: '#/components/schemas/GetArrivedAtTriggerResponse'\n          Moved: '#/components/schemas/GetMovedTriggerResponse'\n          WentOnline: '#/components/schemas/GetWentOnlineTriggerResponse'\n          WentOffline: '#/components/schemas/GetWentOfflineTriggerResponse'\n    PostTriggersResponse:\n      type: object\n      properties:\n        inserted:\n          type: number\n          format: float\n          description: Total number of records that were inserted\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetTriggerResponse'\n          description: The list of inserted items\n      required:\n        - inserted\n        - items\n    TriggerType:\n      type: string\n      enum:\n        - ArrivedAt\n        - Moved\n        - WentOnline\n        - WentOffline\n      description: '==== TRIGGER TYPES ===='\n    TriggerEmbedField:\n      type: string\n      enum:\n        - meta\n    GetTriggersQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        ids:\n          type: array\n          items:\n            type: string\n          description: Lookup specific triggers by passing an array of valid Spotto IDs.\n        enabled:\n          type: boolean\n          description: Lookup triggers that are only enabled or disabled.\n        type:\n          $ref: '#/components/schemas/TriggerType'\n        sort:\n          $ref: '#/components/schemas/StandardSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/TriggerEmbedField'\n          description: |-\n            Attach additional trigger information:\n            - **meta** includes basic CRUD status information.\n    GetTriggersResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetTriggersQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetTriggerResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    DeleteResponse:\n      type: object\n      description: Standard deletion response is an empty object\n    UpdateTriggerRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |-\n            The human readable name of the trigger, for easily identifying the trigger\n            and its purpose.\n        enabled:\n          type: boolean\n          description: Change the status of the trigger, disabled triggers will not fire.\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n          description: |-\n            Change the actions that fire for this trigger, you must send the\n            entire array as part of the request. Use the [GetTrigger](/#operation/GetTrigger)\n            request to fetch the existing actions to prevent accidentally deleting any.\n        subjectRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Change the subject rules to filter the events that cause this\n            trigger to fire, you must send the entire array as part of\n            the request. Use the [GetTrigger](/#operation/GetTrigger)\n            request to fetch the existing subjectRules to prevent accidentally deleting any.\n        locationRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n          description: |-\n            Change the location rules to filter the events that cause this\n            trigger to fire, you must send the entire array as part of\n            the request. Use the [GetTrigger](/#operation/GetTrigger)\n            request to fetch the existing actions to prevent accidentally deleting any.\n\n            ⚠️ Warning: This is only allowed for ArrivedAt triggers.\n    PostExternalUserRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - EXTERNAL\n          description: User type for identifying external API users.\n        name:\n          type: string\n          description: The User's full name, or an identifier of the external API user.\n        role:\n          type: string\n          description: |-\n            The role ID the new user will be assigned. To fetch a list of available roles,\n            check out the [GetRoles](/#operation/GetRoles) request.\n      required:\n        - type\n        - name\n        - role\n    PostInternalUserRequest:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - INTERNAL\n          description: User type for identifying internal users.\n        email:\n          type: string\n          description: The User's unique email address. We send a welcome email including their password.\n        password:\n          type: string\n          description: |-\n            Optionally provide a custom password rather than have Spotto automatically generate one.\n            This will be forwarded to the new User's email address so that they can log into Spotto.\n        name:\n          type: string\n          description: The User's full name, or an identifier of the external API user.\n        role:\n          type: string\n          description: |-\n            The role ID the new user will be assigned. To fetch a list of available roles,\n            check out the [GetRoles](/#operation/GetRoles) request.\n      required:\n        - type\n        - email\n        - name\n        - role\n    PostUserRequest:\n      oneOf:\n        - $ref: '#/components/schemas/PostExternalUserRequest'\n        - $ref: '#/components/schemas/PostInternalUserRequest'\n      discriminator:\n        propertyName: type\n        mapping:\n          EXTERNAL: '#/components/schemas/PostExternalUserRequest'\n          INTERNAL: '#/components/schemas/PostInternalUserRequest'\n    GetExternalUserResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - EXTERNAL\n          description: User type for identifying external API users from internal users.\n        key:\n          type: string\n          description: The API key is returned when creating new **EXTERNAL** users, or where requested.\n        id:\n          type: string\n          description: Unique Spotto ID assigned to this User.\n        name:\n          type: string\n          description: |-\n            Human readable full name or identifier of the User.\n            NOTE: We do not enforce unique names, we instead rely on `id` for uniqueness.\n        role:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        organisation:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - id\n        - name\n        - role\n        - organisation\n    GetInternalUserResponse:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - INTERNAL\n          description: User type for identifying internal users from external API users.\n        email:\n          type: string\n          description: The User's unique email address.\n        id:\n          type: string\n          description: Unique Spotto ID assigned to this User.\n        name:\n          type: string\n          description: |-\n            Human readable full name or identifier of the User.\n            NOTE: We do not enforce unique names, we instead rely on `id` for uniqueness.\n        role:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        organisation:\n          $ref: '#/components/schemas/IEmbeddedEntity'\n        meta:\n          $ref: '#/components/schemas/IEntityMeta'\n      required:\n        - type\n        - email\n        - id\n        - name\n        - role\n        - organisation\n    GetUserResponse:\n      oneOf:\n        - $ref: '#/components/schemas/GetExternalUserResponse'\n        - $ref: '#/components/schemas/GetInternalUserResponse'\n      discriminator:\n        propertyName: type\n        mapping:\n          EXTERNAL: '#/components/schemas/GetExternalUserResponse'\n          INTERNAL: '#/components/schemas/GetInternalUserResponse'\n    UserType:\n      type: string\n      enum:\n        - INTERNAL\n        - EXTERNAL\n    UserEmbedField:\n      type: string\n      enum:\n        - meta\n    GetUsersQuery:\n      type: object\n      properties:\n        page:\n          type: number\n          format: float\n          description: |-\n            **Pagination:** What page of results, assuming the limit (defaulting to 20)\n            to start from. The default is page 0 (the first page of results).\n\n            e.g. With a limit of 20, page 1 gets us results 20-39 (with zero based indexing).\n        limit:\n          type: number\n          format: float\n          description: '**Pagination:** Max number of results to return in the request. The default is 20.'\n        ids:\n          type: array\n          items:\n            type: string\n          description: Lookup specific users by passing an array of valid Spotto IDs.\n        role:\n          type: array\n          items:\n            type: string\n          description: Lookup users belonging to specific roles by passing an array of valid Spotto IDs.\n        type:\n          $ref: '#/components/schemas/UserType'\n        sort:\n          $ref: '#/components/schemas/StandardSortFields'\n        sortOrder:\n          $ref: '#/components/schemas/SortOrders'\n        embed:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserEmbedField'\n          description: |-\n            Attach additional user information:\n            - **meta** includes basic CRUD status information.\n    GetUsersResponse:\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/GetUsersQuery'\n          nullable: true\n        total:\n          type: number\n          format: float\n          description: Total number of records that match the query (without pagination).\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetUserResponse'\n          description: |-\n            This is the list of paginated results, which will be an array of 20 items\n            or less, unless another limit was specified in the query params.\n      required:\n        - query\n        - total\n        - items\n    GetKeyResponse:\n      type: object\n      properties:\n        key:\n          type: string\n          description: |-\n            Access key for using the Spotto REST API. Insert this key into the `x-api-key`\n            header, then call any request in this spec, provided the user this key is associated\n            with has the correct permissions.\n      required:\n        - key\n    UpdateUserRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Change the User's full name, or name of the external API user.\n        role:\n          type: string\n          description: |-\n            Change the role ID assigned to a user. To fetch a list of available roles,\n            check out the [GetRoles](/#operation/GetRoles) request.\n        organisation:\n          type: string\n          description: |-\n            If you have super-admin permissions you can move users\n            between organisations.\n  securitySchemes:\n    SecurityHeader:\n      type: apiKey\n      in: header\n      name: x-api-key\n      description: |-\n        To authenticate API requests, Spotto uses a header based API key scheme. To gain access to the Spotto REST API,\n        simply set the `x-api-key` header to an API Key associated with your account. If you don't have an API key,\n        [follow this guide](https://www.spotto.io/developers/using-the-spotto-api) to get one.\n        Include the header in all API calls, otherwise you will receive a `403 Forbidden` response.\nsecurity:\n  - SecurityHeader: []\nservers:\n  - url: https://api.spotto.cloud\n    description: Spotto API Base URL\nexternalDocs:\n  url: http://www.spotto.io/developers\n  description: Back to the Spotto Developer Portal\n"
		}
	},
	"Error": "make ir: path \"/triggers\": get: responses: 200: contents: application/json: schema: field items: item: oneOf: collect variants: oneOf[0]: field actions: item: oneOf: discriminator: unable to map Email to #/components/schemas/EmailAction"
}