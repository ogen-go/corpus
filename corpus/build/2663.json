{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GRAPHISOFT/bimcloud-api"
		},
		"file": {
			"name": "2020.2.yaml",
			"path": "openapi/2020.2.yaml",
			"content": "openapi: 3.0.0\nservers:\n# Added by API Auto Mocking Plugin\n  - description: BIMcloud Manager\n    url: https://bimcloud.graphisoft.com\n  - description: BIMcoud Blob server\n    url: https://blobserver.graphisoft.com\ninfo:\n  description: |\n    BIMcloud API specifiaction.\n    See the provided example for detailed information.\n  version: \"1.0.0\"\n  title: BIMcloud API 2020.2 (alpha release)\ntags:\n  - name: PortalServer\n    description: |\n      User login, session, ticket handling and resource management APIs\n  - name: BlobServer\n    description: |\n      Blob server login/authentication APIs and file management APIs.\npaths:\n  # PORTAL SERVER SESSION APIS\n\n  /management/client/create-session:\n    post:\n      tags:\n        - PortalServer\n      description: Creates a new session for callee.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateSessionRequest'\n      responses:\n        200:\n          description: 'Creates a new session'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateSessionResponse'\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/ping-session:\n    post:\n      tags:\n        - PortalServer\n      description: Pings an already opened session to prevent expiration.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: The ID of the session to keep alive\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n      responses:\n        200:\n          description: 'Session lifetime extended.'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user-id:\n                    type: string\n                    example: d290f1ee-6c54-4b01-90e6-d701748f0852\n                    description: The ID of the user whose session got extended\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/close-session:\n    post:\n      tags:\n        - PortalServer\n      description: Closes the session.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: The ID of the session to close\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n      responses:\n        200:\n          description: Session has been successfully closed, if session with the provided id was found\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/ticket-generator/get-ticket:\n    post:\n      tags:\n        - PortalServer\n      description: |\n        Requests a ticket. The ticket is required for file operations.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetTicketRequest'\n      responses:\n        200:\n          description: |\n            Successful ticket request. When input parameter `format` is `base64`, the resonse content type will be\n            `application/json`, else it will be `application/octet-stream`. The preferred format is `base64`.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetTicketResponseBase64'\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/GetTicketResponseLengthPrefixedBuffer'\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  # PORTAL SERVER RESOURCE MANAGEMENT APIS\n\n  /management/client/get-resource:\n    get:\n      tags:\n        - PortalServer\n      description: |\n        Request a single resource by ID.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        - in: query\n          name: resource-id\n          schema:\n            type: string\n          description: The ID of the requested resource\n          example: 8b4989f6-8c31-12f9-1ae0-75b1da4142fc\n      responses:\n        200:\n          description: Successful get-resource request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetResourceResponse'\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/get-resources-by-criterion:\n    post:\n      tags:\n        - PortalServer\n      description: |\n        Requests an array of resources that match the supplied criterion object\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n      requestBody:\n        description: The criterion object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CriterionObject'\n      responses:\n        200:\n          description: Successful get-resource request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                    $ref: '#/components/schemas/GetResourceResponse'\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/insert-resource-group:\n    post:\n      tags:\n        - PortalServer\n      description: |\n        Creates a resrource group (folder) entity in the resource tree based on the supplied parameters\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        - in: query\n          name: parent-id\n          schema:\n            type: string\n          description: The ID of the parent resource group entity. The root entity's ID is `projectRoot`.\n          example: 8b4989f6-8c31-12f9-1ae0-75b1da4142fd\n      requestBody:\n        description: Resource group description\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  example: folder2\n                  description: The name of the resource group to be created\n                type:\n                  type: string\n                  pattern: resourceGroup\n                  example: resourceGroup\n                  description: The type of the resource to be created.\n      responses:\n        200:\n          description: Successful insert-resource-group request\n          content:\n            application/json:\n              schema:\n                type: string\n                example: 8b4989f6-8c31-12f9-1ae0-75b1da4142fc\n                description: The ID of the created resource group\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/delete-resource-group:\n    delete:\n      tags:\n        - PortalServer\n      description: |\n        Deletes an **empty** resrource group (folder) entity from the resource tree by ID.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        - in: query\n          name: resource-id\n          schema:\n            type: string\n          description: The ID of the resource group entity to be deleted.\n          example: 8b4989f6-8c31-12f9-1ae0-75b1da4142fc\n      responses:\n        200:\n          description: Successful delete-resource-group request\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n                description: Empty object.\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/delete-blob:\n    delete:\n      tags:\n        - PortalServer\n      description: |\n        Deletes a file entity from the resource tree by ID.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        - in: query\n          name: resource-id\n          schema:\n            type: string\n          description: The ID of the blob entity to be deleted.\n          example: 33E36B98-2758-4C17-83E5-69E93B8B87CB\n      responses:\n        200:\n          description: Successful delete-blob request\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n                description: Empty object.\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  /management/client/get-inherited-default-blob-server-id:\n    get:\n      tags:\n        - PortalServer\n      description: |\n        Requests the inherited default blob server ID of a specified resourceGroup (folder) entitiy\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          description: session-id returned by /management/client/create-session\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        - in: query\n          name: resource-group-id\n          schema:\n            type: string\n          description: The ID of the resource group entity. The root entity's ID is \"projectRoot\".\n          example: 8b4989f6-8c31-12f9-1ae0-75b1da4142fc\n      responses:\n        200:\n          description: The ID of the inherited default blob server associated with the supplied resrouceGroup.\n          content:\n            application/json:\n              schema:\n                type: string\n                example: d290f1ee-6c54-4b01-90e6-d701748f0853\n                format: uuid\n                description: The ID of inherited default host server\n        430:\n          description: 'Request errors'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalServerError'\n        503:\n          description: 'Server unavailable, retry the request later.'\n\n  # BLOB SERVER SESSION APIS\n\n  /session-service/1.0/create-session:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Creates a session on the BIMcloud Blob Server. Requires a ticket generated by the BIMcloud Portal server on\n        path `/management/client/ticket-generator/get-ticket`.\n      requestBody:\n        content:\n          application/vnd.graphisoft.teamwork.session-service-1.0.authentication-request-1.0+json:\n            schema:\n              $ref: '#/components/schemas/BlobServerAuthenticationRequest'\n      responses:\n        200:\n          description: Successful blob server create-session request\n          content:\n            application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerSessionResponse'\n        401:\n          description: |\n            The supplied ticket is incorrect. The returned error will be:\n            - `3` `AuthenticationFailed`\n          content:\n            application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerSessionResponse'\n        430:\n          description: Unsuccessful blob server create-session request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /session-service/1.0/get-session:\n    get:\n      tags:\n        - BlobServer\n      description: |\n        Requests information about an already existing session by ID.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the session\n      responses:\n        200:\n          description: Successful blob server get-session request\n          content:\n            application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.session-service-1.0.session-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerSessionResponse'\n        430:\n          description: Unsuccessful blob server get-session request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /session-service/1.0/close-session:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Closes the session on the BIMcloud blob server.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: the ID of the session to close\n      responses:\n        200:\n          description: Successful blob server close-session request\n        430:\n          description: Unsuccessful blob server close-session request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  # BLOB STORE BLOB SERVER UPLOAD APIS\n\n  /blob-store-service/1.0/begin-batch-upload:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Creates a batch upload session.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n\n        - in: query\n          name: description\n          schema:\n            type: string\n          example: This is the description of the batch upload session.\n          description: The description of the batch being uploaded. Any URL encoded text.\n      responses:\n        200:\n          description: Batch upload session successfully created.\n          content:\n            application/vnd.graphisoft.teamwork.blob-store-service-1.0.batch-upload-session-1.0+json:\n              schema:\n                type: object\n                properties:\n                    data-content-type:\n                      type: string\n                      example: application/vnd.graphisoft.teamwork.blob-store-service-1.0.batch-upload-session-1.0+json\n                    data:\n                      $ref: '#/components/schemas/BlobServerBatchUploadSessionResponse'\n        430:\n          description: Unsuccessful blob server begin-batch-upload request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /blob-store-service/1.0/begin-upload:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Creates an upload session.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n        - in: query\n          name: blob-name\n          schema:\n            type: string\n            format: path\n          example: /folder/file.png\n          description: The full path of the file to be uploaded\n        - in: query\n          name: namespace-name\n          schema:\n            type: string\n            format: uuid\n          example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n          description: The namespace-name returned by begin-batch-upload\n      responses:\n        200:\n          description: Upload session successfully created.\n          content:\n            application/vnd.graphisoft.teamwork.blob-store-service-1.0.upload-session-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.blob-store-service-1.0.upload-session-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerUploadSessionResponse'\n        430:\n          description: Unsuccessful blob server begin-upload request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /blob-store-service/1.0/put-blob-content-part:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Uploads a blob chunk.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n\n        - in: query\n          name: upload-session-id\n          schema:\n            type: string\n            format: uuid\n          example: 6894B3DD-74FE-48AE-BD5E-266861659B13\n          description: The ID of the upload-session this blob chunk belongs to\n\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          example: \"0\"\n          description: The offset of the chunk being uploaded from the beginning of the blob in bytes\n\n        - in: query\n          name: length\n          schema:\n            type: integer\n          example: 484173\n          description: The size of the chunk being uploaded.\n      requestBody:\n        description: The actual chunk to be uploaded\n        content:\n          multipart/form-data:\n            schema:\n              type: string\n              format: binary\n              example: \u003cbinary data\u003e\n      responses:\n        200:\n          description: Chunk successfully uploaded.\n          content:\n            application/vnd.graphisoft.teamwork.blob-store-service-1.0.upload-session-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.blob-store-service-1.0.upload-session-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerUploadSessionResponse'\n        430:\n          description: Unsuccessful blob server put-blob-content-part request\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /blob-store-service/1.0/commit-upload:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Commits a single blob upload session.\n\n        **IMPORTANT** The blob-id in the response to this request will be a temporary ID.\n\n        The final ID will get assigned when /blob-store-service/1.0/commit-batch-upload is called by the client!\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n        - in: query\n          name: upload-session-id\n          schema:\n            type: string\n            format: uuid\n          example: 6894B3DD-74FE-48AE-BD5E-266861659B13\n          description: The ID of the upload-session to be committed\n      responses:\n        200:\n          description: Upload session successfully committed.\n          content:\n            application/vnd.graphisoft.teamwork.blob-store-service-1.0.blob-metadata-1.0+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.blob-store-service-1.0.blob-metadata-1.0+json\n                  data:\n                    $ref: '#/components/schemas/BlobServerBlobMetadataResponse'\n        430:\n          description: Upload session could not be committed.\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /blob-store-service/1.0/commit-batch-upload:\n    post:\n      tags:\n        - BlobServer\n      description: |\n        Commits a batch upload session.\n\n        **IMPORTANT** The final IDs of the blobs uploaded in this session will be available in the response body of this request.\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n        - in: query\n          name: batch-upload-session-id\n          schema:\n            type: string\n            format: uuid\n          example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n          description: The ID of the batch-upload-session to be committed\n        - in: query\n          name: conflict-behavior\n          schema:\n            type: string\n            pattern: overwrite|fail\n          example: overwrite\n          description: |\n            The desired conflict resolution method.\n            When the target blob already exists will either overwrite the existing blob or throw an error.\n\n            The allowed values are `overwrite` and `fail`.\n      responses:\n        200:\n          description: Batch upload session successfully committed.\n          content:\n            application/vnd.graphisoft.teamwork.blob-store-service-1.0.blob-metadata-1.0-list+json:\n              schema:\n                type: object\n                properties:\n                  data-content-type:\n                    type: string\n                    example: application/vnd.graphisoft.teamwork.blob-store-service-1.0.blob-metadata-1.0-list+json\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/BlobServerBlobMetadataResponse'\n\n        430:\n          description: Batch upload session could not be committed.\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  /blob-store-service/1.0/get-blob-content:\n    get:\n      tags:\n        - BlobServer\n      description: |\n        Downloads a single file from the BIMcloud Blob Server\n      parameters:\n        - in: query\n          name: session-id\n          schema:\n            type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          description: The ID of the blob server session returned by /session-service/1.0/create-session\n        - in: query\n          name: blob-id\n          schema:\n            type: string\n            format: uuid\n          example: 4D7C7BB1-7AEF-4CD2-9146-0286561D6F85\n          description: The final (Portal Server side) ID of the blob to download\n        - in: query\n          name: filename\n          schema:\n            type: string\n          example: file.png\n          description: The desired filename of the data to be downloaded.\n      responses:\n        200:\n          description: File data downloading.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                example: \u003cbinary data\u003e\n        430:\n          description: File can not be downloaded.\n          content:\n            application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json:\n              schema:\n                $ref: '#/components/schemas/BlobServerDetailedError'\n\n  # RESPONSES \u0026 CO.\n\ncomponents:\n  schemas:\n    CreateSessionRequest:\n      type: object\n      properties:\n        client-id:\n          description: The ID of the client requesting the session\n          type: string\n          example: someclient\n        username:\n          type: string\n          example: some-user\n          description: \"Username of the user initiating the request. NOTE: this is case sensitive.\"\n        password:\n          description: |\n            **IMPORTANT** The password is in cleartext, so it is **IMPERATIVE** that the API gets published via https\n          type: string\n          example: P4$$w0rD\n\n    CreateSessionResponse:\n      type: object\n      properties:\n        session-id:\n          description: The ID of the created session. This ID will be required in every subsequent query.\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        user-id:\n          description: The ID of the user who created the session\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0852\n        expire-timeout:\n          description: The amout of time in milliseconds until the session expires upon inactivity\n          type: integer\n          example: 1234567\n\n    GetResourceResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 33E36B98-2758-4C17-83E5-69E93B8B87CB\n          description: The ID of the requested resource\n        type:\n          type: string\n          example: blob\n          description: The type of the requested resource\n        name:\n          type: string\n          example: file.png\n          pattern: ^[^\u003c\u003e:;,?\\\"*|\\/\\\\\\\\]+$\n          description: The name of the resource excluding path. Similar to filename.\n        $path:\n          type: string\n          example: 'Project Root/folder/file.png'\n          description: The full path of the resource. The root folder is called \"Project Root\" and may be translated.\n        $loweredPath:\n          type: string\n          example: 'project root/folder/file.png'\n          description: Same as $path, but lowercase.\n        $ancestors:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: The ancestor's id\n              name:\n                type: string\n                description: The ancestor's name\n            example: [\n              {\n                id: projectRoot,\n                name: Project Root\n              },\n              {\n                id: 8631e8b4-911d-43c0-ae15-cbd3d49018eb,\n                name: folder\n              }\n            ]\n            description: |\n              The array of ancestors of the resource entitiy in the resource tree. The 0th item is the root of the tree,\n              while subsequent items represent one level of depth in the resource tree. The last item is the direct ancestor\n              of the requested resource.\n        $parentId:\n          type: string\n          format: uuid\n          example: 8631e8b4-911d-43c0-ae15-cbd3d49018eb\n          description: The ID of the requested resource's immediate ancestor.\n        $parentName:\n          type: string\n          example: folder\n          description: The name of the requested resource's immediate ancestor.\n        $modelServerName:\n          type: string\n          example: model1\n          description: The name of the host server\n        $modelServerPath:\n          type: string\n          example: Server Root/model1\n          description: |\n            The path of the host server. Similar to $path. The root folder is called \"Server Root\", which may be translated.\n            Servers may be nested in folders in a tree the same way as regular resources.\n        modelServerId:\n          type: string\n          example: d290f1ee-6c54-4b01-90e6-d701748f0853\n          format: uuid\n          description: The ID of the host server.\n        $modifiedDate:\n          type: integer\n          example: 1585303324545\n          description: The timestamp of the last modification made to the resource\n        $size:\n          type: integer\n          example: 484173\n          description: The size of the requested resource in bytes.\n\n    CriterionObject:\n      type: object\n      description: |\n        Describes the criteria of a database query, similar to mongodb criterions or SQL WHERE clauses.\n        See the example for details.\n\n        Operators: $and, $or, $eq, $ne, $like, $gt, $gte, $lt, $lte, $not\n      example:\n        {\n          $and: [\n            { $eq: { name: 'file.png' } },\n            { $eq: { parentId: '8631e8b4-911d-43c0-ae15-cbd3d49018eb' } }\n          ]\n        }\n\n    GetTicketRequest:\n      type: object\n      properties:\n        user-id:\n          description: The ID of the user who requested the session. Returned by /management/client/create-session\n          type: string\n          format: uuid\n          example: d290f1ee-6c54-4b01-90e6-d701748f0852\n        format:\n          description: |\n            Controls the format and the response type of the ticket generation. Format `base64` returns the ticket data\n            in a string encoded in base64, while `lengthPrefixedBuffer` returns a binary buffer.\n            When unspecified, it will default to `lengthPrefixedBuffer`. The preferred format is `base64`.\n          type: string\n          pattern: base64|lengthPrefixedBuffer\n          example: base64\n        type:\n          description: The type of the ticket to be requested. Only `freeTicket` is supported.\n          type: string\n          example: freeTicket\n        resources:\n          description: |\n            A one element array containing the ID of the resource that the ticket is requested for. For file management,\n            the array should contain the ID of the desired blob server. This ID may be obtained by calling\n            `/management/client/get-inherited-default-blob-server-id`, where the `resource-group-id` parameter is\n            the ID of the future target upload's parent directory.\n          type: array\n          items:\n            type: string\n            format: uuid\n          maxLength: 1\n          minLength: 1\n          example: ['d290f1ee-6c54-4b01-90e6-d701748f0853']\n\n    GetTicketResponseBase64:\n      type: string\n      format: base64\n      example: VGlja2V0IGRhdGEgcmV0dXJuZWQgZnJvbSAvbWFuYWdlbWVudC9jbGllbnQvdGlja2V0LWdlbmVyYXRvci9nZXQtdGlja2V0Cg==\n      description: The ticket data encoded in base64. For future blob server queries, provide this ticket as-is.\n\n    GetTicketResponseLengthPrefixedBuffer:\n      type: string\n      format: binary\n      example: \u003cbinary data\u003e\n      description: Binary ticket data.\n\n    BlobServerAuthenticationRequest:\n      type: object\n      properties:\n        data-content-type:\n          type: string\n          example: application/vnd.graphisoft.teamwork.session-service-1.0.authentication-request-1.0+json\n        data:\n          type: object\n          properties:\n            username:\n              type: string\n              example: some-user\n              description: The username of the user requesting the new session\n            ticket:\n              type: string\n              format: base64\n              example: VGlja2V0IGRhdGEgcmV0dXJuZWQgZnJvbSAvbWFuYWdlbWVudC9jbGllbnQvdGlja2V0LWdlbmVyYXRvci9nZXQtdGlja2V0Cg==\n              description: The base64 ticket data returned by `/management/client/ticket-generator/get-ticket`\n\n    BlobServerSessionResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 5cf6ee792cdf05e1ba2b6325c41a5f10\n          format: guid\n          description: The ID of the session created by the Blob Server\n        last-access-time:\n          type: integer\n          example: 123456\n          description: Timestamp of the last access of the Blob Server APIs by this session in seconds.\n        expiration-time:\n          type: integer\n          example: 123456\n          description: Timestamp of the expiration time of this session in seconds\n        creation-time:\n          type: integer\n          example: 123456\n          description: Timestamp of when this session expires in seconds\n\n    BlobServerBatchUploadSessionResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n          format: uuid\n          description: The ID of the batch upload session created by the Blob Server\n        namespace-name:\n          type: string\n          example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n          format: uuid\n          description: The ID of the namespace associated with the batch upload session created by the Blob Server\n        description:\n          type: string\n          example: description\n          description: The description of the batch being uploaded, same as the description sent in the request.\n        last-access-time:\n          type: integer\n          example: 1585234790629\n          description: Timestamp of the last access of the Blob Server APIs by this session in milliseconds.\n        expiration-time:\n          type: integer\n          example: 1585249190629\n          description: Timestamp of the expiration time of this session in milliseconds.\n        creation-time:\n          type: integer\n          example: 1585234790629\n          description: Timestamp of when this session was created in milliseconds.\n        events:\n          type: array\n          items: \n            type: string\n          example: []\n          description: Names of the events that occured during the session.\n\n    BlobServerUploadSessionResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 6894B3DD-74FE-48AE-BD5E-266861659B13\n          format: uuid\n          description: The ID of the upload session created by the Blob Server\n        target-namespace-name:\n          type: string\n          example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n          format: uuid\n          description: The namespace associated with the batch upload session that this upload session belongs to\n        target-blob-name:\n          type: string\n          example: /folder/file.png\n          description: The filename of the file being uploaded, including the path, as supplied as a query parameter to /blob-store-service/1.0/begin-upload\n        target-blob-id:\n          type: string\n          example: \"\"\n          description: The ID of the blob being created by this upload-session, when target-blob-id is given.\n        last-access-time:\n          type: integer\n          example: 1585234790629\n          description: Timestamp of the last access time of this session in milliseconds.\n        expiration-time:\n          type: integer\n          example: 1585249190629\n          description: Timestamp of the expiration time of this session in milliseconds.\n        creation-time:\n          type: integer\n          example: 1585234790629\n          description: Timestamp of when this session was created in milliseconds.\n        uploaded-parts:\n          type: array\n          items:\n            type: object\n            properties:\n              offset:\n                type: integer\n                description: The offset of the chunk that was already uploaded from the beginning of the blob in bytes\n                example: 0\n              length:\n                type: integer\n                description: The size of the chunk that was already uploaded in bytes\n                example: 484173\n          description: The parts of this file that were already uploaded. Empty initially.\n\n    BlobServerBlobMetadataResponse:\n      type: object\n      properties:\n        standard-metadata:\n          type: object\n          properties:\n            namespace-name:\n              type: string\n              example: 832DBA54-7E0B-463C-B0EF-DB65DAB25745\n              format: uuid\n              description: The namespace associated with the batch upload session that the committed upload session belongs to\n            blob-name:\n              type: string\n              example: /folder/file.png\n              description: The full path of the file that was uploaded\n            blob-id:\n              type: string\n              example: 33E36B98-2758-4C17-83E5-69E93B8B87CB\n              format: uuid\n              description: |\n                The ID of the uploaded blob.\n                The ID is a temporary, non-final identifier until `/blob-store-service/1.0/commit-batch-upload` is called.\n                The ID retured during `/blob-store-service/1.0/commit-upload` **will** change during\n                `/blob-store-service/1.0/commit-upload`!\n            metadata-revision:\n              type: string\n              format: number\n              example: \"1\"\n              description: The metadata revision number of the file that was uploaded. Edits to the file metadata increase this value.\n            content-revision:\n              type: string\n              format: number\n              example: \"1\"\n              description: The content revision number of the file that was uploaded. Edits to the contents of the file increase this value.\n            access:\n              type: string\n              example: opened\n              description: Describes access status\n            last-modified-by-user-name:\n              type: string\n              example: some-user\n              description: The username of the user who initiated the last edit to this file\n            last-modified-by-user-id:\n              type: string\n              format: uuid\n              example: d290f1ee-6c54-4b01-90e6-d701748f0852\n              description: The ID of the user who initiated the last edit to this file\n            last-modified:\n              type: string\n              format: number\n              example: \"1585234790835\"\n              description: The timestamp of the latest change made to this file in milliseconds\n            created-by-user-name:\n              type: string\n              example: some-user\n              description: The username of the user who initially uploaded this file\n            created-by-user-id:\n              type: string\n              format: uuid\n              example: d290f1ee-6c54-4b01-90e6-d701748f0852\n              description: The ID of the user who initially uploaded this file\n            created:\n              type: string\n              format: number\n              example: \"1585234790835\"\n              description: The timestamp of the initial upload of this file in milliseconds\n            content-disposition:\n              type: string\n              example: attachment; filename=\"/folder/file.png\"\n              description: Content disposition of the file\n            content-language:\n              type: string\n              example: \"\"\n              description: Language of file contents\n            content-type:\n              type: string\n              example: application/octet-stream\n              description: Content type of this file\n            content-hash-algorithm:\n              type: string\n              example: SHA256\n              description: Name of the algorithm used for hashing the file content\n            content-hash:\n              type: string\n              example: E_UXOOjE-SDi-g_Tq6F7dQAd1dp-C5aLTIy1ThHFvFQ\n              description: The hash generated by the hash function described in content-hash-algorithm\n            cache-control:\n              type: string\n              example: no-cache\n              description: Describes cache\n            e-tag:\n              type: string\n              example: E_UXOOjE-SDi-g_Tq6F7dQAd1dp-C5aLTIy1ThHFvFQ\n              description: The e-tag associated with the file.\n            size:\n              type: string\n              format: number\n              example: \"484173\"\n        user-metadata:\n          type: object\n          description: Reserved for future use.\n\n    # FS ERRORS\n\n    BlobServerDetailedError:\n      type: object\n      properties:\n        data-content-type:\n          type: string\n          example: application/vnd.graphisoft.teamwork.generic-service-1.0.detailed-error-1.0+json\n        data:\n          type: object\n          properties:\n            error-message:\n              type: string\n              example: \"Failed to execute request: 'session-service-create-session'. Error: 'Authentication failed: access control ticket is expired.'.\"\n              description: The error message generated by the Blob Server\n            error-code:\n              type: integer\n              example: 4\n              pattern: '[1-5]|1[1-9]|2[0-3]'\n              description: |\n                Error code-name pairs:\n                  - `1` `GenericError`\n                  - `2` `AuthenticationRequired`\n                  - `3` `AuthenticationFailed`\n                  - `4` `AccessControlTicketExpired`\n                  - `5` `AccessDenied`\n                  - `11` `SessionNotFound`\n                  - `12` `BatchUploadCommitFailed`\n                  - `13` `InvalidBlobContentPart`\n                  - `14` `UploadSessionNotFound`\n                  - `15` `IncompleteUpload`\n                  - `16` `BlobAttachmentNotFound`\n                  - `17` `BlobNamespaceNotFound`\n                  - `18` `BlobRevisionNotFound`\n                  - `19` `BlobChunkNotFound`\n                  - `20` `BlobAlreadyExists`\n                  - `21` `BlobNotFound`\n                  - `22` `BlobAccessDenied`\n                  - `23` `BlobPermissionDenied`\n            details:\n              type: object\n              properties:\n                message:\n                  type: string\n                  example: \"Authentication failed: access control ticket is expired.\"\n                  description: The error message generated by the Blob Server\n                reason:\n                  type: string\n                  example: AccessControlTicketExpired\n                  description: The internal name of the error thrown. See the description of error-code for details.\n\n    # PS ERRORS\n\n    PortalServerError:\n      type: object\n      properties:\n        error-code:\n          type: integer\n          example: 6\n          description: |\n            The code of the error being thrown. Current error code-name pairs:\n              - `1` `GenericError`\n              - `2` `AuthenticationRequiredError`\n              - `3` `AccessDeniedError`\n              - `4` `EntityCyclicDependencyError`\n              - `5` `EntityExistsError`\n              - `6` `EntityNotFoundError`\n              - `7` `EntityValidationError`\n              - `8` `OptimisticLockError`\n              - `9` `RevisionObsoletedError`\n              - `10` `LdapConnectionError`\n              - `11` `LdapInvalidCredentialsError`\n              - `12` `FileConnectionBaseDnError`\n              - `13` `ModelServerSideError`\n              - `14` `ReferenceError`\n              - `15` `ProhibitDeleteError`\n              - `16` `LicenseManagerError`\n              - `17` `ResultLimitExceededError`\n              - `18` `ModelServerNotCompatibleError`\n              - `19` `NotEnoughFreeSpaceError`\n              - `20` `ChangeHostError`\n              - `21` `GSIDConnectionError`\n              - `22` `GSIDInvalidCredentialsError`\n              - `23` `TagAlreadyAssignedError`\n              - `24` `KeyExistsError`\n              - `25` `NotAllowedError`\n              - `26` `NotYetAvailableError`\n              - `27` `InsufficientLicenseError`\n        error-message:\n          type: string\n          example: 'EntityNotFoundError: No item found by \"projectRootz\"'\n          description: Details about why the error has occured\n"
		}
	},
	"Error": "parse: paths: /management/client/get-resource: get: : responses: 430: unknown status code: 430"
}