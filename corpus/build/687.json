{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wiremock/wiremock"
		},
		"file": {
			"name": "wiremock-admin-api.yaml",
			"path": "src/main/resources/swagger/wiremock-admin-api.yaml",
			"content": "openapi: 3.0.0\n\ninfo:\n  title: WireMock\n  version: 2.32.0\n\nexternalDocs:\n  description: WireMock user documentation\n  url: http://wiremock.org/docs/\n\nservers:\n  - url: /\n\ntags:\n  - name: Stub Mappings\n    description: Operations on stub mappings\n    externalDocs:\n      description: User documentation\n      url: http://wiremock.org/docs/stubbing/\n  - name: Requests\n    description: Logged requests and responses received by the mock service\n    externalDocs:\n      description: User documentation\n      url: http://wiremock.org/docs/verifying/\n  - name: Near Misses\n    description: Near misses allow querying of received requests or request patterns according to similarity\n    externalDocs:\n      description: User documentation\n      url: http://wiremock.org/docs/verifying/#near-misses\n  - name: Recordings\n    description: Stub mapping record and snapshot functions\n    externalDocs:\n      description: User documentation\n      url: http://wiremock.org/docs/record-playback/\n  - name: Scenarios\n    description: Scenarios support modelling of stateful behaviour\n    externalDocs:\n      description: User documentation\n      url: http://wiremock.org/docs/stateful-behaviour/\n  - name: System\n    description: Global operations\n\npaths:\n  /__admin/mappings:\n    get:\n      summary: Get all stub mappings\n      tags:\n         - Stub Mappings\n      parameters:\n        - description: The maximum number of results to return\n          in: query\n          name: limit\n          required: false\n          example: 10\n          schema:\n            type: integer\n        - description: The start index of the results to return\n          in: query\n          name: offset\n          required: false\n          example: 0\n          schema:\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas/stub-mappings.yaml'\n              example:\n                $ref: 'examples/stub-mappings.yaml'\n          description: All stub mappings\n    post:\n      summary: Create a new stub mapping\n      tags:\n         - Stub Mappings\n      requestBody:\n        $ref: \"#/components/requestBodies/stubMapping\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/stubMapping\"\n    delete:\n      summary: Delete all stub mappings\n      tags:\n         - Stub Mappings\n      responses:\n        '200':\n          description: Successfully deleted\n\n  /__admin/mappings/reset:\n    post:\n      summary: Reset stub mappings\n      description: Restores stub mappings to the defaults defined back in the backing store\n      tags:\n         - Stub Mappings\n      responses:\n        '200':\n          description: Successfully reset\n\n  /__admin/mappings/save:\n    post:\n      summary: Persist stub mappings\n      description: Save all persistent stub mappings to the backing store\n      tags:\n         - Stub Mappings\n      responses:\n        '200':\n          description: Successfully saved\n\n  /__admin/mappings/{stubMappingId}:\n    parameters:\n      - description: The UUID of stub mapping\n        in: path\n        name: stubMappingId\n        required: true\n        example: 730d3e32-d098-4169-a20c-554c3bedce58\n        schema:\n          type: string\n    get:\n      summary: Get stub mapping by ID\n      tags:\n         - Stub Mappings\n      responses:\n        '404':\n          description: Stub mapping not found\n        '200':\n          $ref: \"#/components/responses/stubMapping\"\n    put:\n      summary: Update a stub mapping\n      tags:\n         - Stub Mappings\n      requestBody:\n        $ref: \"#/components/requestBodies/stubMapping\"\n      responses:\n        '404':\n          description: Stub mapping not found\n        '200':\n          $ref: \"#/components/responses/stubMapping\"\n    delete:\n      summary: Delete a stub mapping\n      tags:\n         - Stub Mappings\n      responses:\n        '404':\n          description: Stub mapping not found\n        '200':\n          description: OK\n\n  /__admin/mappings/find-by-metadata:\n    post:\n      description: Find stubs by matching on their metadata\n      tags:\n        - Stub Mappings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/content-pattern.yaml'\n            example:\n              $ref: 'examples/by-metadata-request.yaml'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas/stub-mappings.yaml'\n              example:\n                $ref: 'examples/stub-mappings.yaml'\n          description: Matched stub mappings\n\n  /__admin/mappings/remove-by-metadata:\n    post:\n      summary: Delete stub mappings matching metadata\n      tags:\n        - Stub Mappings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/content-pattern.yaml'\n            example:\n              $ref: 'examples/by-metadata-request.yaml'\n      responses:\n        '200':\n          description: 'The stub mappings were successfully removed'\n\n  /__admin/requests:\n    get:\n      summary: Get all requests in journal\n      tags:\n         - Requests\n      parameters:\n        - description: The maximum number of results to return\n          in: query\n          name: limit\n          example: 10\n          schema:\n            type: string\n        - description: Only return logged requests after this date\n          in: query\n          name: since\n          example: 2016-10-05T12:33:01Z\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: 'examples/serve-events.yaml'\n          description: List of received requests\n    delete:\n      summary: Delete all requests in journal\n      tags:\n         - Requests\n      responses:\n        '200':\n          description: Successfully deleted\n\n  /__admin/requests/{requestId}:\n    get:\n      summary: Get request by ID\n      tags:\n         - Requests\n      parameters:\n        - description: The UUID of the logged request\n          in: path\n          name: requestId\n          required: true\n          example: 12fb14bb-600e-4bfa-bd8d-be7f12562c99\n          schema:\n            type: string\n      responses:\n        '404':\n          description: Request not found\n        '200':\n          description: OK\n          content:\n            application/json:\n              example:\n                $ref: \"examples/request.yaml\"\n    delete:\n      summary: Delete request by ID\n      tags:\n         - Requests\n      parameters:\n        - description: The UUID of the logged request\n          in: path\n          name: requestId\n          required: true\n          example: 12fb14bb-600e-4bfa-bd8d-be7f12562c99\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully deleted\n\n  /__admin/requests/reset:\n    post:\n      deprecated: true\n      summary: Empty the request journal\n      tags:\n         - Requests\n      responses:\n        '200':\n          description: Successfully reset\n\n  /__admin/requests/count:\n    post:\n      summary: Count requests by criteria\n      description: Count requests logged in the journal matching the specified criteria\n      tags:\n         - Requests\n      requestBody:\n        $ref: \"#/components/requestBodies/requestPattern\"\n      responses:\n        '200':\n          description: Number of matching requests\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                    example: 4\n\n  /__admin/requests/remove:\n    post:\n      summary: Remove requests by criteria\n      description: Removed requests logged in the journal matching the specified criteria\n      tags:\n         - Requests\n      requestBody:\n        $ref: \"#/components/requestBodies/requestPattern\"\n      responses:\n        '200':\n          description: Removed request details\n          content:\n            application/json:\n              example:\n                $ref: \"examples/requests.yaml\"\n                    \n  /__admin/requests/remove-by-metadata:\n    post:\n      summary: Delete requests mappings matching metadata\n      tags:\n        - Requests\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/content-pattern.yaml'\n            example:\n              $ref: 'examples/by-metadata-request.yaml'\n      responses:\n        '200':\n          description: Removed request details\n          content:\n            application/json:\n              example:\n                $ref: \"examples/requests.yaml\"\n\n  /__admin/requests/find:\n    post:\n      summary: Find requests by criteria\n      description: Retrieve details of requests logged in the journal matching the specified criteria\n      tags:\n         - Requests\n      requestBody:\n        $ref: \"#/components/requestBodies/requestPattern\"\n      responses:\n        '200':\n          description: Matching request details\n          content:\n            application/json:\n              example:\n                $ref: \"examples/requests.yaml\"\n\n  /__admin/requests/unmatched:\n    get:\n      summary: Find unmatched requests\n      description: Get details of logged requests that weren't matched by any stub mapping\n      tags:\n         - Requests\n      responses:\n        '200':\n          description: Unmatched request details\n          content:\n            application/json:\n              example:\n                $ref: \"examples/requests.yaml\"\n\n  /__admin/requests/unmatched/near-misses:\n    get:\n      description: Retrieve near-misses for all unmatched requests\n      tags:\n         - Near Misses\n      responses:\n        '200':\n          $ref: \"#/components/responses/nearMisses\"\n\n  /__admin/near-misses/request:\n    post:\n      summary: Find near misses matching specific request\n      description: Find at most 3 near misses for closest stub mappings to the specified request\n      tags:\n         - Near Misses\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: 'schemas/logged-request.yaml'\n            example:\n              $ref: 'examples/logged-request.yaml'\n        required: true\n      responses:\n        '200':\n          $ref: \"#/components/responses/nearMisses\"\n\n  /__admin/near-misses/request-pattern:\n    post:\n      summary: Find near misses matching request pattern\n      description: Find at most 3 near misses for closest logged requests to the specified request pattern\n      tags:\n         - Near Misses\n      requestBody:\n        $ref: \"#/components/requestBodies/requestPattern\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/nearMisses\"\n\n  /__admin/recordings/start:\n    post:\n      summary: Start recording\n      description: Begin recording stub mappings\n      tags:\n         - Recordings\n      requestBody:\n        $ref: \"#/components/requestBodies/startRecording\"\n      responses:\n        '200':\n          description: Successfully started recording\n\n  /__admin/recordings/stop:\n    post:\n      summary: Stop recording\n      description: End recording of stub mappings\n      tags:\n         - Recordings\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas/stub-mappings.yaml'\n              example:\n                $ref: 'examples/recorded-stub-mappings.yaml'\n          description: Successfully stopped recording\n\n  /__admin/recordings/status:\n    get:\n      summary: Get recording status\n      tags:\n         - Recordings\n      responses:\n        '200':\n          description: Successfully got the record status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: \"Stopped\"\n                    enum:\n                      - NeverStarted\n                      - Recording\n                      - Stopped\n\n  /__admin/recordings/snapshot:\n    post:\n      summary: Take a snapshot recording\n      tags:\n         - Recordings\n      requestBody:\n        $ref: \"#/components/requestBodies/snapshotRecording\"\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: 'schemas/stub-mappings.yaml'\n              example:\n                $ref: 'examples/recorded-stub-mappings.yaml'\n          description: Successfully took a snapshot recording\n\n  /__admin/scenarios:\n    get:\n      summary: Get all scenarios\n      tags:\n         - Scenarios\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  scenarios:\n                    type: array\n                    items:\n                      $ref: \"schemas/scenario.yaml\"\n          description: All scenarios\n\n  /__admin/scenarios/reset:\n    post:\n      summary: Reset the state of all scenarios\n      tags:\n         - Scenarios\n      responses:\n        '200':\n          description: Successfully reset\n\n  /__admin/settings:\n    post:\n      summary: Update global settings\n      tags:\n         - System\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"schemas/delay-distribution.yaml\"\n                - type: object\n                  properties:\n                    fixedDelay:\n                      type: number\n                  example:\n                    fixedDelay: 500\n        required: true\n      responses:\n        '200':\n          description: Settings successfully updated\n\n  /__admin/reset:\n    post:\n      summary: Reset mappings and request journal\n      description: Reset mappings to the default state and reset the request journal\n      tags:\n         - System\n      responses:\n        '200':\n          description: Successfully reset\n\n  /__admin/shutdown:\n    post:\n      description: Shutdown the WireMock server\n      tags:\n         - System\n      responses:\n        '200':\n          description: Server will be shut down\n\ncomponents:\n  requestBodies:\n    requestPattern:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: 'schemas/request-pattern.yaml'\n          example:\n            $ref: \"examples/request-pattern.yaml\"\n\n    stubMapping:\n      content:\n        application/json:\n          schema:\n            $ref: 'schemas/stub-mapping.yaml'\n          example:\n            $ref: \"examples/stub-mapping-no-id.yaml\"\n\n    startRecording:\n      required: true\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: 'schemas/record-spec.yaml'\n              - properties:\n                  filters:\n                    allOf:\n                      - $ref: 'schemas/request-pattern.yaml'\n                      - description: Filter requests for which to create stub mapping\n                  targetBaseUrl:\n                    type: string\n                    description: Target URL when using the record and playback API\n                    example: http://example.mocklab.io\n          example:\n            $ref: \"examples/record-spec.yaml\"\n\n    snapshotRecording:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            allOf:\n              - $ref: \"schemas/record-spec.yaml\"\n              - properties:\n                  filters:\n                    type: object\n                    allOf:\n                      - properties:\n                          ids:\n                            type: array\n                            items:\n                              type: string\n                        type: object\n                        description: Filter requests for which to create stub mapping\n                      - $ref: 'schemas/request-pattern.yaml'\n          example:\n            $ref: \"examples/snapshot-spec.yaml\"\n\n  responses:\n    stubMapping:\n      description: The stub mapping\n      content:\n        application/json:\n          schema:\n            $ref: 'schemas/stub-mapping.yaml'\n          example:\n            $ref: \"examples/stub-mapping-with-id.yaml\"\n\n    nearMisses:\n      description: Near misses matching criteria\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              nearMisses:\n                type: array\n                items:\n                  $ref: \"schemas/logged-request.yaml\"\n          example:\n            $ref: 'examples/near-misses.yaml'"
		}
	},
	"Error": "parse: paths: /__admin/mappings/{stubMappingId}: get: operation \"\": responses: 200: resolve \"#/components/responses/stubMapping\" reference: content: \"application/json\": schema: parse schema: reference \"schemas/stub-mapping.yaml\": resolve reference \"schemas/stub-mapping.yaml\": invalid schema reference \"schemas/stub-mapping.yaml\""
}