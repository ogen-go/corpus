{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/VarvaraZadnepriak/MoviesAPI.ReactJS"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "swagger.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.1.0\n  title: Preference public API\n  description: Preference public API\n  license:\n    name: MIT\n    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\npaths:\n  /movies:\n    get:\n      description: Get movies list\n      summary: Get movies list\n      tags:\n        - movie\n      operationId: MoviesGet\n      parameters:\n        - in: query\n          name: sortBy\n          schema:\n            type: string\n          description: Field to sort by\n        - in: query\n          name: sortOrder\n          schema:\n            type: string\n          description: Value to define sort direction - 'desc' or 'asc'\n        - in: query\n          name: search\n          schema:\n            type: string\n          description: Search value\n        - in: query\n          name: searchBy\n          description: Type of search (title or genres)\n          schema:\n            type: strgin\n            enum:\n              - title\n              - genres\n        - in: query\n          name: filter\n          schema:\n            type: string\n            items:\n              type: string\n          description: Array to filter by genres\n        - in: query\n          name: offset\n          schema:\n            type: string\n          description: Offset in result array for pagination\n        - in: query\n          name: limit\n          schema:\n            type: string\n          description: Limit amount of items in result array for pagination\n      responses:\n        \"200\":\n          description: Movies list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MoviesResponse\"\n\n    post:\n      description: Create movie\n      summary: Create movie\n      tags:\n        - movie\n      operationId: MoviesCreate\n      requestBody:\n        description: Movie to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MovieBase'\n      responses:\n        \"201\":\n          description: Movie object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Movie\"\n        \"400\":\n          description: Validation errors\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n    put:\n      description: Update movie\n      summary: Update movie by id\n      tags:\n        - movie\n      operationId: MoviesUpdateById\n      requestBody:\n        description: Movie to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Movie'\n      responses:\n        \"200\":\n          description: Movie object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Movie\"\n        \"404\":\n          description: Movie not found\n        \"400\":\n          description: Validation errors\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n  \"/movies/{id}\":\n    get:\n      description: Get movie by id\n      summary: Get movie by id\n      tags:\n        - movie\n      operationId: MoviesGetById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Movie unique identifier\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Movie object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Movie\"\n        \"404\":\n          description: Movie not found\n  \n    delete:\n      description: Remove movie by id\n      summary: Remove movie by id\n      tags:\n        - movie\n      operationId: MoviesDeleteById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Movie unique identifier\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: No response\n        \"404\":\n          description: Movie not found\n      \nservers:\n  - url: http://localhost:4000/\ncomponents:\n  schemas:\n    MoviesResponse:\n      title: MoviesResponse\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Movie\"\n        total:\n          type: number\n        offset:\n          type: number\n        limit:\n          type: number\n\n    MovieBase:\n      title: MovieBase\n      type: object\n      required:\n        - title\n        - poster_path\n        - overview\n        - genres\n        - runtime\n      properties:\n        title:\n          type: string\n          description: Movie title\n          example: La La Land\n        tagline:\n          type: string\n          description: Movie tagline\n          example: Here's to the fools who dream.\n        vote_average:\n          type: number\n          description: Movie average raiting\n          example: 7.9\n        vote_count:\n          type: integer\n          description: Total count of votes for the movie\n          example: 6782\n        release_date:\n          type: string\n          description: Movie release date\n          example: '2016-12-29'\n        poster_path:\n          type: string\n          description: Url to the poster image\n          example: https://image.tmdb.org/t/p/w500/ylXCdC106IKiarftHkcacasaAcb.jpg\n        overview:\n          type: string\n          description: Short description of the movie\n          example: Mia, an aspiring actress, serves lattes to movie stars in between auditions and Sebastian, a jazz musician, scrapes by playing cocktail party gigs in dingy bars, but as success mounts they are faced with decisions that begin to fray the fragile fabric of their love affair, and the dreams they worked so hard to maintain in each other threaten to rip them apart.\n        budget:\n          type: integer\n          description: Movie production budget\n          format: int32\n          minimum: 0\n          example: 30000000\n        revenue:\n          type: integer\n          description: Movie revenue\n          format: int64\n          minimum: 0\n          example: 445435700\n        runtime:\n          type: integer\n          description: Movie duration time\n          format: int32\n          minimum: 0\n          example: 128\n        genres:\n          type: array\n          description: List of genres\n          items:\n            type: string\n          example: [ 'Comedy', 'Drama', 'Romance' ]\n\n    Movie:\n      title: Movie\n      allOf:\n        - $ref: '#/components/schemas/MovieBase'\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: integer\n              description: Movie unique identifier\n              example: 313369\n\n    BadRequestError:\n      title: Bad Request Error\n      type: object\n      properties:\n        messages:\n          type: array\n          description: List of error messages\n          items:\n            type: string\n          example: [ \"\\\"runtime\\\" must be an integer\" ]\n\n\n"
		}
	},
	"Error": "parse: paths: /movies: get: MoviesGet: parameters: parse parameter \"searchBy\": schema: parse schema: type: unexpected type: \"strgin\""
}