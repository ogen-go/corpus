{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cebe/yii2-openapi"
		},
		"file": {
			"name": "petstore_arrayref.yaml",
			"path": "tests/specs/petstore_arrayref.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    parameters:\n      -   name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      responses:\n        '200':\n          $ref: \"#/components/responses/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      summary: update a specific pet\n      operationId: updatePetById\n      tags:\n        - pets\n      responses:\n        '200':\n          description: The updated pet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n    delete:\n      summary: delete a specific pet\n      operationId: deletePetById\n      tags:\n        - pets\n      responses:\n        '204':\n          description: successfully deleted pet\ncomponents:\n  schemas:\n    Pet:\n      description: A Pet\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n          readOnly: True\n        name:\n          type: string\n        tag:\n          type: string\n          x-faker: \"$faker-\u003erandomElement(['one', 'two', 'three', 'four'])\"\n        duplicates:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/Pet/properties/tag\"\n\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n  responses:\n    Pets:\n      description: Expected response to a valid request\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Pet\"\n"
		}
	},
	"Error": "parse: paths: /pets/{petId}: get: showPetById: responses: 200: resolve \"#/components/responses/Pets\" reference: content: application/json: schema: parse schema: item: parse schema: reference \"#/components/schemas/Pet\": parse schema: duplicates: parse schema: item: parse schema: reference \"#/components/schemas/Pet/properties/tag\": resolve reference \"#/components/schemas/Pet/properties/tag\": schema not found"
}