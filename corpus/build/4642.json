{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/restbase"
		},
		"file": {
			"name": "content.yaml",
			"path": "v1/content.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0\n  title: MediaWiki Content API\n  description: Basic MediaWiki content api.\n  termsOfService: https://github.com/wikimedia/restbase#restbase\n  contact:\n    name: Services\n    email: services@lists.wikimedia.org\n    url: https://www.mediawiki.org/wiki/Services\n  license:\n    name: Apache licence, v2\n    url: https://www.apache.org/licenses/LICENSE-2.0\ntags:\n  - name: Page content\n    description: page content in different formats\npaths:\n  /:\n    get:\n      tags:\n        - Page content\n      summary: List page-related API entry points.\n      description: |\n        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n      responses:\n        200:\n          description: A list of page-related API end points.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/listing'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-monitor: false\n\n  /title/{title}:\n    get: \u0026title_title_get_spec\n      tags:\n        - Page content\n      summary: Get revision metadata for a title.\n      description: |\n        Returns the revision metadata for the given title. If a revision ID is provided,\n        metadata for that revision is returned, otherwise the latest revision ID is assumed.\n\n        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The latest revision metadata for the provided title.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/revision'\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        404:\n          description: Unknown page title or no revisions found.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/page_revisions/page/{title}\n              headers:\n                # FIXME: Temporary work-around (see T120212).\n                cache-control: 'no-cache'\n                if-unmodified-since: '{{if-unmodified-since}}'\n      x-monitor: true\n      x-amples:\n        - title: Get rev by title from storage\n          request:\n            params:\n              domain: en.wikipedia.org\n              title: User:BSitzmann_(WMF)/MCS/Test/Frankenstein\n          response:\n            status: 200\n            headers:\n              etag: /.+/\n              content-type: application/json\n            body:\n              items:\n                - title: 'User:BSitzmann_(WMF)/MCS/Test/Frankenstein'\n                  rev: /\\d+/\n                  tid: /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/\n                  comment: /.*/\n                  page_language: 'en'\n\n  /title/{title}/{revision}:\n    get:\n      \u003c\u003c: *title_title_get_spec\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: revision\n          in: path\n          description: The revision id\n          required: true\n          schema:\n            type: integer\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/page_revisions/page/{title}/{revision}\n              headers:\n                # FIXME: Temporary work-around (see T120212).\n                cache-control: 'no-cache'\n                if-unmodified-since: '{{if-unmodified-since}}'\n      x-monitor: false\n\n  /html/{title}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n        options:\n          redirect_cache_control: '{{options.response_cache_control}}'\n          attach_body_to_redirect: true\n      - path: lib/security_response_header_filter.js\n        options:\n          allowInlineStyles: true\n      - path: lib/content_negotiation_filter.js\n    get:\n      x-route-filters:\n        - path: lib/ensure_content_type.js\n        - path: ./lib/language_variants_filter.js\n      tags:\n        - Page content\n      summary: Get latest HTML for a title.\n      description: |\n        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n          required: false\n        - name: stash\n          in: query\n          description: |\n            Whether to temporary stash data-parsoid in order to support transforming the\n            modified content later. If this parameter is set, requests are rate-limited on\n            a per-client basis (max 5 requests per second per client)\n          schema:\n            type: boolean\n        - name: Accept-Language\n          in: header\n          description: |\n            The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.\n          schema:\n            type: string\n      responses:\n        200:\n          description: |\n            The latest HTML for the given page title.\n\n            See [the MediaWiki DOM\n            spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a\n            description of the MediaWiki-specific semantic markup in this HTML.\n            Note that additional metadata is available in the HTML head.\n          headers:\n            ETag:\n              description: |\n                ETag header indicating the revision and render timeuuid\n                separated by a slash:\n                \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n                This ETag can be passed to the HTML save end point (as\n                `base_etag` POST parameter), and can also be used to retrieve\n                the exact corresponding data-parsoid metadata, by requesting\n                the specific `revision` and `tid` indicated by the `ETag`.\n              schema:\n                type: string\n          content:\n            text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\":\n              schema:\n                type: string\n\n            application/json:\n              schema:\n                type: object\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target, and the body contains the actual page contents as HTML.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        404:\n          description: Unknown page title\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - get_from_backend:\n            request:\n              # Directly return the latest HTML. Alternatively, we could also try\n              # relative redirects. A relative location header of 'foo/bar' seems to\n              # work in current Chrome and Firefox.\n              # See also http://tools.ietf.org/html/rfc7231#section-7.1.2\n              uri: /{domain}/sys/parsoid/html/{title}\n              headers:\n                cache-control: '{{cache-control}}'\n                if-unmodified-since: '{{if-unmodified-since}}'\n                x-restbase-mode: '{{x-restbase-mode}}'\n                x-restbase-parentrevision: '{{x-restbase-parentrevision}}'\n              query:\n                stash: '{{stash}}'\n      x-monitor: true\n      x-amples:\n        # FIXME: This depends on our 'no change' detection optimization to\n        # avoid filling up storage with re-renders. We have plenty of data on\n        # Parsoid backend requests, so there shouldn't be a need to test this\n        # per-instance.\n        #- title: Get html by title from Parsoid\n        #  request:\n        #    params:\n        #      title: Foobar\n        #    headers:\n        #      cache-control: no-cache\n        #  response:\n        #    status: 200\n        #    headers:\n        #      etag: /.+/\n        #      content-type: /^text\\/html.+/\n        #    body: /^\u003c!DOCTYPE html\u003e.*/\n        - title: Get html by title from storage\n          request:\n            params:\n              domain: en.wikipedia.org\n              title: User:BSitzmann_(WMF)/MCS/Test/Frankenstein\n          response:\n            status: 200\n            headers:\n              etag: /.+/\n              content-type: /^text\\/html.+/\n            body: /^\u003c!DOCTYPE html\u003e.*/\n    post:\n      tags:\n        - Page content\n      summary: Save a new revision using HTML.\n      description: |\n        Save a new revision of a page given in [Parsoid\n        HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)\n        format.\n\n        For new pages, or when editting the latest revision of a page,\n        the `base_etag` parameter should be left empty. For editing old revisions,\n        it should contain the `ETag` header of the revision the edit is derived from.\n\n        The latest page revision ETag header could be provided in the If-Match header\n        to detect edit conflicts. If the new page is created, appropriate user cookies\n        must be provided.\n\n        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - csrf_token\n                - html\n              properties:\n                base_etag:\n                  type: string\n                  description: |\n                    ETag header of the revision the edit is based on. Should be supplied for all existing pages to ensure clean round-tripping.\n                html:\n                  type: string\n                  description: HTML of the page to save.\n                  x-textarea: true\n                csrf_token:\n                  type: string\n                  description: CSRF edit token provided by the MW API.\n                comment:\n                  type: string\n                  description: Comment summarizing the change.\n                is_minor:\n                  type: boolean\n                  description: Flag indicating a minor change.\n                is_bot:\n                  type: boolean\n                  description: Flag indicating a bot edit.\n        required: true\n      responses:\n        200:\n          description: The content was not changed, and no new version was created.\n          content:\n            application/json:\n              schema:\n                type: object\n                # FIXME: document\n        201:\n          description: A new revision of the page has been created\n          headers:\n            ETag:\n              description: |\n                ETag header indicating the new revision and timeuuid,\n                separated by a slash:\n                \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n              schema:\n                type: string\n        400:\n          description: Invalid request - lack of required parameters, bad ETags etc.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        409:\n          description: Edit conflict\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      # RB doesn't check for permissions, just prepares a request correctly\n      x-route-filters:\n        - path: ./lib/mediawiki_auth_filter.js\n      x-request-handler:\n        - post_to_backend:\n            request:\n              uri: /{domain}/sys/page_save/html/{title}\n              headers: '{{request.headers}}'\n              body: '{{request.body}}'\n      x-monitor: false\n\n  /html/{title}/{revision}:\n    get: \u0026html_title_revision_get_spec\n      tags:\n        - Page content\n      summary: Get HTML for a specific title/revision \u0026 optionally timeuuid.\n      description: |\n        Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n      operationId: getFormatRevision\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: revision\n          in: path\n          description: The revision\n          required: true\n          schema:\n            type: integer\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n        - name: stash\n          in: query\n          description: |\n            Whether to temporary stash data-parsoid in order to support transforming the\n            modified content later. If this parameter is set, requests are rate-limited on\n            a per-client basis (max 5 requests per second per client)\n          schema:\n            type: boolean\n        - name: Accept-Language\n          in: header\n          description: |\n            The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.\n          schema:\n            type: string\n      responses:\n        200:\n          description: |\n            The html for the given page, revision and tid.\n\n            See [the MediaWiki DOM\n            spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a\n            description of the MediaWiki-specific semantic markup in this HTML.\n            Note that additional metadata is available in the HTML head.\n\n            This HTML can be edited using arbitrary HTML tools. The modified HTML\n            can be converted back to wikitext using the\n            [/transform/html/to/wikitext{/title}{/revision}](#!/Transforms/transform_html_to_wikitext__title___revision__post)\n            entry point.\n          headers:\n            ETag:\n              description: |\n                ETag header indicating the revision and render timeuuid\n                separated by a slash:\n                \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n                This ETag can be passed to the HTML save end point (as\n                `base_etag` POST parameter), and can also be used to retrieve\n                the exact corresponding data-parsoid metadata, by requesting\n                the specific `revision` and `tid` indicated by the `ETag`.\n              schema:\n                type: string\n          content:\n            text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\":\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: object\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        400:\n          description: Invalid revision or tid\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        403:\n          description: Access to the specific revision is restricted\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        404:\n          description: Unknown page, revision or tid\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/parsoid/html/{title}/{revision}\n              headers:\n                cache-control: '{{cache-control}}'\n                if-unmodified-since: '{{if-unmodified-since}}'\n                x-restbase-mode: '{{x-restbase-mode}}'\n                x-restbase-parentrevision: '{{x-restbase-parentrevision}}'\n              query:\n                stash: '{{stash}}'\n      x-monitor: false\n\n  /data-parsoid/{title}/{revision}/{tid}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n        options:\n          redirect_cache_control: '{{options.response_cache_control}}'\n          attach_body_to_redirect: true\n    get:\n      tags:\n        - Page content\n      summary: Get data-parsoid metadata for a specific title/revision/tid.\n      description: |\n        Data-parsoid is metadata used by\n        [Parsoid](https://www.mediawiki.org/wiki/Parsoid) to support clean\n        round-tripping conversions between HTML and Wikitext. Among other\n        things, it contains the original Wikitext offsets of each HTML\n        element, keyed by element ID. The format is unstable.\n\n        The metadata in data-parsoid is specific to a specific HTML render.\n        For this reason, you need to supply the exact `revision` and `tid` as\n        provided in the `ETag` header of the HTML response.\n\n        Stability: [Stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: revision\n          in: path\n          description: The revision\n          required: true\n          schema:\n            type: integer\n        - name: tid\n          in: path\n          description: The revision's time ID\n          required: true\n          schema:\n            type: string\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: The latest Parsoid data for the given page\n          headers:\n            ETag:\n              description: 'Revision / tid: \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"'\n              schema:\n                type: string\n          content:\n            application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/data-parsoid/2.1.0:\n              schema:\n                $ref: '#/components/schemas/data-parsoid'\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target, and the body contains the actual data-parsoid for the redirect page.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        400:\n          description: Invalid revision\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        403:\n          description: Access to the specific revision is restricted\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        404:\n          description: Unknown page, revision or tid\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/parsoid/data-parsoid/{title}/{revision}/{tid}\n              headers:\n                cache-control: '{{cache-control}}'\n                if-unmodified-since: '{{if-unmodified-since}}'\n                x-restbase-mode: '{{x-restbase-mode}}'\n                x-restbase-parentrevision: '{{x-restbase-parentrevision}}'\n      x-monitor: false\n\n  /lint/{title}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n        options:\n          redirect_cache_control: '{{options.response_cache_control}}'\n      - path: lib/security_response_header_filter.js\n    get: \u0026lint_title_get_spec\n      tags:\n        - Page content\n      summary: Get the linter errors for a specific title/revision.\n      description: |\n        Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: |\n            The lint errors for the given page and optionally revision.\n\n            See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more\n            details.\n          content:\n            application/json:\n              schema:\n                type: object\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        400:\n          description: Invalid revision or tid\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        403:\n          description: Access to the specific revision is restricted\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        404:\n          description: Unknown page, revision or tid\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/parsoid/lint/{title}\n      x-monitor: false\n\n  /lint/{title}/{revision}:\n    get:\n      \u003c\u003c: *lint_title_get_spec\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: revision\n          in: path\n          description: The revision\n          required: true\n          schema:\n            type: integer\n      x-request-handler:\n        - get_from_backend:\n            request:\n              uri: /{domain}/sys/parsoid/lint/{title}/{revision}\n\n  /wikitext/{title}:\n    post:\n      tags:\n        - Page content\n      summary: Save a new revision of a page using Wikitext.\n      description: |\n        For new pages, or when editting the latest revision of a page,\n        the `base_etag` parameter should be left empty.\n        For editing old revisions, it should contain the ETag header\n        of the revision the edit is derived from.\n\n        The latest page revision ETag header should be provided in the If-Match header\n        to detect edit conflicts. If the new page is created, appropriate user cookies\n        must be provided.\n\n        Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - csrf_token\n                - wikitext\n              properties:\n                base_etag:\n                  type: string\n                  description: The ETag header of the revision the edit is based on.\n                wikitext:\n                  type: string\n                  description: The wikitext source of the page to save\n                  x-textarea: true\n                csrf_token:\n                  type: string\n                  description: The CRSF edit token provided by the MW API\n                comment:\n                  type: string\n                  description: The summary of the change\n                is_minor:\n                  type: boolean\n                  description: Whether this represents a minor change\n                is_bot:\n                  type: boolean\n                  description: Whether the change is being made by a bot\n        required: true\n      responses:\n        200:\n          description: The existing revision of the page matches the sent text\n        201:\n          description: A new revision of the page has been created\n          content:\n            application/json:\n              schema:\n                type: object\n                # FIXME: document\n          headers:\n            ETag:\n              description: |\n                ETag header indicating the new revision and timeuuid,\n                separated by a slash:\n                \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n              schema:\n                type: string\n        400:\n          description: Invalid request - lack of required parameters, bad ETags etc.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        409:\n          description: Edit conflict\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      # RB doesn't check for permissions, just prepares a request correctly\n      x-route-filters:\n        - path: ./lib/mediawiki_auth_filter.js\n      x-request-handler:\n        - post_to_backend:\n            request:\n              uri: /{domain}/sys/page_save/wikitext/{title}\n              headers: '{{request.headers}}'\n              body: '{{request.body}}'\n      x-monitor: false\n\ncomponents:\n  schemas:\n    revisions:\n      description: The result format for revision listing\n      required:\n        - items\n      type: object\n      properties:\n        items:\n          $ref: '#/components/schemas/revisionIdentifier'\n\n    listing:\n      description: The result format for listings\n      required:\n        - items\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: string\n        _links:\n          type: object\n          properties:\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: Relative link to next result page.\n\n    data-parsoid:\n      description: Result format for Parsoid data queries\n      required:\n        - counter\n        - ids\n      type: object\n      properties:\n        counter:\n          type: integer\n          format: int32\n        ids:\n          type: object\n          properties: {}\n\n    revision:\n      description: Result format for revision items\n      required:\n        - count\n        - items\n      type: object\n      properties:\n        count:\n          type: integer\n          format: int32\n        items:\n          $ref: '#/components/schemas/revisionInfo'\n\n    revisionInfo:\n      type: object\n      description: Complete information about the revision\n      properties:\n        title:\n          type: string\n        page_id:\n          type: integer\n          format: int32\n        rev:\n          type: integer\n          format: int32\n        tid:\n          type: string\n        comment:\n          type: string\n        restrictions:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            type: string\n        user_id:\n          type: integer\n          format: int32\n        user_text:\n          type: string\n        timestamp:\n          type: string\n          format: date-time\n        redirect:\n          type: boolean\n        page_language:\n          type: string\n\n    revisionIdentifier:\n      type: object\n      description: Unique revision identifier\n      properties:\n        revision:\n          type: integer\n          format: int32\n        tid:\n          type: string\n"
		}
	},
	"Error": "parse: paths: /html/{title}: get: : responses: 404: content: application/problem+json: schema: parse schema: reference \"#/components/schemas/problem\": resolve reference \"#/components/schemas/problem\": schema not found"
}