{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wapache-org/wapadoc"
		},
		"file": {
			"name": "api-docs.yaml",
			"path": "openapi-spring-webjars-ui/src/test/resources/static/api-docs.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Petstore API\n  description: 'This is a sample server Petstore server.  You can find out more about     Swagger\n    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For\n    this sample, you can use the api key `special-key` to test the authorization     filters.'\n  termsOfService: http://swagger.io/terms/\n  license:\n    name: Apache 2.0\n    url: http://springdoc.org\n  version: 1.2.23\nservers:\n  - url: https://springdoc-openapi-test-app2-silly-numbat.eu-de.mybluemix.net\n    description: Generated server url\ntags:\n  - name: user\n    description: the user API\n  - name: store\n    description: the store API\n  - name: pet\n    description: the pet API\npaths:\n  /pet/{petId}:\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"404\":\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: query\n          description: Name of pet that needs to be updated\n          required: false\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of pet that needs to be updated\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      operationId: deletePet\n      parameters:\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid pet value\n        \"200\":\n          description: default response\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: false\n          style: form\n          schema:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n            default: available\n      responses:\n        \"400\":\n          description: Invalid status value\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: false\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"400\":\n          description: Invalid tag value\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet:\n    get:\n      tags:\n        - pet\n      summary: Get all Pets paged\n      description: Get all Pets paged\n      operationId: getAllPets\n      parameters:\n        - name: pageable\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: Update an existing pet by Id\n      operationId: updatePet\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"405\":\n          description: Validation exception\n        \"200\":\n          description: Successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"404\":\n          description: Pet not found\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: Successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/{petId}/uploadImage:\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: additionalMetadata\n          in: query\n          description: Additional Metadata\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModelApiResponse'\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n      security:\n        - api_key: []\n  /store/order/{orderId}:\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of order that needs to be fetched\n          required: true\n          schema:\n            maximum: 5\n            minimum: 1\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"404\":\n          description: Order not found\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value \u003c 1000. Anything\n        above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: Place a new order in the store\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Order'\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"405\":\n          description: Invalid input\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      operationId: createUsersWithArrayInput\n      requestBody:\n        description: List of user object\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: Creates list of users with given input array\n      operationId: createUsersWithListInput\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/User'\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          description: successful operation\n  /user/{username}:\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"404\":\n          description: User not found\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - user\n      summary: Update user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          style: simple\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent user in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        default:\n          description: successful operation\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username/password supplied\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              style: simple\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when toekn expires\n              style: simple\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      operationId: logoutUser\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        default:\n          description: successful operation\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        \"400\":\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n        default:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n    Pet:\n      required:\n        - name\n        - photoUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/Category'\n        photoUrls:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    ModelApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Pageable:\n      type: object\n      properties:\n        sort:\n          $ref: '#/components/schemas/Sort'\n        pageNumber:\n          type: integer\n          format: int32\n        pageSize:\n          type: integer\n          format: int32\n        paged:\n          type: boolean\n        unpaged:\n          type: boolean\n        offset:\n          type: integer\n          format: int64\n    Sort:\n      type: object\n      properties:\n        sorted:\n          type: boolean\n        unsorted:\n          type: boolean\n        empty:\n          type: boolean\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        firstName:\n          type: string\n          example: John\n        lastName:\n          type: string\n          example: James\n        email:\n          type: string\n          example: john@email.com\n        password:\n          type: string\n          example: \"12345\"\n        phone:\n          type: string\n          example: \"12345\"\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          example: 1\n  securitySchemes:\n    basicScheme:\n      type: http\n      scheme: basic\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://petstore3.swagger.io/oauth/authorize\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n"
		}
	},
	"Error": "make ir: path \"/pet\": get: parameters: field \"sort\": nested objects not allowed"
}