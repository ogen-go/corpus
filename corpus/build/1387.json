{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/amplia-iiot/vuepress-theme-openapi"
		},
		"file": {
			"name": "petstore-using-vue.yaml",
			"path": "example/src/.vuepress/public/specs/petstore-using-vue.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: OpenGate Areas\n  version: 1.0.0\n  description: |-\n    This API lets you manage geographical areas in OpenGate.\n  contact:\n    name: OpenGate\n    email: info@amplia.es\n    url: \"https://www.opengate.es\"\nservers:\n  - url: \"https://api.opengate.es\"\nsecurity:\n  - ApiKeyAmplia: []\npaths:\n  /north/v80/search/areas:\n    post:\n      tags:\n        - Searching Areas\n      requestBody:\n        description: |-\n          The OpenGate API query allows to obtain different platform areas.\n          They will be only those on which the user who performs the query has\n          visualization capacity for his domain / organization.\n        content:\n          application/json:\n            schema:\n              $ref: \"schemas.json#/search\"\n            examples:\n              Area geometry filter:\n                description: |-\n                  If you can search by geometry exists the within option to indicate every areas that contains this coordenate.\n                value:\n                  filter:\n                    within:\n                      areas.geometry:\n                        - 2.173200845718384\n                        - 41.36735636905808\n      responses:\n        200:\n          description: |-\n            Expected response to a valid request. \n\n            An example of response could be something like this:\n          content:\n            application/json:\n              example:\n                - organization: organization_area\n                  identifier: area_id\n                  name: Warehouse\n                  description: Warehouse of machinery\n                  geometry: {}\n                  entities:\n                    - identifier1\n                - organization: organization_area\n                  identifier: area_id2\n                  name: Workshop\n                  description: Tools workshop\n                  geometry:\n                    type: Polygon\n                    coordinates:\n                      - - - 2.173200845718384\n                          - 41.36735636905808\n                        - - 2.179992198944092\n                          - 41.364771670743316\n                        - - 2.1802926063537598\n                          - 41.36514206995068\n                  entities: []\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\n  /north/v80/provision/organizations/{organizationName}/areas:\n    post:\n      tags:\n        - New Area\n      summary: Add news Area\n      description: |-\n        New areas can be created by sending a `POST` request using the URL above,\n        including a correctly formatted JSON document in the `POST` body. \n\n        Let’s show first two types of json in function (on the next examples) how\n        is determined the geographic zone by a geojson or adevices gorup.\n        Next, the possibility to have information both of them (geojson and devices group).\n      parameters:\n        - in: path\n          name: organizationName\n          required: true\n          schema:\n            type: string\n            description: Adds on the url path the organization name.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"schemas.json#/Areas\"\n            examples:\n              Area determinated by a devices group as JSON object:\n                value:\n                  identifier: Id\n                  name: area name\n                  description: description\n                  geometry: {}\n                  entities:\n                    - identifier1\n              Area determinated by a geojson as JSON object:\n                description: The polygon must have the first point and the last one equal. That’s how it’s closed.\n                value:\n                  identifier: id\n                  name: area name\n                  description: description\n                  geometry:\n                    type: Polygon\n                    coordinates:\n                      - - - 2.173200845718384\n                          - 41.36735636905808\n                        - - 2.179992198944092\n                          - 41.364771670743316\n                        - - 2.1802926063537598\n                          - 41.36514206995068\n                        - - 2.1783506870269775\n                          - 41.36581039362086\n                        - - 2.175893783569336\n                          - 41.36669611320903\n                        - - 2.1749818325042725\n                          - 41.36675247677479\n                        - - 2.174273729324341\n                          - 41.36718727978374\n                        - - 2.173200845718384\n                          - 41.36735636905808\n              Area determinated by a geojson and a devices group as JSON object:\n                value:\n                  identifier: Id\n                  name: area name\n                  description: description\n                  geometry:\n                    type: Polygon\n                    coordinates:\n                      - - - 2.173200845718384\n                          - 41.36735636905808\n                        - - 2.179992198944092\n                          - 41.364771670743316\n                        - - 2.1802926063537598\n                          - 41.36514206995068\n                        - - 2.1783506870269775\n                          - 41.36581039362086\n                        - - 2.175893783569336\n                          - 41.36669611320903\n                        - - 2.1749818325042725\n                          - 41.36675247677479\n                        - - 2.174273729324341\n                          - 41.36718727978374\n                        - - 2.173200845718384\n                          - 41.36735636905808\n                  entities:\n                    - identifier1\n      responses:\n        201:\n          description: |-\n            Expected response to a valid request.\n\n            In the response we should see a status code of 201 (created) and a location\n            header which tells us the location (including the assigned identifier) of the\n            newly created area.\n            Let’s look the response:\n          headers:\n            Location:\n              schema:\n                type: string\n              description: This headers includes the location information plus (at the end) the area id.\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\n  /north/v80/provision/organizations/{organizationName}/areas/{identifier}:\n    get:\n      tags:\n        - Existing Area\n      summary: Reading Area\n      description: |-\n        You can apply for the area sending a GET request using the URL above.\n        You must replace {identifier} with the identifier of the area you want to retrieve.\n      parameters:\n        - in: path\n          name: organizationName\n          required: true\n          schema:\n            type: string\n            description: Adds on the url path the organization name.\n        - name: identifier\n          in: path\n          required: true\n          description: The id of the datamodel you want to get\n          schema:\n            type: string\n      responses:\n        200:\n          description: |-\n            Expected response to a valid request.\n\n            The response could be somenthing like this.\n          content:\n            application/json:\n              example:\n                organization: organization_area\n                identifier: Id\n                name: area name\n                description: description\n                geometry: {}\n                entities:\n                  - identifier1\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\n    put:\n      tags:\n        - Existing Area\n      summary: Updating Area\n      description: It is allowed updating all the fields except the identifier.\n      parameters:\n        - in: path\n          name: organizationName\n          required: true\n          schema:\n            type: string\n            description: Adds on the url path the organization name.\n        - name: identifier\n          in: path\n          required: true\n          description: The id of the datamodel you want to update\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"schemas.json#/Areas\"\n            example:\n              value:\n                name: area name\n                description: description\n                geometry: {}\n                entities:\n                  - identifier1\n      responses:\n        200:\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\n    delete:\n      tags:\n        - Existing Area\n      summary: deleting Area\n      description: |-\n        You can delete areas by sending a `DELETE` request using the URL above.\n        You must replace `{identifier}` with the identifier of the area you want to delete.\n      parameters:\n        - in: path\n          name: organizationName\n          required: true\n          schema:\n            type: string\n            description: Adds on the url path the organization name.\n        - name: identifier\n          in: path\n          required: true\n          description: The id of the datamodel you want to delete\n          schema:\n            type: string\n      responses:\n        200:\n          description: Expected response to a valid request\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"schemas.json#/Error\"\ncomponents:\n  securitySchemes:\n    ApiKeyAmplia:\n      type: apiKey\n      in: header\n      name: X-ApiKey\n      description: Api Key de acceso al servidor.\n  schemas:\n    Areas:\n      properties:\n        identifier:\n          description: |-\n            Identifier of the area.\n            This field can be included in the creation option and if it is not included it will automatically assign a uuid.\n          type: string\n          example: \u003carea_id\u003e\n        name:\n          description: Name of the area. This field is optional.\n          type: string\n          example: \u003carea_identifier\u003e\n        description:\n          description: Description of the area. This field is optional.\n          type: string\n          example: \u003cdescription\u003e\n        geometry:\n          description: |-\n            Geojson. It contains a type and coordenates of the area.\n            The area supports the following geometry types: Point, Polygon and MultiPolygon.\n          type: object\n          properties:\n            type:\n              type: string\n              enum:\n                - Point\n                - Polygon\n                - MultiPolygon\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n                  example:\n                    - 2.173200845718384\n                    - 41.36735636905808\n        entities:\n          description: Array of identifiers of entities that defining an area.\n          type: array\n          minItems: 1\n          items:\n            type: string\n    filter_fields:\n      description: \"Simple field for filtering, same as Area's fields\"\n      type: object\n      minProperties: 1\n      maxProperties: 1\n      anyOf:\n        - properties:\n            areas.name:\n              description: Name of the area. This field is optional.\n              type: string\n              example: \u003carea_identifier\u003e\n        - properties:\n            areas.identifier:\n              description: |-\n                Identifier of the area.\n                This field can be included in the creation option and if it is not included it will automatically assign a uuid.\n              type: string\n              example: \u003carea_id\u003e\n        - properties:\n            areas.description:\n              description: Description of the area. This field is optional.\n              type: string\n              example: \u003cdescription\u003e\n        - properties:\n            rule.organization:\n              description: organization of the area\n              type: string\n        - properties:\n            areas.entities:\n              description: Array of identifiers of entities that defining an area.\n              type: array\n              minItems: 1\n              items:\n                type: string\n        - properties:\n            areas.geometry:\n              description: |-\n                Geojson. It contains a type and coordenates of the area.\n                The area supports the following geometry types: Point, Polygon and MultiPolygon.\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum:\n                    - Point\n                    - Polygon\n                    - MultiPolygon\n                coordinates:\n                  type: array\n                  items:\n                    type: array\n                    items:\n                      type: number\n                      example:\n                        - 2.173200845718384\n                        - 41.36735636905808\n    filter:\n      type: object\n      properties:\n        and:\n          type: array\n          minItems: 1\n          items:\n            $ref: \"schemas.json#/filter\"\n        or:\n          type: array\n          minItems: 1\n          items:\n            $ref: \"schemas.json#/filter\"\n        like:\n          $ref: \"schemas.json#/filter_fields\"\n        eq:\n          $ref: \"schemas.json#/filter_fields\"\n        neq:\n          $ref: \"schemas.json#/filter_fields\"\n        gt:\n          $ref: \"schemas.json#/filter_fields\"\n        lt:\n          $ref: \"schemas.json#/filter_fields\"\n        gte:\n          $ref: \"schemas.json#/filter_fields\"\n        lte:\n          $ref: \"schemas.json#/filter_fields\"\n        in:\n          $ref: \"schemas.json#/array_field\"\n        nin:\n          $ref: \"schemas.json#/array_field\"\n        exists:\n          $ref: \"schemas.json#/boolean_field\"\n        within:\n          $ref: \"schemas.json#/geometry_field\"\n    search:\n      type: object\n      properties:\n        filter:\n          $ref: \"schemas.json#/filter_fields\"\n        limit:\n          $ref: \"schemas.json#/limit\"\n        sort:\n          $ref: \"schemas.json#/sort\"\n        group:\n          $ref: \"schemas.json#/group\"\n        select:\n          $ref: \"schemas.json#/select\"\n"
		}
	},
	"Error": "parse: paths: /north/v80/provision/organizations/{organizationName}/areas: post: operation \"\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"schemas.json#/Areas\": resolve reference \"schemas.json#/Areas\": invalid schema reference \"schemas.json#/Areas\""
}