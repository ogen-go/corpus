{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cmeeren/FSharp.JsonApi"
		},
		"file": {
			"name": "spec.yaml",
			"path": "src/FSharp.JsonApi.SampleApp/wwwroot/spec/spec.yaml",
			"content": "ï»¿openapi: 3.0.2\ninfo:\n  version: 1.0.0\n  title: Sample API\n  description: |\n    \n    # Introduction\n    \n    This API and specification is a demo for showing how to create (and\n    document) an API using [FSharp.JsonApi](https://github.com/cmeeren/FSharp.JsonApi/).\n    \n    \n    \n    ## Contact\n    \n    *You might want to have contact details for API clients.*\n      \n    \n    \n    ## Definitions\n    \n    The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n    \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n    \"OPTIONAL\" in this document are to be interpreted as described in [BCP\n    14](https://tools.ietf.org/html/bcp14)\n    [[RFC2119](https://tools.ietf.org/html/rfc2119)]\n    [[RFC8174](https://tools.ietf.org/html/rfc8174)] when, and only when, they\n    appear in all capitals, as shown here.\n    \n    \n    \n    ## Versioning\n    \n    This API specification follows [Semantic Versioning\n    v2.0.0](https://semver.org/spec/v2.0.0.html). In particular:\n    \n    * The **major** version is incremented for backwards incompatible changes\n      (e.g. removing deprecated interfaces).\n    * The **minor** version is incremented when new functionality is added in a\n      backwards compatible manner.\n    * The **patch** version is optionally incremented for backwards compatible\n      changes that do not add new functionality, such as bug fixes or editorial\n      changes not affecting the functionality.\n    \n    \n    ### Version history\n    \n    #### 1.0.0 (YYYY-MM-DD)\n    \n    * Initial release\n    \n    \n    ## On the format of this specification\n    \n    This API conforms to the [JSON:API](http://jsonapi.org) standard.\n    Familiarity with the [JSON:API v1.0 specification](https://jsonapi.org/format/1.0/)\n    is assumed throughout this documentation.\n    \n    The central part of this documentation is the definition of the JSON:API\n    resources provided by the API, together with the endpoints and operations by\n    which these resources may be queried and manipulated. The technicalities of\n    the JSON:API response format and its semantics, as well as some runtime\n    behavior (such as guaranteed status codes for some specific error\n    conditions), are handled by the JSON:API specification.\n    \n    You can use the download button at the top of this page to download the raw\n    OpenAPI YAML file used to generate this page, with all model definitions,\n    operations, etc. Note however that the sole purpose of the YAML file is to\n    render this document, and no guarantees can be made about the stability of\n    exactly how the YAML file defines and composes models, paths, etc. JSON:API\n    is a complex and rich specification that does not mesh perfectly with\n    OpenAPI, so API clients might be better off using an existing JSON:API\n    client library rather than using the YAML file to generate client code.\n    \n    To facilitate simpler testing and integration, this is not a purely\n    link-driven hypermedia API. In particular, this specification guarantees a\n    static URL structure that may be safely hardcoded. (However, clients are of\n    course free to use any documented links provided in the responses if\n    desired).\n    \n    *Note: OpenAPI is path-focused, but if you wish not to document a static URL\n    structure, you can work around it by for example replacing paths such as\n    `/persons/{id}` with `{person.links.self}` and `/persons/{id}/articles` with\n    `{person.relationships.articles.links.related}`. This is by no means a\n    standard, but is hopefully understandable to human readers.*\n    \n    \n    ### Conventions\n    \n    * Unless otherwise specified, all operations support `fields` and `include`.\n      By default, all fields are included, and no related resources are\n      included.\n      \n    * All resource relationship endpoints work according to the JSON:API\n      specification and will not be listed here unless they provide additional\n      non-standard functionality.\n    \n    * The response formats and examples only specify the most important data.\n      Responses may contain additional data such as included resources and\n      relationship linkage as per the JSON:API specification.\n    \n    * The stand-alone resource definitions are provided from a response\n      perspective (e.g. whether properties are marked as \"required\", see the\n      section below on optional vs. required parameters).\n    \n    * As per the JSON:API specification, links may be simple strings or objects with\n      `href` and/or `meta` properties. For simplicity, links without any current\n      meta may be documented as simple strings. However, any link may be\n      extended with meta in the future without this being considered a breaking\n      change. Therefore, as per the JSON:API specification, clients MUST be able\n      to parse links as both simple strings and as objects with `href` and/or\n      `meta` properties.\n    \n    \n    ## Technical requirements and recommendations\n    \n    \n    ### Comply with the JSON:API specification\n    \n    Clients and servers MUST comply with the JSON:API specification unless\n    otherwise noted. Any parts of this specification that does not comply with\n    the JSON:API specification MUST explicitly state that it deviates from the\n    JSON:API specification.\n    \n    If this specification deviates from the JSON:API specification without\n    explicitly stating so, this should be considered a bug in the specification\n    and the documented behavior is undefined. Please contact us to report bugs\n    in the API or its specification.\n    \n    \n    ### Don't depend on unspecified runtime behaviour\n    \n    Clients MUST NOT depend on observed runtime behavior not recognized by this\n    specification or the JSON:API specification. This includes, but is not\n    limited to, HTTP status codes. Behaviour that is not guaranteed by this\n    specification or the JSON:API specification may change at any time. This\n    specification is the sole contract by which clients and servers should\n    communicate.\n    \n    If the server implementation violates this specification, that must be\n    considered a bug in either the specification or the server implementation.\n    Please contact us to report bugs in the API or its specification.\n    \n    \n    ### Resource IDs have no semantic meaning or implicit structure\n    \n    Clients MUST NOT parse or construct resource IDs based on assumed semantic\n    meaning.\n    \n    If clients need to act on semantic information that only seems to be present\n    in a resource identifier, please contact us to have the specification\n    extended with the necessary semantic information/functionality.\n    \n    Furthermore, resource IDs are strings without any implicit structure. For\n    example, even if a resource ID looks like a valid GUID, that may not be the\n    case for all resources of that type, or it may not be the case in the\n    future. Unless documented otherwise, resource IDs must be treated as strings\n    with an undefined length. If you need to know the maximum length of an ID\n    with unspecified length, e.g. in order to store the ID in a database, please\n    contact us to have the specifiation extended with the necessary guarantees.\n    \n    \n    ### Ignore unrecognized members\n    \n    Clients and servers MUST ignore members, headers, and parameters not\n    recognized by this specification or the JSON:API specification.\n    \n    \n    ### Parameters are non-null by default\n    \n    Clients and servers MUST NOT use `null` as a value for any parameter unless\n    the parameter is explicitly specified as nullable. Note that nullability of\n    globally defined parameters (e.g. resource fields) may be explicitly\n    overridden (by this specification) for specific requests/responses.\n    \n    \n    ### Parameters are optional by default\n    \n    Clients MAY omit any request parameter (in query, header, or body) and\n    servers MAY omit any response parameter (in header or body) unless\n    explicitly required by this specification or the JSON:API specification.\n    Note that whether a globally defined parameter (e.g. a resource field) is\n    required may be overridden for specific requests/responses.\n    \n      * Exception: Resource fields (attributes and relationships) marked as\n        required may still be excluded from responses according to\n        client-supplied sparse fieldsets.\n      * Exception: If all attributes or relationships are excluded using sparse\n        fieldsets, the `attributes` and `relationships` objects may be omitted\n        even if marked as required\n    \n    \n    ### Consider using sparse fieldsets\n    \n    Clients SHOULD use sparse fieldsets to specify the desired attributes and\n    relationships.\n    \n    Using sparse fieldsets to exclude unneeded attributes and relationships may\n    have a notable impact on performance for large responses. This particularly\n    goes for relationships due to the overhead of the relationship links.\n    \n    Even if a client needs all currently defined fields for a resource, using\n    sparse fieldsets means that the addition of new fields won't slow down\n    existing requests.\n    \n    Furthermore, always using sparse fieldsets makes it easier for the API\n    developers to monitor which fields are used. This makes it easier to tune\n    performance and safer to remove deprecated fields.\n    \n    \n    ### Deprecation\n    \n    Responses to any request using deprecated interfaces (such as deprecated\n    request parameters) SHOULD contain a `Deprecated` header describing which\n    deprecated interfaces were used. Clients SHOULD monitor this header.\n    \n    Deprecated interfaces SHOULD specify a time of removal in this specification\n    and in the `Deprecated` header, and MAY be removed earlier than the\n    pre-determined time if the interface is unused.\n    \n    Clients MUST NOT use deprecated interfaces they previously did not use.\n    \n    \n    ### Error responses\n    \n    The returned JSON:API error objects SHOULD contain an error code that\n    unambiguously specifies the error condition.\n    \n    Servers MAY return other error codes than those recognized by this\n    specification. For example, endpoints may return unspecified error codes\n    related to contract violations (e.g. invalid syntax, missing required\n    parameters), which are expected to be caught in development/testing and are\n    not useful to govern client runtime behavior.\n   \n    The following error codes may occur for any operation:\n    \n    | Code               | Description |\n    |--------------------|-------------|\n    | `UnknownError`     | An unknown error occurred.\n    | `Unauthorized`     | The authorization was missing or invalid for this operation.\n    | `ResourceNotFound` | The operation refers to a resource that does not exist.\n    \n    \n    ## API implementation notes\n   \n    The following points are intended as helpful notes regarding our API\n    implementation. They are not part of the specification.\n   \n    * Some database queries have long cache times under the assumption that the\n      data changes very infrequently and that when they do change, API clients\n      do not need 100% up-to-date data. Please contact us if you find stale API\n      data to be a problem.\n    \n    * Since pagination is implemented using offset/limit, the pagination windows\n      are unstable (i.e., new data may be added or deleted at any time,\n      potentially causing missed or duplicated results when switching pages).\n\n\nservers:\n  - url: http://localhost:5000\n    description: Local testing server\n\n\ntags:\n  - name: Person\n    description: |\n      Represents a single physical person that may be an author of an article or\n      a comment.\n      \n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/personResponse\" /\u003e\n\n  - name: Article\n    description: |\n      Represents a piece of writing.\n      \n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/articleResponse\" /\u003e\n\n  - name: Comment\n    description: |\n      Represents a comment to an article.\n      \n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/commentResponse\" /\u003e\n    \n\npaths:\n\n\n  /persons:\n\n    get:\n      summary: Search persons\n      description: Returns all persons.\n      tags:\n        - Person\n      parameters:\n        - in: query\n          name: \"filter[firstName]\"\n          description: Only return persons with this specific first name.\n          schema:\n            type: string\n          example: John\n        - in: query\n          name: \"filter[lastName]\"\n          description: Only return persons with this specific last name.\n          schema:\n            type: string\n          example: Doe\n        - in: query\n          name: \"filter[twitter]\"\n          description: Only return persons with this specific Twitter handle.\n          schema:\n            type: string\n          example: \"@johndoe\"\n        - in: query\n          name: \"filter[gender]\"\n          description: Only return persons with one of these genders.\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/gender'\n            example:\n              - male\n              - female\n        - in: query\n          name: sort\n          description: \u003e\n            As per the JSON:API specification. Supports a single value, which\n            may be ascending or descending.\n          schema:\n            type: string\n            enum:\n              - firstName\n              - lastName\n            default: firstName\n            example: -firstName\n        - in: query\n          name: \"page[offset]\"\n          description: Skip this many results.\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n            example: 10\n        - in: query\n          name: \"page[limit]\"\n          description: Return at most this many results.\n          schema:\n            type: integer\n            minimum: 1\n            default: 10\n            example: 20\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/personResponseCollectionDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    post:\n      summary: Create person\n      description: Creates a new person.\n      tags:\n        - Person\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/personPostDocument'\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/personResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n  /persons/{id}:\n\n    get:\n      summary: Get person\n      description: Returns the person with the specified ID. This is identical to the person's `self` link.\n      tags:\n        - Person\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The person's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/personResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    patch:\n      summary: Update person\n      description: Updates a person.\n      tags:\n        - Person\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The person's `id`.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/personPatchDocument'\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/personResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    delete:\n      summary: Delete person\n      description: Deletes a person.\n      tags:\n        - Person\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The person's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n  /articles:\n\n    get:\n      summary: Search articles\n      description: Returns all articles.\n      tags:\n        - Article\n      parameters:\n        - in: query\n          name: \"filter[title]\"\n          description: Only return articles with this specific title.\n          schema:\n            type: string\n          example: Moon\n        - in: query\n          name: \"filter[type]\"\n          description: Only return articles with one of these types.\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/articleType'\n            example:\n              - personal\n              - commercial\n        - in: query\n          name: \"filter[created][ge]\"\n          description: Only return articles created on or after this time.\n          schema:\n            type: string\n            format: date-time\n          example: \"2019-09-06T19:43:45Z\"\n        - in: query\n          name: \"filter[created][le]\"\n          description: Only return articles created on or before this time.\n          schema:\n            type: string\n            format: date-time\n          example: \"2019-09-06T19:43:45Z\"\n        - in: query\n          name: sort\n          description: \u003e\n            As per the JSON:API specification. Supports a single value, which\n            may be ascending or descending.\n          schema:\n            type: string\n            enum:\n              - title\n              - created\n            default: -created\n            example: title\n        - in: query\n          name: \"page[offset]\"\n          description: Skip this many results.\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n            example: 10\n        - in: query\n          name: \"page[limit]\"\n          description: Return at most this many results.\n          schema:\n            type: integer\n            minimum: 1\n            default: 10\n            example: 20\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/articleResponseCollectionDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    post:\n      summary: Create article\n      description: Creates a new article.\n      tags:\n        - Article\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/articlePostDocument'\n                              \n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/articleResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n  /article/{id}:\n\n    get:\n      summary: Get article\n      description: Returns the article with the specified ID. This is identical to the article's `self` link.\n      tags:\n        - Article\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The article's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/articleResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    patch:\n      summary: Update article\n      description: Updates an article.\n      tags:\n        - Article\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The article's `id`.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/articlePatchDocument'\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/articleResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    delete:\n      summary: Delete article\n      description: Deletes an article.\n      tags:\n        - Article\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The article's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n  /comments:\n\n    get:\n      summary: Search comments\n      description: Returns all comments.\n      tags:\n        - Comment\n      parameters:\n        - in: query\n          name: \"filter[author]\"\n          description: Only return comments authored by the `person` with the specified `id`.\n          schema:\n            type: string\n          example: ff011ab753e44d46\n        - in: query\n          name: \"filter[author.firstName]\"\n          description: Only return comments whose author has the specified `firstName`.\n          schema:\n            type: string\n          example: John\n        - in: query\n          name: sort\n          description: \u003e\n            As per the JSON:API specification. Supports a single value, which\n            may be ascending or descending.\n          schema:\n            type: string\n            enum:\n              - created\n            default: -created\n            example: created\n        - in: query\n          name: \"page[offset]\"\n          description: Skip this many results.\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n            example: 10\n        - in: query\n          name: \"page[limit]\"\n          description: Return at most this many results.\n          schema:\n            type: integer\n            minimum: 1\n            default: 10\n            example: 20\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/commentResponseCollectionDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    post:\n      summary: Create comment\n      description: Creates a new comment.\n      tags:\n        - Comment\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/commentPostDocument'\n                              \n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/commentResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n  /comment/{id}:\n\n    get:\n      summary: Get comment\n      description: Returns the comment with the specified ID. This is identical to the comment's `self` link.\n      tags:\n        - Comment\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The comment's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/commentResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    patch:\n      summary: Update comment\n      description: Updates an comment.\n      tags:\n        - Comment\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The comment's `id`.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/vnd.api+json:\n            schema:\n              $ref: '#/components/schemas/commentPatchDocument'\n      responses:\n        \"2XX\":\n          description: OK\n          content:\n            application/vnd.api+json:\n              schema:\n                $ref: '#/components/schemas/commentResponseDocument'\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n    delete:\n      summary: Delete comment\n      description: Deletes an comment.\n      tags:\n        - Comment\n      parameters:\n        - in: path\n          required: true\n          name: \"id\"\n          description: The comment's `id`.\n          schema:\n            type: string\n      responses:\n        \"2XX\":\n          description: OK\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorDocument'\n\n\n\ncomponents:\n\n\n  schemas:\n\n\n    gender:\n      type: string\n      enum:\n        - male\n        - female\n        - other\n\n\n    articleType:\n      type: string\n      enum:\n        - personal\n        - commercial\n\n\n    error:\n      properties:\n        id:\n          description: \u003e\n            A unique string intended to help find this specific\n            occurrence in debug logs. Can be communicated to API developers\n            to help investigate the events leading up to this particular error.\n          type: string\n          example: e47f2b5615204d5e8217d5061f0511ee\n        code:\n          type: string\n          description: \u003e\n            Identifies a specific error condition. Intended for programmatic parsing\n            and will not change for a given error condition.\n          example: SomeErrorCode\n        title:\n          type: string\n          description: \u003e\n            A short description of the problem. Intended as a helpful message to developers.\n            The message may change without notice for any given error condition.\n          example: Some Error\n        detail:\n          description: \u003e\n            A more detailed description of the problem. Intended as a helpful message\n            to developers. The message may change without notice for any given error condition.\n          type: string\n          example: A helpful description for the developer\n\n    errorDocument:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/error\"\n\n\n    selfLink:\n      type: object\n      readOnly: true\n      required:\n        - self\n      properties:\n        self:\n          type: string\n          format: uri\n          example: https://api.example.com/foo/1\n          description: As per the JSON:API specification.\n\n    relatedLink:\n      type: object\n      readOnly: true\n      required:\n        - related\n      properties:\n        related:\n          type: string\n          format: uri\n          example: https://api.example.com/foo/1/bar\n          description: As per the JSON:API specification.\n\n\n    resourceIdentifier:\n      type: object\n      description: A resource identifier.\n      required:\n        - type\n        - id\n      properties:\n        type:\n          type: string\n          example: foobar\n          description: As per the JSON:API specification.\n        id:\n          type: string\n          example: ff011ab753e44d46\n          description: As per the JSON:API specification.\n\n\n    relationshipLinkRelated:\n      type: object\n      required:\n        - links\n      properties:\n        links:\n          allOf:\n            - $ref: '#/components/schemas/relatedLink'\n\n\n    relationshipDataToMany:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/resourceIdentifier'\n\n\n    relationshipDataToOneNullable:\n      type: object\n      properties:\n        data:\n          allOf:\n            - $ref: '#/components/schemas/resourceIdentifier'\n            - nullable: true\n\n\n    relationshipDataToOneNonNullable:\n      type: object\n      properties:\n        data:\n          allOf:\n            - $ref: '#/components/schemas/resourceIdentifier'\n\n\n    personAttributes:\n      type: object\n      properties:\n        firstName:\n          type: string\n          example: John\n          description: The person's first name.\n        lastName:\n          type: string\n          example: Doe\n          description: The person's last name\n        twitter:\n          type: string\n          nullable: true\n          example: \"@johndoe\"\n          description: The person's Twitter handle.\n        gender:\n          allOf:\n            - $ref: '#/components/schemas/gender'\n            - nullable: true\n              description: The person's gender.\n\n    personAttributesResponseRequired:\n      type: object\n      required:\n        - firstName\n        - lastName\n        - twitter\n        - gender\n\n    personAttributesPostRequired:\n      type: object\n      required:\n        - firstName\n        - lastName\n\n    personRelationships:\n      type: object\n      properties:\n        articles:\n          allOf:\n            - $ref: '#/components/schemas/relationshipLinkRelated'\n            - $ref: '#/components/schemas/relationshipDataToMany'\n            - type: object\n              description: To-many `article`. All articles this person is an author of.\n              readOnly: true\n              properties:\n                data:\n                  type: array\n                  items:\n                    properties:\n                      type:\n                        enum: [\"article\"]\n\n    personRelationshipsResponseRequired:\n      type: object\n      required:\n        - articles\n\n    personResponse:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - relationships\n        - links\n      properties:\n        type:\n          type: string\n          enum:\n            - person\n          description: The resource type.\n        id:\n          type: string\n          example: ff011ab753e44d46\n          description: The resource ID.\n        attributes:\n          allOf:\n            - $ref: '#/components/schemas/personAttributes'\n            - $ref: '#/components/schemas/personAttributesResponseRequired'\n        relationships:\n          allOf:\n            - $ref: '#/components/schemas/personRelationships'\n            - $ref: '#/components/schemas/personRelationshipsResponseRequired'\n        links:\n          allOf:\n            - $ref: '#/components/schemas/selfLink'\n\n    personResponseDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          allOf:\n            - $ref: \"#/components/schemas/personResponse\"\n\n    personResponseCollectionDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/personResponse\"\n\n    personPostDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - attributes\n          properties:\n            type:\n              type: string\n              enum:\n                - person\n              description: The resource type.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/personAttributes'\n                - $ref: '#/components/schemas/personAttributesPostRequired'\n\n    personPatchDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - id\n          properties:\n            type:\n              type: string\n              enum:\n                - person\n              description: The resource type.\n            id:\n              type: string\n              example: ff011ab753e44d46\n              description: The resource ID.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/personAttributes'\n\n\n    articleAttributes:\n      type: object\n      properties:\n        title:\n          type: string\n          example: On the Moon\n          description: The article's title.\n        body:\n          type: string\n          example: \"One small step for a man, one giant leap for mankind\"\n          description: The article's body.\n        type:\n          allOf:\n            - $ref: '#/components/schemas/articleType'\n            - description: The article's type.\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n          description: The time the article was created.\n        updated:\n          type: string\n          format: date-time\n          nullable: true\n          readOnly: true\n          description: \u003e\n            The time the article was last updated. `null` if the article has not\n            been updated.\n\n    articleAttributesResponseRequired:\n      type: object\n      required:\n        - title\n        - body\n        - type\n        - created\n        - updated\n\n    articleAttributesPostRequired:\n      type: object\n      required:\n        - title\n        - body\n\n    articleRelationships:\n      type: object\n      properties:\n        author:\n          allOf:\n            - $ref: '#/components/schemas/relationshipLinkRelated'\n            - $ref: '#/components/schemas/relationshipDataToOneNonNullable'\n            - type: object\n              description: To-one `person`. The article's author.\n              properties:\n                data:\n                  properties:\n                    type:\n                      enum: [\"person\"]\n        comments:\n          allOf:\n            - $ref: '#/components/schemas/relationshipLinkRelated'\n            - $ref: '#/components/schemas/relationshipDataToMany'\n            - type: object\n              description: To-many `comment`. The article's comments.\n              readOnly: true\n              properties:\n                data:\n                  type: array\n                  items:\n                    properties:\n                      type:\n                        enum: [\"comment\"]\n\n    articleRelationshipsResponseRequired:\n      type: object\n      required:\n        - author\n        - comments\n\n    articleRelationshipsPostRequired:\n      type: object\n      required:\n        - author\n\n    articleResponse:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - relationships\n        - links\n      properties:\n        type:\n          type: string\n          enum:\n            - article\n          description: The resource type.\n        id:\n          type: string\n          example: ff011ab753e44d46\n          description: The resource ID.\n        attributes:\n          allOf:\n            - $ref: '#/components/schemas/articleAttributes'\n            - $ref: '#/components/schemas/articleAttributesResponseRequired'\n        relationships:\n          allOf:\n            - $ref: '#/components/schemas/articleRelationships'\n            - $ref: '#/components/schemas/articleRelationshipsResponseRequired'\n        links:\n          allOf:\n            - $ref: '#/components/schemas/selfLink'\n\n    articleResponseDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          allOf:\n            - $ref: \"#/components/schemas/articleResponse\"\n\n    articleResponseCollectionDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/articleResponse\"\n\n    articlePostDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - attributes\n            - relationships\n          properties:\n            type:\n              type: string\n              enum:\n                - article\n              description: The resource type.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/articleAttributes'\n                - $ref: '#/components/schemas/articleAttributesPostRequired'\n            relationships:\n              allOf:\n                - $ref: '#/components/schemas/articleRelationships'\n                - $ref: '#/components/schemas/articleRelationshipsPostRequired'\n                - properties:\n                    author:\n                      required:\n                        - data\n\n    articlePatchDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - id\n          properties:\n            type:\n              type: string\n              enum:\n                - article\n              description: The resource type.\n            id:\n              type: string\n              example: ff011ab753e44d46\n              description: The resource ID.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/articleAttributes'\n            relationships:\n              allOf:\n                - $ref: '#/components/schemas/articleRelationships'\n                - properties:\n                    author:\n                      required:\n                        - data\n\n\n    commentAttributes:\n      type: object\n      properties:\n        body:\n          type: string\n          example: First!\n          description: The comment's body.\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n          description: The time the comment was created.\n        updated:\n          type: string\n          format: date-time\n          nullable: true\n          readOnly: true\n          description: \u003e\n            The time the comment was last updated. `null` if the comment has not\n            been updated.\n\n    commentAttributesResponseRequired:\n      type: object\n      required:\n        - body\n        - created\n        - updated\n\n    commentAttributesPostRequired:\n      type: object\n      required:\n        - body\n\n    commentRelationships:\n      type: object\n      properties:\n        author:\n          allOf:\n            - $ref: '#/components/schemas/relationshipLinkRelated'\n            - $ref: '#/components/schemas/relationshipDataToOneNonNullable'\n            - type: object\n              description: To-one `person`. The comment's author.\n              properties:\n                data:\n                  properties:\n                    type:\n                      enum: [\"person\"]\n        article:\n          allOf:\n            - $ref: '#/components/schemas/relationshipLinkRelated'\n            - $ref: '#/components/schemas/relationshipDataToOneNonNullable'\n            - type: object\n              description: To-one `article`. The article this is a comment on.\n              properties:\n                data:\n                  properties:\n                    type:\n                      enum: [\"article\"]\n\n    commentRelationshipsResponseRequired:\n      type: object\n      required:\n        - author\n        - article\n\n    commentRelationshipsPostRequired:\n      type: object\n      required:\n        - author\n        - article\n\n    commentResponse:\n      type: object\n      required:\n        - type\n        - id\n        - attributes\n        - relationships\n        - links\n      properties:\n        type:\n          type: string\n          enum:\n            - comment\n          description: The resource type.\n        id:\n          type: string\n          example: ff011ab753e44d46\n          description: The resource ID.\n        attributes:\n          allOf:\n            - $ref: '#/components/schemas/commentAttributes'\n            - $ref: '#/components/schemas/commentAttributesResponseRequired'\n        relationships:\n          allOf:\n            - $ref: '#/components/schemas/commentRelationships'\n            - $ref: '#/components/schemas/commentRelationshipsResponseRequired'\n        links:\n          allOf:\n            - $ref: '#/components/schemas/selfLink'\n\n    commentResponseDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          allOf:\n            - $ref: \"#/components/schemas/commentResponse\"\n\n    commentResponseCollectionDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/commentResponse\"\n\n    commentPostDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - attributes\n            - relationships\n          properties:\n            type:\n              type: string\n              enum:\n                - comment\n              description: The resource type.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/commentAttributes'\n                - $ref: '#/components/schemas/commentAttributesPostRequired'\n            relationships:\n              allOf:\n                - $ref: '#/components/schemas/commentRelationships'\n                - $ref: '#/components/schemas/commentRelationshipsPostRequired'\n                - properties:\n                    author:\n                      required:\n                        - data\n                    article:\n                      required:\n                        - data\n\n    commentPatchDocument:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: object\n          required:\n            - type\n            - id\n          properties:\n            type:\n              type: string\n              enum:\n                - comment\n              description: The resource type.\n            id:\n              type: string\n              example: ff011ab753e44d46\n              description: The resource ID.\n            attributes:\n              allOf:\n                - $ref: '#/components/schemas/commentAttributes'\n"
		}
	},
	"Error": "make ir: path \"/persons/{id}\": get: responses: parse response status code: strconv.Atoi: parsing \"2XX\": invalid syntax"
}