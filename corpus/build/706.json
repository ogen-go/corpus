{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "maven/com.influxdb/influxdb-client-java"
		},
		"file": {
			"name": "swagger.yml",
			"path": "swagger.yml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Influx API Service\n  version: 0.1.0\nservers:\n  - url: /api/v2\npaths:\n  /signin:\n    post:\n      operationId: PostSignin\n      summary: Exchange basic auth credentials for session\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: Successfully authenticated\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '403':\n          description: user account is disabled\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /signout:\n    post:\n      operationId: PostSignout\n      summary: Expire the current session\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '204':\n          description: Session successfully expired\n        '401':\n          description: Unauthorized access\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unsuccessful session expiry\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /:\n    get:\n      operationId: GetRoutes\n      summary: Map of all top level routes available\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        default:\n          description: All routes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Routes\"\n  /setup:\n    get:\n      operationId: GetSetup\n      tags:\n        - Setup\n      summary: Check if database has default user, org, bucket\n      description: Returns `true` if no default user, organization, or bucket has been created.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description:\n            allowed true or false\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IsOnboarding\"\n    post:\n      operationId: PostSetup\n      tags:\n        - Setup\n      summary: Set up initial user, org and bucket\n      description: Post an onboarding request to set up initial user, org and bucket.\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Source to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OnboardingRequest\"\n      responses:\n        '201':\n          description: Created default user, bucket, org\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OnboardingResponse\"\n  /documents/templates:\n    get:\n      operationId: GetDocumentsTemplates\n      tags:\n        - Templates\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: org\n            description: Specifies the name of the organization of the template.\n            schema:\n              type: string\n          - in: query\n            name: orgID\n            description: Specifies the organization ID of the template.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: A list of template documents\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Documents\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDocumentsTemplates\n      tags:\n        - Templates\n      summary: Create a template\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Template that will be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DocumentCreate\"\n      responses:\n        '201':\n          description: Template created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/documents/templates/{templateID}':\n    get:\n      operationId: GetDocumentsTemplatesID\n      tags:\n        - Templates\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n      responses:\n        '200':\n          description: The template requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutDocumentsTemplatesID\n      tags:\n        - Templates\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n      requestBody:\n        description: Template that will be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DocumentUpdate\"\n      responses:\n        '200':\n          description: The newly updated template\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteDocumentsTemplatesID\n      tags:\n        - Templates\n      summary: Delete a template\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/documents/templates/{templateID}/labels':\n    get:\n      operationId: GetDocumentsTemplatesIDLabels\n      tags:\n        - Templates\n      summary: List all labels for a template\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n      responses:\n        '200':\n          description: A list of all labels for a template\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDocumentsTemplatesIDLabels\n      tags:\n        - Templates\n      summary: Add a label to a template\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label added to the template\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/documents/templates/{templateID}/labels/{labelID}':\n    delete:\n      operationId: DeleteDocumentsTemplatesIDLabelsID\n      tags:\n        - Templates\n      summary: Delete a label from a template\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: templateID\n          schema:\n            type: string\n          required: true\n          description: The template ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Template not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /telegrafs:\n    get:\n      operationId: GetTelegrafs\n      tags:\n        - Telegrafs\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: orgID\n            description: The organization ID the Telegraf config belongs to.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: A list of Telegraf configs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegrafs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTelegrafs\n      tags:\n        - Telegrafs\n      summary: Create a Telegraf config\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Telegraf config to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TelegrafRequest\"\n      responses:\n        '201':\n          description: Telegraf config created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}':\n    get:\n      operationId: GetTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Retrieve a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n        - in: header\n          name: Accept\n          required: false\n          schema:\n            type: string\n            default: application/toml\n            enum:\n              - application/toml\n              - application/json\n              - application/octet-stream\n      responses:\n        '200':\n          description: Telegraf config details\n          content:\n            application/toml:\n              example: \"[agent]\\ninterval = \\\"10s\\\"\"\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n            application/octet-stream:\n              example: \"[agent]\\ninterval = \\\"10s\\\"\"\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Update a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Telegraf config update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TelegrafRequest\"\n      responses:\n        '200':\n          description: An updated Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Telegraf\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteTelegrafsID\n      tags:\n        - Telegrafs\n      summary: Delete a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/labels':\n    get:\n      operationId: GetTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: List all labels for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of all labels for a Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTelegrafsIDLabels\n      tags:\n        - Telegrafs\n      summary: Add a label to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label added to the Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTelegrafsIDLabelsID\n      tags:\n        - Telegrafs\n      summary: Delete a label from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Telegraf config not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/members':\n    get:\n      operationId: GetTelegrafsIDMembers\n      tags:\n        - Users\n        - Telegrafs\n      summary: List all users with member privileges for a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of Telegraf config members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTelegrafsIDMembers\n      tags:\n        - Users\n        - Telegrafs\n      summary: Add a member to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Member added to Telegraf config\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/members/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDMembersID\n      tags:\n        - Users\n        - Telegrafs\n      summary: Remove a member from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/owners':\n    get:\n      operationId: GetTelegrafsIDOwners\n      tags:\n        - Users\n        - Telegrafs\n      summary: List all owners of a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '200':\n          description: A list of Telegraf config owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTelegrafsIDOwners\n      tags:\n        - Users\n        - Telegrafs\n      summary: Add an owner to a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Telegraf config owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/telegrafs/{telegrafID}/owners/{userID}':\n    delete:\n      operationId: DeleteTelegrafsIDOwnersID\n      tags:\n        - Users\n        - Telegrafs\n      summary: Remove an owner from a Telegraf config\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: telegrafID\n          schema:\n            type: string\n          required: true\n          description: The Telegraf config ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /scrapers:\n    get:\n      operationId: GetScrapers\n      tags:\n        - ScraperTargets\n      summary: Get all scraper targets\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: name\n            description: Specifies the name of the scraper target.\n            schema:\n              type: string\n          - in: query\n            name: id\n            description: List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.\n            schema:\n              type: array\n              items:\n                type: string\n          - in: query\n            name: orgID\n            description: Specifies the organization ID of the scraper target.\n            schema:\n              type: string\n          - in: query\n            name: org\n            description: Specifies the organization name of the scraper target.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: All scraper targets\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScraperTargetResponses\"\n    post:\n      operationId: PostScrapers\n      summary: Create a scraper target\n      tags:\n        - ScraperTargets\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Scraper target to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScraperTargetRequest\"\n      responses:\n        '201':\n          description: Scraper target created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScraperTargetResponse\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}':\n    get:\n      operationId: GetScrapersID\n      tags:\n        - ScraperTargets\n      summary: Get a scraper target by ID\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          required: true\n          schema:\n            type: string\n          description: The scraper target ID.\n      responses:\n        '200':\n          description: Scraper target updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScraperTargetResponse\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteScrapersID\n      tags:\n        - ScraperTargets\n      summary: Delete a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          required: true\n          schema:\n            type: string\n          description: The scraper target ID.\n      responses:\n        '204':\n          description: Scraper target deleted\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchScrapersID\n      summary: Update a scraper target\n      tags:\n        - ScraperTargets\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          required: true\n          schema:\n            type: string\n          description: The scraper target ID.\n      requestBody:\n        description: Scraper target update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScraperTargetRequest\"\n      responses:\n        '200':\n          description: Scraper target updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScraperTargetResponse\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/labels':\n    get:\n      operationId: GetScrapersIDLabels\n      tags:\n        - ScraperTargets\n      summary: List all labels for a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      responses:\n        '200':\n          description: A list of all labels for a scraper target\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostScrapersIDLabels\n      tags:\n        - ScraperTargets\n      summary: Add a label to a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/labels/{labelID}':\n    delete:\n      operationId: DeleteScrapersIDLabelsID\n      tags:\n        - ScraperTargets\n      summary: Delete a label from a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Scraper target not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchScrapersIDLabelsID\n      tags:\n        - ScraperTargets\n      summary: Update a label on a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      requestBody:\n        description: Label update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Label\"\n      responses:\n        '200':\n          description: Updated successfully\n        '404':\n          description: Scraper target not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/members':\n    get:\n      operationId: GetScrapersIDMembers\n      tags:\n        - Users\n        - ScraperTargets\n      summary: List all users with member privileges for a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      responses:\n        '200':\n          description: A list of scraper target members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostScrapersIDMembers\n      tags:\n        - Users\n        - ScraperTargets\n      summary: Add a member to a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Member added to scraper targets\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/members/{userID}':\n    delete:\n      operationId: DeleteScrapersIDMembersID\n      tags:\n        - Users\n        - ScraperTargets\n      summary: Remove a member from a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of member to remove.\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/owners':\n    get:\n      operationId: GetScrapersIDOwners\n      tags:\n        - Users\n        - ScraperTargets\n      summary: List all owners of a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      responses:\n        '200':\n          description: A list of scraper target owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostScrapersIDOwners\n      tags:\n        - Users\n        - ScraperTargets\n      summary: Add an owner to a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Scraper target owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/scrapers/{scraperTargetID}/owners/{userID}':\n    delete:\n      operationId: DeleteScrapersIDOwnersID\n      tags:\n        - Users\n        - ScraperTargets\n      summary: Remove an owner from a scraper target\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of owner to remove.\n        - in: path\n          name: scraperTargetID\n          schema:\n            type: string\n          required: true\n          description: The scraper target ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /variables:\n    get:\n      operationId: GetVariables\n      tags:\n        - Variables\n      summary: Get all variables\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: org\n          description: The organization name.\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: The organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: All variables for an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Variables\"\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostVariables\n      summary: Create a variable\n      tags:\n        - Variables\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Variable to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Variable\"\n      responses:\n        '201':\n          description: Variable created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Variable\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/variables/{variableID}':\n    get:\n      operationId: GetVariablesID\n      tags:\n        - Variables\n      summary: Get a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          required: true\n          schema:\n            type: string\n          description: The variable ID.\n      responses:\n        '200':\n          description: Variable found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Variable\"\n        '404':\n          description: Variable not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteVariablesID\n      tags:\n        - Variables\n      summary: Delete a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          required: true\n          schema:\n            type: string\n          description: The variable ID.\n      responses:\n        '204':\n          description: Variable deleted\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchVariablesID\n      summary: Update a variable\n      tags:\n        - Variables\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          required: true\n          schema:\n            type: string\n          description: The variable ID.\n      requestBody:\n        description: Variable update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Variable\"\n      responses:\n        '200':\n          description: Variable updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Variable\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutVariablesID\n      summary: Replace a variable\n      tags:\n        - Variables\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          required: true\n          schema:\n            type: string\n          description: The variable ID.\n      requestBody:\n        description: Variable to replace\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Variable\"\n      responses:\n        '200':\n          description: Variable updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Variable\"\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/variables/{variableID}/labels':\n    get:\n      operationId: GetVariablesIDLabels\n      tags:\n        - Variables\n      summary: List all labels for a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      responses:\n        '200':\n          description: A list of all labels for a variable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostVariablesIDLabels\n      tags:\n        - Variables\n      summary: Add a label to a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/variables/{variableID}/labels/{labelID}':\n    delete:\n      operationId: DeleteVariablesIDLabelsID\n      tags:\n        - Variables\n      summary: Delete a label from a variable\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: variableID\n          schema:\n            type: string\n          required: true\n          description: The variable ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Variable not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /write:\n    post:\n      operationId: PostWrite\n      tags:\n        - Write\n      summary: Write time series data into InfluxDB\n      requestBody:\n        description: Line protocol body\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Encoding\n          description: When present, its value indicates to the database that compression is applied to the line-protocol body.\n          schema:\n            type: string\n            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          description: Content-Type is used to indicate the format of the data sent to the server.\n          schema:\n            type: string\n            description: Text/plain specifies the text line protocol; charset is assumed to be utf-8.\n            default: text/plain; charset=utf-8\n            enum:\n              - text/plain\n              - text/plain; charset=utf-8\n              - application/vnd.influx.arrow\n        - in: header\n          name: Content-Length\n          description: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.\n          schema:\n            type: integer\n            description: The length in decimal number of octets.\n        - in: header\n          name: Accept\n          description: Specifies the return content format.\n          schema:\n            type: string\n            description: The return format for errors.\n            default: application/json\n            enum:\n              - application/json\n        - in: query\n          name: org\n          description: Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.\n          required: true\n          schema:\n            type: string\n            description: All points within batch are written to this organization.\n        - in: query\n          name: orgID\n          description: Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.\n          schema:\n            type: string\n        - in: query\n          name: bucket\n          description: The destination bucket for writes.\n          required: true\n          schema:\n            type: string\n            description: All points within batch are written to this bucket.\n        - in: query\n          name: precision\n          description: The precision for the unix timestamps within the body line-protocol.\n          schema:\n            $ref: \"#/components/schemas/WritePrecision\"\n      responses:\n        '204':\n          description: Write data is correctly formatted and accepted for writing to the bucket.\n        '400':\n          description: Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LineProtocolError\"\n        '401':\n          description: Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '403':\n          description: No token was sent and they are required.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '413':\n          description: Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LineProtocolLengthError\"\n        '429':\n          description: Token is temporarily over quota. The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        '503':\n          description: Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again.\n          headers:\n            Retry-After:\n              description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n              schema:\n                type: integer\n                format: int32\n        default:\n          description: Internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /delete:\n    post:\n      summary: Delete time series data from InfluxDB\n      requestBody:\n          description: Predicate delete request\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeletePredicateRequest\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: org\n          description: Specifies the organization to delete data from.\n          schema:\n            type: string\n            description: Only points from this organization are deleted.\n        - in: query\n          name: bucket\n          description: Specifies the bucket to delete data from.\n          schema:\n            type: string\n            description: Only points from this bucket are deleted.\n        - in: query\n          name: orgID\n          description: Specifies the organization ID of the resource.\n          schema:\n            type: string\n        - in: query\n          name: bucketID\n          description: Specifies the bucket ID to delete data from.\n          schema:\n            type: string\n            description: Only points from this bucket ID are deleted.\n      responses:\n        '204':\n          description: delete has been accepted\n        '400':\n          description: invalid request.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '404':\n          description: the bucket or organization is not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '403':\n          description: no token was sent or does not have sufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /ready:\n    servers:\n        - url: /\n    get:\n      operationId: GetReady\n      tags:\n        - Ready\n      summary: Get the readiness of an instance at startup\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: The instance is ready\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ready\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /health:\n    servers:\n        - url: /\n    get:\n      operationId: GetHealth\n      tags:\n        - Health\n      summary: Get the health of an instance\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: The instance is healthy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthCheck\"\n        '503':\n          description: The instance is unhealthy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthCheck\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources:\n    post:\n      operationId: PostSources\n      tags:\n        - Sources\n      summary: Creates a source\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n          description: Source to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n      responses:\n        '201':\n          description: Created Source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      operationId: GetSources\n      tags:\n        - Sources\n      summary: Get all sources\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: org\n            description: The organization name.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: All sources\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Sources\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}:\n    delete:\n      operationId: DeleteSourcesID\n      tags:\n        - Sources\n      summary: Delete a source\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: sourceID\n          schema:\n            type: string\n          required: true\n          description: The source ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: View not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchSourcesID\n      tags:\n        - Sources\n      summary: Update a Source\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: The source ID.\n      requestBody:\n          description: Source update\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n      responses:\n        '200':\n          description: Created Source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        '404':\n          description: Source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      operationId: GetSourcesID\n      tags:\n        - Sources\n      summary: Get a source\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: The source ID.\n      responses:\n        '200':\n          description: A source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Source\"\n        '404':\n          description: Source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}/health:\n    get:\n      operationId: GetSourcesIDHealth\n      tags:\n        - Sources\n      summary: Get the health of a source\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: The source ID.\n      responses:\n        '200':\n          description: The source is healthy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthCheck\"\n        '503':\n          description: The source is not healthy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthCheck\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /sources/{sourceID}/buckets:\n    get:\n      operationId: GetSourcesIDBuckets\n      tags:\n        - Sources\n        - Buckets\n      summary: Get buckets in a source\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: path\n            name: sourceID\n            schema:\n              type: string\n            required: true\n            description: The source ID.\n          - in: query\n            name: org\n            description: The organization name.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: A source\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Buckets\"\n        '404':\n          description: Source not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /labels:\n    post:\n      operationId: PostLabels\n      tags:\n        - Labels\n      summary: Create a label\n      requestBody:\n          description: Label to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelCreateRequest\"\n      responses:\n        '201':\n          description: Added label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      operationId: GetLabels\n      tags:\n        - Labels\n      summary: Get all labels\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: orgID\n            description: The organization ID.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: All labels\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /labels/{labelID}:\n    get:\n      operationId: GetLabelsID\n      tags:\n        - Labels\n      summary: Get a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: A label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchLabelsID\n      tags:\n        - Labels\n      summary: Update a label\n      requestBody:\n          description: Label update\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelUpdate\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to update.\n      responses:\n        '200':\n          description: Updated label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        '404':\n          description: Label not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteLabelsID\n      tags:\n        - Labels\n      summary: Delete a label\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Label not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /dashboards:\n    post:\n      operationId: PostDashboards\n      tags:\n        - Dashboards\n      summary: Create a dashboard\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n          description: Dashboard to create\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateDashboardRequest\"\n      responses:\n        '201':\n          description: Added dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      operationId: GetDashboards\n      tags:\n        - Dashboards\n      summary: Get all dashboards\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: query\n            name: owner\n            description: The owner ID.\n            schema:\n              type: string\n          - in: query\n            name: sortBy\n            description: The column to sort by.\n            schema:\n              type: string\n              enum:\n                - \"ID\"\n                - \"CreatedAt\"\n                - \"UpdatedAt\"\n          - in: query\n            name: id\n            description: List of dashboard IDs to return. If both `id and `owner` are specified, only `id` is used.\n            schema:\n              type: array\n              items:\n                type: string\n          - in: query\n            name: orgID\n            description: The organization ID.\n            schema:\n              type: string\n          - in: query\n            name: org\n            description: The organization name.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: All dashboards\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboards\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}':\n    get:\n      operationId: GetDashboardsID\n      tags:\n        - Dashboards\n      summary: Get a Dashboard\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - in: path\n            name: dashboardID\n            schema:\n              type: string\n            required: true\n            description: The ID of the dashboard to update.\n      responses:\n          '200':\n            description: Get a single dashboard\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Dashboard\"\n          '404':\n            description: Dashboard not found\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n          default:\n            description: Unexpected error\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchDashboardsID\n      tags:\n        - Dashboards\n      summary: Update a dashboard\n      requestBody:\n          description: Patching of a dashboard\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '200':\n          description: Updated dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteDashboardsID\n      tags:\n        - Dashboards\n      summary: Delete a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/cells':\n    put:\n      operationId: PutDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Replace cells in a dashboard\n      description: Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.\n      requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cells\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '200':\n          description: Replaced dashboard cells\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dashboard\"\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDashboardsIDCells\n      tags:\n        - Cells\n        - Dashboards\n      summary: Create a dashboard cell\n      requestBody:\n          description: Cell that will be added\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreateCell\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n      responses:\n        '201':\n          description: Cell successfully added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cell\"\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/cells/{cellID}':\n    patch:\n      operationId: PatchDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Update the non-positional information related to a cell\n      description: Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.\n      requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CellUpdate\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated dashboard cell\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Cell\"\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteDashboardsIDCellsID\n      tags:\n        - Cells\n        - Dashboards\n      summary: Delete a dashboard cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to delete.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to delete.\n      responses:\n        '204':\n          description: Cell successfully deleted\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/cells/{cellID}/view':\n    get:\n      operationId: GetDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Retrieve the view for a cell\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The cell ID.\n      responses:\n        '200':\n          description: A dashboard cells view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchDashboardsIDCellsIDView\n      tags:\n        - Cells\n        - Dashboards\n        - Views\n      summary: Update the view for a cell\n      requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The ID of the dashboard to update.\n        - in: path\n          name: cellID\n          schema:\n            type: string\n          required: true\n          description: The ID of the cell to update.\n      responses:\n        '200':\n          description: Updated cell view\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/View\"\n        '404':\n          description: Cell or dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/labels':\n    get:\n      operationId: GetDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: list all labels for a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of all labels for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDashboardsIDLabels\n      tags:\n        - Dashboards\n      summary: Add a label to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label added to the dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/labels/{labelID}':\n    delete:\n      operationId: DeleteDashboardsIDLabelsID\n      tags:\n        - Dashboards\n      summary: Delete a label from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Dashboard not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/members':\n    get:\n      operationId: GetDashboardsIDMembers\n      tags:\n        - Users\n        - Dashboards\n      summary: List all dashboard members\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have member privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDashboardsIDMembers\n      tags:\n        - Users\n        - Dashboards\n      summary: Add a member to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Added to dashboard members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/members/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDMembersID\n      tags:\n        - Users\n        - Dashboards\n      summary: Remove a member from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/owners':\n    get:\n      operationId: GetDashboardsIDOwners\n      tags:\n        - Users\n        - Dashboards\n      summary: List all dashboard owners\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '200':\n          description: A list of users who have owner privileges for a dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostDashboardsIDOwners\n      tags:\n        - Users\n        - Dashboards\n      summary: Add an owner to a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Added to dashboard owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/owners/{userID}':\n    delete:\n      operationId: DeleteDashboardsIDOwnersID\n      tags:\n        - Users\n        - Dashboards\n      summary: Remove an owner from a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: dashboardID\n          schema:\n            type: string\n          required: true\n          description: The dashboard ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/dashboards/{dashboardID}/logs':\n    get:\n      operationId: GetDashboardsIDLogs\n      tags:\n        - Dashboards\n        - OperationLogs\n      summary: Retrieve operation logs for a dashboard\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: path\n          name: dashboardID\n          required: true\n          description: The dashboard ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation logs for the dashboard\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OperationLogs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/ast:\n    post:\n      operationId: PostQueryAst\n      description: Analyzes flux query and generates a query specification.\n      tags:\n        - Query\n      parameters:\n      - $ref: '#/components/parameters/TraceSpan'\n      - in: header\n        name: Content-Type\n        schema:\n          type: string\n          enum:\n            - application/json\n      requestBody:\n        description: Analyzed Flux query to generate abstract syntax tree.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LanguageRequest\"\n      responses:\n        '200':\n          description: Abstract syntax tree of flux query.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ASTResponse\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/suggestions:\n    get:\n      operationId: GetQuerySuggestions\n      tags:\n        - Query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxSuggestions\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/query/suggestions/{name}':\n    get:\n      operationId: GetQuerySuggestionsName\n      tags:\n        - Query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: The name of the branching suggestion.\n      responses:\n        '200':\n          description: Suggestions for next functions in call chain\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxSuggestion\"\n        default:\n          description: Any response other than 200 is an internal server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /authorizations:\n    get:\n      operationId: GetAuthorizations\n      tags:\n        - Authorizations\n      summary: List all authorizations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: userID\n          schema:\n            type: string\n          description: Only show authorizations that belong to a user ID.\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: Only show authorizations that belong to a user name.\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: Only show authorizations that belong to an organization ID.\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: Only show authorizations that belong to a organization name.\n      responses:\n        '200':\n          description: A list of authorizations\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorizations\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostAuthorizations\n      tags:\n        - Authorizations\n      summary: Create an authorization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Authorization to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Authorization\"\n      responses:\n        '201':\n          description: Authorization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /authorizations/{authID}:\n    get:\n      operationId: GetAuthorizationsID\n      tags:\n        - Authorizations\n      summary: Retrieve an authorization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the authorization to get.\n      responses:\n        '200':\n          description: Authorization details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchAuthorizationsID\n      tags:\n        - Authorizations\n      summary: Update an authorization to be active or inactive\n      requestBody:\n        description: Authorization to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthorizationUpdateRequest\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the authorization to update.\n      responses:\n        '200':\n          description: The active or inactie authorization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Authorization\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteAuthorizationsID\n      tags:\n        - Authorizations\n      summary: Delete a authorization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: authID\n          schema:\n            type: string\n          required: true\n          description: The ID of the authorization to delete.\n      responses:\n        '204':\n          description: Authorization deleted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /query/analyze:\n    post:\n      operationId: PostQueryAnalyze\n      tags:\n        - Query\n      summary: Analyze an InfluxQL or Flux query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n      requestBody:\n          description: Flux or InfluxQL query to analyze\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Query\"\n      responses:\n          '200':\n            description: Query analyze results. Errors will be empty if the query is valid.\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/AnalyzeQueryResponse\"\n          default:\n            description: Internal server error\n            headers:\n              X-Influx-Error:\n                description: Error string describing the problem\n                schema:\n                  type: string\n              X-Influx-Reference:\n                description: Reference code unique to the error type\n                schema:\n                  type: integer\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  /query:\n    post:\n      operationId: PostQuery\n      tags:\n        - Query\n      summary: Query InfluxDB\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: header\n          name: Accept-Encoding\n          description: The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand.\n          schema:\n            type: string\n            description: Specifies that the query response in the body should be encoded with gzip or not encoded with identity.\n            default: identity\n            enum:\n              - gzip\n              - identity\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n            enum:\n              - application/json\n              - application/vnd.flux\n        - in: query\n          name: org\n          description: Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.\n          schema:\n            type: string\n        - in: query\n          name: orgID\n          description: Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.\n          schema:\n            type: string\n      requestBody:\n          description: Flux query or specification to execute\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Query\"\n            application/vnd.flux:\n              schema:\n                type: string\n      responses:\n          '200':\n            description: Query results\n            headers:\n              Content-Encoding:\n                description: The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body\n                schema:\n                    type: string\n                    description: Specifies that the response in the body is encoded with gzip or not encoded with identity.\n                    default: identity\n                    enum:\n                    - gzip\n                    - identity\n            content:\n              text/csv:\n                schema:\n                  type: string\n                  example: \u003e\n                    result,table,_start,_stop,_time,region,host,_value\n                    mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n                    mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n                    mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n              application/vnd.influx.arrow:\n                schema:\n                  type: string\n                  format: binary\n          '429':\n            description: Token is temporarily over quota. The Retry-After header describes when to try the read again.\n            headers:\n              Retry-After:\n                description: A non-negative decimal integer indicating the seconds to delay after the response is received.\n                schema:\n                  type: integer\n                  format: int32\n          default:\n            description: Error processing query\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n  /buckets:\n    get:\n      operationId: GetBuckets\n      tags:\n        - Buckets\n      summary: List all buckets\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n          - $ref: \"#/components/parameters/Offset\"\n          - $ref: \"#/components/parameters/Limit\"\n          - in: query\n            name: org\n            description: The organization name.\n            schema:\n              type: string\n          - in: query\n            name: orgID\n            description: The organization ID.\n            schema:\n              type: string\n          - in: query\n            name: name\n            description: Only returns buckets with a specific name.\n            schema:\n              type: string\n      responses:\n        '200':\n          description: A list of buckets\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Buckets\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostBuckets\n      tags:\n        - Buckets\n      summary: Create a bucket\n      parameters:\n          - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Bucket to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PostBucketRequest\"\n      responses:\n        '201':\n          description: Bucket created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}':\n    get:\n      operationId: GetBucketsID\n      tags:\n        - Buckets\n      summary: Retrieve a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: Bucket details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchBucketsID\n      tags:\n        - Buckets\n      summary: Update a bucket\n      requestBody:\n        description: Bucket update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bucket\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: An updated bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bucket\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteBucketsID\n      tags:\n        - Buckets\n      summary: Delete a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The ID of the bucket to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Bucket not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/labels':\n    get:\n      operationId: GetBucketsIDLabels\n      tags:\n        - Buckets\n      summary: List all labels for a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of all labels for a bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostBucketsIDLabels\n      tags:\n        - Buckets\n      summary: Add a label to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The newly added label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/labels/{labelID}':\n    delete:\n      operationId: DeleteBucketsIDLabelsID\n      tags:\n        - Buckets\n      summary: delete a label from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Bucket not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/members':\n    get:\n      operationId: GetBucketsIDMembers\n      tags:\n        - Users\n        - Buckets\n      summary: List all users with member privileges for a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of bucket members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostBucketsIDMembers\n      tags:\n        - Users\n        - Buckets\n      summary: Add a member to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Member added to bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/members/{userID}':\n    delete:\n      operationId: DeleteBucketsIDMembersID\n      tags:\n        - Users\n        - Buckets\n      summary: Remove a member from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/owners':\n    get:\n      operationId: GetBucketsIDOwners\n      tags:\n        - Users\n        - Buckets\n      summary: List all owners of a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '200':\n          description: A list of bucket owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostBucketsIDOwners\n      tags:\n        - Users\n        - Buckets\n      summary: Add an owner to a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Bucket owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/owners/{userID}':\n    delete:\n      operationId: DeleteBucketsIDOwnersID\n      tags:\n        - Users\n        - Buckets\n      summary: Remove an owner from a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: bucketID\n          schema:\n            type: string\n          required: true\n          description: The bucket ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/buckets/{bucketID}/logs':\n    get:\n      operationId: GetBucketsIDLogs\n      tags:\n        - Buckets\n        - OperationLogs\n      summary: Retrieve operation logs for a bucket\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: path\n          name: bucketID\n          required: true\n          description: The bucket ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation logs for the bucket\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OperationLogs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /orgs:\n    get:\n      operationId: GetOrgs\n      tags:\n        - Organizations\n      summary: List all organizations\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: Filter organizations to a specific organization name.\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: Filter organizations to a specific organization ID.\n      responses:\n        '200':\n          description: A list of organizations\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organizations\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostOrgs\n      tags:\n        - Organizations\n      summary: Create an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Organization to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      responses:\n        '201':\n          description: Organization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}':\n    get:\n      operationId: GetOrgsID\n      tags:\n        - Organizations\n      summary: Retrieve an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to get.\n      responses:\n        '200':\n          description: Organization details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchOrgsID\n      tags:\n        - Organizations\n      summary: Update an organization\n      requestBody:\n        description: Organization update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Organization\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to get.\n      responses:\n        '200':\n          description: Organization updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteOrgsID\n      tags:\n        - Organizations\n      summary: Delete an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/labels':\n    get:\n      operationId: GetOrgsIDLabels\n      tags:\n        - Organizations\n      summary: List all labels for a organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of all labels for an organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostOrgsIDLabels\n      tags:\n        - Organizations\n      summary: Add a label to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: Returns the created label\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/labels/{labelID}':\n    delete:\n      operationId: DeleteOrgsIDLabelsID\n      tags:\n        - Organizations\n      summary: Delete a label from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/secrets':\n    get:\n      operationId: GetOrgsIDSecrets\n      tags:\n        - Secrets\n        - Organizations\n      summary: List all secret keys for an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of all secret keys\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SecretKeysResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchOrgsIDSecrets\n      tags:\n        - Secrets\n        - Organizations\n      summary: Update secrets in an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key value pairs to update/add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Secrets\"\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/secrets/delete': # had to make this because swagger wouldn't let me have a request body with a DELETE\n    post:\n      operationId: PostOrgsIDSecrets\n      tags:\n        - Secrets\n        - Organizations\n      summary: Delete secrets from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: Secret key to delete\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SecretKeys\"\n      responses:\n        '204':\n          description: Keys successfully patched\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/members':\n    get:\n      operationId: GetOrgsIDMembers\n      tags:\n        - Users\n        - Organizations\n      summary: List all members of an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of organization members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostOrgsIDMembers\n      tags:\n        - Users\n        - Organizations\n      summary: Add a member to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Added to organization created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/members/{userID}':\n    delete:\n      operationId: DeleteOrgsIDMembersID\n      tags:\n        - Users\n        - Organizations\n      summary: Remove a member from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/owners':\n    get:\n      operationId: GetOrgsIDOwners\n      tags:\n        - Users\n        - Organizations\n      summary: List all owners of an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '200':\n          description: A list of organization owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        '404':\n          description: Organization not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostOrgsIDOwners\n      tags:\n        - Users\n        - Organizations\n      summary: Add an owner to an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Organization owner added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/owners/{userID}':\n    delete:\n      operationId: DeleteOrgsIDOwnersID\n      tags:\n        - Users\n        - Organizations\n      summary: Remove an owner from an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The organization ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/orgs/{orgID}/logs':\n    get:\n      operationId: GetOrgsIDLogs\n      tags:\n        - Organizations\n        - OperationLogs\n      summary: Retrieve operation logs for an organization\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: path\n          name: orgID\n          required: true\n          description: The organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation logs for the organization\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OperationLogs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /packages:\n    post:\n      operationId: CreatePkg\n      tags:\n        - InfluxPackages\n      summary: Create a new Influx package\n      requestBody:\n        description: Influx package to create.\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PkgCreate\"\n      responses:\n        '200':\n          description: Influx package created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pkg\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /packages/apply:\n    post:\n      operationId: ApplyPkg\n      tags:\n        - InfluxPackages\n      summary: Apply or dry-run an Influx package\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PkgApply\"\n          text/yml:\n            schema:\n              $ref: \"#/components/schemas/PkgApply\"\n      responses:\n        '200':\n          description: \u003e\n            Influx package dry-run successful, no new resources created.\n            The provided diff and summary will not have IDs for resources\n            that do not exist at the time of the dry run.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PkgSummary\"\n        '201':\n          description: \u003e\n            Influx package applied successfully. Newly created resources created\n            available in summary. The diff compares the state of the world before\n            the package is applied with the changes the application will impose.\n            This corresponds to `\"dryRun\": true`\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PkgSummary\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /tasks:\n    get:\n      operationId: GetTasks\n      tags:\n        - Tasks\n      summary: List all tasks\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: query\n          name: name\n          description: Returns task with a specific name.\n          schema:\n            type: string\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: Return tasks after a specified ID.\n        - in: query\n          name: user\n          schema:\n            type: string\n          description: Filter tasks to a specific user ID.\n        - in: query\n          name: org\n          schema:\n            type: string\n          description: Filter tasks to a specific organization name.\n        - in: query\n          name: orgID\n          schema:\n            type: string\n          description: Filter tasks to a specific organization ID.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          description: The number of tasks to return\n      responses:\n        '200':\n          description: A list of tasks\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tasks\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTasks\n      tags:\n        - Tasks\n      summary: Create a new task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: Task to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TaskCreateRequest\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}':\n    get:\n      operationId: GetTasksID\n      tags:\n        - Tasks\n      summary: Retrieve a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: Task details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchTasksID\n      tags:\n        - Tasks\n      summary: Update a task\n      description: Update a task. This will cancel all queued runs.\n      requestBody:\n        description: Task update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TaskUpdateRequest\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: Task updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteTasksID\n      tags:\n        - Tasks\n      summary: Delete a task\n      description: Deletes a task and all associated records\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to delete.\n      responses:\n        '204':\n          description: Task deleted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs':\n    get:\n      operationId: GetTasksIDRuns\n      tags:\n        - Tasks\n      summary: List runs for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The ID of the task to get runs for.\n        - in: query\n          name: after\n          schema:\n            type: string\n          description: Returns runs after a specific ID.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          description: The number of runs to return\n        - in: query\n          name: afterTime\n          schema:\n            type: string\n            format: date-time\n          description: Filter runs to those scheduled after this time, RFC3339\n        - in: query\n          name: beforeTime\n          schema:\n            type: string\n            format: date-time\n          description: Filter runs to those scheduled before this time, RFC3339\n      responses:\n        '200':\n          description: A list of task runs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Runs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTasksIDRuns\n      tags:\n        - Tasks\n      summary: Manually start a task run, overriding the current schedule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RunManually\"\n      responses:\n        '201':\n          description: Run scheduled to start\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}':\n    get:\n      operationId: GetTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Retrieve a single run for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '200':\n          description: The run record\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteTasksIDRunsID\n      tags:\n        - Tasks\n      summary: Cancel a running task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}/retry':\n    post:\n      operationId: PostTasksIDRunsIDRetry\n      tags:\n        - Tasks\n      summary: Retry a task run\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: The run ID.\n      responses:\n        '200':\n          description: Run that has been queued\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/logs':\n    get:\n      operationId: GetTasksIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: All logs for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Logs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/runs/{runID}/logs':\n    get:\n      operationId: GetTasksIDRunsIDLogs\n      tags:\n        - Tasks\n      summary: Retrieve all logs for a run\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: ID of task to get logs for.\n        - in: path\n          name: runID\n          schema:\n            type: string\n          required: true\n          description: ID of run to get logs for.\n      responses:\n        '200':\n          description: All logs for a run\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Logs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/labels':\n    get:\n      operationId: GetTasksIDLabels\n      tags:\n        - Tasks\n      summary: List all labels for a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of all labels for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTasksIDLabels\n      tags:\n        - Tasks\n      summary: Add a label to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '200':\n          description: A list of all labels for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/labels/{labelID}':\n    delete:\n      operationId: DeleteTasksIDLabelsID\n      tags:\n        - Tasks\n      summary: Delete a label from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The label ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Task not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /me:\n    get:\n      operationId: GetMe\n      tags:\n        - Users\n      summary: Return the current authenticated user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: Currently authenticated user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /me/password:\n    put:\n      operationId: PutMePassword\n      tags:\n        - Users\n      summary: Update a password\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: New password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetBody\"\n      responses:\n        '204':\n          description: Password successfully updated\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/members':\n    get:\n      operationId: GetTasksIDMembers\n      tags:\n        - Users\n        - Tasks\n      summary: List all task members\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of users who have member privileges for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMembers\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTasksIDMembers\n      tags:\n        - Users\n        - Tasks\n      summary: Add a member to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: User to add as member\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Added to task members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceMember\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/members/{userID}':\n    delete:\n      operationId: DeleteTasksIDMembersID\n      tags:\n        - Users\n        - Tasks\n      summary: Remove a member from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the member to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Member removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/owners':\n    get:\n      operationId: GetTasksIDOwners\n      tags:\n        - Users\n        - Tasks\n      summary: List all owners of a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '200':\n          description: A list of users who have owner privileges for a task\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwners\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostTasksIDOwners\n      tags:\n        - Users\n        - Tasks\n      summary: Add an owner to a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      requestBody:\n        description: User to add as owner\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddResourceMemberRequestBody\"\n      responses:\n        '201':\n          description: Added to task owners\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceOwner\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/tasks/{taskID}/owners/{userID}':\n    delete:\n      operationId: DeleteTasksIDOwnersID\n      tags:\n        - Users\n        - Tasks\n      summary: Remove an owner from a task\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the owner to remove.\n        - in: path\n          name: taskID\n          schema:\n            type: string\n          required: true\n          description: The task ID.\n      responses:\n        '204':\n          description: Owner removed\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /users:\n    get:\n      operationId: GetUsers\n      tags:\n        - Users\n      summary: List all users\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      responses:\n        '200':\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Users\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostUsers\n      tags:\n        - Users\n      summary: Create a user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n      requestBody:\n        description: User to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          description: User created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/users/{userID}':\n    get:\n      operationId: GetUsersID\n      tags:\n        - Users\n      summary: Retrieve a user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The user ID.\n      responses:\n        '200':\n          description: User details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchUsersID\n      tags:\n        - Users\n      summary: Update a user\n      requestBody:\n        description: User update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to update.\n      responses:\n        '200':\n          description: User updated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteUsersID\n      tags:\n        - Users\n      summary: Delete a user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The ID of the user to delete.\n      responses:\n        '204':\n          description: User deleted\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/users/{userID}/password':\n    put:\n      operationId: PutUsersIDPassword\n      tags:\n        - Users\n      summary: Update a password\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: userID\n          schema:\n            type: string\n          required: true\n          description: The user ID.\n      requestBody:\n        description: New password\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordResetBody\"\n      responses:\n        '204':\n          description: Password successfully updated\n        default:\n          description: Unsuccessful authentication\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/users/{userID}/logs':\n    get:\n      operationId: GetUsersIDLogs\n      tags:\n        - Users\n        - OperationLogs\n      summary: Retrieve operation logs for a user\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: path\n          name: userID\n          required: true\n          description: The user ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Operation logs for the user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OperationLogs\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /checks:\n    get:\n      operationId: GetChecks\n      tags:\n          - Checks\n      summary: Get all checks\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show checks that belong to a specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of checks\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Checks\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: CreateCheck\n      tags:\n        - Checks\n      summary: Add new check\n      requestBody:\n        description: Check to create\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: \"#/components/schemas/PostCheck\"\n      responses:\n        '201':\n          description: Check created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Check\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/checks/{checkID}':\n    get:\n      operationId: GetChecksID\n      tags:\n        - Checks\n      summary: Get a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Check\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Check\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Check\"\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchChecksID\n      tags:\n        - Checks\n      summary: Update a check\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: \"#/components/schemas/CheckPatch\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: An updated check\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Check\"\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteChecksID\n      tags:\n        - Checks\n      summary: Delete a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/checks/{checkID}/labels':\n    get:\n      operationId: GetChecksIDLabels\n      tags:\n        - Checks\n      summary: List all labels for a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: A list of all labels for a check\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostChecksIDLabels\n      tags:\n        - Checks\n      summary: Add a label to a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label was added to the check\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/checks/{checkID}/labels/{labelID}':\n    delete:\n      operationId: DeleteChecksIDLabelsID\n      tags:\n        - Checks\n      summary: Delete label from a check\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Check or label not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /notificationRules:\n    get:\n      operationId: GetNotificationRules\n      tags:\n          - NotificationRules\n      summary: Get all notification rules\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification rules that belong to a specific organization ID.\n          schema:\n            type: string\n        - in: query\n          name: checkID\n          description: Only show notifications that belong to the specific check ID.\n          schema:\n            type: string\n        - in: query\n          name: tag\n          description: Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided.\n          schema:\n            type: string\n            pattern: ^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$\n            example: env:prod\n      responses:\n        '200':\n          description: A list of notification rules\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationRules\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: CreateNotificationRule\n      tags:\n        - NotificationRules\n      summary: Add a notification rule\n      requestBody:\n        description: Notification rule to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PostNotificationRule\"\n      responses:\n        '201':\n          description: Notification rule created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationRule\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/checks/{checkID}/query':\n    get:\n      operationId: GetChecksIDQuery\n      tags:\n        - Checks\n      summary: Get a check query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: checkID\n          schema:\n            type: string\n          required: true\n          description: The check ID.\n      responses:\n        '200':\n          description: The check query requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxResponse\"\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '404':\n          description: Check not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationRules/{ruleID}':\n    get:\n      operationId: GetNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Get a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationRule\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationRule\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationRule\"\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Update a notification rule\n      requestBody:\n        description: Notification rule update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationRuleUpdate\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: An updated notification rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationRule\"\n        '404':\n          description: The notification rule was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteNotificationRulesID\n      tags:\n        - NotificationRules\n      summary: Delete a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The check was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationRules/{ruleID}/labels':\n    get:\n      operationId: GetNotificationRulesIDLabels\n      tags:\n        - NotificationRules\n      summary: List all labels for a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostNotificationRuleIDLabels\n      tags:\n        - NotificationRules\n      summary: Add a label to a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label was added to the notification rule\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationRules/{ruleID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationRulesIDLabelsID\n      tags:\n        - NotificationRules\n      summary: Delete label from a notification rule\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Rule or label not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationRules/{ruleID}/query':\n    get:\n      operationId: GetNotificationRulesIDQuery\n      tags:\n        - Rules\n      summary: Get a notification rule query\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: ruleID\n          schema:\n            type: string\n          required: true\n          description: The notification rule ID.\n      responses:\n        '200':\n          description: The notification rule query requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FluxResponse\"\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '404':\n          description: Notification rule not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /notificationEndpoints:\n    get:\n      operationId: GetNotificationEndpoints\n      tags:\n          - NotificationEndpoints\n      summary: Get all notification endpoints\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/Limit'\n        - in: query\n          name: orgID\n          required: true\n          description: Only show notification endpoints that belong to specific organization ID.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A list of notification endpoints\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationEndpoints\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: CreateNotificationEndpoint\n      tags:\n        - NotificationEndpoints\n      summary: Add a notification endpoint\n      requestBody:\n        description: Notification endpoint to create\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PostNotificationEndpoint\"\n      responses:\n        '201':\n          description: Notification endpoint created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationEndpoint\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationEndpoints/{endpointID}':\n    get:\n      operationId: GetNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Get a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: The notification endpoint requested\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationEndpoint\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      operationId: PutNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: A new notification endpoint to replace the existing endpoint with\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationEndpoint\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationEndpoint\"\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      operationId: PatchNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Update a notification endpoint\n      requestBody:\n        description: Check update to apply\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NotificationEndpointUpdate\"\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: An updated notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotificationEndpoint\"\n        '404':\n          description: The notification endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      operationId: DeleteNotificationEndpointsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: The endpoint was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationEndpoints/{endpointID}/labels':\n    get:\n      operationId: GetNotificationEndpointsIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: List all labels for a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      responses:\n        '200':\n          description: A list of all labels for a notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelsResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      operationId: PostNotificationEndpointIDLabels\n      tags:\n        - NotificationEndpoints\n      summary: Add a label to a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n      requestBody:\n        description: Label to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelMapping\"\n      responses:\n        '201':\n          description: The label was added to the notification endpoint\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LabelResponse\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  '/notificationEndpoints/{endpointID}/labels/{labelID}':\n    delete:\n      operationId: DeleteNotificationEndpointsIDLabelsID\n      tags:\n        - NotificationEndpoints\n      summary: Delete a label from a notification endpoint\n      parameters:\n        - $ref: '#/components/parameters/TraceSpan'\n        - in: path\n          name: endpointID\n          schema:\n            type: string\n          required: true\n          description: The notification endpoint ID.\n        - in: path\n          name: labelID\n          schema:\n            type: string\n          required: true\n          description: The ID of the label to delete.\n      responses:\n        '204':\n          description: Delete has been accepted\n        '404':\n          description: Endpoint or label not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  parameters:\n    Offset:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n    Limit:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 20\n    Descending:\n      in: query\n      name: descending\n      required: false\n      schema:\n        type: boolean\n        default: false\n    SortBy:\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        type: string\n    TraceSpan:\n      in: header\n      name: Zap-Trace-Span\n      description: OpenTracing span context\n      example:\n        trace_id: '1'\n        span_id: '1'\n        baggage:\n          key: value\n      required: false\n      schema:\n        type: string\n  schemas:\n    LanguageRequest:\n      description: Flux query to be analyzed.\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          description: Flux query script to be analyzed\n          type: string\n    Query:\n      description: Query influx with specific return formatting.\n      type: object\n      required:\n        - query\n      properties:\n        extern:\n          $ref: \"#/components/schemas/File\"\n        query:\n          description: Query script to execute.\n          type: string\n        type:\n          description: The type of query.\n          type: string\n          default: flux\n          enum:\n            - flux\n            - influxql\n        db:\n          description: Required for `influxql` type queries.\n          type: string\n        rp:\n          description: Required for `influxql` type queries.\n          type: string\n        cluster:\n          description: Required for `influxql` type queries.\n          type: string\n        dialect:\n          $ref: \"#/components/schemas/Dialect\"\n    Package:\n      description: Represents a complete package source tree.\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        path:\n          description: Package import path\n          type: string\n        package:\n          description: Package name\n          type: string\n        files:\n          description: Package files\n          type: array\n          items:\n            $ref: \"#/components/schemas/File\"\n    File:\n      description: Represents a source from a single file\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        name:\n          description: The name of the file.\n          type: string\n        package:\n          $ref: \"#/components/schemas/PackageClause\"\n        imports:\n          description: A list of package imports\n          type: array\n          items:\n            $ref: \"#/components/schemas/ImportDeclaration\"\n        body:\n          description: List of Flux statements\n          type: array\n          items:\n            $ref: \"#/components/schemas/Statement\"\n    PackageClause:\n      description: Defines a package identifier\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        name:\n          $ref: \"#/components/schemas/Identifier\"\n    ImportDeclaration:\n      description: Declares a package import\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        as:\n          $ref: \"#/components/schemas/Identifier\"\n        path:\n          $ref: \"#/components/schemas/StringLiteral\"\n    DeletePredicateRequest:\n      description: The delete predicate request.\n      type: object\n      required: [start, stop]\n      properties:\n        start:\n          description: RFC3339Nano\n          type: string\n          format: date-time\n        stop:\n          description: RFC3339Nano\n          type: string\n          format: date-time\n        predicate:\n          description: InfluxQL-like delete statement\n          example: tag1=\"value1\" and (tag2=\"value2\" and tag3!=\"value3\")\n          type: string\n    Node:\n      oneOf:\n        - $ref: \"#/components/schemas/Expression\"\n        - $ref: \"#/components/schemas/Block\"\n    Block:\n      description: A set of statements\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        body:\n          description: Block body\n          type: array\n          items:\n            $ref: \"#/components/schemas/Statement\"\n    Statement:\n      oneOf:\n        - $ref: \"#/components/schemas/BadStatement\"\n        - $ref: \"#/components/schemas/VariableAssignment\"\n        - $ref: \"#/components/schemas/MemberAssignment\"\n        - $ref: \"#/components/schemas/ExpressionStatement\"\n        - $ref: \"#/components/schemas/ReturnStatement\"\n        - $ref: \"#/components/schemas/OptionStatement\"\n        - $ref: \"#/components/schemas/BuiltinStatement\"\n        - $ref: \"#/components/schemas/TestStatement\"\n    BadStatement:\n      description: A placeholder for statements for which no correct statement nodes can be created\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        text:\n          description: Raw source text\n          type: string\n    VariableAssignment:\n      description: Represents the declaration of a variable\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        init:\n          $ref: \"#/components/schemas/Expression\"\n    MemberAssignment:\n      description: Object property assignment\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        member:\n          $ref: \"#/components/schemas/MemberExpression\"\n        init:\n          $ref: \"#/components/schemas/Expression\"\n    ExpressionStatement:\n      description: May consist of an expression that does not return a value and is executed solely for its side-effects\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        expression:\n          $ref: \"#/components/schemas/Expression\"\n    ReturnStatement:\n      description: Defines an expression to return\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        argument:\n          $ref: \"#/components/schemas/Expression\"\n    OptionStatement:\n      description: A single variable declaration\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        assignment:\n          oneOf:\n            - $ref: \"#/components/schemas/VariableAssignment\"\n            - $ref: \"#/components/schemas/MemberAssignment\"\n    BuiltinStatement:\n      description: Declares a builtin identifier and its type\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n    TestStatement:\n      description: Declares a Flux test case\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        assignment:\n          $ref: \"#/components/schemas/VariableAssignment\"\n    Expression:\n      oneOf:\n        - $ref: \"#/components/schemas/ArrayExpression\"\n        - $ref: \"#/components/schemas/FunctionExpression\"\n        - $ref: \"#/components/schemas/BinaryExpression\"\n        - $ref: \"#/components/schemas/CallExpression\"\n        - $ref: \"#/components/schemas/ConditionalExpression\"\n        - $ref: \"#/components/schemas/LogicalExpression\"\n        - $ref: \"#/components/schemas/MemberExpression\"\n        - $ref: \"#/components/schemas/IndexExpression\"\n        - $ref: \"#/components/schemas/ObjectExpression\"\n        - $ref: \"#/components/schemas/ParenExpression\"\n        - $ref: \"#/components/schemas/PipeExpression\"\n        - $ref: \"#/components/schemas/UnaryExpression\"\n        - $ref: \"#/components/schemas/BooleanLiteral\"\n        - $ref: \"#/components/schemas/DateTimeLiteral\"\n        - $ref: \"#/components/schemas/DurationLiteral\"\n        - $ref: \"#/components/schemas/FloatLiteral\"\n        - $ref: \"#/components/schemas/IntegerLiteral\"\n        - $ref: \"#/components/schemas/PipeLiteral\"\n        - $ref: \"#/components/schemas/RegexpLiteral\"\n        - $ref: \"#/components/schemas/StringLiteral\"\n        - $ref: \"#/components/schemas/UnsignedIntegerLiteral\"\n        - $ref: \"#/components/schemas/Identifier\"\n    ArrayExpression:\n      description: Used to create and directly specify the elements of an array object\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        elements:\n          description: Elements of the array\n          type: array\n          items:\n            $ref: \"#/components/schemas/Expression\"\n    FunctionExpression:\n      description: Function expression\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        params:\n          description: Function parameters\n          type: array\n          items:\n            $ref: \"#/components/schemas/Property\"\n        body:\n          $ref: \"#/components/schemas/Node\"\n    BinaryExpression:\n      description:  uses binary operators to act on two operands in an expression\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        operator:\n          type: string\n        left:\n          $ref: \"#/components/schemas/Expression\"\n        right:\n          $ref: \"#/components/schemas/Expression\"\n    CallExpression:\n      description: Represents a function call\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        callee:\n          $ref: \"#/components/schemas/Expression\"\n        arguments:\n          description: Function arguments\n          type: array\n          items:\n            $ref: \"#/components/schemas/Expression\"\n    ConditionalExpression:\n      description: Selects one of two expressions, `Alternate` or `Consequent`, depending on a third boolean expression, `Test`\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        test:\n          $ref: \"#/components/schemas/Expression\"\n        alternate:\n          $ref: \"#/components/schemas/Expression\"\n        consequent:\n          $ref: \"#/components/schemas/Expression\"\n    LogicalExpression:\n      description: Represents the rule conditions that collectively evaluate to either true or false\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        operator:\n          type: string\n        left:\n          $ref: \"#/components/schemas/Expression\"\n        right:\n          $ref: \"#/components/schemas/Expression\"\n    MemberExpression:\n      description: Represents accessing a property of an object\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        object:\n          $ref: \"#/components/schemas/Expression\"\n        property:\n          $ref: \"#/components/schemas/PropertyKey\"\n    IndexExpression:\n      description: Represents indexing into an array\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        array:\n          $ref: \"#/components/schemas/Expression\"\n        index:\n          $ref: \"#/components/schemas/Expression\"\n    ObjectExpression:\n      description: Allows the declaration of an anonymous object within a declaration\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        properties:\n          description: Object properties\n          type: array\n          items:\n            $ref: \"#/components/schemas/Property\"\n    ParenExpression:\n      description: Represents an expression wrapped in parenthesis\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        expression:\n          $ref: \"#/components/schemas/Expression\"\n    PipeExpression:\n      description: Call expression with pipe argument\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        argument:\n          $ref: \"#/components/schemas/Expression\"\n        call:\n          $ref: \"#/components/schemas/CallExpression\"\n    UnaryExpression:\n      description: Uses operators to act on a single operand in an expression\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        operator:\n          type: string\n        argument:\n          $ref: \"#/components/schemas/Expression\"\n    BooleanLiteral:\n      description: Represents boolean values\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: boolean\n    DateTimeLiteral:\n      description: Represents an instant in time with nanosecond precision using the syntax of golang's RFC3339 Nanosecond variant\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: string\n    DurationLiteral:\n      description: Represents the elapsed time between two instants as an int64 nanosecond count with syntax of golang's time.Duration\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        values:\n          description: Duration values\n          type: array\n          items:\n            $ref: \"#/components/schemas/Duration\"\n    FloatLiteral:\n      description: Represents floating point numbers according to the double representations defined by the IEEE-754-1985\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: number\n    IntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: string\n    PipeLiteral:\n      description: Represents a specialized literal value, indicating the left hand value of a pipe expression\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n    RegexpLiteral:\n      description: Expressions begin and end with `/` and are regular expressions with syntax accepted by RE2\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: string\n    StringLiteral:\n      description: Expressions begin and end with double quote marks\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: string\n    UnsignedIntegerLiteral:\n      description: Represents integer numbers\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        value:\n          type: string\n    Duration:\n      description: A pair consisting of length of time and the unit of time measured. It is the atomic unit from which all duration literals are composed.\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        magnitude:\n          type: integer\n        unit:\n          type: string\n    Property:\n      description: The value associated with a key\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        key:\n          $ref: \"#/components/schemas/PropertyKey\"\n        value:\n          $ref: \"#/components/schemas/Expression\"\n    PropertyKey:\n      oneOf:\n        - $ref: \"#/components/schemas/Identifier\"\n        - $ref: \"#/components/schemas/StringLiteral\"\n    Identifier:\n      description: A valid Flux identifier\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/NodeType\"\n        name:\n          type: string\n    NodeType:\n      description: Type of AST node\n      type: string\n    Dialect:\n          description: Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions\n          type: object\n          properties:\n            header:\n              description: If true, the results will contain a header row\n              type: boolean\n              default: true\n            delimiter:\n              description: Separator between cells; the default is ,\n              type: string\n              default: \",\"\n              maxLength: 1\n              minLength: 1\n            annotations:\n              description: Https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns\n              type: array\n              items:\n                type: string\n                enum:\n                  - \"group\"\n                  - \"datatype\"\n                  - \"default\"\n                uniqueItems: true\n            commentPrefix:\n              description: Character prefixed to comment strings\n              type: string\n              default: \"#\"\n              maxLength: 1\n              minLength: 0\n            dateTimeFormat:\n              description: Format of timestamps\n              type: string\n              default: \"RFC3339\"\n              enum:\n                - RFC3339\n                - RFC3339Nano\n    Permission:\n      required: [action, resource]\n      properties:\n        action:\n          type: string\n          enum:\n            - read\n            - write\n        resource:\n          type: object\n          required: [type]\n          properties:\n            type:\n              type: string\n              enum:\n                - authorizations\n                - buckets\n                - dashboards\n                - orgs\n                - sources\n                - tasks\n                - telegrafs\n                - users\n                - variables\n                - scrapers\n                - secrets\n                - labels\n                - views\n                - documents\n                - notificationRules\n                - notificationEndpoints\n                - checks\n            id:\n              type: string\n              nullable: true\n              description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.\n            name:\n              type: string\n              nullable: true\n              description: Optional name of the resource if the resource has a name field.\n            orgID:\n              type: string\n              nullable: true\n              description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.\n            org:\n              type: string\n              nullable: true\n              description: Optional name of the organization of the organization with orgID.\n    AuthorizationUpdateRequest:\n      properties:\n        status:\n          description: If inactive the token is inactive and requests using the token will be rejected.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        description:\n          type: string\n          description: A description of the token.\n    Authorization:\n      required: [orgID, permissions]\n      allOf:\n        - $ref: \"#/components/schemas/AuthorizationUpdateRequest\"\n        - type: object\n          properties:\n            createdAt:\n              type: string\n              format: date-time\n              readOnly: true\n            updatedAt:\n              type: string\n              format: date-time\n              readOnly: true\n            orgID:\n              type: string\n              description: ID of org that authorization is scoped to.\n            permissions:\n              type: array\n              minLength: 1\n              description: List of permissions for an auth.  An auth must have at least one Permission.\n              items:\n                $ref: \"#/components/schemas/Permission\"\n            id:\n              readOnly: true\n              type: string\n            token:\n              readOnly: true\n              type: string\n              description: Passed via the Authorization Header and Token Authentication type.\n            userID:\n              readOnly: true\n              type: string\n              description: ID of user that created and owns the token.\n            user:\n              readOnly: true\n              type: string\n              description: Name of user that created and owns the token.\n            org:\n              readOnly: true\n              type: string\n              description: Name of the org token is scoped to.\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: \"/api/v2/authorizations/1\"\n                user: \"/api/v2/users/12\"\n              properties:\n                self:\n                  readOnly: true\n                  $ref: \"#/components/schemas/Link\"\n                user:\n                  readOnly: true\n                  $ref: \"#/components/schemas/Link\"\n    Authorizations:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        authorizations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Authorization\"\n    PostBucketRequest:\n      properties:\n        orgID:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        rp:\n          type: string\n        retentionRules:\n          type: array\n          description: Rules to expire or retain data.  No rules means data never expires.\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                default: expire\n                enum:\n                  - expire\n              everySeconds:\n                type: integer\n                description: Duration in seconds for how long data will be kept in the database.\n                example: 86400\n                minimum: 1\n            required: [type, everySeconds]\n      required: [name, retentionRules]\n    Bucket:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            labels: \"/api/v2/buckets/1/labels\"\n            logs: \"/api/v2/buckets/1/logs\"\n            members: \"/api/v2/buckets/1/members\"\n            org: \"/api/v2/orgs/2\"\n            owners: \"/api/v2/buckets/1/owners\"\n            self: \"/api/v2/buckets/1\"\n            write: \"/api/v2/write?org=2\u0026bucket=1\"\n          properties:\n            labels:\n              description: URL to retrieve labels for this bucket\n              $ref: \"#/components/schemas/Link\"\n            logs:\n              description: URL to retrieve operation logs for this bucket\n              $ref: \"#/components/schemas/Link\"\n            members:\n              description: URL to retrieve members that can read this bucket\n              $ref: \"#/components/schemas/Link\"\n            org:\n              description: URL to retrieve parent organization for this bucket\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              description: URL to retrieve owners that can read and write to this bucket.\n              $ref: \"#/components/schemas/Link\"\n            self:\n              description: URL for this bucket\n              $ref: \"#/components/schemas/Link\"\n            write:\n              description: URL to write line protocol for this bucket\n              $ref: \"#/components/schemas/Link\"\n        id:\n          readOnly: true\n          type: string\n        type:\n          readOnly: true\n          type: string\n          default: user\n          enum:\n            - user\n            - system\n        name:\n          type: string\n        description:\n          type: string\n        orgID:\n          type: string\n        rp:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        retentionRules:\n          type: array\n          description: Rules to expire or retain data.  No rules means data never expires.\n          items:\n            type: object\n            properties:\n              type:\n                type: string\n                default: expire\n                enum:\n                  - expire\n              everySeconds:\n                type: integer\n                description: Duration in seconds for how long data will be kept in the database.\n                example: 86400\n                minimum: 1\n            required: [type, everySeconds]\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n      required: [name, retentionRules]\n    Buckets:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        buckets:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Bucket\"\n    Link:\n      type: string\n      format: uri\n      readOnly: true\n      description: URI of resource.\n    Links:\n      type: object\n      properties:\n        next:\n          $ref: \"#/components/schemas/Link\"\n        self:\n          $ref: \"#/components/schemas/Link\"\n        prev:\n          $ref: \"#/components/schemas/Link\"\n      required: [self]\n    Logs:\n      type: object\n      properties:\n        events:\n          readOnly: true\n          type: array\n          items:\n            $ref: \"#/components/schemas/LogEvent\"\n    LogEvent:\n      type: object\n      properties:\n        time:\n          readOnly: true\n          description: Time event occurred, RFC3339Nano.\n          type: string\n          format: date-time\n        message:\n          readOnly: true\n          description: A description of the event that occurred.\n          type: string\n          example: Halt and catch fire\n    OperationLog:\n      type: object\n      readOnly: true\n      properties:\n        description:\n          type: string\n          description: A description of the event that occurred.\n          example: Bucket Created\n        time:\n          type: string\n          description: Time event occurred, RFC3339Nano.\n          format: date-time\n        userID:\n          type: string\n          description: ID of the user who operated the event.\n        links:\n          type: object\n          properties:\n            user:\n              $ref: \"#/components/schemas/Link\"\n    OperationLogs:\n      type: object\n      properties:\n        logs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/OperationLog\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    Organization:\n      properties:\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/orgs/1\"\n            members: \"/api/v2/orgs/1/members\"\n            owners: \"/api/v2/orgs/1/owners\"\n            labels: \"/api/v2/orgs/1/labels\"\n            secrets: \"/api/v2/orgs/1/secrets\"\n            buckets: \"/api/v2/buckets?org=myorg\"\n            tasks: \"/api/v2/tasks?org=myorg\"\n            dashboards: \"/api/v2/dashboards?org=myorg\"\n            logs: \"/api/v2/orgs/1/logs\"\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n            members:\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              $ref: \"#/components/schemas/Link\"\n            labels:\n              $ref: \"#/components/schemas/Link\"\n            secrets:\n              $ref: \"#/components/schemas/Link\"\n            buckets:\n              $ref: \"#/components/schemas/Link\"\n            tasks:\n              $ref: \"#/components/schemas/Link\"\n            dashboards:\n              $ref: \"#/components/schemas/Link\"\n            logs:\n              $ref: \"#/components/schemas/Link\"\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          description: If inactive the organization is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n      required: [name]\n    Organizations:\n      type: object\n      properties:\n        links:\n          $ref: \"#/components/schemas/Links\"\n        orgs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Organization\"\n    PkgApply:\n      type: object\n      properties:\n        apply:\n          type: boolean\n        package:\n          $ref: \"#/components/schemas/Pkg\"\n    PkgCreate:\n      type: object\n      properties:\n        pkgName:\n          type: string\n        pkgDescription:\n          type: string\n        pkgVersion:\n          type: string\n        resources:\n          type: object\n          properties:\n            id:\n              type: string\n            kind:\n              type: string\n              enum:\n                - bucket\n                - dashboard\n                - label\n                - variable\n            name:\n              type: string\n          required: [id, kind]\n    Pkg:\n      type: object\n      properties:\n        apiVersion:\n          type: string\n        kind:\n          type: string\n          enum:\n            - package\n        meta:\n          type: object\n          properties:\n            description:\n              type: string\n            pkgName:\n              type: string\n            pkgVersion:\n              type: string\n        spec:\n          type: object\n          properties:\n            resources:\n              type: array\n              items:\n                type: object\n    PkgSummary:\n      type: object\n      properties:\n        summary:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                allOf:\n                  - $ref: \"#/components/schemas/Bucket\"\n                  - type: object\n                    properties:\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Label\"\n            labels:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Label\"\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: \"string\"\n                  orgID:\n                    type: \"string\"\n                  name:\n                    type: \"string\"\n                  description:\n                    type: \"string\"\n                  labelAssociations:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Label\"\n                  charts:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/PkgChart\"\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  resourceName:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceType:\n                    type: string\n                  labelName:\n                    type: string\n                  labelID:\n                    type: string\n            variables:\n              type: array\n              items:\n                allOf:\n                  - $ref: \"#/components/schemas/Variable\"\n                  - type: object\n                    properties:\n                      labelAssociations:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Label\"\n        diff:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  oldDescription:\n                    type: string\n                  newDescription:\n                    type: string\n                  oldRP:\n                    type: string\n                  newRP:\n                    type: string\n            dashboards:\n              type: array\n              items:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  description:\n                    type: string\n                  charts:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/PkgChart\"\n            labels:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  oldDescription:\n                    type: string\n                  newDescription:\n                    type: string\n                  oldColor:\n                    type: string\n                  newColor:\n                    type: string\n            labelMappings:\n              type: array\n              items:\n                type: object\n                properties:\n                  isNew:\n                    type: boolean\n                  resourceType:\n                    type: string\n                  resourceID:\n                    type: string\n                  resourceName:\n                    type: string\n                  labelID:\n                    type: string\n                  labelName:\n                    type: string\n            variables:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  oldDescription:\n                    type: string\n                  newDescription:\n                    type: string\n                  oldArgs:\n                    $ref: \"#/components/schemas/VariableProperties\"\n                  newArgs:\n                    $ref: \"#/components/schemas/VariableProperties\"\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              kind:\n                type: string\n              reason:\n                type: string\n              fields:\n                type: array\n                items:\n                  type: string\n              indexes:\n                type: array\n                items:\n                  type: integer\n    PkgChart:\n      type: object\n      properties:\n        xPos:\n          type: integer\n        yPos:\n          type: integer\n        height:\n          type: integer\n        width:\n          type: integer\n        properties: # field name is properties\n          $ref: \"#/components/schemas/ViewProperties\"\n    Runs:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        runs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Run\"\n    Run:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        taskID:\n          readOnly: true\n          type: string\n        status:\n          readOnly: true\n          type: string\n          enum:\n            - scheduled\n            - started\n            - failed\n            - success\n            - canceled\n        scheduledFor:\n          description: Time used for run's \"now\" option, RFC3339.\n          type: string\n          format: date-time\n        log:\n          description: An array of logs associated with the run.\n          type: array\n          readOnly: true\n          items:\n            type: object\n            properties:\n              runID:\n                type: string\n              time:\n                type: string\n              message:\n                type: string\n        startedAt:\n          readOnly: true\n          description: Time run started executing, RFC3339Nano.\n          type: string\n          format: date-time\n        finishedAt:\n          readOnly: true\n          description: Time run finished executing, RFC3339Nano.\n          type: string\n          format: date-time\n        requestedAt:\n          readOnly: true\n          description: Time run was manually requested, RFC3339Nano.\n          type: string\n          format: date-time\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/tasks/1/runs/1\"\n            task: \"/api/v2/tasks/1\"\n            retry: \"/api/v2/tasks/1/runs/1/retry\"\n            logs: \"/api/v2/tasks/1/runs/1/logs\"\n          properties:\n            self:\n              type: string\n              format: uri\n            task:\n              type: string\n              format: uri\n            logs:\n              type: string\n              format: uri\n            retry:\n              type: string\n              format: uri\n    RunManually:\n      properties:\n        scheduledFor:\n          nullable: true\n          description: Time used for run's \"now\" option, RFC3339.  Default is the server's now time.\n          type: string\n          format: date-time\n    Tasks:\n      type: object\n      properties:\n        links:\n          readOnly: true\n          $ref: \"#/components/schemas/Links\"\n        tasks:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Task\"\n    Task:\n      type: object\n      properties:\n        id:\n          readOnly: true\n          type: string\n        type:\n          description: The type of task, this can be used for filtering tasks on list actions.\n          type: string\n        orgID:\n          description: The ID of the organization that owns this Task.\n          type: string\n        org:\n          description: The name of the organization that owns this Task.\n          type: string\n        name:\n          description: The name of the task.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n        status:\n          $ref: \"#/components/schemas/TaskStatusType\"\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        authorizationID:\n          description: The ID of the authorization used when this task communicates with the query engine.\n          type: string\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        every:\n          description: A simple task repetition schedule; parsed from Flux.\n          type: string\n        cron:\n          description: A task repetition schedule in the form '* * * * * *'; parsed from Flux.\n          type: string\n        offset:\n          description: Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.\n          type: string\n        latestCompleted:\n          description: Timestamp of latest scheduled, completed run, RFC3339.\n          type: string\n          format: date-time\n          readOnly: true\n        lastRunStatus:\n          readOnly: true\n          type: string\n          enum:\n            - failed\n            - success\n            - canceled\n        lastRunError:\n          readOnly: true\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/tasks/1\"\n            owners: \"/api/v2/tasks/1/owners\"\n            members: \"/api/v2/tasks/1/members\"\n            labels: \"/api/v2/tasks/1/labels\"\n            runs: \"/api/v2/tasks/1/runs\"\n            logs: \"/api/v2/tasks/1/logs\"\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              $ref: \"#/components/schemas/Link\"\n            members:\n              $ref: \"#/components/schemas/Link\"\n            runs:\n              $ref: \"#/components/schemas/Link\"\n            logs:\n              $ref: \"#/components/schemas/Link\"\n            labels:\n              $ref: \"#/components/schemas/Link\"\n      required: [id, name, orgID, flux]\n    TaskStatusType:\n      type: string\n      enum: [active, inactive]\n    User:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        oauthID:\n          type: string\n        name:\n          type: string\n        status:\n          description: If inactive the user is inactive.\n          default: active\n          type: string\n          enum:\n            - active\n            - inactive\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/users/1\"\n            logs: \"/api/v2/users/1/logs\"\n          properties:\n            self:\n              type: string\n              format: uri\n            logs:\n              type: string\n              format: uri\n      required: [name]\n    Users:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n    ResourceMember:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            role:\n              type: string\n              default: member\n              enum:\n                - member\n    ResourceMembers:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ResourceMember\"\n    ResourceOwner:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - type: object\n          properties:\n            role:\n              type: string\n              default: owner\n              enum:\n                - owner\n    ResourceOwners:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        users:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ResourceOwner\"\n    FluxSuggestions:\n      type: object\n      properties:\n        funcs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FluxSuggestion\"\n    FluxSuggestion:\n      type: object\n      properties:\n        name:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: string\n    Routes:\n      properties:\n        authorizations:\n          type: string\n          format: uri\n        buckets:\n          type: string\n          format: uri\n        dashboards:\n          type: string\n          format: uri\n        external:\n          type: object\n          properties:\n            statusFeed:\n              type: string\n              format: uri\n        variables:\n          type: string\n          format: uri\n        me:\n          type: string\n          format: uri\n        orgs:\n          type: string\n          format: uri\n        query:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n            ast:\n              type: string\n              format: uri\n            analyze:\n              type: string\n              format: uri\n            suggestions:\n              type: string\n              format: uri\n        setup:\n          type: string\n          format: uri\n        signin:\n          type: string\n          format: uri\n        signout:\n          type: string\n          format: uri\n        sources:\n          type: string\n          format: uri\n        system:\n          type: object\n          properties:\n            metrics:\n              type: string\n              format: uri\n            debug:\n              type: string\n              format: uri\n            health:\n              type: string\n              format: uri\n        tasks:\n          type: string\n          format: uri\n        telegrafs:\n          type: string\n          format: uri\n        users:\n          type: string\n          format: uri\n        write:\n          type: string\n          format: uri\n    Error:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          # This set of enumerations must remain in sync with the constants defined in errors.go\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n        message:\n          readOnly: true\n          description: Message is a human-readable message.\n          type: string\n      required: [code, message]\n    LineProtocolError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - empty value\n            - unavailable\n        message:\n          readOnly: true\n          description: Message is a human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Op describes the logical code operation during error. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Err is a stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n        line:\n          readOnly: true\n          description: First line within sent body containing malformed data\n          type: integer\n          format: int32\n      required: [code, message, op, err]\n    LineProtocolLengthError:\n      properties:\n        code:\n          description: Code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - invalid\n        message:\n          readOnly: true\n          description: Message is a human-readable message.\n          type: string\n        maxLength:\n          readOnly: true\n          description: Max length in bytes for a body of line-protocol.\n          type: integer\n          format: int32\n      required: [code, message, maxLength]\n    Field:\n      type: object\n      properties:\n        value:\n          description: \u003e-\n            value is the value of the field.  Meaning of the value is implied by\n            the `type` key\n          type: string\n        type:\n          description: \u003e-\n            `type` describes the field type. `func` is a function. `field` is a field reference.\n          type: string\n          enum:\n            - func\n            - field\n            - integer\n            - number\n            - regex\n            - wildcard\n        alias:\n          description: \u003e-\n            Alias overrides the field name in the returned response.  Applies only\n            if type is `func`\n          type: string\n        args:\n          description: Args are the arguments to the function\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n    BuilderConfig:\n      type: object\n      properties:\n        buckets:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderTagsType'\n        functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/BuilderFunctionsType'\n        aggregateWindow:\n          type: object\n          properties:\n            period:\n              type: string\n    BuilderTagsType:\n      type: object\n      properties:\n        key:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n    BuilderFunctionsType:\n      type: object\n      properties:\n        name:\n          type: string\n    DashboardQuery:\n      type: object\n      properties:\n        text:\n          type: string\n          description: The text of the Flux query.\n        editMode:\n          $ref: '#/components/schemas/QueryEditMode'\n        name:\n          type: string\n        builderConfig:\n          $ref: '#/components/schemas/BuilderConfig'\n    QueryEditMode:\n      type: string\n      enum: ['builder', 'advanced']\n    Axis:\n      type: object\n      description: The description of a particular axis for a visualization.\n      properties:\n        bounds:\n          type: array\n          minItems: 0\n          maxItems: 2\n          description: \u003e-\n            The extents of an axis in the form [lower, upper]. Clients determine\n            whether bounds are to be inclusive or exclusive of their limits\n          items:\n            type: string\n        label:\n          description: Label is a description of this Axis\n          type: string\n        prefix:\n          description: Prefix represents a label prefix for formatting axis values.\n          type: string\n        suffix:\n          description: Suffix represents a label suffix for formatting axis values.\n          type: string\n        base:\n          description: Base represents the radix for formatting axis values.\n          type: string\n          enum: ['', '2', '10']\n        scale:\n          $ref: '#/components/schemas/AxisScale'\n    AxisScale:\n      description: 'Scale is the axis formatting scale. Supported: \"log\", \"linear\"'\n      type: string\n      enum: ['log', 'linear']\n    DashboardColor:\n      type: object\n      description: Defines an encoding of data value into color space.\n      required: [id, type, hex, name, value]\n      properties:\n        id:\n          description: The unique ID of the view color.\n          type: string\n        type:\n          description: Type is how the color is used.\n          type: string\n          enum:\n            - min\n            - max\n            - threshold\n            - scale\n            - text\n            - background\n        hex:\n          description: The hex number of the color\n          type: string\n          maxLength: 7\n          minLength: 7\n        name:\n          description: The user-facing name of the hex color.\n          type: string\n        value:\n          description: The data value mapped to this color.\n          type: number\n          format: float\n    RenamableField:\n      description: Describes a field that can be renamed and made visible or invisible.\n      type: object\n      properties:\n        internalName:\n          description: The calculated name of a field.\n          readOnly: true\n          type: string\n        displayName:\n          description: The name that a field is renamed to by the user.\n          type: string\n        visible:\n          description: Indicates whether this field should be visible on the table.\n          type: boolean\n    XYViewProperties:\n      type: object\n      required:\n        - type\n        - geom\n        - queries\n        - shape\n        - axes\n        - colors\n        - legend\n        - note\n        - showNoteWhenEmpty\n      properties:\n        type:\n          type: string\n          enum: [xy]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        legend:\n          $ref: '#/components/schemas/Legend'\n        xColumn:\n          type: string\n        yColumn:\n          type: string\n        shadeBelow:\n          type: boolean\n        geom:\n          $ref: '#/components/schemas/XYGeom'\n    XYGeom:\n      type: string\n      enum: [line, step, stacked, bar, monotoneX]\n    LinePlusSingleStatProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - shape\n        - axes\n        - colors\n        - legend\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - suffix\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum: [line-plus-single-stat]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        axes:\n          $ref: '#/components/schemas/Axes'\n        legend:\n          $ref: '#/components/schemas/Legend'\n        xColumn:\n          type: string\n        yColumn:\n          type: string\n        shadeBelow:\n          type: boolean\n        prefix:\n          type: string\n        suffix:\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    ScatterViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - fillColumns\n        - symbolColumns\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n      properties:\n        type:\n          type: string\n          enum: [scatter]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        xColumn:\n          type: string\n        yColumn:\n          type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        symbolColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n    HeatmapViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - yColumn\n        - xDomain\n        - yDomain\n        - xAxisLabel\n        - yAxisLabel\n        - xPrefix\n        - yPrefix\n        - xSuffix\n        - ySuffix\n        - binSize\n      properties:\n        type:\n          type: string\n          enum: [heatmap]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        xColumn:\n          type: string\n        yColumn:\n          type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        yDomain:\n          type: array\n          items:\n            type: number\n          maxItems: 2\n        xAxisLabel:\n          type: string\n        yAxisLabel:\n          type: string\n        xPrefix:\n          type: string\n        xSuffix:\n          type: string\n        yPrefix:\n          type: string\n        ySuffix:\n          type: string\n        binSize:\n          type: number\n    SingleStatViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - suffix\n        - legend\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum: [single-stat]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        prefix:\n          type: string\n        suffix:\n          type: string\n        legend:\n          $ref: '#/components/schemas/Legend'\n        decimalPlaces:\n          $ref: \"#/components/schemas/DecimalPlaces\"\n    HistogramViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - xColumn\n        - fillColumns\n        - xDomain\n        - xAxisLabel\n        - position\n        - binCount\n      properties:\n        type:\n          type: string\n          enum: [histogram]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        xColumn:\n          type: string\n        fillColumns:\n          type: array\n          items:\n            type: string\n        xDomain:\n          type: array\n          items:\n            type: number\n            format: float\n        xAxisLabel:\n          type: string\n        position:\n          type: string\n          enum: [overlaid, stacked]\n        binCount:\n          type: integer\n    GaugeViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - prefix\n        - suffix\n        - legend\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum: [gauge]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        prefix:\n          type: string\n        suffix:\n          type: string\n        legend:\n          $ref: '#/components/schemas/Legend'\n        decimalPlaces:\n          $ref: \"#/components/schemas/DecimalPlaces\"\n    TableViewProperties:\n      type: object\n      required:\n        - type\n        - queries\n        - colors\n        - shape\n        - note\n        - showNoteWhenEmpty\n        - tableOptions\n        - fieldOptions\n        - timeFormat\n        - decimalPlaces\n      properties:\n        type:\n          type: string\n          enum: [table]\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardColor\"\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n        showNoteWhenEmpty:\n          description: If true, will display note when empty\n          type: boolean\n        tableOptions:\n          properties:\n            verticalTimeAxis:\n              description: \u003e-\n                verticalTimeAxis describes the orientation of the table by\n                indicating whether the time axis will be displayed vertically\n              type: boolean\n            sortBy:\n              $ref: \"#/components/schemas/RenamableField\"\n            wrapping:\n              description: Wrapping describes the text wrapping style to be used in table views\n              type: string\n              enum:\n                - truncate\n                - wrap\n                - single-line\n            fixFirstColumn:\n              description: \u003e-\n                fixFirstColumn indicates whether the first column of the table\n                should be locked\n              type: boolean\n        fieldOptions:\n          description: \u003e-\n            fieldOptions represent the fields retrieved by the query with\n            customization options\n          type: array\n          items:\n            $ref: '#/components/schemas/RenamableField'\n        timeFormat:\n          description: \u003e-\n            timeFormat describes the display format for time values according to\n            moment.js date formatting\n          type: string\n        decimalPlaces:\n          $ref: '#/components/schemas/DecimalPlaces'\n    MarkdownViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - note\n      properties:\n        type:\n          type: string\n          enum: [markdown]\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        note:\n          type: string\n    CheckViewProperties:\n      type: object\n      required:\n        - type\n        - shape\n        - checkID\n        - queries\n        - colors\n      properties:\n        type:\n          type: string\n          enum: [check]\n        shape:\n          type: string\n          enum: ['chronograf-v2']\n        checkID:\n          type: string\n        check:\n          $ref: '#/components/schemas/Check'\n        queries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DashboardQuery\"\n        colors:\n          description: Colors define color encoding of data into a visualization\n          type: array\n          items:\n            type: string\n    Axes:\n      description: The viewport for a View's visualizations\n      type: object\n      required: ['x', 'y']\n      properties:\n        x:\n          $ref: '#/components/schemas/Axis'\n        \"y\": # Quoted to prevent YAML parser from interpreting y as shorthand for true.\n          $ref: '#/components/schemas/Axis'\n    Legend:\n      description: Legend define encoding of data into a view's legend\n      type: object\n      properties:\n        type:\n          description: The style of the legend.\n          type: string\n          enum:\n            - static\n        orientation:\n          description: \u003e-\n            orientation is the location of the legend with respect to the view\n            graph\n          type: string\n          enum:\n            - top\n            - bottom\n            - left\n            - right\n    DecimalPlaces:\n      description: Indicates whether decimal places should be enforced, and how many digits it should show.\n      type: object\n      properties:\n        isEnforced:\n          description: Indicates whether decimal point setting should be enforced\n          type: boolean\n        digits:\n          description: The number of digits after decimal to display\n          type: integer\n          format: int32\n    ConstantVariableProperties:\n      properties:\n        type:\n          type: string\n          enum: [constant]\n        values:\n          type: array\n          items:\n            type: string\n    MapVariableProperties:\n      properties:\n        type:\n          type: string\n          enum: [map]\n        values:\n          type: object\n          additionalProperties:\n            type: string\n    QueryVariableProperties:\n      properties:\n        type:\n          type: string\n          enum: [query]\n        values:\n          type: object\n          properties:\n            query:\n              type: string\n            language:\n              type: string\n    Variable:\n      type: object\n      required:\n        - name\n        - orgID\n        - arguments\n      properties:\n        links:\n          type: object\n          readOnly: true\n          properties:\n            self:\n              type: string\n              format: uri\n            org:\n              type: string\n              format: uri\n            labels:\n              type: string\n              format: uri\n        id:\n          readOnly: true\n          type: string\n        orgID:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        selected:\n          type: array\n          items:\n            type: string\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        arguments:\n          $ref: \"#/components/schemas/VariableProperties\"\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    Variables:\n      type: object\n      example:\n        variables:\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - hello\n          arguments:\n            type: constant\n            values:\n            - howdy\n            - hello\n            - hi\n            - yo\n            - oy\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - c\n          arguments:\n            type: map\n            values:\n              a: fdjaklfdjkldsfjlkjdsa\n              b: dfaksjfkljekfajekdljfas\n              c: fdjksajfdkfeawfeea\n        - id: '1221432'\n          name: \":ok:\"\n          selected:\n          - host\n          arguments:\n            type: query\n            query: 'from(bucket: \"foo\") |\u003e showMeasurements()'\n            language: flux\n      properties:\n        variables:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Variable\"\n    VariableProperties:\n      type: object\n      oneOf:\n        - $ref: \"#/components/schemas/QueryVariableProperties\"\n        - $ref: \"#/components/schemas/ConstantVariableProperties\"\n        - $ref: \"#/components/schemas/MapVariableProperties\"\n    ViewProperties:\n      oneOf:\n        - $ref: \"#/components/schemas/LinePlusSingleStatProperties\"\n        - $ref: \"#/components/schemas/XYViewProperties\"\n        - $ref: \"#/components/schemas/SingleStatViewProperties\"\n        - $ref: \"#/components/schemas/HistogramViewProperties\"\n        - $ref: \"#/components/schemas/GaugeViewProperties\"\n        - $ref: \"#/components/schemas/TableViewProperties\"\n        - $ref: \"#/components/schemas/MarkdownViewProperties\"\n        - $ref: \"#/components/schemas/CheckViewProperties\"\n        - $ref: \"#/components/schemas/ScatterViewProperties\"\n        - $ref: \"#/components/schemas/HeatmapViewProperties\"\n    View:\n      required:\n        - name\n        - properties\n      properties:\n        links:\n          type: object\n          readOnly: true\n          properties:\n            self:\n              type: string\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          $ref: '#/components/schemas/ViewProperties'\n    Views:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n        views:\n          type: array\n          items:\n            $ref: \"#/components/schemas/View\"\n    CellUpdate:\n      type: object\n      properties:\n        x:\n          type: integer\n          format: int32\n        \"y\": # Quoted to prevent YAML parser from interpreting y as shorthand for true.\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n    CreateCell:\n      type: object\n      properties:\n        name:\n          type: string\n        x:\n          type: integer\n          format: int32\n        \"y\": # Quoted to prevent YAML parser from interpreting y as shorthand for true.\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        usingView:\n          type: string\n          description: Makes a copy of the provided view.\n    AnalyzeQueryResponse:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              line:\n                type: integer\n              column:\n                type: integer\n              character:\n                type: integer\n              message:\n                type: string\n    Cell:\n      type: object\n      properties:\n        id:\n          type: string\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            view:\n              type: string\n        x:\n          type: integer\n          format: int32\n        \"y\": # Quoted to prevent YAML parser from interpreting y as shorthand for true.\n          type: integer\n          format: int32\n        w:\n          type: integer\n          format: int32\n        h:\n          type: integer\n          format: int32\n        viewID:\n          type: string\n          description: The reference to a view from the views API.\n    Cells:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Cell\"\n    Secrets:\n      additionalProperties:\n        type: string\n      example:\n        apikey: abc123xyz\n    SecretKeys:\n      type: object\n      properties:\n        secrets:\n          type: array\n          items:\n            type: string\n    SecretKeysResponse:\n      allOf:\n        - $ref: \"#/components/schemas/SecretKeys\"\n        - type: object\n          properties:\n            links:\n              readOnly: true\n              type: object\n              properties:\n                self:\n                  type: string\n                org:\n                  type: string\n    CreateDashboardRequest:\n      properties:\n        orgID:\n          type: string\n          description: The ID of the organization that owns the dashboard.\n        name:\n          type: string\n          description: The user-facing name of the dashboard.\n        description:\n          type: string\n          description: The user-facing description of the dashboard.\n      required:\n        - orgID\n        - name\n    Dashboard:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/CreateDashboardRequest\"\n        - type: object\n          properties:\n            links:\n              type: object\n              example:\n                self: \"/api/v2/dashboards/1\"\n                cells: \"/api/v2/dashboards/1/cells\"\n                owners: \"/api/v2/dashboards/1/owners\"\n                members: \"/api/v2/dashboards/1/members\"\n                logs: \"/api/v2/dashboards/1/logs\"\n                labels: \"/api/v2/dashboards/1/labels\"\n                org: \"/api/v2/labels/1\"\n              properties:\n                self:\n                  $ref: \"#/components/schemas/Link\"\n                cells:\n                  $ref: \"#/components/schemas/Link\"\n                members:\n                  $ref: \"#/components/schemas/Link\"\n                owners:\n                  $ref: \"#/components/schemas/Link\"\n                logs:\n                  $ref: \"#/components/schemas/Link\"\n                labels:\n                  $ref: \"#/components/schemas/Link\"\n                org:\n                  $ref: \"#/components/schemas/Link\"\n            id:\n              readOnly: true\n              type: string\n            meta:\n              type: object\n              properties:\n                createdAt:\n                  type: string\n                  format: date-time\n                updatedAt:\n                  type: string\n                  format: date-time\n            cells:\n                $ref: \"#/components/schemas/Cells\"\n            labels:\n              $ref: \"#/components/schemas/Labels\"\n    Dashboards:\n      type: object\n      properties:\n        links:\n          $ref: \"#/components/schemas/Links\"\n        dashboards:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Dashboard\"\n    Source:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n            query:\n              type: string\n            health:\n              type: string\n            buckets:\n              type: string\n        id:\n          type: string\n        orgID:\n          type: string\n        default:\n          type: boolean\n        name:\n          type: string\n        type:\n          type: string\n          enum: [\"v1\",\"v2\",\"self\"]\n        url:\n          type: string\n          format: uri\n        insecureSkipVerify:\n          type: boolean\n        telegraf:\n          type: string\n        token:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        sharedSecret:\n          type: string\n        metaUrl:\n          type: string\n          format: uri\n        defaultRP:\n          type: string\n        languages:\n          type: array\n          readOnly: true\n          items:\n            type: string\n            enum:\n              - flux\n              - influxql\n    Sources:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            self:\n              type: string\n              format: uri\n        sources:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Source\"\n    ScraperTargetRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the scraper target.\n        type:\n          type: string\n          description: The type of the metrics to be parsed.\n          enum: [prometheus]\n        url:\n          type: string\n          description: The URL of the metrics endpoint.\n          example:  http://localhost:9090/metrics\n        orgID:\n          type: string\n          description: The organization ID.\n        bucketID:\n          type: string\n          description: The ID of the bucket to write to.\n    ScraperTargetResponse:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/ScraperTargetRequest\"\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n            org:\n              type: string\n              description: The organization name.\n            bucket:\n              type: string\n              description: The bucket name.\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: \"/api/v2/scrapers/1\"\n                owners: \"/api/v2/scrapers/1/owners\"\n                members: \"/api/v2/scrapers/1/members\"\n                bucket: \"/api/v2/buckets/1\"\n                organization: \"/api/v2/orgs/1\"\n              properties:\n                self:\n                  $ref: \"#/components/schemas/Link\"\n                members:\n                  $ref: \"#/components/schemas/Link\"\n                owners:\n                  $ref: \"#/components/schemas/Link\"\n                bucket:\n                  $ref: \"#/components/schemas/Link\"\n                organization:\n                  $ref: \"#/components/schemas/Link\"\n    ScraperTargetResponses:\n      type: object\n      properties:\n        configurations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ScraperTargetResponse\"\n    DocumentMeta:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        templateID:\n          type: string\n        description:\n          type: string\n        version:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n        - name\n        - version\n    Document:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        meta:\n          $ref: \"#/components/schemas/DocumentMeta\"\n        content:\n          type: object\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/documents/templates/1\"\n          properties:\n            self:\n              description: The document URL.\n              $ref: \"#/components/schemas/Link\"\n      required:\n        - id\n        - meta\n        - content\n    DocumentCreate:\n      type: object\n      properties:\n        meta:\n          $ref: \"#/components/schemas/DocumentMeta\"\n        content:\n          type: object\n        org:\n          type: string\n          description: The organization Name. Specify either `orgID` or `org`.\n        orgID:\n          type: string\n          description: The organization Name. Specify either `orgID` or `org`.\n        labels:\n          type: array\n          description: An array of label IDs to be added as labels to the document.\n          items:\n            type: string\n      required:\n        - meta\n        - content\n    DocumentUpdate:\n      type: object\n      properties:\n        meta:\n          $ref: \"#/components/schemas/DocumentMeta\"\n        content:\n          type: object\n    DocumentListEntry:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n        meta:\n          $ref: \"#/components/schemas/DocumentMeta\"\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/documents/templates/1\"\n          properties:\n            self:\n              description: The document URL.\n              $ref: \"#/components/schemas/Link\"\n      required:\n        - id\n        - meta\n    Documents:\n      type: object\n      properties:\n        documents:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DocumentListEntry\"\n    TelegrafRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        metadata:\n          type: object\n          properties:\n            buckets:\n              type: array\n              items:\n                type: string\n        config:\n          type: string\n        orgID:\n          type: string\n    Telegraf:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/TelegrafRequest\"\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n            links:\n              type: object\n              readOnly: true\n              example:\n                self: \"/api/v2/telegrafs/1\"\n                lables: \"/api/v2/telegrafs/1/labels\"\n                owners: \"/api/v2/telegrafs/1/owners\"\n                members: \"/api/v2/telegrafs/1/members\"\n              properties:\n                self:\n                  $ref: \"#/components/schemas/Link\"\n                labels:\n                  $ref: \"#/components/schemas/Link\"\n                members:\n                  $ref: \"#/components/schemas/Link\"\n                owners:\n                  $ref: \"#/components/schemas/Link\"\n            labels:\n              readOnly: true\n              $ref: \"#/components/schemas/Labels\"\n    Telegrafs:\n      type: object\n      properties:\n        configurations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Telegraf\"\n    TelegrafPlugin:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [inputs, outputs, aggregators, processors]\n        name:\n          type: string\n        description:\n          type: string\n        config:\n          type: object\n          additionalProperties:\n            type: object\n    IsOnboarding:\n      type: object\n      properties:\n        allowed:\n          description: True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.\n          type: boolean\n    OnboardingRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        org:\n          type: string\n        bucket:\n          type: string\n        retentionPeriodHrs:\n          type: integer\n      required:\n        - username\n        - password\n        - org\n        - bucket\n    OnboardingResponse:\n      type: object\n      properties:\n        user:\n          $ref: \"#/components/schemas/User\"\n        org:\n          $ref: \"#/components/schemas/Organization\"\n        bucket:\n          $ref: \"#/components/schemas/Bucket\"\n        auth:\n          $ref: \"#/components/schemas/Authorization\"\n    PasswordResetBody:\n      properties:\n        password:\n          type: string\n      required:\n        - password\n    AddResourceMemberRequestBody:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n      required:\n        - id\n    Ready:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - ready\n        started:\n          type: string\n          format: date-time\n          example: \"2019-03-13T10:09:33.891196-04:00\"\n        up:\n          type: string\n          example: \"14m45.911966424s\"\n    HealthCheck:\n      type: object\n      required:\n        - name\n        - status\n      properties:\n        name:\n          type: string\n        message:\n          type: string\n        checks:\n          type: array\n          items:\n            $ref: \"#/components/schemas/HealthCheck\"\n        status:\n          type: string\n          enum:\n            - pass\n            - fail\n    Labels:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Label\"\n    Label:\n      type: object\n      properties:\n        id:\n          readOnly: true\n          type: string\n        orgID:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example: {\"color\": \"ffb3b3\", \"description\": \"this is a description\"}\n    LabelCreateRequest:\n      type: object\n      required: [orgID]\n      properties:\n        orgID:\n          type: string\n        name:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example: {\"color\": \"ffb3b3\", \"description\": \"this is a description\"}\n    LabelUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        properties:\n          type: object\n          description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.\n          example: {\"color\": \"ffb3b3\", \"description\": \"this is a description\"}\n    LabelMapping:\n      type: object\n      properties:\n        labelID:\n          type: string\n    LabelsResponse:\n      type: object\n      properties:\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    LabelResponse:\n      type: object\n      properties:\n        label:\n          $ref: \"#/components/schemas/Label\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    ASTResponse:\n      description: Contains the AST for the supplied Flux query\n      type: object\n      properties:\n        ast:\n          $ref: \"#/components/schemas/Package\"\n    WritePrecision:\n      type: string\n      enum:\n        - ms\n        - s\n        - us\n        - ns\n    TaskCreateRequest:\n      type: object\n      properties:\n        type:\n          description: The type of task, this can be used for filtering tasks on list actions.\n          type: string\n        orgID:\n          description: The ID of the organization that owns this Task.\n          type: string\n        org:\n          description: The name of the organization that owns this Task.\n          type: string\n        status:\n          $ref: \"#/components/schemas/TaskStatusType\"\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n      required: [flux]\n    TaskUpdateRequest:\n      type: object\n      properties:\n        status:\n          $ref: \"#/components/schemas/TaskStatusType\"\n        flux:\n          description: The Flux script to run for this task.\n          type: string\n        name:\n          description: Override the 'name' option in the flux script.\n          type: string\n        every:\n          description: Override the 'every' option in the flux script.\n          type: string\n        cron:\n          description: Override the 'cron' option in the flux script.\n          type: string\n        offset:\n          description: Override the 'offset' option in the flux script.\n          type: string\n        description:\n          description: An optional description of the task.\n          type: string\n    FluxResponse:\n      description: Rendered flux that backs the check or notification.\n      properties:\n        flux:\n          type: string\n    CheckPatch:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    CheckDiscriminator:\n      oneOf:\n        - $ref: \"#/components/schemas/DeadmanCheck\"\n        - $ref: \"#/components/schemas/ThresholdCheck\"\n      discriminator:\n        propertyName: type\n        mapping:\n          deadman:  \"#/components/schemas/DeadmanCheck\"\n          threshold: \"#/components/schemas/ThresholdCheck\"\n    Check:\n      allOf:\n        - $ref: \"#/components/schemas/CheckDiscriminator\"\n    PostCheck:\n      allOf:\n        - $ref: \"#/components/schemas/CheckDiscriminator\"\n    Checks:\n      properties:\n        checks:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Check\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    CheckBase:\n      properties:\n        id:\n          readOnly: true\n          type: string\n        name:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this check.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this check.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        query:\n          $ref: \"#/components/schemas/DashboardQuery\"\n        status:\n          $ref: \"#/components/schemas/TaskStatusType\"\n        every:\n          description: Check repetition interval.\n          type: string\n        offset:\n          description: Duration to delay after the schedule, before executing check.\n          type: string\n        tags:\n          description: List of tags to write to each status.\n          type: array\n          items:\n            type: object\n            properties:\n              key:\n                type: string\n              value:\n                type: string\n        description:\n          description: An optional description of the check.\n          type: string\n        statusMessageTemplate:\n          description: The template used to generate and write a status message.\n          type: string\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/checks/1\"\n            labels: \"/api/v2/checks/1/labels\"\n            members: \"/api/v2/checks/1/members\"\n            owners: \"/api/v2/checks/1/owners\"\n          properties:\n            self:\n              description: URL for this check\n              $ref: \"#/components/schemas/Link\"\n            labels:\n              description: URL to retrieve labels for this check\n              $ref: \"#/components/schemas/Link\"\n            members:\n              description: URL to retrieve members for this check\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              description: URL to retrieve owners for this check\n              $ref: \"#/components/schemas/Link\"\n      required: [name, type, orgID, query]\n    ThresholdCheck:\n      allOf:\n        - $ref: \"#/components/schemas/CheckBase\"\n        - type: object\n          properties:\n            type:\n              type: string\n              enum: [threshold]\n            thresholds:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Threshold\"\n    Threshold:\n      oneOf:\n        - $ref: \"#/components/schemas/GreaterThreshold\"\n        - $ref: \"#/components/schemas/LesserThreshold\"\n        - $ref: \"#/components/schemas/RangeThreshold\"\n      discriminator:\n        propertyName: type\n        mapping:\n          greater: \"#/components/schemas/GreaterThreshold\"\n          lesser:  \"#/components/schemas/LesserThreshold\"\n          range: \"#/components/schemas/RangeThreshold\"\n    DeadmanCheck:\n      allOf:\n        - $ref: \"#/components/schemas/CheckBase\"\n        - type: object\n          properties:\n            type:\n              type: string\n              enum: [deadman]\n            timeSince:\n              description: String duration before deadman triggers.\n              type: string\n            staleTime:\n              description: String duration for time that a series is considered stale and should not trigger deadman.\n              type: string\n            reportZero:\n              description: If only zero values reported since time, trigger an alert\n              type: boolean\n            level:\n              $ref: \"#/components/schemas/CheckStatusLevel\"\n    ThresholdBase:\n      properties:\n        level:\n         $ref: \"#/components/schemas/CheckStatusLevel\"\n        allValues:\n          description: If true, only alert if all values meet threshold.\n          type: boolean\n    GreaterThreshold:\n      allOf:\n        - $ref: \"#/components/schemas/ThresholdBase\"\n        - type: object\n          required: [type, value]\n          properties:\n            type:\n              type: string\n              enum: [greater]\n            value:\n              type: number\n              format: float\n    LesserThreshold:\n      allOf:\n        - $ref: \"#/components/schemas/ThresholdBase\"\n        - type: object\n          required: [type, value]\n          properties:\n            type:\n              type: string\n              enum: [lesser]\n            value:\n              type: number\n              format: float\n    RangeThreshold:\n      allOf:\n        - $ref: \"#/components/schemas/ThresholdBase\"\n        - type: object\n          required: [type, min, max, within]\n          properties:\n            type:\n              type: string\n              enum: [range]\n            min:\n              type: number\n              format: float\n            max:\n              type: number\n              format: float\n            within:\n              type: boolean\n    CheckStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum: [\"UNKNOWN\", \"OK\", \"INFO\", \"CRIT\", \"WARN\"]\n    RuleStatusLevel:\n      description: The state to record if check matches a criteria.\n      type: string\n      enum: [\"UNKNOWN\", \"OK\", \"INFO\", \"CRIT\", \"WARN\", \"ANY\"]\n    NotificationRuleUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationRuleDiscriminator:\n      oneOf:\n        - $ref: \"#/components/schemas/SlackNotificationRule\"\n        - $ref: \"#/components/schemas/SMTPNotificationRule\"\n        - $ref: \"#/components/schemas/PagerDutyNotificationRule\"\n        - $ref: \"#/components/schemas/HTTPNotificationRule\"\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: \"#/components/schemas/SlackNotificationRule\"\n          smtp: \"#/components/schemas/SMTPNotificationRule\"\n          pagerduty: \"#/components/schemas/PagerDutyNotificationRule\"\n          http: \"#/components/schemas/HTTPNotificationRule\"\n    NotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleDiscriminator\"\n    PostNotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleDiscriminator\"\n    NotificationRules:\n      properties:\n        notificationRules:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NotificationRule\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    NotificationRuleBase:\n      type: object\n      required:\n        - id\n        - orgID\n        - status\n        - name\n        - tagRules\n        - statusRules\n        - endpointID\n      properties:\n        id:\n          readOnly: true\n          type: string\n        endpointID:\n          type: string\n        orgID:\n          description: The ID of the organization that owns this notification rule.\n          type: string\n        ownerID:\n          description: The ID of creator used to create this notification rule.\n          type: string\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          $ref: \"#/components/schemas/TaskStatusType\"\n        name:\n          description: Human-readable name describing the notification rule.\n          type: string\n        sleepUntil:\n          type: string\n        every:\n          description: The notification repetition interval.\n          type: string\n        offset:\n          description: Duration to delay after the schedule, before executing check.\n          type: string\n        runbookLink:\n          type: string\n        limitEvery:\n          description: Don't notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limit cannot be empty.\n          type: integer\n        limit:\n          description: Don't notify me more than \u003climit\u003e times every \u003climitEvery\u003e seconds. If set, limitEvery cannot be empty.\n          type: integer\n        tagRules:\n          description: List of tag rules the notification rule attempts to match.\n          type: array\n          items:\n            $ref: \"#/components/schemas/TagRule\"\n        description:\n          description: An optional description of the notification rule.\n          type: string\n        statusRules:\n          description: List of status rules the notification rule attempts to match.\n          type: array\n          minItems: 1\n          items:\n            $ref: \"#/components/schemas/StatusRule\"\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/notificationRules/1\"\n            labels: \"/api/v2/notificationRules/1/labels\"\n            members: \"/api/v2/notificationRules/1/members\"\n            owners: \"/api/v2/notificationRules/1/owners\"\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: \"#/components/schemas/Link\"\n            labels:\n              description: URL to retrieve labels for this notification rule.\n              $ref: \"#/components/schemas/Link\"\n            members:\n              description: URL to retrieve members for this notification rule.\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              description: URL to retrieve owners for this notification rule.\n              $ref: \"#/components/schemas/Link\"\n    TagRule:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        operator:\n          type: string\n          enum: [\"equal\", \"notequal\", \"equalregex\",\"notequalregex\"]\n    StatusRule:\n      type: object\n      properties:\n        currentLevel:\n          $ref: \"#/components/schemas/RuleStatusLevel\"\n        previousLevel:\n          $ref: \"#/components/schemas/RuleStatusLevel\"\n        count:\n          type: integer\n        period:\n          type: string\n    HTTPNotificationRuleBase:\n      type: object\n      required: [type]\n      properties:\n        type:\n          type: string\n          enum: [http]\n        url:\n          type: string\n    HTTPNotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleBase\"\n        - $ref: \"#/components/schemas/HTTPNotificationRuleBase\"\n    SlackNotificationRuleBase:\n      type: object\n      required: [type, messageTemplate]\n      properties:\n        type:\n          type: string\n          enum: [slack]\n        channel:\n          type: string\n        messageTemplate:\n          type: string\n    SlackNotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleBase\"\n        - $ref: \"#/components/schemas/SlackNotificationRuleBase\"\n    SMTPNotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleBase\"\n        - $ref: \"#/components/schemas/SMTPNotificationRuleBase\"\n    SMTPNotificationRuleBase:\n      type: object\n      required: [type, subjectTemplate, to]\n      properties:\n        type:\n          type: string\n          enum: [smtp]\n        subjectTemplate:\n          type: string\n        bodyTemplate:\n          type: string\n        to:\n          type: string\n    PagerDutyNotificationRule:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationRuleBase\"\n        - $ref: \"#/components/schemas/PagerDutyNotificationRuleBase\"\n    PagerDutyNotificationRuleBase:\n      type: object\n      required: [type, messageTemplate]\n      properties:\n        type:\n          type: string\n          enum: [pagerduty]\n        messageTemplate:\n          type: string\n    NotificationEndpointUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: string\n          enum:\n            - active\n            - inactive\n    NotificationEndpointDiscriminator:\n      oneOf:\n        - $ref: \"#/components/schemas/SlackNotificationEndpoint\"\n        - $ref: \"#/components/schemas/PagerDutyNotificationEndpoint\"\n        - $ref: \"#/components/schemas/HTTPNotificationEndpoint\"\n      discriminator:\n        propertyName: type\n        mapping:\n          slack: \"#/components/schemas/SlackNotificationEndpoint\"\n          pagerduty:  \"#/components/schemas/PagerDutyNotificationEndpoint\"\n          http: \"#/components/schemas/HTTPNotificationEndpoint\"\n    NotificationEndpoint:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationEndpointDiscriminator\"\n    PostNotificationEndpoint:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationEndpointDiscriminator\"\n    NotificationEndpoints:\n      properties:\n        notificationEndpoints:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NotificationEndpoint\"\n        links:\n          $ref: \"#/components/schemas/Links\"\n    NotificationEndpointBase:\n      type: object\n      required: [type, name]\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        userID:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        description:\n          description: An optional description of the notification endpoint.\n          type: string\n        name:\n          type: string\n        status:\n          description: The status of the endpoint.\n          default: active\n          type: string\n          enum: [\"active\", \"inactive\"]\n        labels:\n          $ref: \"#/components/schemas/Labels\"\n        links:\n          type: object\n          readOnly: true\n          example:\n            self: \"/api/v2/notificationEndpoints/1\"\n            labels: \"/api/v2/notificationEndpoints/1/labels\"\n            members: \"/api/v2/notificationEndpoints/1/members\"\n            owners: \"/api/v2/notificationEndpoints/1/owners\"\n          properties:\n            self:\n              description: URL for this endpoint.\n              $ref: \"#/components/schemas/Link\"\n            labels:\n              description: URL to retrieve labels for this endpoint.\n              $ref: \"#/components/schemas/Link\"\n            members:\n              description: URL to retrieve members for this endpoint.\n              $ref: \"#/components/schemas/Link\"\n            owners:\n              description: URL to retrieve owners for this endpoint.\n              $ref: \"#/components/schemas/Link\"\n        type:\n          $ref: \"#/components/schemas/NotificationEndpointType\"\n    SlackNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/NotificationEndpointBase\"\n        - type: object\n          required: [url]\n          properties:\n            url:\n              description: Specifies the URL of the Slack endpoint. Specify either `URL` or `Token`.\n              type: string\n            token:\n              description: Specifies the API token string. Specify either `URL` or `Token`.\n              type: string\n    PagerDutyNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/NotificationEndpointBase\"\n        - type: object\n          required: [clientURL, routingKey]\n          properties:\n            clientURL:\n              type: string\n            routingKey:\n              type: string\n    HTTPNotificationEndpoint:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/NotificationEndpointBase\"\n        - type: object\n          required: [url, authMethod, method]\n          properties:\n            url:\n              type: string\n            username:\n              type: string\n            password:\n              type: string\n            token:\n              type: string\n            method:\n              type: string\n              enum: ['POST', 'GET', 'PUT']\n            authMethod:\n              type: string\n              enum: ['none', 'basic', 'bearer']\n            contentTemplate:\n              type: string\n            headers:\n              type: object\n              description: Customized headers.\n              additionalProperties:\n                type: string\n    NotificationEndpointType:\n      type: string\n      enum: ['slack', 'pagerduty', 'http']\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n"
		}
	},
	"Error": "parse: paths: /query: post: PostQuery: requestBody: content: application/json: parse schema: parse schema: reference \"#/components/schemas/Query\": parse schema: extern: parse schema: reference \"#/components/schemas/File\": parse schema: body: parse schema: item: parse schema: reference \"#/components/schemas/Statement\": parse schema: oneOf: [1]: parse schema: reference \"#/components/schemas/VariableAssignment\": parse schema: init: parse schema: reference \"#/components/schemas/Expression\": parse schema: oneOf: [0]: parse schema: reference \"#/components/schemas/ArrayExpression\": parse schema: elements: parse schema: item: parse schema: reference \"#/components/schemas/Expression\": infinite recursion: \"#/components/schemas/Expression\""
}