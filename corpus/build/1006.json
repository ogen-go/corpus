{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/appwrite.io/server/0.9.3/openapi.yaml",
			"content": "openapi: 3.0.0\nservers:\n  - url: https://appwrite.io/v1\ninfo:\n  contact:\n    email: team@appwrite.io\n    name: Appwrite Team\n    url: https://appwrite.io/support\n  description: Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)\n  license:\n    name: BSD-3-Clause\n    url: https://raw.githubusercontent.com/appwrite/appwrite/master/LICENSE\n  termsOfService: https://appwrite.io/policy/terms\n  title: Appwrite\n  version: 0.9.3\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: /images/apple.png\n  x-origin:\n    - format: openapi\n      url: https://appwrite.io/specs/open-api3?platform=server\n      version: \"3.0\"\n  x-providerName: appwrite.io\n  x-serviceName: server\nexternalDocs:\n  description: Full API docs, specs and tutorials\n  url: https://appwrite.io/docs\ntags:\n  - description: The Account service allows you to authenticate and manage a user account.\n    name: account\n  - description: The Avatars service aims to help you complete everyday tasks related to your app image, icons, and avatars.\n    name: avatars\n  - description: The Database service allows you to create structured collections of documents, query and filter lists of documents\n    name: database\n  - description: The Locale service allows you to customize your app based on your users' location.\n    name: locale\n  - description: The Health service allows you to both validate and monitor your Appwrite server's health.\n    name: health\n  - description: The Project service allows you to manage all the projects in your Appwrite server.\n    name: projects\n  - description: The Storage service allows you to manage your project files.\n    name: storage\n  - description: The Teams service allows you to group users of your project and to enable them to share read and write access to your project resources\n    name: teams\n  - description: The Users service allows you to manage your project users.\n    name: users\n  - description: The Functions Service allows you view, create and manage your Cloud Functions.\n    name: functions\npaths:\n  /account:\n    delete:\n      description: Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately.\n      operationId: accountDelete\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Project: []\n      summary: Delete Account\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/delete.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete.md\n        method: delete\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 53\n    get:\n      description: Get currently logged in user data as JSON object.\n      operationId: accountGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - JWT: []\n          Project: []\n      summary: Get Account\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/get.md\n        method: get\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 44\n  /account/email:\n    patch:\n      description: |-\n        Update currently logged in user account email address. After changing user address, user confirmation status is being reset and a new confirmation mail is sent. For security measures, user password is required to complete this request.\n        This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n      operationId: accountUpdateEmail\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: User email.\n                  type: string\n                  x-example: null\n                password:\n                  description: User password. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n              required:\n                - email\n                - password\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - JWT: []\n          Project: []\n      summary: Update Account Email\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-email.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-email.md\n        method: updateEmail\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 51\n  /account/logs:\n    get:\n      description: Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log.\n      operationId: accountGetLogs\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/logList\"\n          description: Logs List\n      security:\n        - JWT: []\n          Project: []\n      summary: Get Account Logs\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/get-logs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-logs.md\n        method: getLogs\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 47\n  /account/name:\n    patch:\n      description: Update currently logged in user account name.\n      operationId: accountUpdateName\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: \"User name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n              required:\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - JWT: []\n          Project: []\n      summary: Update Account Name\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-name.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-name.md\n        method: updateName\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 49\n  /account/password:\n    patch:\n      description: Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional.\n      operationId: accountUpdatePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                oldPassword:\n                  description: Old user password. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n                password:\n                  description: New user password. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n              required:\n                - password\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - JWT: []\n          Project: []\n      summary: Update Account Password\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-password.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-password.md\n        method: updatePassword\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 50\n  /account/prefs:\n    get:\n      description: Get currently logged in user preferences as a key-value object.\n      operationId: accountGetPrefs\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/preferences\"\n          description: Preferences\n      security:\n        - JWT: []\n          Project: []\n      summary: Get Account Preferences\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/get-prefs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-prefs.md\n        method: getPrefs\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 45\n    patch:\n      description: Update currently logged in user account preferences. You can pass only the specific settings you wish to update.\n      operationId: accountUpdatePrefs\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                prefs:\n                  description: Prefs key-value JSON object.\n                  type: object\n                  x-example: null\n              required:\n                - prefs\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - JWT: []\n          Project: []\n      summary: Update Account Preferences\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-prefs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-prefs.md\n        method: updatePrefs\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 52\n  /account/recovery:\n    post:\n      description: Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.\n      operationId: accountCreateRecovery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: User email.\n                  type: string\n                  x-example: null\n                url:\n                  description: URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n                  type: string\n                  x-example: null\n              required:\n                - email\n                - url\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/token\"\n          description: Token\n      security:\n        - JWT: []\n          Project: []\n      summary: Create Password Recovery\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/create-recovery.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-recovery.md\n        method: createRecovery\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},email:{param-email}\n        rate-limit: 10\n        rate-time: 3600\n        scope: public\n        type: \"\"\n        weight: 56\n    put:\n      description: |-\n        Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.\n\n        Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n      operationId: accountUpdateRecovery\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                password:\n                  description: New password. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n                passwordAgain:\n                  description: New password again. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n                secret:\n                  description: Valid reset token.\n                  type: string\n                  x-example: null\n                userId:\n                  description: User account UID address.\n                  type: string\n                  x-example: null\n              required:\n                - userId\n                - secret\n                - password\n                - passwordAgain\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/token\"\n          description: Token\n      security:\n        - JWT: []\n          Project: []\n      summary: Complete Password Recovery\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-recovery.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-recovery.md\n        method: updateRecovery\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},userId:{param-userId}\n        rate-limit: 10\n        rate-time: 3600\n        scope: public\n        type: \"\"\n        weight: 57\n  /account/sessions:\n    delete:\n      description: Delete all sessions from the user account and remove any sessions cookies from the end client.\n      operationId: accountDeleteSessions\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Project: []\n      summary: Delete All Account Sessions\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/delete-sessions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-sessions.md\n        method: deleteSessions\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 100\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 55\n    get:\n      description: Get currently logged in user list of active sessions across different devices.\n      operationId: accountGetSessions\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/sessionList\"\n          description: Sessions List\n      security:\n        - JWT: []\n          Project: []\n      summary: Get Account Sessions\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/get-sessions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-sessions.md\n        method: getSessions\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 46\n  \"/account/sessions/{sessionId}\":\n    delete:\n      description: Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted.\n      operationId: accountDeleteSession\n      parameters:\n        - description: Session unique ID. Use the string 'current' to delete the current device session.\n          in: path\n          name: sessionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[SESSION_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Project: []\n      summary: Delete Account Session\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/delete-session.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-session.md\n        method: deleteSession\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 100\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 54\n    get:\n      description: Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.\n      operationId: accountGetSession\n      parameters:\n        - description: Session unique ID. Use the string 'current' to get the current device session.\n          in: path\n          name: sessionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[SESSION_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/session\"\n          description: Session\n      security:\n        - JWT: []\n          Project: []\n      summary: Get Session By ID\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/get-session.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-session.md\n        method: getSession\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 48\n  /account/verification:\n    post:\n      description: |\n        Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](/docs/client/account#accountUpdateVerification). The verification link sent to the user's email address is valid for 7 days.\n\n        Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n      operationId: accountCreateVerification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                url:\n                  description: URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n                  type: string\n                  x-example: null\n              required:\n                - url\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/token\"\n          description: Token\n      security:\n        - JWT: []\n          Project: []\n      summary: Create Email Verification\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/create-verification.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-verification.md\n        method: createVerification\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},userId:{userId}\n        rate-limit: 10\n        rate-time: 3600\n        scope: account\n        type: \"\"\n        weight: 58\n    put:\n      description: Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n      operationId: accountUpdateVerification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                secret:\n                  description: Valid verification token.\n                  type: string\n                  x-example: null\n                userId:\n                  description: User unique ID.\n                  type: string\n                  x-example: null\n              required:\n                - userId\n                - secret\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/token\"\n          description: Token\n      security:\n        - JWT: []\n          Project: []\n      summary: Complete Email Verification\n      tags:\n        - account\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: account/update-verification.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-verification.md\n        method: updateVerification\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},userId:{param-userId}\n        rate-limit: 10\n        rate-time: 3600\n        scope: public\n        type: \"\"\n        weight: 59\n  \"/avatars/browsers/{code}\":\n    get:\n      description: You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings.\n      operationId: avatarsGetBrowser\n      parameters:\n        - description: Browser Code.\n          in: path\n          name: code\n          required: true\n          schema:\n            type: string\n            x-example: aa\n        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.\n          in: query\n          name: quality\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Browser Icon\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-browser.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-browser.md\n        method: getBrowser\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 61\n  \"/avatars/credit-cards/{code}\":\n    get:\n      description: The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n      operationId: avatarsGetCreditCard\n      parameters:\n        - description: \"Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro.\"\n          in: path\n          name: code\n          required: true\n          schema:\n            type: string\n            x-example: amex\n        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.\n          in: query\n          name: quality\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Credit Card Icon\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-credit-card.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-credit-card.md\n        method: getCreditCard\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 60\n  /avatars/favicon:\n    get:\n      description: |\n        Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n      operationId: avatarsGetFavicon\n      parameters:\n        - description: Website URL which you want to fetch the favicon from.\n          in: query\n          name: url\n          required: true\n          schema:\n            format: url\n            type: string\n            x-example: https://example.com\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Favicon\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-favicon.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-favicon.md\n        method: getFavicon\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 64\n  \"/avatars/flags/{code}\":\n    get:\n      description: You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings.\n      operationId: avatarsGetFlag\n      parameters:\n        - description: Country Code. ISO Alpha-2 country code format.\n          in: path\n          name: code\n          required: true\n          schema:\n            type: string\n            x-example: af\n        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.\n          in: query\n          name: quality\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Country Flag\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-flag.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-flag.md\n        method: getFlag\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 62\n  /avatars/image:\n    get:\n      description: Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n      operationId: avatarsGetImage\n      parameters:\n        - description: Image URL which you want to crop.\n          in: query\n          name: url\n          required: true\n          schema:\n            format: url\n            type: string\n            x-example: https://example.com\n        - description: Resize preview image width, Pass an integer between 0 to 2000.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 400\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Resize preview image height, Pass an integer between 0 to 2000.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 400\n            format: int32\n            type: integer\n            x-example: 0\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Image from URL\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-image.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-image.md\n        method: getImage\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 63\n  /avatars/initials:\n    get:\n      description: |-\n        Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the 'name' parameter. If no name is given and no user is logged, an empty avatar will be returned.\n\n        You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user's initials when reloading the same theme will always return for the same initials.\n      operationId: avatarsGetInitials\n      parameters:\n        - description: \"Full Name. When empty, current user name or email will be used. Max length: 128 chars.\"\n          in: query\n          name: name\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[NAME]\"\n        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 500\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 500\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Changes text color. By default a random color will be picked and stay will persistent to the given name.\n          in: query\n          name: color\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Changes background color. By default a random color will be picked and stay will persistent to the given name.\n          in: query\n          name: background\n          required: false\n          schema:\n            default: \"\"\n            type: string\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get User Initials\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-initials.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-initials.md\n        method: getInitials\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 66\n  /avatars/qr:\n    get:\n      description: Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n      operationId: avatarsGetQR\n      parameters:\n        - description: Plain text to be converted to QR code image.\n          in: query\n          name: text\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEXT]\"\n        - description: QR code size. Pass an integer between 0 to 1000. Defaults to 400.\n          in: query\n          name: size\n          required: false\n          schema:\n            default: 400\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Margin from edge. Pass an integer between 0 to 10. Defaults to 1.\n          in: query\n          name: margin\n          required: false\n          schema:\n            default: 1\n            format: int32\n            type: integer\n            x-example: 0\n        - description: \"Return resulting image with 'Content-Disposition: attachment ' headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.\"\n          in: query\n          name: download\n          required: false\n          schema:\n            default: false\n            type: boolean\n            x-example: false\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get QR Code\n      tags:\n        - avatars\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: avatars/get-q-r.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-qr.md\n        method: getQR\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: avatars.read\n        type: location\n        weight: 65\n  /database/collections:\n    get:\n      description: Get a list of all the user collections. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's collections. [Learn more about different API modes](/docs/admin).\n      operationId: databaseListCollections\n      parameters:\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collectionList\"\n          description: Collections List\n      security:\n        - Key: []\n          Project: []\n      summary: List Collections\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/list-collections.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/list-collections.md\n        method: listCollections\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: collections.read\n        type: \"\"\n        weight: 68\n    post:\n      description: Create a new Collection.\n      operationId: databaseCreateCollection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: \"Collection name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                read:\n                  description: An array of strings with read permissions. By default no user is granted with any read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                rules:\n                  description: Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default no user is granted with any write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - name\n                - read\n                - write\n                - rules\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n          description: Collection\n      security:\n        - Key: []\n          Project: []\n      summary: Create Collection\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/create-collection.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/create-collection.md\n        method: createCollection\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: collections.write\n        type: \"\"\n        weight: 67\n  \"/database/collections/{collectionId}\":\n    delete:\n      description: Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n      operationId: databaseDeleteCollection\n      parameters:\n        - description: Collection unique ID.\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete Collection\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/delete-collection.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/delete-collection.md\n        method: deleteCollection\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: collections.write\n        type: \"\"\n        weight: 71\n    get:\n      description: Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n      operationId: databaseGetCollection\n      parameters:\n        - description: Collection unique ID.\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n          description: Collection\n      security:\n        - Key: []\n          Project: []\n      summary: Get Collection\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/get-collection.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/get-collection.md\n        method: getCollection\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: collections.read\n        type: \"\"\n        weight: 69\n    put:\n      description: Update a collection by its unique ID.\n      operationId: databaseUpdateCollection\n      parameters:\n        - description: Collection unique ID.\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: \"Collection name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                read:\n                  description: An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                rules:\n                  description: Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/collection\"\n          description: Collection\n      security:\n        - Key: []\n          Project: []\n      summary: Update Collection\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/update-collection.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/update-collection.md\n        method: updateCollection\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: collections.write\n        type: \"\"\n        weight: 70\n  \"/database/collections/{collectionId}/documents\":\n    get:\n      description: Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's documents. [Learn more about different API modes](/docs/admin).\n      operationId: databaseListDocuments\n      parameters:\n        - description: Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n        - description: \"Array of filter strings. Each filter is constructed from a key name, comparison operator (=, !=, \u003e, \u003c, \u003c=, \u003e=) and a value. You can also use a dot (.) separator in attribute names to filter by child document attributes. Examples: 'name=John Doe' or 'category.$id\u003e=5bed2d152c362'.\"\n          in: query\n          name: filters\n          required: false\n          schema:\n            default: []\n            items:\n              type: string\n            type: array\n        - description: Maximum number of documents to return in response.  Use this value to manage pagination. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Offset value. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Document field that results will be sorted by.\n          in: query\n          name: orderField\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[ORDER_FIELD]\"\n        - description: Order direction. Possible values are DESC for descending order, or ASC for ascending order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: DESC\n        - description: Order field type casting. Possible values are int, string, date, time or datetime. The database will attempt to cast the order field to the value you pass here. The default value is a string.\n          in: query\n          name: orderCast\n          required: false\n          schema:\n            default: string\n            type: string\n            x-example: int\n        - description: \"Search query. Enter any free text search. The database will try to find a match against all document attributes and children. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/documentList\"\n          description: Documents List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Documents\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/list-documents.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/list-documents.md\n        method: listDocuments\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: documents.read\n        type: \"\"\n        weight: 73\n    post:\n      description: Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console.\n      operationId: databaseCreateDocument\n      parameters:\n        - description: Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                data:\n                  description: Document data as JSON object.\n                  type: object\n                  x-example: null\n                parentDocument:\n                  description: Parent document unique ID. Use when you want your new document to be a child of a parent document.\n                  type: string\n                  x-example: null\n                parentProperty:\n                  description: Parent document property name. Use when you want your new document to be a child of a parent document.\n                  type: string\n                  x-example: null\n                parentPropertyType:\n                  description: Parent document property connection type. You can set this value to **assign**, **append** or **prepend**, default value is assign. Use when you want your new document to be a child of a parent document.\n                  type: string\n                  x-example: null\n                read:\n                  description: An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - data\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/document\"\n          description: Document\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Create Document\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/create-document.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/create-document.md\n        method: createDocument\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: documents.write\n        type: \"\"\n        weight: 72\n  \"/database/collections/{collectionId}/documents/{documentId}\":\n    delete:\n      description: Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted.\n      operationId: databaseDeleteDocument\n      parameters:\n        - description: Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n        - description: Document unique ID.\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n            x-example: \"[DOCUMENT_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Delete Document\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/delete-document.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/delete-document.md\n        method: deleteDocument\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: documents.write\n        type: \"\"\n        weight: 76\n    get:\n      description: Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n      operationId: databaseGetDocument\n      parameters:\n        - description: Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n        - description: Document unique ID.\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n            x-example: \"[DOCUMENT_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/document\"\n          description: Document\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Document\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/get-document.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/get-document.md\n        method: getDocument\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: documents.read\n        type: \"\"\n        weight: 74\n    patch:\n      description: Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n      operationId: databaseUpdateDocument\n      parameters:\n        - description: Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).\n          in: path\n          name: collectionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[COLLECTION_ID]\"\n        - description: Document unique ID.\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n            x-example: \"[DOCUMENT_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                data:\n                  description: Document data as JSON object.\n                  type: object\n                  x-example: null\n                read:\n                  description: An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - data\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/document\"\n          description: Document\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Update Document\n      tags:\n        - database\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: database/update-document.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/database/update-document.md\n        method: updateDocument\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: documents.write\n        type: \"\"\n        weight: 75\n  /functions:\n    get:\n      description: Get a list of all the project's functions. You can use the query params to filter your results.\n      operationId: functionsList\n      parameters:\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/functionList\"\n          description: Functions List\n      security:\n        - Key: []\n          Project: []\n      summary: List Functions\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/list.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-functions.md\n        method: list\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.read\n        type: \"\"\n        weight: 163\n    post:\n      description: Create a new function. You can pass a list of [permissions](/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n      operationId: functionsCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                events:\n                  description: Events list.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                execute:\n                  description: An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                name:\n                  description: \"Function name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                runtime:\n                  description: Execution runtime.\n                  type: string\n                  x-example: null\n                schedule:\n                  description: Schedule CRON syntax.\n                  type: string\n                  x-example: null\n                timeout:\n                  description: Function maximum execution time in seconds.\n                  type: integer\n                  x-example: null\n                vars:\n                  description: Key-value JSON object.\n                  type: object\n                  x-example: null\n              required:\n                - name\n                - execute\n                - runtime\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/function\"\n          description: Function\n      security:\n        - Key: []\n          Project: []\n      summary: Create Function\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/create.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-function.md\n        method: create\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 162\n  \"/functions/{functionId}\":\n    delete:\n      description: Delete a function by its unique ID.\n      operationId: functionsDelete\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete Function\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/delete.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/delete-function.md\n        method: delete\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 168\n    get:\n      description: Get a function by its unique ID.\n      operationId: functionsGet\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/function\"\n          description: Function\n      security:\n        - Key: []\n          Project: []\n      summary: Get Function\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-function.md\n        method: get\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.read\n        type: \"\"\n        weight: 164\n    put:\n      description: Update function by its unique ID.\n      operationId: functionsUpdate\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                events:\n                  description: Events list.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                execute:\n                  description: An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                name:\n                  description: \"Function name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                schedule:\n                  description: Schedule CRON syntax.\n                  type: string\n                  x-example: null\n                timeout:\n                  description: Function maximum execution time in seconds.\n                  type: integer\n                  x-example: null\n                vars:\n                  description: Key-value JSON object.\n                  type: object\n                  x-example: null\n              required:\n                - name\n                - execute\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/function\"\n          description: Function\n      security:\n        - Key: []\n          Project: []\n      summary: Update Function\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/update.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/update-function.md\n        method: update\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 166\n  \"/functions/{functionId}/executions\":\n    get:\n      description: Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin).\n      operationId: functionsListExecutions\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/executionList\"\n          description: Executions List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Executions\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/list-executions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-executions.md\n        method: listExecutions\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: execution.read\n        type: \"\"\n        weight: 174\n    post:\n      description: Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n      operationId: functionsCreateExecution\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                data:\n                  description: String of custom data to send to function.\n                  type: string\n                  x-example: null\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/execution\"\n          description: Execution\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Create Execution\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/create-execution.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-execution.md\n        method: createExecution\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 60\n        rate-time: 60\n        scope: execution.write\n        type: \"\"\n        weight: 173\n  \"/functions/{functionId}/executions/{executionId}\":\n    get:\n      description: Get a function execution log by its unique ID.\n      operationId: functionsGetExecution\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n        - description: Execution unique ID.\n          in: path\n          name: executionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[EXECUTION_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/execution\"\n          description: Execution\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Execution\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/get-execution.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-execution.md\n        method: getExecution\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: execution.read\n        type: \"\"\n        weight: 175\n  \"/functions/{functionId}/tag\":\n    patch:\n      description: Update the function code tag ID using the unique function ID. Use this endpoint to switch the code tag that should be executed by the execution endpoint.\n      operationId: functionsUpdateTag\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                tag:\n                  description: Tag unique ID.\n                  type: string\n                  x-example: null\n              required:\n                - tag\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/function\"\n          description: Function\n      security:\n        - Key: []\n          Project: []\n      summary: Update Function Tag\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/update-tag.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/update-function-tag.md\n        method: updateTag\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 167\n  \"/functions/{functionId}/tags\":\n    get:\n      description: Get a list of all the project's code tags. You can use the query params to filter your results.\n      operationId: functionsListTags\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/tagList\"\n          description: Tags List\n      security:\n        - Key: []\n          Project: []\n      summary: List Tags\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/list-tags.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-tags.md\n        method: listTags\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.read\n        type: \"\"\n        weight: 170\n    post:\n      description: |-\n        Create a new function code tag. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's tag to use your new tag UID.\n\n        This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](/docs/functions).\n\n        Use the \"command\" param to set the entry point used to execute your code.\n      operationId: functionsCreateTag\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                code:\n                  description: Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.\n                  type: string\n                  x-example: null\n                command:\n                  description: Code execution command.\n                  type: string\n                  x-example: null\n              required:\n                - command\n                - code\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/tag\"\n          description: Tag\n      security:\n        - Key: []\n          Project: []\n      summary: Create Tag\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/create-tag.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-tag.md\n        method: createTag\n        packaging: true\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 169\n  \"/functions/{functionId}/tags/{tagId}\":\n    delete:\n      description: Delete a code tag by its unique ID.\n      operationId: functionsDeleteTag\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n        - description: Tag unique ID.\n          in: path\n          name: tagId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TAG_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete Tag\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/delete-tag.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/delete-tag.md\n        method: deleteTag\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.write\n        type: \"\"\n        weight: 172\n    get:\n      description: Get a code tag by its unique ID.\n      operationId: functionsGetTag\n      parameters:\n        - description: Function unique ID.\n          in: path\n          name: functionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FUNCTION_ID]\"\n        - description: Tag unique ID.\n          in: path\n          name: tagId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TAG_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/tag\"\n          description: Tag\n      security:\n        - Key: []\n          Project: []\n      summary: Get Tag\n      tags:\n        - functions\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: functions/get-tag.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-tag.md\n        method: getTag\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: functions.read\n        type: \"\"\n        weight: 171\n  /health:\n    get:\n      description: Check the Appwrite HTTP server is up and responsive.\n      operationId: healthGet\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get HTTP\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get.md\n        method: get\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 84\n  /health/anti-virus:\n    get:\n      description: Check the Appwrite Anti Virus server is up and connection is successful.\n      operationId: healthGetAntiVirus\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Anti virus\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-anti-virus.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-storage-anti-virus.md\n        method: getAntiVirus\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 96\n  /health/cache:\n    get:\n      description: Check the Appwrite in-memory cache server is up and connection is successful.\n      operationId: healthGetCache\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Cache\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-cache.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-cache.md\n        method: getCache\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 87\n  /health/db:\n    get:\n      description: Check the Appwrite database server is up and connection is successful.\n      operationId: healthGetDB\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get DB\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-d-b.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-db.md\n        method: getDB\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 86\n  /health/queue/certificates:\n    get:\n      description: Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n      operationId: healthGetQueueCertificates\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Certificate Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-certificates.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-certificates.md\n        method: getQueueCertificates\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 93\n  /health/queue/functions:\n    get:\n      description: \"\"\n      operationId: healthGetQueueFunctions\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Functions Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-functions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-functions.md\n        method: getQueueFunctions\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 94\n  /health/queue/logs:\n    get:\n      description: Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n      operationId: healthGetQueueLogs\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Logs Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-logs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-logs.md\n        method: getQueueLogs\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 91\n  /health/queue/tasks:\n    get:\n      description: Get the number of tasks that are waiting to be processed in the Appwrite internal queue server.\n      operationId: healthGetQueueTasks\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Tasks Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-tasks.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-tasks.md\n        method: getQueueTasks\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 90\n  /health/queue/usage:\n    get:\n      description: Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server.\n      operationId: healthGetQueueUsage\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Usage Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-usage.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-usage.md\n        method: getQueueUsage\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 92\n  /health/queue/webhooks:\n    get:\n      description: Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n      operationId: healthGetQueueWebhooks\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Webhooks Queue\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-queue-webhooks.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-webhooks.md\n        method: getQueueWebhooks\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 89\n  /health/storage/local:\n    get:\n      description: Check the Appwrite local storage device is up and connection is successful.\n      operationId: healthGetStorageLocal\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Local Storage\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-storage-local.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-storage-local.md\n        method: getStorageLocal\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 95\n  /health/time:\n    get:\n      description: Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n      operationId: healthGetTime\n      responses:\n        \"500\":\n          description: File\n      security:\n        - Key: []\n          Project: []\n      summary: Get Time\n      tags:\n        - health\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: health/get-time.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-time.md\n        method: getTime\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: health.read\n        type: \"\"\n        weight: 88\n  /locale:\n    get:\n      description: |-\n        Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.\n\n        ([IP Geolocation by DB-IP](https://db-ip.com))\n      operationId: localeGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/locale\"\n          description: Locale\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get User Locale\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-locale.md\n        method: get\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 77\n  /locale/continents:\n    get:\n      description: List of all continents. You can use the locale header to get the data in a supported language.\n      operationId: localeGetContinents\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/continentList\"\n          description: Continents List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Continents\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-continents.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-continents.md\n        method: getContinents\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 81\n  /locale/countries:\n    get:\n      description: List of all countries. You can use the locale header to get the data in a supported language.\n      operationId: localeGetCountries\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/countryList\"\n          description: Countries List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Countries\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-countries.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-countries.md\n        method: getCountries\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 78\n  /locale/countries/eu:\n    get:\n      description: List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.\n      operationId: localeGetCountriesEU\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/countryList\"\n          description: Countries List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List EU Countries\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-countries-e-u.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-countries-eu.md\n        method: getCountriesEU\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 79\n  /locale/countries/phones:\n    get:\n      description: List of all countries phone codes. You can use the locale header to get the data in a supported language.\n      operationId: localeGetCountriesPhones\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/phoneList\"\n          description: Phones List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Countries Phone Codes\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-countries-phones.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-countries-phones.md\n        method: getCountriesPhones\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 80\n  /locale/currencies:\n    get:\n      description: List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.\n      operationId: localeGetCurrencies\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/currencyList\"\n          description: Currencies List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Currencies\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-currencies.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-currencies.md\n        method: getCurrencies\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 82\n  /locale/languages:\n    get:\n      description: List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.\n      operationId: localeGetLanguages\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/languageList\"\n          description: Languages List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Languages\n      tags:\n        - locale\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: locale/get-languages.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-languages.md\n        method: getLanguages\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: locale.read\n        type: \"\"\n        weight: 83\n  /storage/files:\n    get:\n      description: Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's files. [Learn more about different API modes](/docs/admin).\n      operationId: storageListFiles\n      parameters:\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/fileList\"\n          description: Files List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Files\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/list-files.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/list-files.md\n        method: listFiles\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.read\n        type: \"\"\n        weight: 133\n    post:\n      description: Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.\n      operationId: storageCreateFile\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  description: Binary file.\n                  type: string\n                  x-example: null\n                read:\n                  description: An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - file\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/file\"\n          description: File\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Create File\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/create-file.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/create-file.md\n        method: createFile\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.write\n        type: upload\n        weight: 132\n  \"/storage/files/{fileId}\":\n    delete:\n      description: Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n      operationId: storageDeleteFile\n      parameters:\n        - description: File unique ID.\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Delete File\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/delete-file.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/delete-file.md\n        method: deleteFile\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.write\n        type: \"\"\n        weight: 139\n    get:\n      description: Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n      operationId: storageGetFile\n      parameters:\n        - description: File unique ID.\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/file\"\n          description: File\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get File\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/get-file.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file.md\n        method: getFile\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.read\n        type: \"\"\n        weight: 134\n    put:\n      description: Update a file by its unique ID. Only users with write permissions have access to update this resource.\n      operationId: storageUpdateFile\n      parameters:\n        - description: File unique ID.\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                read:\n                  description: An array of strings with read permissions. By default no user is granted with any read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                write:\n                  description: An array of strings with write permissions. By default no user is granted with any write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - read\n                - write\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/file\"\n          description: File\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Update File\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/update-file.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/update-file.md\n        method: updateFile\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.write\n        type: \"\"\n        weight: 138\n  \"/storage/files/{fileId}/download\":\n    get:\n      description: \"Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\"\n      operationId: storageGetFileDownload\n      parameters:\n        - description: File unique ID.\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n      responses:\n        \"200\":\n          description: File\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get File for Download\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/get-file-download.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-download.md\n        method: getFileDownload\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.read\n        type: location\n        weight: 136\n  \"/storage/files/{fileId}/preview\":\n    get:\n      description: Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.\n      operationId: storageGetFilePreview\n      parameters:\n        - description: File unique ID\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n        - description: Resize preview image width, Pass an integer between 0 to 4000.\n          in: query\n          name: width\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Resize preview image height, Pass an integer between 0 to 4000.\n          in: query\n          name: height\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right\n          in: query\n          name: gravity\n          required: false\n          schema:\n            default: center\n            type: string\n            x-example: center\n        - description: Preview image quality. Pass an integer between 0 to 100. Defaults to 100.\n          in: query\n          name: quality\n          required: false\n          schema:\n            default: 100\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.\n          in: query\n          name: borderWidth\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: \"Preview image border color. Use a valid HEX color, no # is needed for prefix.\"\n          in: query\n          name: borderColor\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Preview image border radius in pixels. Pass an integer between 0 to 4000.\n          in: query\n          name: borderRadius\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.\n          in: query\n          name: opacity\n          required: false\n          schema:\n            default: 1\n            format: float\n            type: number\n            x-example: 0\n        - description: Preview image rotation in degrees. Pass an integer between 0 and 360.\n          in: query\n          name: rotation\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: \"Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.\"\n          in: query\n          name: background\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Output format type (jpeg, jpg, png, gif and webp).\n          in: query\n          name: output\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: jpg\n      responses:\n        \"200\":\n          description: Image\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get File Preview\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/get-file-preview.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-preview.md\n        method: getFilePreview\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.read\n        type: location\n        weight: 135\n  \"/storage/files/{fileId}/view\":\n    get:\n      description: \"Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.\"\n      operationId: storageGetFileView\n      parameters:\n        - description: File unique ID.\n          in: path\n          name: fileId\n          required: true\n          schema:\n            type: string\n            x-example: \"[FILE_ID]\"\n      responses:\n        \"200\":\n          description: File\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get File for View\n      tags:\n        - storage\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: storage/get-file-view.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-view.md\n        method: getFileView\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: files.read\n        type: location\n        weight: 137\n  /teams:\n    get:\n      description: Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's teams. [Learn more about different API modes](/docs/admin).\n      operationId: teamsList\n      parameters:\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/teamList\"\n          description: Teams List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: List Teams\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/list.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/list-teams.md\n        method: list\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.read\n        type: \"\"\n        weight: 141\n    post:\n      description: Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.\n      operationId: teamsCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: \"Team name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                roles:\n                  description: Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - name\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/team\"\n          description: Team\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Create Team\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/create.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/create-team.md\n        method: create\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 140\n  \"/teams/{teamId}\":\n    delete:\n      description: Delete a team by its unique ID. Only team owners have write access for this resource.\n      operationId: teamsDelete\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Delete Team\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/delete.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/delete-team.md\n        method: delete\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 144\n    get:\n      description: Get a team by its unique ID. All team members have read access for this resource.\n      operationId: teamsGet\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/team\"\n          description: Team\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Team\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team.md\n        method: get\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.read\n        type: \"\"\n        weight: 142\n    put:\n      description: Update a team by its unique ID. Only team owners have write access for this resource.\n      operationId: teamsUpdate\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: \"Team name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n              required:\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/team\"\n          description: Team\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Update Team\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/update.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team.md\n        method: update\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 143\n  \"/teams/{teamId}/memberships\":\n    get:\n      description: Get a team members by the team unique ID. All team members have read access for this list of resources.\n      operationId: teamsGetMemberships\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/membershipList\"\n          description: Memberships List\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Get Team Memberships\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/get-memberships.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team-members.md\n        method: getMemberships\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.read\n        type: \"\"\n        weight: 147\n    post:\n      description: |-\n        Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member's email address if the member doesn't exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.\n\n        Use the 'URL' parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.\n\n        Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL's are the once from domains you have set when added your platforms in the console interface.\n      operationId: teamsCreateMembership\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: New team member email.\n                  type: string\n                  x-example: null\n                name:\n                  description: \"New team member name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                roles:\n                  description: Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n                url:\n                  description: URL to redirect the user back to your app from the invitation email.  Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n                  type: string\n                  x-example: null\n              required:\n                - email\n                - roles\n                - url\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/membership\"\n          description: Membership\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Create Team Membership\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/create-membership.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/create-team-membership.md\n        method: createMembership\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 10\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 145\n  \"/teams/{teamId}/memberships/{membershipId}\":\n    delete:\n      description: This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n      operationId: teamsDeleteMembership\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n        - description: Membership ID.\n          in: path\n          name: membershipId\n          required: true\n          schema:\n            type: string\n            x-example: \"[MEMBERSHIP_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Delete Team Membership\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/delete-membership.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/delete-team-membership.md\n        method: deleteMembership\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 149\n    patch:\n      description: \"\"\n      operationId: teamsUpdateMembershipRoles\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n        - description: Membership ID.\n          in: path\n          name: membershipId\n          required: true\n          schema:\n            type: string\n            x-example: \"[MEMBERSHIP_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                roles:\n                  description: Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.\n                  items:\n                    type: string\n                  type: array\n                  x-example: null\n              required:\n                - roles\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/membership\"\n          description: Membership\n      security:\n        - JWT: []\n          Key: []\n          Project: []\n      summary: Update Membership Roles\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: teams/update-membership-roles.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-membership-roles.md\n        method: updateMembershipRoles\n        packaging: false\n        platforms:\n          - client\n          - server\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: teams.write\n        type: \"\"\n        weight: 146\n  \"/teams/{teamId}/memberships/{membershipId}/status\":\n    patch:\n      description: Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.\n      operationId: teamsUpdateMembershipStatus\n      parameters:\n        - description: Team unique ID.\n          in: path\n          name: teamId\n          required: true\n          schema:\n            type: string\n            x-example: \"[TEAM_ID]\"\n        - description: Membership ID.\n          in: path\n          name: membershipId\n          required: true\n          schema:\n            type: string\n            x-example: \"[MEMBERSHIP_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                secret:\n                  description: Secret key.\n                  type: string\n                  x-example: null\n                userId:\n                  description: User unique ID.\n                  type: string\n                  x-example: null\n              required:\n                - userId\n                - secret\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/membership\"\n          description: Membership\n      security:\n        - JWT: []\n          Project: []\n      summary: Update Team Membership Status\n      tags:\n        - teams\n      x-appwrite:\n        auth:\n          JWT: []\n          Project: []\n        cookies: false\n        demo: teams/update-membership-status.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-membership-status.md\n        method: updateMembershipStatus\n        packaging: false\n        platforms:\n          - client\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: public\n        type: \"\"\n        weight: 148\n  /users:\n    get:\n      description: Get a list of all the project's users. You can use the query params to filter your results.\n      operationId: usersList\n      parameters:\n        - description: \"Search term to filter your list results. Max length: 256 chars.\"\n          in: query\n          name: search\n          required: false\n          schema:\n            default: \"\"\n            type: string\n            x-example: \"[SEARCH]\"\n        - description: Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 25\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Results offset. The default value is 0. Use this param to manage pagination.\n          in: query\n          name: offset\n          required: false\n          schema:\n            default: 0\n            format: int32\n            type: integer\n            x-example: 0\n        - description: Order result by ASC or DESC order.\n          in: query\n          name: orderType\n          required: false\n          schema:\n            default: ASC\n            type: string\n            x-example: ASC\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/userList\"\n          description: Users List\n      security:\n        - Key: []\n          Project: []\n      summary: List Users\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/list.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-users.md\n        method: list\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.read\n        type: \"\"\n        weight: 151\n    post:\n      description: Create a new user.\n      operationId: usersCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: User email.\n                  type: string\n                  x-example: null\n                name:\n                  description: \"User name. Max length: 128 chars.\"\n                  type: string\n                  x-example: null\n                password:\n                  description: User password. Must be between 6 to 32 chars.\n                  type: string\n                  x-example: null\n              required:\n                - email\n                - password\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - Key: []\n          Project: []\n      summary: Create User\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/create.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-user.md\n        method: create\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 150\n  \"/users/{userId}\":\n    delete:\n      description: Delete a user by its unique ID.\n      operationId: usersDelete\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete User\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/delete.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete.md\n        method: delete\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 161\n    get:\n      description: Get a user by its unique ID.\n      operationId: usersGet\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - Key: []\n          Project: []\n      summary: Get User\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/get.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user.md\n        method: get\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.read\n        type: \"\"\n        weight: 152\n  \"/users/{userId}/logs\":\n    get:\n      description: Get a user activity logs list by its unique ID.\n      operationId: usersGetLogs\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/logList\"\n          description: Logs List\n      security:\n        - Key: []\n          Project: []\n      summary: Get User Logs\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/get-logs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user-logs.md\n        method: getLogs\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.read\n        type: \"\"\n        weight: 155\n  \"/users/{userId}/prefs\":\n    get:\n      description: Get the user preferences by its unique ID.\n      operationId: usersGetPrefs\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/preferences\"\n          description: Preferences\n      security:\n        - Key: []\n          Project: []\n      summary: Get User Preferences\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/get-prefs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user-prefs.md\n        method: getPrefs\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.read\n        type: \"\"\n        weight: 153\n    patch:\n      description: Update the user preferences by its unique ID. You can pass only the specific settings you wish to update.\n      operationId: usersUpdatePrefs\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                prefs:\n                  description: Prefs key-value JSON object.\n                  type: object\n                  x-example: null\n              required:\n                - prefs\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/preferences\"\n          description: Preferences\n      security:\n        - Key: []\n          Project: []\n      summary: Update User Preferences\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/update-prefs.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-prefs.md\n        method: updatePrefs\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 158\n  \"/users/{userId}/sessions\":\n    delete:\n      description: Delete all user's sessions by using the user's unique ID.\n      operationId: usersDeleteSessions\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete User Sessions\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/delete-sessions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-user-sessions.md\n        method: deleteSessions\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 160\n    get:\n      description: Get the user sessions list by its unique ID.\n      operationId: usersGetSessions\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/sessionList\"\n          description: Sessions List\n      security:\n        - Key: []\n          Project: []\n      summary: Get User Sessions\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/get-sessions.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user-sessions.md\n        method: getSessions\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.read\n        type: \"\"\n        weight: 154\n  \"/users/{userId}/sessions/{sessionId}\":\n    delete:\n      description: Delete a user sessions by its unique ID.\n      operationId: usersDeleteSession\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n        - description: User unique session ID.\n          in: path\n          name: sessionId\n          required: true\n          schema:\n            type: string\n            x-example: \"[SESSION_ID]\"\n      responses:\n        \"204\":\n          description: No content\n      security:\n        - Key: []\n          Project: []\n      summary: Delete User Session\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/delete-session.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-user-session.md\n        method: deleteSession\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 159\n  \"/users/{userId}/status\":\n    patch:\n      description: Update the user status by its unique ID.\n      operationId: usersUpdateStatus\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                status:\n                  description: User Status code. To activate the user pass 1, to block the user pass 2 and for disabling the user pass 0\n                  type: integer\n                  x-example: null\n              required:\n                - status\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - Key: []\n          Project: []\n      summary: Update User Status\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/update-status.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-status.md\n        method: updateStatus\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 156\n  \"/users/{userId}/verification\":\n    patch:\n      description: Update the user email verification status by its unique ID.\n      operationId: usersUpdateVerification\n      parameters:\n        - description: User unique ID.\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n            x-example: \"[USER_ID]\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                emailVerification:\n                  description: User Email Verification Status.\n                  type: boolean\n                  x-example: null\n              required:\n                - emailVerification\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n          description: User\n      security:\n        - Key: []\n          Project: []\n      summary: Update Email Verification\n      tags:\n        - users\n      x-appwrite:\n        auth:\n          Key: []\n          Project: []\n        cookies: false\n        demo: users/update-verification.md\n        edit: https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-verification.md\n        method: updateVerification\n        packaging: false\n        platforms:\n          - server\n        rate-key: url:{url},ip:{ip}\n        rate-limit: 0\n        rate-time: 3600\n        scope: users.write\n        type: \"\"\n        weight: 157\ncomponents:\n  schemas:\n    collection:\n      description: Collection\n      properties:\n        $id:\n          description: Collection ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        $permissions:\n          description: Collection permissions.\n          items:\n            $ref: \"#/components/schemas/permissions\"\n          type: object\n          x-example: {}\n        dateCreated:\n          description: Collection creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        dateUpdated:\n          description: Collection creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981550\n        name:\n          description: Collection name.\n          type: string\n          x-example: Movies\n        rules:\n          description: Collection rules.\n          items:\n            $ref: \"#/components/schemas/rule\"\n          type: array\n          x-example: \"\"\n      required:\n        - $id\n        - $permissions\n        - name\n        - dateCreated\n        - dateUpdated\n        - rules\n      type: object\n    collectionList:\n      description: Collections List\n      properties:\n        collections:\n          description: List of collections.\n          items:\n            $ref: \"#/components/schemas/collection\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - collections\n      type: object\n    continent:\n      description: Continent\n      properties:\n        code:\n          description: Continent two letter code.\n          type: string\n          x-example: EU\n        name:\n          description: Continent name.\n          type: string\n          x-example: Europe\n      required:\n        - name\n        - code\n      type: object\n    continentList:\n      description: Continents List\n      properties:\n        continents:\n          description: List of continents.\n          items:\n            $ref: \"#/components/schemas/continent\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - continents\n      type: object\n    country:\n      description: Country\n      properties:\n        code:\n          description: Country two-character ISO 3166-1 alpha code.\n          type: string\n          x-example: US\n        name:\n          description: Country name.\n          type: string\n          x-example: United States\n      required:\n        - name\n        - code\n      type: object\n    countryList:\n      description: Countries List\n      properties:\n        countries:\n          description: List of countries.\n          items:\n            $ref: \"#/components/schemas/country\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - countries\n      type: object\n    currency:\n      description: Currency\n      properties:\n        code:\n          description: Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.\n          type: string\n          x-example: USD\n        decimalDigits:\n          description: Number of decimal digits.\n          format: int32\n          type: integer\n          x-example: 2\n        name:\n          description: Currency name.\n          type: string\n          x-example: US dollar\n        namePlural:\n          description: Currency plural name\n          type: string\n          x-example: US dollars\n        rounding:\n          description: Currency digit rounding.\n          format: float\n          type: number\n          x-example: 0\n        symbol:\n          description: Currency symbol.\n          type: string\n          x-example: $\n        symbolNative:\n          description: Currency native symbol.\n          type: string\n          x-example: $\n      required:\n        - symbol\n        - name\n        - symbolNative\n        - decimalDigits\n        - rounding\n        - code\n        - namePlural\n      type: object\n    currencyList:\n      description: Currencies List\n      properties:\n        currencies:\n          description: List of currencies.\n          items:\n            $ref: \"#/components/schemas/currency\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - currencies\n      type: object\n    document:\n      additionalProperties: true\n      description: Document\n      properties:\n        $collection:\n          description: Collection ID.\n          type: string\n          x-example: 5e5ea5c15117e\n        $id:\n          description: Document ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        $permissions:\n          description: Document permissions.\n          items:\n            $ref: \"#/components/schemas/permissions\"\n          type: object\n          x-example: {}\n      required:\n        - $id\n        - $collection\n        - $permissions\n      type: object\n    documentList:\n      description: Documents List\n      properties:\n        documents:\n          description: List of documents.\n          items:\n            $ref: \"#/components/schemas/document\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - documents\n      type: object\n    error:\n      description: Error\n      properties:\n        code:\n          description: Error code.\n          type: string\n          x-example: \"404\"\n        message:\n          description: Error message.\n          type: string\n          x-example: Not found\n        version:\n          description: Server version number.\n          type: string\n          x-example: \"1.0\"\n      required:\n        - message\n        - code\n        - version\n      type: object\n    execution:\n      description: Execution\n      properties:\n        $id:\n          description: Execution ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        dateCreated:\n          description: The execution creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        exitCode:\n          description: The script exit code.\n          format: int32\n          type: integer\n          x-example: 0\n        functionId:\n          description: Function ID.\n          type: string\n          x-example: 5e5ea6g16897e\n        status:\n          description: \"The status of the function execution. Possible values can be: `waiting`, `processing`, `completed`, or `failed`.\"\n          type: string\n          x-example: processing\n        stderr:\n          description: The script stderr output string. Logs the last 4,000 characters of the execution stderr output\n          type: string\n          x-example: \"\"\n        stdout:\n          description: The script stdout output string. Logs the last 4,000 characters of the execution stdout output.\n          type: string\n          x-example: \"\"\n        time:\n          description: The script execution time in seconds.\n          format: float\n          type: number\n          x-example: 0.4\n        trigger:\n          description: \"The trigger that caused the function to execute. Possible values can be: `http`, `schedule`, or `event`.\"\n          type: string\n          x-example: http\n      required:\n        - $id\n        - functionId\n        - dateCreated\n        - trigger\n        - status\n        - exitCode\n        - stdout\n        - stderr\n        - time\n      type: object\n    executionList:\n      description: Executions List\n      properties:\n        executions:\n          description: List of executions.\n          items:\n            $ref: \"#/components/schemas/execution\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - executions\n      type: object\n    file:\n      description: File\n      properties:\n        $id:\n          description: File ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        $permissions:\n          description: File permissions.\n          items:\n            $ref: \"#/components/schemas/permissions\"\n          type: object\n          x-example: {}\n        dateCreated:\n          description: File creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        mimeType:\n          description: File mime type.\n          type: string\n          x-example: image/png\n        name:\n          description: File name.\n          type: string\n          x-example: Pink.png\n        signature:\n          description: File MD5 signature.\n          type: string\n          x-example: 5d529fd02b544198ae075bd57c1762bb\n        sizeOriginal:\n          description: File original size in bytes.\n          format: int32\n          type: integer\n          x-example: 17890\n      required:\n        - $id\n        - $permissions\n        - name\n        - dateCreated\n        - signature\n        - mimeType\n        - sizeOriginal\n      type: object\n    fileList:\n      description: Files List\n      properties:\n        files:\n          description: List of files.\n          items:\n            $ref: \"#/components/schemas/file\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - files\n      type: object\n    function:\n      description: Function\n      properties:\n        $id:\n          description: Function ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        $permissions:\n          description: Function permissions.\n          items:\n            $ref: \"#/components/schemas/permissions\"\n          type: object\n          x-example: {}\n        dateCreated:\n          description: Function creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        dateUpdated:\n          description: Function update date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981257\n        events:\n          description: Function trigger events.\n          items:\n            type: string\n          type: array\n          x-example: account.create\n        name:\n          description: Function name.\n          type: string\n          x-example: My Function\n        runtime:\n          description: Function execution runtime.\n          type: string\n          x-example: python-3.8\n        schedule:\n          description: Function execution schedult in CRON format.\n          type: string\n          x-example: 5 4 * * *\n        scheduleNext:\n          description: Function next scheduled execution date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981292\n        schedulePrevious:\n          description: Function next scheduled execution date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981237\n        status:\n          description: \"Function status. Possible values: disabled, enabled\"\n          type: string\n          x-example: enabled\n        tag:\n          description: Function active tag ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        timeout:\n          description: Function execution timeout in seconds.\n          format: int32\n          type: integer\n          x-example: 1592981237\n        vars:\n          description: Function environment variables.\n          type: string\n          x-example:\n            key: value\n      required:\n        - $id\n        - $permissions\n        - name\n        - dateCreated\n        - dateUpdated\n        - status\n        - runtime\n        - tag\n        - vars\n        - events\n        - schedule\n        - scheduleNext\n        - schedulePrevious\n        - timeout\n      type: object\n    functionList:\n      description: Functions List\n      properties:\n        functions:\n          description: List of functions.\n          items:\n            $ref: \"#/components/schemas/function\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - functions\n      type: object\n    language:\n      description: Language\n      properties:\n        code:\n          description: Language two-character ISO 639-1 codes.\n          type: string\n          x-example: it\n        name:\n          description: Language name.\n          type: string\n          x-example: Italian\n        nativeName:\n          description: Language native name.\n          type: string\n          x-example: Italiano\n      required:\n        - name\n        - code\n        - nativeName\n      type: object\n    languageList:\n      description: Languages List\n      properties:\n        languages:\n          description: List of languages.\n          items:\n            $ref: \"#/components/schemas/language\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - languages\n      type: object\n    locale:\n      description: Locale\n      properties:\n        continent:\n          description: Continent name. This field support localization.\n          type: string\n          x-example: North America\n        continentCode:\n          description: Continent code. A two character continent code \"AF\" for Africa, \"AN\" for Antarctica, \"AS\" for Asia, \"EU\" for Europe, \"NA\" for North America, \"OC\" for Oceania, and \"SA\" for South America.\n          type: string\n          x-example: NA\n        country:\n          description: Country name. This field support localization.\n          type: string\n          x-example: United States\n        countryCode:\n          description: Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format\n          type: string\n          x-example: US\n        currency:\n          description: Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format\n          type: string\n          x-example: USD\n        eu:\n          description: True if country is part of the Europian Union.\n          type: boolean\n          x-example: false\n        ip:\n          description: User IP address.\n          type: string\n          x-example: 127.0.0.1\n      required:\n        - ip\n        - countryCode\n        - country\n        - continentCode\n        - continent\n        - eu\n        - currency\n      type: object\n    log:\n      description: Log\n      properties:\n        clientCode:\n          description: Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).\n          type: string\n          x-example: CM\n        clientEngine:\n          description: Client engine name.\n          type: string\n          x-example: WebKit\n        clientEngineVersion:\n          description: Client engine name.\n          type: string\n          x-example: 605.1.15\n        clientName:\n          description: Client name.\n          type: string\n          x-example: Chrome Mobile iOS\n        clientType:\n          description: Client type.\n          type: string\n          x-example: browser\n        clientVersion:\n          description: Client version.\n          type: string\n          x-example: \"84.0\"\n        countryCode:\n          description: Country two-character ISO 3166-1 alpha code.\n          type: string\n          x-example: US\n        countryName:\n          description: Country name.\n          type: string\n          x-example: United States\n        deviceBrand:\n          description: Device brand name.\n          type: string\n          x-example: Google\n        deviceModel:\n          description: Device model name.\n          type: string\n          x-example: Nexus 5\n        deviceName:\n          description: Device name.\n          type: string\n          x-example: smartphone\n        event:\n          description: Event name.\n          type: string\n          x-example: account.sessions.create\n        ip:\n          description: IP session in use when the session was created.\n          type: string\n          x-example: 127.0.0.1\n        osCode:\n          description: Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).\n          type: string\n          x-example: Mac\n        osName:\n          description: Operating system name.\n          type: string\n          x-example: Mac\n        osVersion:\n          description: Operating system version.\n          type: string\n          x-example: Mac\n        time:\n          description: Log creation time in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n      required:\n        - event\n        - ip\n        - time\n        - osCode\n        - osName\n        - osVersion\n        - clientType\n        - clientCode\n        - clientName\n        - clientVersion\n        - clientEngine\n        - clientEngineVersion\n        - deviceName\n        - deviceBrand\n        - deviceModel\n        - countryCode\n        - countryName\n      type: object\n    logList:\n      description: Logs List\n      properties:\n        logs:\n          description: List of logs.\n          items:\n            $ref: \"#/components/schemas/log\"\n          type: array\n          x-example: \"\"\n      required:\n        - logs\n      type: object\n    membership:\n      description: Membership\n      properties:\n        $id:\n          description: Membership ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        confirm:\n          description: User confirmation status, true if the user has joined the team or false otherwise.\n          type: boolean\n          x-example: false\n        email:\n          description: User email address.\n          type: string\n          x-example: john@appwrite.io\n        invited:\n          description: Date, the user has been invited to join the team in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        joined:\n          description: Date, the user has accepted the invitation to join the team in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        name:\n          description: User name.\n          type: string\n          x-example: VIP\n        roles:\n          description: User list of roles\n          items:\n            type: string\n          type: array\n          x-example: admin\n        teamId:\n          description: Team ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        userId:\n          description: User ID.\n          type: string\n          x-example: 5e5ea5c16897e\n      required:\n        - $id\n        - userId\n        - teamId\n        - name\n        - email\n        - invited\n        - joined\n        - confirm\n        - roles\n      type: object\n    membershipList:\n      description: Memberships List\n      properties:\n        memberships:\n          description: List of memberships.\n          items:\n            $ref: \"#/components/schemas/membership\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - memberships\n      type: object\n    permissions:\n      description: Permissions\n      properties:\n        read:\n          description: Read permissions.\n          items:\n            type: string\n          type: array\n          x-example: user:5e5ea5c16897e\n        write:\n          description: Write permissions.\n          items:\n            type: string\n          type: array\n          x-example: user:5e5ea5c16897e\n      required:\n        - read\n        - write\n      type: object\n    phone:\n      description: Phone\n      properties:\n        code:\n          description: Phone code.\n          type: string\n          x-example: \"+1\"\n        countryCode:\n          description: Country two-character ISO 3166-1 alpha code.\n          type: string\n          x-example: US\n        countryName:\n          description: Country name.\n          type: string\n          x-example: United States\n      required:\n        - code\n        - countryCode\n        - countryName\n      type: object\n    phoneList:\n      description: Phones List\n      properties:\n        phones:\n          description: List of phones.\n          items:\n            $ref: \"#/components/schemas/phone\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - phones\n      type: object\n    preferences:\n      additionalProperties: true\n      description: Preferences\n      type: object\n    rule:\n      description: Rule\n      properties:\n        $collection:\n          description: Rule Collection.\n          type: string\n          x-example: 5e5e66c16897e\n        $id:\n          description: Rule ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        array:\n          description: Is array?\n          type: boolean\n          x-example: false\n        default:\n          description: Rule default value.\n          type: string\n          x-example: Movie Name\n        key:\n          description: Rule key.\n          type: string\n          x-example: title\n        label:\n          description: Rule label.\n          type: string\n          x-example: Title\n        list:\n          description: List of allowed values\n          items:\n            type: string\n          type: array\n          x-example: 5e5ea5c168099\n        required:\n          description: Is required?\n          type: boolean\n          x-example: true\n        type:\n          description: \"Rule type. Possible values: \"\n          type: string\n          x-example: title\n      required:\n        - $id\n        - $collection\n        - type\n        - key\n        - label\n        - default\n        - array\n        - required\n        - list\n      type: object\n    session:\n      description: Session\n      properties:\n        $id:\n          description: Session ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        clientCode:\n          description: Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).\n          type: string\n          x-example: CM\n        clientEngine:\n          description: Client engine name.\n          type: string\n          x-example: WebKit\n        clientEngineVersion:\n          description: Client engine name.\n          type: string\n          x-example: 605.1.15\n        clientName:\n          description: Client name.\n          type: string\n          x-example: Chrome Mobile iOS\n        clientType:\n          description: Client type.\n          type: string\n          x-example: browser\n        clientVersion:\n          description: Client version.\n          type: string\n          x-example: \"84.0\"\n        countryCode:\n          description: Country two-character ISO 3166-1 alpha code.\n          type: string\n          x-example: US\n        countryName:\n          description: Country name.\n          type: string\n          x-example: United States\n        current:\n          description: Returns true if this the current user session.\n          type: boolean\n          x-example: true\n        deviceBrand:\n          description: Device brand name.\n          type: string\n          x-example: Google\n        deviceModel:\n          description: Device model name.\n          type: string\n          x-example: Nexus 5\n        deviceName:\n          description: Device name.\n          type: string\n          x-example: smartphone\n        expire:\n          description: Session expiration date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        ip:\n          description: IP in use when the session was created.\n          type: string\n          x-example: 127.0.0.1\n        osCode:\n          description: Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).\n          type: string\n          x-example: Mac\n        osName:\n          description: Operating system name.\n          type: string\n          x-example: Mac\n        osVersion:\n          description: Operating system version.\n          type: string\n          x-example: Mac\n        provider:\n          description: Session Provider.\n          type: string\n          x-example: email\n        providerToken:\n          description: Session Provider Token.\n          type: string\n          x-example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\n        providerUid:\n          description: Session Provider User ID.\n          type: string\n          x-example: user@example.com\n        userId:\n          description: User ID.\n          type: string\n          x-example: 5e5bb8c16897e\n      required:\n        - $id\n        - userId\n        - expire\n        - provider\n        - providerUid\n        - providerToken\n        - ip\n        - osCode\n        - osName\n        - osVersion\n        - clientType\n        - clientCode\n        - clientName\n        - clientVersion\n        - clientEngine\n        - clientEngineVersion\n        - deviceName\n        - deviceBrand\n        - deviceModel\n        - countryCode\n        - countryName\n        - current\n      type: object\n    sessionList:\n      description: Sessions List\n      properties:\n        sessions:\n          description: List of sessions.\n          items:\n            $ref: \"#/components/schemas/session\"\n          type: array\n          x-example: \"\"\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n      required:\n        - sum\n        - sessions\n      type: object\n    tag:\n      description: Tag\n      properties:\n        $id:\n          description: Tag ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        command:\n          description: The entrypoint command in use to execute the tag code.\n          type: string\n          x-example: enabled\n        dateCreated:\n          description: The tag creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        functionId:\n          description: Function ID.\n          type: string\n          x-example: 5e5ea6g16897e\n        size:\n          description: The code size in bytes.\n          type: string\n          x-example: python-3.8\n      required:\n        - $id\n        - functionId\n        - dateCreated\n        - command\n        - size\n      type: object\n    tagList:\n      description: Tags List\n      properties:\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n        tags:\n          description: List of tags.\n          items:\n            $ref: \"#/components/schemas/tag\"\n          type: array\n          x-example: \"\"\n      required:\n        - sum\n        - tags\n      type: object\n    team:\n      description: Team\n      properties:\n        $id:\n          description: Team ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        dateCreated:\n          description: Team creation date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        name:\n          description: Team name.\n          type: string\n          x-example: VIP\n        sum:\n          description: Total sum of team members.\n          format: int32\n          type: integer\n          x-example: 7\n      required:\n        - $id\n        - name\n        - dateCreated\n        - sum\n      type: object\n    teamList:\n      description: Teams List\n      properties:\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n        teams:\n          description: List of teams.\n          items:\n            $ref: \"#/components/schemas/team\"\n          type: array\n          x-example: \"\"\n      required:\n        - sum\n        - teams\n      type: object\n    token:\n      description: Token\n      properties:\n        $id:\n          description: Token ID.\n          type: string\n          x-example: bb8ea5c16897e\n        expire:\n          description: Token expiration date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        secret:\n          description: Token secret key. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.\n          type: string\n          x-example: \"\"\n        userId:\n          description: User ID.\n          type: string\n          x-example: 5e5ea5c168bb8\n      required:\n        - $id\n        - userId\n        - secret\n        - expire\n      type: object\n    user:\n      description: User\n      properties:\n        $id:\n          description: User ID.\n          type: string\n          x-example: 5e5ea5c16897e\n        email:\n          description: User email address.\n          type: string\n          x-example: john@appwrite.io\n        emailVerification:\n          description: Email verification status.\n          type: boolean\n          x-example: true\n        name:\n          description: User name.\n          type: string\n          x-example: John Doe\n        passwordUpdate:\n          description: Unix timestamp of the most recent password update\n          format: int32\n          type: integer\n          x-example: 1592981250\n        prefs:\n          description: User preferences as a key-value object\n          items:\n            $ref: \"#/components/schemas/preferences\"\n          type: object\n          x-example:\n            theme: pink\n            timezone: UTC\n        registration:\n          description: User registration date in Unix timestamp.\n          format: int32\n          type: integer\n          x-example: 1592981250\n        status:\n          description: User status. 0 for Unactivated, 1 for active and 2 is blocked.\n          format: int32\n          type: integer\n          x-example: 0\n      required:\n        - $id\n        - name\n        - registration\n        - status\n        - passwordUpdate\n        - email\n        - emailVerification\n        - prefs\n      type: object\n    userList:\n      description: Users List\n      properties:\n        sum:\n          description: Total sum of items in the list.\n          format: int32\n          type: integer\n          x-example: 5\n        users:\n          description: List of users.\n          items:\n            $ref: \"#/components/schemas/user\"\n          type: array\n          x-example: \"\"\n      required:\n        - sum\n        - users\n      type: object\n  securitySchemes:\n    JWT:\n      description: Your secret JSON Web Token\n      in: header\n      name: X-Appwrite-JWT\n      type: apiKey\n    Key:\n      description: Your secret API key\n      in: header\n      name: X-Appwrite-Key\n      type: apiKey\n      x-appwrite:\n        demo: 919c2d18fb5d4...a2ae413da83346ad2\n    Locale:\n      description: \"\"\n      in: header\n      name: X-Appwrite-Locale\n      type: apiKey\n      x-appwrite:\n        demo: en\n    Project:\n      description: Your project ID\n      in: header\n      name: X-Appwrite-Project\n      type: apiKey\n      x-appwrite:\n        demo: 5df5acd0d48c2\n"
		}
	},
	"Error": "parse: paths: /functions/{functionId}: get: functionsGet: responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/function\": parse schema: $permissions: parse schema: object cannot contain 'items' field"
}