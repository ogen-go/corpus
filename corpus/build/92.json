{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OCR-D/spec"
		},
		"file": {
			"name": "ocrd_api.swagger.yml",
			"path": "ocrd_api.swagger.yml",
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a generic definition of the modules used for the OCR-D project. \n  \n      * Implementation path for the different processors (description)\n      \n      * /preprocessing/characterization (Determine specific characteristics of a digitalization.)\n      \n      * /preprocessing/optimization (Execute all steps for image optimization at once.)\n      \n      * /preprocessing/optimization/cropping (Crops the digitization to printspace.)\n      \n      * /preprocessing/optimization/deskewing (Deskews the digitization.)\n      \n      * /preprocessing/optimization/despeckling (Despeckles the digitization.)\n      \n      * /preprocessing/optimization/dewarping (Dewarps the digitization.)\n      \n      * /preprocessing/optimization/binarization (Binarize the digitization.)\n      \n      *  /recognition/text-recognition (Estimate font families and languages used.)\n\n      *  /recognition/font-identification (Estimate font families and languages used.)\n\n      * /layout/segmentation (Detect and classify all regions of a page.)\n      \n      * /layout/segmentation/page (Detect all regions of a page.)\n      \n      * /layout/segmentation/line (Detect all text line regions inside the text regions of a page.)\n      \n      * /layout/segmentation/classification | Fine-grained classification of all detected regions of a page.)\n      \n      * /layout/analysis (Analyse regions on document level.)\n  version: \"1.1.0\"\n  title: \"OCR-D\"\n  termsOfService: \"http://swagger.io/terms/\"\n  contact:\n    email: \"volker.hartmann@kit.edu\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\nservers:\n    - url: \"http://test.ocr-d.de/v1\"\ntags:\n    - name: \"Image preprocessing\"\n      description: \"Methods that characterize and optimize the digital representations for layout and text recognition.\"\n    - name: \"Layout analysis\"\n      description: \"Registration of the correct text flow, that means the reproduction of the logical-structural text flow and high text accuracy.\"\n    - name: \"Text recognition and optimization\"\n      description: \"Combination of several OCR engines with subsequent corrections to improve text results.\"\n    - name: \"Model training\"\n      description: \"Training and provision of models.\"\n    - name: \"Long-term preservation\"\n      description: \"Ensuring the long-term availability and referenceability of the texts obtained.\"\n    - name: \"Quality assurance\"\n      description: \"Determination/estimation of the potential of each component.\"\npaths:\n  /ocrd/processor:\n    post:\n      tags:\n        - \"Image preprocessing\"\n        - \"Layout analysis\"\n        - \"Text recognition and optimization\"\n      summary: \"Start job for processing one of the tasks defined by OCR-D.\"\n      description: \"Start job for processing one of the tasks defined by OCR-D. May create new images and/or new PAGE XML files depending on algorithm. It has to create a provenance file and a new METS file.\"\n      operationId: start-processor\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/processors'\n      responses:\n        '201':\n          description: Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/job-id'\n          headers:\n            Location:\n              schema:\n                type: string\n                format: url\n              description: URL of the generated job.\n          # -----------------------------------------------------\n          # Link\n          # -----------------------------------------------------\n          links:\n            GetFilesByJobId:   # \u003c---- arbitrary name for the link\n              operationId: get-created-files-of-processor\n              parameters:\n                jobID: '$response.body#/jobID'\n\n              description: \u003e\n                The `jobId` value returned in the response can be used as\n                the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n        '400':\n          description: \"Invalid input\"\n        '500':\n          description: \"Internal error\"\n  /ocrd/processor/jobid/{jobID}:\n    get:\n      tags:\n        - \"Image preprocessing\"\n        - \"Layout analysis\"\n        - \"Text recognition and optimization\"\n      summary: Get created files.\n      description: Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.\n      operationId: get-created-files-of-processor\n      parameters:\n        - in: path\n          name: jobID\n          schema:\n            type: string\n          required: true\n          description: job ID of the started process.\n      responses:\n        '200':\n          description: Successful Operation. \n          content:\n            application/vnd.ocrd+job-status:\n              schema:\n                $ref: '#/components/schemas/job-status'\n            application/mets+xml:\n              schema:\n                $ref: '#/components/schemas/mets-file'\n            image/*:\n              schema: \n                $ref: '#/components/schemas/image-file'\n            application/vnd.ocrd.page+xml:\n              schema: \n                $ref: '#/components/schemas/page-file'\n            application/vnd.ocrd.prov+json:\n              schema: \n                $ref: '#/components/schemas/provenance-file'\n            application/vnd.ocrd.log+json:\n              schema: \n                $ref: '#/components/schemas/logging'\n            application/zip:\n              schema: \n                $ref: '#/components/schemas/zip-file'\n        '400':\n          description: \"Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once.\"\n        '500':\n          description: \"Internal error\"\n    delete:\n      tags:\n        - \"Image preprocessing\"\n      summary: Delete all files created by job with ID 'jobID'.\n      parameters:\n        - in: path\n          name: jobID\n          schema:\n            type: string\n          required: true\n          description: job ID of the started process.\n      responses:\n        '204':\n          description: Successful Operation. All linked resources are removed successfully.\n          content:\n            application/vnd.ocrd+job-status:\n              schema:\n                $ref: '#/components/schemas/job-status'\n        '404':\n          description: \"Not found.\"\n        '410':\n          description: \"Resource is not available anymore.\"\n        '500':\n          description: \"Internal error\"\ncomponents:\n  schemas:\n    processors:\n      type: object\n      description: Object holding all parameters needed by most processors.\n      properties:\n        mets:\n          $ref: '#/components/schemas/mets-file'\n        input-file-grp:\n          type: array\n          items: \n            type: string\n          description: ID(s) of the fileGrps which have to be used as input. (fileGrp@USE). \n        output-file-grp:\n          type: array\n          items: \n            type: string\n          description: ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).\n        group-id:\n          type: array\n          items: \n            type: string\n          description: All IDs of the image files which should be characterized. \n        parameter:\n          type: array\n          items: \n            type: string\n          description: Parameter file in JSON format. \n        log-level:\n          $ref: '#/components/schemas/log-level'\n      required:\n        - mets\n        - input-file-grp\n        - output-file-grp\n    mets-file:\n      type: string\n      description: XML holding all information of the digitized document. All references of the images and the PAGE XMLs are available via fileGrp section  (see http://www.loc.gov/standards/mets/mets.xsd)\n    page-file:\n      type: string\n      description: XML holding all information of the digitized page. (see http://schema.primaresearch.org/PAGE/gts/pagecontent/2017-07-15/pagecontent.xsd)\n    image-file:\n      type: string\n      format: binary\n      description: Image created by processor.\n    zip-file:\n      type: string\n      format: binary\n      description: \u003e\n        zip-file containing all files created by the processor. \n        Content of zip-file: \n          * METS file (mandatory) (default: mets.xml)\n          * Provenance (mandatory) (default: provenance.json)\n          * PAGE XML (optional) \n          * Images (optional) \n          * Output of (error) console. (optional) (default: output.json)\n        \n        All files have to be referenced inside the METS file.\n    provenance-file:\n      type: string\n      description: JSON file holding all information about the provenance.\n    message-with-timestamp:\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: 'timestamp'\n          format: date\n        message:\n          type: string\n          description: 'message'\n    logging:\n      additionalProperties: false\n      type: object\n      properties:\n        stdout:\n          type: array   \n          description: Output of console.\n          items:\n            $ref: '#/components/schemas/message-with-timestamp'\n        stderr:\n          type: array\n          description: Output of error console.\n          items:\n            $ref: '#/components/schemas/message-with-timestamp'\n      description: JSON file holding the output of the job.\n    job-id:\n      type: object\n      properties:\n        status: \n          $ref: '#/components/schemas/status'\n        jobId:\n          type: string\n          description: ID of the created job.\n      description: Status and job ID of created job.\n    status:\n      type: string\n      enum:\n        - OK\n    job-status:\n      type: string\n      enum:\n        - RUNNING\n        - FINISHED\n        - ERROR\n        - STOPPED\n      description: \u003e\n        Description of the status:\n          * `RUNNING` - Job is not finished yet.\n          * `FINISHED` - Job was executed successfully.\n          * `ERROR` - Job was cancelled due to an error.\n          * `STOPPED` - Job was stopped due to server restrictions.\n    log-level:\n      type: string\n      enum:\n        - OFF\n        - ERROR\n        - WARN\n        - INFO\n        - DEBUG\n        - TRACE\n      default: INFO\n      example: DEBUG\n      description: Minimum Log level. One of (OFF, ERROR, WARN, INFO (default), DEBUG, TRACE). Actual mechanism for filtering log messages must not be implemented by processors.\n"
		}
	},
	"Error": "parse: paths: /ocrd/processor: post: start-processor: requestBody: content: multipart/form-data: parse schema: parse schema: reference \"#/components/schemas/processors\": parse schema: log-level: parse schema: reference \"#/components/schemas/log-level\": parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}