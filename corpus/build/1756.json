{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-parser"
		},
		"file": {
			"name": "cant-read-deep-properties.yaml",
			"path": "modules/swagger-parser-v3/src/test/resources/cant-read-deep-properties.yaml",
			"content": "openapi: 3.0.0\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: http://host.docker.internal:8081/p.siudy2/awfsdgrfhtgh/1.0\n\ninfo:\n  version: '1.0'\n  title: issue\n  description: TypeProject/properties/id is not resolved\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: issue\n    description: issue\npaths:\n  /projects:\n    get:\n      tags:\n        - project\n      description: list projects\n      responses:\n        '200':\n          description: results\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  projects:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Project'\n        '400':\n          description: Invalid\n        '401':\n          description: You are not authorized\n        '500':\n          description: Internal Server Error\ncomponents:\n  schemas:\n    ProjectId:\n      type: integer\n      enum: [1, 2]\n      description: one of project type ids\n    Project:\n      type: object\n      required:\n        - user\n        - project_type\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n        project_type:\n          $ref: '#/components/schemas/TypeProject/properties/id'\n    User:\n      type: object\n      required:\n        - full_name\n        - id\n      properties:\n        full_name:\n          type: string\n          example: ful lname\n        id:\n          type: string\n          format: uuid\n    TypeProject:\n      type: object\n      properties:\n        id:\n          type: integer\n          enum: [1, 2]\n          description: one of project type ids\n        name:\n          type: string\n          enum: ['project1', 'project2']"
		}
	},
	"Error": "parse: paths: /projects: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: projects: parse schema: item: parse schema: reference \"#/components/schemas/Project\": parse schema: project_type: parse schema: reference \"#/components/schemas/TypeProject/properties/id\": resolve reference \"#/components/schemas/TypeProject/properties/id\": schema not found"
}