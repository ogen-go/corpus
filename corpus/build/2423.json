{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NUMde/compass-numapp-backend"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "src/assets/openapi.yaml",
			"content": "openapi: 3.0.3\ninfo:\n    title: COMPASS NUM-APP Mobile Backend\n    description: COMPASS NUM-APP Mobile Backend API\n    version: 0.1.1\nservers:\n    - url: 'http://localhost:8080/api'\ntags:\n    - name: health\n      description: Healthcheck\n    - name: participant\n      description: Study Participant Operations\n    - name: auth\n      description: Authentication for Download APIs\n    - name: questionnaire\n      description: Questionnaire Operations\n    - name: queue\n      description: Queue Operations\n    - name: download\n      description: API to download data from Queue\n    - name: subjectIdentities\n      description: API to manage subjectIdentities based on orscf standard\npaths:\n    '/questionnaire/{questionnaireId}/{language}':\n        get:\n            tags:\n                - questionnaire\n            summary: Get a specific questionnaire\n            operationId: getQuestionnaire\n            parameters:\n                - name: questionnaireId\n                  in: path\n                  description: Questionnaire ID\n                  schema:\n                      type: string\n                  required: true\n                - name: language\n                  in: path\n                  description: Code of desired language\n                  schema:\n                      type: string\n                  required: false\n            responses:\n                '200':\n                    description: A FHIR Questionnaire as JSON\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Questionnaire'\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n            security:\n                - Bearer: []\n    /questionnaire:\n        get:\n            tags:\n                - questionnaire\n            summary: Get a questionnaire by url and version\n            operationId: getQuestionnaireByUrlAndVersion\n            parameters:\n                - name: url\n                  in: query\n                  schema:\n                    type: string\n                  required: true\n                - name: version\n                  in: query\n                  schema:\n                    type: string\n                  required: true\n            responses:\n                '200':\n                    description: A FHIR Questionnaire as JSON\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Questionnaire'\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '404':\n                    $ref: '#/components/responses/404NotFound'\n            security:\n                - Bearer: []\n        post:\n            tags:\n                - questionnaire\n            summary: Add a new questionnaire\n            operationId: addQuestionnaire\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AddOrUpdateQuestionnaireRequest'\n            responses:\n                '204':\n                    description: successfully created the questionnaire (empty body returned)\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '409':\n                    $ref: '#/components/responses/409Conflict'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n            security:\n                - Bearer: []\n        put:\n            tags:\n                - questionnaire\n            summary: Update an existing questionnaire\n            operationId: updateQuestionnaire\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AddOrUpdateQuestionnaireRequest'\n            responses:\n                '204':\n                    description: successfully updated the questionnaire (empty body returned)\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '409':\n                    $ref: '#/components/responses/409Conflict'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n            security:\n                - Bearer: []\n    /questionnaire/get-languages:\n        get:\n            tags:\n                - questionnaire\n            summary: Get available questionnaire languages\n            operationId: getQuestionnaireLanguages\n            responses:\n                '200':\n                    description: Array of language strings\n                    content: \n                      application/json:\n                        schema:\n                            $ref: '#/components/schemas/LanguageList'\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n            security:\n                - Bearer: []\n    /queue:\n        post:\n            tags:\n                - queue\n            summary: Persists an encrypted report or questionnaire\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/QueueInsert'\n            parameters:\n                - name: type\n                  in: query\n                  description: questionnaire_response || report\n                  schema:\n                      type: string\n                  required: true\n                - name: subjectId\n                  in: query\n                  description: SubjectID\n                  schema:\n                      type: string\n                  required: true\n                - name: surveyId\n                  in: query\n                  description: ID of the current questionnaire (if type === questionnaire_response)\n                  schema:\n                      type: string\n                  required: false\n                - name: instanceId\n                  in: query\n                  description: \u003e-\n                      ID of the instance of the current questionnaire (if type ===\n                      questionnaire_response)\n                  schema:\n                      type: string\n                  required: false\n                - name: updateValues\n                  in: query\n                  description: \u003e-\n                      ID of the instance of the current questionnaire (if type ===\n                      questionnaire_response)\n                  schema:\n                      type: object\n                      required:\n                          - ''\n                      properties:\n                          basicTrigger:\n                              type: boolean\n                          specialTrigger:\n                              type: boolean\n                  required: false\n            responses:\n                '204':\n                    description: Added to queue (empty body returned)\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n    /health:\n        get:\n            tags:\n                - health\n            summary: \u003e-\n                Get backend status - exposes the HealthEndpoint from\n                https://cloudnativejs.io/\n            operationId: getHealth\n            responses:\n                '200':\n                    description: Server OK - When app is started\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Health'\n                '503':\n                    $ref: '#/components/responses/503ServerError'\n    '/participant/{subjectId}':\n        get:\n            tags:\n                - participant\n            summary: Get current participant information\n            operationId: getParticipant\n            parameters:\n                - name: subjectId\n                  in: path\n                  description: Subject ID\n                  schema:\n                      type: string\n                  required: true\n            responses:\n                '200':\n                    description: Subject information\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Participant'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n            security:\n                - Bearer: []\n    /participant/update-language-code/{subjectId}:\n        post:\n            tags:\n                - participant\n            summary: Document language preferrence of user\n            operationId: updateLanguageCode\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateLanguageRequest'\n            responses:\n                '200':\n                    description: successfully stored user language preference\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n            security:\n                - Bearer: []\n    /auth:\n        post:\n            tags:\n                - auth\n            summary: Get an authentication token used for accessing the Download API\n            operationId: authenticate\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/LoginRequest'\n            responses:\n                '200':\n                    description: Successful authentication\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    access_token:\n                                        type: string\n                                        description: Access token for accessing the Download API\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n    /download:\n        get:\n            tags:\n                - download\n            summary: Get current data from queue\n            parameters:\n                - name: page\n                  in: query\n                  description: Number of current page\n                  schema:\n                      type: number\n                      minimum: 1\n                      default: 1\n            security:\n                - DownloadAuthentication: []\n            responses:\n                '200':\n                    description: Current Queue data\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DownloadAnswer'\n                '400':\n                    description: Page query parameter set wrong\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n        put:\n            tags:\n                - download\n            summary: Mark entries with given IDs as downloaded\n            requestBody:\n                description: UUIDs of CTransferList to be updated\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateUUIDsParam'\n            security:\n                - DownloadAuthentication: []\n            responses:\n                '200':\n                    description: Updated row count\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdatedRowCount'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\n    '/subjectIdentities/addNew':\n        post:\n            tags:\n                - subjectIdentities\n            summary: Add new subject identity\n            operationId: postSubjectidentity\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SubjectIdentity'\n            responses:\n                '200':\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                type: object\n                                properties:\n                                    return:\n                                        type: boolean\n                                        description: the method-result of the executed operation\n\n                '400':\n                    $ref: '#/components/responses/400BadRequest'\n                '401':\n                    $ref: '#/components/responses/401NotAuthenticated'\n                '409':\n                    $ref: '#/components/responses/409Conflict'\n                '500':\n                    $ref: '#/components/responses/500ServerError'\ncomponents:\n    schemas:\n        DownloadAnswer:\n            type: object\n            properties:\n                totalEntries:\n                    type: number\n                totalPages:\n                    type: number\n                currentPage:\n                    type: number\n                cTransferList:\n                    type: string\n                    description: \u003e-\n                        'RSA-SHA256' Signature of object containing UUID, Subject ID, encrypted questionnaire response, dispatch date, reception date.'\n        UpdateUUIDsParam:\n            type: array\n            items:\n                type: string\n                description: UUID of CTransfer to be updated.\n                example: 534772d7-b62d-4050-ab2f-f052933c325f\n        UpdatedRowCount:\n            type: object\n            properties:\n                updatedRowCount:\n                    type: number\n        LoginRequest:\n            type: object\n            properties:\n                encrypted_creds:\n                    type: string\n                    description: \u003e\n                        Json object with  \"ApiID\" + \"ApiKey\" + \"CurrentDate\" with random AES\n                        256bit key and random initialization vector;\n                encrypted_key:\n                    type: string\n                    description: \u003e\n                        Encrypt random AES key with the backend's public key (RSA-AES-256-CBC\n                        Encryption)\n                iv:\n                    type: string\n                    description: Random initialization vector\n        LanguageList:\n            type: array\n            items:\n                type: string\n            example:\n              - de\n              - en\n        UpdateLanguageRequest:\n            type: object\n            properties:\n                language:\n                    type: string\n                    description: the code of the language preferred by the user\n                    example: 'en'\n        QueueInsert:\n            type: object\n            properties:\n                payload:\n                    type: string\n                    description: 'encrypted, base'\n        Participant:\n            type: object\n            properties:\n                current_instance_id:\n                    type: string\n                    description: ID of the current Questionnaire Instance\n                current_questionnaire_id:\n                    type: string\n                    description: 'ID of the current Questionnaire '\n                due_date:\n                    type: string\n                    description: Due Date of the Questionnaire\n                start_date:\n                    type: string\n                    description: Start Date of the Questionnaire\n                subjectId:\n                    type: string\n                    description: Subject ID given by QR Code\n                firstTime:\n                    type: boolean\n                    description: Marks if the participant has already send in a questionnaire\n                status:\n                    type: string\n                    enum:\n                        - on-study\n                        - off-study\n                    description: Marks if subject is participating in the study\n                general_study_end_date:\n                    type: date\n                    description: End date of study that subject is/was participating in\n                personal_study_end_date:\n                    type: date\n                    description: Individual end date of study that subject is/was participating in\n                language_code:\n                    type: string\n                    description: Code of participant language\n        Health:\n            type: object\n            properties:\n                status:\n                    type: string\n                    enum:\n                        - UP\n        Questionnaire:\n            type: object\n            properties:\n                resourceType:\n                    type: string\n                url:\n                    type: string\n                version:\n                    type: string\n                item:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/QuestionnaireItem'\n        QuestionnaireItem:\n            required:\n                - linkId\n                - type\n            type: object\n            properties:\n                linkId:\n                    type: string\n                    description: Unique id for item in questionnaire\n                text:\n                    type: string\n                    description: Primary text for the item\n                required:\n                    type: boolean\n                    description: Whether the item must be included in data results.\n                repeats:\n                    type: boolean\n                    description: NOT IN USE - Whether the item may repeat\n                type:\n                    type: string\n                    description: |\n                        Distinguishes groups from questions and display text and indicates data type for questions.\n\n                        * group - An item with no direct answer but should have at least one child item.\n                        * display - Text for display that will not capture an answer or have child items.\n                        * string - Question with a short (few words to short sentence) free-text entry answer (valueString).\n                        * date - Question with a date answer (valueDate).\n                        * integer - Question with an integer answer (valueInteger).\n                        * decimal - Question with is a real number answer (valueDecimal).\n                        * choice -   Question with a Coding drawn from a list of possible answers (specified in either the answerOption property, or via the valueset referenced in the answerValueSet property) as an answer (valueCoding).\n                        * open-choice - Answer is a Coding drawn from a list of possible answers (as with the choice type) or a free-text entry in a string (valueCoding or valueString).\n                    enum:\n                        - group\n                        - display\n                        - string\n                        - date\n                        - integer\n                        - decimal\n                        - choice\n                        - open-choice\n                enableWhen:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/EnableWhenItem'\n                enableBehavior:\n                    type: string\n                    description: |\n                        Controls how multiple enableWhen values are interpreted - whether all or any must be true.\n                        This element should be specified if more than one enableWhen item is provided.\n                        If not set it defaults to 'all'.\n\n                        * all - Enable the question when all the enableWhen criteria are satisfied.\n                        * any - Enable the question when any of the enableWhen criteria are satisfied.\n                    enum:\n                        - any\n                        - all\n                definition:\n                    type: string\n                    format: uri\n                answerOption:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AnswerOptionItem'\n                item:\n                    type: array\n                    description: Nested questionnaire items\n                    items:\n                        $ref: '#/components/schemas/QuestionnaireItemCircular'\n        QuestionnaireItemCircular:\n            description: \"This is the same object as `QuestionnaireItem`. Workaround for Swagger bug. Swagger can't display recursive structures. See https://github.com/swagger-api/swagger-ui/issues/3325\"\n            allOf:\n                - $ref: '#/components/schemas/QuestionnaireItem'\n        AddOrUpdateQuestionnaireRequest:\n            type: object\n            properties:\n                name:\n                    type: string\n                    description: the name of the questionnaire as used for the logic to deployment\n                url:\n                    type: string\n                    description: the url of the questionnaire as defined in its metadata\n                version:\n                    type: string\n                    description: the version of the questionnaire as defined in its metadata\n                questionnaire:\n                    type: object\n                    $ref: '#/components/schemas/Questionnaire'\n        SubjectIdentity:\n            type: object\n            properties:\n                subjectIdentity:\n                    type: object\n                    properties:\n                        recordId:\n                            type: string\n                            description: Identifier for new subject\n        EnableWhenItem:\n            required:\n                - operator\n                - question\n            type: object\n            properties:\n                question:\n                    type: string\n                    description: Question that determines whether item is enabled. Uses the `linkId` of the question.\n                operator:\n                    type: string\n                    description: |\n                        * '=' True if whether at least one answer has a value that is equal to the enableWhen answer.\n                    enum:\n                        - =\n                answerBoolean:\n                    type: boolean\n                    description: 'Used, if referenced question is of type boolean.'\n                answerString:\n                    type: string\n                    description: 'Used, if referenced question is of type choice.'\n            description: |\n                Only allow data when the defined condition is true.\n                The EnableWhenBehavior should be set, when there are multiple enableWhen conditions.\n        AnswerOptionItem:\n            type: object\n            properties:\n                valueString:\n                    type: string\n                    description: The answer option text. Prefixed by an ID to identify the answer.\n                    example: '02# Schultergelenk'\n            description: Permitted answer\n        AnswerItem:\n            required:\n                - linkId\n                - text\n            type: object\n            properties:\n                linkId:\n                    type: string\n                    description: Unique id for item in questionnaire\n                text:\n                    type: string\n                    description: Primary text for the item\n                answer:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AnswerOptionItem'\n                item:\n                    type: array\n                    description: Nested questionnaire items\n                    items:\n                        $ref: '#/components/schemas/AnswerItemCircular'\n        AnswerItemCircular:\n            description: \"This is the same object as `AnswerItem`. Workaround for Swagger bug. Swagger can't display recursive structures. See https://github.com/swagger-api/swagger-ui/issues/3325\"\n            allOf:\n                - $ref: '#/components/schemas/AnswerItem'\n    securitySchemes:\n        Bearer:\n            type: http\n            scheme: bearer\n            bearerFormat: string\n            description: |\n                Subject ID to identify the participant.\n        DownloadAuthentication:\n            type: http\n            scheme: bearer\n            bearerFormat: JWT\n            description: Access token for the Download API\n    responses:\n        400BadRequest:\n            description: Bad Request - (URL) parameter is missing\n        401NotAuthenticated:\n            description: Not Authenticated - No valid authentication data was supplied\n        403NotAuthorized:\n            description: Unauthorized - No valid authorization header was supplied\n        404NotFound:\n            description: Not Found - Requested data does not exist\n        409Conflict:\n            description: Conflict - Resource already exists\n        500ServerError:\n            description: Internal Server Error\n        503ServerError:\n            description: Unavailable\n"
		}
	},
	"Error": "parse: paths: /participant/{subjectId}: get: operation \"getParticipant\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Participant\": parse schema: general_study_end_date: parse schema: unexpected schema type: \"date\""
}