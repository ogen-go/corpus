{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/HilaryHA/VueTypeScriptSystem"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "mock/public/swagger.yaml",
			"content": "openapi: 3.0.0\r\ninfo:\r\n  description: Mock API for vue-typeScript-system.\r\n  version: 1.0.0\r\n  title: Mock API\r\n  contact:\r\n    email: hilaryha@qq.com\r\n  license:\r\n    name: MIT\r\n    url: https://opensource.org/licenses/MIT\r\nhost: 9956\r\nbasePath: /mockTest\r\n# servers:\r\n#   - url: /mock-api/v1\r\ntags:\r\n  - name: tables\r\n    description: Tables data related api.\r\npaths:\r\n  /tables:\r\n    get:\r\n      tags: \r\n        - tables\r\n      summary: Get Tables List\r\n      description: Return a list of tables.\r\n      parameters: \r\n        - name: name\r\n          in: query\r\n          description: Used to filter tables by matched name substring.\r\n          schema:\r\n            $ref: '#/components/schemas/Tables/properties/name'\r\n        - name: page\r\n          in: query\r\n          description: The wanted page number (one page).\r\n          schema:\r\n            type: integer\r\n            format: int32\r\n            minimum: 1\r\n        - name: limit\r\n          in: query\r\n          description: The maximum number of tables returned for one page.\r\n          schema:\r\n            type: integer\r\n            format: int32\r\n            minimum: 0\r\n            maximum: 50\r\n        - name: sort\r\n          in: query\r\n          description: Optional sorting order for tables.\r\n          schema:\r\n            type: string\r\n            enum:\r\n              - +id\r\n              - -id  \r\n      responses:\r\n        200:\r\n          description: OK\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:\r\n                  status:\r\n                    type: integer\r\n                    format: int32\r\n                  data:\r\n                    type: object\r\n                    properties:\r\n                      total:\r\n                        type: integer\r\n                        format: int32\r\n                      items:\r\n                        type: array\r\n                        items:\r\n                          $ref: '#/components/schemas/Tables'  \r\n\r\ncomponents:\r\n  securitySchemes:\r\n    AccessTokenAuth:\r\n      type: apiKey\r\n      in: header\r\n      name: X-Access-Token\r\n  responses:\r\n    NotFound:\r\n      description: The specified resource was not found\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: '#/components/schemas/Error'\r\n    Unauthorized:\r\n      description: Unauthorized\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: '#/components/schemas/Error'\r\n    InvalidUser:\r\n      description: Invalid username supplied\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: '#/components/schemas/Error'\r\n  schemas:\r\n    Error:\r\n      type: object\r\n      properties:\r\n        code:\r\n          type: integer\r\n          format: int64\r\n        info:\r\n          type: string\r\n      required:\r\n        - code\r\n        - info\r\n    Tables:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          example: Hilay\r\n        age:\r\n          type: integer\r\n          format: int64\r\n        ip:\r\n          type: string\r\n          example: '192.168.7.67'\r\n        address:\r\n          type: string\r\n          example: shanghai\r\n        date:\r\n          type: string\r\n          format: date\r\n          example: '2019-11-11'\r\n      required:\r\n       - name\r\n       - age\r\n       - address\r\n       - date\r\n    Timestamp:\r\n      oneOf:\r\n      - type: integer\r\n        format: int32\r\n        example: 1559605283\r\n      - type: string\r\n        format: date-time\r\n        example: 2017-07-21T17:32:28Z\r\n    AnyValue: {}\r\n"
		}
	},
	"Error": "parse: paths: /tables: get: operation \"\": parameters: parse parameter \"name\": schema: parse schema: reference \"#/components/schemas/Tables/properties/name\": resolve reference \"#/components/schemas/Tables/properties/name\": schema not found"
}