{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vimeo/openapi"
		},
		"file": {
			"name": "api.yaml",
			"path": "api.yaml",
			"content": "openapi: 3.0.2\ninfo:\n  title: 'Vimeo API'\n  version: '3.4'\n  contact:\n    url: 'https://developer.vimeo.com/help'\ntags:\n  -\n    name: 'API Information'\n  -\n    name: 'Albums\\Album videos'\n  -\n    name: 'Albums\\Custom album logos'\n  -\n    name: 'Albums\\Custom album thumbnails'\n  -\n    name: Albums\\Essentials\n  -\n    name: Albums\\Videos\n  -\n    name: 'Authentication Extras\\Essentials'\n  -\n    name: Categories\\Channels\n  -\n    name: Categories\\Essentials\n  -\n    name: Categories\\Groups\n  -\n    name: Categories\\Subscriptions\n  -\n    name: Categories\\Videos\n  -\n    name: Channels\\Categories\n  -\n    name: Channels\\Essentials\n  -\n    name: Channels\\Moderators\n  -\n    name: 'Channels\\Private channel members'\n  -\n    name: 'Channels\\Subscriptions and subscribers'\n  -\n    name: Channels\\Tags\n  -\n    name: Channels\\Videos\n  -\n    name: 'Embed Presets\\Custom logos'\n  -\n    name: 'Embed Presets\\Essentials'\n  -\n    name: 'Embed Presets\\Videos'\n  -\n    name: Groups\\Essentials\n  -\n    name: Groups\\Subscriptions\n  -\n    name: Groups\\Users\n  -\n    name: Groups\\Videos\n  -\n    name: Likes\\Essentials\n  -\n    name: 'On Demand\\Backgrounds'\n  -\n    name: 'On Demand\\Essentials'\n  -\n    name: 'On Demand\\Genres'\n  -\n    name: 'On Demand\\Posters'\n  -\n    name: 'On Demand\\Promotions'\n  -\n    name: 'On Demand\\Purchases and Rentals'\n  -\n    name: 'On Demand\\Regions'\n  -\n    name: 'On Demand\\Seasons'\n  -\n    name: 'On Demand\\Videos'\n  -\n    name: Portfolios\\Essentials\n  -\n    name: Portfolios\\Videos\n  -\n    name: Projects\\Essentials\n  -\n    name: Projects\\Videos\n  -\n    name: Tags\\Essentials\n  -\n    name: Tutorial\\Essentials\n  -\n    name: Users\\Essentials\n  -\n    name: Users\\Feeds\n  -\n    name: Users\\Followers\n  -\n    name: Users\\Internal\n  -\n    name: Users\\Pictures\n  -\n    name: 'Users\\Watch history'\n  -\n    name: Videos\\Comments\n  -\n    name: 'Videos\\Content ratings'\n  -\n    name: 'Videos\\Creative Commons'\n  -\n    name: Videos\\Credits\n  -\n    name: 'Videos\\Embed privacy'\n  -\n    name: Videos\\Essentials\n  -\n    name: Videos\\Languages\n  -\n    name: Videos\\Recommendations\n  -\n    name: Videos\\Tags\n  -\n    name: 'Videos\\Text tracks'\n  -\n    name: Videos\\Thumbnails\n  -\n    name: Videos\\Uploads\n  -\n    name: Videos\\Versions\n  -\n    name: 'Videos\\Viewing privacy'\n  -\n    name: 'Watch Later Queue\\Essentials'\nservers:\n  -\n    url: 'https://api.vimeo.com'\n    description: Vimeo.com\npaths:\n  /:\n    get:\n      summary: 'Get an API specification'\n      description: 'This method returns a full specification for the Vimeo API.'\n      operationId: get_endpoints\n      tags:\n        - 'API Information'\n      parameters:\n        -\n          description: 'Return an OpenAPI specification.'\n          in: query\n          name: openapi\n          required: false\n          schema:\n            type: boolean\n            example: true\n      responses:\n        200:\n          description: 'Standard request.'\n          content:\n            application/vnd.vimeo.endpoint+json:\n              schema:\n                $ref: '#/components/schemas/endpoint'\n  /categories:\n    get:\n      summary: 'Get all categories'\n      description: 'This method gets all existing categories.'\n      operationId: get_categories\n      tags:\n        - Categories\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - last_video_featured_time\n              - name\n      responses:\n        200:\n          description: 'The categories were returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/category'\n  '/categories/{category}':\n    get:\n      summary: 'Get a specific category'\n      description: 'This method gets a single category.'\n      operationId: get_category\n      tags:\n        - Categories\\Essentials\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n      responses:\n        200:\n          description: 'The category was returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/category'\n        404:\n          description: 'No such category exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/categories/{category}/channels':\n    get:\n      summary: 'Get all the channels in a category'\n      description: 'This method gets all the channels that belong to a category.'\n      operationId: get_category_channels\n      tags:\n        - Categories\\Channels\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n      responses:\n        200:\n          description: 'The channels were returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channel'\n        404:\n          description: 'No such category exists.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/categories/{category}/groups':\n    get:\n      summary: 'Get all the groups in a category'\n      description: 'This method gets all the groups that belong to a category.'\n      operationId: get_category_groups\n      tags:\n        - Categories\\Groups\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n      responses:\n        200:\n          description: 'The groups were returned.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/group'\n        404:\n          description: 'No such category exists.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/categories/{category}/videos':\n    get:\n      summary: 'Get all the videos in a category'\n      description: 'This method gets all the videos that belong to a category.'\n      operationId: get_category_videos\n      tags:\n        - Categories\\Videos\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: \"The attribute by which to filter the results.\\n\\nOption descriptions:\\n * `conditional_featured` - Featured (promoted) videos\\n\"\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - conditional_featured\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - featured\n              - likes\n              - plays\n              - relevant\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such category exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/categories/{category}/videos/{video_id}':\n    get:\n      summary: 'Check for a video in a category'\n      description: 'This method gets a single video from a category. Use it to determine whether the video belongs to the category.'\n      operationId: check_category_for_video\n      tags:\n        - Categories\\Videos\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 273576296\n      responses:\n        200:\n          description: 'The video belongs to the category.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such category exists, or the video doesn''t belong to it.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /channels:\n    get:\n      summary: 'Get all channels'\n      description: 'This method gets all existing channels.'\n      operationId: get_channels\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - featured\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: \"The way to sort the results.\\n\\nOption descriptions:\\n * `relevant` - Relevant sorting is available only for search queries.\\n\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n      responses:\n        200:\n          description: 'The channels were returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channel'\n        400:\n          description: 'The relevant sort has no search query.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Create a channel'\n      description: 'This method creates a new channel.'\n      operationId: create_channel\n      tags:\n        - Channels\\Essentials\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.channel+json:\n            schema:\n              type: object\n              properties:\n                description:\n                  description: 'The description of the channel.'\n                  example: 'We really love videos, and these are the videos we really, really love.'\n                  type: string\n                link:\n                  description: 'The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.'\n                  example: staffpicks\n                  type: string\n                name:\n                  description: 'The name of the channel.'\n                  example: 'Vimeo Staff Picks'\n                  type: string\n                privacy:\n                  description: 'The privacy level of the channel.'\n                  enum:\n                    - anybody\n                    - moderators\n                    - user\n                  type: string\n              required:\n                - name\n                - privacy\n      responses:\n        200:\n          description: 'The channel was created.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/channel'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t create a channel.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - create\n  '/channels/{channel_id}':\n    delete:\n      summary: 'Delete a channel'\n      description: 'This method deletes the specified channel.'\n      operationId: delete_channel\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The channel was deleted.'\n        403:\n          description: 'The authenticated user doesn''t own this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific channel'\n      description: 'This method gets a single channel.'\n      operationId: get_channel\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        200:\n          description: 'The channel was returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/channel'\n    patch:\n      summary: 'Edit a channel'\n      description: 'This method edits the specified channel.'\n      operationId: edit_channel\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.channel+json:\n            schema:\n              type: object\n              properties:\n                description:\n                  description: 'The description of the channel.'\n                  example: 'We really love videos, and these are the videos we really, really love.'\n                  type: string\n                link:\n                  description: 'The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `\"\"` for this field removes the link alias.'\n                  example: staffpicks\n                  type: string\n                name:\n                  description: 'The name of the channel.'\n                  example: 'Vimeo Staff Picks'\n                  type: string\n                privacy:\n                  description: 'The privacy level of the channel.'\n                  enum:\n                    - anybody\n                    - moderators\n                    - users\n                  type: string\n      responses:\n        200:\n          description: 'The channel was edited.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/channel'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/categories':\n    get:\n      summary: 'Get all the categories in a channel'\n      description: 'This method gets all the categories in the specified channel.'\n      operationId: get_channel_categories\n      tags:\n        - Channels\\Categories\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        200:\n          description: 'The categories were returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/category'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a list of categories to a channel'\n      description: 'This method adds multiple categories to the specified channel.'\n      operationId: add_channel_categories\n      tags:\n        - Channels\\Categories\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                channels:\n                  description: 'The array of category URIs to add.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - channels\n      responses:\n        204:\n          description: 'The categories were added.'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t add categories to the channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: There was no request body, or the request body is malformed.\\n* Error code 2204: You exceeded the maximum number of channel categories.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  '/channels/{channel_id}/categories/{category}':\n    delete:\n      summary: 'Remove a category from a channel'\n      description: 'This method removes a single category from the specified channel.'\n      operationId: delete_channel_category\n      tags:\n        - Channels\\Categories\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The channel was removed.'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'No such channel or category exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own the channel or isn''t a channel moderator.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Categorize a channel'\n      description: 'This method adds a channel to a category.'\n      operationId: categorize_channel\n      tags:\n        - Channels\\Categories\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The channel was categorized.'\n        400:\n          description: 'Error code 2204: You exceeded the maximum number of channel categories.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'No such channel or category exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own the channel or isn''t a channel moderator.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/moderators':\n    delete:\n      summary: 'Remove a list of channel moderators'\n      description: 'This method removes multiple moderators from the specified channel.'\n      operationId: remove_channel_moderators\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              type: object\n              properties:\n                user_uri:\n                  description: 'The URI of a user to remove as a moderator.'\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n      responses:\n        204:\n          description: 'The moderators were removed.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the channel, the user isn''t a moderator of the channel, or you tried to remove the owner of the channel.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get all the moderators in a channel'\n      description: 'This method gets all the moderators of the specified channel.'\n      operationId: get_channel_moderators\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The moderators were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n    patch:\n      summary: 'Replace the moderators of a channel'\n      description: 'This method replaces the current list of channel moderators with a new list. The authenticated user must be a follower of each to add them as moderator.'\n      operationId: replace_channel_moderators\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_uri:\n                  description: 'The URI of the user to add as a moderator.'\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n      responses:\n        200:\n          description: 'The moderators were replaced.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        400:\n          description: 'Error code 2908: The list contains more than 100 users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user owns this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Add a list of channel moderators'\n      description: 'This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower to add them as a moderator.'\n      operationId: add_channel_moderators\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_uri:\n                  description: 'The URI of a user to add as a moderator.'\n                  example: /users/152184\n                  type: string\n              required:\n                - user_uri\n      responses:\n        200:\n          description: 'The moderators were added.'\n        400:\n          description: 'Error code 2908: The list contains more than 100 users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn''t follow.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/moderators/{user_id}':\n    get:\n      summary: 'Get a specific channel moderator'\n      description: 'This method gets a single moderator of the specified channel.'\n      operationId: get_channel_moderator\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The moderator was returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n    delete:\n      summary: 'Remove a specific channel moderator'\n      description: 'This method removes a single moderator from the specified channel.'\n      operationId: remove_channel_moderator\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The moderator was removed.'\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the channel, the user isn''t a moderator of the channel, or you tried to remove the owner of the channel.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Add a specific channel moderator'\n      description: 'This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower to add them as a moderator.'\n      operationId: add_channel_moderator\n      tags:\n        - Channels\\Moderators\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the channel, a user is already a moderator of the channel, or you tried to add a user that the authenticated user doesn''t follow.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/privacy/users':\n    get:\n      summary: 'Get all the users who can view a private channel'\n      description: 'This method gets all the users who have access to the specified private channel.'\n      operationId: get_channel_privacy_users\n      tags:\n        - 'Channels\\Private channel members'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own this channel.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'Error code 2204: You can''t add this user to a channel of this type.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n    put:\n      summary: 'Permit a list of users to view a private channel'\n      description: 'This method gives multiple users access to the specified private channel.'\n      operationId: set_channel_privacy_users\n      tags:\n        - 'Channels\\Private channel members'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              type: object\n              properties:\n                users:\n                  description: 'The array of either the user URIs or the user IDs to permit to view the private channel.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n      responses:\n        200:\n          description: 'The users can now view the private channel.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own this channel.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'Error code 2204: You can''t add one or more of these users to a channel of this type.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: There was no request body, or the request body is malformed.\\n* Error code 2900: At least one of the specified user accounts doesn't exist.\"\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/privacy/users/{user_id}':\n    delete:\n      summary: 'Restrict a user from viewing a private channel'\n      description: 'This method prevents a single user from being able to access the specified private channel.'\n      operationId: delete_channel_privacy_user\n      tags:\n        - 'Channels\\Private channel members'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user can no longer view the private channel.'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'Error code 2204: You can''t add this user to a channel of this type.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Permit a specific user to view a private channel'\n      description: 'This method gives a single user access to the specified private channel.'\n      operationId: set_channel_privacy_user\n      tags:\n        - 'Channels\\Private channel members'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The user can now view the private channel.'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user doesn''t own this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: 'Error code 2204: You can''t add this user to a channel of this type.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/tags':\n    get:\n      summary: 'Get all the tags that have been added to a channel'\n      description: 'This method gets all the tags that have been added to the specified channel.'\n      operationId: get_channel_tags\n      tags:\n        - Channels\\Tags\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        200:\n          description: 'The tags were returned.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n        400:\n          description: 'No such channel exists.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a list of tags to a channel'\n      description: 'This method adds multiple tags to the specified channel.'\n      operationId: add_tags_to_channel\n      tags:\n        - Channels\\Tags\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.tag+json:\n            schema:\n              type: object\n              properties:\n                tag:\n                  description: 'An array of tags to assign.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - tag\n      responses:\n        200:\n          description: 'The tags were added.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n        400:\n          description: \"* No such channel exists, or a parameter is invalid.\\n* Error code 2501: You tried to add more than 20 tags to the channel.\\n* Error code 2205: There was no request body, or the request body is malformed.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t add tags to this channel.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/tags/{word}':\n    delete:\n      summary: 'Remove a tag from a channel'\n      description: 'This method removes a single tag from the specified channel.'\n      operationId: delete_tag_from_channel\n      tags:\n        - Channels\\Tags\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The word to use as the tag.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        204:\n          description: 'The tag was removed.'\n        400:\n          description: 'The tag is invalid, or a parameter is invalid.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t remove tags from this channel.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Check if a tag has been added to a channel'\n      description: 'This method determines whether a specific tag has been added to the channel in question.'\n      operationId: check_if_channel_has_tag\n      tags:\n        - Channels\\Tags\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The word to use as the tag.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        204:\n          description: 'The tag has been added to the channel.'\n        400:\n          description: 'No such tag exists.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'Error code 5000: The tag exists, but the channel isn''t tagged by it.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n    put:\n      summary: 'Add a specific tag to a channel'\n      description: 'This method adds a single tag to the specified channel.'\n      operationId: add_channel_tag\n      tags:\n        - Channels\\Tags\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The word to use as the tag.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        204:\n          description: 'The tag was added.'\n        400:\n          description: \"* The tag is invalid, or a parameter is invalid.\\n* Error code 2501: The channel has already reached its maximum number of 20 tags.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t add tags to this channel.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/users':\n    get:\n      summary: 'Get all the followers of a channel'\n      description: 'This method gets all the followers of a specific channel.'\n      operationId: get_channel_subscribers\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: true\n          schema:\n            type: string\n            enum:\n              - moderators\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The followers were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/channels/{channel_id}/videos':\n    delete:\n      summary: 'Remove a list of videos from a channel'\n      description: 'This method removes multiple videos from a specific channel.'\n      operationId: remove_videos_from_channel\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                video_uri:\n                  description: 'The URI of a video to remove.'\n                  example: /videos/258684937\n                  type: string\n              required:\n                - video_uri\n      responses:\n        204:\n          description: 'The videos were removed.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user isn''t a moderator of this channel, or you can''t remove this video from the channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get all the videos in a channel'\n      description: 'This method gets all the videos in a specific channel.'\n      operationId: get_channel_videos\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The page that contains the video URI.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - added\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n      responses:\n        304:\n          description: 'No videos have been added to this channel since the given `If-Modified-Since` header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The **sort** field is `default`, but the **direction** field has a value.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a list of videos to a channel'\n      description: 'This method gets all the videos in a specific channel.'\n      operationId: add_videos_to_channel\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                video_uri:\n                  description: 'The URI of a video to add.'\n                  example: /videos/258684937\n                  type: string\n              required:\n                - video_uri\n      responses:\n        200:\n          description: 'The videos were added.'\n        404:\n          description: 'No such channel exists, or no such user exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user isn''t a moderator of the channel, or the video can''t be added to the channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a specific video from a channel'\n      description: 'This method removes a single video from the channel in question.'\n      operationId: delete_video_from_channel\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was removed.'\n        404:\n          description: 'No such channel exists, or no such video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user isn''t a moderator of this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in a channel'\n      description: 'This method returns a specific video in a channel. You can use it to determine whether the video is in the channel.'\n      operationId: get_channel_video\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a specific video to a channel'\n      description: 'This method adds a single video to the specified channel.'\n      operationId: add_video_to_channel\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'No such channel exists, or no such video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The video can''t be added to channels, or the authenticated user isn''t the moderator of this channel.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/videos/{video_id}/comments':\n    get:\n      summary: 'Get all the comments on a video'\n      description: 'This method returns all the comments on the specified video.'\n      operationId: get_comments_alt1\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The comments were returned.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/comment'\n    post:\n      summary: 'Add a comment to a video'\n      description: 'This method adds a comment to the specified video.'\n      operationId: create_comment_alt1\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              type: object\n              properties:\n                text:\n                  description: 'The text of the comment.'\n                  example: 'I love this!'\n                  type: string\n              required:\n                - text\n      responses:\n        201:\n          description: 'The comment was added.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/comment'\n        400:\n          description: 'Error code 2207: The comment text is missing.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 3301: The comment was flagged as spam.\\n* Error code 3411: The authenticated user is unverified.\\n* Error code 3412: The authenticated user can't comment.\\n* Error code 3413: Comments are disabled for this video.\"\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/channels/{channel_id}/videos/{video_id}/credits':\n    get:\n      summary: 'Get all the credited users in a video'\n      description: 'This method returns all the credited users in a video.'\n      operationId: get_video_credits_alt1\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The credited users were returned.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/credit'\n    post:\n      summary: 'Credit a user in a video'\n      description: 'This method adds a user credit to a video.'\n      operationId: add_video_credit_alt1\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              type: object\n              properties:\n                email:\n                  description: 'The email address of the credited person.'\n                  example: user@example.com\n                  type: string\n                name:\n                  description: 'The name of the credited person.'\n                  example: 'Sam Doe'\n                  type: string\n                role:\n                  description: 'The role of the credited person.'\n                  example: Producer\n                  type: string\n                user_uri:\n                  description: 'The Vimeo URI of the credited person.'\n                  example: /users/152184\n                  type: string\n              required:\n                - email\n                - name\n                - role\n                - user_uri\n      responses:\n        201:\n          description: 'The credit was added.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/credit'\n        400:\n          description: \"* A parameter is invalid.\\n* The authenticated user has an unverified email address.\\n* There is a user block between the video owner and the person receiving credit.\"\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the video.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/channels/{channel_id}/videos/{video_id}/likes':\n    get:\n      summary: 'Get all the users who have liked a video'\n      description: 'This method gets all the users who have liked a particular video.'\n      operationId: get_video_likes_alt1\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n  '/channels/{channel_id}/videos/{video_id}/pictures':\n    get:\n      summary: 'Get all the thumbnails of a video'\n      description: 'This method returns all the thumbnail images of the specified video.'\n      operationId: get_video_thumbnails_alt1\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The thumbnails were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n    post:\n      summary: 'Add a video thumbnail'\n      description: 'This method adds a thumbnail image to the specified video.'\n      operationId: create_video_thumbnail_alt1\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the image created by the **time** field should be the default thumbnail for the video.'\n                  example: true\n                  type: boolean\n                time:\n                  description: 'Creates an image of the video from the given time offset.'\n                  example: 300\n                  type: number\n      responses:\n        201:\n          description: 'The thumbnail was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - upload\n  '/channels/{channel_id}/videos/{video_id}/privacy/users':\n    get:\n      summary: 'Get all the users who can view a private video'\n      description: 'This method returns all the users who have access to the specified private video.'\n      operationId: get_video_privacy_users_alt1\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        400:\n          description: 'No users can view this private video by default.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Permit a list of users to view a private video'\n      description: \"This method gives multiple users permission to view the specified private video. The body of the request should\\nfollow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each\\nobject must contain a single uri field whose value is the URI of the user who can view the video.\"\n      operationId: add_video_privacy_users_alt1\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The users can now view the private video.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n      security:\n        -\n          oauth2:\n            - edit\n  '/channels/{channel_id}/videos/{video_id}/texttracks':\n    get:\n      summary: 'Get all the text tracks of a video'\n      description: 'This method returns all the text tracks of the specified video.'\n      operationId: get_text_tracks_alt1\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The text tracks were returned.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/text-track'\n        404:\n          description: 'No such video exists.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a text track to a video'\n      description: 'This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).'\n      operationId: create_text_track_alt1\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the current text track is the *active text track*, or the one that appears in the player. Only one text track per language and type can be active.'\n                  example: true\n                  type: boolean\n                language:\n                  description: 'The language of the text track. For a full list of supported language, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en-US\n                  type: string\n                name:\n                  description: 'The name of the text track.'\n                  example: Commentary\n                  type: string\n                type:\n                  description: 'The type of the text track.'\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n              required:\n                - language\n                - name\n                - type\n      responses:\n        201:\n          description: 'The text track was added.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/text-track'\n        403:\n          description: \"* The authenticated user can't add the text track.\\n* Error code 2204: The request contains errors.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  /contentratings:\n    get:\n      summary: 'Get all content ratings'\n      description: 'This method returns all available content ratings.'\n      operationId: get_content_ratings\n      tags:\n        - 'Videos\\Content ratings'\n      responses:\n        200:\n          description: 'The content ratings were returned.'\n          content:\n            application/vnd.vimeo.contentrating+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/content-rating'\n  /creativecommons:\n    get:\n      summary: 'Get all Creative Commons licenses'\n      description: 'This method returns all available Creative Commons licenses.'\n      operationId: get_cc_licenses\n      tags:\n        - 'Videos\\Creative Commons'\n      responses:\n        200:\n          description: 'The Creative Commons licenses were returned.'\n          content:\n            application/vnd.vimeo.creativecommons+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/creative-commons'\n  /groups:\n    get:\n      summary: 'Get all groups'\n      description: 'This method returns all groups.'\n      operationId: get_groups\n      tags:\n        - Groups\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - featured\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: \"The way to sort the results.\\n\\nOption descriptions:\\n * `relevant` - Relevant sorting is available only for search queries.\\n\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n      responses:\n        200:\n          description: 'The groups were returned.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/group'\n    post:\n      summary: 'Create a group'\n      description: 'This method creates a new group.'\n      operationId: create_group\n      tags:\n        - Groups\\Essentials\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.group+json:\n            schema:\n              type: object\n              properties:\n                description:\n                  description: 'The description of the new group.'\n                  example: 'Want to participate in our weekly Challenges? Join the Group to receive messages and new Challenges!'\n                  type: string\n                name:\n                  description: 'The name of the new group.'\n                  example: 'Vimeo Weekend Challenge'\n                  type: string\n              required:\n                - name\n      responses:\n        200:\n          description: 'The group was created.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: '#/components/schemas/group'\n        403:\n          description: 'The authenticated user can''t create groups.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - create\n  '/groups/{group_id}':\n    delete:\n      summary: 'Delete a group'\n      description: 'This method deletes a group.'\n      operationId: delete_group\n      tags:\n        - Groups\\Essentials\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n      responses:\n        204:\n          description: 'The group was deleted.'\n        403:\n          description: 'The authenticated user isn''t the group owner.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific group'\n      description: 'This method returns a specific group.'\n      operationId: get_group\n      tags:\n        - Groups\\Essentials\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n      responses:\n        200:\n          description: 'The group was returned.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                $ref: '#/components/schemas/group'\n  '/groups/{group_id}/users':\n    get:\n      summary: 'Get all the members of a group'\n      description: 'This method returns all the users that belong to the specified group.'\n      operationId: get_group_members\n      tags:\n        - Groups\\Users\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - moderators\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The members were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        404:\n          description: 'No such group exists.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/groups/{group_id}/videos':\n    get:\n      summary: 'Get all the videos in a group'\n      description: 'This method removes a single video from the specified group.'\n      operationId: get_group_videos\n      tags:\n        - Groups\\Videos\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        304:\n          description: 'No videos have been added to this group since the given `If-Modified-Since` header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such group exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/groups/{group_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from a group'\n      description: 'This method removes a single video from the specified group.'\n      operationId: delete_video_from_group\n      tags:\n        - Groups\\Videos\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n        403:\n          description: 'The authenticated user can''t modify this group''s videos.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in a group'\n      description: 'This method returns a single video from a group. You can use this method to determine whether the video belongs to the group.'\n      operationId: get_group_video\n      tags:\n        - Groups\\Videos\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such video or group exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a video to a group'\n      description: 'This method adds a video to the specified group.'\n      operationId: add_video_to_group\n      tags:\n        - Groups\\Videos\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        202:\n          description: 'The video is in pending status.'\n        200:\n          description: 'The video was added.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        403:\n          description: \"* The video is already in the group.\\n* The authenticated user can't add videos to the group.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  /languages:\n    get:\n      summary: 'Get all languages'\n      description: 'This method returns all the video languages that Vimeo supports.'\n      operationId: get_languages\n      tags:\n        - Videos\\Languages\n      parameters:\n        -\n          description: \"The attribute by which to filter the results.\\n\\nOption descriptions:\\n * `texttracks` - Only return text track supported languages\\n\"\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - texttracks\n      responses:\n        200:\n          description: 'The languages were returned.'\n          content:\n            application/vnd.vimeo.language+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/language'\n  /me:\n    get:\n      summary: 'Get a user'\n      description: 'This method returns the representation of the authenticated user.'\n      operationId: get_user_alt1\n      tags:\n        - Users\\Essentials\n      responses:\n        200:\n          description: 'The user''s representation was returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n    patch:\n      summary: 'Edit a user'\n      description: 'This method edits the representation of the authenticated user.'\n      operationId: edit_user_alt1\n      tags:\n        - Users\\Essentials\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              type: object\n              properties:\n                bio:\n                  description: 'The user''s bio.'\n                  example: 'This is where you will find videos and news updates from the staff'\n                  type: string\n                content_filter:\n                  description: 'A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you''re using a query string or an array if you''re using JSON.'\n                  items:\n                    type: string\n                  type: array\n                link:\n                  description: 'The user''s custom Vimeo URL.'\n                  example: staff\n                  type: string\n                location:\n                  description: 'The user''s location.'\n                  example: 'New York City'\n                  type: string\n                name:\n                  description: 'The user''s display name.'\n                  example: 'Vimeo Staff'\n                  type: string\n                password:\n                  description: 'The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.'\n                  example: hunter1\n                  type: string\n                videos:\n                  properties:\n                    privacy:\n                      properties:\n                        add:\n                          description: 'Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos that this user uploads.'\n                          example: true\n                          type: boolean\n                        comments:\n                          description: 'Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.'\n                          enum:\n                            - anybody\n                            - contacts\n                            - nobody\n                          type: string\n                        download:\n                          description: 'Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.'\n                          example: true\n                          type: boolean\n                        embed:\n                          description: 'The privacy for embedded videos. The whitelist value enables you to define all valid embeddable domains. See our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for details on adding and removing domains.'\n                          enum:\n                            - private\n                            - public\n                            - whitelist\n                          type: string\n                        view:\n                          description: 'Who can view the video. This value becomes the default view setting for all future videos that this user uploads.'\n                          enum:\n                            - anybody\n                            - contacts\n                            - disable\n                            - nobody\n                            - password\n                            - unlisted\n                            - users\n                          type: string\n                      type: object\n                  type: object\n      responses:\n        200:\n          description: 'The user''s representation was edited.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n  /me/albums:\n    get:\n      summary: 'Get all the albums that belong to a user'\n      description: 'This method gets all the albums from the specified user''s account.'\n      operationId: get_albums_alt1\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - duration\n              - videos\n      responses:\n        200:\n          description: 'The albums were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Create an album'\n      description: 'This method creates a new album for the specified user.'\n      operationId: create_album_alt1\n      tags:\n        - Albums\\Essentials\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              type: object\n              properties:\n                brand_color:\n                  description: 'The hexadecimal code for the color of the player buttons.'\n                  example: ff66ee\n                  type: string\n                description:\n                  description: 'The description of the album.'\n                  example: 'Vimeo holiday videos!'\n                  type: string\n                hide_nav:\n                  description: 'Whether to hide Vimeo navigation when displaying the album.'\n                  example: true\n                  type: boolean\n                layout:\n                  description: 'The type of layout for presenting the album.'\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: 'The name of the album.'\n                  example: 'Vimeo Holiday Videos!'\n                  type: string\n                password:\n                  description: 'The album''s password. Required only if **privacy** is `password`.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: 'The privacy level of the album.'\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: 'Whether album videos should use the review mode URL.'\n                  example: true\n                  type: boolean\n                sort:\n                  description: 'The default sort order of the album''s videos.'\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: 'The color theme of the album.'\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n              required:\n                - name\n      responses:\n        201:\n          description: 'The album was created.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t create an album.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - create\n  '/me/albums/{album_id}':\n    delete:\n      summary: 'Delete an album'\n      description: 'This method deletes an album from the owner''s account.'\n      operationId: delete_album_alt1\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n      responses:\n        204:\n          description: 'The album was deleted.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t delete the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific album'\n      description: 'This method gets a single album.'\n      operationId: get_album_alt1\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n      responses:\n        200:\n          description: 'The album was returned.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit an album'\n      description: 'This method edits an album.'\n      operationId: edit_album_alt1\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              type: object\n              properties:\n                brand_color:\n                  description: 'The hexadecimal code for the color of the player buttons.'\n                  example: ff66ee\n                  type: string\n                description:\n                  description: 'The description of the album.'\n                  example: 'Vimeo holiday videos!'\n                  type: string\n                domain:\n                  description: 'The custom domain a user has selected for their album.'\n                  example: mycustomdomain.com\n                  nullable: true\n                  type: string\n                hide_nav:\n                  description: 'Whether to hide Vimeo navigation when displaying the album.'\n                  example: true\n                  type: boolean\n                layout:\n                  description: 'The type of layout for presenting the album.'\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: 'The name of the album.'\n                  example: 'Vimeo Holiday Videos!'\n                  type: string\n                password:\n                  description: 'The album''s password. Required only if **privacy** is `password`.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: 'The privacy level of the album.'\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: 'Whether album videos should use the review mode URL.'\n                  example: true\n                  type: boolean\n                sort:\n                  description: 'The default sort order of the album''s videos.'\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: 'The color theme of the album.'\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n                url:\n                  description: 'The custom Vimeo URL a user has selected for their album.'\n                  example: my-custom-url\n                  nullable: true\n                  type: string\n                use_custom_domain:\n                  description: 'Whether the user has opted in to use a custom domain for their album.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The album was edited.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the album, the supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/me/albums/{album_id}/videos':\n    get:\n      summary: 'Get all the videos in an album'\n      description: 'This method gets all the videos from the specified album.'\n      operationId: get_album_videos_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The page containing the video URI.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The password of the album.'\n          in: query\n          name: password\n          required: false\n          schema:\n            type: string\n            example: hunter1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n        -\n          description: 'Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video''s name.'\n          in: query\n          name: weak_search\n          required: false\n          schema:\n            type: boolean\n            example: false\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Replace all the videos in an album'\n      description: 'This method replaces all the existing videos in an album with one or more videos.'\n      operationId: replace_videos_in_album_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videos:\n                  description: 'A comma-separated list of video URIs.'\n                  example: '/videos/258684937,/videos/273576296'\n                  type: string\n              required:\n                - videos\n      responses:\n        201:\n          description: 'The videos were added.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t add videos to albums.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/me/albums/{album_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from an album'\n      description: 'This method removes a video from the specified album.'\n      operationId: remove_video_from_album_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      responses:\n        204:\n          description: 'The video was removed.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in an album'\n      description: 'This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.'\n      operationId: get_album_video_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n        -\n          description: 'The password of the album.'\n          in: query\n          name: password\n          required: false\n          schema:\n            type: string\n            example: hunter1\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such album exists, or the video wasn''t found in it.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a specific video to an album'\n      description: 'This method adds a single video to the specified album.'\n      operationId: add_video_to_album_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail':\n    post:\n      summary: 'Set a video as the album thumbnail'\n      description: 'Information about this method appears below.'\n      operationId: set_video_as_album_thumbnail_alt1\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                time_code:\n                  description: 'The video frame time in seconds to use as the album thumbnail.'\n                  example: 300\n                  type: number\n      responses:\n        200:\n          description: 'The album was updated with a new thumbnail.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/album'\n        404:\n          description: 'Error code 5000: No such album, or user, or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3429: The authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4016: Unexpected error while setting thumbnail.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  /me/appearances:\n    get:\n      summary: 'Get all the videos in which a user appears'\n      description: 'This method returns all the videos in which the authenticated user has a credited appearance.'\n      operationId: get_appearances_alt1\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  /me/categories:\n    get:\n      summary: 'Get all the categories that a user follows'\n      description: 'This method gets all the categories to which a particular user has subscribed.'\n      operationId: get_category_subscriptions_alt1\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - name\n      responses:\n        200:\n          description: 'The categories were returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/category'\n        403:\n          description: 'Error code 3200: You can''t view another user.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n  '/me/categories/{category}':\n    delete:\n      summary: 'Unsubscribe a user from a category'\n      description: 'This method unsubscribes the current user from a specified category.'\n      operationId: unsubscribe_from_category_alt1\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n      responses:\n        204:\n          description: 'The user was unsubscribed.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user follows a category'\n      description: 'This method determines whether a particular user is subscribed to the specified category.'\n      operationId: check_if_user_subscribed_to_category_alt1\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n      responses:\n        204:\n          description: 'The user is following the category.'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Subscribe a user to a single category'\n      description: 'This method subscribes the current user to a specified category.'\n      operationId: subscribe_to_category_alt1\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: number\n            example: 0\n      responses:\n        204:\n          description: 'The user was subscribed.'\n      security:\n        -\n          oauth2:\n            - interact\n  /me/channels:\n    get:\n      summary: 'Get all the channels to which a user subscribes'\n      description: 'This method gets all the channels to which the specified user subscribes.'\n      operationId: get_channel_subscriptions_alt1\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - moderated\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n      responses:\n        304:\n          description: 'No channel has been followed since the given `If-Modified-Since` header.'\n        200:\n          description: 'The channels were returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channel'\n  '/me/channels/{channel_id}':\n    delete:\n      summary: 'Unsubscribe a user from a specific channel'\n      description: 'This method causes a user to stop following the channel in question.'\n      operationId: unsubscribe_from_channel_alt1\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The user is no longer a follower of the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user follows a channel'\n      description: 'This method determines whether a specific user is a follower of the channel in question.'\n      operationId: check_if_user_subscribed_to_channel_alt1\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The user follows the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Subscribe a user to a specific channel'\n      description: 'This method causes a user to become the follower of the channel in question.'\n      operationId: subscribe_to_channel_alt1\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n      responses:\n        204:\n          description: 'The user is now a follower of the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  /me/customlogos:\n    get:\n      summary: 'Get all the custom logos that belong to a user'\n      description: 'This method returns all the custom logos that belong to the specified user.'\n      operationId: get_custom_logos_alt1\n      tags:\n        - 'Embed Presets\\Custom logos'\n      responses:\n        200:\n          description: 'The custom logos were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        403:\n          description: \"* The authenticated user can't view this particular custom logo.\\n* The authenticated user can't view custom logos in general.\"\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a custom logo'\n      description: 'This method adds a custom logo to the specified user''s account.'\n      operationId: create_custom_logo_alt1\n      tags:\n        - 'Embed Presets\\Custom logos'\n      responses:\n        201:\n          description: 'The custom logo was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: \"* The authenticated user can't upload pictures to another user's video.\\n* The authenticated user can't add a custom logo.\"\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/me/customlogos/{logo_id}':\n    get:\n      summary: 'Get a specific custom logo'\n      description: 'This method returns a single custom logo belonging to the specified user.'\n      operationId: get_custom_logo_alt1\n      tags:\n        - 'Embed Presets\\Custom logos'\n      parameters:\n        -\n          description: 'The ID of the custom logo.'\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The custom logo was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: 'The authenticated user can''t view custom logos.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /me/feed:\n    get:\n      summary: 'Get all the videos in a user''s feed'\n      description: 'This method returns all the videos in the authenticated user''s feed.'\n      operationId: get_feed_alt1\n      tags:\n        - Users\\Feeds\n      parameters:\n        -\n          description: 'The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).'\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n            example: '280'\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The feed type.'\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n            enum:\n              - appears\n              - category_featured\n              - channel\n              - facebook_feed\n              - following\n              - group\n              - likes\n              - ondemand_publish\n              - share\n              - tagged_with\n              - twitter_timeline\n              - uploads\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.activity+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/activity-3-1'\n      security:\n        -\n          oauth2:\n            - private\n  /me/followers:\n    get:\n      summary: 'Get all the followers of a user'\n      description: 'This method returns all the followers of the authenticated user.'\n      operationId: get_followers_alt1\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The user''s followers were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n  /me/following:\n    get:\n      summary: 'Get all the users that a user is following'\n      description: 'This method returns all users that the authenticated user is following.'\n      operationId: get_user_following_alt1\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - online\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The followed users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n    post:\n      summary: 'Follow a list of users'\n      description: \"This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as\\nan array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:\\n\\n```\\n{\\n [\\n     {\\\"uri\\\" : \\\"/users/{user01_id}\\\"},\\n     {\\\"uri\\\" : \\\"/users/{user02_id}\\\"},\\n     {\\\"uri\\\" : \\\"/users/{user03_id}\\\"}\\n ]\\n}\\n```\"\n      operationId: follow_users_alt1\n      tags:\n        - Users\\Followers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                users:\n                  description: 'An array of user IDs for the authenticated user to follow.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n      responses:\n        204:\n          description: 'The users were followed.'\n        401:\n          description: 'Error code 8000: The user access token is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3417: The authenticated user can''t follow other users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The request body is empty, the users array is invalid, or the list of users doesn't contain URIs.\\n* Error code 2900: A user in the list doesn't exist.\\n* Error code 2901: The list contains more than 100 users.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4005: An unexpected error occurred.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        429:\n          description: 'Error code 9006: The authenticated user is rate-limited from following other users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/me/following/{follow_user_id}':\n    delete:\n      summary: 'Unfollow a user'\n      description: 'This method causes the authenticated user to stop following another user.'\n      operationId: unfollow_user_alt1\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to unfollow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n      responses:\n        204:\n          description: 'The user was unfollowed.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user is following another user'\n      description: 'This method determines whether the authenticated user is a follower of the user in question.'\n      operationId: check_if_user_is_following_alt1\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to follow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n      responses:\n        204:\n          description: 'The authenticated user follows the user in question.'\n        404:\n          description: 'The authenticated user doesn''t follow the user in question.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Follow a specific user'\n      description: 'This method causes the authenticated user to become the follower of another user.'\n      operationId: follow_user_alt1\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to follow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n      responses:\n        204:\n          description: 'The user was followed.'\n        403:\n          description: 'The authenticated user can''t add followers.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  /me/groups:\n    get:\n      summary: 'Get all the groups that a user has joined'\n      description: 'This method returns all the groups to which a particular user belongs.'\n      operationId: get_user_groups_alt1\n      tags:\n        - Groups\\Users\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - moderated\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n      responses:\n        200:\n          description: 'The groups were returned.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/group'\n  '/me/groups/{group_id}':\n    delete:\n      summary: 'Remove a user from a group'\n      description: 'This method removes a single user from the specified group.'\n      operationId: leave_group_alt1\n      tags:\n        - Groups\\Subscriptions\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n      responses:\n        204:\n          description: 'The user left the group.'\n        403:\n          description: 'The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    put:\n      summary: 'Add a user to a group'\n      description: 'This method adds a single user to the specified group.'\n      operationId: join_group_alt1\n      tags:\n        - Groups\\Subscriptions\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n      responses:\n        204:\n          description: 'The user joined the group.'\n        403:\n          description: \"* The authenticated user can't join groups.\\n* The group prohibits the authenticated user from joining, either because the group is not public or because the group's privacy setting is `members`.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has joined a group'\n      description: 'This method determines whether a particular user belongs to the specified group.'\n      operationId: check_if_user_joined_group_alt1\n      tags:\n        - Groups\\Users\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n      responses:\n        204:\n          description: 'The user belongs to the group.'\n        404:\n          description: \"* No such group exists.\\n* The authenticated user isn't a member of this group.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /me/likes:\n    get:\n      summary: 'Get all the videos that a user has liked'\n      description: 'This method gets all the videos that the specified user has liked.'\n      operationId: get_likes_alt1\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/me/likes/{video_id}':\n    delete:\n      summary: 'Cause a user to unlike a video'\n      description: 'This method causes the specified user to unlike a video that they previously liked.'\n      operationId: unlike_video_alt1\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was unliked.'\n        403:\n          description: 'The authenticated user can''t like videos.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has liked a video'\n      description: 'This method checks if the specified user has liked a particular video.'\n      operationId: check_if_user_liked_video_alt1\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The user has liked the video.'\n        404:\n          description: 'The user hasn''t liked the video.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Cause a user to like a video'\n      description: 'This method checks if the specified user has liked a particular video.'\n      operationId: like_video_alt1\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was liked.'\n        403:\n          description: 'The authenticated user can''t like videos.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The authenticated user owns the video.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  /me/ondemand/pages:\n    get:\n      summary: 'Get all the On Demand pages of a user'\n      description: 'Information about this method appears below.'\n      operationId: get_user_vods_alt1\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The type of On Demand pages to return.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - film\n              - series\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - added\n              - alphabetical\n              - date\n              - modified_time\n              - name\n              - publish.time\n              - rating\n      responses:\n        200:\n          description: 'The On Demand pages were returned.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such user exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Create an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: create_vod_alt1\n      tags:\n        - 'On Demand\\Essentials'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                accepted_currencies:\n                  description: \"An array of accepted currencies.\\n\\nOption descriptions:\\n * `AUD` - Australian Dollar\\n * `CAD` - Canadian Dollar\\n * `CHF` - Swiss Franc\\n * `DKK` - Danish Krone\\n * `EUR` - Euro\\n * `GBP` - British Pound\\n * `JPY` - Japanese Yen\\n * `KRW` - South Korean Won\\n * `NOK` - Norwegian Krone\\n * `PLN` - Polish Zloty\\n * `SEK` - Swedish Krona\\n * `USD` - US Dollar\\n\"\n                  enum:\n                    - AUD\n                    - CAD\n                    - CHF\n                    - DKK\n                    - EUR\n                    - GBP\n                    - JPY\n                    - KRW\n                    - NOK\n                    - PLN\n                    - SEK\n                    - USD\n                  type: string\n                buy:\n                  properties:\n                    active:\n                      description: 'Whether the Buy action is active. *Required if `rent.active` is false.'\n                      example: true\n                      type: boolean\n                    download:\n                      description: 'Whether people who buy the video can download it. To use this field, `type` must be `film`.'\n                      example: true\n                      type: boolean\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The purchase price of this video in AUD.'\n                          example: 2.99\n                          type: number\n                        CAD:\n                          description: 'The purchase price of this video in CAD.'\n                          example: 2.99\n                          type: number\n                        CHF:\n                          description: 'The purchase price of this video in CHF.'\n                          example: 2.99\n                          type: number\n                        DKK:\n                          description: 'The purchase price of this video in DKK.'\n                          example: 2.99\n                          type: number\n                        EUR:\n                          description: 'The purchase price of this video in EUR.'\n                          example: 2.99\n                          type: number\n                        GBP:\n                          description: 'The purchase price of this video in GBP.'\n                          example: 2.99\n                          type: number\n                        JPY:\n                          description: 'The purchase price of this video in JPY.'\n                          example: 2.99\n                          type: number\n                        KRW:\n                          description: 'The purchase price of this video in KRW.'\n                          example: 2.99\n                          type: number\n                        NOK:\n                          description: 'The purchase price of this video in NOK.'\n                          example: 2.99\n                          type: number\n                        PLN:\n                          description: 'The purchase price of this video in PLN.'\n                          example: 2.99\n                          type: number\n                        SEK:\n                          description: 'The purchase price of this video in SEK.'\n                          example: 2.99\n                          type: number\n                        USD:\n                          description: 'The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.'\n                          example: 2.99\n                          type: number\n                      type: object\n                  type: object\n                content_rating:\n                  description: 'One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.'\n                  enum:\n                    - drugs\n                    - language\n                    - nudity\n                    - safe\n                    - unrated\n                    - violence\n                  type: string\n                description:\n                  description: 'The description of the On Demand page.'\n                  example: 'DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins \u0026 Notions\".'\n                  type: string\n                domain_link:\n                  description: 'The custom domain of the On Demand page.'\n                  example: 'https://example.com'\n                  type: string\n                episodes:\n                  properties:\n                    buy:\n                      properties:\n                        active:\n                          description: 'Whether episodes can be bought.'\n                          example: true\n                          type: boolean\n                        download:\n                          description: 'Whether people who buy the episode can download it. To use this field, `type` must be `series`.'\n                          example: true\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: 'The purchase price per episode. *Required if `episodes.buy.active` is true.'\n                              example: 1.99\n                              type: number\n                          type: object\n                      type: object\n                    rent:\n                      properties:\n                        active:\n                          description: 'Whether episodes can be rented'\n                          example: true\n                          type: boolean\n                        period:\n                          description: 'The period in which this episode can be rented for.'\n                          enum:\n                            - '1 week'\n                            - '1 year'\n                            - '24 hour'\n                            - '3 month'\n                            - '30 day'\n                            - '48 hour'\n                            - '6 month'\n                            - '72 hour'\n                          type: string\n                        price:\n                          properties:\n                            USD:\n                              description: 'The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.'\n                              example: 0.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                link:\n                  description: 'The custom string to use in this On Demand page''s Vimeo URL.'\n                  example: darbyforever\n                  type: string\n                name:\n                  description: 'The name of the On Demand page.'\n                  example: 'Darby Forever'\n                  type: string\n                rent:\n                  properties:\n                    active:\n                      description: 'Whether the video can be rented. *Required if `buy.active` is false.'\n                      example: true\n                      type: boolean\n                    period:\n                      description: 'The period in which this can be rented for.'\n                      enum:\n                        - '1 week'\n                        - '1 year'\n                        - '24 hour'\n                        - '3 month'\n                        - '30 day'\n                        - '48 hour'\n                        - '6 month'\n                        - '72 hour'\n                      type: string\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The rental price of this video in AUD.'\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: 'The rental price of this video in CAD.'\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: 'The rental price of this video in CHF.'\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: 'The rental price of this video in DKK.'\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: 'The rental price of this video in EUR.'\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: 'The rental price of this video in GBP.'\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: 'The rental price of this video in JPY.'\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: 'The rental price of this video in KRW.'\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: 'The rental price of this video in NOK.'\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: 'The rental price of this video in PLN.'\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: 'The rental price of this video in SEK.'\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: 'The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.'\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                subscription:\n                  properties:\n                    monthly:\n                      properties:\n                        active:\n                          description: 'Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.'\n                          example: true\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: 'The monthly subscription price in USD. *Required if `subscription.active` is true.'\n                              example: 9.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                type:\n                  description: 'The type of On Demand page.'\n                  enum:\n                    - film\n                    - series\n                  type: string\n              required:\n                - content_rating\n                - description\n                - name\n                - type\n      responses:\n        201:\n          description: 'The On Demand page was created.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n  /me/ondemand/purchases:\n    get:\n      summary: 'Get all the On Demand purchases and rentals that a user has made'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_purchases\n      tags:\n        - 'On Demand\\Purchases and Rentals'\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: \"The type of On Demand videos to show.\\n\\nOption descriptions:\\n * `important` - Will show all pages which are about to expire.\\n\"\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - all\n              - expiring_soon\n              - film\n              - important\n              - purchased\n              - rented\n              - series\n              - subscription\n              - unwatched\n              - watched\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - added\n              - alphabetical\n              - date\n              - name\n              - purchase_time\n              - rating\n              - release_date\n      responses:\n        200:\n          description: 'The purchases and rentals were returned.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-page'\n        403:\n          description: 'The authenticated user can''t view the purchases and rentals for another user''s account.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - purchased\n  '/me/ondemand/purchases/{ondemand_id}':\n    get:\n      summary: 'Check if a user has made a purchase or rental from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: check_if_vod_was_purchased_alt1\n      tags:\n        - 'On Demand\\Purchases and Rentals'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'You have purchased the On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such user or On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The requested user isn''t the same as the authenticated user.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - purchased\n  /me/pictures:\n    get:\n      summary: 'Get all the pictures that belong to a user'\n      description: 'This method returns all the portrait images belonging to the authenticated user.'\n      operationId: get_pictures_alt1\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The portrait images were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n    post:\n      summary: 'Add a user picture'\n      description: \"This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive\\nfrom the **link** field in the response. For step-by-step instructions, see\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).\"\n      operationId: create_picture_alt1\n      tags:\n        - Users\\Pictures\n      responses:\n        200:\n          description: 'The portrait image was added.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - upload\n  '/me/pictures/{portraitset_id}':\n    delete:\n      summary: 'Delete a user picture'\n      description: 'This method removes a portrait image from the authenticated user''s Vimeo account.'\n      operationId: delete_picture_alt1\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        204:\n          description: 'The portrait image was removed.'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific user picture'\n      description: 'This method returns a single portrait image belonging to the authenticated user.'\n      operationId: get_picture_alt1\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The portrait image was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n    patch:\n      summary: 'Edit a user picture'\n      description: 'This method edits a portrait image belonging to the authenticated user.'\n      operationId: edit_picture_alt1\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the picture is the authenticated user''s active portrait.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The portrait image was edited.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - edit\n  /me/portfolios:\n    get:\n      summary: 'Get all the portfolios that belong to a user'\n      description: 'This method gets all the specified user''s portfolios.'\n      operationId: get_portfolios_alt1\n      tags:\n        - Portfolios\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The portfolios were returned.'\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/portfolio'\n  '/me/portfolios/{portfolio_id}':\n    get:\n      summary: 'Get a specific portfolio'\n      description: 'This method gets a single portfolio from the specified user.'\n      operationId: get_portfolio_alt1\n      tags:\n        - Portfolios\\Essentials\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The portfolio was returned.'\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                $ref: '#/components/schemas/portfolio'\n  '/me/portfolios/{portfolio_id}/videos':\n    get:\n      summary: 'Get all the videos in a portfolio'\n      description: 'This method gets all the videos from the specified portfolio.'\n      operationId: get_portfolio_videos_alt1\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The page that contains the video URI.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: \"The way to sort the results.\\n\\nOption descriptions:\\n * `default` - This will sort to the default sort set on the portfolio.\\n\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - likes\n              - manual\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/me/portfolios/{portfolio_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from a portfolio'\n      description: 'This method removes a video from the specified portfolio.'\n      operationId: delete_video_from_portfolio_alt1\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n        404:\n          description: 'The portfolio wasn''t found, or the video wasn''t found.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in a portfolio'\n      description: 'This method gets a single video from the specified portfolio.'\n      operationId: get_portfolio_video_alt1\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n    put:\n      summary: 'Add a video to a portfolio'\n      description: 'This method adds a video to the specified portfolio.'\n      operationId: add_video_to_portfolio_alt1\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'The portfolio wasn''t found, or the video wasn''t found.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  /me/presets:\n    get:\n      summary: 'Get all the embed presets that a user has created'\n      description: 'This method returns all the embed presets that belong to the specified user.'\n      operationId: get_embed_presets_alt1\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The embed presets were returned.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/presets'\n  '/me/presets/{preset_id}':\n    get:\n      summary: 'Get a specific embed preset'\n      description: 'This method returns a single embed preset that belongs to the specified user.'\n      operationId: get_embed_preset_alt1\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The embed preset was returned.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/presets'\n    patch:\n      summary: 'Edit an embed preset'\n      description: 'This method edits an embed present belonging to the specified user.'\n      operationId: edit_embed_preset_alt1\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.preset+json:\n            schema:\n              type: object\n              properties:\n                outro:\n                  description: 'Disable the outro.'\n                  enum:\n                    - nothing\n                  type: string\n      responses:\n        200:\n          description: 'The embed preset was edited.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/presets'\n        404:\n          description: \"* The preset doesn't exist.\\n* The authenticated user doesn't own the preset.\"\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The outro type is invalid.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/me/presets/{preset_id}/videos':\n    get:\n      summary: 'Get all the videos that have been added to an embed preset'\n      description: 'This method returns all the videos that make use of the specified embed preset.'\n      operationId: get_embed_preset_videos_alt1\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the embed preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  /me/projects:\n    get:\n      summary: 'Get all the projects that belong to a user'\n      description: 'This method gets all the projects that belong to the specified user.'\n      operationId: get_projects_alt1\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - date\n              - default\n              - modified_time\n              - name\n      responses:\n        200:\n          description: 'The projects were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/project'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    post:\n      summary: 'Create a project'\n      description: 'This method creates a new project for the specified user.'\n      operationId: create_project_alt1\n      tags:\n        - Projects\\Essentials\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the project.'\n                  example: 'Rough cuts'\n                  type: string\n              required:\n                - name\n      responses:\n        201:\n          description: 'The project was created.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The input is empty.\\n* Error code 2204: The input is invalid.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t create projects.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - create\n  '/me/projects/{project_id}':\n    delete:\n      summary: 'Delete a project'\n      description: 'This method deletes a project and optionally also the videos that it contains.'\n      operationId: delete_project_alt1\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'Whether to delete all the videos in the project along with the project itself.'\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            type: boolean\n            example: true\n      responses:\n        204:\n          description: 'The project was deleted.'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t delete the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific project'\n      description: 'This method gets a single project that belongs to the specified user.'\n      operationId: get_project_alt1\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The project was returned.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    patch:\n      summary: 'Edit a project'\n      description: 'This method edits an existing project.'\n      operationId: edit_project_alt1\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the project.'\n                  example: 'Rough cuts'\n                  type: string\n              required:\n                - name\n      responses:\n        200:\n          description: 'The project was edited.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2204: The input is invalid.\\n* Error code 2205: The input is empty.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t edit the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/me/projects/{project_id}/videos':\n    delete:\n      summary: 'Remove a list of videos from a project'\n      description: 'This method removed multiple videos from the specified project.'\n      operationId: remove_videos_from_project_alt1\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'Whether to delete the videos when removing them from the project.'\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            type: boolean\n            example: false\n        -\n          description: 'A comma-separated list of the video URIs to remove.'\n          in: query\n          name: uris\n          required: true\n          schema:\n            type: string\n            example: '/videos/258684937,/videos/273576296'\n      responses:\n        204:\n          description: 'The videos were removed.'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Get all the videos in a project'\n      description: 'This method gets all the videos that belong to the specified project.'\n      operationId: get_project_videos_alt1\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Add a list of videos to a project'\n      description: 'This method adds multiple videos to the specified project.'\n      operationId: add_videos_to_project_alt1\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'A comma-separated list of video URIs to add.'\n          in: query\n          name: uris\n          required: true\n          schema:\n            type: string\n            example: '/videos/258684937,/videos/273576296'\n      responses:\n        204:\n          description: 'The videos were added.'\n        404:\n          description: 'Error code 5000: No such project or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/me/projects/{project_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a specific video from a project'\n      description: 'This method removes a single video from the specified project.'\n      operationId: remove_video_from_project_alt1\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was removed.'\n        404:\n          description: 'Error code 5000: No such video exists in the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    put:\n      summary: 'Add a specific video to a project'\n      description: 'This method adds a single video to the specified project.'\n      operationId: add_video_to_project_alt1\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'Error code 5000: No such user, project, or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  /me/videos:\n    get:\n      summary: 'Get all the videos that a user has uploaded'\n      description: 'This method returns all the videos that the authenticated user has uploaded.'\n      operationId: get_videos_alt1\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The page that contains the video URI. Available only when not paired with **query**.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - app_only\n              - embeddable\n              - featured\n              - playable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).'\n          in: query\n          name: filter_playable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n              - likes\n              - modified_time\n              - plays\n      responses:\n        304:\n          description: 'The authenticated user hasn''t created any videos since the given **If-Modified-Since** header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n    post:\n      summary: 'Upload a video'\n      description: \"This method begins the video upload process for the authenticated user. For more information, see our\\n[upload documentation](https://developer.vimeo.com/api/upload/videos).\"\n      operationId: upload_video_alt1\n      tags:\n        - Videos\\Uploads\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              type: object\n              properties:\n                content_rating:\n                  description: 'A list of values describing the content in this video. Find the full list in the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.'\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: 'The description of the video.'\n                  example: 'A celebration of 10 years of Staff Picks.'\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: 'Whether to show the embed button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        fullscreen:\n                          description: 'Whether to show the fullscreen button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        hd:\n                          description: 'Whether to show the HD button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        like:\n                          description: 'Show or hide the Like button.'\n                          example: true\n                          type: boolean\n                        scaling:\n                          description: 'Whether to show the scaling button on the embeddable player in fullscreen mode.'\n                          example: true\n                          type: boolean\n                        share:\n                          description: 'Whether to show the share button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        watchlater:\n                          description: 'Whether to show the watch later button on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    color:\n                      description: 'The main color of the embeddable player.'\n                      example: '#1ab7ea'\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: 'Whether to show the active custom logo on the embeddable player.'\n                              example: true\n                              type: boolean\n                            link:\n                              description: 'The URL that loads when the user clicks the custom logo.'\n                              example: 'https://example.com'\n                              type: string\n                            sticky:\n                              description: 'Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).'\n                              example: true\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: 'Whether to show the Vimeo logo on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: 'Whether to show the playbar on the embeddable player.'\n                      example: true\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: \"How to handle the video title in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the video title.\\n * `show` - Show the video title.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: \"How to handle the owner information in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the owner info.\\n * `show` - Show the owner info.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: \"How to handle the owner portrait in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the portrait.\\n * `show` - Show the portrait.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: 'Whether to show the volume selector on the embeddable player.'\n                      example: true\n                      type: boolean\n                  type: object\n                license:\n                  description: 'The Creative Commons license under which the video is offered.'\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: 'The video''s default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en_US\n                  type: string\n                name:\n                  description: 'The title of the video.'\n                  example: 'Celebrating 10 Years of Staff Picks'\n                  type: string\n                password:\n                  description: 'The password. When you set **privacy.view** to `password`, you must provide the password as an additional parameter.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: 'Whether a user can add the video to an album, channel, or group.'\n                      example: true\n                      type: boolean\n                    comments:\n                      description: 'The privacy level required to comment on the video.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: 'Whether a user can download the video. Not available to Vimeo Basic members.'\n                      example: true\n                      type: boolean\n                    embed:\n                      description: 'The video''s embed setting. Specify the `whitelist` value if you want to provide a list of all valid embed domains; see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for more information.'\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: 'The video''s privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, Vimeo Basic members can''t set this value to `disable` or `unlisted`.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: 'Whether to enable video review.'\n                      example: true\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: 'An array representing the 360 director timeline.'\n                      items:\n                        type: object\n                        properties:\n                          pitch:\n                            description: 'The 360 director timeline pitch. This value must be between −90 and 90. Required only when **spatial.director_timeline** is defined.'\n                            example: 70\n                            type: number\n                          roll:\n                            description: 'The 360 director timeline roll.'\n                            type: number\n                          time_code:\n                            description: 'The 360 director timeline time code. Required only when **spatial.director_timeline** is defined.'\n                            example: 5\n                            type: number\n                          yaw:\n                            description: 'The 360 director timeline yaw. This value must be between 0 and 360. Required only when **spatial.director_timeline** is defined.'\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                      type: array\n                    field_of_view:\n                      description: 'The 360 field of view. This value must be between 30 and 90. The default is 50.'\n                      example: 50\n                      type: number\n                    projection:\n                      description: 'The 360 spatial projection.'\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: 'The 360 spatial stereo format.'\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n                upload:\n                  properties:\n                    approach:\n                      description: 'The upload approach.'\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: 'The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.'\n                      example: 'https://example.com/video.mp4'\n                      type: string\n                    redirect_url:\n                      description: 'The app''s redirect URL. Use this parameter when `approach` is `post`.'\n                      example: 'https://example.com'\n                      type: string\n                    size:\n                      description: 'The size in bytes of the video to upload.'\n                      example: '13623861'\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - upload\n      responses:\n        201:\n          description: 'The upload procedure has begun.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        401:\n          description: 'Error code 8002: No user is associated with the access token.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 4102: The authenticated user's allotted quota has been reached.\\n* Error code 4101: The authenticated user's maximum disk space has been reached.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The body of the request isn't formatted properly.\\n* Error code 2204: The request contains invalid body parameters.\\n* Error code 2230: The upload type is invalid.\\n* Error code 3116: The **type** payload parameter was supplied instead of **upload.approach**. Use **upload.approach** starting from API version 3.4.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4003: There is a problem initiating the upload.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/me/videos/{video_id}':\n    get:\n      summary: 'Check if a user owns a video'\n      description: 'This method determines whether a particular user is the owner of the specified video.'\n      operationId: check_if_user_owns_video_alt1\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The user owns the video.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'The authenticated user doesn''t own the video.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /me/watched/videos:\n    delete:\n      summary: 'Delete a user''s watch history'\n      description: 'This method deletes the authenticated user''s entire watch history.'\n      operationId: delete_watch_history\n      tags:\n        - 'Users\\Watch history'\n      responses:\n        204:\n          description: 'The authenticated user''s watch history was deleted.'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get all the videos that a user has watched'\n      description: \"Information about this method appears below.\\n\\n**NOTE:** This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200.\"\n      operationId: get_watch_history\n      tags:\n        - 'Users\\Watch history'\n      parameters:\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        403:\n          description: 'The authenticated user can''t view another user''s watch history.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - private\n  '/me/watched/videos/{video_id}':\n    delete:\n      summary: 'Delete a specific video from a user''s watch history'\n      description: 'This method deletes the specified video from the authenticated user''s watch history.'\n      operationId: delete_from_watch_history\n      tags:\n        - 'Users\\Watch history'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted from the authenticated user''s watch history.'\n      security:\n        -\n          oauth2:\n            - delete\n  /me/watchlater:\n    get:\n      summary: 'Get all the videos in a user''s Watch Later queue'\n      description: 'This method gets all the videos from the specified user''s Watch Later queue.'\n      operationId: get_watch_later_queue_alt1\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        304:\n          description: 'The user hasn''t added any videos to their Watch Later queue since the given `If-Modified-Since` header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n      security:\n        -\n          oauth2:\n            - private\n  '/me/watchlater/{video_id}':\n    delete:\n      summary: 'Remove a video from a user''s Watch Later queue'\n      description: 'This method removes a single video from the specified user''s Watch Later queue.'\n      operationId: delete_video_from_watch_later_alt1\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has added a specific video to their Watch Later queue'\n      description: 'This method checks the specified user''s Watch Later queue for a particular video.'\n      operationId: check_watch_later_queue_alt1\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video appears in the user''s Watch Later queue.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'The video doesn''t appear in the user''s Watch Later queue.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Add a video to a user''s Watch Later queue'\n      description: 'This method adds a single video to the specified user''s Watch Later queue.'\n      operationId: add_video_to_watch_later_alt1\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n      security:\n        -\n          oauth2:\n            - interact\n  /oauth/access_token:\n    post:\n      summary: 'Exchange an authorization code for an access token'\n      description: 'This method exchanges an OAuth authorization code for an OAuth access token.'\n      operationId: exchange_auth_code\n      tags:\n        - 'Authentication Extras\\Essentials'\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              type: object\n              properties:\n                code:\n                  description: 'The authorization code received from the authorization server.'\n                  example: 1234abcd\n                  type: string\n                grant_type:\n                  description: 'The grant type. Must be set to `authorization_code`.'\n                  enum:\n                    - authorization_code\n                  type: string\n                redirect_uri:\n                  description: 'The redirect URI. Must match the URI from `/oauth/authorize`.'\n                  example: 'https://example.com'\n                  type: string\n              required:\n                - code\n                - grant_type\n                - redirect_uri\n      responses:\n        200:\n          description: 'The authorization code was exchanged.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth'\n        400:\n          description: \"* The grant type is invalid.\\n* The authorization code is invalid.\\n* The redirect URI doesn't match the URI to create the authorization code.\"\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth-error'\n  /oauth/authorize/client:\n    post:\n      summary: 'Authorize a client with OAuth'\n      description: \"For information on utilizing OAuth client authorization, see our\\n[authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the\\n[Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the\\n[OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.\"\n      operationId: client_auth\n      tags:\n        - 'Authentication Extras\\Essentials'\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  description: 'The grant type. Must be set to `client_credentials`.'\n                  enum:\n                    - client_credentials\n                  type: string\n                scope:\n                  description: 'A space-separated list of the authentication [scopes](https://developer.vimeo.com/api/authentication#table-1) that you want to access. The default is `public`.'\n                  example: public\n                  type: string\n              required:\n                - grant_type\n                - scope\n      responses:\n        200:\n          description: 'The authorization was successful.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth'\n        401:\n          description: 'Error code 8001: No such client secret exists.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /oauth/authorize/vimeo_oauth1:\n    post:\n      summary: 'Convert OAuth 1 access tokens to OAuth 2 access tokens'\n      description: 'This method exchanges a legacy Advanced API OAuth 1 token for an APIv3 OAuth 2 token.'\n      operationId: convert_access_token\n      tags:\n        - 'Authentication Extras\\Essentials'\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.auth+json:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  description: 'The grant type. Must be set to `vimeo_oauth1`.'\n                  enum:\n                    - vimeo_oauth1\n                  type: string\n                token:\n                  description: 'The OAuth 1 token.'\n                  example: 58037c0078d5f54e15e638cc0dd882a570b13c50\n                  type: string\n                token_secret:\n                  description: 'The OAuth 1 token secret.'\n                  example: NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA==\n                  type: string\n              required:\n                - grant_type\n                - token\n                - token_secret\n      responses:\n        200:\n          description: 'The tokens were converted.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth'\n        400:\n          description: \"* The token is invalid.\\n* The token has unauthorized scopes.\"\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth-error'\n  /oauth/verify:\n    get:\n      summary: 'Verify an OAuth 2 token'\n      description: 'This method verifies that an OAuth 2 token exists.'\n      operationId: verify_token\n      tags:\n        - 'Authentication Extras\\Essentials'\n      responses:\n        200:\n          description: 'The token was verified.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth'\n        401:\n          description: 'The token isn''t a valid OAuth 2 token.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /ondemand/genres:\n    get:\n      summary: 'Get all On Demand genres'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_genres\n      tags:\n        - 'On Demand\\Genres'\n      responses:\n        200:\n          description: 'The On Demand genres were returned.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-genre'\n  '/ondemand/genres/{genre_id}':\n    get:\n      summary: 'Get a specific On Demand genre'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_genre\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n      responses:\n        200:\n          description: 'The On Demand genre was returned.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-genre'\n        404:\n          description: 'No such On Demand genre exists.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/ondemand/genres/{genre_id}/pages':\n    get:\n      summary: 'Get all the On Demand pages in a genre'\n      description: 'This method returns all the On Demand pages that are in a specific genre.'\n      operationId: get_genre_vods\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - country\n              - my_region\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - name\n              - publish.time\n              - videos\n      responses:\n        200:\n          description: 'The On Demand pages were returned.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-page'\n  '/ondemand/genres/{genre_id}/pages/{ondemand_id}':\n    get:\n      summary: 'Get a specific On Demand page in a genre'\n      description: 'Check whether a genre contains an On Demand page.'\n      operationId: get_genre_vod\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The On Demand page belongs to the genre.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such On Demand page or genre exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/ondemand/pages/{ondemand_id}':\n    delete:\n      summary: 'Delete a draft of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_draft\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        204:\n          description: 'The page draft was deleted.'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The On Demand page was returned.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit an On Demand page'\n      description: 'Enable preorders or publish the page.'\n      operationId: edit_vod\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.ondemand.page+json:\n            schema:\n              type: object\n              properties:\n                link:\n                  description: 'The custom string to use in this On Demand page''s Vimeo URL.'\n                  example: darbyforever\n                  type: string\n                preorder:\n                  properties:\n                    active:\n                      description: 'If set to true, you will enable pre-orders on the On Demand page.'\n                      example: true\n                      type: boolean\n                    publish_time:\n                      description: 'The time that the On Demand page will be published. *Required if `preorder.active` is `true`.'\n                      example: '2017-05-16T15:05:43+00:00'\n                      type: string\n                  type: object\n                publish:\n                  properties:\n                    active:\n                      description: 'Whether to publish the On Demand page.'\n                      example: true\n                      type: boolean\n                  type: object\n                publish_when_ready:\n                  description: 'Whether to publish the On Demand page automatically after all videos are finished transcoding.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The On Demand page was edited.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t edit the On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/backgrounds':\n    get:\n      summary: 'Get all the backgrounds of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_backgrounds\n      tags:\n        - 'On Demand\\Backgrounds'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The background images were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a background to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: create_vod_background\n      tags:\n        - 'On Demand\\Backgrounds'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The background was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/ondemand/pages/{ondemand_id}/backgrounds/{background_id}':\n    delete:\n      summary: 'Remove a background from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_background\n      tags:\n        - 'On Demand\\Backgrounds'\n      parameters:\n        -\n          description: 'The ID of the background.'\n          in: path\n          name: background_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        204:\n          description: 'The background image was deleted.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page or background image exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'If you are attempting to modify an On Demand page you don''t own.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific background of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_background\n      tags:\n        - 'On Demand\\Backgrounds'\n      parameters:\n        -\n          description: 'The ID of the background.'\n          in: path\n          name: background_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The background image was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page or background image exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t view another user''s On Demand page background.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit a background of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: edit_vod_background\n      tags:\n        - 'On Demand\\Backgrounds'\n      parameters:\n        -\n          description: 'The ID of the background.'\n          in: path\n          name: background_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether to make this background the active background.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The background was edited.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page or background image exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/genres':\n    get:\n      summary: 'Get all the genres of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_genres_by_ondemand_id\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The genres were returned.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-genre'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/ondemand/pages/{ondemand_id}/genres/{genre_id}':\n    delete:\n      summary: 'Remove a genre from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_genre\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        204:\n          description: 'The On Demand genre was deleted.'\n        404:\n          description: 'No such On Demand page or genre exists.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The On Demand page must belong to at least one genre.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Check whether an On Demand page belongs to a genre'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_genre_by_ondemand_id\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The On Demand page''s genre was returned.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-genre'\n        404:\n          description: 'No such On Demand page or genre exists.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a genre to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: add_vod_genre\n      tags:\n        - 'On Demand\\Genres'\n      parameters:\n        -\n          description: 'The ID of the genre.'\n          in: path\n          name: genre_id\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        201:\n          description: 'The genre was added.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-genre'\n        404:\n          description: 'No such On Demand page or genre exists.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'You can''t add more than two genres to an On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.genre+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/likes':\n    get:\n      summary: 'Get all the users who have liked a video on an On Demand page'\n      description: 'This method gets all the users who have liked a particular video on an On Demand page.'\n      operationId: get_vod_likes\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the On Demand page.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - extra\n              - main\n              - trailer\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n  '/ondemand/pages/{ondemand_id}/pictures':\n    get:\n      summary: 'Get all the posters of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_posters\n      tags:\n        - 'On Demand\\Posters'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The posters were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a poster to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: add_vod_poster\n      tags:\n        - 'On Demand\\Posters'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        201:\n          description: 'The poster was added.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: 'You can''t modify another user''s On Demand page.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/ondemand/pages/{ondemand_id}/pictures/{poster_id}':\n    get:\n      summary: 'Get a specific poster of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_poster\n      tags:\n        - 'On Demand\\Posters'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: poster_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The poster was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n    patch:\n      summary: 'Edit a poster of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: edit_vod_poster\n      tags:\n        - 'On Demand\\Posters'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: poster_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether to make this picture the active picture.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The poster was edited.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/promotions':\n    get:\n      summary: 'Get all the promotions on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_promotions\n      tags:\n        - 'On Demand\\Promotions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The filter to apply to the results.'\n          in: query\n          name: filter\n          required: true\n          schema:\n            type: string\n            enum:\n              - batch\n              - default\n              - single\n              - vip\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The promotions were returned.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-promotion'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t view promotions for an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The filter is invalid.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - promo_codes\n    post:\n      summary: 'Add a promotion to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: create_vod_promotion\n      tags:\n        - 'On Demand\\Promotions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.ondemand.promotion+json:\n            schema:\n              type: object\n              properties:\n                access_type:\n                  description: \"The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.\\n\\nOption descriptions:\\n * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.\\n * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \\\"vip\\\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.\\n\"\n                  enum:\n                    - default\n                    - vip\n                  type: string\n                code:\n                  description: 'The promotion code. This field is ignored for batch promotions.'\n                  example: sxsw2018\n                  type: string\n                discount_type:\n                  description: \"The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.\\n\\nOption descriptions:\\n * `free` - Reduces the price to zero.\\n * `percent` - Reduces the price by an amount defined in the \\\"percent_off\\\" field.\\n\"\n                  enum:\n                    - free\n                    - percent\n                  type: string\n                download:\n                  description: 'Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`.'\n                  example: true\n                  type: boolean\n                end_time:\n                  description: 'The end of the promotion period. If you don''t specify a value, the promotion will never expire.'\n                  example: '1526089920'\n                  type: string\n                label:\n                  description: 'The description of a batch promotion. This field is ignored for single promotions.'\n                  example: sxsw\n                  type: string\n                percent_off:\n                  description: 'The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`.'\n                  example: 50\n                  type: number\n                product_type:\n                  description: 'The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`.'\n                  enum:\n                    - any\n                    - buy\n                    - buy_episode\n                    - rent\n                    - rent_episode\n                    - subscribe\n                  type: string\n                start_time:\n                  description: 'The start of the promotion period. If you don''t specify a value, the start time defaults to the time that the promotion was created.'\n                  example: '1526089920'\n                  type: string\n                stream_period:\n                  description: 'The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`.'\n                  enum:\n                    - 1_week\n                    - 1_year\n                    - 24_hour\n                    - 30_day\n                    - 3_month\n                    - 48_hour\n                    - 6_month\n                    - 72_hour\n                  type: string\n                total:\n                  description: 'The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`.'\n                  example: 9\n                  type: number\n                type:\n                  description: \"The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.\\n\\nOption descriptions:\\n * `batch` - Generates many random promo codes with one use each.\\n * `single` - Generates one promo code that can be used many times.\\n\"\n                  enum:\n                    - batch\n                    - single\n                  type: string\n              required:\n                - download\n                - stream_period\n                - total\n                - type\n      responses:\n        200:\n          description: 'The promotion was added.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-promotion'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t create promotions for an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: \"* There are errors in the request.\\n* The promo code already exists.\"\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - promo_codes\n            - create\n  '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}':\n    delete:\n      summary: 'Remove a promotion from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_promotion\n      tags:\n        - 'On Demand\\Promotions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the promotion.'\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        204:\n          description: 'The promotion was deleted.'\n        404:\n          description: 'No such On Demand page or promotion exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t delete a promotion for an On Demand page that you not own.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - promo_codes\n            - delete\n    get:\n      summary: 'Get a specific promotion on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_promotion\n      tags:\n        - 'On Demand\\Promotions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the promotion.'\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The promotion was returned.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-promotion'\n        404:\n          description: 'No such On Demand page or promotion exists.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t view a promotion for an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.promotion+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - promo_codes\n  '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes':\n    get:\n      summary: 'Get all the codes of a promotion on an On Demand page'\n      description: 'This method returns all the codes of a promotion on an On Demand page.'\n      operationId: get_vod_promotion_codes\n      tags:\n        - 'On Demand\\Promotions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the promotion.'\n          in: path\n          name: promotion_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The codes were returned.'\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-promotion-code'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t create promotions for an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.promocode+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - promo_codes\n  '/ondemand/pages/{ondemand_id}/regions':\n    delete:\n      summary: 'Remove a list of regions from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_regions\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.ondemand.region+json:\n            schema:\n              type: object\n              properties:\n                countries:\n                  description: 'An array of country codes.'\n                  items:\n                    type: string\n                  type: array\n      responses:\n        200:\n          description: 'The On Demand regions were deleted.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand page or region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get all the regions of an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_regions\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The regions were returned.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a list of regions to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: set_vod_regions\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.ondemand.region+json:\n            schema:\n              type: object\n              properties:\n                countries:\n                  description: 'An array of country codes.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - countries\n      responses:\n        200:\n          description: 'The list of regions was set.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand page or region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/regions/{country}':\n    delete:\n      summary: 'Remove a specific region from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_vod_region\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The country code.'\n          in: path\n          name: country\n          required: true\n          schema:\n            type: string\n            example: US\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        204:\n          description: 'The On Demand region was deleted.'\n        404:\n          description: 'No such On Demand page or region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific region of an On Demand page'\n      description: 'Checks whether an On Demand page belongs to a region.'\n      operationId: get_vod_region\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The country code.'\n          in: path\n          name: country\n          required: true\n          schema:\n            type: string\n            example: US\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        200:\n          description: 'The On Demand page''s region was returned.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand page or region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a specific region to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: add_vod_region\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The country code.'\n          in: path\n          name: country\n          required: true\n          schema:\n            type: string\n            example: US\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n      responses:\n        201:\n          description: 'The region was added.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand page or region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/ondemand/pages/{ondemand_id}/seasons':\n    get:\n      summary: 'Get all the seasons on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_seasons\n      tags:\n        - 'On Demand\\Seasons'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - viewable\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - date\n              - manual\n      responses:\n        200:\n          description: 'The seasons were returned.'\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-season'\n        404:\n          description: 'No such On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/ondemand/pages/{ondemand_id}/seasons/{season_id}':\n    get:\n      summary: 'Get a specific season on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_season\n      tags:\n        - 'On Demand\\Seasons'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the season.'\n          in: path\n          name: season_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The season was returned.'\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-season'\n        404:\n          description: 'No such On Demand page or season exists.'\n          content:\n            application/vnd.vimeo.ondemand.season+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos':\n    get:\n      summary: 'Get all the videos in a season on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_season_videos\n      tags:\n        - 'On Demand\\Seasons'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the season.'\n          in: path\n          name: season_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - viewable\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - date\n              - default\n              - manual\n              - name\n              - purchase_time\n              - release_date\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/ondemand/pages/{ondemand_id}/videos':\n    get:\n      summary: 'Get all the videos on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_videos\n      tags:\n        - 'On Demand\\Videos'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - all\n              - buy\n              - expiring_soon\n              - extra\n              - main\n              - main.viewable\n              - rent\n              - trailer\n              - unwatched\n              - viewable\n              - watched\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - date\n              - default\n              - episode\n              - manual\n              - name\n              - purchase_time\n              - release_date\n      responses:\n        200:\n          description: \"* The videos were returned.\\n* The videos were returned.\"\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/ondemand/pages/{ondemand_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: delete_video_from_vod\n      tags:\n        - 'On Demand\\Videos'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        204:\n          description: 'The video was deleted.'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video on an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: get_vod_video\n      tags:\n        - 'On Demand\\Videos'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      responses:\n        200:\n          description: 'The video is on the On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n    put:\n      summary: 'Add a video to an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: add_video_to_vod\n      tags:\n        - 'On Demand\\Videos'\n      parameters:\n        -\n          description: 'The ID of the On Demand.'\n          in: path\n          name: ondemand_id\n          required: true\n          schema:\n            type: number\n            example: 61326\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.ondemand.video+json:\n            schema:\n              type: object\n              properties:\n                buy:\n                  properties:\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The purchase price of this video in AUD.'\n                          example: 1.99\n                          type: number\n                        CAD:\n                          description: 'The purchase price of this video in CAD.'\n                          example: 1.99\n                          type: number\n                        CHF:\n                          description: 'The purchase price of this video in CHF.'\n                          example: 1.99\n                          type: number\n                        DKK:\n                          description: 'The purchase price of this video in DKK.'\n                          example: 1.99\n                          type: number\n                        EUR:\n                          description: 'The purchase price of this video in EUR.'\n                          example: 1.99\n                          type: number\n                        GBP:\n                          description: 'The purchase price of this video in GBP.'\n                          example: 1.99\n                          type: number\n                        JPY:\n                          description: 'The purchase price of this video in JPY.'\n                          example: 1.99\n                          type: number\n                        KRW:\n                          description: 'The purchase price of this video in KRW.'\n                          example: 1.99\n                          type: number\n                        NOK:\n                          description: 'The purchase price of this video in NOK.'\n                          example: 1.99\n                          type: number\n                        PLN:\n                          description: 'The purchase price of this video in PLN.'\n                          example: 1.99\n                          type: number\n                        SEK:\n                          description: 'The purchase price of this video in SEK.'\n                          example: 1.99\n                          type: number\n                        USD:\n                          description: 'The purchase price of this video in USD. *Required if `buy.active` is true.'\n                          example: 1.99\n                          type: number\n                      type: object\n                  type: object\n                position:\n                  description: 'The position of this video in the On Demand collection.'\n                  example: 10\n                  type: number\n                release_year:\n                  description: 'The video release year.'\n                  example: 2018\n                  type: number\n                rent:\n                  properties:\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The rental price of this video in AUD.'\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: 'The rental price of this video in CAD.'\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: 'The rental price of this video in CHF.'\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: 'The rental price of this video in DKK.'\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: 'The rental price of this video in EUR.'\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: 'The rental price of this video in GBP.'\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: 'The rental price of this video in JPY.'\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: 'The rental price of this video in KRW.'\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: 'The rental price of this video in NOK.'\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: 'The rental price of this video in PLN.'\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: 'The rental price of this video in SEK.'\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: 'The rental price of this video in USD. *Required if `rent.active` is true.'\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                type:\n                  description: 'The type of video that you are adding to the On Demand page.'\n                  enum:\n                    - extra\n                    - main\n                    - trailer\n                  type: string\n              required:\n                - type\n      responses:\n        200:\n          description: 'The video was added.'\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-video'\n        403:\n          description: 'You can''t modify an On Demand page that you don''t own.'\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'You can''t add the video to this On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  /ondemand/regions:\n    get:\n      summary: 'Get all the On Demand regions'\n      description: 'Information about this method appears below.'\n      operationId: get_regions\n      tags:\n        - 'On Demand\\Regions'\n      responses:\n        200:\n          description: 'The On Demand regions were returned.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-region'\n  '/ondemand/regions/{country}':\n    get:\n      summary: 'Get a specific On Demand region'\n      description: 'Information about this method appears below.'\n      operationId: get_region\n      tags:\n        - 'On Demand\\Regions'\n      parameters:\n        -\n          description: 'The country code.'\n          in: path\n          name: country\n          required: true\n          schema:\n            type: string\n            example: US\n      responses:\n        200:\n          description: 'The On Demand region was returned.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-region'\n        404:\n          description: 'No such On Demand region exists.'\n          content:\n            application/vnd.vimeo.ondemand.region+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/tags/{word}':\n    get:\n      summary: 'Get a specific tag'\n      description: 'This method gets a specific tag from all available tags.'\n      operationId: get_tag\n      tags:\n        - Tags\\Essentials\n      parameters:\n        -\n          description: 'The tag to return.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        200:\n          description: 'The tag was returned.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/tag'\n  '/tags/{word}/videos':\n    get:\n      summary: 'Get all the videos with a specific tag'\n      description: 'This method returns all the videos associated with the specified tag.'\n      operationId: get_videos_with_tag\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The tag word.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - created_time\n              - duration\n              - name\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such tag exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /tokens:\n    delete:\n      summary: 'Revoke the current access token'\n      description: 'This method enables an app to notify the API that it is done with a token and that the token can be discarded.'\n      operationId: delete_token\n      tags:\n        - 'Authentication Extras\\Essentials'\n      responses:\n        204:\n          description: 'The token was revoked.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/auth'\n        400:\n          description: 'You can''t revoke access for an OAuth 1 token.'\n          content:\n            application/vnd.vimeo.auth+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  /tutorial:\n    get:\n      summary: 'Get started with the Vimeo API'\n      description: \"This method, in conjunction with our [Getting Started](https://developer.vimeo.com/api/guides/start) guide, can\\nhelp you learn how to use the Vimeo API.\"\n      operationId: developer_tutorial\n      tags:\n        - Tutorial\\Essentials\n      responses: {  }\n  /users:\n    get:\n      summary: 'Search for users'\n      description: 'Information about this method appears below.'\n      operationId: search_users\n      tags:\n        - Users\\Internal\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - relevant\n              - videos\n      responses:\n        200:\n          description: 'The search results were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        503:\n          description: 'Search is disabled.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        500:\n          description: 'There was an internal search error.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/users/{user_id}':\n    get:\n      summary: 'Get a user'\n      description: 'This method returns the representation of the authenticated user.'\n      operationId: get_user\n      tags:\n        - Users\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The user''s representation was returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n    patch:\n      summary: 'Edit a user'\n      description: 'This method edits the representation of the authenticated user.'\n      operationId: edit_user\n      tags:\n        - Users\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.user+json:\n            schema:\n              type: object\n              properties:\n                bio:\n                  description: 'The user''s bio.'\n                  example: 'This is where you will find videos and news updates from the staff'\n                  type: string\n                content_filter:\n                  description: 'A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you''re using a query string or an array if you''re using JSON.'\n                  items:\n                    type: string\n                  type: array\n                link:\n                  description: 'The user''s custom Vimeo URL.'\n                  example: staff\n                  type: string\n                location:\n                  description: 'The user''s location.'\n                  example: 'New York City'\n                  type: string\n                name:\n                  description: 'The user''s display name.'\n                  example: 'Vimeo Staff'\n                  type: string\n                password:\n                  description: 'The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.'\n                  example: hunter1\n                  type: string\n                videos:\n                  properties:\n                    privacy:\n                      properties:\n                        add:\n                          description: 'Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos that this user uploads.'\n                          example: true\n                          type: boolean\n                        comments:\n                          description: 'Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.'\n                          enum:\n                            - anybody\n                            - contacts\n                            - nobody\n                          type: string\n                        download:\n                          description: 'Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.'\n                          example: true\n                          type: boolean\n                        embed:\n                          description: 'The privacy for embedded videos. The whitelist value enables you to define all valid embeddable domains. See our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for details on adding and removing domains.'\n                          enum:\n                            - private\n                            - public\n                            - whitelist\n                          type: string\n                        view:\n                          description: 'Who can view the video. This value becomes the default view setting for all future videos that this user uploads.'\n                          enum:\n                            - anybody\n                            - contacts\n                            - disable\n                            - nobody\n                            - password\n                            - unlisted\n                            - users\n                          type: string\n                      type: object\n                  type: object\n      responses:\n        200:\n          description: 'The user''s representation was edited.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n  '/users/{user_id}/albums':\n    get:\n      summary: 'Get all the albums that belong to a user'\n      description: 'This method gets all the albums from the specified user''s account.'\n      operationId: get_albums\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - duration\n              - videos\n      responses:\n        200:\n          description: 'The albums were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Create an album'\n      description: 'This method creates a new album for the specified user.'\n      operationId: create_album\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              type: object\n              properties:\n                brand_color:\n                  description: 'The hexadecimal code for the color of the player buttons.'\n                  example: ff66ee\n                  type: string\n                description:\n                  description: 'The description of the album.'\n                  example: 'Vimeo holiday videos!'\n                  type: string\n                hide_nav:\n                  description: 'Whether to hide Vimeo navigation when displaying the album.'\n                  example: true\n                  type: boolean\n                layout:\n                  description: 'The type of layout for presenting the album.'\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: 'The name of the album.'\n                  example: 'Vimeo Holiday Videos!'\n                  type: string\n                password:\n                  description: 'The album''s password. Required only if **privacy** is `password`.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: 'The privacy level of the album.'\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: 'Whether album videos should use the review mode URL.'\n                  example: true\n                  type: boolean\n                sort:\n                  description: 'The default sort order of the album''s videos.'\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: 'The color theme of the album.'\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n              required:\n                - name\n      responses:\n        201:\n          description: 'The album was created.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t create an album.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - create\n  '/users/{user_id}/albums/{album_id}':\n    delete:\n      summary: 'Delete an album'\n      description: 'This method deletes an album from the owner''s account.'\n      operationId: delete_album\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The album was deleted.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t delete the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific album'\n      description: 'This method gets a single album.'\n      operationId: get_album\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The album was returned.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit an album'\n      description: 'This method edits an album.'\n      operationId: edit_album\n      tags:\n        - Albums\\Essentials\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.album+json:\n            schema:\n              type: object\n              properties:\n                brand_color:\n                  description: 'The hexadecimal code for the color of the player buttons.'\n                  example: ff66ee\n                  type: string\n                description:\n                  description: 'The description of the album.'\n                  example: 'Vimeo holiday videos!'\n                  type: string\n                domain:\n                  description: 'The custom domain a user has selected for their album.'\n                  example: mycustomdomain.com\n                  nullable: true\n                  type: string\n                hide_nav:\n                  description: 'Whether to hide Vimeo navigation when displaying the album.'\n                  example: true\n                  type: boolean\n                layout:\n                  description: 'The type of layout for presenting the album.'\n                  enum:\n                    - grid\n                    - player\n                  type: string\n                name:\n                  description: 'The name of the album.'\n                  example: 'Vimeo Holiday Videos!'\n                  type: string\n                password:\n                  description: 'The album''s password. Required only if **privacy** is `password`.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  description: 'The privacy level of the album.'\n                  enum:\n                    - anybody\n                    - embed_only\n                    - password\n                  type: string\n                review_mode:\n                  description: 'Whether album videos should use the review mode URL.'\n                  example: true\n                  type: boolean\n                sort:\n                  description: 'The default sort order of the album''s videos.'\n                  enum:\n                    - added_first\n                    - added_last\n                    - alphabetical\n                    - arranged\n                    - comments\n                    - likes\n                    - newest\n                    - oldest\n                    - plays\n                  type: string\n                theme:\n                  description: 'The color theme of the album.'\n                  enum:\n                    - dark\n                    - standard\n                  type: string\n                url:\n                  description: 'The custom Vimeo URL a user has selected for their album.'\n                  example: my-custom-url\n                  nullable: true\n                  type: string\n                use_custom_domain:\n                  description: 'Whether the user has opted in to use a custom domain for their album.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The album was edited.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/album'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the album, the supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/albums/{album_id}/custom_thumbnails':\n    get:\n      summary: 'Get all the custom upload thumbnails of an album'\n      description: 'This method gets all the custom uploaded thumbnails from the specified album.'\n      operationId: get_album_custom_thumbs\n      tags:\n        - 'Albums\\Custom album thumbnails'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The custom uploaded thumbnails were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'Error code 3200: The authenticated user cannot access uploaded thumbnails for the specified album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      summary: 'Add a custom uploaded thumbnail'\n      description: \"This method adds an image file as a custom thumbnail to the specified album. For information on how to upload the thumbnail, see our\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.\"\n      operationId: create_album_custom_thumb\n      tags:\n        - 'Albums\\Custom album thumbnails'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        201:\n          description: 'The custom thumbnail was added to the album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}':\n    delete:\n      summary: 'Remove a custom uploaded album thumbnail'\n      description: 'This method removes a custom uploaded thumbnail from the specified album.'\n      operationId: delete_album_custom_thumbnail\n      tags:\n        - 'Albums\\Custom album thumbnails'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom thumbnail.'\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The custom thumbnail was removed.'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom thumbnail.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific custom uploaded album thumbnail'\n      description: 'This method returns all the videos associated with the specified tag.'\n      operationId: get_album_custom_thumbnail\n      tags:\n        - 'Albums\\Custom album thumbnails'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom thumbnail.'\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The custom thumbnail was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom thumbnail.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t view this custom thumbnail.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Replace a custom uploaded album thumbnail'\n      description: \"This method replaces the specified custom uploaded album thumbnail with a new image file. For information on how to upload the thumbnail, see our\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.\"\n      operationId: replace_album_custom_thumb\n      tags:\n        - 'Albums\\Custom album thumbnails'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom thumbnail.'\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether to make this the active album thumbnail.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The custom thumbnail was replaced.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom thumbnail.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/albums/{album_id}/logos':\n    get:\n      summary: 'Get all the custom logos of an album'\n      description: 'This method gets all the custom logos from the specified album.'\n      operationId: get_album_logos\n      tags:\n        - 'Albums\\Custom album logos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The custom logos were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a custom album logo'\n      description: \"This method adds an image file as a custom logo to the specified album. For information on how to upload the logo, see our\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.\"\n      operationId: create_album_logo\n      tags:\n        - 'Albums\\Custom album logos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        201:\n          description: 'The logo was added to the album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/albums/{album_id}/logos/{logo_id}':\n    delete:\n      summary: 'Remove a custom album logo'\n      description: 'This method removes a custom logo from the specified album.'\n      operationId: delete_album_logo\n      tags:\n        - 'Albums\\Custom album logos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom logo.'\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The custom logo was removed.'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom logo.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific custom album logo'\n      description: 'This method gets a single custom logo from the specified album.'\n      operationId: get_album_logo\n      tags:\n        - 'Albums\\Custom album logos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom logo.'\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The custom logo was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom logo.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t view this custom logo.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Replace a custom album logo'\n      description: \"This method replaces the specified custom album logo with a new image file. For information on how to upload the logo, see our\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.\"\n      operationId: replace_album_logo\n      tags:\n        - 'Albums\\Custom album logos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the custom logo.'\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether to make this the active album logo.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The custom logo was replaced.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such album exists, or it doesn''t contain the specified custom logo.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t modify this album.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/albums/{album_id}/videos':\n    get:\n      summary: 'Get all the videos in an album'\n      description: 'This method gets all the videos from the specified album.'\n      operationId: get_album_videos\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page containing the video URI.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The password of the album.'\n          in: query\n          name: password\n          required: false\n          schema:\n            type: string\n            example: hunter1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - likes\n              - manual\n              - modified_time\n              - plays\n        -\n          description: 'Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video''s name.'\n          in: query\n          name: weak_search\n          required: false\n          schema:\n            type: boolean\n            example: false\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Replace all the videos in an album'\n      description: 'This method replaces all the existing videos in an album with one or more videos.'\n      operationId: replace_videos_in_album\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videos:\n                  description: 'A comma-separated list of video URIs.'\n                  example: '/videos/258684937,/videos/273576296'\n                  type: string\n              required:\n                - videos\n      responses:\n        201:\n          description: 'The videos were added.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t add videos to albums.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/albums/{album_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from an album'\n      description: 'This method removes a video from the specified album.'\n      operationId: remove_video_from_album\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      responses:\n        204:\n          description: 'The video was removed.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in an album'\n      description: 'This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.'\n      operationId: get_album_video\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 3706071\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n        -\n          description: 'The password of the album.'\n          in: query\n          name: password\n          required: false\n          schema:\n            type: string\n            example: hunter1\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such album exists, or the video wasn''t found in it.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a specific video to an album'\n      description: 'This method adds a single video to the specified album.'\n      operationId: add_video_to_album\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'No such album exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The supplied token doesn''t have the proper scopes, or the authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail':\n    post:\n      summary: 'Set a video as the album thumbnail'\n      description: 'Information about this method appears below.'\n      operationId: set_video_as_album_thumbnail\n      tags:\n        - 'Albums\\Album videos'\n      parameters:\n        -\n          description: 'The ID of the album.'\n          in: path\n          name: album_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 196367152\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                time_code:\n                  description: 'The video frame time in seconds to use as the album thumbnail.'\n                  example: 300\n                  type: number\n      responses:\n        200:\n          description: 'The album was updated with a new thumbnail.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/album'\n        404:\n          description: 'Error code 5000: No such album, or user, or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3429: The authenticated user can''t edit the album.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4016: Unexpected error while setting thumbnail.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/appearances':\n    get:\n      summary: 'Get all the videos in which a user appears'\n      description: 'This method returns all the videos in which the authenticated user has a credited appearance.'\n      operationId: get_appearances\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/users/{user_id}/categories':\n    get:\n      summary: 'Get all the categories that a user follows'\n      description: 'This method gets all the categories to which a particular user has subscribed.'\n      operationId: get_category_subscriptions\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - name\n      responses:\n        200:\n          description: 'The categories were returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/category'\n        403:\n          description: 'Error code 3200: You can''t view another user.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n  '/users/{user_id}/categories/{category}':\n    delete:\n      summary: 'Unsubscribe a user from a category'\n      description: 'This method unsubscribes the current user from a specified category.'\n      operationId: unsubscribe_from_category\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user was unsubscribed.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user follows a category'\n      description: 'This method determines whether a particular user is subscribed to the specified category.'\n      operationId: check_if_user_subscribed_to_category\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: string\n            example: animation\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user is following the category.'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Subscribe a user to a single category'\n      description: 'This method subscribes the current user to a specified category.'\n      operationId: subscribe_to_category\n      tags:\n        - Categories\\Subscriptions\n      parameters:\n        -\n          description: 'The name of the category.'\n          in: path\n          name: category\n          required: true\n          schema:\n            type: number\n            example: 0\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user was subscribed.'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/channels':\n    get:\n      summary: 'Get all the channels to which a user subscribes'\n      description: 'This method gets all the channels to which the specified user subscribes.'\n      operationId: get_channel_subscriptions\n      tags:\n        - Channels\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - moderated\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - followers\n              - videos\n      responses:\n        304:\n          description: 'No channel has been followed since the given `If-Modified-Since` header.'\n        200:\n          description: 'The channels were returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channel'\n  '/users/{user_id}/channels/{channel_id}':\n    delete:\n      summary: 'Unsubscribe a user from a specific channel'\n      description: 'This method causes a user to stop following the channel in question.'\n      operationId: unsubscribe_from_channel\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user is no longer a follower of the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user follows a channel'\n      description: 'This method determines whether a specific user is a follower of the channel in question.'\n      operationId: check_if_user_subscribed_to_channel\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user follows the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Subscribe a user to a specific channel'\n      description: 'This method causes a user to become the follower of the channel in question.'\n      operationId: subscribe_to_channel\n      tags:\n        - 'Channels\\Subscriptions and subscribers'\n      parameters:\n        -\n          description: 'The ID of the channel.'\n          in: path\n          name: channel_id\n          required: true\n          schema:\n            type: number\n            example: 927\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user is now a follower of the channel.'\n        404:\n          description: 'No such channel exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/customlogos':\n    get:\n      summary: 'Get all the custom logos that belong to a user'\n      description: 'This method returns all the custom logos that belong to the specified user.'\n      operationId: get_custom_logos\n      tags:\n        - 'Embed Presets\\Custom logos'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The custom logos were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n        403:\n          description: \"* The authenticated user can't view this particular custom logo.\\n* The authenticated user can't view custom logos in general.\"\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a custom logo'\n      description: 'This method adds a custom logo to the specified user''s account.'\n      operationId: create_custom_logo\n      tags:\n        - 'Embed Presets\\Custom logos'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        201:\n          description: 'The custom logo was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: \"* The authenticated user can't upload pictures to another user's video.\\n* The authenticated user can't add a custom logo.\"\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/customlogos/{logo_id}':\n    get:\n      summary: 'Get a specific custom logo'\n      description: 'This method returns a single custom logo belonging to the specified user.'\n      operationId: get_custom_logo\n      tags:\n        - 'Embed Presets\\Custom logos'\n      parameters:\n        -\n          description: 'The ID of the custom logo.'\n          in: path\n          name: logo_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The custom logo was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: 'The authenticated user can''t view custom logos.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/users/{user_id}/feed':\n    get:\n      summary: 'Get all the videos in a user''s feed'\n      description: 'This method returns all the videos in the authenticated user''s feed.'\n      operationId: get_feed\n      tags:\n        - Users\\Feeds\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).'\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: string\n            example: '280'\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The feed type.'\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n            enum:\n              - appears\n              - category_featured\n              - channel\n              - facebook_feed\n              - following\n              - group\n              - likes\n              - ondemand_publish\n              - share\n              - tagged_with\n              - twitter_timeline\n              - uploads\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.activity+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/activity-3-1'\n      security:\n        -\n          oauth2:\n            - private\n  '/users/{user_id}/followers':\n    get:\n      summary: 'Get all the followers of a user'\n      description: 'This method returns all the followers of the authenticated user.'\n      operationId: get_followers\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The user''s followers were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n  '/users/{user_id}/following':\n    get:\n      summary: 'Get all the users that a user is following'\n      description: 'This method returns all users that the authenticated user is following.'\n      operationId: get_user_following\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - online\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The followed users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n    post:\n      summary: 'Follow a list of users'\n      description: \"This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as\\nan array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:\\n\\n```\\n{\\n [\\n     {\\\"uri\\\" : \\\"/users/{user01_id}\\\"},\\n     {\\\"uri\\\" : \\\"/users/{user02_id}\\\"},\\n     {\\\"uri\\\" : \\\"/users/{user03_id}\\\"}\\n ]\\n}\\n```\"\n      operationId: follow_users\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                users:\n                  description: 'An array of user IDs for the authenticated user to follow.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - users\n      responses:\n        204:\n          description: 'The users were followed.'\n        401:\n          description: 'Error code 8000: The user access token is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3417: The authenticated user can''t follow other users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The request body is empty, the users array is invalid, or the list of users doesn't contain URIs.\\n* Error code 2900: A user in the list doesn't exist.\\n* Error code 2901: The list contains more than 100 users.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4005: An unexpected error occurred.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        429:\n          description: 'Error code 9006: The authenticated user is rate-limited from following other users.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/following/{follow_user_id}':\n    delete:\n      summary: 'Unfollow a user'\n      description: 'This method causes the authenticated user to stop following another user.'\n      operationId: unfollow_user\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to unfollow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user was unfollowed.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user is following another user'\n      description: 'This method determines whether the authenticated user is a follower of the user in question.'\n      operationId: check_if_user_is_following\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to follow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The authenticated user follows the user in question.'\n        404:\n          description: 'The authenticated user doesn''t follow the user in question.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Follow a specific user'\n      description: 'This method causes the authenticated user to become the follower of another user.'\n      operationId: follow_user\n      tags:\n        - Users\\Followers\n      parameters:\n        -\n          description: 'The ID of the user to follow.'\n          in: path\n          name: follow_user_id\n          required: true\n          schema:\n            type: number\n            example: 3766357\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user was followed.'\n        403:\n          description: 'The authenticated user can''t add followers.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/groups':\n    get:\n      summary: 'Get all the groups that a user has joined'\n      description: 'This method returns all the groups to which a particular user belongs.'\n      operationId: get_user_groups\n      tags:\n        - Groups\\Users\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - moderated\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - members\n              - videos\n      responses:\n        200:\n          description: 'The groups were returned.'\n          content:\n            application/vnd.vimeo.group+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/group'\n  '/users/{user_id}/groups/{group_id}':\n    delete:\n      summary: 'Remove a user from a group'\n      description: 'This method removes a single user from the specified group.'\n      operationId: leave_group\n      tags:\n        - Groups\\Subscriptions\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user left the group.'\n        403:\n          description: 'The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    put:\n      summary: 'Add a user to a group'\n      description: 'This method adds a single user to the specified group.'\n      operationId: join_group\n      tags:\n        - Groups\\Subscriptions\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user joined the group.'\n        403:\n          description: \"* The authenticated user can't join groups.\\n* The group prohibits the authenticated user from joining, either because the group is not public or because the group's privacy setting is `members`.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has joined a group'\n      description: 'This method determines whether a particular user belongs to the specified group.'\n      operationId: check_if_user_joined_group\n      tags:\n        - Groups\\Users\n      parameters:\n        -\n          description: 'The ID of the group.'\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: number\n            example: 1108\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The user belongs to the group.'\n        404:\n          description: \"* No such group exists.\\n* The authenticated user isn't a member of this group.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/users/{user_id}/likes':\n    get:\n      summary: 'Get all the videos that a user has liked'\n      description: 'This method gets all the videos that the specified user has liked.'\n      operationId: get_likes\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/users/{user_id}/likes/{video_id}':\n    delete:\n      summary: 'Cause a user to unlike a video'\n      description: 'This method causes the specified user to unlike a video that they previously liked.'\n      operationId: unlike_video\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was unliked.'\n        403:\n          description: 'The authenticated user can''t like videos.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has liked a video'\n      description: 'This method checks if the specified user has liked a particular video.'\n      operationId: check_if_user_liked_video\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The user has liked the video.'\n        404:\n          description: 'The user hasn''t liked the video.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Cause a user to like a video'\n      description: 'This method checks if the specified user has liked a particular video.'\n      operationId: like_video\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was liked.'\n        403:\n          description: 'The authenticated user can''t like videos.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The authenticated user owns the video.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/ondemand/pages':\n    get:\n      summary: 'Get all the On Demand pages of a user'\n      description: 'Information about this method appears below.'\n      operationId: get_user_vods\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The type of On Demand pages to return.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - film\n              - series\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - added\n              - alphabetical\n              - date\n              - modified_time\n              - name\n              - publish.time\n              - rating\n      responses:\n        200:\n          description: 'The On Demand pages were returned.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such user exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Create an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: create_vod\n      tags:\n        - 'On Demand\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                accepted_currencies:\n                  description: \"An array of accepted currencies.\\n\\nOption descriptions:\\n * `AUD` - Australian Dollar\\n * `CAD` - Canadian Dollar\\n * `CHF` - Swiss Franc\\n * `DKK` - Danish Krone\\n * `EUR` - Euro\\n * `GBP` - British Pound\\n * `JPY` - Japanese Yen\\n * `KRW` - South Korean Won\\n * `NOK` - Norwegian Krone\\n * `PLN` - Polish Zloty\\n * `SEK` - Swedish Krona\\n * `USD` - US Dollar\\n\"\n                  enum:\n                    - AUD\n                    - CAD\n                    - CHF\n                    - DKK\n                    - EUR\n                    - GBP\n                    - JPY\n                    - KRW\n                    - NOK\n                    - PLN\n                    - SEK\n                    - USD\n                  type: string\n                buy:\n                  properties:\n                    active:\n                      description: 'Whether the Buy action is active. *Required if `rent.active` is false.'\n                      example: true\n                      type: boolean\n                    download:\n                      description: 'Whether people who buy the video can download it. To use this field, `type` must be `film`.'\n                      example: true\n                      type: boolean\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The purchase price of this video in AUD.'\n                          example: 2.99\n                          type: number\n                        CAD:\n                          description: 'The purchase price of this video in CAD.'\n                          example: 2.99\n                          type: number\n                        CHF:\n                          description: 'The purchase price of this video in CHF.'\n                          example: 2.99\n                          type: number\n                        DKK:\n                          description: 'The purchase price of this video in DKK.'\n                          example: 2.99\n                          type: number\n                        EUR:\n                          description: 'The purchase price of this video in EUR.'\n                          example: 2.99\n                          type: number\n                        GBP:\n                          description: 'The purchase price of this video in GBP.'\n                          example: 2.99\n                          type: number\n                        JPY:\n                          description: 'The purchase price of this video in JPY.'\n                          example: 2.99\n                          type: number\n                        KRW:\n                          description: 'The purchase price of this video in KRW.'\n                          example: 2.99\n                          type: number\n                        NOK:\n                          description: 'The purchase price of this video in NOK.'\n                          example: 2.99\n                          type: number\n                        PLN:\n                          description: 'The purchase price of this video in PLN.'\n                          example: 2.99\n                          type: number\n                        SEK:\n                          description: 'The purchase price of this video in SEK.'\n                          example: 2.99\n                          type: number\n                        USD:\n                          description: 'The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.'\n                          example: 2.99\n                          type: number\n                      type: object\n                  type: object\n                content_rating:\n                  description: 'One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.'\n                  enum:\n                    - drugs\n                    - language\n                    - nudity\n                    - safe\n                    - unrated\n                    - violence\n                  type: string\n                description:\n                  description: 'The description of the On Demand page.'\n                  example: 'DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins \u0026 Notions\".'\n                  type: string\n                domain_link:\n                  description: 'The custom domain of the On Demand page.'\n                  example: 'https://example.com'\n                  type: string\n                episodes:\n                  properties:\n                    buy:\n                      properties:\n                        active:\n                          description: 'Whether episodes can be bought.'\n                          example: true\n                          type: boolean\n                        download:\n                          description: 'Whether people who buy the episode can download it. To use this field, `type` must be `series`.'\n                          example: true\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: 'The purchase price per episode. *Required if `episodes.buy.active` is true.'\n                              example: 1.99\n                              type: number\n                          type: object\n                      type: object\n                    rent:\n                      properties:\n                        active:\n                          description: 'Whether episodes can be rented'\n                          example: true\n                          type: boolean\n                        period:\n                          description: 'The period in which this episode can be rented for.'\n                          enum:\n                            - '1 week'\n                            - '1 year'\n                            - '24 hour'\n                            - '3 month'\n                            - '30 day'\n                            - '48 hour'\n                            - '6 month'\n                            - '72 hour'\n                          type: string\n                        price:\n                          properties:\n                            USD:\n                              description: 'The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.'\n                              example: 0.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                link:\n                  description: 'The custom string to use in this On Demand page''s Vimeo URL.'\n                  example: darbyforever\n                  type: string\n                name:\n                  description: 'The name of the On Demand page.'\n                  example: 'Darby Forever'\n                  type: string\n                rent:\n                  properties:\n                    active:\n                      description: 'Whether the video can be rented. *Required if `buy.active` is false.'\n                      example: true\n                      type: boolean\n                    period:\n                      description: 'The period in which this can be rented for.'\n                      enum:\n                        - '1 week'\n                        - '1 year'\n                        - '24 hour'\n                        - '3 month'\n                        - '30 day'\n                        - '48 hour'\n                        - '6 month'\n                        - '72 hour'\n                      type: string\n                    price:\n                      properties:\n                        AUD:\n                          description: 'The rental price of this video in AUD.'\n                          example: 0.99\n                          type: number\n                        CAD:\n                          description: 'The rental price of this video in CAD.'\n                          example: 0.99\n                          type: number\n                        CHF:\n                          description: 'The rental price of this video in CHF.'\n                          example: 0.99\n                          type: number\n                        DKK:\n                          description: 'The rental price of this video in DKK.'\n                          example: 0.99\n                          type: number\n                        EUR:\n                          description: 'The rental price of this video in EUR.'\n                          example: 0.99\n                          type: number\n                        GBP:\n                          description: 'The rental price of this video in GBP.'\n                          example: 0.99\n                          type: number\n                        JPY:\n                          description: 'The rental price of this video in JPY.'\n                          example: 0.99\n                          type: number\n                        KRW:\n                          description: 'The rental price of this video in KRW.'\n                          example: 0.99\n                          type: number\n                        NOK:\n                          description: 'The rental price of this video in NOK.'\n                          example: 0.99\n                          type: number\n                        PLN:\n                          description: 'The rental price of this video in PLN.'\n                          example: 0.99\n                          type: number\n                        SEK:\n                          description: 'The rental price of this video in SEK.'\n                          example: 0.99\n                          type: number\n                        USD:\n                          description: 'The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.'\n                          example: 0.99\n                          type: number\n                      type: object\n                  type: object\n                subscription:\n                  properties:\n                    monthly:\n                      properties:\n                        active:\n                          description: 'Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.'\n                          example: true\n                          type: boolean\n                        price:\n                          properties:\n                            USD:\n                              description: 'The monthly subscription price in USD. *Required if `subscription.active` is true.'\n                              example: 9.99\n                              type: number\n                          type: object\n                      type: object\n                  type: object\n                type:\n                  description: 'The type of On Demand page.'\n                  enum:\n                    - film\n                    - series\n                  type: string\n              required:\n                - content_rating\n                - description\n                - name\n                - type\n      responses:\n        201:\n          description: 'The On Demand page was created.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n  '/users/{user_id}/ondemand/purchases':\n    get:\n      summary: 'Check if a user has made a purchase or rental from an On Demand page'\n      description: 'Information about this method appears below.'\n      operationId: check_if_vod_was_purchased\n      tags:\n        - 'On Demand\\Purchases and Rentals'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'You have purchased the On Demand page.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/on-demand-page'\n        404:\n          description: 'No such user or On Demand page exists.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The requested user isn''t the same as the authenticated user.'\n          content:\n            application/vnd.vimeo.ondemand.page+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - purchased\n  '/users/{user_id}/pictures':\n    get:\n      summary: 'Get all the pictures that belong to a user'\n      description: 'This method returns all the portrait images belonging to the authenticated user.'\n      operationId: get_pictures\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The portrait images were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n    post:\n      summary: 'Add a user picture'\n      description: \"This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive\\nfrom the **link** field in the response. For step-by-step instructions, see\\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).\"\n      operationId: create_picture\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The portrait image was added.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/pictures/{portraitset_id}':\n    delete:\n      summary: 'Delete a user picture'\n      description: 'This method removes a portrait image from the authenticated user''s Vimeo account.'\n      operationId: delete_picture\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        204:\n          description: 'The portrait image was removed.'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific user picture'\n      description: 'This method returns a single portrait image belonging to the authenticated user.'\n      operationId: get_picture\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The portrait image was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n    patch:\n      summary: 'Edit a user picture'\n      description: 'This method edits a portrait image belonging to the authenticated user.'\n      operationId: edit_picture\n      tags:\n        - Users\\Pictures\n      parameters:\n        -\n          description: 'The ID of the picture.'\n          in: path\n          name: portraitset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the picture is the authenticated user''s active portrait.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The portrait image was edited.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/portfolios':\n    get:\n      summary: 'Get all the portfolios that belong to a user'\n      description: 'This method gets all the specified user''s portfolios.'\n      operationId: get_portfolios\n      tags:\n        - Portfolios\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The portfolios were returned.'\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/portfolio'\n  '/users/{user_id}/portfolios/{portfolio_id}':\n    get:\n      summary: 'Get a specific portfolio'\n      description: 'This method gets a single portfolio from the specified user.'\n      operationId: get_portfolio\n      tags:\n        - Portfolios\\Essentials\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The portfolio was returned.'\n          content:\n            application/vnd.vimeo.portfolio+json:\n              schema:\n                $ref: '#/components/schemas/portfolio'\n  '/users/{user_id}/portfolios/{portfolio_id}/videos':\n    get:\n      summary: 'Get all the videos in a portfolio'\n      description: 'This method gets all the videos from the specified portfolio.'\n      operationId: get_portfolio_videos\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page that contains the video URI.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: \"The way to sort the results.\\n\\nOption descriptions:\\n * `default` - This will sort to the default sort set on the portfolio.\\n\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - likes\n              - manual\n              - plays\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a video from a portfolio'\n      description: 'This method removes a video from the specified portfolio.'\n      operationId: delete_video_from_portfolio\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n        404:\n          description: 'The portfolio wasn''t found, or the video wasn''t found.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video in a portfolio'\n      description: 'This method gets a single video from the specified portfolio.'\n      operationId: get_portfolio_video\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n    put:\n      summary: 'Add a video to a portfolio'\n      description: 'This method adds a video to the specified portfolio.'\n      operationId: add_video_to_portfolio\n      tags:\n        - Portfolios\\Videos\n      parameters:\n        -\n          description: 'The ID of the portfolio.'\n          in: path\n          name: portfolio_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'The portfolio wasn''t found, or the video wasn''t found.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/presets':\n    get:\n      summary: 'Get all the embed presets that a user has created'\n      description: 'This method returns all the embed presets that belong to the specified user.'\n      operationId: get_embed_presets\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The embed presets were returned.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/presets'\n  '/users/{user_id}/presets/{preset_id}':\n    get:\n      summary: 'Get a specific embed preset'\n      description: 'This method returns a single embed preset that belongs to the specified user.'\n      operationId: get_embed_preset\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The embed preset was returned.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/presets'\n    patch:\n      summary: 'Edit an embed preset'\n      description: 'This method edits an embed present belonging to the specified user.'\n      operationId: edit_embed_preset\n      tags:\n        - 'Embed Presets\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.preset+json:\n            schema:\n              type: object\n              properties:\n                outro:\n                  description: 'Disable the outro.'\n                  enum:\n                    - nothing\n                  type: string\n      responses:\n        200:\n          description: 'The embed preset was edited.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/presets'\n        404:\n          description: \"* The preset doesn't exist.\\n* The authenticated user doesn't own the preset.\"\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'The outro type is invalid.'\n          content:\n            application/vnd.vimeo.preset+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/users/{user_id}/presets/{preset_id}/videos':\n    get:\n      summary: 'Get all the videos that have been added to an embed preset'\n      description: 'This method returns all the videos that make use of the specified embed preset.'\n      operationId: get_embed_preset_videos\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the embed preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n  '/users/{user_id}/projects':\n    get:\n      summary: 'Get all the projects that belong to a user'\n      description: 'This method gets all the projects that belong to the specified user.'\n      operationId: get_projects\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - date\n              - default\n              - modified_time\n              - name\n      responses:\n        200:\n          description: 'The projects were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/project'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    post:\n      summary: 'Create a project'\n      description: 'This method creates a new project for the specified user.'\n      operationId: create_project\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the project.'\n                  example: 'Rough cuts'\n                  type: string\n              required:\n                - name\n      responses:\n        201:\n          description: 'The project was created.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The input is empty.\\n* Error code 2204: The input is invalid.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t create projects.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - create\n  '/users/{user_id}/projects/{project_id}':\n    delete:\n      summary: 'Delete a project'\n      description: 'This method deletes a project and optionally also the videos that it contains.'\n      operationId: delete_project\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'Whether to delete all the videos in the project along with the project itself.'\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            type: boolean\n            example: true\n      responses:\n        204:\n          description: 'The project was deleted.'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t delete the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific project'\n      description: 'This method gets a single project that belongs to the specified user.'\n      operationId: get_project\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The project was returned.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    patch:\n      summary: 'Edit a project'\n      description: 'This method edits an existing project.'\n      operationId: edit_project\n      tags:\n        - Projects\\Essentials\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the project.'\n                  example: 'Rough cuts'\n                  type: string\n              required:\n                - name\n      responses:\n        200:\n          description: 'The project was edited.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/project'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2204: The input is invalid.\\n* Error code 2205: The input is empty.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3200: The authenticated user can''t edit the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/users/{user_id}/projects/{project_id}/videos':\n    delete:\n      summary: 'Remove a list of videos from a project'\n      description: 'This method removed multiple videos from the specified project.'\n      operationId: remove_videos_from_project\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'Whether to delete the videos when removing them from the project.'\n          in: query\n          name: should_delete_clips\n          required: false\n          schema:\n            type: boolean\n            example: false\n        -\n          description: 'A comma-separated list of the video URIs to remove.'\n          in: query\n          name: uris\n          required: true\n          schema:\n            type: string\n            example: '/videos/258684937,/videos/273576296'\n      responses:\n        204:\n          description: 'The videos were removed.'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Get all the videos in a project'\n      description: 'This method gets all the videos that belong to the specified project.'\n      operationId: get_project_videos\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n      responses:\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        404:\n          description: 'Error code 5000: No such project exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Add a list of videos to a project'\n      description: 'This method adds multiple videos to the specified project.'\n      operationId: add_videos_to_project\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'A comma-separated list of video URIs to add.'\n          in: query\n          name: uris\n          required: true\n          schema:\n            type: string\n            example: '/videos/258684937,/videos/273576296'\n      responses:\n        204:\n          description: 'The videos were added.'\n        404:\n          description: 'Error code 5000: No such project or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/projects/{project_id}/videos/{video_id}':\n    delete:\n      summary: 'Remove a specific video from a project'\n      description: 'This method removes a single video from the specified project.'\n      operationId: remove_video_from_project\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was removed.'\n        404:\n          description: 'Error code 5000: No such video exists in the project.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8000: The user credentials are invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2204: The input is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    put:\n      summary: 'Add a specific video to a project'\n      description: 'This method adds a single video to the specified project.'\n      operationId: add_video_to_project\n      tags:\n        - Projects\\Videos\n      parameters:\n        -\n          description: 'The ID of the project.'\n          in: path\n          name: project_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n        404:\n          description: 'Error code 5000: No such user, project, or video exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/users/{user_id}/uploads/{upload_id}':\n    delete:\n      summary: 'Complete a user''s streaming upload'\n      description: 'This method returns all the embed presets that belong to the specified user.'\n      operationId: complete_streaming_upload\n      tags:\n        - Videos\\Uploads\n      parameters:\n        -\n          description: 'The ID of the upload attempt.'\n          in: path\n          name: upload_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The crypto signature of the completed upload.'\n          in: query\n          name: signature\n          required: true\n          schema:\n            type: string\n            example: cd89a20adde7a608f3331e71c37bdfa087bacbf3\n        -\n          description: 'The ID of the uploaded file.'\n          in: query\n          name: video_file_id\n          required: true\n          schema:\n            type: number\n            example: 1234\n      responses:\n        201:\n          description: 'The streaming upload is complete.'\n        404:\n          description: \"* Error code 5006: No such video file exists.\\n* Error code 5007: No such signature exists.\\n* Error code 8400: The signature is invalid.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: 'Error code 2502: The format of the video file is invalid.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4011: The upload server returned an HTTP status code other than 200.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - upload\n    get:\n      summary: 'Get a user''s upload attempt'\n      description: 'This method returns all the embed presets that belong to the specified user.'\n      operationId: get_upload_attempt\n      tags:\n        - Videos\\Uploads\n      parameters:\n        -\n          description: 'The ID of the upload attempt.'\n          in: path\n          name: upload_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      responses:\n        200:\n          description: 'The upload attempt was returned.'\n          content:\n            application/vnd.vimeo.uploadattempt+json:\n              schema:\n                $ref: '#/components/schemas/upload-attempt'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/videos':\n    get:\n      summary: 'Get all the videos that a user has uploaded'\n      description: 'This method returns all the videos that the authenticated user has uploaded.'\n      operationId: get_videos\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The page that contains the video URI. Available only when not paired with **query**.'\n          in: query\n          name: containing_uri\n          required: false\n          schema:\n            type: string\n            example: /videos/258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - app_only\n              - embeddable\n              - featured\n              - playable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).'\n          in: query\n          name: filter_playable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - default\n              - duration\n              - last_user_action_event_date\n              - likes\n              - modified_time\n              - plays\n      responses:\n        304:\n          description: 'The authenticated user hasn''t created any videos since the given **If-Modified-Since** header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n    post:\n      summary: 'Upload a video'\n      description: \"This method begins the video upload process for the authenticated user. For more information, see our\\n[upload documentation](https://developer.vimeo.com/api/upload/videos).\"\n      operationId: upload_video\n      tags:\n        - Videos\\Uploads\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              type: object\n              properties:\n                content_rating:\n                  description: 'A list of values describing the content in this video. Find the full list in the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.'\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: 'The description of the video.'\n                  example: 'A celebration of 10 years of Staff Picks.'\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: 'Whether to show the embed button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        fullscreen:\n                          description: 'Whether to show the fullscreen button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        hd:\n                          description: 'Whether to show the HD button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        like:\n                          description: 'Show or hide the Like button.'\n                          example: true\n                          type: boolean\n                        scaling:\n                          description: 'Whether to show the scaling button on the embeddable player in fullscreen mode.'\n                          example: true\n                          type: boolean\n                        share:\n                          description: 'Whether to show the share button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        watchlater:\n                          description: 'Whether to show the watch later button on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    color:\n                      description: 'The main color of the embeddable player.'\n                      example: '#1ab7ea'\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: 'Whether to show the active custom logo on the embeddable player.'\n                              example: true\n                              type: boolean\n                            link:\n                              description: 'The URL that loads when the user clicks the custom logo.'\n                              example: 'https://example.com'\n                              type: string\n                            sticky:\n                              description: 'Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).'\n                              example: true\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: 'Whether to show the Vimeo logo on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: 'Whether to show the playbar on the embeddable player.'\n                      example: true\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: \"How to handle the video title in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the video title.\\n * `show` - Show the video title.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: \"How to handle the owner information in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the owner info.\\n * `show` - Show the owner info.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: \"How to handle the owner portrait in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the portrait.\\n * `show` - Show the portrait.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: 'Whether to show the volume selector on the embeddable player.'\n                      example: true\n                      type: boolean\n                  type: object\n                license:\n                  description: 'The Creative Commons license under which the video is offered.'\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: 'The video''s default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en_US\n                  type: string\n                name:\n                  description: 'The title of the video.'\n                  example: 'Celebrating 10 Years of Staff Picks'\n                  type: string\n                password:\n                  description: 'The password. When you set **privacy.view** to `password`, you must provide the password as an additional parameter.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: 'Whether a user can add the video to an album, channel, or group.'\n                      example: true\n                      type: boolean\n                    comments:\n                      description: 'The privacy level required to comment on the video.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: 'Whether a user can download the video. Not available to Vimeo Basic members.'\n                      example: true\n                      type: boolean\n                    embed:\n                      description: 'The video''s embed setting. Specify the `whitelist` value if you want to provide a list of all valid embed domains; see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for more information.'\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: 'The video''s privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, Vimeo Basic members can''t set this value to `disable` or `unlisted`.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: 'Whether to enable video review.'\n                      example: true\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: 'An array representing the 360 director timeline.'\n                      items:\n                        type: object\n                        properties:\n                          pitch:\n                            description: 'The 360 director timeline pitch. This value must be between −90 and 90. Required only when **spatial.director_timeline** is defined.'\n                            example: 70\n                            type: number\n                          roll:\n                            description: 'The 360 director timeline roll.'\n                            type: number\n                          time_code:\n                            description: 'The 360 director timeline time code. Required only when **spatial.director_timeline** is defined.'\n                            example: 5\n                            type: number\n                          yaw:\n                            description: 'The 360 director timeline yaw. This value must be between 0 and 360. Required only when **spatial.director_timeline** is defined.'\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                      type: array\n                    field_of_view:\n                      description: 'The 360 field of view. This value must be between 30 and 90. The default is 50.'\n                      example: 50\n                      type: number\n                    projection:\n                      description: 'The 360 spatial projection.'\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: 'The 360 spatial stereo format.'\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n                upload:\n                  properties:\n                    approach:\n                      description: 'The upload approach.'\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: 'The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.'\n                      example: 'https://example.com/video.mp4'\n                      type: string\n                    redirect_url:\n                      description: 'The app''s redirect URL. Use this parameter when `approach` is `post`.'\n                      example: 'https://example.com'\n                      type: string\n                    size:\n                      description: 'The size in bytes of the video to upload.'\n                      example: '13623861'\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - upload\n      responses:\n        201:\n          description: 'The upload procedure has begun.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        401:\n          description: 'Error code 8002: No user is associated with the access token.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 4102: The authenticated user's allotted quota has been reached.\\n* Error code 4101: The authenticated user's maximum disk space has been reached.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        400:\n          description: \"* Error code 2205: The body of the request isn't formatted properly.\\n* Error code 2204: The request contains invalid body parameters.\\n* Error code 2230: The upload type is invalid.\\n* Error code 3116: The **type** payload parameter was supplied instead of **upload.approach**. Use **upload.approach** starting from API version 3.4.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        500:\n          description: 'Error code 4003: There is a problem initiating the upload.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/users/{user_id}/videos/{video_id}':\n    get:\n      summary: 'Check if a user owns a video'\n      description: 'This method determines whether a particular user is the owner of the specified video.'\n      operationId: check_if_user_owns_video\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The user owns the video.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'The authenticated user doesn''t own the video.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/users/{user_id}/watchlater':\n    get:\n      summary: 'Get all the videos in a user''s Watch Later queue'\n      description: 'This method gets all the videos from the specified user''s Watch Later queue.'\n      operationId: get_watch_later_queue\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - embeddable\n        -\n          description: 'Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.'\n          in: query\n          name: filter_embeddable\n          required: false\n          schema:\n            type: boolean\n            example: true\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n      responses:\n        304:\n          description: 'The user hasn''t added any videos to their Watch Later queue since the given `If-Modified-Since` header.'\n        200:\n          description: 'The videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n      security:\n        -\n          oauth2:\n            - private\n  '/users/{user_id}/watchlater/{video_id}':\n    delete:\n      summary: 'Remove a video from a user''s Watch Later queue'\n      description: 'This method removes a single video from the specified user''s Watch Later queue.'\n      operationId: delete_video_from_watch_later\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n      security:\n        -\n          oauth2:\n            - interact\n    get:\n      summary: 'Check if a user has added a specific video to their Watch Later queue'\n      description: 'This method checks the specified user''s Watch Later queue for a particular video.'\n      operationId: check_watch_later_queue\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video appears in the user''s Watch Later queue.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'The video doesn''t appear in the user''s Watch Later queue.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - private\n    put:\n      summary: 'Add a video to a user''s Watch Later queue'\n      description: 'This method adds a single video to the specified user''s Watch Later queue.'\n      operationId: add_video_to_watch_later\n      tags:\n        - 'Watch Later Queue\\Essentials'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was added.'\n      security:\n        -\n          oauth2:\n            - interact\n  /videos:\n    get:\n      summary: 'Search for videos'\n      description: 'This method returns all the videos that match custom search criteria.'\n      operationId: search_videos\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - CC\n              - CC-BY\n              - CC-BY-NC\n              - CC-BY-NC-ND\n              - CC-BY-NC-SA\n              - CC-BY-ND\n              - CC-BY-SA\n              - CC0\n              - categories\n              - duration\n              - in-progress\n              - minimum_likes\n              - trending\n              - upload_date\n        -\n          description: 'A comma-separated list of video URLs to find.'\n          in: query\n          name: links\n          required: false\n          schema:\n            type: string\n            example: 'https://vimeo.com/122375452,https://vimeo.com/273576296'\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query.'\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n            example: 'staff picks'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - comments\n              - date\n              - duration\n              - likes\n              - plays\n              - relevant\n        -\n          description: 'A comma-separated list of video URIs to find.'\n          in: query\n          name: uris\n          required: false\n          schema:\n            type: string\n            example: '/videos/122375452,/videos/273576296'\n      responses:\n        200:\n          description: 'The search results were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        400:\n          description: \"* Error code 2101: Either the **uris** or **links** parameter has filtering or sorting arguments.\\n* Error code 2204: A problem occurred with the batch request.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        503:\n          description: \"* Search is disabled.\\n* Error code 7300: An internal search error occurred.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/videos/{video_id}':\n    delete:\n      summary: 'Delete a video'\n      description: 'This method deletes the specified video.'\n      operationId: delete_video\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video was deleted.'\n        403:\n          description: 'The authenticated user doesn''t own the video and can''t delete it.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific video'\n      description: 'This method returns a single video.'\n      operationId: get_video\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The video was returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        404:\n          description: 'No such video exists.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit a video'\n      description: 'This method edits the specified video.'\n      operationId: edit_video\n      tags:\n        - Videos\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video+json:\n            schema:\n              type: object\n              properties:\n                content_rating:\n                  description: 'A list of values describing the content in this video. Find the full list in the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.'\n                  items:\n                    type: string\n                  type: array\n                description:\n                  description: 'The description of the video.'\n                  example: 'A celebration of 10 years of Staff Picks.'\n                  type: string\n                embed:\n                  properties:\n                    buttons:\n                      properties:\n                        embed:\n                          description: 'Whether to show the embed button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        fullscreen:\n                          description: 'Whether to show the fullscreen button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        hd:\n                          description: 'Whether to show the fullscreen button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        like:\n                          description: 'Whether to show the like button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        scaling:\n                          description: 'Whether to show the scaling button on the embeddable player in fullscreen mode.'\n                          example: true\n                          type: boolean\n                        share:\n                          description: 'Whether to show the share button on the embeddable player.'\n                          example: true\n                          type: boolean\n                        watchlater:\n                          description: 'Whether to show the watch later button on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    color:\n                      description: 'The main color of the embeddable player.'\n                      example: '#1ab7ea'\n                      type: string\n                    logos:\n                      properties:\n                        custom:\n                          properties:\n                            active:\n                              description: 'Whether to show the active custom logo on the embeddable player.'\n                              example: true\n                              type: boolean\n                            link:\n                              description: 'The URL that loads when the user clicks the custom logo.'\n                              example: 'https://example.com'\n                              type: string\n                            sticky:\n                              description: 'Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).'\n                              example: true\n                              type: boolean\n                          type: object\n                        vimeo:\n                          description: 'Whether to show the Vimeo logo on the embeddable player.'\n                          example: true\n                          type: boolean\n                      type: object\n                    playbar:\n                      description: 'Whether to show the playbar on the embeddable player.'\n                      example: true\n                      type: boolean\n                    title:\n                      properties:\n                        name:\n                          description: \"How to handle the video title in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the video title.\\n * `show` - Show the video title.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        owner:\n                          description: \"How to handle the owner information in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the owner info.\\n * `show` - Show the owner info.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                        portrait:\n                          description: \"How to handle the owner portrait in the title bar of the embeddable player.\\n\\nOption descriptions:\\n * `hide` - Hide the portrait.\\n * `show` - Show the portrait.\\n * `user` - Enable the user to decide.\\n\"\n                          enum:\n                            - hide\n                            - show\n                            - user\n                          type: string\n                      type: object\n                    volume:\n                      description: 'Whether to show the volume selector on the embeddable player.'\n                      example: true\n                      type: boolean\n                  type: object\n                license:\n                  description: 'The Creative Commons license under which the video is offered.'\n                  enum:\n                    - by\n                    - by-nc\n                    - by-nc-nd\n                    - by-nc-sa\n                    - by-nd\n                    - by-sa\n                    - cc0\n                  type: string\n                locale:\n                  description: 'The video''s default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en-US\n                  type: string\n                name:\n                  description: 'The title of the video.'\n                  example: 'Celebrating 10 Years of Staff Picks'\n                  type: string\n                password:\n                  description: 'The password. When you set **privacy.view** to `password`, you must provide the password as an additional parameter.'\n                  example: hunter1\n                  type: string\n                privacy:\n                  properties:\n                    add:\n                      description: 'Whether a user can add the video to an album, channel, or group.'\n                      example: true\n                      type: boolean\n                    comments:\n                      description: 'The privacy level required to comment on the video.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      type: string\n                    download:\n                      description: 'Whether a user can download the video. Not available to Vimeo Basic members.'\n                      example: true\n                      type: boolean\n                    embed:\n                      description: 'The video''s embed setting. Specify the `whitelist` value if you want to provide a list of all valid embed domains; see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for more information.'\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      type: string\n                    view:\n                      description: 'The video''s privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, Vimeo Basic members can''t set this value to `disable` or `unlisted`.'\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      type: string\n                  type: object\n                review_page:\n                  properties:\n                    active:\n                      description: 'Whether to enable video review.'\n                      example: true\n                      type: boolean\n                  type: object\n                spatial:\n                  properties:\n                    director_timeline:\n                      description: 'An array representing the 360 director timeline.'\n                      items:\n                        type: object\n                        properties:\n                          pitch:\n                            description: 'The 360 director timeline pitch. This value must be between −90 and 90. Required only when **spatial.director_timeline** is defined.'\n                            example: 70\n                            type: number\n                          roll:\n                            description: 'The 360 director timeline roll.'\n                            type: number\n                          time_code:\n                            description: 'The 360 director timeline time code. Required only when **spatial.director_timeline** is defined.'\n                            example: 5\n                            type: number\n                          yaw:\n                            description: 'The 360 director timeline yaw. This value must be between 0 and 360. Required only when **spatial.director_timeline** is defined.'\n                            example: 125\n                            type: number\n                        required:\n                          - pitch\n                          - time_code\n                          - yaw\n                      type: array\n                    field_of_view:\n                      description: 'The 360 field of view. This value must be between 30 and 90. The default is 50.'\n                      example: 50\n                      type: number\n                    projection:\n                      description: 'The 360 spatial projection.'\n                      enum:\n                        - cubical\n                        - cylindrical\n                        - dome\n                        - equirectangular\n                        - pyramid\n                      type: string\n                    stereo_format:\n                      description: 'The 360 spatial stereo format.'\n                      enum:\n                        - left-right\n                        - mono\n                        - top-bottom\n                      type: string\n                  type: object\n      responses:\n        200:\n          description: 'The video was edited.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/video'\n        403:\n          description: \"* The authenticated user doesn't own the video.\\n* The **privacy** field is `disable`, and the authenticated user can't set extra embed options.\\n* The **privacy** field is `contacts`, and the authenticated user can't follow creators.\\n* The authenticated user has an opted-out Pro account, and **privacy.view** is `users`, `password`, `nobody`, or `public`.\"\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/available_albums':\n    get:\n      summary: 'Get all the albums to which a user can add or remove a specific video'\n      operationId: get_available_video_albums\n      tags:\n        - Albums\\Videos\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The albums were returned.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/album'\n        403:\n          description: 'Error code 3433: The authenticated user can''t add this video to collections.'\n          content:\n            application/vnd.vimeo.album+json:\n              schema:\n                $ref: '#/components/schemas/error'\n  '/videos/{video_id}/available_channels':\n    get:\n      summary: 'Get all the channels to which a user can add or remove a specific video'\n      description: 'Information about this method appears below.'\n      operationId: get_available_video_channels\n      tags:\n        - Channels\\Videos\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The channels were returned.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/channel'\n        403:\n          description: 'The authenticated user can''t add or remove this video from any channel.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'The authenticated user can''t moderate channels.'\n          content:\n            application/vnd.vimeo.channel+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/videos/{video_id}/categories':\n    get:\n      summary: 'Get all the categories to which a video belongs'\n      description: 'This method gets all the categories that contain a particular video.'\n      operationId: get_video_categories\n      tags:\n        - Categories\\Videos\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The categories were returned.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/category'\n        404:\n          description: 'No such video exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Suggest categories for a video'\n      description: \"With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video\\nbelongs in these categories.\"\n      operationId: suggest_video_category\n      tags:\n        - Categories\\Videos\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.category+json:\n            schema:\n              type: object\n              properties:\n                category:\n                  description: 'The array of the names of the categories that you''re suggesting.'\n                  items:\n                    type: string\n                  type: array\n              required:\n                - category\n      responses:\n        201:\n          description: 'The categories were suggested.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/category'\n        404:\n          description: 'No such video exists, or no such category exists.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'You don''t own this video.'\n          content:\n            application/vnd.vimeo.category+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/comments':\n    get:\n      summary: 'Get all the comments on a video'\n      description: 'This method returns all the comments on the specified video.'\n      operationId: get_comments\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The comments were returned.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/comment'\n    post:\n      summary: 'Add a comment to a video'\n      description: 'This method adds a comment to the specified video.'\n      operationId: create_comment\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              type: object\n              properties:\n                text:\n                  description: 'The text of the comment.'\n                  example: 'I love this!'\n                  type: string\n              required:\n                - text\n      responses:\n        201:\n          description: 'The comment was added.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/comment'\n        400:\n          description: 'Error code 2207: The comment text is missing.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        401:\n          description: 'Error code 8003: The user credentials are invalid.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 3301: The comment was flagged as spam.\\n* Error code 3411: The authenticated user is unverified.\\n* Error code 3412: The authenticated user can't comment.\\n* Error code 3413: Comments are disabled for this video.\"\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/videos/{video_id}/comments/{comment_id}':\n    delete:\n      summary: 'Delete a video comment'\n      description: 'This method deletes the specified comment from a video.'\n      operationId: delete_comment\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the comment.'\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The comment was deleted.'\n        404:\n          description: \"* No such video or comment exists.\\n* Error code 5000: The comment wasn't deleted and still exists.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'Error code 3415: The authenticated user didn''t write this comment and can''t delete it.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific video comment'\n      description: 'This method returns the specified comment on a video.'\n      operationId: get_comment\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the comment.'\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The comment was returned.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/comment'\n        404:\n          description: 'No such video or comment exists.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit a video comment'\n      description: 'This method edits the specified comment on a video.'\n      operationId: edit_comment\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the comment.'\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              type: object\n              properties:\n                text:\n                  description: 'The new comment text.'\n                  example: 'I love this!'\n                  type: string\n              required:\n                - text\n      responses:\n        200:\n          description: 'The comment was edited.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/comment'\n        400:\n          description: 'Error code 2207: The comment text is missing.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 3301: The comment was flagged as spam.\\n* Error code 3411: The authenticated user is unverified.\\n* Error code 3412: The authenticated user can't post comments.\\n* Error code 3414: The authenticated user didn't write the comment and can't edit it.\"\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/comments/{comment_id}/replies':\n    get:\n      summary: 'Get all the replies to a video comment'\n      description: 'This method returns all the replies to the specified video comment.'\n      operationId: get_comment_replies\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the comment.'\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The replies were returned.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/comment'\n        404:\n          description: 'No such video or comment exists.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a reply to a video comment'\n      description: 'This method adds a reply to the specified video comment.'\n      operationId: create_comment_reply\n      tags:\n        - Videos\\Comments\n      parameters:\n        -\n          description: 'The ID of the comment.'\n          in: path\n          name: comment_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.comment+json:\n            schema:\n              type: object\n              properties:\n                text:\n                  description: 'The reply to the comment.'\n                  example: 'I love this!'\n                  type: string\n              required:\n                - text\n      responses:\n        201:\n          description: 'The reply was added.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/comment'\n        400:\n          description: 'Error code 2207: The comment text is missing.'\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: \"* Error code 3301: The comment was flagged as spam.\\n* Error code 3411: The authenticated user is unverified.\\n* Error code 3412: The authenticated user can't comment.\\n* Error code 3413: Comments are disabled on this video.\"\n          content:\n            application/vnd.vimeo.comment+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - interact\n  '/videos/{video_id}/credits':\n    get:\n      summary: 'Get all the credited users in a video'\n      description: 'This method returns all the credited users in a video.'\n      operationId: get_video_credits\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The search query to use to filter the results.'\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n            example: 'Stop motion'\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The credited users were returned.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/credit'\n    post:\n      summary: 'Credit a user in a video'\n      description: 'This method adds a user credit to a video.'\n      operationId: add_video_credit\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              type: object\n              properties:\n                email:\n                  description: 'The email address of the credited person.'\n                  example: user@example.com\n                  type: string\n                name:\n                  description: 'The name of the credited person.'\n                  example: 'Sam Doe'\n                  type: string\n                role:\n                  description: 'The role of the credited person.'\n                  example: Producer\n                  type: string\n                user_uri:\n                  description: 'The Vimeo URI of the credited person.'\n                  example: /users/152184\n                  type: string\n              required:\n                - email\n                - name\n                - role\n                - user_uri\n      responses:\n        201:\n          description: 'The credit was added.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/credit'\n        400:\n          description: \"* A parameter is invalid.\\n* The authenticated user has an unverified email address.\\n* There is a user block between the video owner and the person receiving credit.\"\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user doesn''t own the video.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/videos/{video_id}/credits/{credit_id}':\n    delete:\n      summary: 'Delete the credit for a user in a video'\n      description: 'This method deletes the specified user credit from a video.'\n      operationId: delete_video_credit\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the credit.'\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The credit was deleted.'\n        400:\n          description: 'The authenticated user is neither the creator of the credit nor the credited user.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific credited user in a video'\n      description: 'This method returns a single credited user in a video.'\n      operationId: get_video_credit\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the credit.'\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The credit was returned.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/credit'\n        404:\n          description: 'No such video or credit exists.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    patch:\n      summary: 'Edit the credit for a user in a video'\n      description: 'This method edits the specified user credit in a video.'\n      operationId: edit_video_credit\n      tags:\n        - Videos\\Credits\n      parameters:\n        -\n          description: 'The ID of the credit.'\n          in: path\n          name: credit_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.credit+json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the credited person.'\n                  example: 'Sam Doe'\n                  type: string\n                role:\n                  description: 'The role of the credited person.'\n                  example: Producer\n                  type: string\n      responses:\n        200:\n          description: 'The credit was edited.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/credit'\n        400:\n          description: 'A parameter is invalid.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such video or credit exists.'\n          content:\n            application/vnd.vimeo.credit+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/likes':\n    get:\n      summary: 'Get all the users who have liked a video'\n      description: 'This method gets all the users who have liked a particular video.'\n      operationId: get_video_likes\n      tags:\n        - Likes\\Essentials\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The sort direction of the results.'\n          in: query\n          name: direction\n          required: false\n          schema:\n            type: string\n            example: asc\n            enum:\n              - asc\n              - desc\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n        -\n          description: 'The way to sort the results.'\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n            enum:\n              - alphabetical\n              - date\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n  '/videos/{video_id}/pictures':\n    get:\n      summary: 'Get all the thumbnails of a video'\n      description: 'This method returns all the thumbnail images of the specified video.'\n      operationId: get_video_thumbnails\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The thumbnails were returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/picture'\n    post:\n      summary: 'Add a video thumbnail'\n      description: 'This method adds a thumbnail image to the specified video.'\n      operationId: create_video_thumbnail\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the image created by the **time** field should be the default thumbnail for the video.'\n                  example: true\n                  type: boolean\n                time:\n                  description: 'Creates an image of the video from the given time offset.'\n                  example: 300\n                  type: number\n      responses:\n        201:\n          description: 'The thumbnail was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - upload\n  '/videos/{video_id}/pictures/{picture_id}':\n    delete:\n      summary: 'Delete a video thumbnail'\n      description: 'This method deletes the specified thumbnail image from a video.'\n      operationId: delete_video_thumbnail\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the thumbnail.'\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The thumbnail was deleted.'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Get a specific video thumbnail'\n      description: 'This method returns a single thumbnail image from the specified video.'\n      operationId: get_video_thumbnail\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the thumbnail.'\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The thumbnail was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n    patch:\n      summary: 'Edit a video thumbnail'\n      description: 'This method edits the specified video thumbnail image.'\n      operationId: edit_video_thumbnail\n      tags:\n        - Videos\\Thumbnails\n      parameters:\n        -\n          description: 'The ID of the thumbnail.'\n          in: path\n          name: picture_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.picture+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether this thumbnail is the default.'\n                  example: true\n                  type: boolean\n      responses:\n        200:\n          description: 'The thumbnail was edited.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/presets/{preset_id}':\n    delete:\n      summary: 'Remove an embed preset from a video'\n      description: 'This method removes the embed preset from the specified video.'\n      operationId: delete_video_embed_preset\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The embed preset was removed.'\n        404:\n          description: 'No such video or embed preset exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Check if an embed preset has been added to a video'\n      description: 'This method determines whether the specified video uses a particular embed preset.'\n      operationId: get_video_embed_preset\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The embed preset has been added to the video.'\n        404:\n          description: 'No such video or embed preset exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add an embed preset to a video'\n      description: 'This method assigns an embed preset to the specified video.'\n      operationId: add_video_embed_preset\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the preset.'\n          in: path\n          name: preset_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The embed preset was assigned.'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/privacy/domains':\n    get:\n      summary: 'Get all the domains on a video''s whitelist'\n      description: 'This method returns all the domains on the specified video''s whitelist.'\n      operationId: get_video_privacy_domains\n      tags:\n        - 'Videos\\Embed privacy'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The domains were returned.'\n          content:\n            application/vnd.vimeo.domain+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/domain'\n        403:\n          description: 'There are no domains on which the video can be embedded.'\n          content:\n            application/vnd.vimeo.domain+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/videos/{video_id}/privacy/domains/{domain}':\n    delete:\n      summary: 'Remove a domain from a video''s whitelist'\n      description: 'This method removes the specified domain from a video''s whitelist.'\n      operationId: delete_video_privacy_domain\n      tags:\n        - 'Videos\\Embed privacy'\n      parameters:\n        -\n          description: 'The domain name.'\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n            example: example.com\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The domain was removed.'\n        403:\n          description: 'The video''s embed privacy setting isn''t `whitelist`.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such domain exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Add a domain to a video''s whitelist'\n      description: 'This method adds the specified domain to a video''s whitelist.'\n      operationId: add_video_privacy_domain\n      tags:\n        - 'Videos\\Embed privacy'\n      parameters:\n        -\n          description: 'The domain name.'\n          in: path\n          name: domain\n          required: true\n          schema:\n            type: string\n            example: example.com\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The video is now embeddable on the domain.'\n        403:\n          description: 'The video doesn''t have a user-defined access list.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/privacy/users':\n    get:\n      summary: 'Get all the users who can view a private video'\n      description: 'This method returns all the users who have access to the specified private video.'\n      operationId: get_video_privacy_users\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The users were returned.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n        400:\n          description: 'No users can view this private video by default.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Permit a list of users to view a private video'\n      description: \"This method gives multiple users permission to view the specified private video. The body of the request should\\nfollow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each\\nobject must contain a single uri field whose value is the URI of the user who can view the video.\"\n      operationId: add_video_privacy_users\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The users can now view the private video.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/privacy/users/{user_id}':\n    delete:\n      summary: 'Restrict a user from viewing a private video'\n      description: 'This method prevents a user from being able to view the specified private video.'\n      operationId: delete_video_privacy_user\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The user was disallowed from viewing the private video.'\n        403:\n          description: 'The video isn''t set to a user-defined access list.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such user exists.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    put:\n      summary: 'Permit a specific user to view a private video'\n      description: 'This method gives a single user permission to view the specified private video.'\n      operationId: add_video_privacy_user\n      tags:\n        - 'Videos\\Viewing privacy'\n      parameters:\n        -\n          description: 'The ID of the user.'\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: number\n            example: 152184\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The user can already view this private video.'\n        200:\n          description: 'The user can now view the private video.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/user'\n        403:\n          description: 'The video doesn''t have a user-defined access list.'\n          content:\n            application/vnd.vimeo.user+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/tags':\n    get:\n      summary: 'Get all the tags of a video'\n      description: 'This method returns all the tags associated with a video.'\n      operationId: get_video_tags\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The tags were returned.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n    put:\n      summary: 'Add a list of tags to a video'\n      description: 'This method adds multiple tags to the specified video.'\n      operationId: add_video_tags\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.tag+json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: 'The name of the tag to apply. Specify multiple tag names as a batch request; see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) for details.'\n                  example: awesome\n                  type: string\n                page:\n                  description: 'The page number of the results to show.'\n                  example: 1\n                  type: number\n                per_page:\n                  description: 'The number of items to show on each page of results, up to a maximum of 100.'\n                  example: 10\n                  type: number\n              required:\n                - name\n      responses:\n        200:\n          description: 'The tags were added.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/tag'\n        400:\n          description: \"* The request body wasn't supplied.\\n* A parameter is invalid.\\n* The request body doesn't contain a JSON-encoded list of tags..\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: \"* The authenticated user can't add tags to a video.\\n* The total number of tags can't exceed 20.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/tags/{word}':\n    delete:\n      summary: 'Remove a tag from a video'\n      description: 'This method removes the specified tag from a video.'\n      operationId: delete_video_tag\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The tag word.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        204:\n          description: 'The tag was deleted.'\n        400:\n          description: \"* A parameter is invalid.\\n* The tag is invalid.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n    get:\n      summary: 'Check if a tag has been added to a video'\n      description: 'This method determines whether a particular tag has been added to a video.'\n      operationId: check_video_for_tag\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The tag word.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        200:\n          description: 'The tag has been added to the video.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/tag'\n        400:\n          description: \"* A parameter is invalid.\\n* The tag is invalid.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        404:\n          description: 'No such tag exists within the video.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    put:\n      summary: 'Add a specific tag to a video'\n      description: 'This method adds a single tag to the specified video.'\n      operationId: add_video_tag\n      tags:\n        - Videos\\Tags\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The tag word.'\n          in: path\n          name: word\n          required: true\n          schema:\n            type: string\n            example: awesome\n      responses:\n        200:\n          description: 'The tag was added.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/tag'\n        400:\n          description: \"* The tag is invalid.\\n* An unsupported parameter was supplied.\"\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The total number of tags can''t exceed 20.'\n          content:\n            application/vnd.vimeo.tag+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/texttracks':\n    get:\n      summary: 'Get all the text tracks of a video'\n      description: 'This method returns all the text tracks of the specified video.'\n      operationId: get_text_tracks\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The text tracks were returned.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/text-track'\n        404:\n          description: 'No such video exists.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n    post:\n      summary: 'Add a text track to a video'\n      description: 'This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).'\n      operationId: create_text_track\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the current text track is the *active text track*, or the one that appears in the player. Only one text track per language and type can be active.'\n                  example: true\n                  type: boolean\n                language:\n                  description: 'The language of the text track. For a full list of supported language, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en-US\n                  type: string\n                name:\n                  description: 'The name of the text track.'\n                  example: Commentary\n                  type: string\n                type:\n                  description: 'The type of the text track.'\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n              required:\n                - language\n                - name\n                - type\n      responses:\n        201:\n          description: 'The text track was added.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/text-track'\n        403:\n          description: \"* The authenticated user can't add the text track.\\n* Error code 2204: The request contains errors.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/videos/{video_id}/texttracks/{texttrack_id}':\n    delete:\n      summary: 'Delete a text track'\n      description: 'This method deletes the specified text track from a video.'\n      operationId: delete_text_track\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the text track.'\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        204:\n          description: 'The text track was deleted.'\n        404:\n          description: \"* No such video or text track exists.\\n* The authenticated user can't delete the text track.\\n* Error code 5014: The specified text track doesn't exist.\\n* Error code 5015: The specified text track belongs to a different video.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: \"* Error code 3430: The authenticated user doesn't have permission to access the text track.\\n* Error code 3431: This text track is disabled.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          oauth2:\n            - delete\n    get:\n      summary: 'Get a specific text track'\n      description: 'This method returns a single text track from the specified video.'\n      operationId: get_text_track\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the text track.'\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The text track was returned.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/text-track'\n        404:\n          description: \"* No such video or text track exists.\\n* Error code 5014: The specified text track doesn't exist.\\n* Error code 5015: The specified text track belongs to a different video.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: \"* Error code 3430: The authenticated user doesn't have permission to access the text track.\\n* Error code 3431: This text track is disabled.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/error'\n    patch:\n      summary: 'Edit a text track'\n      description: 'This method edits the specified text track.'\n      operationId: edit_text_track\n      tags:\n        - 'Videos\\Text tracks'\n      parameters:\n        -\n          description: 'The ID of the text track.'\n          in: path\n          name: texttrack_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: false\n        content:\n          application/vnd.vimeo.video.texttrack+json:\n            schema:\n              type: object\n              properties:\n                active:\n                  description: 'Whether the current text track is the active text track, or the one that appears in the player. Only one text track per language and per type can be active.'\n                  example: true\n                  type: boolean\n                language:\n                  description: 'The language of the text track. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.'\n                  example: en-US\n                  type: string\n                name:\n                  description: 'The name of the text track.'\n                  example: Commentary\n                  type: string\n                type:\n                  description: 'The type of the text track.'\n                  enum:\n                    - captions\n                    - chapters\n                    - descriptions\n                    - metadata\n                    - subtitles\n                  type: string\n      responses:\n        200:\n          description: 'The text track was edited.'\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/text-track'\n        404:\n          description: \"* No such video or text track exists.\\n* Error code 5014: The specified text track doesn't exist.\\n* Error code 5015: The specified text track belongs to a different video.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: \"* The authenticated user can't edit the text track.\\n* Error code 2204: There are errors in the request.\\n* Error code 3430: The authenticated user doesn't have permission to access the text track.\\n* Error code 3431: This text track is disabled.\"\n          content:\n            application/vnd.vimeo.video.texttrack+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - edit\n  '/videos/{video_id}/timelinethumbnails':\n    post:\n      summary: 'Add a new timeline event thumbnail to a video'\n      description: 'This method adds a timeline event thumbnail to the specified video.'\n      operationId: create_video_custom_logo\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        201:\n          description: 'The timeline event thumbnail was created.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        404:\n          description: 'No such video exists.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n        403:\n          description: 'The authenticated user can''t upload pictures to another user''s video.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n      security:\n        -\n          oauth2:\n            - upload\n  '/videos/{video_id}/timelinethumbnails/{thumbnail_id}':\n    get:\n      summary: 'Get a timeline event thumbnail'\n      description: 'This method returns a single timeline event thumbnail that belongs to the specified video.'\n      operationId: get_video_custom_logo\n      tags:\n        - 'Embed Presets\\Videos'\n      parameters:\n        -\n          description: 'The ID of the timeline event thumbnail.'\n          in: path\n          name: thumbnail_id\n          required: true\n          schema:\n            type: number\n            example: 12345\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      responses:\n        200:\n          description: 'The timeline event thumbnail was returned.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/picture'\n        403:\n          description: 'The authenticated user can''t view this timeline event thumbnail.'\n          content:\n            application/vnd.vimeo.picture+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\n  '/videos/{video_id}/versions':\n    post:\n      summary: 'Add a version to a video'\n      description: 'This method adds a version to the specified video.'\n      operationId: create_video_version\n      tags:\n        - Videos\\Versions\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n      requestBody:\n        required: true\n        content:\n          application/vnd.vimeo.video.version+json:\n            schema:\n              type: object\n              properties:\n                file_name:\n                  description: 'The name of the version'\n                  example: untitled.mp4\n                  type: string\n                upload:\n                  properties:\n                    approach:\n                      description: 'The approach by which to upload the version.'\n                      enum:\n                        - post\n                        - pull\n                        - streaming\n                        - tus\n                      type: string\n                    link:\n                      description: 'When **upload.approach** is `pull`, the public URL from which to download the version. This URL must be valid for at least 24 hours.'\n                      example: 'https://example.com'\n                      type: string\n                    redirect_url:\n                      description: 'When **upload.approach** is `post`, the app''s redirect URL.'\n                      example: 'https://example.com'\n                      type: string\n                    size:\n                      description: 'The upload size of the version.'\n                      example: '13623861'\n                      type: string\n                  required:\n                    - approach\n                  type: object\n              required:\n                - file_name\n                - upload\n      responses:\n        201:\n          description: 'The version was added.'\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: '#/components/schemas/video-versions'\n        400:\n          description: 'Error code 2204: The request input contains invalid versions data.'\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: \"* Error code 5011: An upload isn't associated with this version.\\n* Error code 5012: A video isn't associated with this upload.\\n* Error code 5013: The endpoint isn't available, because the specified version of the API is less than 3.4 and **upload.approach** isn't `tus`.\"\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: 'Error code 3427: The authenticated user can''t edit the video.'\n          content:\n            application/vnd.vimeo.video.version+json:\n              schema:\n                $ref: '#/components/schemas/error'\n  '/videos/{video_id}/videos':\n    get:\n      summary: 'Get all the related videos of a video'\n      description: 'This method returns all the related videos of a particular video.'\n      operationId: get_related_videos\n      tags:\n        - Videos\\Recommendations\n      parameters:\n        -\n          description: 'The ID of the video.'\n          in: path\n          name: video_id\n          required: true\n          schema:\n            type: number\n            example: 258684937\n        -\n          description: 'The attribute by which to filter the results.'\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n            enum:\n              - related\n        -\n          description: 'The page number of the results to show.'\n          in: query\n          name: page\n          required: false\n          schema:\n            type: number\n            example: 1\n        -\n          description: 'The number of items to show on each page of results, up to a maximum of 100.'\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: number\n            example: 10\n      responses:\n        200:\n          description: 'The related videos were returned.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/video'\n        400:\n          description: 'The value of **filter** isn''t `related`.'\n          content:\n            application/vnd.vimeo.video+json:\n              schema:\n                $ref: '#/components/schemas/legacy-error'\ncomponents:\n  securitySchemes:\n    bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: bearer\n    oauth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth/authorize\n          tokenUrl: /oauth/access_token\n          scopes:\n            create: 'Create new albums, channels, and so on'\n            delete: 'Delete videos, albums, channels, and so on'\n            edit: 'Edit existing videos, albums, channels, and so on'\n            email: 'Access to email addresses'\n            interact: 'Interact with Vimeo resources on a member''s behalf, such as liking a video or following another member'\n            private: 'Access private member data'\n            promo_codes: 'Add, remove, and review Vimeo On Demand promotions'\n            public: 'Access public member data'\n            purchase: 'Purchase content'\n            purchased: 'Access a member''s Vimeo On Demand purchase history'\n            stats: 'Access video stats'\n            upload: 'Upload videos'\n            video_files: 'Access video files belonging to members with a PRO subscription or higher'\n        clientCredentials:\n          tokenUrl: /oauth/authorize/client\n          scopes:\n            create: 'Create new albums, channels, and so on'\n            delete: 'Delete videos, albums, channels, and so on'\n            edit: 'Edit existing videos, albums, channels, and so on'\n            email: 'Access to email addresses'\n            interact: 'Interact with Vimeo resources on a member''s behalf, such as liking a video or following another member'\n            private: 'Access private member data'\n            promo_codes: 'Add, remove, and review Vimeo On Demand promotions'\n            public: 'Access public member data'\n            purchase: 'Purchase content'\n            purchased: 'Access a member''s Vimeo On Demand purchase history'\n            stats: 'Access video stats'\n            upload: 'Upload videos'\n            video_files: 'Access video files belonging to members with a PRO subscription or higher'\n  schemas:\n    activity-3-1:\n      title: 'Activity 3.1'\n      properties:\n        category:\n          allOf:\n            -\n              $ref: '#/components/schemas/category'\n          description: 'The category that this event occurred for. This will be preset for only \"category\" activity types.'\n        channel:\n          allOf:\n            -\n              $ref: '#/components/schemas/channel'\n          description: 'The channel that this event occurred for. This will be present for only \"channel\" activity types.'\n        clip:\n          allOf:\n            -\n              $ref: '#/components/schemas/video'\n          description: 'Video associated with ths activity.'\n        group:\n          allOf:\n            -\n              $ref: '#/components/schemas/group'\n          description: 'The group that this event occurred for. This will be present for only \"group\" activity types.'\n        metadata:\n          description: 'The activity''s metadata.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the activity.'\n              properties:\n                related:\n                  description: 'Related content for this activity.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: '/users/152184/activities?offset=20'\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - related\n              type: object\n          required:\n            - connections\n          type: object\n        tag:\n          allOf:\n            -\n              $ref: '#/components/schemas/tag'\n          description: 'The tag that this event occurred for. This will be present for only \"tag\" activity types.'\n        time:\n          description: 'Time that the event occurred.'\n          example: '2017-05-17T17:46:09+00:00'\n          type: string\n        type:\n          description: 'Activity type'\n          enum:\n            - appearance\n            - category\n            - channel\n            - facebook_feed\n            - group\n            - like\n            - ondemand\n            - share\n            - tag\n            - twitter_timeline\n            - upload\n          example: appearance\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The user that this event occurred for. This will be present for \"like\", \"appearance\", and \"share\" activity types.'\n      required:\n        - clip\n        - metadata\n        - time\n        - type\n      type: object\n    album:\n      title: Album\n      properties:\n        allow_continuous_play:\n          description: 'Whether an album should allow continuous play.'\n          example: true\n          type: boolean\n        allow_downloads:\n          description: 'Whether an album should allow downloads.'\n          example: true\n          type: boolean\n        allow_share:\n          description: 'Whether an album should allow sharing.'\n          example: true\n          type: boolean\n        autoplay:\n          description: 'Whether to start playback of the next video in the album''s embedded playlist immediately after the previous video finishes.'\n          example: true\n          type: boolean\n        brand_color:\n          description: 'Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.'\n          example: ff66ee\n          nullable: true\n          type: string\n        created_time:\n          description: 'The time in ISO 8601 format that the album was created.'\n          example: '2015-12-17T21:32:44+00:00'\n          type: string\n        custom_logo:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The custom logo for this album.'\n          nullable: true\n        description:\n          description: 'A brief description of the album''s content.'\n          example: 'Vimeo holiday videos!'\n          nullable: true\n          type: string\n        domain:\n          description: 'The custom domain a user has selected for their album.'\n          example: mycustomdomain.com\n          nullable: true\n          type: string\n        duration:\n          description: 'The total duration in seconds of all the videos in the album.'\n          example: 1163\n          type: number\n        embed:\n          description: 'Embed data for the album.'\n          properties:\n            html:\n              description: 'The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn''t password and when the album has embeddable videos.'\n              nullable: true\n              type: string\n          required:\n            - html\n          type: object\n        embed_brand_color:\n          description: 'Whether to show the album''s custom brand color in the player of the album''s embedded playlist.'\n          example: true\n          nullable: true\n          type: boolean\n        embed_custom_logo:\n          description: 'Whether to show the album''s custom logo in the player of the album''s embedded playlist.'\n          example: true\n          nullable: true\n          type: boolean\n        hide_nav:\n          description: 'Whether to hide the Vimeo navigation when viewing the album.'\n          example: true\n          type: boolean\n        hide_vimeo_logo:\n          description: 'Whether to hide the Vimeo logo in the player of the album''s embedded playlist.'\n          example: true\n          nullable: true\n          type: boolean\n        layout:\n          description: 'The album''s layout preference'\n          enum:\n            - grid\n            - player\n          example: grid\n          type: string\n        link:\n          description: 'The URL to access the album.'\n          example: 'https://vimeo.com/album/Vimeo Holiday Videos!'\n          type: string\n        loop:\n          description: 'Whether automatic playback will restart at the top of the embedded playlist after reaching the end of the last video in the playlist.'\n          example: true\n          type: boolean\n        metadata:\n          description: 'Metadata about the album.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource.'\n              properties:\n                videos:\n                  description: 'Information about the videos that belong to this album.'\n                  properties:\n                    options:\n                      description: 'An array of the HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 6\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /albums/3706071/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n            interactions:\n              description: 'A list of resource URIs related to the album.'\n              nullable: true\n              properties:\n                add_custom_thumbnails:\n                  description: 'An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /users/123456/albums/654321/custom_thumbnails\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_logos:\n                  description: 'An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /users/123456/albums/654321/logos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_to:\n                  description: 'Information about adding or removing a video from the album. This data requires a bearer token with the `private` scope.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /albums/1234/videos/5678\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_videos:\n                  description: 'An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /users/123456/albums/654321/videos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - add_custom_thumbnails\n                - add_logos\n                - add_to\n                - add_videos\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the album was last modified.'\n          example: '2018-02-06T21:24:17+00:00'\n          type: string\n        name:\n          description: 'The album''s display name.'\n          example: 'Vimeo Holiday Videos!'\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active image for the album; defaults to the thumbnail of the last video added to the album.'\n        privacy:\n          description: 'The privacy settings of the album.'\n          properties:\n            password:\n              description: 'The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.'\n              example: hunter1\n              type: string\n            view:\n              description: \"Who can view the album:\\n\\nOption descriptions:\\n * `anybody` - Anyone can view the album.\\n * `embed_only` - Only owner can see album, can be embedded off-site\\n * `password` - Only those with the password can view the album.\\n\"\n              enum:\n                - anybody\n                - embed_only\n                - password\n              example: anybody\n              type: string\n          required:\n            - view\n          type: object\n        resource_key:\n          description: 'The album resource key.'\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        review_mode:\n          description: 'Whether album videos should use the review mode URL.'\n          example: true\n          type: boolean\n        share_link:\n          description: 'The URL to share the showcase.'\n          type: string\n        sort:\n          description: 'Sort type of the album.'\n          enum:\n            - added_first\n            - added_last\n            - alphabetical\n            - arranged\n            - comments\n            - likes\n            - newest\n            - oldest\n            - plays\n          example: added_first\n          type: string\n        theme:\n          description: 'The album''s color theme preference'\n          enum:\n            - dark\n            - standard\n          example: dark\n          type: string\n        uri:\n          description: 'The album''s URI.'\n          example: /albums/3706071\n          type: string\n        url:\n          description: 'The custom Vimeo URL a user has selected for their album.'\n          example: my-custom-url\n          nullable: true\n          type: string\n        use_custom_domain:\n          description: 'Whether the user has opted in to use a custom domain for their album.'\n          example: false\n          type: boolean\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the album.'\n        web_brand_color:\n          description: 'Whether an album should show the brand color in the web layout.'\n          example: true\n          type: boolean\n        web_custom_logo:\n          description: 'Whether an album''s custom logo should be shown in the web layout.'\n          example: true\n          type: boolean\n      required:\n        - allow_continuous_play\n        - allow_downloads\n        - allow_share\n        - autoplay\n        - brand_color\n        - created_time\n        - custom_logo\n        - description\n        - domain\n        - duration\n        - embed\n        - embed_brand_color\n        - embed_custom_logo\n        - hide_nav\n        - hide_vimeo_logo\n        - layout\n        - link\n        - loop\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - review_mode\n        - share_link\n        - sort\n        - theme\n        - uri\n        - url\n        - use_custom_domain\n        - user\n        - web_brand_color\n        - web_custom_logo\n      type: object\n    api-app:\n      title: 'API App'\n      properties:\n        name:\n          description: 'The name of the API app.'\n          example: 'Vimeo Android'\n          type: string\n        uri:\n          description: 'The canonical URI of the API app.'\n          example: /apps/12345\n          type: string\n      required:\n        - name\n        - uri\n      type: object\n    auth:\n      title: Auth\n      properties:\n        access_token:\n          description: 'The access token string.'\n          example: 01019a4a62aec63db077317ab7bb429db75652401e\n          type: string\n        app:\n          allOf:\n            -\n              $ref: '#/components/schemas/api-app'\n          description: 'The API application associated with the token.'\n        expires_on:\n          description: 'The date and time that the token expires.'\n          example: '1495048954'\n          type: string\n        refresh_token:\n          description: 'The refresh token string.'\n          example: 3d3bc8a9cb7debfd01b270e419b2d265983362f9\n          type: string\n        scope:\n          description: 'The scope or scopes that the token supports.'\n          example: 'private create edit upload public'\n          type: string\n        token_type:\n          description: \"The token type:\\n\\nOption descriptions:\\n * `bearer` - The token is of the `bearer` type.\\n\"\n          enum:\n            - bearer\n          example: bearer\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The user associated with the token.'\n      required:\n        - access_token\n        - app\n        - scope\n        - token_type\n      type: object\n    auth-error:\n      title: 'Auth Error'\n      properties:\n        error:\n          description: 'The name of the error.'\n          example: server_error\n          type: string\n        error_description:\n          description: 'The description of the error.'\n          example: 'An error has occurred on Vimeo''s servers. Please try again.'\n          type: string\n      required:\n        - error\n        - error_description\n      type: object\n    category:\n      title: Category\n      properties:\n        icon:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active icon for the category.'\n        last_video_featured_time:\n          description: 'The last time, in ISO 8601 format, that a video was featured.'\n          example: '2017-05-17T17:46:09+00:00'\n          type: string\n        link:\n          description: 'The URL to access the category in a browser.'\n          example: 'https://vimeo.com/categories/animation'\n          type: string\n        metadata:\n          description: 'Metadata about the category.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource.'\n              properties:\n                channels:\n                  description: 'Information about the channels related to this category.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of channels on this connection.'\n                      example: 90\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /categories/animation/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                groups:\n                  description: 'Information about the groups related to this category.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of groups on this connection.'\n                      example: 15\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /categories/animation/groups\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                users:\n                  description: 'Information about the users related to this category.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 140\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /categories/animation/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: 'Information about the videos related to this category.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 960\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /categories/animation/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - channels\n                - groups\n                - users\n                - videos\n              type: object\n            interactions:\n              description: 'The permissible actions related to the category.'\n              properties:\n                follow:\n                  description: 'An action indicating if the authenticated user has followed this category.'\n                  properties:\n                    added:\n                      description: 'Whether the authenticated user has followed this category.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format that the user followed this category, or the null value if the user hasn''t followed this category.'\n                      example: '2017-05-17T17:46:09+00:00'\n                      nullable: true\n                      type: string\n                    uri:\n                      description: 'The URI for following or unfollowing this category: PUT to this URI to follow the category, or DELETE to this URI to unfollow the category.'\n                      example: /users/152184/categories/animation\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n              required:\n                - follow\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: 'The display name that identifies the category.'\n          example: Animation\n          type: string\n        parent:\n          description: 'The container of this category''s parent category, if the current category is a subcategory.'\n          nullable: true\n          properties:\n            link:\n              description: 'The URL to access the parent category in a browser.'\n              example: 'https://vimeo.com/categories/animation'\n              type: string\n            name:\n              description: 'The display name that identifies the parent category.'\n              example: Animation\n              type: string\n            uri:\n              description: 'The unique identifier to access the parent of this category resource.'\n              example: /categories/animation\n              type: string\n          required:\n            - link\n            - name\n            - uri\n          type: object\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active picture for this category; defaults to vertical color bars.'\n        resource_key:\n          description: 'The resource key of the category.'\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        subcategories:\n          description: 'All the subcategories that belong to this category, if the current category is a top-level parent.'\n          items:\n            type: object\n            properties:\n              link:\n                description: 'The URL to access the subcategory in a browser.'\n                example: 'https://vimeo.com/categories/animation/2d/videos'\n                type: string\n              name:\n                description: 'The display name that identifies the subcategory.'\n                example: 2D\n                type: string\n              uri:\n                description: 'The unique identifier to access the subcategory resource.'\n                example: /categories/animation/subcategories/2d\n                type: string\n            required:\n              - link\n              - name\n              - uri\n          type: array\n        top_level:\n          description: 'Whether the category isn''t a subcategory of another category.'\n          example: true\n          type: boolean\n        uri:\n          description: 'The unique identifier to access the category resource.'\n          example: /categories/animation\n          type: string\n      required:\n        - last_video_featured_time\n        - link\n        - metadata\n        - name\n        - parent\n        - pictures\n        - resource_key\n        - top_level\n        - uri\n      type: object\n    channel:\n      title: Channel\n      properties:\n        categories:\n          description: 'The categories to which this channel belongs as specified by the channel moderators.'\n          items:\n            $ref: '#/components/schemas/category'\n          type: array\n        created_time:\n          description: 'The time in ISO 8601 format when the channel was created.'\n          example: '2007-10-23T17:00:43+00:00'\n          type: string\n        description:\n          description: 'A brief explanation of the channel''s content.'\n          example: 'We really love videos, and these are the videos we really, really love.'\n          nullable: true\n          type: string\n        header:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The banner that appears by default at the top of the channel page.'\n        link:\n          description: 'The URL to access the channel in a browser.'\n          example: 'https://vimeo.com/channels/staffpicks'\n          type: string\n        metadata:\n          description: 'Metadata about the channel.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource.'\n              properties:\n                privacy_users:\n                  description: 'Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 36\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /channels/927/privacy/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                users:\n                  description: 'Information about the users following or moderating this channel.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 794634\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /channels/927/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: 'Information about the videos that belong to this channel.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 12448\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /channels/927/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - privacy_users\n                - users\n                - videos\n              type: object\n            interactions:\n              description: 'A list of resource URIs related to the channel.'\n              nullable: true\n              properties:\n                add_moderators:\n                  description: 'An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /channels/1234/moderators\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                add_to:\n                  description: 'When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /channels/1234/videos/5678\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                follow:\n                  description: 'An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    added:\n                      description: 'Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn''t followed the channel. This data requires a bearer token with the `private` scope.'\n                      example: '2017-05-22T17:50:11+00:00'\n                      nullable: true\n                      type: string\n                    type:\n                      description: \"Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.\\n\\nOption descriptions:\\n * `moderator` - The authenticated user is a moderator.\\n * `subscriber` - The authenticated user is a subscriber.\\n\"\n                      enum:\n                        - moderator\n                        - subscriber\n                      example: moderator\n                      nullable: true\n                      type: string\n                    uri:\n                      description: 'The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.'\n                      example: /users/1234/channels/927\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - type\n                    - uri\n                  type: object\n                moderate_videos:\n                  description: 'An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /channels/1234/videos\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - add_moderators\n                - add_to\n                - follow\n                - moderate_videos\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the album was last modified.'\n          example: '2018-03-21T22:52:29+00:00'\n          type: string\n        name:\n          description: 'The display name that identifies the channel.'\n          example: 'Vimeo Staff Picks'\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active image for the channel; defaults to the thumbnail of the last video added to the channel.'\n        privacy:\n          description: 'The privacy settings of the channel.'\n          properties:\n            view:\n              description: \"Who can view the channel:\\n\\nOption descriptions:\\n * `anybody` - Anyone can view the channel.\\n * `moderators` - Only moderators can view the channel.\\n * `users` - Only registered users can view the channel.\\n\"\n              enum:\n                - anybody\n                - moderators\n                - users\n              example: anybody\n              type: string\n          required:\n            - view\n          type: object\n        resource_key:\n          description: 'The channel resource key.'\n          example: e5595241643259c658ed6c85ca82985a6341edc7\n          type: string\n        tags:\n          description: 'An array of all tags assigned to this channel.'\n          items:\n            $ref: '#/components/schemas/tag'\n          type: array\n        uri:\n          description: 'The unique identifier to access the channel resource.'\n          example: /channels/927\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The Vimeo user who owns the channel.'\n      required:\n        - categories\n        - created_time\n        - description\n        - header\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - tags\n        - uri\n        - user\n      type: object\n    comment:\n      title: Comment\n      properties:\n        created_on:\n          description: 'The time in ISO 8601 format when the comment was posted.'\n          example: '2018-03-05T21:04:47+00:00'\n          type: string\n        metadata:\n          properties:\n            connections:\n              properties:\n                replies:\n                  description: 'Information about this comment''s replies.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of replies on this connection.'\n                      example: 42\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/comments/12345/replies\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - replies\n              type: object\n          required:\n            - connections\n          type: object\n        resource_key:\n          description: 'The resource key string for the comment.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        text:\n          description: 'The content of the comment.'\n          example: 'I love this!'\n          type: string\n        type:\n          description: \"The Vimeo content to which the comment relates:\\n\\nOption descriptions:\\n * `video` - The comment is about a video.\\n\"\n          enum:\n            - video\n          example: video\n          type: string\n        uri:\n          description: 'The unique identifier to access the comment resource.'\n          example: /videos/258684937/comments/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The user who posted the comment.'\n          nullable: true\n      required:\n        - created_on\n        - metadata\n        - resource_key\n        - text\n        - type\n        - uri\n        - user\n      type: object\n    content-rating:\n      title: 'Content Rating'\n      properties:\n        code:\n          description: \"The code that uniquely identifies this content rating:\\n\\nOption descriptions:\\n * `drugs` - Drug or alcohol use.\\n * `language` - Profanity or sexually suggestive content.\\n * `nudity` - Nudity.\\n * `safe` - Suitable for all audiences.\\n * `unrated` - No rating.\\n * `violence` - Violent or graphic content.\\n\"\n          enum:\n            - drugs\n            - language\n            - nudity\n            - safe\n            - unrated\n            - violence\n          example: violence\n          type: string\n        name:\n          description: 'The description of this content rating.'\n          example: Violence\n          type: string\n        uri:\n          description: 'The canonical relative URI of the content rating.'\n          example: /contentrating/violence\n          nullable: true\n          type: string\n      required:\n        - code\n        - name\n        - uri\n      type: object\n    creative-commons:\n      title: 'Creative Commons'\n      properties:\n        code:\n          description: \"The code that uniquely identifies this Creative Commons license:\\n\\nOption descriptions:\\n * `by` - Attribution\\n * `by-nc` - Attribution Non-Commercial\\n * `by-nc-nd` - Attribution Non-Commercial No Derivatives\\n * `by-nc-sa` - Attribution Non-Commercial Share Alike\\n * `by-nd` - Attribution No Derivatives\\n * `by-sa` - Attribution Share Alike\\n * `cc0` - Public Domain Dedication\\n\"\n          enum:\n            - by\n            - by-nc\n            - by-nc-nd\n            - by-nc-sa\n            - by-nd\n            - by-sa\n            - cc0\n          example: by-sa\n          type: string\n        name:\n          description: 'The description of this Creative Commons license.'\n          example: 'Attribution Share Alike'\n          type: string\n        uri:\n          description: 'The canonical relative URI of the Creative Commons license.'\n          example: /creativecommons/by-sa\n          nullable: true\n          type: string\n      required:\n        - code\n        - name\n        - uri\n      type: object\n    credit:\n      title: Credit\n      properties:\n        name:\n          description: 'The name of the person credited.'\n          example: 'Sam Doe'\n          type: string\n        role:\n          description: 'The character that this person portrayed, or the job that this person performed.'\n          example: Themselves\n          type: string\n        uri:\n          description: 'The unique identifier to access the credits resource.'\n          example: /videos/258684937/credits/1234\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The Vimeo user associated with this credit.'\n        video:\n          allOf:\n            -\n              $ref: '#/components/schemas/video'\n          description: 'The video associated with this credit.'\n      required:\n        - name\n        - role\n        - uri\n      type: object\n    domain:\n      title: Domain\n      properties:\n        allow_hd:\n          description: 'Whether to permit HD embeds on this domain.'\n          example: true\n          type: boolean\n        domain:\n          description: 'The domain name.'\n          example: example.com\n          type: string\n        uri:\n          description: 'The URI of the domain.'\n          example: /videos/258684937/privacy/domains/example.com\n          type: string\n      required:\n        - allow_hd\n        - domain\n        - uri\n      type: object\n    embed-settings:\n      title: 'Embed Settings'\n      properties:\n        buttons:\n          description: 'A collection of information about the buttons that appear on the interface of the embeddable player.'\n          properties:\n            embed:\n              description: 'Whether the Embed button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            fullscreen:\n              description: 'Whether the Fullscreen button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            hd:\n              description: 'Whether the HD button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            like:\n              description: 'Whether the Like button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            scaling:\n              description: 'Whether the Scaling button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            share:\n              description: 'Whether the Share button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n            watchlater:\n              description: 'Whether the Watch Later button appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n          required:\n            - embed\n            - fullscreen\n            - hd\n            - like\n            - scaling\n            - share\n            - watchlater\n          type: object\n        color:\n          description: 'The primary player color, which controls the color of the progress bar, buttons, and more.'\n          example: '#0a0808'\n          type: string\n        logos:\n          description: 'A collection of information about the logo in the corner of the embeddable player.'\n          properties:\n            custom:\n              description: 'A collection of information relating to custom logos in the embeddable player.'\n              properties:\n                active:\n                  description: 'Whether the custom logo appears in the embeddable player.'\n                  example: true\n                  type: boolean\n                link:\n                  description: 'The URL that loads upon clicking the custom logo.'\n                  example: 'http://example.com'\n                  type: string\n                sticky:\n                  description: 'Whether the custom logo appears even when the player interface is hidden.'\n                  example: true\n                  type: boolean\n              required:\n                - active\n                - link\n                - sticky\n              type: object\n            vimeo:\n              description: 'Whether the Vimeo logo appears in the embeddable player for this video.'\n              example: true\n              type: boolean\n          required:\n            - custom\n            - vimeo\n          type: object\n        playbar:\n          description: 'Whether the playbar appears in the embeddable player for this video.'\n          example: true\n          type: boolean\n        speed:\n          description: 'Whether the speed controls appear in the embeddable player for this video.'\n          example: true\n          type: boolean\n        title:\n          description: 'A collection of information relating to the embeddable player''s title bar.'\n          properties:\n            name:\n              description: \"How the embeddable player handles the video title:\\n\\nOption descriptions:\\n * `hide` - The title is hidden.\\n * `show` - The title is shown.\\n\"\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n            owner:\n              description: \"How the embeddable player handles the video owner's information:\\n\\nOption descriptions:\\n * `hide` - The owner's information is hidden.\\n * `show` - The owner's information is shown.\\n\"\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n            portrait:\n              description: \"How the embeddable player handles the video owner's portrait:\\n\\nOption descriptions:\\n * `hide` - The owner's portrait is hidden\\n * `show` - The owner's portrait is shown.\\n\"\n              enum:\n                - hide\n                - show\n                - user\n              example: hide\n              type: string\n          required:\n            - name\n            - owner\n            - portrait\n          type: object\n        uri:\n          description: 'The URI of the embed preset.'\n          example: /videos/258684937/presets/12345\n          type: string\n        volume:\n          description: 'Whether the volume controls appear in the embeddable player for this video.'\n          example: true\n          type: boolean\n      required:\n        - buttons\n        - color\n        - logos\n        - playbar\n        - speed\n        - title\n        - volume\n      type: object\n    endpoint:\n      title: Endpoint\n      properties:\n        methods:\n          description: 'All HTTP methods permitted on this endpoint.'\n          items:\n            type: string\n          type: array\n        path:\n          description: 'The path section of the URL, which, when appended to the API host `https:///api.vimeo.com`, builds a full API endpoint.'\n          example: /me\n          type: string\n      required:\n        - methods\n        - path\n      type: object\n    error:\n      title: Error\n      properties:\n        developer_message:\n          description: 'The error message that developers receive.'\n          example: 'The specified resource does not exist.'\n          type: string\n        error:\n          description: 'The error message that non-developer users receive.'\n          example: 'Something strange occurred. Please try again.'\n          type: string\n        error_code:\n          description: 'The error code.'\n          example: 5000\n          type: number\n        link:\n          description: 'A link to more information about the error.'\n          type: string\n      required:\n        - developer_message\n        - error\n        - error_code\n        - link\n      type: object\n    group:\n      title: Group\n      properties:\n        created_time:\n          description: 'The time in ISO 8601 format when the group was created.'\n          example: '2008-07-05T14:52:43+00:00'\n          type: string\n        description:\n          description: 'The group''s description.'\n          example: 'Want to participate in our weekly Challenges? Join the Group to receive messages and new Challenges!'\n          nullable: true\n          type: string\n        link:\n          description: 'The link to the group.'\n          example: 'https://vimeo.com/groups/weekendchallenge'\n          type: string\n        metadata:\n          description: 'Metadata about the group.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource.'\n              properties:\n                users:\n                  description: 'Information about the members or moderators of this group.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 25798\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /groups/1108/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: 'Information about the videos contained within this group.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 7252\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /groups/1108/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - users\n                - videos\n              type: object\n            interactions:\n              description: 'User actions that have involved the group. This data requires a bearer token with the `private` scope.'\n              properties:\n                join:\n                  description: 'An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    added:\n                      description: 'Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.'\n                      nullable: true\n                      type: string\n                    title:\n                      description: 'The user''s title, or the null value if not applicable. This data requires a bearer token with the `private` scope.'\n                      example: 'Vimeo Staff'\n                      nullable: true\n                      type: string\n                    type:\n                      description: \"Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.\\n\\nOption descriptions:\\n * `member` - The authenticated user is a member.\\n * `moderator` - The authenticated user is a moderator.\\n\"\n                      enum:\n                        - member\n                        - moderator\n                      example: member\n                      nullable: true\n                      type: string\n                    uri:\n                      description: 'The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.'\n                      example: /users/152184/groups/1108\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - title\n                    - type\n                    - uri\n                  type: object\n              required:\n                - join\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the group was last modified.'\n          example: '2018-09-16T15:41:45+00:00'\n          type: string\n        name:\n          description: 'The group''s display name.'\n          example: 'Vimeo Weekend Challenge'\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active picture for this group.'\n        privacy:\n          description: 'The group''s privacy settings.'\n          properties:\n            comment:\n              description: \"Who can comment on the group:\\n\\nOption descriptions:\\n * `all` - Anyone can comment on the group.\\n * `members` - Only members can comment on the group.\\n\"\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            invite:\n              description: \"Who can invite new members to the group:\\n\\nOption descriptions:\\n * `all` - Anyone can invite new members to join.\\n * `members` - Only group members can invite new members to join.\\n\"\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            join:\n              description: \"Who can join the group:\\n\\nOption descriptions:\\n * `anybody` - Anyone can join the group.\\n * `members` - Only people with a Vimeo account can join the group.\\n\"\n              enum:\n                - anybody\n                - members\n              example: anybody\n              type: string\n            videos:\n              description: \"Who can add videos to the group:\\n\\nOption descriptions:\\n * `all` - Anyone can add videos to the group.\\n * `members` - Only group members can add videos to the group.\\n\"\n              enum:\n                - all\n                - members\n              example: all\n              type: string\n            view:\n              description: \"Who can view the group:\\n\\nOption descriptions:\\n * `anybody` - Anyone can view the group.\\n * `members` - Only group members can view the group.\\n\"\n              enum:\n                - anybody\n                - members\n              example: anybody\n              type: string\n          required:\n            - comment\n            - invite\n            - join\n            - videos\n            - view\n          type: object\n        resource_key:\n          description: 'The resource key of the group.'\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        uri:\n          description: 'The canonical relative URI of this group.'\n          example: /groups/1108\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the group.'\n          nullable: true\n      required:\n        - created_time\n        - description\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - resource_key\n        - uri\n      type: object\n    language:\n      title: Language\n      properties:\n        code:\n          description: 'The code that represents this language.'\n          example: en-US\n          type: string\n        name:\n          description: 'The name of the language.'\n          example: 'English (United States)'\n          type: string\n      required:\n        - code\n        - name\n      type: object\n    legacy-error:\n      title: 'Legacy Error'\n      properties:\n        error:\n          description: 'User-friendly error message'\n          example: 'Something strange occurred. Please try again.'\n          type: string\n      required:\n        - error\n      type: object\n    on-demand-genre:\n      title: 'On Demand Genre'\n      properties:\n        canonical:\n          description: 'The canonical name or URL slug of the genre.'\n          example: horror\n          type: string\n        interactions:\n          properties:\n            page:\n              description: 'Interactions for On Demand pages that are in this genre.'\n              properties:\n                added:\n                  description: 'Whether this On Demand genre was added.'\n                  example: true\n                  type: boolean\n                options:\n                  description: 'An array of HTTP methods permitted on this URI.'\n                  items:\n                    type: string\n                  type: array\n                uri:\n                  description: 'The URI to access the On Demand page.'\n                  example: /ondemand/genres/horror/pages/12345\n                  type: string\n              required:\n                - added\n                - options\n                - uri\n              type: object\n          required:\n            - page\n          type: object\n        link:\n          description: 'The Vimeo URL for this genre.'\n          example: 'http://vimeo.com/ondemand/browse/horror'\n          type: string\n        metadata:\n          properties:\n            connections:\n              description: 'A collection of information connected to this resource.'\n              properties:\n                pages:\n                  description: 'Information about the On Demand pages related to this group.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/genres/horror/pages\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n              required:\n                - pages\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: 'The descriptive name of the genre.'\n          example: Horror\n          type: string\n        uri:\n          description: 'The relative URI of the On Demand genre.'\n          example: /ondemand/genres/horror\n          type: string\n      required:\n        - canonical\n        - interactions\n        - link\n        - metadata\n        - name\n        - uri\n      type: object\n    on-demand-page:\n      title: 'On Demand Page'\n      properties:\n        background:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The background image for the On Demand page on Vimeo.'\n          nullable: true\n        colors:\n          description: 'The primary and secondary colors used for rendering this On Demand page.'\n          properties:\n            primary:\n              description: 'The hexadecimal color code for the page''s primary color.'\n              example: '#0a0808'\n              type: string\n            secondary:\n              description: 'The hexadecimal color code for the page''s secondary color.'\n              example: '#ba4a17'\n              type: string\n          required:\n            - primary\n            - secondary\n          type: object\n        content_rating:\n          description: 'An array of the page''s content ratings.'\n          items:\n            type: string\n          type: array\n        created_time:\n          description: 'The time in ISO 8601 format when the page was created.'\n          example: '2017-05-15T13:42:25+00:00'\n          type: string\n        description:\n          description: 'The description of this On Demand page.'\n          example: 'DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins \u0026 Notions\"'\n          nullable: true\n          type: string\n        domain_link:\n          description: 'The link to this page on its own domain.'\n          example: 'https://example.com'\n          nullable: true\n          type: string\n        episodes:\n          description: 'Information about this On Demand page''s episodes, if the page is for a series.'\n          properties:\n            buy:\n              properties:\n                active:\n                  description: 'Whether all the videos on this On Demand page can be purchased as a whole.'\n                  example: true\n                  type: boolean\n                price:\n                  description: 'The default price to buy an episode.'\n                  example: 9.99\n                  nullable: true\n                  type: number\n              required:\n                - active\n                - price\n              type: object\n            rent:\n              properties:\n                active:\n                  description: 'Whether all the videos on this On Demand page can be rented as a whole.'\n                  example: true\n                  type: boolean\n                period:\n                  description: \"The rental period for the video:\\n\\nOption descriptions:\\n * `1 day` - The rental period is one day.\\n * `1 month` - The rental period is one month.\\n * `1 week` - The rental period is one week.\\n * `1 year` - The rental period is one year.\\n * `2 day` - The rental period is two days.\\n * `24 hour` - The rental period is 24 hours.\\n * `3 day` - The rental period is three days.\\n * `3 month` - The rental period is three months.\\n * `30 day` - The rental period is 30 days.\\n * `48 hour` - The rental period is 48 hours.\\n * `6 month` - The rental period is six months.\\n * `60 day` - The rental period is 60 days.\\n * `7 day` - The rental period is 7 days.\\n * `72 hour` - The rental period is 72 hours.\\n\"\n                  enum:\n                    - '1 day'\n                    - '1 month'\n                    - '1 week'\n                    - '1 year'\n                    - '2 day'\n                    - '24 hour'\n                    - '3 day'\n                    - '3 month'\n                    - '30 day'\n                    - '48 hour'\n                    - '6 month'\n                    - '60 day'\n                    - '7 day'\n                    - '72 hour'\n                  example: '1 day'\n                  nullable: true\n                  type: string\n                price:\n                  description: 'The default price to rent an episode.'\n                  example: 2.99\n                  nullable: true\n                  type: number\n              required:\n                - active\n                - period\n                - price\n              type: object\n          required:\n            - buy\n            - rent\n          type: object\n        film:\n          allOf:\n            -\n              $ref: '#/components/schemas/video'\n          description: 'This On Demand page''s film, if it is a film.'\n        genres:\n          description: 'All the genres assigned to this page.'\n          items:\n            $ref: '#/components/schemas/on-demand-genre'\n          type: array\n        link:\n          description: 'The link to the page on Vimeo.'\n          example: 'https://vimeo.com/ondemand/darbyforever'\n          type: string\n        metadata:\n          description: 'Metadata about the On Demand page.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource, including videos, genres, and pictures connections.'\n              properties:\n                metadata:\n                  properties:\n                    connections:\n                      properties:\n                        comments:\n                          description: 'Information about the comments associated with this page.'\n                          properties:\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of comments on this connection.'\n                              example: 4\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/comments\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        genres:\n                          description: 'Information about the genres associated with this page.'\n                          properties:\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of genres on this connection.'\n                              example: 9\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/genres\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        likes:\n                          description: 'Information about the likes associated with this page.'\n                          properties:\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of likes on this connection.'\n                              example: 15\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/likes\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        pictures:\n                          description: 'Information about the pictures associated with this page.'\n                          properties:\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of pictures on this connection.'\n                              example: 3\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/pictures\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        seasons:\n                          description: 'Information about the seasons associated with this page.'\n                          properties:\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of seasons on this connection.'\n                              example: 3\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/seasons\n                              type: string\n                          required:\n                            - options\n                            - total\n                            - uri\n                          type: object\n                        videos:\n                          description: 'Information about the videos associated with this page.'\n                          properties:\n                            extra_total:\n                              description: 'The total number of extra videos.'\n                              example: 14\n                              type: number\n                            main_total:\n                              description: 'The total number of main videos.'\n                              example: 36\n                              type: number\n                            options:\n                              description: 'An array of HTTP methods permitted on this URI.'\n                              items:\n                                type: string\n                              type: array\n                            total:\n                              description: 'The total number of videos on this connection.'\n                              example: 50\n                              type: number\n                            uri:\n                              description: 'The API URI that resolves to the connection data.'\n                              example: /ondemand/pages/61326/videos\n                              type: string\n                            viewable_total:\n                              description: 'The total number of viewable videos.'\n                              example: 50\n                              type: number\n                          required:\n                            - extra_total\n                            - main_total\n                            - options\n                            - total\n                            - uri\n                            - viewable_total\n                          type: object\n                      required:\n                        - comments\n                        - genres\n                        - likes\n                        - pictures\n                        - seasons\n                        - videos\n                      type: object\n                  required:\n                    - connections\n                  type: object\n              required:\n                - metadata\n              type: object\n            interactions:\n              allOf:\n                -\n                  $ref: '#/components/schemas/purchase-interaction'\n              description: 'The user''s available purchase interactions.'\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: 'he time in ISO 8601 format when the page was last modified.'\n          example: '2017-05-15T13:42:25+00:00'\n          type: string\n        name:\n          description: 'A descriptive title of this On Demand page.'\n          example: 'Darby Forever'\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active poster for this On Demand page.'\n          nullable: true\n        preorder:\n          properties:\n            active:\n              description: 'Whether this page is available for preorder.'\n              example: true\n              type: boolean\n            cancel_time:\n              description: 'The time in ISO 8601 format when the preorder was cancelled.'\n              example: '2017-05-16T13:13:46+00:00'\n              type: string\n            publish_time:\n              description: 'The time in ISO 8601 format when the preorder was released to the public.'\n              example: '2017-05-15T13:12:52+00:00'\n              type: string\n            time:\n              description: 'The time in ISO 8601 format when the preorder started.'\n              example: '2017-05-15T13:13:31+00:00'\n              type: string\n          required:\n            - active\n            - cancel_time\n            - publish_time\n            - time\n          type: object\n        published:\n          properties:\n            enabled:\n              description: 'Whether this On Demand page has been published.'\n              example: true\n              type: boolean\n            time:\n              description: 'The time in IS 8601 format when this page was published.'\n              example: '2017-05-15T13:12:52+00:00'\n              type: string\n          required:\n            - enabled\n            - time\n          type: object\n        rating:\n          description: 'The rating of this page.'\n          example: 7\n          nullable: true\n          type: number\n        resource_key:\n          description: 'The VOD resource key.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        sku:\n          description: 'The creator-designated SKU for this On Demand page.'\n          example: VIME0001\n          nullable: true\n          type: string\n        subscription:\n          description: 'Information about subscribing to this On Demand page, if enabled.'\n          nullable: true\n          properties:\n            active:\n              description: 'Whether this product is active.'\n              example: true\n              type: boolean\n            link:\n              description: 'The link to this product on Vimeo.'\n              example: 'https://vimeo.com/ondemand/darbyforever'\n              nullable: true\n              type: string\n            period:\n              description: 'The product''s rental period.'\n              type: string\n            price:\n              description: 'The accepted currencies and respective pricing for this product.'\n              type: object\n          required:\n            - active\n            - link\n            - price\n          type: object\n        theme:\n          description: 'The graphical theme for this On Demand page.'\n          example: vader\n          type: string\n        thumbnail:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The thumbnail image for the On Demand page on Vimeo.'\n          nullable: true\n        trailer:\n          allOf:\n            -\n              $ref: '#/components/schemas/video'\n          description: 'The trailer for this On Demand page.'\n          nullable: true\n        type:\n          description: \"Whether this On Demand page is for a film or a series.\\n\\nOption descriptions:\\n * `film` - The On Demand page is for a film.\\n * `series` - The On Demand page is for a series.\\n\"\n          enum:\n            - film\n            - series\n          example: film\n          type: string\n        uri:\n          description: 'The relative URI of the On Demand page.'\n          example: /ondemand/pages/61326\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The user who created this On Demand page.'\n          nullable: true\n      required:\n        - background\n        - colors\n        - content_rating\n        - description\n        - domain_link\n        - episodes\n        - genres\n        - link\n        - metadata\n        - name\n        - pictures\n        - preorder\n        - published\n        - rating\n        - resource_key\n        - subscription\n        - theme\n        - thumbnail\n        - trailer\n        - type\n        - uri\n        - user\n      type: object\n    on-demand-promotion:\n      title: 'On Demand Promotion'\n      properties:\n        access_type:\n          description: \"The type of access that this promotion grants:\\n\\nOption descriptions:\\n * `default` - Grants discounts on existing product offerings.\\n * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.\\n\"\n          enum:\n            - default\n            - vip\n          example: default\n          type: string\n        discount_type:\n          description: \"The type of discount for which this promotion can be used.\\n\\nOption descriptions:\\n * `dollars` - The discount is a certain fixed amount.\\n * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.\\n * `percent` - The discount is a certain percentage of the full price.\\n\"\n          enum:\n            - dollars\n            - free\n            - percent\n          example: free\n          type: string\n        download:\n          description: 'Whether this promotion grants download access to On Demand content.'\n          example: true\n          type: boolean\n        label:\n          description: 'The prefix string for batch codes, or the null value for single codes.'\n          example: 8jgaieumbzstujhn8k304iwwezawkvwm\n          nullable: true\n          type: string\n        metadata:\n          description: 'The video''s metadata.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the On Demand promotion.'\n              properties:\n                codes:\n                  description: 'Information about the codes associated with this promotion.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of uses on this connection.'\n                      example: 1\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/pages/61326/promotion/12345/codes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - codes\n              type: object\n          required:\n            - connections\n          type: object\n        percent_off:\n          description: 'The percentage amount that is deducted from the product price.'\n          example: !!float 100\n          type: number\n        product_type:\n          description: \"The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:\\n\\nOption descriptions:\\n * `any` - The promotion can be applied to any product.\\n * `buy` - The promotion can be applied to a buyable single video.\\n * `buy_episode` - The promotion can be applied to a buyable single episode.\\n * `rent` - The promotion can be applied to a rentable single video.\\n * `rent_episode` - The promotion can be applied to a rentable single episode.\\n * `subscribe` - The promotion can be applied to a subscription.\\n\"\n          enum:\n            - any\n            - buy\n            - buy_episode\n            - rent\n            - rent_episode\n            - subscribe\n          example: any\n          type: string\n        stream_period:\n          description: \"The amount of time that the user has access to the VOD content after redeeming a promo code.\\n\\nOption descriptions:\\n * `1_week` - Access lasts for one week.\\n * `1_year` - Access lasts for one year.\\n * `24_hour` - Access lasts for 24 hours.\\n * `30_days` - Access lasts for 30 days.\\n * `3_month` - Access lasts for 3 months.\\n * `48_hour` - Access lasts for 48 hours.\\n * `6_month` - Access lasts for 6 months.\\n * `72_hour` - Access lasts for 72 hours.\\n\"\n          enum:\n            - 1_week\n            - 1_year\n            - 24_hour\n            - 30_days\n            - 3_month\n            - 48_hour\n            - 6_month\n            - 72_hour\n          example: 1_week\n          nullable: true\n          type: string\n        total:\n          description: 'The total amount of times that this promotion can be used.'\n          example: 1\n          type: number\n        type:\n          description: \"The way in which this promotion can generate promo codes:\\n\\nOption descriptions:\\n * `batch` - Provides many unique promo codes that can only be used once each.\\n * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.\\n * `single` - Provides a single promo code with many uses.\\n\"\n          enum:\n            - batch\n            - batch_prefix\n            - single\n          example: batch\n          type: string\n        uri:\n          description: 'The promotion''s canonical relative URI.'\n          example: /ondemand/pages/61326/promotions/12345\n          type: string\n      required:\n        - access_type\n        - discount_type\n        - download\n        - label\n        - metadata\n        - percent_off\n        - product_type\n        - stream_period\n        - total\n        - type\n        - uri\n      type: object\n    on-demand-promotion-code:\n      title: 'On Demand Promotion Code'\n      properties:\n        code:\n          description: 'A promotion code that can be redeemed on Vimeo.'\n          example: 8jgaieumbzstujhn8k304iwwezawkvwm\n          type: string\n        link:\n          description: 'A link to redeem the promotion code instantly.'\n          example: 'https://vimeo.com/r/0trBLg/OGpnYWlldW'\n          type: string\n        max_uses:\n          description: 'The total amount of times this code can be used.'\n          example: 1\n          type: number\n        uses:\n          description: 'The number of times that this code has been used.'\n          example: 0\n          type: number\n      required:\n        - code\n        - link\n        - max_uses\n        - uses\n      type: object\n    on-demand-region:\n      title: 'On Demand Region'\n      properties:\n        country_code:\n          description: 'The ISO 3166-1 alpha-2 code for this country.'\n          example: US\n          type: string\n        country_name:\n          description: 'The descriptive name of this country.'\n          example: 'United States'\n          type: string\n        uri:\n          description: 'The region container''s relative URI.'\n          example: /ondemand/pages/61326/regions/US\n          type: string\n      required:\n        - country_code\n        - country_name\n        - uri\n      type: object\n    on-demand-season:\n      title: 'On Demand Season'\n      properties:\n        description:\n          description: 'The description for this season.'\n          example: 'Season 1'\n          type: string\n        metadata:\n          properties:\n            connections:\n              properties:\n                videos:\n                  description: 'The Videos connection.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 13\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection ∂data.'\n                      example: /ondemand/pages/61326/season/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: 'The descriptive name of the season.'\n          example: 'Season 1'\n          type: string\n        position:\n          description: 'The position of the season relative to other seasons in the series.'\n          example: 1\n          type: number\n        resource_key:\n          description: 'The unique identifier for this On Demand season.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        type:\n          description: 'The type of season.'\n          example: main\n          type: string\n        uri:\n          description: 'The season container''s relative URI.'\n          example: /ondemand/pages/61326/seasons/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The creator of this On Demand page.'\n          nullable: true\n      required:\n        - description\n        - metadata\n        - name\n        - position\n        - resource_key\n        - type\n        - uri\n        - user\n      type: object\n    on-demand-video:\n      title: 'On Demand Video'\n      properties:\n        buy:\n          description: 'Information about purchasing this video.'\n          nullable: true\n          properties:\n            active:\n              description: 'Whether this On Demand video can be purchased.'\n              example: true\n              type: boolean\n            price:\n              description: 'A map of currency type to price.'\n              type: object\n            purchased:\n              description: 'Whether this On Demand video has been purchased.'\n              example: true\n              type: boolean\n          required:\n            - active\n            - price\n          type: object\n        description:\n          description: 'Description of the On Demand video.'\n          example: 'DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins \u0026 Notions\".'\n          type: string\n        duration:\n          description: 'The duration of the On Demand video.'\n          example: '1197'\n          type: string\n        episode:\n          description: 'The episode number of the On Demand video.'\n          example: 1\n          type: number\n        interactions:\n          description: 'An object containing information about how the authenticated user can interact with this On Demand page.'\n          properties:\n            page:\n              description: 'Information about how the authenticated user can interact with the connection to the video''s On Demand page.'\n              properties:\n                added:\n                  description: 'Whether this On Demand page was added.'\n                  example: true\n                  type: boolean\n                options:\n                  description: 'An array of HTTP methods permitted on this URI.'\n                  items:\n                    type: string\n                  type: array\n                uri:\n                  description: 'The URI to access the On Demand page.'\n                  example: /ondemand/pages/61326\n                  type: string\n              required:\n                - added\n                - options\n                - uri\n              type: object\n          required:\n            - page\n          type: object\n        link:\n          description: 'The link to this video on Vimeo.'\n          example: 'https://vimeo.com/ondemand/darbyforever/12345'\n          type: string\n        metadata:\n          description: 'Metadata information about this video.'\n          properties:\n            connections:\n              properties:\n                season:\n                  description: 'Information about this season.'\n                  properties:\n                    name:\n                      description: 'The name of the season on this connection.'\n                      example: 'Season 1'\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/pages/61326/seasons/12345\n                      type: string\n                  required:\n                    - name\n                    - options\n                    - uri\n                  type: object\n              required:\n                - season\n              type: object\n            interactions:\n              properties:\n                likes:\n                  description: 'Information about the user''s Like interactions with this video.'\n                  properties:\n                    added:\n                      description: 'Whether the user has liked this video.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user liked this video.'\n                      example: '2017-05-12T21:42:42+00:00'\n                      type: string\n                    uri:\n                      description: 'The URI for the user to like this video.'\n                      example: /users/152184/likes/12345\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n                watchlater:\n                  description: 'Information about the user''s Watch Later interactions with this video.'\n                  properties:\n                    added:\n                      description: 'Whether the user has added this video to their Watch Later queue.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user added this video to their Watch Later queue.'\n                      example: '2017-05-12T21:42:42+00:00'\n                      type: string\n                    uri:\n                      description: 'The URI for the user to add this video to their Watch Later queue.'\n                      example: /users/152184/watchlater/12345\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - uri\n                  type: object\n              required:\n                - likes\n                - watchlater\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: 'The title of the On Demand video.'\n          example: 'Darby Forever'\n          type: string\n        options:\n          description: 'An array of HTTP methods permitted on this URI.'\n          items:\n            type: string\n          type: array\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active picture for this video.'\n        play_progress:\n          description: 'The user''s most recent play position in seconds for this video.'\n          example: 30\n          type: number\n        position:\n          description: 'Describes the manual position of this video relative to the other videos owned by this On Demand page.'\n          example: 1\n          type: number\n        release_date:\n          description: 'The time in ISO 8601 format when the On Demand video was created or published.'\n          example: '2017-05-12T21:06:42+00:00'\n          type: string\n        release_year:\n          description: 'The year that this On Demand video was released.'\n          example: 2016\n          nullable: true\n          type: number\n        rent:\n          description: 'Information about renting this video.'\n          nullable: true\n          properties:\n            active:\n              description: 'Whether this On Demand video can be rented.'\n              example: true\n              type: boolean\n            price:\n              description: 'A map of currency type to price.'\n              type: object\n            purchased:\n              description: 'Whether this On Demand video has been rented.'\n              example: true\n              type: boolean\n          required:\n            - active\n            - price\n          type: object\n        type:\n          description: \"The type of the On Demand video:\\n\\nOption descriptions:\\n * `extra` - The On Demand video is an extra feature.\\n * `main` - The On Demand video is a main feature.\\n * `trailer` - The On Demand video is a trailer.\\n\"\n          enum:\n            - extra\n            - main\n            - trailer\n          example: main\n          type: string\n        uri:\n          description: 'The video container''s relative URI.'\n          example: /ondemand/pages/61326/videos/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the video.'\n      required:\n        - buy\n        - interactions\n        - link\n        - metadata\n        - play_progress\n        - release_year\n        - rent\n        - type\n        - uri\n      type: object\n    picture:\n      title: Picture\n      properties:\n        active:\n          description: 'Whether this picture is the active picture for its parent resource.'\n          example: true\n          type: boolean\n        link:\n          description: 'The upload URL for the picture. This field appears when you create the picture resource for the first time.'\n          type: string\n        resource_key:\n          description: 'The picture''s resource key string.'\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        sizes:\n          description: 'An array containing reference information about all available image files.'\n          items:\n            type: object\n            properties:\n              height:\n                description: 'The height of the image.'\n                example: 720\n                nullable: true\n                type: number\n              link:\n                description: 'The direct link to the image.'\n                example: 'https://i.vimeocdn.com/video/581495283_1280x720.jpg?r=pad'\n                type: string\n              link_with_play_button:\n                description: 'The direct link to the image with a play button overlay.'\n                example: 'https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F581495283_1280x720.jpg\u0026src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png'\n                type: string\n              width:\n                description: 'The width of the image.'\n                example: 1280\n                type: number\n            required:\n              - height\n              - link\n              - width\n          type: array\n        type:\n          description: \"The type of the picture:\\n\\nOption descriptions:\\n * `caution` - An image that is appropriate for all ages.\\n * `custom` - A custom image for the video.\\n * `default` - The default image for the video.\\n\"\n          enum:\n            - caution\n            - custom\n            - default\n          example: caution\n          type: string\n        uri:\n          description: 'The picture''s URI.'\n          example: /users/152184/pictures/12345\n          type: string\n      required:\n        - active\n        - resource_key\n        - sizes\n        - type\n        - uri\n      type: object\n    play:\n      title: Play\n      properties:\n        progressive:\n          description: 'Progressive files.'\n          items:\n            type: object\n            properties:\n              created_time:\n                description: 'The time in ISO 8601 format when this video file was created.'\n                example: '2017-05-16T17:21:51+00:00'\n                type: string\n              fps:\n                description: 'The FPS of the video file.'\n                example: 30\n                type: number\n              height:\n                description: 'The height in pixels of the video.'\n                example: 720\n                nullable: true\n                type: number\n              link:\n                description: 'The direct link to this video file.'\n                type: string\n              link_expiration_time:\n                description: 'The time in ISO 8601 format when the link to this video file expires.'\n                example: '2017-05-16T17:21:51+00:00'\n                type: string\n              log:\n                description: 'The URLs for logging events.'\n                type: object\n              md5:\n                description: 'The MD5 hash of the video file.'\n                example: 1bc29b36f623ba82aaf6724fd3b16718\n                type: string\n              size:\n                description: 'The file size in bytes of this video.'\n                example: 5000000\n                nullable: true\n                type: number\n              type:\n                description: \"The type of the video file:\\n\\nOption descriptions:\\n * `source` - The video is a source file.\\n * `video/mp4` - The video is in MP4 format.\\n * `video/webm` - The video is in WebM format.\\n * `vp6/x-video` - The video is in VP6 format.\\n\"\n                enum:\n                  - source\n                  - video/mp4\n                  - video/webm\n                  - vp6/x-video\n                example: source\n                nullable: true\n                type: string\n              width:\n                description: 'The width in pixels of the video.'\n                example: 1280\n                nullable: true\n                type: number\n            required:\n              - created_time\n              - fps\n              - height\n              - link\n              - link_expiration_time\n              - md5\n              - size\n              - type\n              - width\n          type: array\n        status:\n          description: \"The play status of the video:\\n\\nOption descriptions:\\n * `playable` - The video is playable.\\n * `purchase_required` - The video must be purchased.\\n * `restricted` - Playback for the video is restricted.\\n * `unavailable` - The video is unavailable.\\n\"\n          enum:\n            - playable\n            - purchase_required\n            - restricted\n            - unavailable\n          example: playable\n          type: string\n      required:\n        - status\n      type: object\n    portfolio:\n      title: Portfolio\n      properties:\n        created_time:\n          description: 'The time in ISO 8601 format when the portfolio was created.'\n          example: '2017-05-16T19:56:07+00:00'\n          type: string\n        description:\n          description: 'The portfolio''s description.'\n          example: 'The Vimeo Staff original productions.'\n          nullable: true\n          type: string\n        link:\n          description: 'The link to the portfolio.'\n          example: 'https://vimeopro.com/staff/originals'\n          type: string\n        metadata:\n          description: 'Metadata about the album.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the album.'\n              properties:\n                videos:\n                  description: 'Information about the videos contained within this portfolio.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 18\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/portfolios/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the portfolio''s data was last modified.'\n          example: '2017-05-17T19:56:07+00:00'\n          type: string\n        name:\n          description: 'The display name of the portfolio.'\n          example: 'Vimeo Originals!'\n          type: string\n        sort:\n          description: \"The default video sort order for the portfolio:\\n\\nOption descriptions:\\n * `alphabetical` - The default sort order is alphabetical by name.\\n * `clips` - The default sort order is video creation date.\\n * `modified` - The default sort order is the order in which the videos were modified.\\n * `recent` - The default sort order is the order in which the videos were added.\\n\"\n          enum:\n            - alphabetical\n            - clips\n            - modified\n            - recent\n          example: alphabetical\n          type: string\n        uri:\n          description: 'The canonical relative URI of the portfolio.'\n          example: /users/152184/portfolios/12345\n          type: string\n      required:\n        - created_time\n        - description\n        - link\n        - metadata\n        - modified_time\n        - name\n        - sort\n        - uri\n      type: object\n    presets:\n      title: Presets\n      properties:\n        metadata:\n          description: 'Metadata about the album.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the album.'\n              properties:\n                videos:\n                  description: 'Information about the videos in this preset.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 13\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/presets/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: 'The display name of the presets group.'\n          example: Minimalism\n          type: string\n        settings:\n          description: 'The contents of the presets group.'\n          properties:\n            buttons:\n              properties:\n                embed:\n                  description: 'Whether the preset includes Embed button settings.'\n                  example: true\n                  type: boolean\n                hd:\n                  description: 'Whether the preset includes HD button settings.'\n                  example: true\n                  type: boolean\n                like:\n                  description: 'Whether the preset includes Like button settings.'\n                  example: true\n                  type: boolean\n                share:\n                  description: 'Whether the present includes Share button settings.'\n                  example: true\n                  type: boolean\n                vote:\n                  description: 'Whether the preset includes Vote button settings.'\n                  example: true\n                  type: boolean\n                watchlater:\n                  description: 'Whether the preset includes Watch Later button settings.'\n                  example: true\n                  type: boolean\n              required:\n                - embed\n                - hd\n                - like\n                - share\n                - vote\n                - watchlater\n              type: object\n            logos:\n              properties:\n                custom:\n                  description: 'Whether the preset includes custom logo settings.'\n                  example: true\n                  type: boolean\n                sticky_custom:\n                  description: 'Whether the present includes sticky custom logo settings.'\n                  example: true\n                  type: boolean\n                vimeo:\n                  description: 'Whether the preset includes Vimeo logo settings.'\n                  example: true\n                  type: boolean\n              required:\n                - custom\n                - sticky_custom\n                - vimeo\n              type: object\n            outro:\n              properties:\n                clips:\n                  description: 'A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.'\n                  example: '/videos/258684937,/videos/273576296'\n                  nullable: true\n                  type: string\n                link:\n                  description: 'The outro link settings. Present only if the type is `link`.'\n                  nullable: true\n                  properties:\n                    name:\n                      description: 'The name of the outro link.'\n                      example: 'Example Outro'\n                      type: string\n                    url:\n                      description: 'The URL of the outro link.'\n                      example: 'https://example.com'\n                      type: string\n                  type: object\n                text:\n                  description: 'The outro text. Present only if the type is `text`.'\n                  example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'\n                  nullable: true\n                  type: string\n                type:\n                  description: 'The preset outro type:'\n                  enum:\n                    - link\n                    - 'no idea'\n                    - text\n                    - uploaded_clips\n                    - uploaded_videos\n                  example: link\n                  type: string\n                videos:\n                  description: 'A comma-separated list of video URIs. Present only if type is `no idea`.'\n                  example: '/videos/258684937,/videos/273576296'\n                  nullable: true\n                  type: string\n              required:\n                - type\n              type: object\n          required:\n            - buttons\n            - logos\n            - outro\n          type: object\n        uri:\n          description: 'The canonical relative URI of the presets object.'\n          example: /users/152184/presets/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the preset.'\n          nullable: true\n      required:\n        - metadata\n        - name\n        - settings\n        - uri\n        - user\n      type: object\n    project:\n      title: Project\n      properties:\n        created_time:\n          description: 'The time in ISO 8601 format when the project was created.'\n          example: '2017-05-23T14:36:22+00:00'\n          type: string\n        metadata:\n          description: 'The project''s metadata.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the project.'\n              properties:\n                videos:\n                  description: 'A standard connection object indicating how to get all the videos in this project.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 12\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/projects/12345/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the project was last modified.'\n          example: '2017-05-23T14:36:22+00:00'\n          type: string\n        name:\n          description: 'The name of the folder.'\n          example: 'Rough cuts'\n          type: string\n        resource_key:\n          description: 'The resource key string of the project.'\n          example: dc724af18fbdd4e59189f5fe768a5f8311527050\n          type: string\n        uri:\n          description: 'The URI of the project.'\n          example: /me/projects/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the project.'\n      required:\n        - created_time\n        - metadata\n        - modified_time\n        - name\n        - resource_key\n        - uri\n        - user\n      type: object\n    purchase-interaction:\n      title: 'Purchase Interaction'\n      properties:\n        buy:\n          description: 'Information on purchasing this video.'\n          nullable: true\n          properties:\n            drm:\n              description: 'Whether the On Demand video for purchase has DRM.'\n              example: true\n              type: boolean\n          type: object\n        rent:\n          description: 'Information on renting this video.'\n          nullable: true\n          type: object\n        subscribe:\n          description: 'Information on subscribing to this video.'\n          nullable: true\n          properties:\n            drm:\n              description: 'Whether the On Demand subscription has DRM.'\n              example: true\n              type: boolean\n            expires_time:\n              description: 'The time in ISO 8601 format when the On Demand video will expire.'\n              example: '2018-03-05T21:04:47+00:00'\n              nullable: true\n              type: string\n            link:\n              description: 'The URL to purchase this On Demand subscription on Vimeo.'\n              example: 'https://vimeo.com/ondemand/darbyforever'\n              nullable: true\n              type: string\n            purchase_time:\n              description: 'The time in ISO 8601 format when the On Demand was purchased.'\n              example: '2018-03-05T21:04:47+00:00'\n              nullable: true\n              type: string\n            stream:\n              description: \"The user's streaming access to this On Demand subscription:\\n\\nOption descriptions:\\n * `available` - The On Demand subscription is available for streaming.\\n * `purchased` - The On Demand subscription has been purchased.\\n * `restricted` - Streaming for the On Demand subscription is restricted.\\n * `unavailable` - The On Demand subscription is unavailable.\\n\"\n              enum:\n                - available\n                - purchased\n                - restricted\n                - unavailable\n              example: available\n              type: string\n            uri:\n              description: 'The On Demand subscription''s product URI.'\n              example: /ondemand/pages/61326/products/12345\n              nullable: true\n              type: string\n          type: object\n      type: object\n    tag:\n      title: Tag\n      properties:\n        canonical:\n          description: 'The normalized canonical tag name.'\n          example: awesome\n          type: string\n        metadata:\n          description: 'Metadata about the group.'\n          properties:\n            connections:\n              description: 'A collection of information that is connected to this resource.'\n              properties:\n                videos:\n                  description: 'Information about the videos related to this tag.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 34371\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /tags/awesome/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - videos\n              type: object\n          required:\n            - connections\n          type: object\n        name:\n          description: 'The tag value.'\n          example: awesome\n          type: string\n        resource_key:\n          description: 'The tag''s resource key string.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        uri:\n          description: 'The canonical relative URI of the tag.'\n          example: /videos/258684937/tags/awesome\n          type: string\n      required:\n        - canonical\n        - metadata\n        - name\n        - resource_key\n        - uri\n      type: object\n    text-track:\n      title: 'Text Track'\n      properties:\n        active:\n          description: 'Whether this text track is active.'\n          example: true\n          type: boolean\n        hls_link:\n          description: 'The read-only URL of the text track file, intended for use with HLS playback.'\n          type: string\n        hls_link_expires_time:\n          description: 'The time in ISO 8601 format when the read-only HLS playback text track file expires.'\n          example: '1494888499'\n          type: string\n        language:\n          description: \"The language code for this text track. To see a full list, request\\n`/languages?filter=texttrack`.\"\n          example: en-US\n          nullable: true\n          type: string\n        link:\n          description: 'The read-only URL of the text track file. You can upload to this link when you create it for the first time.'\n          type: string\n        link_expires_time:\n          description: 'The time in ISO 8601 format when the text track link expires.'\n          example: '1494888499'\n          type: string\n        name:\n          description: 'The descriptive name of this text track.'\n          example: 'English Subtitles'\n          nullable: true\n          type: string\n        type:\n          description: \"The type of the text track:\\n\\nOption descriptions:\\n * `captions` - The text track is for captions.\\n * `subtitles` - The text track is for subtitles.\\n\"\n          enum:\n            - captions\n            - subtitles\n          example: captions\n          nullable: true\n          type: string\n        uri:\n          description: 'The relative URI of the text track.'\n          example: /videos/258684937/texttracks/12345\n          type: string\n      required:\n        - active\n        - hls_link\n        - hls_link_expires_time\n        - language\n        - link\n        - link_expires_time\n        - name\n        - type\n        - uri\n      type: object\n    upload-attempt:\n      title: 'Upload Attempt'\n      properties:\n        clip:\n          allOf:\n            -\n              $ref: '#/components/schemas/video'\n          description: 'The video to upload.'\n        complete_uri:\n          description: 'The completion URI of the upload.'\n          example: '/users/152184/uploads/12345?video_file_id=5678\u0026upgrade=true\u0026signature=r394y347ffefeff434'\n          type: string\n        form:\n          description: 'The HTML upload form.'\n          type: string\n        ticket_id:\n          description: 'The ticket identifier string for the upload.'\n          example: 3da5dac09\n          type: string\n        upload_link:\n          description: 'The upload URL.'\n          example: 'https://123456.cloud.vimeo.com/upload?ticket_id=1234asdf'\n          type: string\n        uri:\n          description: 'The upload URI.'\n          example: /users/152184/uploads/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the uploaded video.'\n      required:\n        - ticket_id\n        - upload_link\n        - uri\n        - user\n      type: object\n    user:\n      title: User\n      properties:\n        account:\n          description: \"The user's account type:\\n\\nOption descriptions:\\n * `basic` - The user has a Vimeo Basic subscription.\\n * `business` - The user has a Vimeo Business subscription.\\n * `live_business` - The user has a Vimeo Business Live subscription.\\n * `live_premium` - The user has a Vimeo Premium subscription.\\n * `live_pro` - The user has a Vimeo PRO Live subscription.\\n * `plus` - The user has a Vimeo Plus subscription.\\n * `pro` - The user has a Vimeo Pro subscription.\\n * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.\\n * `producer` - The user has a Vimeo Producer subscription.\\n\"\n          enum:\n            - basic\n            - business\n            - live_business\n            - live_premium\n            - live_pro\n            - plus\n            - pro\n            - pro_unlimited\n            - producer\n          example: basic\n          type: string\n        bio:\n          description: 'The user''s bio.'\n          example: 'This is where you will find videos and news updates from the staff.'\n          nullable: true\n          type: string\n        content_filter:\n          description: \"The user's content filters:\\n\\nOption descriptions:\\n * `drugs` - Drugs or alcohol use.\\n * `language` - Profanity or sexually suggestive content.\\n * `nudity` - Nudity.\\n * `safe` - Suitable for all audiences.\\n * `unrated` - No rating.\\n * `violence` - Violent or graphic content.\\n\"\n          enum:\n            - drugs\n            - language\n            - nudity\n            - safe\n            - unrated\n            - violence\n          example: drugs\n          items:\n            type: string\n          type: array\n        created_time:\n          description: 'The time in ISO 8601 format when the user account was created.'\n          example: '2007-01-18T16:40:11+00:00'\n          type: string\n        email:\n          description: 'The user''s email address. This data requires a bearer token with the `email` scope.'\n          example: user@example.com\n          type: string\n        link:\n          description: 'The absolute URL of this user''s profile page.'\n          example: 'https://vimeo.com/staff'\n          type: string\n        location:\n          description: 'The user''s location.'\n          example: 'New York City'\n          nullable: true\n          type: string\n        metadata:\n          description: 'The user''s metadata.'\n          properties:\n            connections:\n              description: 'The list of resource URIs related to the user.'\n              properties:\n                albums:\n                  description: 'Information about the albums created by this user.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of albums on this connection.'\n                      example: 3\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/albums\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                appearances:\n                  description: 'Information about the appearances of this user in other videos.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of appearances on this connection.'\n                      example: 6\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/appearances\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                block:\n                  description: 'Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 73\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /me/block\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                categories:\n                  description: 'Information about this user''s followed categories.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of categories on this connection.'\n                      example: 5\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/categories\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                channels:\n                  description: 'Information about this user''s subscribed channels.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of channels on this connection.'\n                      example: 4\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                feed:\n                  description: 'Information about this user''s feed.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/feed\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                folders:\n                  description: 'Information about this user''s folders.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of folders on this connection.'\n                      example: 9\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /me/folders\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                followers:\n                  description: 'Information about the user''s followers.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of followers on this connection.'\n                      example: 12\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/followers\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                following:\n                  description: 'Information about the users that the current user is following.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 47\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/following\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                groups:\n                  description: 'Information about the groups created by this user.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of groups on this connection.'\n                      example: 2\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/groups\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                likes:\n                  description: 'Information about the videos that this user has liked.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of likes on this connection.'\n                      example: 300\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/likes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                moderated_channels:\n                  description: 'Information about the channels that this user moderates.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of channels on this connection.'\n                      example: 1\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: '/users/152184/channels?filter=moderated'\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                pictures:\n                  description: 'Information about this user''s portraits.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of pictures on this connection.'\n                      example: 3\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/pictures\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                portfolios:\n                  description: 'Information about this user''s portfolios.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of portfolios on this connection.'\n                      example: 5\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/portfolios\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                recommended_channels:\n                  description: 'A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of channels on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 4\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /me/recommendations/channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                recommended_users:\n                  description: 'A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 6\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /me/recommendations/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                shared:\n                  description: 'Information about the videos that have been shared with this user.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 15\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/shared/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                videos:\n                  description: 'Information about the videos uploaded by this user.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 36\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                watched_videos:\n                  description: 'Information about the videos that this user has watched.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 322\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /me/watched/videos\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                watchlater:\n                  description: 'Information about the videos that this user wants to watch later.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 14\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/watchlater\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - albums\n                - appearances\n                - block\n                - categories\n                - channels\n                - feed\n                - folders\n                - followers\n                - following\n                - groups\n                - likes\n                - moderated_channels\n                - pictures\n                - portfolios\n                - recommended_channels\n                - recommended_users\n                - shared\n                - videos\n                - watched_videos\n                - watchlater\n              type: object\n            interactions:\n              properties:\n                add_privacy_user:\n                  properties:\n                    options:\n                      description: 'An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /channels/152184/privacy/users\n                      type: string\n                  type: object\n                block:\n                  description: 'Information related to the block status of this user.'\n                  properties:\n                    added:\n                      description: 'Whether a user is blocking the current user.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the block occurred, or the null value if no block exists.'\n                      example: '2017-05-16T15:05:43+00:00'\n                      nullable: true\n                      type: string\n                    options:\n                      description: 'An array of the HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The URI to block or unblock the user.'\n                      example: /me/block/3766357\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                follow:\n                  description: 'Information related to the followed status of this user.'\n                  properties:\n                    added:\n                      description: 'Whether a user is following the current user.'\n                      example: true\n                      type: boolean\n                    options:\n                      description: 'An array of the HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The URI to follow the user.'\n                      example: /users/152184/following/3766357\n                      type: string\n                  required:\n                    - added\n                    - options\n                    - uri\n                  type: object\n                report:\n                  description: 'Information regarding where and how to report a user.'\n                  properties:\n                    options:\n                      description: 'An array of the HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    reason:\n                      description: 'List of valid reasons for reporting a video.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /users/152184/report\n                      type: string\n                  required:\n                    - options\n                    - reason\n                    - uri\n                  type: object\n              required:\n                - block\n                - follow\n                - report\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        name:\n          description: 'The user''s display name.'\n          example: 'Vimeo Staff'\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active portrait of this user.'\n        preferences:\n          properties:\n            videos:\n              properties:\n                privacy:\n                  properties:\n                    add:\n                      description: 'Whether other users can add the user''s videos.'\n                      example: true\n                      type: boolean\n                    comments:\n                      description: \"The user's privacy preference for comments:\\n\\nOption descriptions:\\n * `anybody` - Anyone can comment on the user's videos.\\n * `contacts` - Only contacts can comment on the user's videos.\\n * `nobody` - No one can comment on the user's videos.\\n\"\n                      enum:\n                        - anybody\n                        - contacts\n                        - nobody\n                      example: anybody\n                      type: string\n                    download:\n                      description: 'Whether other users can download the user''s videos.'\n                      example: true\n                      type: boolean\n                    embed:\n                      description: \"The user's privacy preference for embeds:\\n\\nOption descriptions:\\n * `private` - Only the user can embed their own videos.\\n * `public` - Anyone can embed the user's videos.\\n * `whitelist` - Only those on the whitelist can embed the user's videos.\\n\"\n                      enum:\n                        - private\n                        - public\n                        - whitelist\n                      example: private\n                      type: string\n                    view:\n                      description: \"The user's privacy preference for views:\\n\\nOption descriptions:\\n * `anybody` - Anyone can view the user's videos.\\n * `contacts` - Only contacts can view the user's videos.\\n * `disable` - Views are disabled for the user's videos.\\n * `nobody` - No one except the user can view the user's videos.\\n * `password` - Only those with the password can view the user's videos.\\n * `unlisted` - Anybody can view the user's videos if they have a link.\\n * `users` - Only other Vimeo members can view the user's videos.\\n\"\n                      enum:\n                        - anybody\n                        - contacts\n                        - disable\n                        - nobody\n                        - password\n                        - unlisted\n                        - users\n                      example: anybody\n                      type: string\n                  type: object\n              type: object\n          type: object\n        resource_key:\n          description: 'The user''s resource key string.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        upload_quota:\n          description: 'Appears only when the user has upload access and is looking at their own user record.'\n          properties:\n            lifetime:\n              description: 'Information about the user''s lifetime upload usage.'\n              properties:\n                free:\n                  description: 'The number of bytes remaining in your lifetime maximum.'\n                  example: 5000000\n                  nullable: true\n                  type: number\n                max:\n                  description: 'The total number of bytes that you can upload across the lifetime of your account.'\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                used:\n                  description: 'The number of bytes that you''ve already uploaded against your lifetime limit.'\n                  example: 5368704120\n                  nullable: true\n                  type: number\n              required:\n                - free\n                - max\n                - used\n              type: object\n            periodic:\n              description: 'Information about the user''s usage for the current period.'\n              properties:\n                free:\n                  description: 'The number of bytes remaining in your upload quota for the current period.'\n                  example: 5000000\n                  nullable: true\n                  type: number\n                max:\n                  description: 'The total number of bytes that you can upload per period.'\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                reset_date:\n                  description: 'The time in ISO 8601 format when your upload quota resets.'\n                  example: '2029-03-13T02:35:13-04:00'\n                  nullable: true\n                  type: string\n                used:\n                  description: 'The number of bytes that you''ve already uploaded against your quota in the current period.'\n                  example: 5368704120\n                  nullable: true\n                  type: number\n              required:\n                - free\n                - max\n                - reset_date\n                - used\n              type: object\n            space:\n              description: 'Information about the user''s upload space remaining for the current period.'\n              properties:\n                free:\n                  description: 'The number of bytes remaining in your upload quota.'\n                  example: 5000000\n                  type: number\n                max:\n                  description: 'The maximum number of bytes allotted to your upload quota.'\n                  example: 5368709120\n                  nullable: true\n                  type: number\n                showing:\n                  description: 'Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.'\n                  enum:\n                    - lifetime\n                    - periodic\n                  example: lifetime\n                  type: string\n                used:\n                  description: 'The number of bytes that you''ve already uploaded against your quota.'\n                  example: 5368704120\n                  type: number\n              required:\n                - free\n                - max\n                - showing\n                - used\n              type: object\n          required:\n            - lifetime\n            - periodic\n            - space\n          type: object\n        uri:\n          description: 'The user''s canonical relative URI.'\n          example: /users/152184\n          type: string\n        websites:\n          description: 'The user''s websites.'\n          items:\n            type: object\n            properties:\n              description:\n                description: 'The website''s description.'\n                example: 'Follow us on Twitter!'\n                nullable: true\n                type: string\n              link:\n                description: 'The URL of the website.'\n                example: 'https://twitter.com/vimeo'\n                type: string\n              name:\n                description: 'The name of the website.'\n                example: Twitter\n                nullable: true\n                type: string\n            required:\n              - description\n              - link\n              - name\n          type: array\n      required:\n        - account\n        - bio\n        - created_time\n        - link\n        - location\n        - metadata\n        - name\n        - pictures\n        - resource_key\n        - upload_quota\n        - uri\n        - websites\n      type: object\n    video:\n      title: Video\n      properties:\n        categories:\n          description: 'The categories to which this video belongs.'\n          items:\n            $ref: '#/components/schemas/category'\n          type: array\n        content_rating:\n          description: 'The content ratings of this video.'\n          items:\n            type: string\n          type: array\n        context:\n          description: 'The context of the video''s subscription, if this video is part of a subscription.'\n          properties:\n            action:\n              description: \"The contextual action:\\n\\nOption descriptions:\\n * `Added to` - An Added To action.\\n * `Appearance by` - An Appearance By action.\\n * `Liked by` - A Liked By action.\\n * `Uploaded by` - An Unloaded By action.\\n\"\n              enum:\n                - 'Added to'\n                - 'Appearance by'\n                - 'Liked by'\n                - 'Uploaded by'\n              example: 'Added to'\n              type: string\n            resource:\n              description: 'The contextual resource: a user, group, or channel representation, or an object of a tag.'\n              nullable: true\n              type: object\n            resource_type:\n              description: 'The contextual resource type.'\n              example: clip\n              type: string\n          required:\n            - action\n            - resource\n            - resource_type\n          type: object\n        created_time:\n          description: 'The time in ISO 8601 format when the video was created.'\n          example: '2018-03-05T21:04:47+00:00'\n          type: string\n        description:\n          description: 'A brief explanation of the video''s content.'\n          example: 'A celebration of 10 years of Staff Picks.'\n          nullable: true\n          type: string\n        duration:\n          description: 'The video''s duration in seconds.'\n          example: 81\n          type: number\n        embed:\n          allOf:\n            -\n              $ref: '#/components/schemas/embed-settings'\n          description: 'Information about embedding this video.'\n        height:\n          description: 'The video''s height in pixels.'\n          example: 1080\n          type: number\n        language:\n          description: 'The video''s primary language.'\n          example: en-US\n          nullable: true\n          type: string\n        last_user_action_event_date:\n          description: 'The time in ISO 8601 format when the user last modified the video.'\n          example: '2018-03-21T23:08:22+00:00'\n          nullable: true\n          type: string\n        license:\n          description: \"The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:\\n\\nOption descriptions:\\n * `by` - Attribution\\n * `by-nc` - Attribution Non-Commercial\\n * `by-nc-nd` - Attribution Non-Commercial No Derivatives\\n * `by-nc-sa` - Attribution Non-Commercial Share Alike\\n * `by-nd` - Attribution No Derivatives\\n * `by-sa` - Attribution Share Alike\\n * `cc0` - Public Domain Dedication\\n\"\n          enum:\n            - by\n            - by-nc\n            - by-nc-nd\n            - by-nc-sa\n            - by-nd\n            - by-sa\n            - cc0\n          example: by\n          type: string\n        link:\n          description: 'The link to the video.'\n          example: 'https://vimeo.com/258684937'\n          type: string\n        metadata:\n          description: 'The video''s metadata.'\n          properties:\n            connections:\n              description: 'A list of resource URIs related to the video.'\n              properties:\n                available_albums:\n                  description: 'Information about the albums to which this video may be added. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of albums on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 14\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /videos/258684937/videos/available_albums\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                available_channels:\n                  description: 'Information about the channels to which this video may be added. This data requires a bearer token with the `private` scope.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of channels on this connection. This data requires a bearer token with the `private` scope.'\n                      example: 14\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.'\n                      example: /videos/258684937/videos/available_channels\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                comments:\n                  description: 'Information about the comments on this video.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of comments on this connection.'\n                      example: 14\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/comments\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                credits:\n                  description: 'Information about the users credited in this video.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 4\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/credits\n                      type: string\n                  type: object\n                likes:\n                  description: 'Information about the users who have liked this video.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of likes on this connection.'\n                      example: 230\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/likes\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                ondemand:\n                  description: 'Information about this video''s ondemand data.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    resource_key:\n                      description: 'The On Demand connection resource key.'\n                      example: bac1033deba2310ebba2caec33c23e4beea67aba\n                      type: string\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/pages/61326\n                      type: string\n                  required:\n                    - options\n                    - resource_key\n                    - uri\n                  type: object\n                pictures:\n                  description: 'Information about this video''s thumbnails.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods allowed on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'Total number of thumbnails on this connection.'\n                      example: 1\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/pictures\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                playback:\n                  description: 'The DRM playback status connection for this video.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/playback\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                recommendations:\n                  description: 'The recommendations for this video.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods allowed on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/recommendations\n                      type: string\n                  type: object\n                related:\n                  description: 'Related content for this video.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods allowed on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: '/videos/258684937?offset=10'\n                      type: string\n                  type: object\n                season:\n                  description: 'Information about the video''s season.'\n                  properties:\n                    name:\n                      description: 'The name of this season.'\n                      example: 'Season 1'\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/pages/61326/season/12345\n                      type: string\n                  required:\n                    - name\n                    - options\n                    - uri\n                  type: object\n                texttracks:\n                  description: 'Information about this video''s text tracks.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of text tracks on this connection.'\n                      example: 2\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/texttracks\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                trailer:\n                  description: 'Information about this video''s VOD trailer.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    resource_key:\n                      description: 'The trailer connection resource key.'\n                      example: bac1033deba2310ebba2caec33c23e4beea67aba\n                      type: string\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /ondemand/pages/61326/videos/12345\n                      type: string\n                  required:\n                    - options\n                    - resource_key\n                    - uri\n                  type: object\n                users_with_access:\n                  description: 'Information about the user privacy of this video, if the video privacy is `users`.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of users on this connection.'\n                      example: 8\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/privacy/users\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n                versions:\n                  description: 'Information about the versions of this video.'\n                  properties:\n                    current_uri:\n                      description: 'The URI of the current version of the video.'\n                      example: /videos/258684937/versions/12345\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    resource_key:\n                      description: 'The resource key string of the current version of the video.'\n                      example: bac1033deba2310ebba2caec33c23e4beea67aba\n                      type: string\n                    total:\n                      description: 'The total number of versions on this connection.'\n                      example: 3\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937/versions\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - available_albums\n                - available_channels\n                - comments\n                - credits\n                - likes\n                - ondemand\n                - pictures\n                - playback\n                - recommendations\n                - related\n                - season\n                - texttracks\n                - trailer\n                - users_with_access\n                - versions\n              type: object\n            interactions:\n              description: 'A list of resource URIs related to the video.'\n              properties:\n                buy:\n                  description: 'The Buy interaction for a On Demand video.'\n                  nullable: true\n                  properties:\n                    currency:\n                      description: 'The currency code for the current user''s region.'\n                      example: USD\n                      nullable: true\n                      type: string\n                    display_price:\n                      description: 'Formatted price to display to buy an On Demand video.'\n                      example: '5.99'\n                      nullable: true\n                      type: string\n                    download:\n                      description: \"The user's download access to this On Demand video:\\n\\nOption descriptions:\\n * `available` - The video is available for download.\\n * `purchased` - The user has purchased the video.\\n * `restricted` - The user isn't permitted to download the video.\\n * `unavailable` - The video isn't available for download.\\n\"\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    drm:\n                      description: 'Whether the video has DRM.'\n                      example: true\n                      type: boolean\n                    link:\n                      description: 'The URL to buy the On Demand video on Vimeo.'\n                      example: 'https://vimeo.com/ondemand/darbyforever'\n                      nullable: true\n                      type: string\n                    price:\n                      description: 'The numeric value of the price for buying the On Demand video.'\n                      example: 5.99\n                      nullable: true\n                      type: number\n                    purchase_time:\n                      description: 'The time in ISO 8601 format when the On Demand video was purchased.'\n                      example: '2018-03-05T21:04:47+00:00'\n                      nullable: true\n                      type: string\n                    stream:\n                      description: \"The user's streaming access to this On Demand video:\\n\\nOption descriptions:\\n * `available` - The video is available for streaming.\\n * `purchased` - The user has purchased the video.\\n * `restricted` - The user isn't permitted to stream the video.\\n * `unavailable` - The video isn't available for streaming\\n\"\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    uri:\n                      description: 'The product URI to purchase the On Demand video.'\n                      example: /ondemand/pages/61326/products/12345\n                      nullable: true\n                      type: string\n                  required:\n                    - currency\n                    - display_price\n                    - download\n                    - drm\n                    - link\n                    - price\n                    - purchase_time\n                    - stream\n                    - uri\n                  type: object\n                channel:\n                  description: 'When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.'\n                  nullable: true\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      type: string\n                  required:\n                    - options\n                    - uri\n                  type: object\n                like:\n                  description: 'Information about whether the authenticated user has liked this video.'\n                  properties:\n                    added:\n                      description: 'Whether the user has liked the video.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user liked the video.'\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                rent:\n                  description: 'The Rent interaction for an On Demand video.'\n                  nullable: true\n                  properties:\n                    currency:\n                      description: 'The currency code for the current user''s region.'\n                      example: USD\n                      nullable: true\n                      type: string\n                    display_price:\n                      description: 'Formatted price to display to rent an On Demand video.'\n                      example: '5.99'\n                      nullable: true\n                      type: string\n                    drm:\n                      description: 'Whether the video has DRM.'\n                      example: true\n                      type: boolean\n                    expires_time:\n                      description: 'The time in ISO 8601 format when the rental period for the video expires.'\n                      example: '2018-03-05T21:04:47+00:00'\n                      nullable: true\n                      type: string\n                    link:\n                      description: 'The URL to rent the On Demand video on Vimeo.'\n                      example: 'https://vimeo.com/ondemand/darbyforever'\n                      nullable: true\n                      type: string\n                    price:\n                      description: 'The numeric value of the price for buying the On Demand video.'\n                      example: 5.99\n                      nullable: true\n                      type: number\n                    purchase_time:\n                      description: 'The time in ISO 8601 format when the On Demand video was rented.'\n                      example: '2018-09-16T09:02:40+00:00'\n                      nullable: true\n                      type: string\n                    stream:\n                      description: \"The user's streaming access to this On Demand video:\\n\\nOption descriptions:\\n * `available` - The video is available for streaming.\\n * `purchased` - The user has purchased the video.\\n * `restricted` - The user isn't permitted to stream the video.\\n * `unavailable` - The video isn't available for streaming.\\n\"\n                      enum:\n                        - available\n                        - purchased\n                        - restricted\n                        - unavailable\n                      example: available\n                      type: string\n                    uri:\n                      description: 'The product URI to rent the On Demand video.'\n                      example: /ondemand/pages/61326/products/12345\n                      nullable: true\n                      type: string\n                  required:\n                    - currency\n                    - display_price\n                    - drm\n                    - expires_time\n                    - link\n                    - price\n                    - purchase_time\n                    - stream\n                    - uri\n                  type: object\n                report:\n                  description: 'Information about where and how to report a video.'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    reason:\n                      description: 'A list of valid reasons for reporting a video.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      type: string\n                  required:\n                    - options\n                    - reason\n                    - uri\n                  type: object\n                subscribe:\n                  description: 'Subscription information for an On Demand video.'\n                  nullable: true\n                  properties:\n                    drm:\n                      description: 'Whether the video has DRM.'\n                      example: true\n                      type: boolean\n                    expires_time:\n                      description: 'The time in ISO 8601 format when the subscription expires.'\n                      example: '2018-03-05T21:04:47+00:00'\n                      type: string\n                    purchase_time:\n                      description: 'The tine in ISO 8601 format when the subscription was purchased.'\n                      example: '2018-03-02T21:04:47+00:00'\n                      type: string\n                    stream:\n                      description: 'The stream type.'\n                      example: purchased\n                      type: string\n                  type: object\n                watched:\n                  description: 'Information about removing this video from the user''s list of watched videos.'\n                  properties:\n                    added:\n                      description: 'Whether the user has watched the video.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user watched the video.'\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n                watchlater:\n                  description: 'Information about whether this video appears on the authenticated user''s Watch Later list.'\n                  properties:\n                    added:\n                      description: 'Whether the user has added the video to their Watch later list.'\n                      example: true\n                      type: boolean\n                    added_time:\n                      description: 'The time in ISO 8601 format when the user added the video to their Watch Later list.'\n                      type: string\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      type: string\n                  required:\n                    - added\n                    - added_time\n                    - options\n                    - uri\n                  type: object\n              required:\n                - buy\n                - channel\n                - like\n                - rent\n                - report\n                - watched\n                - watchlater\n              type: object\n          required:\n            - connections\n            - interactions\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the video metadata was last modified.'\n          example: '2018-09-16T09:02:40+00:00'\n          type: string\n        name:\n          description: 'The video''s title.'\n          example: 'Celebrating 10 Years of Staff Picks'\n          type: string\n        parent_folder:\n          allOf:\n            -\n              $ref: '#/components/schemas/project'\n          description: 'Information about the folder that contains this video.'\n          nullable: true\n        password:\n          description: 'The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.'\n          example: hunter1\n          type: string\n        pictures:\n          allOf:\n            -\n              $ref: '#/components/schemas/picture'\n          description: 'The active picture for this video.'\n        privacy:\n          description: 'The video''s privacy setting.'\n          properties:\n            add:\n              description: 'Whether the video can be added to collections.'\n              example: true\n              type: boolean\n            comments:\n              description: \"Who can comment on the video:\\n\\nOption descriptions:\\n * `anybody` - Anyone can comment on the video.\\n * `contacts` - Only contacts can comment on the video.\\n * `nobody` - No one can comment on the video.\\n\"\n              enum:\n                - anybody\n                - contacts\n                - nobody\n              example: anybody\n              type: string\n            download:\n              description: 'The video''s download permission setting.'\n              example: true\n              type: boolean\n            embed:\n              description: \"The video's embed permission setting:\\n\\nOption descriptions:\\n * `private` - The video is private.\\n * `public` - Anyone can embed the video.\\n\"\n              enum:\n                - private\n                - public\n              example: private\n              type: string\n            view:\n              description: \"The general privacy setting for the video:\\n\\nOption descriptions:\\n * `anybody` - Anyone can view the video.\\n * `contacts` - Only contacts can view the video.\\n * `disable` - Hide from vimeo\\n * `nobody` - No one besides the owner can view the video.\\n * `password` - Anyone with the video's password can view the video.\\n * `unlisted` - Not searchable from vimeo.com\\n * `users` - Only people with a Vimeo account can view the video.\\n\"\n              enum:\n                - anybody\n                - contacts\n                - disable\n                - nobody\n                - password\n                - unlisted\n                - users\n              example: anybody\n              type: string\n          required:\n            - add\n            - comments\n            - download\n            - embed\n            - view\n          type: object\n        release_time:\n          description: 'The time in ISO 8601 format when the video was released.'\n          example: '2018-03-05T21:04:47+00:00'\n          type: string\n        resource_key:\n          description: 'The resource key string of the video.'\n          example: bac1033deba2310ebba2caec33c23e4beea67aba\n          type: string\n        spatial:\n          description: '360 spatial data.'\n          properties:\n            director_timeline:\n              description: '360 director timeline.'\n              items:\n                type: object\n                properties:\n                  pitch:\n                    description: 'The director timeline pitch, from -90 (minimum) to 90 (maximum).'\n                    example: 70\n                    type: number\n                  roll:\n                    description: 'The director timeline roll.'\n                    example: 0\n                    type: number\n                  time_code:\n                    description: 'The director timeline time code.'\n                    example: 300\n                    type: number\n                  yaw:\n                    description: 'The director timeline yaw, from 0 (minimum) to 360 (maximum).'\n                    example: 125\n                    type: number\n              type: array\n            field_of_view:\n              description: 'The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.'\n              example: 50\n              nullable: true\n              type: number\n            projection:\n              description: \"The 360 spatial projection:\\n\\nOption descriptions:\\n * `cubical` - The spatial projection is cubical.\\n * `cylindrical` - The spatial projection is cylindrical.\\n * `dome` - The spatial projection is dome-shaped.\\n * `equirectangular` - The spatial projection is equirectangular.\\n * `pyramid` - The spatial projection is pyramid-shaped.\\n\"\n              enum:\n                - cubical\n                - cylindrical\n                - dome\n                - equirectangular\n                - pyramid\n              example: cubical\n              nullable: true\n              type: string\n            stereo_format:\n              description: \"The 360 stereo format:\\n\\nOption descriptions:\\n * `left-right` - The stereo format is left-right.\\n * `mono` - The audio is monaural.\\n * `top-bottom` - The stereo format is top-bottom.\\n\"\n              enum:\n                - left-right\n                - mono\n                - top-bottom\n              example: left-right\n              nullable: true\n              type: string\n          required:\n            - director_timeline\n            - field_of_view\n            - projection\n            - stereo_format\n          type: object\n        stats:\n          description: 'A collection of stats associated with this video.'\n          properties:\n            plays:\n              description: 'The current total number of times that the video has been played.'\n              example: 20\n              nullable: true\n              type: number\n          required:\n            - plays\n          type: object\n        status:\n          description: \"The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.\\n\\nOption descriptions:\\n * `available` - The video is available.\\n * `quota_exceeded` - The user's quota is exceeded with this video.\\n * `total_cap_exceeded` - The user has exceeded their total cap with this video.\\n * `transcode_starting` - Transcoding is beginning for the video.\\n * `transcoding` - Transcoding is underway for the video.\\n * `transcoding_error` - There was an error in transcoding the video.\\n * `unavailable` - The video is unavailable.\\n * `uploading` - The video is being uploaded.\\n * `uploading_error` - There was an error in uploading the video.\\n\"\n          enum:\n            - available\n            - quota_exceeded\n            - total_cap_exceeded\n            - transcode_starting\n            - transcoding\n            - transcoding_error\n            - unavailable\n            - uploading\n            - uploading_error\n          example: available\n          nullable: true\n          type: string\n        tags:\n          description: 'An array of all tags assigned to this video.'\n          items:\n            $ref: '#/components/schemas/tag'\n          type: array\n        transcode:\n          description: 'The transcode information for a video upload.'\n          nullable: true\n          properties:\n            status:\n              description: 'Status code for this video''s availability.'\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n          type: object\n        type:\n          description: \"The type of the video.\\n\\nOption descriptions:\\n * `live` - The video is or was a live event.\\n * `stock` - The video is a Vimeo Stock video.\\n * `video` - The video is a standard Vimeo video.\\n\"\n          enum:\n            - live\n            - stock\n            - video\n          example: video\n          type: string\n        upload:\n          description: 'The upload information for this video.'\n          nullable: true\n          properties:\n            approach:\n              description: 'The approach for uploading the video.'\n              enum:\n                - post\n                - pull\n                - streaming\n                - tus\n              example: post\n              type: string\n            complete_uri:\n              description: 'The URI for completing the upload.'\n              type: string\n            form:\n              description: 'The HTML form for uploading a video through the post approach.'\n              type: string\n            link:\n              description: 'The link of the video to capture through the pull approach.'\n              type: string\n            redirect_url:\n              description: 'The redirect URL for the upload app.'\n              type: string\n            size:\n              description: 'The file size in bytes of the uploaded video.'\n              example: 60000\n              type: number\n            status:\n              description: \"The status code for the availability of the uploaded video:\\n\\nOption descriptions:\\n * `complete` - The upload is complete.\\n * `error` - The upload ended with an error.\\n * `in_progress` - The upload is underway.\\n\"\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n            upload_link:\n              description: 'The link for sending video file data.'\n              type: string\n          required:\n            - status\n          type: object\n        uri:\n          description: 'The video''s canonical relative URI.'\n          example: /videos/258684937\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The video owner.'\n          nullable: true\n        width:\n          description: 'The video''s width in pixels.'\n          example: 1920\n          type: number\n      required:\n        - categories\n        - content_rating\n        - context\n        - created_time\n        - description\n        - duration\n        - embed\n        - height\n        - language\n        - license\n        - link\n        - metadata\n        - modified_time\n        - name\n        - pictures\n        - privacy\n        - release_time\n        - resource_key\n        - spatial\n        - stats\n        - status\n        - tags\n        - transcode\n        - type\n        - upload\n        - uri\n        - user\n        - width\n      type: object\n    video-versions:\n      title: 'Video Versions'\n      properties:\n        active:\n          description: 'Whether this video version is the currently active one.'\n          example: true\n          type: boolean\n        app:\n          allOf:\n            -\n              $ref: '#/components/schemas/api-app'\n          description: 'The API app associated with the video version.'\n        created_time:\n          description: 'The time in ISO 8601 for when the video version was created.'\n          example: '2018-03-05T21:04:47+00:00'\n          type: string\n        duration:\n          description: 'The duration of the video version in seconds.'\n          example: 81\n          nullable: true\n          type: number\n        filename:\n          description: 'The file name of the video version.'\n          example: rev2.mp4\n          type: string\n        filesize:\n          description: 'The size in byes of the video version file.'\n          example: 4025322521\n          nullable: true\n          type: number\n        metadata:\n          description: 'The video version''s metadata.'\n          properties:\n            connections:\n              properties:\n                video:\n                  description: 'Data from video associated with version'\n                  properties:\n                    options:\n                      description: 'An array of HTTP methods permitted on this URI.'\n                      items:\n                        type: string\n                      type: array\n                    total:\n                      description: 'The total number of videos on this connection.'\n                      example: 5\n                      type: number\n                    uri:\n                      description: 'The API URI that resolves to the connection data.'\n                      example: /videos/258684937\n                      type: string\n                  required:\n                    - options\n                    - total\n                    - uri\n                  type: object\n              required:\n                - video\n              type: object\n          required:\n            - connections\n          type: object\n        modified_time:\n          description: 'The time in ISO 8601 format when the video version was last modified.'\n          example: '2018-09-16T09:02:40+00:00'\n          type: string\n        play:\n          allOf:\n            -\n              $ref: '#/components/schemas/play'\n          description: 'The Play representation.'\n        upload:\n          description: 'The upload information for this version.'\n          nullable: true\n          properties:\n            approach:\n              description: 'The approach for uploading the video.'\n              enum:\n                - post\n                - pull\n                - streaming\n                - tus\n              example: post\n              type: string\n            complete_uri:\n              description: 'The URI for completing the upload.'\n              type: string\n            form:\n              description: 'The HTML form for uploading a video through the post approach.'\n              type: string\n            link:\n              description: 'The link of the video to capture through the pull approach.'\n              type: string\n            redirect_url:\n              description: 'The redirect URL for the upload app.'\n              type: string\n            size:\n              description: 'The file size in bytes of the uploaded video.'\n              example: 60000\n              type: number\n            status:\n              description: \"The status code for the availability of the uploaded video:\\n\\nOption descriptions:\\n * `complete` - The upload is complete.\\n * `error` - The upload ended with an error.\\n * `in_progress` - The upload is underway.\\n\"\n              enum:\n                - complete\n                - error\n                - in_progress\n              example: complete\n              type: string\n            upload_link:\n              description: 'The link for sending video file data.'\n              type: string\n          required:\n            - status\n          type: object\n        upload_date:\n          description: 'The time in ISO 8601 format when the video version was uploaded.'\n          example: '2018-09-16T09:02:40+00:00'\n          nullable: true\n          type: string\n        uri:\n          description: 'The version''s canonical relative URI.'\n          example: /videos/258684937/versions/12345\n          type: string\n        user:\n          allOf:\n            -\n              $ref: '#/components/schemas/user'\n          description: 'The owner of the video version.'\n          nullable: true\n      required:\n        - active\n        - app\n        - created_time\n        - duration\n        - filename\n        - filesize\n        - metadata\n        - modified_time\n        - play\n        - upload\n        - upload_date\n        - uri\n        - user\n      type: object\nsecurity:\n  -\n    oauth2:\n      - create\n      - delete\n      - edit\n      - email\n      - interact\n      - private\n      - promo_codes\n      - public\n      - purchase\n      - purchased\n      - stats\n      - upload\n      - video_files\n"
		}
	},
	"Error": "parse: paths: /videos/{video_id}: get: get_video: responses: 200: content: application/vnd.vimeo.video+json: schema: parse schema: reference \"#/components/schemas/video\": parse schema: parent_folder: parse schema: allOf: [0]: parse schema: reference \"#/components/schemas/project\": parse schema: user: parse schema: allOf: [0]: parse schema: reference \"#/components/schemas/user\": parse schema: content_filter: parse enum values: parse value \"\\\"drugs\\\"\": expected type \"array\", got \"string\""
}