{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FLOIP/flow-builder"
		},
		"file": {
			"name": "routes.yaml",
			"path": "docs/routes/openapi/routes.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Flow Builder Routes\n  description: This document describes the specification for any implementation of\n    the server required for integration of the flow builder with a backend.\n  version: 1.0.0\nservers:\n- url: /\ntags:\n- name: Flows\n  description: Operations about flows and flow blocks\n  externalDocs:\n    description: Find out more about flows\n    url: https://floip.gitbook.io/flow-specification/\npaths:\n  /flows/{id}:\n    get:\n      tags:\n      - Flows\n      operationId: Fetch Flow\n      summary: Finds Flow in Container by ID. Route can be anything and is configured in builder.config.json - the UUID, body and verb are what matters.\n      parameters:\n      - name: id\n        in: path\n        description: ID of flow to return.\n        required: true\n        schema:\n          type: uuid\n      responses:\n        200:\n          description: Returns the flow in a container on success. See https://floip.gitbook.io/flow-specification/flows#containers\n            for full spec. The 'flows' attribute of the returned container will contain\n            the flow itself and any nested flows. 'resources' will contain any nested\n            resources\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlowContainer'\n        404:\n          description: Flow not found\n          content: {}\n  /flows:\n    post:\n      tags:\n      - Flows\n      operationId: Save Flow\n      summary: Create a Flow and associated Resources. UUIDs are generated\n        client side so the builder can operate without a backend.\n        That means we need to track whether the flow is created on the server or not in this builder\n        with an attribute on the container - `created` - rather than with whether or not the flow\n        has a uuid yet. `created` is not sent to the server.\n        This route is used when `created` === false\n        Route can be anything and is configured in builder.config.json - the body and verb are what matters.\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/FlowContainer'\n        required: true\n      responses:\n        200:\n          description: Echos back the sent flow in a container on success. See https://floip.gitbook.io/flow-specification/flows#containers\n            for full spec. The 'flows' attribute of the returned container will contain\n            the flow itself and any nested flows. 'resources' will contain any nested\n            resources\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlowContainer'\n        500:\n          description: Error in flow creation including validation errors (the builder\n            should prevent these client side before we get to that point though)\n          content: {}\n      x-codegen-request-body-name: flow_container\n    put:\n      tags:\n      - Flows\n      operationId: Update Flow\n      summary: Update a Flow and associated Resources. UUIDs are generated\n        client side so the builder can operate without a backend.\n        That means we need to track whether the flow is created on the server or not in this builder\n        with an attribute on the container - `created` - rather than with whether or not the flow\n        has a uuid yet. `created` is not sent to the server.\n        This route is used when `created` === true\n        Route can be anything and is configured in builder.config.json - the body and verb are what matters.\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/FlowContainer'\n        required: true\n      responses:\n        200:\n          description: Echos back the sent flow in a container on success. See https://floip.gitbook.io/flow-specification/flows#containers\n            for full spec. The 'flows' attribute of the returned container will contain\n            the flow itself and any nested flows. 'resources' will contain any nested\n            resources\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlowContainer'\n        500:\n          description: Error in flow update including validation errors.\n            The builder should prevent these client side before we get to that point but that cannot always be done due to race conditions around concurrent use.\n          content: {}\n      x-codegen-request-body-name: flow_container\n  /languages:\n    post:\n      tags:\n      - Languages\n      operationId: Save Language\n      summary: Create a single new Flow Spec compliant language on the server.\n        The created language may be associated with an account.\n        Languages associated with an account/the current session\n        should override the hard coded languages in builder.config.json.\n        Route can be anything and is configured in builder.config.json - the body and verb are what matters.\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Language'\n        required: true\n      responses:\n        200:\n          description: Echos back the language for pushing into the languages array in the vuex tree state - `ui.languages`.\n            See https://floip.gitbook.io/flow-specification/flows#language-objects-and-identifiers for full spec.\n            The backend may make any changes it needs to the posted language as long as the id stays the same and the returned language conforms to the spec\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Language'\n        500:\n          description: Error in language creation including validation errors.\n            The builder should prevent these client side before we get to that point but that cannot always be done due to race conditions around concurrent use.\n          content: {}\n      x-codegen-request-body-name: language\ncomponents:\n  schemas:\n    FlowContainer:\n      type: object\n      properties:\n        specification_version:\n          type: string\n        uuid:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        vendor_metadata:\n          type: object\n          properties: {}\n        flows:\n          type: array\n          items:\n            type: object\n            properties: {}\n        resources:\n          type: object\n          properties: {}\n    Language:\n      type: object\n      properties:\n        bcp_47:\n          type: string\n        id:\n          type: string\n        iso_639_3:\n          type: string\n        label:\n          type: string\n        variant:\n          type: string\n"
		}
	},
	"Error": "parse: paths: /flows/{id}: get: operation \"Fetch Flow\": parameters: parse parameter \"id\": schema: parse schema: unexpected schema type: \"uuid\""
}