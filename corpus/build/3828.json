{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/oxen-io/session-pysogs"
		},
		"file": {
			"name": "api.yaml",
			"path": "api.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Session Open Group Server\n  description: \u003e\n    API documentation for Session open groups.  This is the API that\n    [Session](https://getsession.org) and related tools use to interface with open groups.\n  contact:\n    name: The Oxen Project\n    email: team@oxen.io\n    url: https://getsession.org\n  license:\n    name: GPL v3.0\n    url: https://www.gnu.org/licenses/gpl-3.0.en.html\n  version: \"3.0\"\nexternalDocs:\n  description: Find out more about the Oxen project\n  url: http://oxen.io\ntags:\n- name: Rooms\n  description: Access to a server's rooms (AKA open groups) and room management\n- name: Messages\n  description: Message-related endpoints for accessing, submitting, deleting, etc.\n- name: Batch\n  description: Endpoint for submitting a batch of requests at once.\n- name: Users\n  description: Management of users and user-related info.\n- name: Onion\n  description: Submitting an onion request\nsecurity:\n  - pubkey: []\n    nonce: []\n    timestamp: []\n    signature: []\npaths:\n  /rooms:\n    get:\n      tags: [Rooms]\n      summary: \"Returns a list of available rooms on the server.\"\n      description: \u003e\n        Rooms to which the user does not have access (e.g. because they are banned) are not\n        included.\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Room\"\n  /room/{roomToken}:\n    get:\n      tags: [Rooms]\n      summary: Returns information about the given room.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Room\"\n        403:\n          description: \u003e\n            Forbidden. Returned if the user is banned from the room or otherwise does not have read\n            access to the room.\n          content: {}\n    put:\n      tags: [Rooms]\n      summary: Updates room details/settings.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n      requestBody:\n        description:\n          JSON body containing the room details to update.  Any field can be omitted to leave it at\n          its current value.  The invoking user must have admin permissions in the room to call this\n          method.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: \u003e\n                    New user-displayed single-line name/title of this room.  UTF-8 encoded;\n                    newlines, tabs and other control characters (i.e. all codepoints below \\u0020)\n                    will be stripped out.\n                  maxLength: 100\n                  example: \"My New Room\"\n                description:\n                  type: string\n                  description: \u003e\n                    Long description to show to users, typically in smaller text below the room\n                    name.  UTF-8 encoded, and permits newlines, tabs; other control characters below\n                    \\u0020 will be stripped out.  Can be `null` or an empty string to remove the\n                    description entirely.\n                  example: \"This is the room for all things new.\\n\\nHi mom!\"\n                default_read:\n                  type: boolean\n                  description: \u003e\n                    Sets the default \"read\" permission (if true: users can read messages) for users\n                    in this room who do not otherwise have specific permissions applied.\n                  example: true\n                default_write:\n                  type: boolean\n                  description: \u003e\n                    Sets the default \"write\" permission (if true: users can post messages) for users\n                      in the room who do not otherwise have specific permissions applied.\n                  example: false\n                default_upload:\n                  type: boolean\n                  description: \u003e\n                    Sets the default \"upload\" permission (if true: users can post messages\n                      containing attachments) for users in the room who do not otherwise have\n                      specific permissions applied.\n                  example: false\n      responses:\n        200:\n          description: The room was successfully updated.  Currently returns an empty json dict.\n          content:\n            application/json:\n              schema:\n                type: object\n        403:\n          description: Forbidden.  Returned if the user does not have admin permission in this room.\n\n  /room/{roomToken}/pollInfo/{info_updated}:\n    get:\n      tags: [Rooms]\n      summary: Polls a room for metadata updates.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - name: info_updated\n          description: \u003e\n            The client's currently cached `info_updates` value for the room.  The full room metadata\n            is returned in the response if and only if the room's last update count does not equal\n            the given value.\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n          example: 4567\n      description: \u003e\n        Polls room metadata for this room, always including the instantaneous room details (such as\n        the user's permission and current number of active users), and including the full room\n        metadata if the room's info_updated counter has changed from the provided value.\n        \n      responses:\n        200:\n          description: \u003e\n            Results of polling the room for updated information.  This endpoint always returns\n            ephemeral data, such as the number of active users and the current user's permissions,\n            and will include the full room details if and only if it has changed (i.e. info_updates\n            does not match) from the `info_updated` value provided by the requestor.\n            \n            \n            Note that the `details` field is only present and populated if the room's `info_updates`\n            counter differs from the provided `info_updated` value; otherwise the values are\n            unchanged and so it is omitted.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  active_users:\n                    $ref: \"#/components/schemas/Room/properties/active_users\"\n                  read:\n                    $ref: \"#/components/schemas/Room/properties/read\"\n                  write:\n                    $ref: \"#/components/schemas/Room/properties/write\"\n                  upload:\n                    $ref: \"#/components/schemas/Room/properties/upload\"\n                  moderator:\n                    $ref: \"#/components/schemas/Room/properties/moderator\"\n                  admin:\n                    $ref: \"#/components/schemas/Room/properties/admin\"\n                  global_moderator:\n                    $ref: \"#/components/schemas/Room/properties/global_moderator\"\n                  global_admin:\n                    $ref: \"#/components/schemas/Room/properties/global_admin\"\n                  default_read:\n                    $ref: \"#/components/schemas/Room/properties/default_read\"\n                  default_write:\n                    $ref: \"#/components/schemas/Room/properties/default_write\"\n                  default_upload:\n                    $ref: \"#/components/schemas/Room/properties/default_upload\"\n                  details:\n                    allOf:\n                      - $ref: \"#/components/schemas/Room\"\n\n  /room/{roomToken}/message:\n    post:\n      tags: [Messages]\n      summary: Posts a new message to a room.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n      requestBody:\n        description: \u003e\n          JSON body containing the message details to be submitted to the room.\n          \n          \n          data and signature are required; whisper_to and whisper_mods are permitted only for\n          moderators/admins.  The former sends a whisper within the room that will only be shown by\n          the given user; the latter sends a whisper in the room that will be seen by all\n          moderators.  It is possible for a message to use both of these whisper modes at once, for\n          example to (privately) warn a user and have that warning visible by all other moderators.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [data, signature]\n              properties:\n                data:\n                  type: string\n                  format: byte\n                  description: \"Base64-encoded message data.\"\n                  example: bWFpbiBzY3JlZW4gdHVybiBvbg==\n                signature:\n                  type: string\n                  format: byte\n                  description: \u003e\n                    Base64-encoded message data XEd25519 signature, signed by the poster's X25519\n                    key contained in the session ID.\n                  example: NjgwYzFjOGI0YTljNTliNDk1MDRmMzY5YzFmMzRkYjM4ZTU3Mzk2YzA2ODYwODk3MzI1ZmFhMjNkYTZmNzE3YTk3MmY4MTJjZDU1MGFkMTQ2Yzk1MTdlOGM1NzMyZjgxZDE3NWViODg5OGQxZjQyMjg5ZWNkNjNjODJiMDZjNzM=\n                whisper_to:\n                  $ref: \"#/components/schemas/SessionID\"\n                whisper_mods:\n                  type: boolean\n                  description: \u003e\n                    True if this message is a whisper that should be visible to all room moderators.\n                files:\n                  type: array\n                  description: \u003e\n                    Optional list of file IDs attached to this message.  The referenced file IDs\n                    must have been recently uploaded and not already referenced by another message.\n                    Referenced files will have their expiries updated to 15 days, and will be\n                    deleted if the message is deleted.\n                    \n                    \n                    If any of the files are already associated with another message then the\n                    association is ignored.\n                    \n                    \n                    When submitting a message *edit* this field must contain the IDs of any newly\n                    uploaded files that are part of the edit, existing attachment IDs may be omitted\n                    (but including them is not an error).\n                  items:\n                    type: integer\n                    format: int64\n                  example: [4571, 4572]\n      responses:\n        201:\n          description: Message created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n        403:\n          description: \u003e\n            Forbidden.  Returned if the user does not have permission to post messages to this room.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  banned:\n                    type: boolean\n                    description: \u003e\n                      True if permission was denied because the user is banned, omitted otherwise.\n                  noWrite:\n                    type: boolean\n                    description: \u003e\n                      True if permission was denied because the user is lacking write permission,\n                      for example because of default room settings or a restriction applied to the\n                      user.\n                  reason:\n                    type: string\n                    description: \u003e\n                      A short, English-language string describing the reason the failure occurred.\n                      This is for use as a fallback ONLY: clients should prefer to identify failure\n                      through examining the other fields in the response and only use `reason` as a\n                      user-facing failure description if no known failure is included (which might\n                      happen if the server speaks a new version of the protocol than the client\n                      understands).\n                    example: \"Future horrible failure reason\"\n\n  /room/{roomToken}/message/{messageId}:\n    get:\n      tags: [Messages]\n      summary: Returns a single posted message by ID.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/pathMessageId\"\n        - name: messageId\n          in: path\n          description: ID of the message to retrieve.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n        403:\n          description: Forbidden\n    put:\n      tags: [Messages]\n      summary: Submits replacement message content (i.e. for edits).\n      description: \u003e\n        Re-posts a message, replacing its existing content with new content and a new signature.\n        \n        \n        This edit may only be initiated by the creator of the post.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - name: messageId\n          in: path\n          description: ID of the message to replace.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: \"#/paths/~1room~1%7BroomToken%7D~1message/post/requestBody\"\n      responses:\n        200:\n          description: Message updated successfully; returns an empty dict as body.\n          content:\n            application/json:\n              schema:\n                type: object\n        403:\n          description: \u003e\n            Forbidden.  Returned if the user does not have permission to post messages to this room,\n            or isn't the owner of the message being edited.\n            \n            \n            Note: the `reason` string is provided only as a fallback for forwards compatibility:\n            clients should attempt to identify the reason using the given boolean flags first, and\n            only use `reason` as a fallback if it can find no known reasons in the boolean fields.\n            This situation may arise if a future version of the specification (that the client\n            doesn't yet support) adds new failure reasons.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  banned:\n                    type: boolean\n                    description: \u003e\n                      True if the user is banned from the room and thus no longer has edit\n                      permissions.  Omitted when false.\n                  noWrite:\n                    type: boolean\n                    description: \u003e\n                      True if the user does not have write permissions to the room, e.g. because the\n                      user has been restricted or room permissions have changed since the message\n                      was posted.  Omitted when false.\n                  notYours:\n                    type: boolean\n                    description: \u003e\n                      True if the message was posted by another user, and thus cannot be edited by\n                      the current user.  Omitted when false.\n                  reason:\n                    $ref: \"#/paths/~1room~1%7BroomToken%7D~1message/post/responses/403/content/application~1json/schema/properties/reason\"\n\n  /room/{roomToken}/messages/recent:\n    get:\n      tags: [Messages]\n      summary: \"Retrieves recent messages posted to this room.\"\n      description: \u003e\n        Returns the most recent `limit` messages (100 if no limit is given).  This only returns\n        extant messages, and always returns the latest versions: that is, deleted message indicators\n        and pre-editing versions of messages are not returned. Messages are returned in order from\n        most recent to least recent.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/queryMessagesLimit\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n  /room/{roomToken}/messages/before/{messageId}:\n    get:\n      tags: [Messages]\n      summary: \"Retrieves messages from the room preceding a given id.\"\n      description: \u003e\n        Retrieves messages from the room immediately preceding the given message ID.  This endpoint\n        is intended to be used with `.../recent` to allow a client to retrieve the most recent\n        messages and then walk backwards through batches of ever-older messages. As with\n        `.../recent`, messages are returned in order from most recent to least recent.\n        \n        As with `.../recent`, this endpoint does not include deleted messages and always returns the\n        current version (i.e. fully edited) of edited messages.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/queryMessagesLimit\"\n        - name: messageId\n          in: path\n          description: \"The id of the message whose preceding messages are sought.\"\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Message'\n  /room/{roomToken}/messages/since/{messageSequence}:\n    get:\n      tags: [Messages]\n      summary: \"Retrieves message updates from a room.\"\n      description: \u003e\n        This endpoint retrieves new, edited, and deleted messages posted to this room since the\n        given message sequence counter.  Returns `limit` messages at a time (100 if no limit is\n        given).  Returned messages include any new messages, updates to existing messages (i.e.\n        edits), and message deletions made to the room since the given update id.  Messages are\n        returned in \"update\" order, that is, in the order in which the change was applied to the\n        room, from oldest the newest.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/queryMessagesLimit\"\n        - name: messageSequence\n          in: path\n          required: true\n          description: \u003e\n            The message.seqno value from which to retrieve message updates.  To retrieve from the\n            beginning of the room's message history use a value of 0 (the first room post will\n            always be \u003e= 1).  When polling for updates use the last message.seqno value retrieved.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  more:\n                    type: integer\n                    format: int32\n                    description: \u003e\n                      Indicates the number of additional message updates after the last one\n                      returned.  A positive value indicates that more messages are available (that\n                      is: that the limit was binding).\n                  messages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Message'\n\n  /room/{roomToken}/pin/{messageId}:\n    post:\n      tags: [Rooms]\n      summary: \"Pin a message in this room\"\n      description: \u003e\n        Adds a pinned message to this room.  Any existing pinned messages are not removed.  (If you\n        want to remove existing pins then build a sequence request that first calls .../unpin/all).\n        \n        \n        The user must have admin (not just moderator) permissions in the room.\n        \n        \n        Pinned messages that are already pinned will be re-pinned (that is, their pin timestamp and\n        pinning admin user will be updated).  Because pinned messages are returned in pinning-order\n        this allows admins to order multiple pinned messages in a room by re-pinning (via this\n        endpoint) in the order in which pinned messages should be displayed.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/pathMessageId\"\n      requestBody:\n        description: json dict.  Currently unused and should be an empty dict.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n        403:\n          description: \"permission denied: the calling user does not have room admin permission\"\n        404:\n          description: \u003e\n            The given post was not found in this room or is ineligible for pinning (e.g. a whisper,\n            deleted post, or filtered message).\n\n\n  /room/{roomToken}/unpin/{messageId}:\n    post:\n      tags: [Rooms]\n      summary: \"Remove a pinned message from this room\"\n      description: \u003e\n        Removes a pinned message from this room, if pinned.\n        \n        \n        The user must have admin (not just moderator) permissions in the room.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/pathMessageId\"\n      responses:\n        200:\n          description: successful operation (or the message was not pinned in the first place).\n          content:\n            application/json:\n              schema:\n                type: object\n        403:\n          description: \"permission denied: the calling user does not have room admin permission\"\n\n  /room/{roomToken}/unpin/all:\n    post:\n      tags: [Rooms]\n      summary: \"Removes all pinned messages from this room\"\n      description: \u003e\n        Removes all pinned messages from this room.\n        \n        \n        The user must have admin (not just moderator) permissions in the room.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n      responses:\n        200:\n          description: \"successful operation: the room now has no pinned messages.\"\n          content:\n            application/json:\n              schema:\n                type: object\n        403:\n          description: \"permission denied: the calling user does not have room admin permission\"\n\n  /room/{roomToken}/file:\n    post:\n      tags: [Files]\n      summary: \"Uploads a file to a room.\"\n      description: \u003e\n        Takes the request as binary in the body and takes other properties via submitted headers.\n        This saves space, particularly for large uploads.  The user must have upload and posting\n        permissions for the room.  The file will have a default lifetime of 1 hour, but that is\n        extended to 15 days when the containing message referencing the uploaded file is posted.\n        \n        \n        See also the `.../fileJson` endpoint for submitting via a json body.\n      parameters:\n      - $ref: \"#/components/parameters/pathRoomToken\"\n      - name: X-Filename\n        in: header\n        description: \u003e\n          Suggested filename of the upload.  Typically the basename of the file uploaded from the\n          user.\n        schema:\n          type: string\n      requestBody:\n        description: The file content, in bytes.\n        required: true\n        content:\n          '*/*':\n            {}\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                    description: \"The id of the file on the server.\"\n        403:\n          description: \u003e\n            Upload forbidden.  This response code indicates that the user does not have posting\n            and/or upload permissions in the room either because of room settings, user restriction,\n            or because the user is banned.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  banned:\n                    type: boolean\n                    description: \u003e\n                      True if the upload was denied because the user is banned, omitted otherwise.\n                  noWrite:\n                    type: boolean\n                    description: \u003e\n                      True if the upload was denied because the user does not have write access to\n                      the room (but is not banned).  Omitted otherwise.\n                  noUpload:\n                    type: boolean\n                    description: \u003e\n                      True if the upload was denied because the user does not have upload access to\n                      the room (but is not banned and has write permissions).  Omitted otherwise.\n\n  /room/{roomToken}/fileJSON:\n    post:\n      tags: [Files]\n      summary: \"Uploads a file to a room using a JSON encoded body.\"\n      description: \u003e\n        This is less efficient when a binary upload is possible because the body must be passed as\n        base64-encoded data (which is 33% larger).  The user must have upload and posting\n        permissions for the room.  [NOT YET IMPLEMENTED: The file will have a default lifetime of 1\n          hour, but that is extended to 15 days when the containing message referencing the upload\n          is submitted.]\n      parameters:\n      - $ref: \"#/components/parameters/pathRoomToken\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [filename, content]\n              properties:\n                filename:\n                  type: string\n                  description: \"Suggested filename of the upload.  Typically the basename of the file uploaded from the user.\"\n                content:\n                  type: string\n                  format: byte\n                  description: The file content, in base64 encoding.\n      responses:\n        200:\n          $ref: \"#/paths/~1room~1%7BroomToken%7D~1file/post/responses/200\"\n        403:\n          $ref: \"#/paths/~1room~1%7BroomToken%7D~1file/post/responses/403\"\n\n  /room/{roomToken}/file/{fileId}:\n    get:\n      tags: [Files]\n      summary: \"Retrieves a file from the room via JSON.\"\n      description: \u003e\n        Retrieves a file via a fileId from the room via a JSON object response.  This is noticeably\n        less efficient (particularly for large files) than the binary version when making direct\n        requests because the file data must be encoded using base64 encoding.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/pathFileId\"\n      responses:\n        200:\n          description: successful operation; returns the file in JSON.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  filename:\n                    type: string\n                    description: \u003e\n                      The suggested filename of the file. Omitted if the file was uploaded without a\n                      filename (e.g. from older clients, or clients that specify an empty filename.)\n                  size:\n                    type: integer\n                    format: int64\n                    description: \u003e\n                      The file size, in bytes. (*Not* the length of the base64-encoded data.)\n                  uploaded:\n                    type: number\n                    format: double\n                    description: The unix timestamp when the file was uploaded.\n                  expires:\n                    type: number\n                    format: double\n                    nullable: true\n                    description: \u003e\n                      The unix timestamp when the file is scheduled to be removed.  Will be null if\n                      the attachment is permanent, such as for room images or attachments in pinned\n                      messages.\n        403:\n          $ref: \"#/paths/~1room~1%7BroomToken%7D/get/responses/403\"\n        404:\n          description: \u003e\n            The referenced file does not exist.  (It may have expired, or may be invalid.)\n\n  /room/{roomToken}/file/{fileId}/{filename}:\n    get:\n      tags: [Files]\n      summary: \"Retrieves a file from the room as binary.\"\n      description: \u003e\n        Retrieves a file via a fileId from the room, returning the file content directly as the\n        binary response body.  The filename parameter is ignored and may be empty: it is primarily\n        included to aid in clients that want the request to include a filename, and differentiates\n        this as a request retrieving the file itself rather than the file as a JSON response.  See\n        the version without `/filename` for a JSON-returning version.\n      parameters:\n        - $ref: \"#/components/parameters/pathRoomToken\"\n        - $ref: \"#/components/parameters/pathFileId\"\n        - name: filename\n          in: path\n          required: true\n          description: \u003e\n            Filename if known by the requesting client, and empty otherwise.  The value of this\n            parameter is ignored by the server itself: it is included to differentiate this request\n            from the JSON version, and so that clients may include a filename in the request URL for\n            contexts where that is useful.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: successful operation; returns the file, in raw bytes.\n          headers:\n            Content-Length:\n              description: The size of the file.\n              schema:\n                type: integer\n                format: int64\n              example: 12345\n            Date:\n              description: The HTTP timestamp at which the file was uploaded.\n              schema:\n                type: string\n                example: \"Thu, 7 Oct 2021 00:42:00 GMT\"\n            Expires:\n              description: \u003e\n                The HTTP timestamp at which the file is scheduled to expire.  This header is omitted\n                if the attachment is non-expiring (e.g. for attachments in a pinned message [NOT YET\n                IMPLEMENTED]).\n              schema:\n                type: string\n                example: \"Fri, 22 Oct 2021 00:42:42 GMT\"\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        403:\n          $ref: \"#/paths/~1room~1%7BroomToken%7D~1file~1%7BfileId%7D/get/responses/403\"\n        404:\n          $ref: \"#/paths/~1room~1%7BroomToken%7D~1file~1%7BfileId%7D/get/responses/404\"\n\n  /user/{sessionId}/ban:\n    post:\n      tags: [Users]\n      summary: Bans a user.\n      description: \u003e\n        Applies a ban of a user from specific rooms, or from the server globally.\n        \n        \n        The invoking user must have moderator (or admin) permission in all given rooms when\n        specifying `rooms`, and must be a global server moderator (or admin) if using the `global`\n        parameter.\n        \n        \n        Note that the given session ID does not have to exist: it is possible to preemptively ban\n        users who have never visited the server or room(s).\n        \n        \n        The user's messages are not deleted by this request.  In order to ban and delete all\n        messages use the `/sequence` endpoint to bundle a `/user/.../ban` with a\n        `/user/.../deleteMessages` request.\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: Details of the ban to apply.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens to which the ban should be applied. The invoking user must\n                    be a moderator (or admin) of all of the given rooms.\n                    \n                    \n                    You can specify a single element list `[\"*\"]` to ban the user from all rooms on\n                    the server to which the calling user has moderator permissions.  This differs\n                    from a global ban in that it doesn't apply to non-moderator-permission rooms,\n                    nor does it apply to newly created rooms or non-room endpoints.\n                    \n                    \n                    Exclusive of `global`.\n                global:\n                  type: boolean\n                  description: \u003e\n                    If true then apply the ban at the global level, i.e. server-wide. The invoking\n                    user must be a server-level moderator or admin.\n                    \n                    \n                    The ban applies immediately to all server requests initiated by the user (not\n                    just room access).\n                    \n                    \n                    Exclusive of `rooms`.\n                timeout:\n                  type: number\n                  format: double\n                  nullable: true\n                  example: 86400\n                  description: \u003e\n                    How long the ban should apply, in seconds.  If omitted (or `null`) then the ban\n                    applies forever.  If an unban was previously scheduled then it is replaced (if a\n                    timeout is given) or deleted (if no timeout is provided).\n            examples:\n              tworooms:\n                summary: \"1-day ban from two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n                  timeout: 86400\n              permaban:\n                summary: \"Permanent server ban\"\n                value:\n                  global: true\n      responses:\n        200:\n          description: Ban applied successfully.\n          content: {}\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the ban does not have the required\n            moderator permissions for one or more of the given rooms (or server moderator permission\n            for a global ban).\n          content: {}\n  /user/{sessionId}/unban:\n    post:\n      tags: [Users]\n      summary: Removes a user ban.\n      description: \u003e\n        Removes a room-specific or global ban of a user.\n        \n        \n        Note that removing a room-specific ban does not affect an existing global ban, and removing\n        a global ban does not affect existing room-specific bans.\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: Details of the ban to remove.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens from which the ban should be removed (if present). The\n                    invoking user must be a moderator (or admin) of all of the given rooms.\n                    \n                    \n                    You can specify a single element list `[\"*\"]` to unban the user from all rooms\n                    on the server to which the calling user has moderator permissions.  This isn't\n                    the same as removing a global ban; this just removes any room-specific bans that\n                    may currently apply from moderated rooms.\n                    \n                    \n                    Exclusive of `global`.\n                global:\n                  type: boolean\n                  description: \u003e\n                    If true then remove a global server ban of this user. The invoking user must be\n                    a server-level moderator or admin.\n                    \n                    \n                    Exclusive of `rooms`.\n            examples:\n              tworooms:\n                summary: \"Remove ban from two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n              permaban:\n                summary: \"Remove server ban\"\n                value:\n                  global: true\n      responses:\n        200:\n          description: Ban removed successfully.\n          content: {}\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to remove the ban does not have moderator\n            permissions for one or more of the given rooms (or server moderator permission for a\n            global ban).\n          content: {}\n  /user/{sessionId}/permission:\n    post:\n      tags: [Users]\n      summary: Applies permissions or restrictions to a user.\n      description: \u003e\n        Applies or removes a user's permissions to one or more rooms.\n        \n        \n        The request specifies grants (`true`) or revocations (`false`) of permissions to apply.\n        Granting or revoking a permission adds a specific override for the given user that overrides\n        the default room permissions.\n        \n        \n        You can explicitly clear one or more permission setting by specifying a timeout of `-1` (in\n        this case the actual true/false value of the permissions are ignored).\n        \n        \n        Note that the given session ID does not have to exist: it is possible to grant permissions\n        preemptively for a session ID that has never visited the server or room(s).\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: \"Details of the permission update to apply.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [rooms]\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens to which the permissions should be applied. The invoking\n                    user must be a moderator (or admin) of all of the given rooms.\n                timeout:\n                  type: number\n                  format: double\n                  nullable: true\n                  example: 86400\n                  description: \u003e\n                    How long the new permission (or restriction) should apply, in seconds.  If the\n                    user already has future permission changes scheduled then they will be cancelled\n                    and replaced the changes scheduled here.\n                    \n                    \n                    When the timeout expires, the specific override will be removed and the user's\n                    permission will revert to the room's defaults.\n                    \n                    \n                    Using a timeout of -1 clears any given permission/restrictions immediately.\n                    Note that, in this case, the actual true/false value is ignored.  For instance,\n                    `timeout: -1, read: false` and `timeout: -1, read: true` both clear any existing\n                    user-specific permission for `read`.\n                read:\n                  type: boolean\n                  nullable: true\n                  example: false\n                  description: \u003e\n                    If true this grants permission to read the room's messages even if the room\n                    defaults do not allow reading.  If false this restricts permission to read the\n                    room's messages even if the room's default allows reading.  Specifying this as\n                    null will explicitly delete any user-specific read override (effectively\n                    returning the user's read permission to the room's default).\n                write:\n                  type: boolean\n                  nullable: true\n                  example: true\n                  description: \u003e\n                    If true this grants permission to post messages to the room, even if the room's\n                    default permissions do not allow posting.  If false this restricts the user from\n                    posting.  Specifying this as null will explicitly delete any user-specific write\n                    override, returning the user's effective permission to the room's default.\n                upload:\n                  type: boolean\n                  nullable: true\n                  example: true\n                  description: \u003e\n                    If true this grants permission to upload files to the room for this user, even\n                    if the room's default permission does not allow uploads.  If false the user is\n                    restricted from uploading files.  Specifying as null will explicitly delete any\n                    user-specific override, returning the user's effective permission to the room's\n                    default.\n            examples:\n              tworooms:\n                summary: \"1-day mute in two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n                  timeout: 86400\n                  write: false\n              allow-uploads:\n                summary: \"Allow file attachments for 1 week\"\n                value:\n                  rooms: [\"session-help\"]\n                  upload: true\n                  timeout: 604800\n              secretroom:\n                summary: \"Grant access to a restricted room\"\n                value:\n                  rooms: [\"top-secret\"]\n                  read: true\n                  write: true\n                  upload: true\n      responses:\n        200:\n          description: Permission update applied successfully.\n          content: {}\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the permissions does not have moderator\n            permissions for one or more of the given rooms.\n          content: {}\n  /user/{sessionId}/moderator:\n    post:\n      tags: [Users]\n      summary: Adds or removes moderator/admin powers.\n      description: \u003e\n        Adds or removes moderator or admin permissions to a user for specific rooms, or globally on\n        the server.\n        \n        \n        The invoking user must have admin permissions in all of the rooms specified when adding room\n        mods/admins, and must have global admin permissions when adding a global moderator or admin.\n        \n        \n        Note that the given session ID does not have to exist: it is possible to grant moderator\n        permissions preemptively for a session ID that has never visited the server or room(s).\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: \"Details of the permission update to apply.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens to which the moderator status should be applied. The\n                    invoking user must be an admin of all of the given rooms.\n                    \n                    \n                    This may be set to the single-element list ['*'] to add or remove the moderator\n                    from all rooms in which the current user has admin permissions (the call will\n                    succeed if the calling user is an admin in at least one channel).\n                    \n                    \n                    Exclusive of `global`.  (If you want to apply both at once use two calls, e.g.\n                    bundled in a batch request).\n                global:\n                  type: boolean\n                  description: \u003e\n                    If true then appoint this user as a global moderator or admin of the server.\n                    The user will receive moderator/admin ability in all rooms on the server (both\n                    current and future).\n                    \n                    \n                    The caller must be a global admin to add/remove a global moderator or admin.\n                moderator:\n                  type: boolean\n                  description: \u003e\n                    If `true` then this user will be granted moderator permission to either the\n                    listed room(s) or the server globally.\n                    \n                    \n                    If `false` then this user will have their moderator *and admin* permissions\n                    removed from the given rooms (or server).  Note that removing a global moderator\n                    only removes the global permission but does not remove individual room\n                    moderator permissions that may also be present.\n                    \n                    \n                    See the `admin` parameter description for information on how `admin` and\n                    `moderator` parameters interact.\n                admin:\n                  type: boolean\n                  description: \u003e\n                    If `true` then this user will be granted moderator and admin permissions to the\n                    given rooms or server.  Admin permissions are required to appoint new moderators\n                    or administrators and to alter room info such as the image, adding/removing\n                    pinned messages, and changing the name/description of the room.\n                    \n                    \n                    If false then this user will have their admin permission removed, but will keep\n                    moderator permissions.  To remove both moderator and admin permissions specify\n                    `moderator: false` (which implies clearing admin permissions as well).\n                    \n                    \n                    Note that removing a global admin only removes the global permission but does not remove\n                    individual room admin permissions that may also be present.\n                    \n                    \n                    The `admin`/`moderator` paramters interact as follows:\n                    - `admin=true`, `moderator` omitted: this adds admin permissions, which\n                      automatically also implies moderator permissions.\n                    - `admin=true, moderator=true`: exactly the same as above.\n                    - `admin=false, moderator=true`: removes any existing admin permissions from the\n                      rooms (or globally), if present, and adds moderator permissions to the\n                      rooms/globally (if not already present).\n                    - `admin=false`, `moderator` omitted: this removes admin permissions but leaves\n                      moderator permissions, if present.  (This effectively \"downgrades\" an admin to\n                      a moderator).  Unlike the above this does *not* add moderator permissions to\n                      matching rooms if not already present.\n                    - `moderator=true`, `admin` omitted: adds moderator permissions to the given\n                      rooms (or globally), if not already present.  If the user already has admin\n                      permissions this does nothing (that is, admin permission is *not* removed,\n                      unlike the above).\n                    - `moderator=false`, `admin` omitted: this removes moderator *and* admin\n                      permissions from all given rooms (or globally).\n                    - `moderator=false, admin=false`: exactly the same as above.\n                    - `moderator=false, admin=true`: this combination is *not* *permitted* (because\n                      admin permissions imply moderator permissions) and will result in Bad Request\n                      error if given.\n                visible:\n                  type: boolean\n                  description: \u003e\n                    Whether this user should be a \"visible\" moderator or admin in the specified\n                    rooms (or globally).  Visible moderators are identified to all room users (e.g.\n                    via a special status badge in Session clients).\n                    \n                    \n                    Invisible moderators/admins have the same permission as as visible ones, but\n                    their moderator/admin status is only visible to other moderators, not to\n                    ordinary room participants.\n                    \n                    \n                    The default if this field is omitted is true for room-specific moderators/admins\n                    and false for server-level global moderators/admins.\n                    \n                    \n                    If an admin or moderator has both global and room-specific moderation\n                    permissions then the visibility of the admin/mod for that room's moderator/admin\n                    list will use the room-specific visibility value, regardless of the global\n                    setting.  (This differs from moderator/admin permissions themselves, which are\n                    additive).\n            examples:\n              room-moderator:\n                summary: \"Add a moderator to a pair of rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n                  moderator: true\n              global-admin:\n                summary: \"Add a global server admin, visible in all rooms\"\n                value:\n                  global: true\n                  admin: true\n                  visible: true\n              hidden-mod:\n                summary: \"Add a hidden admin to a room\"\n                value:\n                  rooms: [\"session\"]\n                  admin: true\n                  visible: false\n      responses:\n        200:\n          description: Permission update applied successfully.\n          content: {}\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the permissions does not have admin\n            permissions for one or more of the given rooms and/or global admin permissions.\n          content: {}\n        404:\n          description: Returned if one or more specified room tokens do not exist.\n          content: {}\n  /user/{sessionId}/deleteMessages:\n    post:\n      tags: [Users]\n      summary: Deletes all of a user's messages.\n      description: \u003e\n        Deletes all messages posted by the given user from one or more rooms, or from all rooms on\n        the server.\n        \n        \n        The caller must have moderator permission in all given rooms, or be a server moderator for\n        global server deletion.\n      parameters:\n      - $ref: \"#/components/parameters/pathSessionId\"\n      requestBody:\n        description: \"Details of the deletion.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rooms:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/RoomToken\"\n                  minItems: 1\n                  description: \u003e\n                    List of room tokens from which messages should be deleted.  The invoking user\n                    must be a moderator (or admin) or all of the given rooms.\n                    \n                    \n                    Exclusive of `global`.\n                global:\n                  type: boolean\n                  description: \u003e\n                    If true then delete all messages made by this user from all rooms on the server.\n                    The invoking user must be a server-level moderator or admin.  In particular,\n                    this does *not* allow a non-server moderator to delete the user's messages from\n                    all rooms they moderate.\n                    \n                    \n                    Exclusive of `rooms`.\n            examples:\n              tworooms:\n                summary: \"Delete all messages from two rooms\"\n                value:\n                  rooms: [\"session\", \"lokinet\"]\n              permaban:\n                summary: \"Delete all messages from all rooms\"\n                value:\n                  global: true\n      responses:\n        200:\n          description: Messages deleted successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    $ref: \"#/components/schemas/SessionID\"\n                  messages_deleted:\n                    type: integer\n                    format: int64\n                    description: The number of messages deleted.\n        403:\n          description: \u003e\n            Permission denied.  The user attempting to set the ban does not have moderator\n            permissions for one or more of the given rooms (or server moderator permission for a\n            global ban).\n          content: {}\n  /batch:\n    post:\n      tags: [Batch]\n      summary: \"Utility endpoint to allow submitting multiple independent requests at once.\"\n      description: \u003e\n        This is used, for example, to poll multiple rooms on the same server for updates in a single\n        query rather than needing to make multiple requests for each room.\n        \n        No guarantee is made as to the order in which sub-requests are processed; use the\n        `/sequence` instead if you need that.\n        \n        For contained subrequests that specify a body (i.e. POST or PUT requests) exactly one of\n        `json`, `b64`, or `bytes` must be provided with the request body.\n      requestBody:\n        description: \"List of sub-requests to issue for this batch request.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                required: [method, path]\n                properties:\n                  method:\n                    type: string\n                    description: \"The request method, typically GET for batched requests, though other methods are also permitted.\"\n                  path:\n                    type: string\n                    description: \"The request path, e.g. `/room/123/messages/since/45678`\"\n                  headers:\n                    type: object\n                    description: \"Dict of HTTP headers for the subrequest.  Optional.\"\n                  json:\n                    description: \"Nested json structure containing a json body for a POST/PUT request.  Exclusive of `b64` and `bytes`.\"\n                    oneOf:\n                    - type: object\n                    - type: array\n                  b64:\n                    description: \"Byte data for the body for a POST/PUT request.  Exclusive of `json` and `bytes`\"\n                    type: string\n                    format: byte\n                  bytes:\n                    description: \"Optional binary body, as raw octets.  Exclusive of `b64` and `json`.  Not recommended when using json unless the data happens to be mostly safe ascii\"\n                    type: string\n                    format: binary\n      responses:\n        200:\n          description: \"Batch jobs completed. Note that 200 only means the batch was processed; for individual sub-requests see the relevant sub-response code.  The returned array returns responses in exactly the same order as the request's list of sub-requests (regardless of the actual order jobs were processed).\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required: [code, content-type, body]\n                  properties:\n                    code:\n                      type: integer\n                      format: int32\n                      description: \"HTTP response code for the subrequest (e.g. 200, 404, etc.)\"\n                    content-type:\n                      type: string\n                      description: \"HTTP content-type of the subrequest response (e.g. `application/json`)\"\n                    body:\n                      oneOf:\n                        - type: object\n                        - type: array\n                        - type: string\n                          format: byte\n                      description: \u003e\n                        The response body.  For responses with `content-type` set to\n                        `application/json` this will be the direct object or array response; for any\n                        other content otherwise this will be a string containing the base64-encoded\n                        response data.\n\n  /sequence:\n    post:\n      tags: [Batch]\n      summary: \"Utility endpoint to submit a batch of sequenced, dependent requests.\"\n      description: \u003e\n        The requests are guaranteed to be performed sequentially in the order given in the request\n        and will abort if any request does not return a status-`2xx` response.\n        \n        For example, this can be used to ban and delete all of a user's messages by sequencing the\n        ban followed by the delete_all: if the ban fails (e.g. because permission is denied) then\n        the delete_all will not occur. The batch body and response are identical to the `/batch`\n        endpoint; requests that are not carried out because of an earlier failure will have a\n        response code of `412` (Precondition Failed).\"\n      requestBody:\n        $ref: \"#/paths/~1batch/post/requestBody\"\n      responses:\n        200:\n          $ref: \"#/paths/~1batch/post/responses/200\"\n\n  /oxen/v4/lsrpc:\n    post:\n      tags: [Onion]\n      summary: \"Endpoint for submitting an encrypted onion request\"\n      description: \u003e\n        The data is an onion-encrypted request for another endpoint, wrapped in an encrypted layer\n        for this open group server.\n      requestBody:\n        description: \u003e\n          Onion request endpoint information.  Note that the field descriptions here are *inside*\n          the onion encryption layer; the onion encryption payload itself is documented elsewhere.\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: \u003e\n                The onion request data.  This is encoded/encrypted in multiple layers, as follows.\n                \n                \n                The data is first constructed as one or two parts: the first part is json contains\n                request metadata with fields:\n                - method -- \"GET\", \"POST\", etc. of the subrequest\n                - endpoint -- the subrequest endpoint, e.g. `/room/some-room/messages/since/123`\n                - headers -- request headers, typically containing X-SOGS-* auth info and, for\n                  POST/PUT requests, a Content-Type.\n                \n                \n                The second part is the request body, in bytes (only for POST/PUT requests).\n                \n                \n                These two pieces are encoded as a one- or two-string bencoded list, which has format:\n                \n                \n                `l123:jsone` or `l123:json456:bodye` where 123 is the length of the json and 456 is\n                the length of the body, if the request has a body.  (Both strings are byte strings).\n                \n                \n                This data is then encrypted using onion-request style encryption; see the\n                oxen-storage-server for details on how this is done.\n      responses:\n        200:\n          description: \u003e\n            Onion request completed.  The subrequest response will be encoded in a two-string\n            bencoded list (see the request details for the encoding specifics) where the first\n            string contains the response metadata as json with keys:\n            \n            \n            - code -- the HTTP response code of the subrequest, e.g. 200, 404\n            - headers -- a dict of HTTP response headers; the header name keys are always\n              lower-cased.\n            \n            \n            The second part is the response body bytes; as in HTTP, interpreting this depends on the\n            `content-type` header in the `headers` metadata, and the details of the invoked\n            endpoint.\n            \n            \n            These two byte strings are bencoded, and then the bencoded data is encrypted using the\n            same ephemeral key and encryption type as was used in the request.\n\ncomponents:\n  schemas:\n    RoomToken:\n      type: string\n      title: A room token used in URLs to identify the room.\n      pattern: \"^[\\\\w-]{1,64}$\"\n      example: \"session-general\"\n    SessionID:\n      type: string\n      title: A session ID, in hex.\n      description: \u003e\n        The Session ID is the fixed byte `05` followed by the 32-byte X25519 pubkey used to sign and\n        encrypt messages.\n      pattern: \"^05[0-9a-fA-F]{64}$\"\n    Room:\n      title: Information about a room\n      type: object\n      properties:\n        token:\n          $ref: \"#/components/schemas/RoomToken\"\n        name:\n          type: string\n          description: Room name to display to users.\n          example: \"Session General Discussion\"\n        description:\n          type: string\n          description: Room description to display to users. Omitted if not set.\n          example: \"General chat related to the Session messenger.\"\n        info_updates:\n          type: integer\n          format: int64\n          description: \u003e\n            Monotonic room information counter that increases each time the room's metadata changes.\n          example: 12345\n        message_sequence:\n          type: integer\n          format: int64\n          description: \u003e\n            Monotonic room post counter that increases each time a message is posted, edited, or\n            deleted in this room.  (Note that changes to this field do *not* imply an update the\n            room's `info_updates` value, nor vice versa)\n          example: 567890\n        created:\n          type: number\n          format: double\n          description: Unix timestamp when the room was created\n          example: 1633629915.34607\n        active_users:\n          type: integer\n          format: int64\n          description: \u003e\n            Number of recently active users in the room over recent time periods.\n            \n            \n            Users are considered \"active\" if they have access the room (checking for new messages,\n            etc.) at least once in the given time periods.\n            \n            \n            Note that changes to this field do *not* update the room's `info_updates` value.\n          example: 4567\n        active_users_cutoff:\n          type: integer\n          format: int64\n          description: \u003e\n            The length of time (in seconds) of the active users cutoff.  Defaults to a week\n            (604800), but the open group admin can set it to some other threshold.\n        image_id:\n          type: integer\n          format: int64\n          description: \u003e\n            File ID of an uploaded file containing the room's image.  Omitted if there is no image.\n          example: 42\n        pinned_messages:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int64\n                description: The numeric message id.\n              pinned_at:\n                type: number\n                format: double\n                description: \u003e\n                  Unix timestamp of when the message was pinned.\n              pinned_by:\n                allOf:\n                  - $ref: \"#/components/schemas/SessionID\"\n                  - type: object\n                    description: \u003e\n                      The session ID of the moderator who pinned this message.\n          description: \u003e\n            This room's pinned messages, in order of when they were pinned.  Omitted entirely if\n            there are no pinned messages.\n          example: [{\"id\": 512, \"pinned_at\", 1642701309.5007384, \"pinned_by\": \"050123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"}]\n        moderators:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            Session IDs of the room's publicly viewable moderators.  This does not include room\n            administrators or hidden moderators.\n          example:\n            - \"050123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\"\n            - \"05fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210\"\n        admins:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            Session IDs of the room's publicly viewable administrators.  (Administrators are\n            moderators who also have permission to add or remove other moderators.)\n          example:\n            - \"050123456776543210012345677654321001234567765432100123456776543210\"\n        hidden_moderators:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            Session IDs of moderators who are not publicly displayed as moderators of the room.\n            This field is omitted if the requestor is not a moderator/admin of the room or server,\n            or if the list is empty.\n          example:\n            - \"0589abcdeffedcba9889abcdeffedcba9889abcdeffedcba9889abcdeffedcba98\"\n        hidden_admins:\n          type: array\n          items:\n            type: string\n          description: \u003e\n            Session IDs of admins who are not publicly displayed as administrators of the room.\n            This field is omitted if the requestor is not a moderator/admin of the room or server,\n            or if the list is empty.\n          example:\n            - \"050011223344556677001122334455667700112233445566770011223344556677\"\n        moderator:\n          type: boolean\n          description: \u003e\n            Will be set to true if the requestor is recognized with moderator permissions in the\n            room.  Omitted otherwise.\n          example: true\n        admin:\n          type: boolean\n          description: \u003e\n            Will be set to true if the requestor is recognized with admin permissions in the room.\n            Omitted otherwise.\n          example: true\n        global_moderator:\n          type: boolean\n          description: \u003e\n            Will be set to true if the requestor is recognized with global moderator permissions in\n            all rooms.  Omitted otherwise.\n          example: true\n        global_admin:\n          type: boolean\n          description: \u003e\n            Will be set to true if the requestor is recognized with global admin permissions in all\n            rooms.  Omitted otherwise.\n          example: true\n        read:\n          type: boolean\n          description: \u003e\n            Whether the requesting user has permission to read messages in the room.  (Note that\n            changes to this property do not cause an `info_update` increment.)\n          example: true\n        write:\n          type: boolean\n          description: \u003e\n            Whether the requesting user has permission to post messages to the room.  (Note that\n            changes to this property do not cause an `info_update` increment.)\n          example: true\n        upload:\n          type: boolean\n          description: \u003e\n            Whether the requesting user has permissions to upload attachments to messages posted to\n            the room.  (Note that changes to this property do not cause an `info_update` increment.)\n          example: true\n        default_read:\n          type: boolean\n          description: \u003e\n            Whether new users have permission to read posts in this room by default.  This property\n            is only returned if the calling user has moderator/admin permissions.\n          example: true\n        default_write:\n          type: boolean\n          description: \u003e\n            Whether new users have permission to write posts in this room by default.  This property\n            is only returned if the calling user has moderator/admin permissions.\n          example: true\n        default_upload:\n          type: boolean\n          description: \u003e\n            Whether new users have permission to upload attachments to posts in this room by\n            default.  This property is only returned if the calling user has moderator/admin\n            permissions.\n          example: true\n\n    Message:\n      title: The content of a posted message\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          description: The numeric message id.\n        session_id:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \u003e\n                The session ID of the user who posted this message.  Omitted in contexts where the\n                information isn't available or isn't useful or available, such as in the\n                confirmation of submitting a post.\n        posted:\n          type: number\n          format: double\n          description: \u003e\n            Unix timestamp of when the message was posted to the server.\n        edited:\n          type: number\n          format: double\n          description: \u003e\n            Unix timestamp of the last edit to this message.  This field is omitted if the message\n            has never been edited.\n        seqno:\n          type: integer\n          format: int64\n          description: \u003e\n            This message's event sequence number in the room; this number is set to the room's\n            current monotonic sequence counter (*not* a timestamp!) when this message is first\n            posted and whenever the message is edited or deleted.  Thus an update to this value for\n            the same message indicates an update or deletion has occurred.\n            \n            \n            Note that this sequence number is used for event tracking, *not* message ordering.  For\n            example, an edit will increase this value so that polling clients will receive the edit,\n            but the edit itself should not re-position the message.\n        whisper:\n          type: boolean\n          description: \u003e\n            If true then this message is a whisper for the current user (either directed at them, or\n            sent to all moderators).  Omitted when the message is not a whisper.\n        whisper_mods:\n          type: boolean\n          description: \u003e\n            If true then this whisper is meant to be seen by all moderators, false for whispers\n            meant only for a specific user.  Omitted if the message is not a whisper.\n        whisper_to:\n          allOf:\n            - $ref: \"#/components/schemas/SessionID\"\n            - type: object\n              description: \u003e\n                The session ID of the recipient of this whisper.  Omitted if the message is not a\n                whisper, or if the whisper is for all mods without a specific recipient.\n        data:\n          type: string\n          format: byte\n          description: \u003e\n            The posted message data, encoded in base64.  For a deleted message this field is\n            omitted.  For an edited message, this field contains the latest message value.\n        signature:\n          type: string\n          format: byte\n          description: \u003e\n            An XEd25519 signature of the data contained in `data`, signed using the X25519 pubkey\n            contained in the user's Session ID.  This field is omitted when `data` is omitted (i.e.\n            for deleted messages.)\n  parameters:\n    pathRoomToken:\n      name: roomToken\n      in: path\n      description: \"Token of the room to which the request is being made.\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/RoomToken\"\n    pathMessageId:\n      name: messageId\n      in: path\n      description: \"Numeric message id of a post.\"\n      required: true\n      schema:\n        type: integer\n        format: int64\n    queryMessagesLimit:\n      name: limit\n      in: query\n      required: false\n      description: \"Number of messages to return.  If omitted 100 messages are returned.\"\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 256\n    pathFileId:\n      name: fileId\n      in: path\n      required: true\n      description: \"ID of a file uploaded to the room.\"\n      schema:\n        type: integer\n        format: int64\n    pathSessionId:\n      name: sessionId\n      in: path\n      required: true\n      description: \"Session ID of a user.\"\n      schema:\n        $ref: \"#/components/schemas/SessionID\"\n\n  securitySchemes:\n    pubkey:\n      type: apiKey\n      name: X-SOGS-Pubkey\n      in: header\n      description: \"The Session ID of the requestor\"\n    nonce:\n      type: apiKey\n      name: X-SOGS-Nonce\n      in: header\n      description: \u003e\n        A unique nonce string, in base64, of exactly 16 base64 characters (96 bits).  This must be\n        unique for every request from this pubkey within the last 24 hours; nonce reuse will result\n        in failed requests.  It is typically sufficient to generate 96 bits (12 bytes) or random\n        data for each request, but clients are free to use other nonce generation mechanisms if\n        desired.\n    timestamp:\n      type: apiKey\n      name: X-SOGS-Timestamp\n      in: header\n      description: \u003e\n        Unix timestamp integer (expressed as a string) of the time when the request was initiated\n        (to help avoid replay attacks).  This timestamp must be within ±24 hours of the server's\n        time when the request is received.\n    signature:\n      type: apiKey\n      name: X-SOGS-Signature\n      in: header\n      description: \u003e\n        XEd25519 signature of\n        \n        \n        `METHOD || PATH || NONCE || TIMESTAMP || SERVER_PUBKEY || BODY`\n        \n        \n        signed using the client's Session ID pubkey, using base64 encoding (with or without\n        padding).\n\n# vim:sw=2:et:tw=100\n"
		}
	},
	"Error": "parse: paths: /sequence: post: : requestBody: resolve \"#/paths/~1batch/post/requestBody\" reference: invalid requestBody reference: \"#/paths/~1batch/post/requestBody\""
}