{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AirbusDefenceAndSpace/pesto"
		},
		"file": {
			"name": "api_geo_process_v1.0.yaml",
			"path": "pesto-cli/pesto/cli/resources/doc/api_geo_process_v1.0.yaml",
			"content": "openapi: 3.0.0\n\n#\n# Info\n#\ninfo:\n  title: Geo Process API\n  description: |\n    This document describes the Airbus Defence and Space \"Geo Process\" API specification.\n    Geo Process services that are provided to or from Airbus Defense and Space should implement this specification.\n\n    The default execution mode for Geo Process Services is synchronous.\n    An optional asynchronous mode for long running processes and process that returns huge amount of data may be implemented.\n\n    This API provides two endpoints with a fixed path /api/v1/openapi and /api/v1/describe.\n    The path prefix for the others endpoints are implementation specific, for example the /jobs endpoint could be implemented at /jobs or /mypath/jobs or /api/v1/jobs.\n    As been the only fixed endpoint with implementation specific data, /api/v1/describe contains the _links attribute that has to reference all implemented endpoints for the service.\n    With this main service entry and the provided links it is possible for a client to discover and address others endpoints of the service.\n\n    OneAtlas Playground is an evaluation environment to test Geo Process on OneAtlas imagery from Airbus and Partners.\n    It is open on invitation only.\n    Registration should be done on OneAtlas Sandbox (https://www.intelligence-airbusds.com/sandbox).\n  contact:\n    name: Airbus Defence and Space\n    url: 'https://www.airbus.com/'\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.1\n  x-logo:\n    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png\n\n#\n# External docs\n#\nexternalDocs:\n  description: OneAtlas Playground Documentation\n  url: 'http://playground-docs.readthedocs.io'\n\n#\n# Tags\n#\ntags:\n  - name: Mandatory\n    description: |\n      Mandatory resources.\n      Defines the main entry point of the service.\n  - name: Synchronous\n    description: |\n      Mandatory resources for the synchronous mode.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n  - name: Asynchronous\n    description: |\n      Mandatory resources for the asynchronous mode.\n      Endpoints may be specific to each implementation.\n      Referenced via the result of the process execution resource.\n  - name: Optional\n    description: |\n      Optional, implementation specific resources for low level\n      description and monitoring.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n\n#\n# Paths\n#\npaths:\n  #\n  # OpenAPI schema\n  #\n  /api/v1/openapi:\n    get:\n      tags:\n        - Mandatory\n      summary: Open API specification of this service in YAML format\n      description: |\n        Returns Open API specification of this service in YAML format.\n        Subset of this API with implemented services.\n      responses:\n        '200':\n          description: Process Open API web UI.\n\n  #\n  # Describe\n  #\n  /api/v1/describe:\n    get:\n      tags:\n        - Mandatory\n      summary: Describes process service\n      description: |\n        Returns the description of the process.\n      operationId: describe\n      responses:\n        '200':\n          description: Process description.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Describe'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Job execution\n  #\n  /jobs:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    post:\n      tags:\n        - Synchronous\n        - Asynchronous\n      summary: Launch process execution\n      description: |\n        Execute the process.\n\n        If synchronous process, the response contains a JSON object as defined\n        in the output attribute of the description resource.\n\n        If asynchronous process, the response contains a Reference JSON object\n        containing the link to the job status resource. The client must call the\n        resource defined the link to get execution status then results when\n        available.\n      operationId: process\n      parameters:\n        - in: header\n          name: X-Correlation-ID\n          description: System wide request identifier.\n          schema:\n            type: string\n        - in: header\n          name: X-ADS-Debug\n          description: Enable debug mode.\n          schema:\n            type: boolean\n      requestBody:\n        description: |\n          Process input parameters as defined by the JSON Schema in the input\n          attribute of the description resource.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessInput'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/responses/OutputResponse'\n                  - $ref: '#/components/schemas/Reference'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '503':\n          description: |\n            Service not available. Max number of simultaneous process execution\n            reached.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Asynchronous job management\n  #\n  '/jobs/{jobId}':\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    parameters:\n      - name: jobId\n        in: path\n        description: Job identifier\n        required: true\n        schema:\n          type: string\n          format: uuid\n    delete:\n      tags:\n        - Asynchronous\n      summary: Cancel the given job execution\n      operationId: delete_job\n      responses:\n        '204':\n          $ref: '#/components/responses/JobDeleted'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n  #\n  # Asynchronous job status\n  #\n  '/jobs/{jobId}/status':\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    parameters:\n      - name: jobId\n        in: path\n        description: Job identifier\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - Asynchronous\n      summary: Retrieve execution status\n      description: |\n        Retrieve the process status and available results if succeded.\n      operationId: get_status\n      responses:\n        '200':\n          description: Process execution status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Asynchronous job results management\n  #\n  '/jobs/{jobId}/results':\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    parameters:\n      - name: jobId\n        in: path\n        description: Job identifier\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      tags:\n        - Asynchronous\n      summary: Get job results\n      description: |\n        Retrieve results of the given job.\n      operationId: get_results\n      responses:\n        '200':\n          $ref: '#/components/schemas/JobResults'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Asynchronous\n      summary: Delete all results\n      description: |\n        Delete all results.\n      operationId: delete_results\n      responses:\n        '204':\n          $ref: '#/components/responses/ResultDeleted'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Asynchronous job result management\n  #\n  '/jobs/{jobId}/results/{resultId}':\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    parameters:\n      - name: jobId\n        in: path\n        description: Job identifier.\n        required: true\n        schema:\n          type: string\n          format: uuid\n      - name: resultId\n        in: path\n        description: Result identifier.\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Asynchronous\n      summary: Retrieve a result\n      description: |\n        Retrieve a result from its id.\n      operationId: get_result\n      responses:\n        '200':\n          $ref: '#/components/responses/OutputResponse'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Asynchronous\n      summary: Delete a result\n      description: |\n        Delete a result from its id.\n      operationId: delete_result\n      responses:\n        '204':\n          $ref: '#/components/responses/ResultDeleted'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Instance configuration\n  #\n  /config:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Get instance configuration parameters\n      description: |\n        Implementation specific.\n        Returns the configuration parameters specific to this instance.\n        May be different depending on site, platform or environment deployments.\n      operationId: get_config\n      responses:\n        '200':\n          description: |\n            Configuration parameters as defined by the JSON schema in the\n            _links/config attribute the describe service.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Optional\n      summary: Set instance configuration parameters\n      description: |\n        Implementation specific.\n        Set the values of configuration parameters specific to this instance.\n        May be different depending on site, platform or environment deployments.\n      operationId: set_config\n      requestBody:\n        description: |\n          Configuration parameters as defined by the JSON schema in the\n          _links/config attribute the describe service.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Config'\n      responses:\n        '200':\n          description: Configuration parameters.\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Instance versions\n  #\n  /version:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Low level version description\n      description: |\n        Implementation specific.\n        Returns build, compiler or version control versions.\n      operationId: version\n      responses:\n        '200':\n          $ref: '#/components/responses/Version'\n\n  #\n  # Instance health check\n  #\n  /health:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Check if the service is alive\n      description: |\n        The response is a HTTP status code 200 containing in the body 'OK'.\n      operationId: healthcheck\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n\n  #\n  # Instance metrics\n  #\n  /metrics:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Execution usage metrics\n      description: |\n        Implementation specific.\n        Returns service usage metrics.\n      operationId: metrics\n      responses:\n        '200':\n          description: Service execution metrics.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metrics'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#\n# Components\n#\ncomponents:\n\n  #\n  # Security\n  #\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT #recommended\n\n  #\n  # Responses\n  #\n  responses:\n    OutputResponse:\n      description: |\n        Process output as defined in the output attribute of the description resource.\n\n    NotFound:\n      description: Entity not found.\n\n    JobDeleted:\n      description: Job succesfully canceled.\n\n    ResultDeleted:\n      description: Result(s) succesfully deleted.\n\n    InvalidInput:\n      description: Invalid input for operation.\n\n    NotAvailable:\n      description: Service not available.\n\n    Version:\n      description: Version.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n    Success:\n      description: Success. OK as content.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n  #\n  # Schemas\n  #\n  schemas:\n\n    #\n    # Describe schema\n    #\n    Describe:\n      description: |\n        Process description.\n      type: object\n      required:\n        - name\n        - title\n        - family\n        - version\n        - description\n        - organization\n        - email\n        - resources\n        - input\n        - output\n        - asynchronous\n        - _links\n      properties:\n        name:\n          description: Technical name of the process. May be the Docker image name.\n          type: string\n          example: eu.gcr.io/myproject/cat-detection:latest\n        title:\n          description: The title of the process.\n          type: string\n          example: Cat detection\n        family:\n          description: The process family.\n          type: string\n          example: object-detection\n        version:\n          description: The version of the process.\n          type: string\n          example: 1.0\n        description:\n          description: Gives a description of the process.\n          type: string\n          example: Detect cats on tiles\n        organization:\n          description: Identifier of the organization or entity publishing the process.\n          type: string\n          example: Airbus DS\n        email:\n          description: Contact email.\n          type: string\n          example: cat-detection@airbus.com\n        keywords:\n          description: List of keywords or tags.\n          type: array\n          items:\n            type: string\n          example: [ \"cat\", \"dog\" ]\n        template:\n          description: Template name for predefined interfaces.\n          type: string\n          example: cat-detection\n        resources:\n          description: Hardware resources needed for process execution.\n          $ref: '#/components/schemas/Resources'\n        input:\n          description: |\n            Process execution input interface.\n            JSON Schema object with ADS metadata extensions.\n          type: object\n          format: application/schema+json\n          example:\n            {\n              \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n              \"title\": \"tile-object-detection-input\",\n              \"description\": \"Geo Process API input schema for tile object detection\",\n              \"type\": \"object\",\n              \"required\": [\n                \"zoom\",\n                \"tile\"\n              ],\n              \"properties\": {\n                \"zoom\": {\n                  \"description\": \"Tile zoom level\",\n                  \"type\": \"integer\",\n                  \"minimum\": 1,\n                  \"maximum\": 20\n                },\n                \"tile\": {\n                  \"description\": \"The tile image base64 encoded, may be JPEG or PNG format\",\n                  \"type\": \"string\",\n                  \"contentEncoding\": \"base64\"\n                }\n              }\n            }\n        output:\n          description: Process execution output interface.\n          $ref: '#/components/schemas/Output'\n        config:\n          description: Process execution configuration interface.\n          type: object\n          format: application/schema+json\n        asynchronous:\n          description: True if asynchronous mode provided.\n          type: boolean\n          default: false\n          example: false\n        _links:\n          $ref: '#/components/schemas/Links'\n\n    #\n    # Resources schema\n    #\n    Resources:\n      description: |\n        Hardware resources needed to execute the process service.\n      type: object\n      required:\n        - cpu\n        - ram\n      properties:\n        cpu:\n          description: Number of CPU cores.\n          type: integer\n          example: 2\n        cpuArch:\n          description: CPU architecture, the default value is amd64.\n          type: string\n          enum: [amd64, arm64]\n          example: amd64\n        cpuPlatform:\n          description: Minimum CPU microarchitecture platform.\n          type: string\n          example: Haswell\n        gpu:\n          description: Number of GPU cores.\n          type: integer\n          example: 0\n        ram:\n          description: Size of RAM (bytes).\n          type: integer\n          example: 2097152 # 2 Gb\n\n    #\n    # Output schema\n    #\n    Output:\n      description: |\n        Output interface definition.\n      type: object\n      required:\n        - description\n        - content\n      properties:\n        description:\n          description: A description of the interface.\n          type: string\n          example: Tile object detection output\n        headers:\n          description: |\n            Maps a header name to its definition. RFC7230 states header names\n            are case insensitive. If a response header is defined with\n            the name \"Content-Type\", it SHALL be ignored.\n          type: object\n        content:\n          description: |\n            A list of all possible contents as a map with key as content type\n            (MIME type) and value as object (json schema) or string (description)\n            for contents that do not need an extra definition (as for image/jpeg\n            or application/geo+json).\n\n            If a content is of type JSON (key as application/json) the value might\n            be a JSON Schema object with ADS metadata extensions.\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/MediaTypeObject'\n          example:\n            {\n                \"application/geo+json\": {},\n                \"image/png\": {}\n            }\n        links:\n          description: |\n            A map of operations links that can be followed from the response.\n            The key of the map is a short name for the link, following\n            the naming constraints of the names for Component Objects.\n          type: object\n\n    #\n    # Media Type Object schema\n    #\n    MediaTypeObject:\n      description: |\n        Each Media Type Object provides schema and examples for the media type\n        identified by its key.\n      type: object\n      required:\n        - schema\n      properties:\n        schema:\n          description: The schema defining the type used for the request body.\n          type: object\n        example:\n          description: |\n            Example of the media type. The example object SHOULD be in the correct\n            format as specified by the media type. The example object is mutually\n            exclusive of the examples object. Furthermore, if referencing a schema\n            which contains an example, the example value SHALL override the example\n            provided by the schema.\n          type: object\n        examples:\n          description: |\n            Examples of the media type. Each example object SHOULD match the media\n            type and specified schema if present. The examples object is mutually\n            exclusive of the example object. Furthermore, if referencing a schema\n            which contains an example, the examples value SHALL override the example\n            provided by the schema.\n          type: string\n          additionalProperties:\n            type: object\n        encoding:\n          description: |\n            A map between a property name and its encoding information. The key, being\n            the property name, MUST exist in the schema as a property. The encoding\n            object SHALL only apply to requestBody objects when the media type is multipart\n            or application/x-www-form-urlencoded.\n          type: string\n          additionalProperties:\n            type: string\n\n    #\n    # Links schema\n    #\n    Links:\n      description: |\n        Links to related resources.\n      type: object\n      required:\n        - self\n        - execution\n      properties:\n        self:\n          description: The resource that return this process description.\n          $ref: '#/components/schemas/Reference'\n        execution:\n          description: The target resource to execute this process.\n          $ref: '#/components/schemas/Reference'\n        config:\n          description: The target resource to get / set configuration of this process.\n          $ref: '#/components/schemas/Reference'\n        version:\n          description: |\n            The target resource to get the API version implemented by this\n            process.\n          $ref: '#/components/schemas/Reference'\n        health:\n          description: The target resource to check health of this process.\n          $ref: '#/components/schemas/Reference'\n        metrics:\n          description: The target resource to get usage metrics of this process.\n          $ref: '#/components/schemas/Reference'\n        icon:\n          description: The target resource to retrieve the icon of this process.\n          $ref: '#/components/schemas/Reference'\n        license:\n          description: The target resource to retrieve the license of this process.\n          $ref: '#/components/schemas/Reference'\n        documentation:\n          description: The target resource to retrieve the documentation of this process.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # Config schema\n    #\n    Config:\n      description: |\n        Process instance configuration.\n\n        Implementation specific.\n\n        Described by the JSON schema in the _links/config attribute of the\n        describe service.\n      type: object\n\n    #\n    # Metrics schema\n    #\n    Metrics:\n      description: |\n        Process metrics.\n\n        Implementation specific.\n      type: object\n\n    #\n    # Status schema\n    #\n    Status:\n      description: |\n        Status of a process execution\n      type: object\n      required:\n        - status\n        - progress\n      properties:\n        status:\n          description: Status of this execution.\n          type: string\n          default: UNKNOWN\n          enum:\n            - UNKNOWN\n            - ACCEPTED\n            - RUNNING\n            - FAILED\n            - SUCCEEDED\n            - CANCELLED\n            - PAUSED\n        progress:\n          description: Progress in % of this execution.\n          type: integer\n\n    #\n    # JobResults schema\n    #\n    JobResults:\n      description: Results of this execution if succeded.\n      type: array\n      items:\n        $ref: '#/components/schemas/Result'\n\n    #\n    # Result schema\n    #\n    Result:\n      description: ''\n      type: object\n      required:\n        - id\n        - _link\n      properties:\n        id:\n          description: Result identifier.\n          type: string\n        _link:\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ProcessInput schema\n    #\n    ProcessInput:\n      description: |\n        Process input parameters as defined by the JSON Schema in the input\n        attribute of the description resource.\n      type: object\n\n    #\n    # Reference schema\n    #\n    Reference:\n      description: |\n        Reference object.\n      type: object\n      required:\n        - href\n      properties:\n        relation:\n          description: Description of the relation.\n          type: string\n        href:\n          description: Determine the target URI of the related resource.\n          type: string\n          format: uri\n          example: http://myservice.com/api/v1/describe\n        type:\n          description: Expected content type of the response of the reference.\n          type: string\n          example: application/json\n        method:\n          description: |\n            HTTP verb to distinguish between several possible actions on the\n            same ressource. GET if omitted.\n          $ref: '#/components/schemas/ReferenceMethod'\n\n    #\n    # ReferenceMethod schema\n    #\n    ReferenceMethod:\n      description: |\n        HTTP verbs to access resources.\n      type: string\n      enum:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n\n    #\n    # Error schema\n    #\n    Error:\n      description: |\n        Error returned when request fails\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: End user error description.\n          type: string\n        hint:\n          description: Internal / developper error message (no trace).\n          type: string\n        correlationId:\n          description: System request identifier from request header.\n          type: string\n        timestamp:\n          description: Error timestamp.\n          type: string\n"
		}
	},
	"Error": "parse: paths: /jobs/{jobId}/results: get: operation \"get_results\": responses: 200: resolve \"#/components/schemas/JobResults\" reference: invalid response reference: \"#/components/schemas/JobResults\""
}