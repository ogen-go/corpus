{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-tools"
		},
		"file": {
			"name": "extraFieldInSchema.yaml",
			"path": "openapi-validator/src/test/resources/openapiValidator/resources/recordValidation/swagger/invalidTests/extraFieldInSchema.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.\"\n  version: \"1.0.0\"\n  title: \"Swagger Petstore\"\n  termsOfService: \"http://swagger.io/terms/\"\n  contact:\n    email: \"apiteam@swagger.io\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\ntags:\n  - name: \"pet\"\n    description: \"Everything about your Pets\"\n    externalDocs:\n      description: \"Find out more\"\n      url: \"http://swagger.io\"\n  - name: \"store\"\n    description: \"Access to Petstore orders\"\n  - name: \"user\"\n    description: \"Operations about user\"\n    externalDocs:\n      description: \"Find out more about our store\"\n      url: \"http://swagger.io\"\npaths:\n  /nestedComponents:\n    post:\n      operationId: getPets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NestedRecord'\n      requestBody:\ncomponents:\n  schemas:\n    Order:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        petId:\n          type: \"integer\"\n          format: \"int64\"\n        quantity:\n          type: \"integer\"\n          format: \"int32\"\n        shipDate:\n          type: \"string\"\n          format: \"date-time\"\n        status:\n          type: \"string\"\n          description: \"Order Status\"\n          enum:\n            - \"placed\"\n            - \"approved\"\n            - \"delivered\"\n        complete:\n          type: \"boolean\"\n          default: false\n      xml:\n        name: \"Order\"\n    Category:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        name:\n          type: \"string\"\n      xml:\n        name: \"Category\"\n    User:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        username1:\n          type: \"string\"\n        firstName:\n          type: \"string\"\n        lastName:\n          type: \"string\"\n        email:\n          type: \"string\"\n        password:\n          type: \"string\"\n        phone:\n          type: \"string\"\n        userStatus:\n          type: \"integer\"\n          format: \"int32\"\n          description: \"User Status\"\n      xml:\n        name: \"User\"\n    Tag:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        name:\n          type: \"string\"\n      xml:\n        name: \"Tag\"\n    ExtraFieldInRecord:\n      type: \"object\"\n      required:\n        - \"name\"\n        - \"photoUrls\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        name:\n          type: \"string\"\n          example: \"doggie\"\n      xml:\n        name: \"NestedRecord\""
		}
	},
	"Error": "parse: paths: /nestedComponents: post: operation \"getPets\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/NestedRecord\": resolve reference \"#/components/schemas/NestedRecord\": schema not found"
}