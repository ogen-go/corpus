{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Endava/cats"
		},
		"file": {
			"name": "petstore-no-schema.yml",
			"path": "src/test/resources/petstore-no-schema.yml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification\n  termsOfService: http://swagger.io/terms/\n  contact:\n    name: Swagger API Team\n    email: apiteam@swagger.io\n    url: http://swagger.io\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://petstore.swagger.io/api\npaths:\n  /pets/{id}:\n    get:\n      description: Returns a user based on a single ID, if the user does not have access to the pet\n      operationId: find pet by id\n      parameters:\n        - name: id\n          in: path\n          description: ID of pet to fetch\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      description: Creates a new pet in the store.  Duplicates are allowed\n      operationId: addPet\n      requestBody:\n        description: Pet to add to the store\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /pet-types:\n    post:\n      description: Creates a new pet in the store.  Duplicates are allowed\n      operationId: addPet\n      requestBody:\n        description: Pet to add to the store\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MegaPet'\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  responses:\n    BadRequest:\n      description: Request rejected due to a structural or business validation\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    MegaPet:\n      properties:\n        id:\n          type: integer\n          format: int64\n        petType:\n          $ref: '#/components/schemas/PetType'\n    MiniPet:\n      properties:\n        id:\n          type: integer\n        color:\n          type: object\n          allOf:\n            - \"$ref\": \"#/components/schemas/Color\"\n    Color:\n      properties:\n        red:\n          type: string\n        green:\n          type: string\n        blue:\n          type: string\n    PetType:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/Husky'\n        - $ref: '#/components/schemas/Labrador'\n    Husky:\n      required:\n        - breedType\n      properties:\n        breedType:\n          type: string\n    Labrador:\n      required:\n        - breedType\n      properties:\n        breedType:\n          type: string\n    NewPet:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          minLength: 0\n          maxLength: 10\n        tag:\n          type: string\n        ip:\n          type: string\n        ipv6:\n          type: string\n          format: ipv6\n        email:\n          type: string\n        petUrl:\n          type: string\n          format: url\n        petUri:\n          type: string\n          format: uri\n        isAlive:\n          type: boolean\n        size:\n          type: number\n        length:\n          type: numnber\n          format: float\n        age:\n          type: integer\n          minimum: 0\n          maximum: 100\n        birth:\n          type: string\n          format: date-time\n        identifier:\n          type: string\n          format: uuid\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n\n"
		}
	},
	"Error": "parse: paths: /pets/{id}: get: find pet by id: responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/Pet\": resolve reference \"#/components/schemas/Pet\": schema not found"
}