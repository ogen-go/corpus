{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/pisp-project"
		},
		"file": {
			"name": "api_spec.yaml",
			"path": "docker-contract/ml-testing-toolkit/spec_files/api_definitions/thirdparty_simulator/api_spec.yaml",
			"content": "# DO NOT EDIT THIS FILE DIRECTLY!!!! INSTEAD, EDIT src/interface/ttk-thirdparty-sim-api-template.yaml and run `npm run build:ttk-thirdparty-sim:api` TO UPDATE THIS FILE\nopenapi: 3.0.2\ninfo:\n  title: Mojaloop Thirdparty \u0026 DFSP Simulator API\n  version: '1.0'\n  description: A Mojaloop API that will simulate the out of bound user authentication (OTP or WEB) between a DFSP/PISP and their user\n  license:\n    name: TBD\n    url: TBD\nservers:\n  - url: /\npaths:\n  /login:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /login` is used to login to DFSP application by providing credentials.\n      summary: DFSP user login\n      operationId: DFSPLogin\n      parameters:\n        - name: Accept\n          in: header\n          required: true\n          schema:\n            type: string\n          description: |\n            The `Accept` header field indicates the version of the API the client\n            would like the server to use.\n        - name: Content-Length\n          in: header\n          required: false\n          schema:\n            type: integer\n          description: |\n            The `Content-Length` header field indicates the anticipated size of the\n            payload body. Only sent if there is a body.\n            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n        - name: Content-Type\n          in: header\n          schema:\n            type: string\n          required: true\n          description: |\n            The `Content-Type` header indicates the specific version of the API used\n            to send the payload body.\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'\n        - name: userName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserName'\n        - name: password\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/Password'\n      requestBody:\n        required: false\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/DFSPLoginRequest'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                title: ErrorInformationResponse\n                type: object\n                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.\n                properties:\n                  errorInformation:\n                    title: ErrorInformation\n                    type: object\n                    description: Data model for the complex type ErrorInformation.\n                    properties:\n                      errorCode:\n                        title: ErrorCode\n                        type: string\n                        pattern: '^[1-9]\\d{3}$'\n                        description: |\n                          The API data type ErrorCode is a JSON String of four characters,\n                          consisting of digits only. Negative numbers are not allowed.\n                          A leading zero is not allowed. Each error code in the API is a\n                          four-digit number, for example, 1234, where the first number\n                          (1 in the example) represents the high-level error category,\n                          the second number (2 in the example) represents the low-level error category,\n                          and the last two numbers (34 in the example) represent the specific error.\n                        example: 5100\n                      errorDescription:\n                        title: ErrorDescription\n                        type: string\n                        minLength: 1\n                        maxLength: 128\n                        description: Error description string.\n                        example: This is an error description.\n                      extensionList:\n                        title: ExtensionList\n                        type: object\n                        description: |\n                          Data model for the complex type ExtensionList.\n                          An optional list of extensions, specific to deployment.\n                        properties:\n                          extension:\n                            type: array\n                            items:\n                              title: Extension\n                              type: object\n                              description: Data model for the complex type Extension.\n                              properties:\n                                key:\n                                  title: ExtensionKey\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 32\n                                  description: Extension key.\n                                value:\n                                  title: ExtensionValue\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  description: Extension value.\n                              required:\n                                - key\n                                - value\n                            minItems: 1\n                            maxItems: 16\n                            description: Number of Extension elements.\n                        required:\n                          - extension\n                    required:\n                      - errorCode\n                      - errorDescription\n          headers:\n            Content-Length:\n              required: false\n              schema:\n                type: integer\n              description: |\n                The `Content-Length` header field indicates the anticipated\n                size of the payload body. Only sent if there is a body.\n                **Note:** The API supports a maximum size of 5242880 bytes\n                (5 Megabytes).\n            Content-Type:\n              schema:\n                type: string\n              required: true\n              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '405':\n          description: Method Not Allowed\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '406':\n          description: Not Acceptable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n  /authorize:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /authorize` is used to grant consent by a DFSP user.\n      summary: DFSP user authorization\n      operationId: DFSPAuthorize\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1login/post/parameters/2'\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'\n        - name: userId\n          in: query\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: consentRequestId\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DFSPAuthorizeRequest'\n      responses:\n        '200':\n          description: Response containing secret\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DFSPAuthorizeResponse'\n              example:\n                secret: xx auth secret xx\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /sendOTP:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /sendOTP` is used to send OTP to a DFSP user (most likely through SMS).\n      summary: DFSP Send OTP\n      operationId: SendOTP\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1login/post/parameters/2'\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendOTPRequest'\n            example:\n              userName: dfspa.user.name\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n              message: '9876'\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /verifyOTPorSecret:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /verifyOTPorSecret` is used to verify OTP or Secret received from PISP.\n      summary: /verifyOTPorSecret\n      operationId: VerifyOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1login/post/parameters/2'\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'\n      requestBody:\n        description: Perform verification of OTP or Secret\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyOTPorSecretRequest'\n            examples:\n              sample1:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n                  value: '1234'\n              sample2:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c4\n                  value: xx auth secret xx\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/OTPorSecret/{ID}':\n    get:\n      tags:\n        - DFSPSim\n      description: 'The HTTP request `GET /OTPorSecret/{ID}` is used to get OTP or Secret from DFSP.'\n      summary: Get OTP or Secret for specified consentRequestId\n      operationId: GetOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'\n      responses:\n        '200':\n          description: Response containing details of the OTP or Secret\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOTPorSecretResponse'\n              examples:\n                sample1:\n                  value:\n                    value: '1234'\n                sample2:\n                  value:\n                    value: xx auth secret xx\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/store/consentRequests/{ID}':\n    parameters:\n      - name: ID\n        in: path\n        required: true\n        schema:\n          type: string\n        description: The identifier value.\n      - name: X-Forwarded-For\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |\n          The `X-Forwarded-For` header field is an unofficially accepted standard used\n          for informational purposes of the originating client IP address, as a\n          request might pass multiple proxies, firewalls, and so on. Multiple\n          `X-Forwarded-For` values should be expected and supported by implementers\n          of the API.\n          **Note:** An alternative to `X-Forwarded-For` is defined in\n          [RFC 7239](https://tools.ietf.org/html/rfc7239).\n          However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.\n    get:\n      tags:\n        - DFSPSim\n      operationId: GetConsentRequest\n      summary: GetConsentRequest\n      description: |\n        The HTTP request `GET /store/consentRequests/{ID}` is used by DFSP to load a specified consentRequest.\n      responses:\n        '200':\n          description: Response containing consentRequest details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoreConsent'\n              example:\n                scopes:\n                  - accountId: dfspa.username.1234\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n                  - accountId: dfspa.username.5678\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    post:\n      tags:\n        - DFSPSim\n      operationId: StoreConsentRequest\n      summary: StoreConsentRequest\n      description: |\n        The HTTP request `POST /store/consentRequests/{ID}` is used by a DFSP to store consentRequests.\n      requestBody:\n        description: The consentRequest to store\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StoreConsent'\n            example:\n              scopes:\n                - accountId: dfspa.username.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.username.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\ncomponents:\n  schemas:\n    SecretValue:\n      title: SecretValue\n      type: string\n      minLength: 11\n      maxLength: 128\n    UserId:\n      type: array\n      items:\n        title: AccountAddress\n        type: string\n        description: |\n          A long-lived unique account identifier provided by the DFSP. This MUST NOT\n          be Bank Account Number or anything that may expose a User's private bank\n          account information.\n        pattern: '^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$'\n        minLength: 1\n        maxLength: 1023\n      minItems: 1\n      description: A long-lived unique account identifier provided by the DFSP\n    UserName:\n      title: UserName\n      type: string\n      minLength: 1\n      maxLength: 25\n    Password:\n      title: Password\n      type: string\n      minLength: 1\n      maxLength: 25\n    Message:\n      title: Message\n      type: string\n      description: OTP value or error message\n    DFSPLoginRequest:\n      title: DFSPLoginRequest\n      type: object\n      description: POST /login request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        password:\n          $ref: '#/components/schemas/Password'\n    DFSPAuthorizeRequest:\n      title: DFSPAuthorizeRequest\n      type: object\n      description: POST /authorize request\n      properties:\n        userId:\n          $ref: '#/components/schemas/UserId'\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n    DFSPAuthorizeResponse:\n      title: DFSPAuthorizeResponse\n      type: object\n      description: POST /authorize response\n      properties:\n        secret:\n          $ref: '#/components/schemas/SecretValue'\n      required:\n        - secret\n    SendOTPRequest:\n      title: SendOTPRequest\n      type: object\n      description: POST /sendOTP request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        consentRequestId:\n          title: CorrelationId\n          type: string\n          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n          description: |\n            Identifier that correlates all messages of the same sequence.\n            The API data type UUID (Universally Unique Identifier) is a JSON String\n            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),\n            that is restricted by a regular expression for interoperability reasons.\n            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).\n          example: b51ec534-ee48-4575-b6a9-ead2955b8069\n        message:\n          $ref: '#/components/schemas/Message'\n      required:\n        - userName\n        - consentRequestId\n        - message\n    VerifyOTPorSecretRequest:\n      title: VerifyOTPorSecretRequest\n      type: object\n      description: POST /verifyOTPorSecret request\n      properties:\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n        value:\n          oneOf:\n            - $ref: '#/components/schemas/GetOTPorSecretResponse/properties/value/oneOf/0'\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - consentRequestId\n        - value\n    GetOTPorSecretResponse:\n      title: GetOTPorSecretResponse\n      type: object\n      description: 'Get /OTPorSecret/{ID} response'\n      properties:\n        value:\n          oneOf:\n            - title: OtpValue\n              type: string\n              pattern: '^\\d{3,10}$'\n              description: |\n                The API data type OtpValue is a JSON String of 3 to 10 characters,\n                consisting of digits only. Negative numbers are not allowed.\n                One or more leading zeros are allowed.\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - value\n    StoreConsent:\n      title: StoreConsent\n      type: object\n      description: store consent details\n      properties:\n        scopes:\n          type: array\n          items:\n            title: Scope\n            type: object\n            description: Scope + Account Identifier mapping for a Consent.\n            example: |\n              {\n                accountId: \"dfsp.username.5678\",\n                actions: [ \"accounts.transfer\", \"accounts.getBalance\" ]\n              }\n            properties:\n              accountId:\n                $ref: '#/components/schemas/UserId/items'\n              actions:\n                type: array\n                items:\n                  title: ConsentScopeType\n                  type: string\n                  enum:\n                    - accounts.getBalance\n                    - accounts.transfer\n                  description: |\n                    The scopes requested for a ConsentRequest.\n                    - \"accounts.getBalance\" - Get the balance of a given account.\n                    - \"accounts.transfer\" - Initiate a transfer from an account.\n            required:\n              - accountId\n              - actions\n      required:\n        - scopes\n"
		}
	},
	"Error": "parse: paths: /sendOTP: post: SendOTP: parameters: parse parameter \"\": resolve \"#/paths/~1login/post/parameters/0\" reference: invalid parameter reference: \"#/paths/~1login/post/parameters/0\""
}