{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MLAide/MLAide"
		},
		"file": {
			"name": "swagger.yml",
			"path": "webserver/swagger.yml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 0.0.1\n  title: ML Aide\n  license:\n    name: unspecified\nservers:\n  - url: http://api.mlaide.io/v1\nsecurity:\n  - oauth2: []\npaths:\n  /projects:\n    get:\n      summary: List all projects\n      operationId: listProjects\n      tags:\n        - projects\n      responses:\n        '200':\n          description: An object containing an array of projects\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Projects\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a project\n      operationId: createProject\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Project\"\n      tags:\n        - projects\n      responses:\n        '200':\n          description: Project created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '409':\n          description: Project already exists\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}:\n    get:\n      summary: Info for a specific project\n      operationId: getProjectByKey\n      tags:\n        - projects\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The requested project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/members:\n    get:\n      summary: Get members of a project\n      operationId: getProjectMembers\n      tags:\n        - projects\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The project members\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProjectMembers\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      summary: Create a new or update an existing project member\n      operationId: addOrUpdateProjectMember\n      tags:\n        - projects\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/merge-patch+json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/ProjectMember\"\n      responses:\n        '204':\n          description: Project members were created/updated successfully\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/members/current:\n    get:\n      summary: Get project member for current user\n      operationId: getProjectMembersForCurrentUser\n      tags:\n        - projects\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The project member\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProjectMember\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/members/{email}:\n    delete:\n      summary: Delete a member of a project\n      operationId: deleteProjectMember\n      tags:\n        - projects\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project\n          schema:\n            type: string\n        - name: email\n          in: path\n          required: true\n          description: The email of the user to delete. The email must be url encoded\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Project member created or updated successfully\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs:\n    get:\n      summary: List all runs of a project\n      operationId: listRuns\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the experiments belong to\n          schema:\n            type: string\n        - name: runKeys\n          in: query\n          required: false\n          description: Keys of runs that shall be returned\n          schema:\n            type: array\n            items:\n              type: number\n        - name: experimentKey\n          in: query\n          required: false\n          description: Key of experiment that returned runs shall contain as experimentRef\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An object containing an array of runs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Runs\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a new run\n      operationId: createRun\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Run\"\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run should belong to\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Run created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs/git-diff:\n    get:\n      summary: Get a the diff of the code of two runs\n      operationId: getGitDiff\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the experiments belong to\n          schema:\n            type: string\n        - name: runKey1\n          in: query\n          required: true\n          description: The run key that should be used to build the code diff\n          schema:\n            type: number\n        - name: runKey2\n          in: query\n          required: true\n          description: The run key that should be used to build the code diff\n          schema:\n            type: number\n      responses:\n        '200':\n          description: An object containing an array of git diffs for each file\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GitDiffs\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs/{runKey}:\n    get:\n      summary: Get single run by runKey\n      operationId: getRunByKey\n      description: Get single run by runKey\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: runKey\n          in: path\n          required: true\n          description: The key of the run that should be updated\n          schema:\n            type: number\n      responses:\n        '200':\n          description: An object containing the requested run\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      summary: Partial update an existing run\n      operationId: partialUpdateRun\n      description: \"Update an existing run. This operation executes a partial update.\n        That means, that only properties that should be modified must be contained in the request body.\n        Only the status, parameters and metrics can be updated. If you update parameters or metrics with this\n        operation, all existing parameters/metrics are replaced. If you want to add a parameter/metric to the\n        existing ones, you should use PUT /projects/{projectKey}/runs/{runKey}/parameters or\n        PUT /projects/{projectKey}/runs/{runKey}/metrics\"\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: runKey\n          in: path\n          required: true\n          description: The key of the run that should be updated\n          schema:\n            type: number\n      requestBody:\n        required: true\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: \"#/components/schemas/Run\"\n      responses:\n        '204':\n          description: The update was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs/{runKey}/note:\n    put:\n      summary: Create a new or update the existing note for an existing run\n      operationId: createOrUpdateRunNote\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: runKey\n          in: path\n          required: true\n          description: The key of the run that should be updated\n          schema:\n            type: number\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: This was an awesome run!\n      responses:\n        '200':\n          description: The updated note\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: This was an awesome run!\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs/{runKey}/parameters:\n    patch:\n      summary: Merge/Patch a parameter object into the existing parameter object\n      operationId: updateRunParameters\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: runKey\n          in: path\n          required: true\n          description: The key of the run that should be updated\n          schema:\n            type: number\n      requestBody:\n        required: true\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: \"#/components/schemas/RunParameter\"\n      responses:\n        '204':\n          description: The operation was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/runs/{runKey}/metrics:\n    patch:\n      summary: Merge/Patch a metrics object into the existing metrics object\n      operationId: updateRunMetrics\n      tags:\n        - runs\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: runKey\n          in: path\n          required: true\n          description: The key of the run that should be updated\n          schema:\n            type: number\n      requestBody:\n        required: true\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: \"#/components/schemas/RunMetric\"\n      responses:\n        '204':\n          description: The operation was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/experiments:\n    get:\n      summary: List all experiments of a project\n      operationId: listExperiments\n      tags:\n        - experiments\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the experiments belong to\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An object containing an array of experiments\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiments\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a new experiment\n      operationId: createExperiment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Experiment\"\n      tags:\n        - experiments\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the experiment should belong to\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Experiment created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/experiments/{experimentKey}:\n    get:\n      summary: Get single experiment by experimentKey\n      operationId: getExperimentByKey\n      description: Get single experiment by experimentKey\n      tags:\n        - experiments\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the experiment belongs to\n          schema:\n            type: string\n        - name: experimentKey\n          in: path\n          required: true\n          description: The key of the experiment that should be provided\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An object containing the requested experiment\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      summary: Merge/Patch a experiment object into the existing experiment object\n      operationId: updateExperiment\n      tags:\n        - experiments\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the run belongs to\n          schema:\n            type: string\n        - name: experimentKey\n          in: path\n          required: true\n          description: The key of the experiment that should be updated\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: \"#/components/schemas/Experiment\"\n      responses:\n        '204':\n          description: The operation was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts:\n    get:\n      summary: Get all artifacts of this project\n      operationId: listArtifacts\n      tags:\n        - artifacts\n      parameters:\n        - name: isModel\n          in: query\n          required: false\n          description: Get only artifacts that are models\n          schema:\n            type: boolean\n        - name: runKeys\n          in: query\n          required: false\n          description: Filter for artifacts that are attached to the specified runs. If run keys are specified `isModel` parameter will be ignored.\n          schema:\n            type: array\n            items:\n              type: number\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifacts belong to\n          schema:\n            type: string\n      responses:\n        '200':\n          description: An object containing an array of artifacts\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifacts\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a new artifact\n      operationId: createArtifact\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Artifact\"\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifact should belong to\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Artifact created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts/{artifactName}/latest:\n    get:\n      summary: Get the latest artifact with the specified name\n      operationId: getLatestArtifact\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifacts belong to\n          schema:\n            type: string\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact\n          schema:\n            type: string\n        - name: model-stage\n          in: query\n          required: false\n          description: Filter artifacts by model stage.\n          schema:\n            $ref: \"#/components/schemas/ModelStage\"\n      responses:\n        '200':\n          description: The artifact\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts/{artifactName}/{artifactVersion}:\n    get:\n      summary: Get a specific artifact\n      operationId: getArtifact\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifacts belong to\n          schema:\n            type: string\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact\n          schema:\n            type: string\n        - name: artifactVersion\n          in: path\n          required: true\n          description: The version of the artifact\n          schema:\n            type: number\n      responses:\n        '200':\n          description: The artifact\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Artifact\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts/{artifactName}/{artifactVersion}/files:\n    get:\n      summary: Download all files of the artifact as a ZIP file\n      operationId: downloadArtifact\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifacts belong to\n          schema:\n            type: string\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact that the file should be uploaded to\n          schema:\n            type: string\n        - name: artifactVersion\n          in: path\n          required: true\n          description: The version of the artifact that the file should be uploaded to\n          schema:\n            type: number\n      responses:\n        '200':\n          description: A file stream representing a ZIP file containing all files\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Upload a new file\n      operationId: uploadFile\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: base64\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifact belongs to\n          schema:\n            type: string\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact that the file should be uploaded to\n          schema:\n            type: string\n        - name: artifactVersion\n          in: path\n          required: true\n          description: The version of the artifact that the file should be uploaded to\n          schema:\n            type: number\n      responses:\n        '204':\n          description: File uploaded successfully\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts/{artifactName}/{artifactVersion}/files/{fileId}:\n    get:\n      summary: Download a single file of an artifact\n      operationId: downloadArtifactFile\n      tags:\n        - artifacts\n      parameters:\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the artifacts belong to\n          schema:\n            type: string\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact that the file should be uploaded to\n          schema:\n            type: string\n        - name: artifactVersion\n          in: path\n          required: true\n          description: The version of the artifact that the file should be uploaded to\n          schema:\n            type: number\n        - name: fileId\n          in: path\n          required: true\n          description: The id of the file\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A file stream representing the file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /projects/{projectKey}/artifacts/{artifactName}/{artifactVersion}/model:\n    put:\n      summary: Create or update a model\n      operationId: createOrUpdateModel\n      tags:\n        - artifacts\n      parameters:\n        - name: artifactName\n          in: path\n          required: true\n          description: The name of the artifact\n          schema:\n            type: string\n        - name: artifactVersion\n          in: path\n          required: true\n          description: The version of the artifact\n          schema:\n            type: number\n        - name: projectKey\n          in: path\n          required: true\n          description: The key of the project that the model should belong to\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateOrUpdateModel\"\n      responses:\n        '204':\n          description: Model created\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /users/current:\n    get:\n      summary: Get current user\n      operationId: getCurrentUser\n      tags:\n        - users\n      responses:\n        '200':\n          description: Current user object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      summary: Update current user\n      operationId: updateCurrentUser\n      tags:\n        - users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '204':\n          description: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /users/current/api-keys:\n    get:\n      summary: Get API keys of current user\n      operationId: getApiKeys\n      tags:\n        - users\n      responses:\n        '200':\n          description: List of API keys\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKeys\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a new API key\n      operationId: createApiKey\n      tags:\n        - users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiKey\"\n      responses:\n        '200':\n          description: API key created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /users/current/api-keys/{apiKeyId}:\n    delete:\n      summary: Delete API key\n      operationId: deleteApiKey\n      tags:\n        - users\n      parameters:\n        - name: apiKeyId\n          in: path\n          required: true\n          description: The id of the api key\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Delete was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /users/current/ssh-keys:\n    get:\n      summary: Get SSH keys of current user\n      operationId: getSshKeys\n      tags:\n        - users\n      responses:\n        '200':\n          description: List of SSH keys\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SshKeys\"\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      summary: Create a new SSH key\n      operationId: createSshKey\n      tags:\n        - users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SshKey\"\n      responses:\n        '200':\n          description: SSH key created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SshKey\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n  /users/current/ssh-keys/{sshKeyId}:\n    delete:\n      summary: Delete SSH key\n      operationId: deleteSshKey\n      tags:\n        - users\n      parameters:\n        - name: sshKeyId\n          in: path\n          required: true\n          description: The id of the SSH key\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Delete was successful\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/UnexpectedError'\n\ncomponents:\n  responses:\n    BadRequest:\n      description: Bad request - Invalid Data\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ValidationError\"\n    Forbidden:\n      description: Forbidden - Ressource does not exist, or you have no acccess to it.\n    NotFound:\n      description: Ressource was not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Unauthorized:\n      description: Unauthorized\n    UnexpectedError:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n  schemas:\n    ApiKey:\n      type: object\n      required:\n        - createdAt\n        - description\n        - id\n      properties:\n        apiKey:\n          type: string\n          description: This property is only set in the response of the createApiKey operation\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        description:\n          type: string\n        expiresAt:\n          type: string\n          format: date-time\n        id:\n          type: string\n          readOnly: true\n    ApiKeys:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApiKey\"\n    Artifact:\n      type: object\n      required:\n        - createdAt\n        - createdBy\n        - files\n        - id\n        - name\n        - runKey\n        - type\n        - version\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        createdBy:\n          $ref: \"#/components/schemas/UserRef\"\n        files:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/ArtifactFile\"\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          example: elasticnet-wine-model\n        runKey:\n          type: number\n          example: 1\n        runName:\n          type: string\n          readOnly: true\n          example: linear-regression-with-sklearn\n        type:\n          type: string\n          example: model\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n        version:\n          type: number\n          example: 1\n          readOnly: true\n    ArtifactFile:\n      type: object\n      required:\n        - fileId\n        - fileName\n      properties:\n        fileId:\n          type: string\n          readOnly: true\n        fileName:\n          type: string\n          readOnly: true\n          example: directory/file.txt\n    ArtifactRef:\n      type: object\n      required:\n        - name\n        - version\n      properties:\n        name:\n          type: string\n        version:\n          type: integer\n          format: int32\n    Artifacts:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Artifact\"\n    CreateOrUpdateModel:\n      required:\n        - stage\n      properties:\n        note:\n          type: string\n        stage:\n          $ref: \"#/components/schemas/ModelStage\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          example: 404\n        message:\n          type: string\n          example: The requested resource does not exist\n    Experiment:\n      type: object\n      required:\n        - createdAt\n        - key\n        - name\n        - status\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        key:\n          type: string\n          example: linear-regression-with-sklearn\n        name:\n          type: string\n          example: linear regression with sklearn\n        status:\n          type: string\n          enum:\n            - TODO\n            - IN_PROGRESS\n            - COMPLETED\n        tags:\n          type: array\n          items:\n            type: string\n          example:\n            - sklearn\n            - failed\n    Experiments:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Experiment\"\n    Git:\n      type: object\n      required:\n        - commitHash\n        - repositoryUri\n      properties:\n        commitTime:\n          type: string\n          format: date-time\n        commitHash:\n          type: string\n          example: ca82a6dff817ec66f44342007202690a93763949\n        isDirty:\n          type: boolean\n        repositoryUri:\n          type: string\n          format: uri\n    GitDiff:\n      type: object\n      required:\n        - fileName\n        - diff\n      properties:\n        fileName:\n          type: string\n          readOnly: true\n        diff:\n          type: string\n          readOnly: true\n    GitDiffs:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/GitDiff\"\n    Model:\n      type: object\n      readOnly: true\n      required:\n        - createdAt\n        - createdBy\n        - stage\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        createdBy:\n          $ref: \"#/components/schemas/UserRef\"\n        modelRevisions:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/ModelRevision\"\n        stage:\n          $ref: \"#/components/schemas/ModelStage\"\n        updatedAt:\n          type: string\n          format: date-time\n          readOnly: true\n    ModelStage:\n      type: string\n      default: NONE\n      enum:\n        - NONE\n        - STAGING\n        - PRODUCTION\n        - ABANDONED\n        - DEPRECATED\n    ModelRevision:\n      type: object\n      readOnly: true\n      required:\n        - createdAt\n        - createdBy\n        - newStage\n        - oldStage\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n        createdBy:\n          $ref: \"#/components/schemas/UserRef\"\n        note:\n          type: string\n        newStage:\n          $ref: \"#/components/schemas/ModelStage\"\n        oldStage:\n          $ref: \"#/components/schemas/ModelStage\"\n    Project:\n      type: object\n      required:\n        - createdAt\n        - key\n        - name\n      properties:\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        key:\n          type: string\n          description: The unique key of a project. The project key must only include characters, digits and hyphens.\n          example: my-first-ml-project\n        name:\n          type: string\n          example: My First ML Project\n    ProjectMember:\n      type: object\n      required:\n        - email\n        - nickName\n        - role\n        - userId\n      properties:\n        email:\n          type: string\n        nickName:\n          type: string\n          readOnly: true\n        role:\n          type: string\n          enum:\n            - OWNER\n            - CONTRIBUTOR\n            - VIEWER\n        userId:\n          type: string\n          readOnly: true\n    ProjectMembers:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ProjectMember\"\n    Projects:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Project\"\n    Run:\n      type: object\n      required:\n        - createdBy\n        - createdAt\n        - id\n        - startTime\n        - status\n      properties:\n        artifacts:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/ArtifactRef\"\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        createdBy:\n          $ref: \"#/components/schemas/UserRef\"\n        endTime:\n          type: string\n          format: date-time\n          readOnly: true\n        experimentRefs:\n          type: array\n          items:\n            properties:\n              experimentKey:\n                type: string\n        git:\n          $ref: \"#/components/schemas/Git\"\n        key:\n          type: number\n          readOnly: true\n          example: 1\n        metrics:\n          $ref: \"#/components/schemas/RunMetric\"\n        name:\n          type: string\n          example: training model with sklearn\n        note:\n          type: string\n          example: should try better though\n        parameters:\n          $ref: \"#/components/schemas/RunParameter\"\n        startTime:\n          type: string\n          format: date-time\n          readOnly: true\n        status:\n          type: string\n          enum:\n            - RUNNING\n            - COMPLETED\n            - FAILED\n          readOnly: true\n        usedArtifacts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ArtifactRef\"\n    Runs:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Run\"\n    RunMetric:\n      type: object\n      additionalProperties: true\n      example:\n        acc: 98\n        rmse: 98\n    RunParameter:\n      type: object\n      additionalProperties: true\n      example:\n        batch_size: 512\n        mse: 0.1\n    SshKey:\n      type: object\n      required:\n        - createdAt\n        - description\n        - id\n      properties:\n        publicKey:\n          type: string\n          description: The public key of the SSH key pair\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        description:\n          type: string\n        expiresAt:\n          type: string\n          format: date-time\n        id:\n          type: string\n          readOnly: true\n    SshKeys:\n      type: object\n      required:\n        - items\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApiKey\"\n    User:\n      type: object\n      readOnly: true\n      required:\n        - email\n        - id\n        - nickName\n        - userId\n      properties:\n        email:\n          type: string\n          readOnly: false\n          example: adam-test@mlaide.com\n        firstName:\n          type: string\n          readOnly: false\n          example: Adam\n        lastName:\n          type: string\n          readOnly: false\n          example: Test\n        nickName:\n          type: string\n          readOnly: false\n          example: Alice\n        userId:\n          type: string\n          readOnly: true\n          example: 5def26a1-a932-404a-998c-aabf84994dd0\n    UserRef:\n      type: object\n      readOnly: true\n      required:\n        - nickName\n        - userId\n      properties:\n        nickName:\n          type: string\n          readOnly: true\n          example: Alice\n        userId:\n          type: string\n          readOnly: true\n          example: 5def26a1-a932-404a-998c-aabf84994dd0\n    ValidationError:\n      type: object\n      readOnly: true\n      required:\n        - code\n        - message\n        - violations\n      properties:\n        code:\n          type: integer\n          format: int32\n          example: 400\n        message:\n          type: string\n          example: Validation failed for argument [0] in public org.springframework...\n        violations:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/ViolationRef\"\n    ViolationRef:\n      type: object\n      readOnly: true\n      required:\n        - fieldName\n        - message\n      properties:\n        fieldName:\n          type: string\n          readOnly: true\n          example: key\n        message:\n          type: string\n          readOnly: true\n          example: muss mit \\\"^[a-zA-Z0-9-]+(?\u003c!-)$\\\" übereinstimmen\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      description: This API uses OAuth 2 with the Authorization Code Flow with Proof Key for Code Exchange (PKCE).\n      flows:\n        authorizationCode:\n          authorizationUrl: https://mlaide-dev.eu.auth0.com/authorize\n          tokenUrl: https://mlaide-dev.eu.auth0.com/oauth/token\n          scopes:\n            projects:create: Create new projects\n            projects:edit: Edit existing projects"
		}
	},
	"Error": "make ir: path \"/projects/{projectKey}/artifacts/{artifactName}/{artifactVersion}/files\": post: requestBody: contents: application/octet-stream: octet stream with schema not supported"
}